{"signature": "val dependencyInsightModuleName =", "body": "<EOL><INDENT><INDENT><INDENT>if (isPublishedLibrary)<EOL>"}
{"signature": "val bFir =", "body": "other.memberWithBaseScope.member.fir<EOL>"}
{"signature": "val serialProperty =", "body": "serialPropertiesMap[propertyDescriptor]<EOL>"}
{"signature": "var outer =", "body": "classifier.outerClass<EOL>"}
{"signature": "val testRunNodes =", "body": "testRunProvider.getTestRuns(testCaseId, testRunSettings)<EOL>"}
{"signature": "fun beginTestFile(fileName: String) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(null, currentTestFileName)<EOL><INDENT><INDENT><INDENT>currentTestFileName = fileName<EOL><INDENT><INDENT>}"}
{"signature": "val hiMatch =", "body": "regex.find(<STR_LIT>)!!<EOL>"}
{"signature": "val CONTINUATION_RESULT_FIELD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun wrongParametersDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT>expectedDiagnostic: TextDiagnostic,<EOL><INDENT><INDENT><INDENT><INDENT>actualDiagnostic: TextDiagnostic,<EOL><INDENT><INDENT><INDENT><INDENT>start: Int,<EOL><INDENT><INDENT><INDENT><INDENT>end: Int<EOL><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>actualMessages.add(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CheckerTestUtilTest.wrongParameters(expectedDiagnostic.asString(), actualDiagnostic.asString(), start, end)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val KLIB_PROPERTY_HEADER =", "body": "<STR_LIT><EOL>"}
{"signature": "fun enterBlock(block: FirBlock) {", "body": "<EOL><INDENT><INDENT>graphBuilder.enterBlock(block).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (call.dispatchReceiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.dispatchReceiver = serializeExpression(call.dispatchReceiver!!)<EOL><INDENT><INDENT>}"}
{"signature": "val requiredSymbol =", "body": "getArrayContentEqualsSymbol(type)<EOL>"}
{"signature": "when (propertyOrField) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrPropertyOrIrField.Field -> replacements.getMfvcFieldNode(propertyOrField.field)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrPropertyOrIrField.Property -> replacements.getMfvcPropertyNode(propertyOrField.property)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val irMeasurements =", "body": "measurements.filterIsInstance<IRMeasurement>()<EOL>"}
{"signature": "fun setTypeVariable(value: TV) {", "body": "storage = value }"}
{"signature": "package renaming enabled,<EOL>.", "body": ""}
{"signature": "import constants.", "body": "*<EOL>"}
{"signature": "if (add(<NUM_LIT>, <NUM_LIT>) !== <NUM_LIT>) {", "body": "<EOL><INDENT>throw <STR_LIT>;<EOL>}"}
{"signature": "if (typealiasedClassSymbol.classKind != ClassKind.ANNOTATION_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val jPackage =", "body": "c.components.finder.findPackage(fqName) ?: return null<EOL>"}
{"signature": "val cachedSymbolBasedPackage =", "body": "symbolBasedPackagesCache[fqName]<EOL>"}
{"signature": "for (i in (<NUM_LIT>u downTo <NUM_LIT>u step <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT><NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "for (annotation in this) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.addExtensionOrNull(extension, annotationSerializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT>}"}
{"signature": "val minus =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u - <NUM_LIT>u<!><EOL>"}
{"signature": "val existingValue =", "body": "optionsByPluginId[pluginId]<EOL>"}
{"signature": "val agent =", "body": "testInstrumenterOutputs.singleFile<EOL>"}
{"signature": "while (currentInsn != null) {", "body": "<EOL><INDENT><INDENT><INDENT>renderInstruction(currentInsn, labelMappings)<EOL><INDENT><INDENT><INDENT>currentInsn = currentInsn.next<EOL><INDENT><INDENT>}"}
{"signature": "val str =", "body": "<STR_LIT><EOL>"}
{"signature": "fun repeatedAnnotation(annotation: AnnotationDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val annotationEntry = (annotation.source as? KotlinSourceElement)?.psi as? KtAnnotationEntry ?: return<EOL><INDENT><INDENT><INDENT>trace.report(REPEATED_ANNOTATION.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val suspensionBlock =", "body": "JsIrBuilder.buildBlock(unit, listOf(irReturn))<EOL>"}
{"signature": "val BuildCExports =", "body": "createSimpleNamedCompilerPhase<PsiToIrContext, FrontendPhaseOutput.Full, CAdapterExportedElements>(<EOL>"}
{"signature": "val fileComponents =", "body": "file.absolutePath.split(File.separator)<EOL>"}
{"signature": "if (mappedProjection.kind == ProjectionKind.INVARIANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return convertProjectionKindToConeTypeProjection(projection.kind)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val O =", "body": "<STR_LIT><EOL>"}
{"signature": "package for classifier ${classifier.", "body": "fqName}; expected '$pkg', got '${classifier.pkg}'\")<EOL>"}
{"signature": "for (i in <NUM_LIT> .. <n) {", "body": "}"}
{"signature": "if (!javaField.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>dispatchReceiverType = dispatchReceiver<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val matchingParsers =", "body": "InternalArgumentParser.PARSERS.filter { it.canParse(arg) }<EOL>"}
{"signature": "val ktLightMember =", "body": "lightElement.getParentOfType<KtLightMember<*>>(false) ?: return true // hope it will never happen"}
{"signature": "val compilationState =", "body": "state.getCompilationState(initialConfiguration) as ReplCompilationState<*><EOL>"}
{"signature": "if (takeA(a as? A ?: return)) {", "body": "<EOL><INDENT><INDENT>a.foo()<EOL><INDENT>}"}
{"signature": "val valueB =", "body": "flag.get(flagsB)<EOL>"}
{"signature": "if (declaresDefaultValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.record(BindingContext.VALUE_PARAMETER_AS_PROPERTY, parameterDescriptor, propertyDescriptor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val decoysTransformer =", "body": "CreateDecoysTransformer(<EOL>"}
{"signature": "val newIndent =", "body": "<STR_LIT>.repeat(context.currentIndent * context.indentUnitValue)<EOL>"}
{"signature": "val notCallableTypeConstructor =", "body": "<EOL><INDENT><INDENT>csBuilder.getProperSuperTypeConstructors(expectedType)<EOL>"}
{"signature": "val localX =", "body": "x<EOL>"}
{"signature": "val resolvedTypeWithDiagnostic =", "body": "resolveType(functionTypeRef, data)<EOL>"}
{"signature": "if (!type.isExportable(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val source = valueParameter.source ?: declaration.source<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirJsErrors.NON_EXPORTABLE_TYPE, <STR_LIT>, type, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val GENERATED_MESSAGE =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val nativeMainDependencies =", "body": "dependencies[<STR_LIT>].filterNativePlatformDependencies()<EOL>"}
{"signature": "val genericSignatureRegex =", "body": "Regex(<STR_LIT>)"}
{"signature": "when (j) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> if (episode) <STR_LIT> else if (ep<NUM_LIT>) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> if (episode) <STR_LIT> else if (ep<NUM_LIT>) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> if (episode) <STR_LIT> else if (ep<NUM_LIT>) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> if (episode) <STR_LIT> else if (ep<NUM_LIT>) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val filteredOverridden =", "body": "filterOutOverridden(realOverridden, processDirectOverridden)<EOL>"}
{"signature": "val strField<NUM_LIT> =", "body": "it.strField<NUM_LIT><EOL>"}
{"signature": "for (parameter in owner.typeParameterSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>typeParameter(parameter.name)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val SAVE_COROUTINE_STATE<INDENT><INDENT>  =", "body": "<STR_LIT><EOL>"}
{"signature": "val sanitizedAndroidVersionString =", "body": "if (agpVersionString == TestVersions.AGP.MAX_SUPPORTED) <STR_LIT> else agpVersionString<EOL>"}
{"signature": "val fromSlotAdjusted =", "body": "fromSlot.rem(SLOTS_PER_INT)<EOL>"}
{"signature": "val declarationsResolveTransformerForAnnotationArguments =", "body": "FirDeclarationsResolveTransformerForAnnotationArguments(this)<EOL>"}
{"signature": "val firstWord =", "body": "<!EVALUATED: `logIntrinsic.kt:<NUM_LIT>`!>log(<STR_LIT>)<!><EOL>"}
{"signature": "val scriptDefinition =", "body": "ScriptDefinitionProvider.getInstance(environment.project)!!.findDefinition(script)!!<EOL>"}
{"signature": "fun build() {", "body": "<INDENT><INDENT>// Feel free to implement later if it is required<INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<INDENT>}"}
{"signature": "val dispatchReceiverRepresentativeClass =", "body": "dispatchReceiver.type.erasedUpperBound<EOL>"}
{"signature": "val unresolvedNames =", "body": "mutableSetOf<Name>()<EOL>"}
{"signature": "fun booleanToString() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, true.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, false.toString())<EOL><INDENT>}"}
{"signature": "val firForLazyFunction =", "body": "calculateFirForLazyDeclaration(<EOL>"}
{"signature": "val expectedSourcesJarTasks =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val linkToLink =", "body": "createTempDirectory().cleanupRecursively().resolve(<STR_LIT>).tryCreateSymbolicLinkTo(link) ?: return<EOL>"}
{"signature": "if (typeConstructor != variable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getDependentTypeParameters(typeConstructor, dependentTypeParameters + dependentTypeParametersSeen)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val targetJar =", "body": "project.tasks.withType(Jar::class.java).named(artifactsTaskName)<EOL>"}
{"signature": "val unexpandedClassId =", "body": "annotation.unexpandedClassId ?: continue<EOL>"}
{"signature": "var approximated =", "body": "false<EOL>"}
{"signature": "fun saveEagerInitializedProperties() {", "body": "<EOL><INDENT><INDENT>outputFiles.eagerInitializedPropertiesFile!!.writeBytes(<EOL><INDENT><INDENT><INDENT><INDENT>EagerInitializedPropertySerializer.serialize(generationState.eagerInitializedFiles))<EOL><INDENT>}"}
{"signature": "val usesPropertyParameterCache =", "body": "ConcurrentHashMap<IrSymbol, Boolean>()<EOL>"}
{"signature": "if (referredSymbol is FirConstructorSymbol && referredSymbol.getContainingClassSymbol(context.session)?.classKind == ClassKind.ANNOTATION_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.CALLABLE_REFERENCE_TO_ANNOTATION_CONSTRUCTOR, context)<EOL><INDENT><INDENT>}"}
{"signature": "val librariesAreActuallyGenerated =", "body": "checkLibrariesInDistribution()<EOL>"}
{"signature": "fun noParameters() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val declarationBlock =", "body": "JsCompositeBlock()<EOL>"}
{"signature": "val scripts =", "body": "mutableListOf<IrScript>()<EOL>"}
{"signature": "val typeInSystem =", "body": "builder.typeInSystem(context.call, candidateDescriptor.returnType ?: return) ?: return<EOL>"}
{"signature": "val byteClass =", "body": "builtIns.byte.toIrSymbol()<EOL>"}
{"signature": "fun inlineFunWithInvokeNonInline(noinline s: (p: Int) -> Unit, noinline ext: Int.(p: Int) -> Unit) {", "body": "<EOL><INDENT>subInline(s, ext)<EOL><INDENT>subNoInline(s, ext)<EOL>}"}
{"signature": "for (declaration in klass.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processConstructedClassDeclaration(declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (container !is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>container = container.containingDeclaration ?: return false<EOL><INDENT><INDENT>}"}
{"signature": "if (!(superClass.isExpect || (superClass.module == currentModule && !superClass.isFromCommonSource))) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.SEALED_INHERITOR_IN_DIFFERENT_MODULE.on(typeReference))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (group == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sortedModules[index] = module<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (this@SymbolLightMethod.containingClass is SymbolLightClassForInterfaceDefaultImpls) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.addParameter(SymbolLightParameterForDefaultImplsReceiver(this@SymbolLightMethod))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import backend.", "body": "asmutil.AsmUtil.doSmth<EOL>"}
{"signature": "fun visitFunctionTypeParameter(functionTypeParameter: FirFunctionTypeParameter, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionTypeParameter(functionTypeParameter)<EOL><INDENT>}"}
{"signature": "if (sinceVersion != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>append(sinceVersion.versionString)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptDeclarationsIter =", "body": "script.declarations.listIterator()<EOL>"}
{"signature": "val replOutHeader =", "body": "arrayOf(<EOL>"}
{"signature": "val nameResolver =", "body": "NameResolverImpl(packageFragmentProto.strings, packageFragmentProto.qualifiedNames)<EOL>"}
{"signature": "fun fromBoth(name: Name) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "package main<NUM_LIT><EOL>.", "body": ""}
{"signature": "val EXPECTED_OCCURRENCES_PATTERN =", "body": "Pattern.compile(<STR_LIT>)"}
{"signature": "val jvmRun =", "body": "configureJvmTask()<EOL>"}
{"signature": "package ${LoadDescriptorUtil.", "body": "TEST_PACKAGE_FQNAME}\", packageView.isEmpty())<EOL>"}
{"signature": "when (projection) {", "body": "<EOL><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.IN -> Variance.IN_VARIANCE<EOL><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.OUT -> Variance.OUT_VARIANCE<EOL><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.INV -> Variance.INVARIANT<EOL><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.STAR -><EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val functionAtIndex =", "body": "function.targetDeclarations[index] ?: return<EOL>"}
{"signature": "val arrayAccessProto =", "body": "proto.arrayAccess<EOL>"}
{"signature": "val smartCastedType =", "body": "typeStatement.smartCastedType(session.typeContext, originalType)<EOL>"}
{"signature": "for (checker in additionalCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.checkEntries(entries, actualTargets.defaultTargets, trace, annotated, languageVersionSettings)<EOL><INDENT><INDENT>}"}
{"signature": "for (target in javaTargets) {", "body": "<EOL><INDENT><INDENT><INDENT>vararg.elements.add(<EOL><INDENT><INDENT><INDENT><INDENT>IrGetEnumValueImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>UNDEFINED_OFFSET, UNDEFINED_OFFSET, symbols.elementTypeEnum.defaultType, target.symbol<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun mavenPublication(code: MavenPublication.() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>mavenPublicationConfigurations += code<EOL><INDENT><INDENT>}"}
{"signature": "for (s in <!ITERATOR_ON_NULLABLE!>container<!>) {", "body": "}"}
{"signature": "if (canGoNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>currentIndex++<EOL><INDENT><INDENT>}"}
{"signature": "val xx<NUM_LIT> =", "body": "<STR_LIT> + <!INVALID_IF_AS_EXPRESSION!>if<!> (true) <NUM_LIT><EOL>"}
{"signature": "val adjustedMargin =", "body": "minMargin + (minMargin / count.toFloat())<EOL>"}
{"signature": "val executionTimeFreeCompilerArgs =", "body": "task().executionTimeFreeCompilerArgs<EOL>"}
{"signature": "fun generateModule(irModuleFragment: IrModuleFragment) {", "body": "<EOL><INDENT><INDENT>acceptVisitor(irModuleFragment, declarationGenerator)<EOL><INDENT>}"}
{"signature": "val setD =", "body": "HashSet<Holder<Dat>>()<EOL>"}
{"signature": "if (index == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val additionalModules =", "body": "parseBitcodeFiles(additionalBitcodeFiles)<EOL>"}
{"signature": "if (block == this && globalCatchBlock != null) {", "body": "<EOL><INDENT><INDENT><INDENT>successors += globalCatchBlock<EOL><INDENT><INDENT>}"}
{"signature": "val subjectType =", "body": "subjectType ?: return null<EOL>"}
{"signature": "var usePsiClassFilesReading =", "body": "false<EOL>"}
{"signature": "if (conditionWhenFalse != null) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(ConditionalEffect(conditionWhenFalse, ESReturns(ESConstants.falseValue)))<EOL><INDENT><INDENT>}"}
{"signature": "package pcg;<EOL>.", "body": ""}
{"signature": "if (calledInPlace.isNotEmpty()) {", "body": "<INDENT><INDENT><INDENT>// Fake edge to enforce ordering.<INDENT><INDENT><INDENT>addEdge(enterNode, exitNode, preferredKind = EdgeKind.DeadForward, propagateDeadness = false)<INDENT><INDENT>}"}
{"signature": "val hasKotlin =", "body": "HasKotlinMarker(projectDescriptor.dataManager)<EOL>"}
{"signature": "fun testQuantifiersWithSurrogatesSupplementary() {", "body": "<EOL><INDENT><INDENT>val patString = <STR_LIT><EOL><INDENT><INDENT>var testString = <STR_LIT><EOL><INDENT><INDENT>val regex = Regex(patString)<EOL><INDENT><INDENT>assertTrue(regex.matches(testString))<EOL><EOL><INDENT><INDENT>testString = <STR_LIT><EOL><INDENT><INDENT>assertTrue(regex.matches(testString))<EOL><INDENT>}"}
{"signature": "val baiaif =", "body": "BAIAIF()<EOL>"}
{"signature": "var hasSomeReceiver =", "body": "true<EOL>"}
{"signature": "for (entry in destructuringDeclaration.entries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val descriptor = lazyDeclarationResolver.resolveToDescriptor(entry) as PropertyDescriptor<EOL><EOL><INDENT><INDENT><INDENT><INDENT>c.destructuringDeclarationEntries[entry] = descriptor<EOL><INDENT><INDENT><INDENT><INDENT>ForceResolveUtil.forceResolveAllContents(descriptor.annotations)<EOL><INDENT><INDENT><INDENT><INDENT>registerTopLevelFqName(topLevelFqNames, entry, descriptor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (use.rule.isMatch(path, isDirectory)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>use.used = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return use<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isNextVariable =", "body": "initializer is FirFunctionCall &&<EOL>"}
{"signature": "if (bar != null) {", "body": "<EOL><INDENT><INDENT>x.bar<!UNSAFE_CALL!>.<!>length<EOL><INDENT>}"}
{"signature": "val isSupplCodePoint =", "body": "Char.isSupplementaryCodePoint(ch)<EOL>"}
{"signature": "val CREATE_FROM_PARCEL_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val moduleIdentifier =", "body": "(resolvedDependencyResult.requested as DefaultModuleComponentSelector).moduleIdentifier<EOL>"}
{"signature": "fun commentPreviousInstr(text: () -> String) {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.PSEUDO_COMMENT_PREVIOUS_INSTR, SourceLocation.NoLocation(<STR_LIT>), WasmImmediate.ConstString(text()))<EOL><INDENT>}"}
{"signature": "if (name != null && !isNameInitialized(name, it)) {", "body": "<EOL><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(BuiltInsProtoBuf.propertySetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(BuiltInsProtoBuf.propertySetterAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val forwardDeclarationsModuleData =", "body": "BinaryModuleData.createDependencyModuleData(<EOL>"}
{"signature": "val ordered =", "body": "result.values.sortedBy { it.key }.map { it.toPair() }<EOL>"}
{"signature": "import testPackCase<NUM_LIT>Case<NUM_LIT>Companion.", "body": "get<EOL>"}
{"signature": "val charCode =", "body": "char.hexToInt()<EOL>"}
{"signature": "val typeConstructors =", "body": "typeParameters.mapTo(mutableSetOf()) { it.getTypeConstructor() }<EOL>"}
{"signature": "val argumentTypeReferenceElement =", "body": "argumentElement?.typeReference<EOL>"}
{"signature": "val serialDescGetter =", "body": "irGet(descriptorGetterSymbol.owner.returnType, irThis(), descriptorGetterSymbol)<EOL>"}
{"signature": "val crossCompiledFiles =", "body": "sources.filter { it.isCrossCompiled }.map { it.file }<EOL>"}
{"signature": "import sockets.", "body": "*<EOL>"}
{"signature": "val newLibraryLayout =", "body": "KotlinLibraryLayoutForWriter(newLibraryFile, newLibraryTmpDir)<EOL>"}
{"signature": "fun testInternalFromForeignModule() {", "body": "<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(compileLibrary(<STR_LIT>)))<EOL><INDENT>}"}
{"signature": "val commonizableNumberIdentifiers =", "body": "commonizableNumberTypes.flatMap { it.numbers.keys }.toSet()<EOL>"}
{"signature": "val arrayClasses =", "body": "mapOf(<EOL>"}
{"signature": "val thrownExpression =", "body": "expression.thrownExpression ?: return<EOL>"}
{"signature": "if (asmReturnType == Type.VOID_TYPE) {", "body": "<EOL><INDENT><INDENT><INDENT>treeMaker.Block(<NUM_LIT>, JavacList.nil())<EOL><INDENT><INDENT>}"}
{"signature": "val SCRIPT_RUNTIME_TEMPLATES_PACKAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val fullRangeValues =", "body": "(<NUM_LIT>.size).map { subject.nextDouble(-Double.MAX_VALUE, Double.MAX_VALUE) }.distinct()<EOL>"}
{"signature": "var fail =", "body": "false<EOL>"}
{"signature": "val radixLong =", "body": "fromInt(radix)<EOL>"}
{"signature": "fun packageName(value: String) {", "body": "<EOL><INDENT><INDENT>packageName = value<EOL><INDENT>}"}
{"signature": "val maxInt =", "body": "Int.MAX_VALUE.toBigInteger()<EOL>"}
{"signature": "if (globalResult != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>throw RuntimeException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val newPattern =", "body": "LuLtLlMappingPattern(pattern.start, pattern.categoryCode, pattern.mapping)<EOL>"}
{"signature": "if (config.isInlineDisabled) {", "body": "<EOL><INDENT><INDENT><INDENT>context.ktDiagnosticReporter.at(expression, irFunction).report(BackendErrors.NON_LOCAL_RETURN_IN_DISABLED_INLINE)<EOL><INDENT><INDENT><INDENT>genThrow(mv, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val namespace =", "body": "ExtensionContext.Namespace.create(Fe<NUM_LIT>HeaderGeneratorExtension::class)<EOL>"}
{"signature": "val actualOutput =", "body": "invokeImportsDumperAndGrabOutput(testDataDir, tmpdir, actualDumpFile)<EOL>"}
{"signature": "if (modifier != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return markElement(modifier)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (overridden === callableSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!baseScope.processDirectOverriddenInBaseScope(callableSymbol, processor)) return ProcessorAction.STOP<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinTarget =", "body": "kotlinTargets[target] ?: error(<STR_LIT>)<EOL>"}
{"signature": "val outputsB =", "body": "TransformOutputsMock(tmp.newFolder())<EOL>"}
{"signature": "val counterToCallStackMapThreadLocal =", "body": "ThreadLocal<MutableMap<CounterWithExclude, CallStackWithTime>>()<EOL>"}
{"signature": "for (anno in noArgExtension.myAnnotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>options += SubpluginOption(ANNOTATION_ARG_NAME, anno)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (arg is FirLiteralExpression<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>withExpectedType(arg.kind.expectedConeType(session).toFirResolvedTypeRef())<EOL><INDENT><INDENT>}"}
{"signature": "for (i in 'f' downTo 'a' step it) {", "body": "sb.append(i) }"}
{"signature": "val irSymbol =", "body": "firSymbol.toSymbol(c, ConversionTypeOrigin.DEFAULT) as? IrClassSymbol ?: return@lazy null<EOL>"}
{"signature": "val x<NUM_LIT>a =", "body": "@Ann foo) {}<EOL>"}
{"signature": "val coerceTo =", "body": "TranslationUtils.getReturnTypeForCoercion(property.descriptor)<EOL>"}
{"signature": "if (it.fir.origin.generated) {", "body": "<EOL><INDENT><INDENT><INDENT>result += it.fir<EOL><INDENT><INDENT>}"}
{"signature": "fun debug(msg: String) {", "body": "<EOL><INDENT><INDENT>log.debug(transformMessage(msg))<EOL><INDENT>}"}
{"signature": "if (<NUM_LIT> > <NUM_LIT> && break && <NUM_LIT> > <NUM_LIT>) {", "body": "<EOL><EOL><INDENT><INDENT>}"}
{"signature": "else if (capturedLambda !== lambda) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val taskConfig =", "body": "KaptGenerateStubsConfig(myProject, kotlinExtension, kaptExtension)<EOL>"}
{"signature": "val FIR_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val modifiedEntries =", "body": "LinkedHashMap<KEY, VALUE>()<EOL>"}
{"signature": "val functionTypeInfo =", "body": "expressionTypingServices.getTypeInfo(psiCallArgument.expression, actualContext)<EOL>"}
{"signature": "val overrideFqn =", "body": "nameSuggestion.suggest(override, bindingContext)!!<EOL>"}
{"signature": "val expectType =", "body": "substitutor.safeSubstitute(expectSupertype)<EOL>"}
{"signature": "val cCallSymbolName =", "body": "callee.getAnnotationArgumentValue<String>(RuntimeNames.cCall, <STR_LIT>)!!<EOL>"}
{"signature": "val ANNOTATIONS_TO_TREAT_AS_EXPORTED =", "body": "listOf(<EOL>"}
{"signature": "if (companionSymbol.classId.shortClassName == CREATOR_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(companionSymbol.source, KtErrorsParcelize.CREATOR_DEFINITION_IS_NOT_ALLOWED, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val functionCallRef =", "body": "Namer.getFunctionApplyRef(functionRef)<EOL>"}
{"signature": "fun finalize() {", "body": "<EOL><INDENT><INDENT>dispose()<EOL><INDENT>}"}
{"signature": "val parentIter =", "body": "parents.iterator()<EOL>"}
{"signature": "val suspendModifier =", "body": "if (containsSuspendBoxMethod(fileWithBox)) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val classStack =", "body": "mutableListOf<IrClass>()<EOL>"}
{"signature": "if (xx!!.hashCode() == <NUM_LIT> || y!!.hashCode() == <NUM_LIT> || z!!.hashCode() == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>xx.length<EOL><INDENT><INDENT>y<!UNSAFE_CALL!>.<!>length<EOL><INDENT><INDENT>z<!UNSAFE_CALL!>.<!>length<EOL><INDENT>}"}
{"signature": "if (isActive) {", "body": "<EOL><INDENT><INDENT><INDENT>block()<EOL><INDENT><INDENT>}"}
{"signature": "for (overridden in member.overriddenSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>val owner = overridden.owner as T<EOL><INDENT><INDENT><INDENT>realOverrides.remove(owner.toKey())<EOL><INDENT><INDENT><INDENT>excludeRepeated(owner)<EOL><INDENT><INDENT>}"}
{"signature": "if (resolutionSubjectForMessage != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>debugInfo.append(<STR_LIT>).append(resolutionSubjectForMessage)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (descriptor is VariableDescriptor && descriptor !is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>captureIfNeed(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "fun setMethodImplForInt<NUM_LIT>Array(obj: Int<NUM_LIT>Array, index: Int, value: Byte) {", "body": "js(<STR_LIT>) }"}
{"signature": "if (useOldBackend && languageVersionSettings.languageVersion >= LanguageVersion.KOTLIN_<NUM_LIT>_<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.report(<EOL><INDENT><INDENT><INDENT><INDENT>CompilerMessageSeverity.ERROR,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (val s = peek()) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "while (traverseOnce(visitor, nodeMap)) {", "body": "<INDENT><INDENT>// had changes, continue<INDENT>}"}
{"signature": "val fieldIds<NUM_LIT> =", "body": "fields<NUM_LIT>.keys.intersect(relevantFieldIds).sorted()<EOL>"}
{"signature": "val kotlinNativeInternalPackage =", "body": "kotlinNativePackage.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val VS_IT =", "body": "VariableControlFlowState(InitState.INITIALIZED, true)<EOL>"}
{"signature": "val containingDeclarationId =", "body": "ClassId(classId.packageFqName, parentId, isLocal = false)<EOL>"}
{"signature": "for ((attr, value) in info.attributes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tableData(attr.htmlId, value.toHtmlString().withTag(<STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val irSerializer =", "body": "if (<EOL>"}
{"signature": "val startLocationInfo =", "body": "position()?.start<EOL>"}
{"signature": "val allProjectsData =", "body": "gmtParams.projectData<EOL>"}
{"signature": "val rememberComposableLambdaN =", "body": "<EOL><INDENT><INDENT>internalTopLevelCallableId(KtxNameConventions.REMEMBER_COMPOSABLE_LAMBDAN)<EOL>"}
{"signature": "val maybeFakeOverrideOfMultiFileBridge =", "body": "expression.symbol.owner<EOL>"}
{"signature": "val STEP_OVER =", "body": "<NUM_LIT><EOL>"}
{"signature": "val a<NUM_LIT>c =", "body": "a<NUM_LIT>.copy()<EOL>"}
{"signature": "val supportedOn =", "body": "annotation.supportedOn<EOL>"}
{"signature": "fun invalidateElement(element: KtElement) {", "body": "<EOL><INDENT><INDENT>val container = getContainerKtElement(element)<EOL><INDENT><INDENT>structureElements.remove(container)<EOL><INDENT>}"}
{"signature": "val thisExpression =", "body": "arguments.getArgumentExpression()!!<EOL>"}
{"signature": "for (i in 'A' .. N) {", "body": "<EOL><INDENT><INDENT>sum += i.toInt()<EOL><INDENT>}"}
{"signature": "var noMultiplyConditionBranches =", "body": "true<EOL>"}
{"signature": "val usedConstants =", "body": "linkedSetOf<IrProperty>()<EOL>"}
{"signature": "fun usingLastStableRuntime() {", "body": "<EOL><INDENT><INDENT>setupAppBuildGradle(<STR_LIT><STR_LIT>androidx.compose.runtime:runtime:<NUM_LIT>.<NUM_LIT>\")<STR_LIT>\")<EOL><INDENT><INDENT>val result = gradleRunner.build()<EOL><INDENT><INDENT>assertEquals(TaskOutcome.SUCCESS, result.task(<STR_LIT>)!!.outcome)<EOL><INDENT>}"}
{"signature": "val functionsToEnter =", "body": "mutableSetOf<JsFunction>()<EOL>"}
{"signature": "val nextInsn =", "body": "instructions.get(nextIndex)<EOL>"}
{"signature": "val PACKAGE_INFO_CLASS_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val copyPluginDescriptors =", "body": "rootSpec.addChild()<EOL>"}
{"signature": "val remDiv =", "body": "rem.div(radixToPower)<EOL>"}
{"signature": "fun testClasspathFromClass() {", "body": "<EOL><INDENT><INDENT>val cpFromThis = classpathFromClass(this::class)<EOL><INDENT><INDENT>val expectedSuffix = File(<STR_LIT>).path<EOL><INDENT><INDENT>assertTrue(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>cpFromThis!!.first().absoluteFile.path.endsWith(expectedSuffix)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun visitLegacyRawContractDescription(legacyRawContractDescription: FirLegacyRawContractDescription, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLegacyRawContractDescription(legacyRawContractDescription)<EOL><INDENT>}"}
{"signature": "val serialDescImplConstructor =", "body": "baseSerialDescImplClass.unsubstitutedPrimaryConstructor!!<EOL>"}
{"signature": "fun subtraction () {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT> - <NUM_LIT>)<EOL>}"}
{"signature": "val expandedAttributes =", "body": "c.components.typeAttributeTranslators.toAttributes(<EOL>"}
{"signature": "val missingDiagnostics =", "body": "this - expectedDiagnostics<EOL>"}
{"signature": "val androidStyleMain =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "for (dependency in transitiveDependsOnDependencies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(dependency.contentScope)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val hasThis =", "body": "propertyDescriptor.extensionReceiverParameter != null || propertyDescriptor.dispatchReceiverParameter != null<EOL>"}
{"signature": "val mergeInfo =", "body": "initializers[next]?.incoming<EOL>"}
{"signature": "val loopVariableComponents =", "body": "mutableMapOf<Int, IrVariable>()<EOL>"}
{"signature": "val prevErr =", "body": "System.err<EOL>"}
{"signature": "val callSitesRequiringThreadLocalInitializerCall =", "body": "mutableSetOf<IrFunctionAccessExpression>()<EOL>"}
{"signature": "for (child in file.listFiles()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (child.name.endsWith(<STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>child.delete()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val requiredNpmDependencies =", "body": "requirements<EOL>"}
{"signature": "val jdkRoots =", "body": "getDefaultJdkModuleRoots(javaModuleFinder, javaModuleGraph)<EOL>"}
{"signature": "fun test_<NUM_LIT>(d: D) {", "body": "<EOL><INDENT>d.x<NUM_LIT><EOL><INDENT>d.x<NUM_LIT><EOL><INDENT>d.x<NUM_LIT><EOL><INDENT>d.x<NUM_LIT><EOL>}"}
{"signature": "package names and member names matter.", "body": "<EOL>"}
{"signature": "val nodesMap =", "body": "mutableMapOf<DataFlowIR.Node, Node>()<EOL>"}
{"signature": "val filename =", "body": "currentFileName ?: actualDefaultFileName<EOL>"}
{"signature": "val actualExtensionReceiver =", "body": "declaration.extensionReceiverParameter?.descriptor<EOL>"}
{"signature": "val compilerTmp =", "body": "tmpDir.resolve(dependencyNameWithOsAndVersion)<EOL>"}
{"signature": "fun contentHashCode() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<Array<Int>>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<CharArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<ShortArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<BooleanArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<UByteArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<UIntArray>().contentHashCode())<EOL><INDENT>}"}
{"signature": "var ID_WORKER<INDENT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (nullRes != null) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun configureMPPExtension(project: Project) {", "body": "<EOL><INDENT><INDENT>super.configureMPPExtension(project)<EOL><INDENT><INDENT>project.configureJVMTarget()<EOL><INDENT>}"}
{"signature": "val col =", "body": "<NUM_LIT> + substr.length - substr.lastIndexOf(sep) - sep.length<EOL>"}
{"signature": "import javaslang.", "body": "control.Option<EOL>"}
{"signature": "val deprecatedMetricsPath =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val newOwnerClassId =", "body": "dispatchReceiverTypeForSubstitutedMembers.lookupTag.classId<EOL>"}
{"signature": "fun handleInlineFunction(expression: IrInlinedFunctionBlock) {", "body": "<EOL><INDENT><INDENT>expression.insertInStackAndProcess()<EOL><INDENT><INDENT>val declaration = expression.inlineDeclaration<EOL><INDENT><INDENT>expression.addFakeLocalVariableForFun(declaration)<EOL><INDENT>}"}
{"signature": "if (get(BinaryOptions.checkStateAtExternalCalls) == null) {", "body": "<EOL><INDENT><INDENT>putIfNotNull(BinaryOptions.checkStateAtExternalCalls, arguments.checkExternalCalls)<EOL><INDENT>}"}
{"signature": "val matchSuperClassFqName =", "body": "NativeStandardInteropNames.cInteropPackage.child(matchSuperClassName)<EOL>"}
{"signature": "val fileSerializers =", "body": "hashMapOf<KotlinSourceFile, FileIdSignatureSerialization>()<EOL>"}
{"signature": "fun runJsCompiler(args: List<String>) {", "body": "<EOL><INDENT><INDENT>runCompiler(compiler<NUM_LIT>JSClass, args)<EOL><INDENT>}"}
{"signature": "fun assertEquals(message: String?, expected: Any?, actual: Any?) {", "body": "<EOL><INDENT><INDENT>Assert.assertEquals(actual, expected, message)<EOL><INDENT>}"}
{"signature": "val mutabilityMappings =", "body": "listOf(<EOL>"}
{"signature": "val cinteropTask =", "body": "project.tasks.getByName(<STR_LIT>) as CInteropProcess<EOL>"}
{"signature": "val isKotlinBinaryClass =", "body": "kotlinBinaryClass != null<EOL>"}
{"signature": "val methodBridgeCache =", "body": "mutableMapOf<FunctionDescriptor, MethodBridge>()<EOL>"}
{"signature": "val RUN_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (range.start < <NUM_LIT> || range.endInclusive < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IndexOutOfBoundsException()<EOL><INDENT><INDENT>}"}
{"signature": "val FUNCTION_PREFIXES =", "body": "arrayOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val elementsCache =", "body": "DiagnosticsElementsCache(this) { true }<EOL>"}
{"signature": "val lowestBit =", "body": "if (trailingZeroes < ULong.SIZE_BITS) <NUM_LIT>uL.shl(trailingZeroes).toULong() else <NUM_LIT>u<EOL>"}
{"signature": "when (firBasedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirCallableSymbol -> firProvider.getFirCallableContainerFile(firBasedSymbol)<EOL><INDENT><INDENT><INDENT>is FirClassLikeSymbol -> firProvider.getFirClassifierContainerFileIfAny(firBasedSymbol)<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val parametersPart =", "body": "arguments.drop(<NUM_LIT>).joinToString()<EOL>"}
{"signature": "if (dispatchReceiverOnly) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiver?.type<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (element is KtParameter && PsiTreeUtil.getParentOfType(element, KtDeclaration::class.java) is KtPrimaryConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>ErrorsAndroid.INAPPLICABLE_IGNORED_ON_PARCEL_CONSTRUCTOR_PROPERTY.on(annotationEntry)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun testAbiChangeInLib_changeMethodSignature_tracked(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>super.testAbiChangeInLib_changeMethodSignature_tracked(gradleVersion)<EOL><INDENT>}"}
{"signature": "fun assertUnreachable(typeDistance: CirTypeDistance) {", "body": "<EOL><INDENT>assertEquals(CirTypeDistance.unreachable, typeDistance)<EOL><INDENT>assertTrue(typeDistance.isNotReachable)<EOL><INDENT>assertFalse(typeDistance.isReachable)<EOL><INDENT>assertFalse(typeDistance.isPositive)<EOL><INDENT>assertFalse(typeDistance.isNegative)<EOL><INDENT>assertFalse(typeDistance.isZero)<EOL>}"}
{"signature": "if (ktDeclaration is KtConstructor<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>return ktDeclaration.getContainingClassOrObject().toLightClass()<EOL><INDENT><INDENT>}"}
{"signature": "if (!containingDescriptor.isExpect && !hasAbstractModifier && function.hasModifier(KtTokens.OPEN_KEYWORD)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(REDUNDANT_OPEN_IN_INTERFACE.on(function))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val otherNpmDependencies =", "body": "toolsNpmDependencies + transitiveNpmDependencies<EOL>"}
{"signature": "val closingTag =", "body": "<STR_LIT><EOL>"}
{"signature": "if (androidSourceSet.assets.srcDirs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>androidSourceSet.assets.srcDir(KotlinSourceSetFactory.defaultSourceFolder(project, kotlinSourceSet.name, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val sizeSince =", "body": "if (thisKind.isFloatingPoint) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val expressionDataFlowValue =", "body": "facade.components.dataFlowValueFactory.createDataFlowValue(expression, type, newContext)<EOL>"}
{"signature": "val reportDiagnosticsTasks =", "body": "ArrayList<() -> Unit>()<EOL>"}
{"signature": "val longConst =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val instanceMethods =", "body": "generateInstanceMethodDescs(irClass)<EOL>"}
{"signature": "val setterArgName =", "body": "JsName(<STR_LIT>, false)<EOL>"}
{"signature": "if (shouldUpdateFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fileStack.pop()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun name() {", "body": "})<EOL><INDENT>bar(fun @[a] T.() {}"}
{"signature": "fun testArrayAssignment<NUM_LIT>(array: Array<Any>) {", "body": "<EOL><INDENT>array[<NUM_LIT>] <!UNREACHABLE_CODE!>=<!> todo()<EOL>}"}
{"signature": "fun of(size: ULong) {", "body": "<EOL><INDENT>of(size.convert())<EOL>}"}
{"signature": "val isConstructorParameterWithDefault =", "body": "primaryParamsAsProps[it] ?: false<EOL>"}
{"signature": "if (!maybeAddToTracker(node.sym, visibility)) {", "body": "<EOL><INDENT><INDENT><INDENT>visit(node.expression, visibility)<EOL><INDENT><INDENT>}"}
{"signature": "var isDisposed =", "body": "false<EOL>"}
{"signature": "val TRAILING_NEWLINE_REGEX =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val testImplementationConfiguration =", "body": "configurations.maybeCreateDependencyScope(testCompilation.implementationConfigurationName)<EOL>"}
{"signature": "var color =", "body": "RED<EOL>"}
{"signature": "val httpReportPassword =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "fun testGetValue() {", "body": "<EOL><INDENT><INDENT>_x.value = <NUM_LIT><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, _x.value)<EOL><INDENT><INDENT>var aValue = _x.value<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, aValue)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, x)<EOL><EOL><INDENT><INDENT>local.value = <NUM_LIT><NUM_LIT><NUM_LIT><EOL><INDENT><INDENT>aValue = local.value<EOL><INDENT><INDENT>assertEquals(aValue, local.value)<EOL><INDENT>}"}
{"signature": "val nameTable =", "body": "mutableMapOf<String, JsName>()<EOL>"}
{"signature": "if (incremental != null) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (postProcessor != null && symbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>postProcessor.invoke(symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val filesQueue =", "body": "ArrayDeque(dirtyFiles)<EOL>"}
{"signature": "val longArrStatic =", "body": "LongArray(<NUM_LIT>) { i: Int -> i * <NUM_LIT>L }<EOL>"}
{"signature": "fun testFoo() {", "body": "<EOL><INDENT>class Conflict<EOL><EOL><INDENT><caret>Conflict()<EOL>}"}
{"signature": "val typeWithErasedNullability =", "body": "originalType.withNullability(false)<EOL>"}
{"signature": "val expectedInL =", "body": "<STR_LIT><EOL>"}
{"signature": "val ALLOWED_RUNTIME_TYPES =", "body": "setOf(RuntimeProcType.AGGREGATING.name, RuntimeProcType.ISOLATING.name)<EOL>"}
{"signature": "val pathToExclude =", "body": "<EOL><INDENT><INDENT><INDENT>setOf(<EOL>"}
{"signature": "import infix.", "body": "extension.*<EOL>"}
{"signature": "if (mppKind == MppCheckerKind.Common) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(ErrorNodeDiagnosticCollectorComponent(session, reporter))<EOL><INDENT><INDENT><INDENT><INDENT>add(LanguageVersionSettingsDiagnosticComponent(session, reporter))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mapping =", "body": "pattern shr <NUM_LIT><EOL>"}
{"signature": "val initializeFun =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.irFactory.createSimpleFunction(<EOL>"}
{"signature": "if (typeToRender is KtNonErrorClassType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>appendLine()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderList(typeToRender.ownTypeArguments, printer, renderSymbolsFully = false)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val kt<NUM_LIT>Class =", "body": "objc_lookUpClass(<STR_LIT>)<EOL>"}
{"signature": "val expectedErrorsStr =", "body": "expectedErrors.joinToString(lineSeparator) { it.toDirectiveView() }<EOL>"}
{"signature": "fun usage(x: CX, y: CY) {", "body": "<INDENT><!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>foo<!>(x, y) // expected err, got err<INDENT><!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>fooA<!>(x, y) // expected err, got ok<INDENT><!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>fooB<!>(x, y) // expected err, got ok}"}
{"signature": "if (string == null) {", "body": "<EOL><INDENT><INDENT>NullPointer(runtime.objHeaderType)<EOL><INDENT>}"}
{"signature": "if (CallExpressionTranslator.shouldBeInlined(inlineResolvedCall.resultingDescriptor, context)) {", "body": "<EOL><INDENT><INDENT>setInlineCallMetadata(callExpression, resolvedCall.call.callElement, inlineResolvedCall.resultingDescriptor, context)<EOL><INDENT>}"}
{"signature": "val jdkKind =", "body": "JvmEnvironmentConfigurator.extractJdkKind(testModule.directives)<EOL>"}
{"signature": "var fooStorage =", "body": "<STR_LIT><EOL>"}
{"signature": "fun recordLookups(skippedData: Collection<TowerData>, name: Name) {", "body": "<EOL><INDENT><INDENT>variableProcessor.recordLookups(skippedData, name)<EOL><INDENT><INDENT>objectProcessor.recordLookups(skippedData, name)<EOL><INDENT>}"}
{"signature": "val fourth =", "body": "Outer.Other(third)<EOL>"}
{"signature": "val sleeper =", "body": "SleeperWithBackoff()<EOL>"}
{"signature": "val BUILT_INS_NATIVE_DIR_NATIVE =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val reportedDiagnosticMap =", "body": "hashMapOf<Instruction, DiagnosticFactory<*>>()<EOL>"}
{"signature": "for (i in <NUM_LIT>. .<NUM_LIT>) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun foo(a: Int, v: String) {", "body": "definedExternally }"}
{"signature": "while (stack.peek().kind !in kinds) {", "body": "<EOL><INDENT><INDENT><INDENT>stack.pop()<EOL><INDENT><INDENT>}"}
{"signature": "val varSizeAnnotation =", "body": "AnnotationStub.CEnumVarTypeSize(baseIntegerTypeSize.toInt())<EOL>"}
{"signature": "val classInternalName =", "body": "input.readUTF()<EOL>"}
{"signature": "var isIncorporatingConstraintFromDeclaredUpperBound =", "body": "false<EOL>"}
{"signature": "val nativeHostTargetName =", "body": "MPPNativeTargets.current<EOL>"}
{"signature": "val intersectedSymbols =", "body": "stableNameCollector.overrideIntersections[stableName.symbol] ?: emptySet()<EOL>"}
{"signature": "val suffixBitsNum =", "body": "(<NUM_LIT> - ((size + offset) % <NUM_LIT>).toInt()) % <NUM_LIT><EOL>"}
{"signature": "val KOTLIN_CREATE_DEFAULT_MULTIPLATFORM_PUBLICATIONS =", "body": "<EOL><INDENT><INDENT><INDENT>property(<STR_LIT>)<EOL>"}
{"signature": "if (proto.hasLocalAlias()) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.localAlias = deserializeJsImportedModule(proto.localAlias)<EOL><INDENT><INDENT>}"}
{"signature": "val reflectKotlinClassFinder =", "body": "ReflectKotlinClassFinder(classLoader)<EOL>"}
{"signature": "val supportsUnsignedArrays =", "body": "context.optimizeLoopsOverUnsignedArrays<EOL>"}
{"signature": "var actualParametersCount =", "body": "function.valueParameters.size<EOL>"}
{"signature": "val overriddenNode =", "body": "oldGetter?.let { getOverriddenNode(context.multiFieldValueClassReplacements, it) as IntermediateMfvcNode? }<EOL>"}
{"signature": "val oldToNew =", "body": "HashMap<IrValueParameter, IrValueParameter>()<EOL>"}
{"signature": "val arrayDepth =", "body": "reificationArgumentRaw.indexOfFirst { it != '[' }<EOL>"}
{"signature": "var buf =", "body": "<NUM_LIT><EOL>"}
{"signature": "var threwForEmptyList =", "body": "false<EOL>"}
{"signature": "val permittedOwnerNames =", "body": "owners.permittedOwners.map { it.name }.toSet()<EOL>"}
{"signature": "val keyValuePairs =", "body": "parseKeyValuePairs(arguments.binaryOptions, configuration) ?: return emptyList()<EOL>"}
{"signature": "val packageOrClass =", "body": "<EOL><INDENT><INDENT><INDENT>(resolveToPackageOrClass(firSession.symbolProvider, fqNameToImport) as? PackageResolutionResult.PackageOrClass) ?: return null<EOL>"}
{"signature": "fun ifBody() {", "body": "<EOL><INDENT>if (DPoint(<NUM_LIT>, <NUM_LIT>).x > <NUM_LIT>) DPoint(<NUM_LIT>, <NUM_LIT>) else DPoint(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>val x = if (DPoint(<NUM_LIT>, <NUM_LIT>).x > <NUM_LIT>) DPoint(<NUM_LIT>, <NUM_LIT>) else DPoint(<NUM_LIT>, <NUM_LIT>)<EOL>}"}
{"signature": "fun floatToString() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <NUM_LIT>e<NUM_LIT>toFloat().toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.MIN_VALUE.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.MAX_VALUE.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.NEGATIVE_INFINITY.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.POSITIVE_INFINITY.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.NaN.toString())<EOL><INDENT>}"}
{"signature": "val producerValueName =", "body": "producerValue?.name<EOL>"}
{"signature": "if (s == <STR_LIT>) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val somePropertyFromObjectName =", "body": "A::somePropertyFromObject.<!EVALUATED{IR}(<STR_LIT>)!>name<!><EOL>"}
{"signature": "val BOOLEAN_METRICS_EXPECTED_VERSION_AND_HASH =", "body": "Pair(<NUM_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val byteModInt =", "body": "byte.mod(int)<EOL>"}
{"signature": "val allTestTaskName =", "body": "project.kotlinTestRegistry.allTestsTaskName<EOL>"}
{"signature": "if (isSubtypeOfClass(state, superType.typeConstructor(), superConstructor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val subpluginOptionsByPluginId =", "body": "optionsByPluginId<EOL>"}
{"signature": "fun objCExportTestNoInterfaceMemberNameMangling() {", "body": "<EOL><INDENT><INDENT>objCExportTestImpl(<STR_LIT>, listOf(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>   listOf(<STR_LIT>, <STR_LIT>), false, false)<EOL><INDENT>}"}
{"signature": "val patterns =", "body": "linkedTestType.patterns.value<EOL>"}
{"signature": "val relativeFilePathWithoutVariant =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>relativeFilePath.genVariantMatchingName(optionalVariantSuffix) ?: continue<EOL>"}
{"signature": "val audioContext =", "body": "audioStream?.openCodec(<STR_LIT>)<EOL>"}
{"signature": "val expectedFinishStrategy =", "body": "if (testFallbackStrategy) KotlinCompilerExecutionStrategy.OUT_OF_PROCESS else executionStrategy<EOL>"}
{"signature": "fun nobody(){", "body": "<EOL><INDENT><INDENT>curl_easy_setopt(curl, CURLOPT_NOBODY, <NUM_LIT>L)<EOL><INDENT>}"}
{"signature": "val visitedConstructors =", "body": "mutableSetOf(this)<EOL>"}
{"signature": "val classSuitesByClassName =", "body": "LinkedHashMap<String, ClassExpectationsSuite>()<EOL>"}
{"signature": "val ex<NUM_LIT> =", "body": "(Ex<NUM_LIT>)$p<EOL>"}
{"signature": "if (configuration.withObjCBaseDeclarationStubs) {", "body": "<EOL><INDENT><INDENT><INDENT>headerGenerator.translateBaseDeclarations()<EOL><INDENT><INDENT>}"}
{"signature": "val actualArgs =", "body": "signature.parameterTypes.indices.map { param(it) }<EOL>"}
{"signature": "val newId =", "body": "addFileIfNeeded(file)<EOL>"}
{"signature": "val nameValue =", "body": "expression.getStringArgument(StandardNames.NAME, context.session) ?: return<EOL>"}
{"signature": "fun visitPropertyAccessExpression(propertyAccessExpression: FirPropertyAccessExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allPropertyAccessExpressionCheckers.check(propertyAccessExpression, data)<EOL><INDENT>}"}
{"signature": "if (concatElements.isEmpty()) {", "body": "<EOL><INDENT><INDENT>return JsArrayLiteral()<EOL><INDENT>}"}
{"signature": "val hasComposableAnnotation =", "body": "descriptor.hasComposableAnnotation()<EOL>"}
{"signature": "val exportedAs =", "body": "crossModuleRef.module.exportNames[tag]!!<EOL>"}
{"signature": "val commonLazyValue =", "body": "if (recursionMarker != null)<EOL>"}
{"signature": "var hasConstructorKeyword =", "body": "false<EOL>"}
{"signature": "fun Test(i: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>A(i)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val throwsAnnotationClassIdsKey =", "body": "extrasKeyOf<List<ClassId>?>()<EOL>"}
{"signature": "fun test(map: Map<Int, String>) {", "body": "<EOL><INDENT>val a: Int = <!TYPE_MISMATCH!>listOf(<NUM_LIT>).<!TYPE_MISMATCH!><!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(<STR_LIT>)<!><!><EOL><INDENT>val b: Boolean = listOf(<NUM_LIT>).contains<NUM_LIT>(<NUM_LIT>)<EOL><EOL><INDENT>val c: String? = map.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>get<NUM_LIT><!>(<STR_LIT>)<EOL><INDENT>val d: String? = map.get<NUM_LIT>(<NUM_LIT>)<EOL>}"}
{"signature": "fun appendSignature(signature: CirTypeSignature, classifierId: CirEntityId) {", "body": "<EOL><INDENT><INDENT><INDENT>return signature.add(associatedIdsResolver.resolveAssociatedIds(classifierId) ?: classifierId)<EOL><INDENT><INDENT>}"}
{"signature": "if (isInterface && !isSet(access, Opcodes.ACC_STATIC)) {", "body": "<EOL><INDENT><INDENT>flags = flags or ModifierFlags.DEFAULT_MASK<EOL><INDENT>}"}
{"signature": "val BUILDER_ID =", "body": "ClassId.topLevel(BUILDER)<EOL>"}
{"signature": "val EXPLICIT_EQUALS =", "body": "ExplicitEquals()<EOL>"}
{"signature": "val tags =", "body": "if (generateTrapsInsteadOfExceptions) emptyList() else listOf(WasmTag(tagFuncType))<EOL>"}
{"signature": "val fromClassicFrontend =", "body": "backendForClassicFrontend.transform(module, inputArtifact.fromK<NUM_LIT>) ?: return null<EOL>"}
{"signature": "val searchPaths =", "body": "listOf(sourceRoot, sourceRoot.resolve(<STR_LIT>))<EOL>"}
{"signature": "val superClassInternalName =", "body": "typeMapper.mapClass(descriptor.getSuperClassOrAny()).internalName<EOL>"}
{"signature": "val SUPPRESS_ALL_ERRORS =", "body": "<STR_LIT><EOL>"}
{"signature": "val labelTargets =", "body": "getLabelTargets(ref, context)<EOL>"}
{"signature": "val intList =", "body": "listOf(<NUM_LIT>)<EOL>"}
{"signature": "if (ix < <NUM_LIT>x4<NUM_LIT><NUM_LIT>633CE || (ix == <NUM_LIT>x4<NUM_LIT><NUM_LIT>633ce) && (lx <= <NUM_LIT>x<NUM_LIT>fb<NUM_LIT>f<NUM_LIT>7d.toUInt())) {", "body": "<EOL><INDENT><INDENT>w = __ieee<NUM_LIT>_exp(<NUM_LIT>.5 * fabs(x))<EOL><INDENT><INDENT>t = h * w<EOL><INDENT><INDENT>return t * w<EOL><INDENT>}"}
{"signature": "if (k == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT>if ((lx or (hx and <NUM_LIT>x<NUM_LIT>fffffff)) == <NUM_LIT>) return x <EOL><INDENT><INDENT>x *= two<NUM_LIT><EOL><INDENT><INDENT>hx = __HI(x)<EOL><INDENT><INDENT>k = (((hx and <NUM_LIT>x<NUM_LIT>ff<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) shr 2<NUM_LIT>) - <NUM_LIT>)<EOL><INDENT><INDENT>if (n < -5<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) return tiny * x<INDENT><EOL><INDENT>}"}
{"signature": "var oldInnerClassesLogic =", "body": "false<EOL>"}
{"signature": "val dependencyKtModule =", "body": "modulesByName.getValue(dependency.moduleName).ktModule<EOL>"}
{"signature": "val extraTopLevelDeclarations =", "body": "allPresetEntries.flatMap { it.extraTopLevelDeclarations }.joinToString(<STR_LIT>)<EOL>"}
{"signature": "val less =", "body": "if (signed) icmpLt(first, second) else icmpULt(first, second)<EOL>"}
{"signature": "if (first is ClassDescriptor) {", "body": "// for classes with the same FQ-name we simply take the first one<INDENT><INDENT><INDENT>return listOf(first)<INDENT><INDENT>}"}
{"signature": "val stubReceiverInfo =", "body": "info.replaceExplicitReceiver(stubReceiver)<EOL>"}
{"signature": "fun testChangesToKaptConfigurationDoNotTriggerStubGeneration(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT>}"}
{"signature": "val minusIntMinValue =", "body": "-Int.MIN_VALUE<EOL>"}
{"signature": "package multiple<EOL>.", "body": ""}
{"signature": "import $frameworkName\"<EOL>.", "body": ""}
{"signature": "if (owner.containingClassOrObject != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val plus =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u + <NUM_LIT>u<!><EOL>"}
{"signature": "val isType =", "body": "isOperator.functor.type.toKotlinType(builtIns)<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.propertySetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(JsProtoBuf.propertySetterAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val materializedResult =", "body": "result.materializedAt(typeMapper.mapType(expression.type), expression.type, true)<EOL>"}
{"signature": "if (context.isTopLevel && context.containingFile?.isEitherModuleOrNonModule(context.session) == true) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirJsErrors.NESTED_JS_MODULE_PROHIBITED, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (targetFrontend == FrontendKinds.ClassicFrontend) {", "body": "<EOL><INDENT><INDENT><INDENT>useAfterAnalysisCheckers(::FirTestDataConsistencyHandler)<EOL><INDENT><INDENT>}"}
{"signature": "val layoutFilename =", "body": "<STR_LIT><EOL>"}
{"signature": "val rootUri =", "body": "URI.create(StandardFileSystems.JRT_PROTOCOL + <STR_LIT>)<EOL>"}
{"signature": "fun isHighSurrogate() {", "body": "<EOL><INDENT><INDENT>assertTrue('\\uD<NUM_LIT>'.isHighSurrogate())<EOL><INDENT><INDENT>assertTrue('\\uDBFF'.isHighSurrogate())<EOL><INDENT><INDENT>assertFalse('\\uDC<NUM_LIT>'.isHighSurrogate())<EOL><INDENT><INDENT>assertFalse('\\uDFFF'.isHighSurrogate())<EOL><INDENT>}"}
{"signature": "val indirectPointer =", "body": "someField<EOL>"}
{"signature": "val upperSubstituted =", "body": "substitutor.safeSubstitute(b as UnwrappedType)<EOL>"}
{"signature": "for (i in a downTo b step <NUM_LIT>) {", "body": "}"}
{"signature": "val doubleModDouble =", "body": "double.mod(double)<EOL>"}
{"signature": "fun test(o: Number) {", "body": "}<EOL><EOL>fun test<NUM_LIT>(o: Number) {<EOL><INDENT>val p: Int = <NUM_LIT><EOL><INDENT>val o = if (z < <NUM_LIT>) p else o<EOL><INDENT>test(o)<EOL>}"}
{"signature": "val newLibraryFile =", "body": "KFile(klib.klibFile.path)<EOL>"}
{"signature": "val parentForNewScope =", "body": "companionObjectDescriptor?.packScopesOfCompanionSupertypes(parent, ownerDescriptor) ?: parent<EOL>"}
{"signature": "val EXPORTER_FILE_POSTFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!HostManager().isEnabled(konanTarget)) {", "body": "<INDENT><INDENT><INDENT>// We cannot generate libs on a machine that doesn't support the requested target.<INDENT><INDENT><INDENT>return<INDENT><INDENT>}"}
{"signature": "if (jvmDefaultMode != JvmDefaultMode.ALL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.JVM_DEFAULT_WITH_COMPATIBILITY_IN_DECLARATION.on(reportOn))<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useCheckers(checkers: TypeCheckers) {", "body": "<EOL><INDENT><INDENT>session.checkersComponent.register(checkers)<EOL><INDENT>}"}
{"signature": "if (extra.passViaPointer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>wrapperGenerator.generateCGlobalByPointerGetter(extra.global, cCallAnnotation.symbolName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val implicitExtensionReceiverValue =", "body": "infoProvider.implicitExtensionReceiverValue()<EOL>"}
{"signature": "val JsDefinedExternally =", "body": "<STR_LIT>.callableId(BASE_JS_PACKAGE)<EOL>"}
{"signature": "fun inlineCall(p: () -> Unit) {", "body": "<EOL><INDENT>p()<EOL>}"}
{"signature": "fun toolOptions(configure: TO.() -> Unit) {", "body": "<EOL><INDENT><INDENT>configure(toolOptions)<EOL><INDENT>}"}
{"signature": "val memorySize =", "body": "dataSize + (if (newLine) <NUM_LIT> else <NUM_LIT>)<EOL>"}
{"signature": "val createdTypeStructs =", "body": "mutableListOf<NativePtr>()<EOL>"}
{"signature": "val preparedBaseType =", "body": "prepareArgumentTypeRegardingCaptureTypes(receiverValue.type.unwrap()) ?: return this<EOL>"}
{"signature": "fun set(index: Int, v: T) {", "body": "<EOL><INDENT><INDENT>defaultValue = v<EOL><INDENT>}"}
{"signature": "val BUNDLE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun mapContainsKey() {", "body": "<EOL><INDENT><INDENT>val map = createTestMap()<EOL><EOL><INDENT><INDENT>assertTrue(map.containsKey(KEYS[<NUM_LIT>]) &&<EOL><INDENT><INDENT><INDENT><INDENT>   map.containsKey(KEYS[<NUM_LIT>]) &&<EOL><INDENT><INDENT><INDENT><INDENT>   map.containsKey(KEYS[<NUM_LIT>]) &&<EOL><INDENT><INDENT><INDENT><INDENT>   map.containsKey(KEYS[<NUM_LIT>]))<EOL><EOL><INDENT><INDENT>assertFalse(map.containsKey(<STR_LIT>) ||<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>map.containsKey(<NUM_LIT> as Any))<EOL><INDENT>}"}
{"signature": "var topStringVar =", "body": "<STR_LIT><EOL>"}
{"signature": "if (descriptor is LocalVariableAccessorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val delegateAccessorResolvedCall = bindingContext.get(BindingContext.DELEGATED_PROPERTY_RESOLVED_CALL, descriptor)<EOL><INDENT><INDENT><INDENT>return mapToCallableMethod(delegateAccessorResolvedCall!!.resultingDescriptor, false)<EOL><INDENT><INDENT>}"}
{"signature": "else if (suppressApiVersionGreaterThanLanguageVersionError) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.report(WARNING, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val presentableChunksListString =", "body": "chunkNames.joinToReadableString()<EOL>"}
{"signature": "fun enable(feature: LanguageFeature) {", "body": "<EOL><INDENT><INDENT>specificFeatures[feature] = LanguageFeature.State.ENABLED<EOL><INDENT>}"}
{"signature": "var expectedType =", "body": "expectedType<EOL>"}
{"signature": "if (inferenceSession is BuilderInferenceSession) {", "body": "<EOL><INDENT><INDENT><INDENT>inferenceSession.addExpression(variable)<EOL><INDENT><INDENT>}"}
{"signature": "val isPropertyForField =", "body": "fir.isStubPropertyForPureField == true<EOL>"}
{"signature": "val PARCELABLE_BASE_TYPE_FQNAMES =", "body": "setOf(<EOL>"}
{"signature": "val argumentProviders =", "body": "AnnotationUtils.findRepeatableAnnotations(context.requiredTestMethod, ArgumentsSource::class.java)<EOL>"}
{"signature": "val FUNCTION_FIELD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val scopePrefix =", "body": "scope.name<EOL>"}
{"signature": "package androidx.", "body": "compose.compiler.plugins.kotlin.lower<EOL>"}
{"signature": "if (notNothing) {", "body": "<EOL><INDENT><INDENT><INDENT>temporaryForVariable.commit()<EOL><INDENT><INDENT><INDENT>return createTypeInfo(type, initialDataFlowInfoForArguments)<EOL><INDENT><INDENT>}"}
{"signature": "val typeParameterSig =", "body": "composite.inner as IdSignature.LocalSignature<EOL>"}
{"signature": "fun testFiltersPositiveNegative() {", "body": "<EOL><INDENT><INDENT>doTestFilters(<EOL><INDENT><INDENT><INDENT>Filter(<EOL><INDENT><INDENT><INDENT><INDENT>listOf(<STR_LIT>, <STR_LIT>), listOf(<STR_LIT>, <STR_LIT>), listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (!candidate.resolvedCall.isSuitableForBuilderInference()) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val targetNode =", "body": "context.extractNode(target) ?: return<EOL>"}
{"signature": "fun loadAll() {", "body": "<EOL><INDENT><INDENT>loadEntriesFor(dataForFiles.keys)<EOL><INDENT>}"}
{"signature": "if (nameFilter == ALL_NAME_FILTER || allDescriptors.isComputed() || allDescriptors.isComputing()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>allDescriptors()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val setterExpressions =", "body": "instance.makeSetterExpressions(this, values)<EOL>"}
{"signature": "var curData =", "body": "processCall(expression, expression.symbol.owner, data)<EOL>"}
{"signature": "val expectModality =", "body": "expectDeclaration.modality<EOL>"}
{"signature": "if (propagateDeadness) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>to.isDead = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val HIDDEN_ENUM_METHOD_NAMES =", "body": "setOf(<EOL>"}
{"signature": "if (expression is JsNameRef && expression.qualifier == null && expression.name in localVariables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>x.synthetic = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val callableName =", "body": "function.nameAsSafeName<EOL>"}
{"signature": "for (x: Comparable<*> in doubleArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>test = <STR_LIT><EOL><INDENT><INDENT>useDoubleAsComparable(x)<EOL><INDENT>}"}
{"signature": "val kotlinJvm =", "body": "getLibraryJar(<STR_LIT>)<EOL>"}
{"signature": "if (slot == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val outerEnterNode =", "body": "createEnterValueParameterNode(valueParameter).also { addNewSimpleNode(it) }<EOL>"}
{"signature": "val based =", "body": "basify(npmProjectDir.toFile(), executableFile.toFile())<EOL>"}
{"signature": "val p<NUM_LIT>IosMain =", "body": "createKtModule(<EOL>"}
{"signature": "if (case.ignore) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (expression is KtLabelReferenceExpression && fir is FirPropertyAccessExpression && fir.calleeReference is FirSuperReference) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOfNotNull(fir.dispatchReceiver?.resolvedType?.toTargetSymbol(session, symbolBuilder))<EOL><INDENT><INDENT>}"}
{"signature": "while (!(a == <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val newManifestLocation =", "body": "target.project.file(<STR_LIT>)<EOL>"}
{"signature": "if (y > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val epilogue =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val aie =", "body": "AIE()<EOL>"}
{"signature": "val prevIsInNotCall =", "body": "isInNotCall<EOL>"}
{"signature": "val platformTypeUpperBound =", "body": "type.flexibleTypeUpperBound?.let { renderFlexibleTypeUpperBound(it) }<EOL>"}
{"signature": "if (functionName == LOOP) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (isArrayReceiver) generateAtomicfuArrayLoop(valueType) else generateAtomicfuLoop(valueType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val precreatedComponents =", "body": "Array(<NUM_LIT>) { i -> COMPONENT_N(i + <NUM_LIT>) }<EOL>"}
{"signature": "val endsWithStar =", "body": "trimmed.endsWith(<STR_LIT>)<EOL>"}
{"signature": "if (declaration.isLateinit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declaration.type = declaration.type.makeNullable()<EOL><INDENT><INDENT><INDENT><INDENT>declaration.isVar = true<EOL><INDENT><INDENT><INDENT><INDENT>declaration.initializer =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>IrConstImpl.constNull(declaration.startOffset, declaration.endOffset, backendContext.irBuiltIns.nothingNType)<EOL><EOL><INDENT><INDENT><INDENT><INDENT>lateinitVariables += declaration<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun use(arg: NotExperimentalExtension) {", "body": "<EOL><INDENT>arg.foo()<EOL><INDENT>arg.bar()<EOL>}"}
{"signature": "val ktTypeParameter =", "body": "ktTypeParameters[typeParameter.index]<EOL>"}
{"signature": "val PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun bar(two: Two) {", "body": "<EOL><INDENT>val (@Ann x, @Ann y) = two<EOL>}"}
{"signature": "fun unmarkPostponedVariable(variable: TypeVariableMarker) {", "body": "<EOL><INDENT><INDENT>storage.postponedTypeVariables -= variable<EOL><INDENT>}"}
{"signature": "if (this.isTopLevel(first) || this.isTopLevel(second)) {", "body": "<EOL><INDENT><INDENT>return this.isTopLevel(first) && this.isTopLevel(second) &&<EOL><INDENT><INDENT><INDENT>first.propertyIfAccessor.findSourceFile() == second.propertyIfAccessor.findSourceFile()<EOL><INDENT>}"}
{"signature": "val remainingParameters =", "body": "getRemainingParameters(functionDescriptor.original, substituteCount)<EOL>"}
{"signature": "val kexe =", "body": "buildDir.resolve(<STR_LIT>).also { it.delete() }<EOL>"}
{"signature": "val constantParser =", "body": "PsiConstantParser(callContext)<EOL>"}
{"signature": "if (descriptor.isTailrec) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportWrongExternalDeclaration(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val parent = argument.parent) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtCallExpression -> parent<EOL><INDENT><INDENT><INDENT>is KtValueArgumentList -> parent.parent as? KtCallExpression<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val eagerInitialization =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val isSwiftExportEmbeddable =", "body": "dependent == SWIFT_EXPORT_EMBEDDABLE<EOL>"}
{"signature": "val r =", "body": "t.boo(<STR_LIT>)<EOL>"}
{"signature": "val needsPhi =", "body": "expression.branches.last().isUnconditional() && !expression.type.isUnit()<EOL>"}
{"signature": "val ptrToT =", "body": "ptrToLong<NUM_LIT> + <NUM_LIT><EOL>"}
{"signature": "val limit =", "body": "(text.length - <NUM_LIT>).coerceAtLeast(position)<EOL>"}
{"signature": "val invert =", "body": "invertible.invert()<EOL>"}
{"signature": "fun testIdempotentAssign(operation: (MutableMap<String, Int>) -> Unit) {", "body": "<EOL><INDENT><INDENT>val original = hashMapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>val result = HashMap(original)<EOL><INDENT><INDENT>operation(result)<EOL><INDENT><INDENT>assertEquals(original, result)<EOL><INDENT>}"}
{"signature": "val stubTreeForDecompiledFile =", "body": "KtFileStubBuilder().buildStubTree(<EOL>"}
{"signature": "val allFunctionMetadataCheckers =", "body": "listOf(<EOL>"}
{"signature": "val nowMs =", "body": "TimeUnit.NANOSECONDS.toMillis(System.nanoTime())<EOL>"}
{"signature": "fun startMeasure(time: GradleBuildTime) {", "body": "<EOL><INDENT>}"}
{"signature": "import friendly_dealloc.", "body": "*<EOL>"}
{"signature": "val coefficient =", "body": "<NUM_LIT><EOL>"}
{"signature": "val firDiagnostic =", "body": "toFirDiagnostics(analysisSession.useSiteSession, source, callOrAssignmentSource).firstOrNull() ?: return null<EOL>"}
{"signature": "if (hasExtension(JvmProtoBuf.propertySignature)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JvmProtoBuf.propertySignature).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "fun test(l: A) {", "body": "<EOL><INDENT><expr>l</expr> += <NUM_LIT><EOL>}"}
{"signature": "val intMaxValue =", "body": "Int.MAX_VALUE<EOL>"}
{"signature": "var token =", "body": "<STR_LIT><EOL>"}
{"signature": "val LONG_BIT_SHIFTS =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "val longArray<NUM_LIT> =", "body": "copyLongArray(*longArray)<EOL>"}
{"signature": "if (type is ErrorType && !informativeErrorType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(type.debugMessage)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (origin == IrDeclarationOrigin.DELEGATE) {", "body": "<EOL><INDENT>IrBasedDelegateFieldDescriptor(this)<EOL>}"}
{"signature": "val differentNonPrivateConstructors =", "body": "calcDifferenceForNonPrivateMembers(ProtoBuf.Class::getConstructorList)<EOL>"}
{"signature": "fun collectAllKnownSignatures() {", "body": "<INDENT><INDENT><INDENT>val maxSignatureIndex = IrArrayMemoryReader(library.signatures(fileIndex)).entryCount() - <NUM_LIT> // Index of the latest signature in the current file.<INDENT><INDENT><INDENT>(<NUM_LIT>.maxSignatureIndex).mapTo(allKnownSignatures, signatureDeserializer::deserializeIdSignature)<INDENT><INDENT>}"}
{"signature": "fun checkEqual(a: Any, b: Any) {", "body": "<EOL><INDENT>if (a != b || b != a) throw AssertionError(<STR_LIT>)<EOL><INDENT>if (a.hashCode() != b.hashCode()) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "when (message?.level) {", "body": "<EOL><INDENT><INDENT>DeprecationLevel.WARNING -> KmVersionRequirementLevel.WARNING<EOL><INDENT><INDENT>DeprecationLevel.ERROR -> KmVersionRequirementLevel.ERROR<EOL><INDENT><INDENT>DeprecationLevel.HIDDEN, null -> KmVersionRequirementLevel.HIDDEN<EOL><INDENT>}"}
{"signature": "val testIdeaKotlinInstances =", "body": "testIdeaKotlinInstancesClazz.objectInstance<EOL>"}
{"signature": "fun testNamedReadsTransitive() {", "body": "<EOL><INDENT><INDENT>val a = module(<STR_LIT>)<EOL><INDENT><INDENT>val b = module(<STR_LIT>, listOf(a))<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(a, b))<EOL><INDENT>}"}
{"signature": "if (type.isUnsupportedInlineType() && !canSupportInlineClasses(module, trace)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>SerializationErrors.INLINE_CLASSES_NOT_SUPPORTED.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>element ?: fallbackElement,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>RuntimeVersions.MINIMAL_VERSION_FOR_INLINE_CLASSES.toString(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>VersionReader.getVersionsForCurrentModuleFromTrace(module, trace)?.implementationVersion.toString()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val objOffsets =", "body": "getObjOffsets(bodyType)<EOL>"}
{"signature": "if (transformer.statusComputationSession[target].requiresComputation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>target.lazyResolveToPhase(resolverPhase.previous)<EOL><INDENT><INDENT><INDENT><INDENT>resolveClass(target)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isZipped =", "body": "klib.isFile<EOL>"}
{"signature": "val allSetters =", "body": "listOfNotNull(specialSetter) + setters.filterNot { it == specialSetter }<EOL>"}
{"signature": "val defaultGetterName =", "body": "if (createAsAnnotationMethod || isJvmRecord) propertyName else JvmAbi.getterName(propertyName)<EOL>"}
{"signature": "fun globalVarSetWrapper(v: String) {", "body": "globalVar = v }"}
{"signature": "var invocationCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val expectedTypes =", "body": "bindingContext().getDataFlowInfoBefore(ktSubject).getStableTypes(dataFlow, languageVersionSettings) +<EOL>"}
{"signature": "val groupedBySignature =", "body": "MultiMap.create<RawSignature, JvmDeclarationOrigin>()<EOL>"}
{"signature": "val macosArm<NUM_LIT>Main =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val moduleId<NUM_LIT>TestModule =", "body": "testModules.associateBy { it.name.safeModuleName }<EOL>"}
{"signature": "for (index in rawChunks.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>val rawChunk = rawChunks[index]<EOL><INDENT><INDENT><INDENT>if (rawChunk != <NUM_LIT>L)<EOL><INDENT><INDENT><INDENT><INDENT>unsafe.freeMemory(rawChunk)<EOL><INDENT><INDENT><INDENT>rawChunks[index] = <NUM_LIT>L<EOL><INDENT><INDENT>}"}
{"signature": "val funcValue =", "body": "func()<EOL>"}
{"signature": "val barRef =", "body": "String?::bar<EOL>"}
{"signature": "val continuationPsiType =", "body": "psiType(StandardNames.CONTINUATION_INTERFACE_FQ_NAME.asString(), this)<EOL>"}
{"signature": "val classAdapters =", "body": "mutableListOf<ObjCExportCodeGenerator.ObjCToKotlinMethodAdapter>()<EOL>"}
{"signature": "val STRING_ELEMENT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (name !== existingName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val replacement = JsAstUtils.pureFqn(existingName, null)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newReplacements[name] = replacement<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val bi =", "body": "BoxInt(<NUM_LIT>)<EOL>"}
{"signature": "fun usage(instance: one.SimpleClass) {", "body": "<EOL><INDENT>instance.memberV<caret>ariableWithAnnotations<EOL>}"}
{"signature": "if (callee.isAccessible(withSuper = superQualifier != null)) {", "body": "<EOL><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT>}"}
{"signature": "fun useNullableI<NUM_LIT>(x: I<NUM_LIT>?) {", "body": "<EOL><INDENT>if (x != null) throw AssertionError()<EOL>}"}
{"signature": "val tmpVarName =", "body": "kniRetVal<EOL>"}
{"signature": "if (list<NUM_LIT> != listOf<ULong>(MaxUL)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val toString<NUM_LIT> =", "body": "someStr.<!EVALUATED(<STR_LIT>)!>toString()<!><EOL>"}
{"signature": "val isJvmOverloads =", "body": "this.isJvmOverloadsGenerated()<EOL>"}
{"signature": "fun addSubtypeConstraintIfCompatible(lowerType: ConeKotlinType, upperType: ConeKotlinType, element: FirElement) {", "body": "<EOL><INDENT><INDENT>currentCommonSystem.addSubtypeConstraintIfCompatible(lowerType, upperType, ConeExpectedTypeConstraintPosition)<EOL><INDENT>}"}
{"signature": "val ktLoopDestructuringDeclaration =", "body": "ktFor.destructuringDeclaration<EOL>"}
{"signature": "val auxiliaryOrigin =", "body": "(owner as? KtLightMember<*>)?.lightMemberOrigin?.auxiliaryOriginalElement<EOL>"}
{"signature": "if (it) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>relatedTypeParameters.addIfNotNull(subtype.constructor.declarationDescriptor as? TypeParameterDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val TWO_PWR_<NUM_LIT>_ =", "body": "fromInt(<NUM_LIT> shl <NUM_LIT>)<EOL>"}
{"signature": "val clangArgsProvider =", "body": "ClangArgs.Native(configurables)<EOL>"}
{"signature": "val DIALOG_FQNAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val pixelFormat =", "body": "NSOpenGLPixelFormat()<EOL>"}
{"signature": "val ARRAY_ACCESS =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val o =", "body": "O.Alpha.Companion.FromCompanionAlpha()<EOL>"}
{"signature": "val subtractionAction =", "body": "Subtraction()<EOL>"}
{"signature": "if (x == null) break@loop else x) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val backingFieldHasDifferentType =", "body": "backingField != null && backingField?.returnTypeRef?.coneType != returnTypeRef.coneType<EOL>"}
{"signature": "fun addSuppressedDoesNotThrow() {", "body": "<EOL><INDENT><INDENT>val e<NUM_LIT> = Throwable()<EOL><INDENT><INDENT>val e<NUM_LIT> = Exception(<STR_LIT>)<EOL><EOL><INDENT><INDENT>e<NUM_LIT>.addSuppressed(e<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val cachedIrCallable =", "body": "getCachedIrCallableSymbol(<EOL>"}
{"signature": "val expectTypeParameters =", "body": "expectContainingClass?.typeParameters.orEmpty()<EOL>"}
{"signature": "val caseMax =", "body": "intCases.last().value as Int<EOL>"}
{"signature": "var edgesArraySize =", "body": "numberOfNodes + <NUM_LIT><EOL>"}
{"signature": "val gigabytes =", "body": "megabytes / <NUM_LIT><EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JsProtoBuf.typeAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JsProtoBuf.typeAnnotation, i), new.getExtension(JsProtoBuf.typeAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val deltaSubUnitDuration =", "body": "delta.toDuration(subUnit)<EOL>"}
{"signature": "var strIntegerPart =", "body": "strIntegerPartParam<EOL>"}
{"signature": "val xyz<NUM_LIT> =", "body": "<NUM_LIT>\",<EOL>"}
{"signature": "val PrintBitcodePhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, LLVMModuleRef>(<EOL>"}
{"signature": "if (x != null && x.isString()) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "fun acceptSuspend(fn: suspend () -> Unit) {", "body": "print(fn) }"}
{"signature": "fun beforeExecute(task: Task) {", "body": "<EOL><INDENT><INDENT>startTime = System.nanoTime()<EOL><INDENT>}"}
{"signature": "fun foo(c: C) {", "body": "<EOL><INDENT>c.bar<EOL>}"}
{"signature": "val mutedTests =", "body": "cache[methodKey]?.get(testClass.simpleName) ?: return null<EOL>"}
{"signature": "val sum<NUM_LIT> =", "body": "fun Int.(other: Int): Int = this + other<EOL>"}
{"signature": "val externalsMap =", "body": "mutableMapOf<File, String?>()<EOL>"}
{"signature": "val extraClassesToTranslate =", "body": "mutableSetOf<ClassDescriptor>()<EOL>"}
{"signature": "val scriptURL =", "body": "scriptUrls[scriptId] ?: url ?: error(text)<EOL>"}
{"signature": "val isUnaryOperator =", "body": "!isUnsigned && (name in ConvertibleIntegerOperators.unaryOperatorNames)<EOL>"}
{"signature": "val originalContents =", "body": "destFile.readText()<EOL>"}
{"signature": "val functionReferenceReturnType =", "body": "superType.arguments.last().typeOrFail<EOL>"}
{"signature": "if (!canPublishResources(target)) {", "body": "<EOL><INDENT><INDENT><INDENT>target.project.reportDiagnostic(KotlinToolingDiagnostics.ResourceMayNotBePublishedForTarget(target.name))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val nativeBuildTypeClass =", "body": "typeName(<STR_LIT>)<EOL>"}
{"signature": "if (intrinsic != null) BaseBinaryIntrinsic() {", "body": "left, right -> intrinsic.applyFun(toLeft(left), toRight(right)) }"}
{"signature": "val groupedMembers =", "body": "groupBy { TargetedSourceFile(it.target, it.sourceFile) }<EOL>"}
{"signature": "val mapped =", "body": "ArrayList<R>()<EOL>"}
{"signature": "if (href == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.classes += <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (expandedType.isDynamic() || expandedClassifier is TypeParameterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(TYPEALIAS_SHOULD_EXPAND_TO_CLASS.on(typeReference, expandedType))<EOL><INDENT><INDENT>}"}
{"signature": "fun runUnhandledExceptionHook(throwable: Throwable) {", "body": "<EOL><INDENT>val handler = UnhandledExceptionHookHolder.hook.value ?: throw throwable<EOL><INDENT>handler(throwable)<EOL>}"}
{"signature": "val unsignedArrayTypeByElementType =", "body": "unsignedTypes.associateWith { id -> id.shortClassName.primitiveArrayId() }<EOL>"}
{"signature": "if (safeIsString(x) != null) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val returnableBlockLoweringPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "if (fileSystemWatchEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!shouldPackageBeFiltered || !shouldBeFiltered(packageName, file)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>filteredList.add(wrapWithReadMonitoringIfNeeded(location, file) as JavaFileObject)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitCatch(aCatch: IrCatch, data: Visibles) {", "body": "<INDENT><INDENT><INDENT>// catchParameter only has scope over result expression, so create a new scope<INDENT><INDENT><INDENT>super.visitCatch(aCatch, data.extend(emptySet(), emptySet()))<INDENT><INDENT>}"}
{"signature": "val expectedKotlinOutputFiles =", "body": "listOf(<EOL>"}
{"signature": "val previousData =", "body": "edgesMap[previousInstruction] ?: continue<EOL>"}
{"signature": "if (resolvedCall.candidateDescriptor.name in SPECIAL_FUNCTION_NAMES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newContext<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var fromJava =", "body": "false<EOL>"}
{"signature": "val extras =", "body": "testCases.first().extras // Should be identical inside the same test case group."}
{"signature": "var exitCode =", "body": "<NUM_LIT><EOL>"}
{"signature": "val binaryOptions =", "body": "BinaryOptions.RuntimeAssertionsMode.chooseFor(cacheMode, optimizationMode, freeCompilerArgs.assertionsMode)<EOL>"}
{"signature": "fun coerceAtLeastComparable() {", "body": "<EOL><INDENT><INDENT>assertPrints(DayOfWeek.WEDNESDAY.coerceAtLeast(DayOfWeek.MONDAY), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(DayOfWeek.WEDNESDAY.coerceAtLeast(DayOfWeek.FRIDAY), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun doRun(f: () -> Unit) {", "body": "}// Note that although lambdas are not inlined in property accessors (neither in setter parameter, nor in extension receiver parameter),// we still generate version requirements, just in case we support inlining here in the future.inline var lambdaVarProperty: () -> Unit<INDENT>get() = {}"}
{"signature": "if (order?.expired ?: true) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val xval =", "body": "<NUM_LIT><EOL>"}
{"signature": "val typeParameterNameToIndex =", "body": "HashMap<Int, Int>()<EOL>"}
{"signature": "val PARCELER_ID =", "body": "ClassId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "var usedNonConst =", "body": "false<EOL>"}
{"signature": "if (obj is Foo || <expr>isValid(obj)</expr>) {", "body": "<EOL><INDENT><INDENT>consume(obj)<EOL><INDENT>}"}
{"signature": "val ktTypeArguments =", "body": "typeElement.typeArgumentsAsTypes<EOL>"}
{"signature": "val settingsHeader =", "body": "settings.firstOrNull()<EOL>"}
{"signature": "var liveVariables =", "body": "if (isExhaustive) BitSet() else data<EOL>"}
{"signature": "if (performanceExtension.metrics.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>project.logger.warn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>result = false<EOL><INDENT><INDENT>}"}
{"signature": "val BASE_RANGES_PACKAGE =", "body": "BASE_KOTLIN_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val context =", "body": "WasmBackendContext(moduleDescriptor, irBuiltIns, symbolTable, moduleFragment, propertyLazyInitialization, configuration)<EOL>"}
{"signature": "fun visitArgument(valueArgument: KtValueArgument) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitArgument(valueArgument)<EOL><INDENT><INDENT><INDENT>block(valueArgument)<EOL><INDENT><INDENT>}"}
{"signature": "var hasArguments =", "body": "false<EOL>"}
{"signature": "if (member is FirProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declaredLater.add(member.symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeProviderImpl =", "body": "KtFirTypeProvider(this, token)<EOL>"}
{"signature": "val enterNode =", "body": "createEnterSafeCallNode(safeCall)<EOL>"}
{"signature": "val entities =", "body": "imports.computeIfAbsent(packageName) { sortedSetOf() }<EOL>"}
{"signature": "if (declaration.valueParameters.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(containingClass.source, KtErrorsParcelize.PARCELABLE_PRIMARY_CONSTRUCTOR_IS_EMPTY, context)<EOL><INDENT><INDENT>}"}
{"signature": "val exportForCppRuntime =", "body": "NativeRuntimeNames.Annotations.exportForCppRuntimeClassId.asSingleFqName()<EOL>"}
{"signature": "var intersection =", "body": "false<EOL>"}
{"signature": "fun assign(o: StringPropertyWithPlus) {", "body": "<EOL><INDENT><INDENT>this.v = o.get()<EOL><INDENT>}"}
{"signature": "val initBlock =", "body": "atomicArrayField.getInitBlockForField(parentContainer)<EOL>"}
{"signature": "if (categoryName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>append(categoryName)<EOL><INDENT><INDENT><INDENT><INDENT>append(')')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val child =", "body": "stack.popLast()<EOL>"}
{"signature": "if (moduleInfoFile != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val moduleInfo = JavaModuleInfo.read(moduleInfoFile, javaFileManager, searchScope) ?: return null<EOL><INDENT><INDENT><INDENT>return JavaModule.Explicit(moduleInfo, listOf(JavaModule.Root(root, isBinary = true)), moduleInfoFile)<EOL><INDENT><INDENT>}"}
{"signature": "val mark<NUM_LIT> =", "body": "timeSource.markNow()<EOL>"}
{"signature": "val assignedValue =", "body": "wrapWithImplicitCastForAssignment(variableAssignment, visitor.convertToIrExpression(variableAssignment.rValue))<EOL>"}
{"signature": "val jsFunClass =", "body": "getIrClass(FqName(<STR_LIT>))<EOL>"}
{"signature": "var minResult =", "body": "CompileTimeResult(<STR_LIT>, Long.MAX_VALUE)<EOL>"}
{"signature": "val removedTxt =", "body": "File(foo, <STR_LIT>).apply { writeText(<STR_LIT>) }<EOL>"}
{"signature": "fun takesLambda(lambda: () -> Unit) {", "body": "<EOL><INDENT>lambda()<EOL>}"}
{"signature": "for (kotlinMarkerInterface in kotlinMarkerInterfaces) {", "body": "<EOL><INDENT><INDENT>sw.writeInterface()<EOL><INDENT><INDENT>sw.writeAsmType(Type.getObjectType(kotlinMarkerInterface))<EOL><INDENT><INDENT>sw.writeInterfaceEnd()<EOL><INDENT>}"}
{"signature": "for ((a, b) in map) {", "body": "<EOL><INDENT><INDENT>a + b<EOL><INDENT>}"}
{"signature": "if (declaration.isAnnotationClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val templatesDir =", "body": "File(defsOut, SCRIPT_DEFINITION_MARKERS_PATH).also { it.mkdirs() }<EOL>"}
{"signature": "val stdlibCoordinatesModules =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "when (compositeVariance) {", "body": "<INDENT><INDENT><INDENT><INDENT>TypeVariance.IN -> FixationDirection.EQUALITY // Assuming that variables in contravariant positions are fixed to subtype<INDENT><INDENT><INDENT><INDENT>TypeVariance.OUT -> FixationDirection.TO_SUBTYPE<INDENT><INDENT><INDENT><INDENT>TypeVariance.INV -> FixationDirection.EQUALITY<INDENT><INDENT><INDENT>}"}
{"signature": "val simpleKotlinName =", "body": "enum.classifier.topLevelName.asSimpleName()<EOL>"}
{"signature": "val propsMap =", "body": "props.associateBy { it.originalDescriptorName }<EOL>"}
{"signature": "for (file in moduleFragment.files) {", "body": "<EOL><INDENT><INDENT><INDENT>PowerAssertCallTransformer(SourceFile(file), pluginContext, messageCollector, functions)<EOL><INDENT><INDENT><INDENT><INDENT>.visitFile(file)<EOL><INDENT><INDENT>}"}
{"signature": "var dummySet =", "body": "mutableSetOf<IrFunctionAccessExpression>()<EOL>"}
{"signature": "val expectedIOSTestResults =", "body": "listOf(<EOL>"}
{"signature": "val functionReferenceTarget =", "body": "adaptedReferenceOriginalTarget ?:referencedFunction<EOL>"}
{"signature": "import import org.", "body": "jetbrains.annotations.NotNull;<EOL>"}
{"signature": "val mentry =", "body": "MME()<EOL>"}
{"signature": "val expectVisibility =", "body": "expectClassSymbol.visibility<EOL>"}
{"signature": "fun setResultingSubstitutor(substitutor: NewTypeSubstitutor?) {", "body": "<EOL><INDENT><INDENT>functionCall.setResultingSubstitutor(substitutor)<EOL><INDENT><INDENT>variableCall.setResultingSubstitutor(substitutor)<EOL><INDENT>}"}
{"signature": "if (char<NUM_LIT> < '\\u<NUM_LIT>') {", "body": "<INDENT><INDENT><INDENT><INDENT>// U+<NUM_LIT>.U+<NUM_LIT>FF -> <NUM_LIT><NUM_LIT><NUM_LIT>xxxxx <NUM_LIT><NUM_LIT>xxxxxx<INDENT><INDENT><INDENT><INDENT>// <NUM_LIT><NUM_LIT> meaningful bits -> <NUM_LIT> bytes<INDENT><INDENT><INDENT><INDENT>val codePoint = char<NUM_LIT>.toInt()<INDENT><INDENT><INDENT><INDENT>buffer[writtenBytes++] = (codePoint ushr <NUM_LIT>) or <NUM_LIT>b<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><INDENT><INDENT><INDENT><INDENT>buffer[writtenBytes++] = (codePoint and <NUM_LIT>b<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) or <NUM_LIT>b<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><INDENT><INDENT><INDENT>}"}
{"signature": "package ${IncrementalAggregatingReferencingClasspathProcessor.", "body": "CLASSPATH_TYPE.substringBeforeLast(<STR_LIT>)};<EOL>"}
{"signature": "val fqNameToCheck =", "body": "arguments.getOrNull(<NUM_LIT>)<EOL>"}
{"signature": "val typeIndex =", "body": "serializeIrType(type)<EOL>"}
{"signature": "val INTEROP_SIGN_EXTEND<INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "fun renderDeclarationModifiers(analysisSession: KtAnalysisSession, symbol: KtDeclarationSymbol, printer: PrettyPrinter) {", "body": "<EOL><INDENT><INDENT>modifierListRenderer.renderModifiers(analysisSession, symbol, this, printer)<EOL><INDENT>}"}
{"signature": "var parameterClassDeclaration =", "body": "parameter.type.classifierOrNull?.owner as? IrClass ?: return allParametersReplacements<EOL>"}
{"signature": "val ONE_UINT =", "body": "<NUM_LIT>u<EOL>"}
{"signature": "if (overridableMember is IrProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>overridableMember.getter?.mark()<EOL><INDENT><INDENT><INDENT><INDENT>overridableMember.setter?.mark()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun minII() {", "body": "<INDENT><INDENT>// Test for min(int, int): int<INDENT><INDENT>assertEquals(<STR_LIT>,<INDENT><INDENT><INDENT><INDENT><NUM_LIT>, min(<NUM_LIT>, <NUM_LIT>))<INDENT><INDENT>assertEquals(<STR_LIT>, <NUM_LIT>, min(<NUM_LIT>, <NUM_LIT>))<INDENT><INDENT>assertEquals(<STR_LIT>,<INDENT><INDENT><INDENT><INDENT><NUM_LIT>, min(-<NUM_LIT>, <NUM_LIT>))<INDENT>}"}
{"signature": "val NAME_GROUP =", "body": "<NUM_LIT><EOL>"}
{"signature": "val isFinishedSuccessfully =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "fun generateStub(text: String, codegen: BaseExpressionCodegen) {", "body": "<EOL><INDENT><INDENT>leaveTemps()<EOL><INDENT><INDENT>AsmUtil.genThrow(codegen.visitor, <STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun d(x: Int) {", "body": "<EOL><INDENT><INDENT>this[<STR_LIT>, <NUM_LIT>] = <!TOO_MANY_ARGUMENTS!><NUM_LIT><!><EOL><INDENT>}"}
{"signature": "val jvmTargetDescription =", "body": "arguments.jvmTarget ?: return JvmPlatforms.defaultJvmPlatform<EOL>"}
{"signature": "val xArray =", "body": "x.orEmpty()<EOL>"}
{"signature": "val classLikeCache =", "body": "session.firCachesFactory.createCache(::computeClass)<EOL>"}
{"signature": "val backendErrors =", "body": "computeErrors(backendDiagnostics, allowedErrorFilter)<EOL>"}
{"signature": "if (annotated.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.SUBCLASS_OPT_IN_INAPPLICABLE.on(entry, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (TypeUtils.isNullableType(type)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.INAPPLICABLE_LATEINIT_MODIFIER.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ktDeclaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (klass) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirRegularClass -> classifierStorage.createAndCacheIrClass(klass, parent)<EOL><INDENT><INDENT><INDENT>is FirAnonymousObject -> classifierStorage.createAndCacheAnonymousObject(klass, irParent = parent)<EOL><INDENT><INDENT>}"}
{"signature": "val frontend =", "body": "FrontendKinds.fromString(option)<EOL>"}
{"signature": "val nameCnt =", "body": "hashMapOf<String, Int>()<EOL>"}
{"signature": "val unsubsitutedScope =", "body": "declaration.unsubstitutedScope(context)<EOL>"}
{"signature": "val halfMax =", "body": "(<NUM_LIT> shl <NUM_LIT>) + <NUM_LIT><EOL>"}
{"signature": "var includeAssociatedTasks =", "body": "true<EOL>"}
{"signature": "if (!descriptor.isOverridable) {", "body": "<EOL><INDENT><INDENT><INDENT>function.body.statements += FunctionBodyTranslator.setDefaultValueForArguments(descriptor, innerContext)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in ((<NUM_LIT>u until <NUM_LIT><NUM_LIT>u step <NUM_LIT>).reversed() step <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>uintList += i<EOL><INDENT>}"}
{"signature": "var indexType =", "body": "Type.INT_TYPE<EOL>"}
{"signature": "val foundByString =", "body": "manager.findClass(stringRequest, allScope)<EOL>"}
{"signature": "fun testScriptWhereMethodHasClosure() {", "body": "<EOL><INDENT><INDENT>setUpEnvironment(<STR_LIT>)<EOL><EOL><INDENT><INDENT>val aClass = generateClass(<STR_LIT>)<EOL><INDENT><INDENT>val constructor = aClass.getConstructor(Integer.TYPE)<EOL><INDENT><INDENT>val script = constructor.newInstance(<NUM_LIT>)<EOL><INDENT><INDENT>val fib = aClass.getMethod(<STR_LIT>)<EOL><INDENT><INDENT>val invoke = fib.invoke(script)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, invoke as Int / <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val kotlinCallBuilder =", "body": "KotlinCallBuilder(bridgeBuilder.kotlinIrBuilder, symbols)<EOL>"}
{"signature": "var access =", "body": "clazz.access<EOL>"}
{"signature": "var numBits =", "body": "<NUM_LIT><EOL>"}
{"signature": "val allowedBuiltinExtensionFunctions =", "body": "listOf(<EOL>"}
{"signature": "fun filter(filter: (T) -> Boolean) {", "body": "<EOL><EOL><INDENT><INDENT>}"}
{"signature": "val platformCache =", "body": "IncrementalJsCache(jsCacheFile, icContext, serializerProtocol).apply { registerCache() }<EOL>"}
{"signature": "fun use(fn: (IntArray, String) -> Unit) {", "body": "<EOL><INDENT>fn(intArrayOf(<NUM_LIT>), <STR_LIT>)<EOL>}"}
{"signature": "if (param.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(param.source, FirJvmErrors.JVM_RECORD_NOT_LAST_VARARG_PARAMETER, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (operand == leftOperand) {", "body": "<EOL><INDENT><INDENT><INDENT>getKtExpressionNonErrorType(rightOperand)<EOL><INDENT><INDENT>}"}
{"signature": "if (old.hasOuterTypeId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(oldTypeTable.getType(old.outerTypeId), newTypeTable.getType(new.outerTypeId))) return false<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> ..< n) {", "body": "}"}
{"signature": "for (p in <NUM_LIT> until from) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(prev[p], array[p])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (b) {", "body": "<EOL><INDENT><INDENT>r<NUM_LIT> ?: <NUM_LIT><EOL><INDENT><INDENT>r<NUM_LIT> ?: r<NUM_LIT><EOL><INDENT><INDENT>asFun() ?: r<NUM_LIT> ?: <NUM_LIT><EOL><INDENT><INDENT>id(asFun()) ?: <NUM_LIT><EOL><EOL><INDENT><INDENT>returnInt() ?: returnInt() ?: asFun() ?: <NUM_LIT><EOL><INDENT>}"}
{"signature": "var parameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "import to the [file] might alter or break the<EOL>.", "body": ""}
{"signature": "val executeImplProducerClass =", "body": "symbols.functionN(<NUM_LIT>).owner<EOL>"}
{"signature": "when (possibleReturnType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is Maybe.Value -> possibleReturnType.value to null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null to DeferredReturnTypeOfSubstitution(substitutor, baseProperty.symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val expandedTypeRef =", "body": "declaration.expandedTypeRef<EOL>"}
{"signature": "import structAnonym.", "body": "*<EOL>"}
{"signature": "fun set(x: T) {", "body": "} // Missing warning in K<NUM_LIT>, K<NUM_LIT> get's this right<INDENT><!NOTHING_TO_OVERRIDE!>override<!> fun setNullable(x: T) {}"}
{"signature": "val GLOBAL_SET =", "body": "<STR_LIT><EOL>"}
{"signature": "if (stacktraceMode != null) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun dropAnnotationContainer() {", "body": "<EOL><INDENT><INDENT>annotationContainers.removeLast()<EOL><INDENT>}"}
{"signature": "val setContentMethod =", "body": "Composition::class.java.methods.first { it.name == <STR_LIT> }<EOL>"}
{"signature": "for (bitsDenormNaN in listOf(<NUM_LIT>xFFF8<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>L shl <NUM_LIT>, bitsNaN or <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(Double.fromBits(bitsDenormNaN).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertEquals(bitsNaN, Double.fromBits(bitsDenormNaN).toBits())<EOL><INDENT><INDENT>}"}
{"signature": "val result_<NUM_LIT> =", "body": "select(A(x<NUM_LIT>), A(x<NUM_LIT>))<EOL>"}
{"signature": "fun modifySelectedElement(element: PsiElement)<INDENT>override fun doTestWithPsiModification(ktFile: KtFile, testServices: TestServices) {", "body": "<INDENT><INDENT>val selectedElement = testServices.expressionMarkerProvider.getSelectedElement(ktFile)<INDENT><INDENT>modifySelectedElement(selectedElement)<INDENT><INDENT>// The test passes when `LLFirDeclarationModificationService` throws no exceptions.<INDENT><INDENT>LLFirDeclarationModificationService.getInstance(ktFile.project).elementModified(selectedElement)<INDENT>}"}
{"signature": "if (!source.isFakePsiElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val file = source.containingFile<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val offset = source.node.startOffset<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val document = file.viewProvider.document!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>document.getLineNumber(offset)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (descriptor.name.asString()) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> UnsignedArrayType.UBYTEARRAY<EOL><INDENT><INDENT><INDENT><STR_LIT> -> UnsignedArrayType.USHORTARRAY<EOL><INDENT><INDENT><INDENT><STR_LIT> -> UnsignedArrayType.UINTARRAY<EOL><INDENT><INDENT><INDENT><STR_LIT> -> UnsignedArrayType.ULONGARRAY<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "fun mainNoExit(args: Array<String>) {", "body": "<EOL><INDENT>testLauncherEntryPoint(args)<EOL>}"}
{"signature": "if (body is FirSingleExpressionBlock && declaration.symbol.hasExplicitReturnType) {", "body": "<EOL><INDENT><INDENT><INDENT>(body.statement as? FirReturnExpression)?.result?.checkExpressionForEnhancedTypeMismatch(<EOL><INDENT><INDENT><INDENT><INDENT>declaration.returnTypeRef.coneType,<EOL><INDENT><INDENT><INDENT><INDENT>reporter,<EOL><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT>FirJvmErrors.NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.propertyExtensionReceiverAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.propertyExtensionReceiverAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val CREATOR_FQN =", "body": "CREATOR_ID.asSingleFqName()<EOL>"}
{"signature": "package abc<EOL>.", "body": ""}
{"signature": "fun checkLongVararg(vararg xs: Long) {", "body": "<EOL><INDENT>assertTrue(xs is LongArray)<EOL>}"}
{"signature": "fun visitAccessInstruction(instruction: AccessValueInstruction) {", "body": "<EOL><INDENT><INDENT>visitInstructionWithNext(instruction)<EOL><INDENT>}"}
{"signature": "val modifierListOwner =", "body": "parent<EOL>"}
{"signature": "fun testDecoding(decode: (String) -> Any) {", "body": "<EOL><INDENT>result = decode(<STR_LIT>) as String<EOL>}"}
{"signature": "val auxJar =", "body": "target.sourcesJarTask(auxCompilation)<EOL>"}
{"signature": "val currentLabels =", "body": "hashSetOf<LabelNode>()<EOL>"}
{"signature": "val op<NUM_LIT> =", "body": "irCall.getValueArgument(<NUM_LIT>)!!<EOL>"}
{"signature": "val unitUsageInformation =", "body": "mutableMapOf<AbstractInsnNode, MutableSet<AbstractInsnNode>>()<EOL>"}
{"signature": "val unboxState =", "body": "if (isInlineClassExpected) SuspendState(unit) else null<EOL>"}
{"signature": "val inlinedVersion =", "body": "(binaryClass as? FileBasedKotlinClass)?.classVersion ?: return<EOL>"}
{"signature": "if (insn.label in currentLabels) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>insnsToRemove.add(insn)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun flagsChanged(event: NSEvent) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val moduleA =", "body": "compileKlib(testFiles, extraArgs, dirA)<EOL>"}
{"signature": "var NegativeInfinity =", "body": "<NUM_LIT>f / <NUM_LIT>f<EOL>"}
{"signature": "if (message.method == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addLocation(message.params.callFrames[<NUM_LIT>]);<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stepInto();<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val operator =", "body": "ktExpression.getDynamicOperator()<EOL>"}
{"signature": "val copyCall =", "body": "copy.delegatedConstructor<EOL>"}
{"signature": "val kNodeInitType =", "body": "LLVMGetTypeByName(llvm.module, <STR_LIT>)!!<EOL>"}
{"signature": "val pow =", "body": "<NUM_LIT>.pow(decimals)<EOL>"}
{"signature": "var couldBeOptional =", "body": "true<EOL>"}
{"signature": "val declarationUnderCaret =", "body": "testServices.expressionMarkerProvider.getElementOfTypeAtCaret<KtClassLikeDeclaration>(ktFile)<EOL>"}
{"signature": "var ff =", "body": "f<EOL>"}
{"signature": "val externName =", "body": "annotation.properValue(<STR_LIT>)<EOL>"}
{"signature": "var hasOnDestroy =", "body": "false<EOL>"}
{"signature": "if (twoReceivers) {", "body": "<EOL><INDENT><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (javaSeExists) {", "body": "<INDENT><INDENT>// The java.se module is a root, if it exists.<INDENT><INDENT>result.add(<STR_LIT>)<INDENT>}"}
{"signature": "fun visitStubNode(node: StubNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitStubNode(node)<EOL><INDENT>}"}
{"signature": "when(l) {", "body": "<EOL><INDENT>is <!CANNOT_CHECK_FOR_ERASED!>MutableList<String><!> -> <NUM_LIT><EOL><INDENT>else <!SYNTAX!><NUM_LIT><!><EOL>}"}
{"signature": "if (type == KDocElementTypes.KDOC_TAG) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinComponent =", "body": "project.components.getByName(<STR_LIT>) as ComponentWithVariants<EOL>"}
{"signature": "val lib<NUM_LIT>V<NUM_LIT> =", "body": "createKlibDir(<STR_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "when (val qualifiedReference = jsQualifier?.makeRef()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>null -> importStatement<EOL><INDENT><INDENT><INDENT><INDENT>else -> JsCompositeBlock(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>importStatement,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>jsElementAccess(declarationStableName, qualifiedReference).putIntoVariableWitName(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declarationStableName.toJsName()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (resolvedCallAtom != null) {", "body": "<EOL><INDENT><INDENT><INDENT>additionalDiagnosticReporter.reportAdditionalDiagnostics(resolvedCallAtom, resultingDescriptor, diagnosticHolder, diagnostics)<EOL><INDENT><INDENT>}"}
{"signature": "val PROHIBITED_SYMBOLS =", "body": "listOf(' ', ',', '(', ')', '&', '|', '!')<EOL>"}
{"signature": "val CHAR_SIZE_BYTES =", "body": "<NUM_LIT><EOL>"}
{"signature": "val chromeHeadlessNoSandbox =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testBreakNoinline() {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, testBreak(), <STR_LIT>)<EOL>}"}
{"signature": "val splitter =", "body": "AnnotationSplitter(storageManager, contextReceiver.type.annotations, EnumSet.of(AnnotationUseSiteTarget.RECEIVER))<EOL>"}
{"signature": "val overridingUtilWithEnhancementUnwrapped =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>OverridingUtil<EOL>"}
{"signature": "when (textFormat) {", "body": "<EOL><INDENT><INDENT>RenderingFormat.PLAIN -> message<EOL><INDENT><INDENT>RenderingFormat.HTML -> <STR_LIT><EOL><INDENT>}"}
{"signature": "val typeCheckerState =", "body": "ClassicTypeCheckerState(isErrorTypeEqualsToAnything = false)<EOL>"}
{"signature": "val currentPath =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val konanIdSignaturerConstructor =", "body": "konanIdSignaturerClass.constructors.single()<EOL>"}
{"signature": "if (containerType == LAYOUT_CONTAINER) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>iv.invokeinterface(containerType.internalClassName, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var refAProp =", "body": "A::prop<EOL>"}
{"signature": "fun foo(r: SuspendRunnable) {", "body": "}<EOL><EOL>fun bar(): String = <STR_LIT><EOL><EOL>abstract class SubInt : () -> Int<EOL><EOL>fun test(f: () -> String, s: SubInt) {<EOL><INDENT>foo(f)<EOL><INDENT>foo(s)<EOL><INDENT>foo(::bar)<EOL>}"}
{"signature": "val baseSource =", "body": "binaryExpression.toFirSourceElement()<EOL>"}
{"signature": "val expressionTypeProviderImpl =", "body": "KtFirExpressionTypeProvider(this, token)<EOL>"}
{"signature": "val classpathHistory =", "body": "tmp.newFolder(<STR_LIT>)<EOL>"}
{"signature": "val EXAMPLE_ANNOTATION_REGEX =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val expectedAllParts =", "body": "multifileClasses.flatMap { cache.getAllPartsOfMultifileFacade(it.outputClass.className).orEmpty() }<EOL>"}
{"signature": "if (field.javaType == Descriptors.FieldDescriptor.JavaType.MESSAGE) {", "body": "<EOL><INDENT><INDENT><INDENT>addMessageToProcessIfNeeded(field.messageType)<EOL><INDENT><INDENT>}"}
{"signature": "for (dependentModuleInfoFile in moduleInfoFilesFromDependencies) {", "body": "<EOL><INDENT><INDENT><INDENT>val moduleName = dependentModuleInfoFile.relativePath.substringBefore('/')<EOL><INDENT><INDENT><INDENT>addJavaCompiledModule(configuration, configurationKind, moduleName, bySources)<EOL><INDENT><INDENT>}"}
{"signature": "val elements =", "body": "mutableListOf<Wasm>()<EOL>"}
{"signature": "val res<NUM_LIT> =", "body": "foo(<STR_LIT>)<EOL>"}
{"signature": "val groupId =", "body": "dependencyNode.getSingleChildValueOrNull(<STR_LIT>)<EOL>"}
{"signature": "var colspan =", "body": "Natural(<NUM_LIT>)<EOL>"}
{"signature": "if (effect !is ConditionalEffect || effect.simpleEffect !is ESReturns || effect.simpleEffect.value.isWildcard) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resultingClauses += effect<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isOperatorFunction =", "body": "cursor.spelling.startsWith(<STR_LIT>)<EOL>"}
{"signature": "val restrictedFilter =", "body": "kindFilter.restrictedToKindsOrNull(DescriptorKindFilter.CLASSIFIERS_MASK) ?: return listOf()<EOL>"}
{"signature": "val moduleBindings =", "body": "HashMap<TestModule?, BindingContext>()<EOL>"}
{"signature": "val innerResult =", "body": "removeFirstInnerStatement(statement.statements[<NUM_LIT>])<EOL>"}
{"signature": "val genericInterfaces =", "body": "klass.getGenericInterfaces().toList()<EOL>"}
{"signature": "val newOrModified =", "body": "ArrayList<File>()<EOL>"}
{"signature": "val specSentencesStorage =", "body": "SpecSentencesStorage()<EOL>"}
{"signature": "if (fir.lValue.source?.psi == expression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fir.lValue.resolvedType.asKtType()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (facadeName == null || facadeName !in visitedMultifileFacades) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(name)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val NOT_WS =", "body": "<STR_LIT><EOL>"}
{"signature": "val projectComponentIdentifier =", "body": "resolution.dependency.id as? ProjectComponentIdentifier ?: return emptyList()<EOL>"}
{"signature": "fun addProvisionalSourceLocations(locations: List<SourceLocation>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sourceLocations += locations<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotationMethod =", "body": "method.containingClass.isAnnotationType<EOL>"}
{"signature": "if (!mandatoryTransformationsOnly && canBeOptimized(methodNode) && !generationState.config.disableOptimization) {", "body": "<EOL><INDENT><INDENT><INDENT>optimizationTransformer.transform(<STR_LIT>, methodNode)<EOL><INDENT><INDENT>}"}
{"signature": "val jsArrayPush =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "fun testFun() {", "body": "<EOL><INDENT>System.out.println(<STR_LIT>)<EOL>}"}
{"signature": "fun ExpectComposable(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>value: String,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>composeText: (String) -> String,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>content: @Composable (v: String) -> Unit<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>content(composeText(value))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val underlyingClass =", "body": "underlyingType.getClass()<EOL>"}
{"signature": "val INCREMENTAL_COMPILATION_COMPLETED =", "body": "<STR_LIT><EOL>"}
{"signature": "val scopeContextStringRepresentationPretty =", "body": "renderForTests(elementToAnalyze, scopeContext, printPretty = true)<EOL>"}
{"signature": "if (first.extensionReceiverParameter?.type != second.extensionReceiverParameter?.type) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val lastTask =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "if (!varControlFlowState.isDeclared) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>isDeclared = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (fqName.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fqName.dropLast(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val chainedOrSingle =", "body": "ChainedMemberScope.createOrSingle(message, nonEmptyScopes)<EOL>"}
{"signature": "val cirClassifier =", "body": "typeAliasContext.get<CirClassifier>(node) ?: return null<EOL>"}
{"signature": "if (element is FirPropertyAccessor) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val BASE_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val KOTLIN_STDLIB_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val isEscapedIdentifiersResolved =", "body": "<EOL><INDENT><INDENT>context.configuration.languageVersionSettings.supportsFeature(LanguageFeature.JsAllowInvalidCharsIdentifiersEscaping)<EOL>"}
{"signature": "fun normalizeDeclaration() {", "body": "<EOL><INDENT>}"}
{"signature": "val runFileDir =", "body": "File(daemonOptions.runFilesPathOrDefault)<EOL>"}
{"signature": "val isActualDynamic =", "body": "actualType is ConeDynamicType<EOL>"}
{"signature": "val bbLocalAlloc =", "body": "basicBlock(<STR_LIT>, null)<EOL>"}
{"signature": "if (n > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><!TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM!>fact(n - <NUM_LIT>)<!> <!UNRESOLVED_REFERENCE!>*<!> n<EOL><INDENT><INDENT>}"}
{"signature": "fun testFakeOverrideAbstractAndConcreteDeclarations() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(c to a, c to b)<EOL><INDENT><INDENT>doTest(c, setOf(bridge(a, b)))<EOL><INDENT>}"}
{"signature": "val assertionsMode =", "body": "registeredDirectives.singleOrZeroValue(ASSERTIONS_MODE) ?: AssertionsMode.DEFAULT<EOL>"}
{"signature": "fun testTypeParameterAnnotation() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun applyHierarchyTemplate(template: KotlinHierarchyBuilder.Root.() -> Unit) {", "body": "<EOL><INDENT><INDENT>hierarchy.applyHierarchyTemplate(template)<EOL><INDENT>}"}
{"signature": "fun testAdaptedCR() {", "body": "<EOL><INDENT>useVararg(::withVarargOfInt)<EOL>}"}
{"signature": "if (isTopLevelContainer(container)) {", "body": "<EOL><INDENT><INDENT><INDENT>getTopLevelPropertyDeclarationName(bridgeBuilderResult.kotlinFile, property)<EOL><INDENT><INDENT>}"}
{"signature": "val unwrappedReturnType =", "body": "returnType.unwrapTypedefs()<EOL>"}
{"signature": "for (part in backendContext.state.factory.packagePartRegistry.parts.values.addCompiledPartsAndSort(backendContext.state)) {", "body": "<EOL><INDENT><INDENT><INDENT>part.addTo(builder)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotation.source, FirJvmErrors.SYNCHRONIZED_ON_INLINE, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val fromSourceFirst =", "body": "candidates.sortedBy { it.symbol.fir.moduleData.session.kind != FirSession.Kind.Source }<EOL>"}
{"signature": "if (varIndex < argumentVarEnd) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Loaded an argument variable, but not an expected one => broken evaluation order<INDENT><INDENT><INDENT><INDENT>return false<INDENT><INDENT><INDENT>}"}
{"signature": "fun testClassIsRenamedNonIC(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestClassIsRenamed(gradleVersion, defaultBuildOptions)<EOL><INDENT>}"}
{"signature": "val hasReferenceError =", "body": "checkFunctionReferenceErrors(functionCall)<EOL>"}
{"signature": "if (type.hasComposableAnnotation() && type.isSuspendFunctionType) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>ComposeErrors.COMPOSABLE_SUSPEND_FUN.on(element)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!languageVersionSettings.supportsFeature(feature)) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(Errors.UNSUPPORTED_FEATURE.on(modifier, feature to languageVersionSettings))<EOL><INDENT><INDENT>}"}
{"signature": "val currentSectionsPath =", "body": "Stack<Pair<SectionTag, String>>()<EOL>"}
{"signature": "val theType =", "body": "it.type ?: continue<EOL>"}
{"signature": "if (vararg && varargComponentType != inputType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>afterVararg = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val POD_SPEC_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun setContent(content: @Composable () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>globalContent = content<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var total =", "body": "B<NUM_LIT>a<EOL>"}
{"signature": "val CLASS_ATTRIBUTES =", "body": "<STR_LIT><EOL>"}
{"signature": "val valFromThisFunction =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(a<NUM_LIT>: Array<in Int>, a<NUM_LIT>: Array<Int>) {", "body": "<EOL><EOL><INDENT>val c: Int = <!TYPE_MISMATCH, TYPE_MISMATCH!>foo(a<NUM_LIT>, a<NUM_LIT>)<!><EOL><EOL>}"}
{"signature": "if (operationType === ANDAND) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.jumpOnFalse(resultLabel, expression, builder.getBoundValue(left))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val JFPredicate =", "body": "javaFunction(<STR_LIT>)<EOL>"}
{"signature": "fun handleObjectCreate(target: Node, arg: JsExpression?) {", "body": "<EOL><INDENT><INDENT>if (arg == null) return<EOL><EOL><INDENT><INDENT>val prototypeNode = context.extractNode(arg) ?: return<EOL><INDENT><INDENT>target.addDependency(prototypeNode.original)<EOL><INDENT><INDENT>target.addExpression(arg)<EOL><INDENT>}"}
{"signature": "if (!attributes.get().containsKey(specNameKey)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(specNameKey, specName.get())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isSubclassOptIn =", "body": "classId == OptInNames.SUBCLASS_OPT_IN_REQUIRED_CLASS_ID<EOL>"}
{"signature": "val INCOMPLETE_LINE_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val VARIANCE_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "fun disableScriptDefinitionsFromClasspath(disable: Boolean) {", "body": "<EOL><INDENT><INDENT>myDisableScriptDefinitionsFromClasspath = disable<EOL><INDENT>}"}
{"signature": "val FILE_TYPE_OFFSET =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun foo(job: () -> Unit) {", "body": "<EOL><INDENT><INDENT>Runnable(job)<EOL><INDENT><INDENT>Runnable(job)<EOL><INDENT><INDENT>Runnable(job)<EOL><INDENT>}"}
{"signature": "val reportData =", "body": "JsonTreeParser.parse(resultsContent)<EOL>"}
{"signature": "fun dontCompleteMe(_foo: Int, bar: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val _foo<NUM_LIT> = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>$statement<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (element !in elementsToSkip) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>element.accept(delegate)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package name is not present in the manifest file \" +<EOL>.", "body": ""}
{"signature": "fun lombokConfigurationFile(file: File) {", "body": "<EOL><INDENT><INDENT>configurationFile = file<EOL><INDENT>}"}
{"signature": "val filesToCache =", "body": "configuration.get(KonanConfigKeys.FILES_TO_CACHE)<EOL>"}
{"signature": "val indexedTypes =", "body": "arrayOfNulls<IrArrayMemoryReader>(icData.size)<EOL>"}
{"signature": "val additionalMetadata =", "body": "packageMetadata.missingMetadata(<EOL>"}
{"signature": "val basicMethod =", "body": "asJavaMethod(<EOL>"}
{"signature": "val KOTLIN_STDLIB_JAR_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val OBJCNAMES_PACKAGE_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val subdirectories =", "body": "directory.listFiles { file -> file.isDirectory } ?: return null<EOL>"}
{"signature": "if (isAlreadyAnnotated) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (val x<NUM_LIT>) {", "body": "}"}
{"signature": "val Function =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "if (klass != null && klass.owner.isCompanion) {", "body": "<EOL><INDENT><INDENT><INDENT>callsOnCompanionObjects[expression] = klass<EOL><INDENT><INDENT>}"}
{"signature": "val bit =", "body": "irInt(<NUM_LIT> shl (sourceParameterIndex % <NUM_LIT>))<EOL>"}
{"signature": "if (value.canHaveSideEffects()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val index = frameMap.enterTemp(type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resultValue = StackValue.local(index, type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resultType = type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resultValue.store(value, v)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val visibilityRendered =", "body": "(options.renderDefaultVisibility || constructor.constructedClass.modality != Modality.SEALED)<EOL>"}
{"signature": "when (val y = id(x!!)) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> x.length<EOL><INDENT><INDENT><STR_LIT> -> y.length<EOL><INDENT>}"}
{"signature": "val companionField =", "body": "declaringClass.getDeclaredFieldOrNull(name)<EOL>"}
{"signature": "val nullabilityFromQualifiers =", "body": "effectiveQualifiers.nullability.takeIf { shouldEnhance }<EOL>"}
{"signature": "var headIndex =", "body": "EMPTY_INDEX<EOL>"}
{"signature": "val Unit =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "fun enterBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression) {", "body": "<EOL><INDENT><INDENT>graphBuilder.enterBinaryLogicExpression(binaryLogicExpression).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (context != null && context !is KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT>val logInfoForContextElement = (context as? PsiFile)?.virtualFile?.path ?: context.getElementTextWithContext()<EOL><INDENT><INDENT><INDENT>LOG.warn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if ((ha - hb) > <NUM_LIT>x<NUM_LIT>c<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return a + b<EOL><INDENT>}"}
{"signature": "for (x in X) {", "body": "}"}
{"signature": "fun literals() {", "body": "<EOL><INDENT>PropertyHolder::<!DEPRECATION!>a<NUM_LIT><!><EOL><INDENT>PropertyHolder::<!DEPRECATION!>a<NUM_LIT><!><EOL><INDENT>PropertyHolder::withGetter<EOL><INDENT>PropertyHolder::withSetter<EOL>}"}
{"signature": "fun replaceContextReceivers(newContextReceivers: List<FirContextReceiver>) {", "body": "<EOL><INDENT><INDENT>contextReceivers = newContextReceivers.toMutableOrEmpty()<EOL><INDENT>}"}
{"signature": "val createInvariantKTypeProjection =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (currentWorstDeprecation == null || deprecationInfo > currentWorstDeprecation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>worstDeprecationInfo = deprecationInfo<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (intKind == Kind.GLOBAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return@test<NUM_LIT> Global(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isRemovingBody) {", "body": "<EOL><INDENT><INDENT><INDENT>body = context.irFactory.createBlockBody(<EOL><INDENT><INDENT><INDENT><INDENT>UNDEFINED_OFFSET,<EOL><INDENT><INDENT><INDENT><INDENT>UNDEFINED_OFFSET<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val subClassDescriptor =", "body": "getSymbolDescriptor(subClass) as? ClassDescriptor ?: return false<EOL>"}
{"signature": "fun absFun<NUM_LIT>()<EOL><EOL><INDENT>abstract fun absFun<NUM_LIT>()<EOL><EOL><INDENT><!INAPPLICABLE_JVM_NAME!>@JvmName(<STR_LIT>)<!><EOL><INDENT>open fun openFun() {", "body": "}<EOL><EOL><INDENT>@JvmName(<STR_LIT>)<EOL><INDENT>protected fun protectedFinalFun() {}"}
{"signature": "if (target.isSecondaryConstructorCall) {", "body": "<EOL><INDENT><INDENT><INDENT>val factory = context.buildConstructorFactory(target, target.parentAsClass)<EOL><INDENT><INDENT><INDENT>replaceSecondaryConstructorWithFactoryFunction(expression, factory.symbol)<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.functionAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.functionAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val defaultManifestLocation =", "body": "target.project.file(<STR_LIT>)<EOL>"}
{"signature": "fun parameterFunc(func: suspend () -> Unit) {", "body": "}<EOL>fun testFunc() {}"}
{"signature": "fun inlineFun<NUM_LIT>(p: () -> Unit) {", "body": "<EOL><INDENT>p()<EOL><INDENT><!INLINE_CALL_CYCLE!>inlineFun<NUM_LIT>(p)<!><EOL>}"}
{"signature": "when (val fir = firSymbol.fir) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirPropertyAccessor -> fir.propertySymbol.resolvedReceiverTypeRef<EOL><INDENT><INDENT><INDENT>else -> firSymbol.resolvedReceiverTypeRef<EOL><INDENT><INDENT>}"}
{"signature": "if (type.mustNotBeNull()?.isFromJava == true && c.dataFlowInfo.getStableNullability(dataFlowValue()).canBeNull()) {", "body": "<EOL><INDENT><INDENT>body()<EOL><INDENT>}"}
{"signature": "val classesPath =", "body": "if (jarPath.extension == <STR_LIT>) jarPath else jarPath.parentFile<EOL>"}
{"signature": "val ann<NUM_LIT> =", "body": "anns<NUM_LIT>Sorted[i<NUM_LIT>]<EOL>"}
{"signature": "if (cachedSerializer != null) {", "body": "<EOL><INDENT><INDENT><INDENT>cachedSerializer<EOL><INDENT><INDENT>}"}
{"signature": "if (old.hasAnnotation()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.annotation, new.annotation)) return false<EOL><INDENT><INDENT>}"}
{"signature": "when (observedEffect.isImplies(effect.simpleEffect)) {", "body": "<INDENT><INDENT><INDENT>// observed effect implies clause's effect => clause's effect was fired => clause's condition is true<INDENT><INDENT><INDENT>true -> effect.condition.accept(this)<INDENT><INDENT><INDENT>// Observed effect *may* or *doesn't* implies clause's - no useful information<INDENT><INDENT><INDENT>null, false -> null<INDENT><INDENT>}"}
{"signature": "fun bar(f: Foo<Bar>) {", "body": "<EOL><INDENT><INDENT>val dnn = f.<!INVISIBLE_MEMBER!>dnn<!><EOL><INDENT><INDENT>val flex = f.<!INVISIBLE_MEMBER!>flex<!><EOL><INDENT>}"}
{"signature": "var endArgumentOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (pathSegments.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>javaClass<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val enhancedToOriginalFunctions =", "body": "mutableMapOf<FirNamedFunctionSymbol, FirNamedFunctionSymbol>()<EOL>"}
{"signature": "val isExcleq =", "body": "expression.symbol.owner.name.asString() == BuiltInOperatorNames.EQEQ<EOL>"}
{"signature": "val firIdentical =", "body": "FIR_IDENTICAL in registeredDirectives<EOL>"}
{"signature": "val sharedNativeCompilation =", "body": "kotlin.metadata().compilations.getByName(<STR_LIT>)<EOL>"}
{"signature": "val isMultifileFacade =", "body": "irFile.fileEntry is MultifileFacadeFileEntry<EOL>"}
{"signature": "var topLevel =", "body": "Z(<NUM_LIT>)<EOL>"}
{"signature": "for ((i, valueParameterType) in valueParameterTypes.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>operatorDescriptor.addValueParameter(<EOL><INDENT><INDENT><INDENT><INDENT>IrBuiltinValueParameterDescriptorImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>operatorDescriptor, Name.identifier(<STR_LIT>), i, valueParameterType.originalKotlinType!!<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val libraryFilterCachingService =", "body": "LibraryFilterCachingService.registerIfAbsent(project)<EOL>"}
{"signature": "val nativeOutputKind =", "body": "nativeOutputKindClass.renderShort()<EOL>"}
{"signature": "if (parentBuilder != null && parentBuilder.owner !is IrFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>parentBuilder.include(builder)<EOL><INDENT><INDENT>}"}
{"signature": "val daemonOptions =", "body": "configureDaemonOptions()<EOL>"}
{"signature": "val baseOutputPath =", "body": "JsEnvironmentConfigurator.getJsModuleArtifactPath(testServices, module.name, translationMode)<EOL>"}
{"signature": "for (i in <NUM_LIT>.<statements.size) {", "body": "<EOL><INDENT><INDENT><INDENT>require(statements[i].parent == parent)<EOL><INDENT><INDENT>}"}
{"signature": "val ExposedCopyVisibility =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "fun option(name: Any) {", "body": "<EOL><INDENT><INDENT>options.put(name.toString(), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val expressionProperty =", "body": "<NUM_LIT><EOL>"}
{"signature": "val outerInvocations =", "body": "AtomicInteger(<NUM_LIT>)<EOL>"}
{"signature": "val propertyAccessorBridgeBodies =", "body": "bridgeBuilderResult.propertyAccessorBridgeBodies<EOL>"}
{"signature": "for (j in (throw Exception()) downTo <NUM_LIT>u) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (receiverType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(CompilerConeAttributes.ExtensionFunctionType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateCharProperties() {", "body": "<EOL><INDENT><INDENT>val file = outputFile.resolveSibling(<STR_LIT>)<EOL><INDENT><INDENT>generateFileHeader(file)<EOL><EOL><INDENT><INDENT>writer?.appendLine(<STR_LIT>)<EOL><INDENT><INDENT>writer?.close()<EOL><INDENT>}"}
{"signature": "val primitiveClassName =", "body": "getKotlinPrimitiveClassName(type)<EOL>"}
{"signature": "val testsFunction =", "body": "JsFunction(context.scope(), JsBlock(), <STR_LIT>)<EOL>"}
{"signature": "val symbolForDeclaration =", "body": "HashMap<IrElement, IrSymbol>()<EOL>"}
{"signature": "val fooTxt =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val session =", "body": "NSURLSession.sessionWithConfiguration(<EOL>"}
{"signature": "when (successfulReceivers.size) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> sink.yieldDiagnostic(InapplicableWrongReceiver())<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> resolveExtensionReceiver(successfulReceivers, candidate, expectedType, sink, context)<EOL><INDENT><INDENT><INDENT>else -> sink.yieldDiagnostic(MultipleContextReceiversApplicableForExtensionReceivers())<EOL><INDENT><INDENT>}"}
{"signature": "package test<NUM_LIT>test<NUM_LIT><EOL>.", "body": ""}
{"signature": "val boxedBasicValue =", "body": "CleanBoxedValue(type, insn, progressionIterator, generationState)<EOL>"}
{"signature": "val metadataCompilations =", "body": "target.awaitMetadataCompilationsCreated() // returns common + shared native"}
{"signature": "if (illegalLiteralPrefixOrSuffix(elementType)) {", "body": "<EOL><INDENT><INDENT><INDENT>report(prefixOrSuffix.toKtLightSourceElement(source.treeStructure), context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "fun takeLong(value : Long) {", "body": "}<EOL>fun takeInt(value : Int) {}"}
{"signature": "val internalDomain =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!isProperlyExhaustive) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val lamO =", "body": "{ <STR_LIT> }<EOL>"}
{"signature": "if (generateContinuation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irCall(backendContext.wasmSymbols.coroutineEmptyContinuation.owner.getter!!)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (sourceElement is KtTypeParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>INCONSISTENT_TYPE_PARAMETER_BOUNDS.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>sourceElement, typeParameterDescriptor, containingDeclaration, conflictingTypes<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fileEntry =", "body": "irFile.fileEntry<EOL>"}
{"signature": "val allowedAnnotationTargets =", "body": "annotation.getAllowedAnnotationTargets(context.session)<EOL>"}
{"signature": "for (i in arr) {", "body": "<EOL><INDENT>sum += i<EOL>  }"}
{"signature": "if (afterK<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>this.origin == IrDeclarationOrigin.GeneratedByPlugin(SerializationPluginKey)<EOL><INDENT>}"}
{"signature": "val ownerFn =", "body": "expression.symbol.owner<EOL>"}
{"signature": "if (arguments.sourceMapPrefix != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(WARNING, <STR_LIT>, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is FirPropertyAccessor) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val bodyAccessibleDeclarationNames =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>accessibleDeclarationNames + declarationWithBody.valueParameters.map { it.nameAsSafeName }<EOL>"}
{"signature": "val notEqual<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u != uint<!><EOL>"}
{"signature": "val anotherModule =", "body": "doWork { <STR_LIT> }<EOL>"}
{"signature": "fun addModule(module: Module) {", "body": "<EOL><INDENT><INDENT>chunk.add(module)<EOL><INDENT>}"}
{"signature": "fun testRandomArrayArgumentsJS() {", "body": "<EOL><INDENT><INDENT>doRandomArrayArgumentsTest<K<NUM_LIT>JSCompilerArguments>()<EOL><INDENT>}"}
{"signature": "val executableFileName =", "body": "if (SystemInfo.isWindows) <STR_LIT> else executableName<EOL>"}
{"signature": "fun preProcessReference(@Suppress(<STR_LIT>) expression: KtReferenceExpression) {", "body": "<INDENT><INDENT><INDENT>// do nothing<INDENT><INDENT>}"}
{"signature": "fun visitIsExpression(expression: KtIsExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>mark(expression)<EOL><INDENT><INDENT><INDENT>val left = expression.leftHandSide<EOL><INDENT><INDENT><INDENT>generateInstructions(left)<EOL><INDENT><INDENT><INDENT>createNonSyntheticValue(expression, MagicKind.IS, left)<EOL><INDENT><INDENT>}"}
{"signature": "val KLIB_PROPERTY_INCLUDED_FORWARD_DECLARATIONS =", "body": "<STR_LIT><EOL>"}
{"signature": "fun ensureCapacity(minimumCapacity: Int) {", "body": "<EOL><INDENT>}"}
{"signature": "val cs =", "body": "c.ifEmpty { listOf(<STR_LIT>) }<EOL>"}
{"signature": "val newNameConvention =", "body": "REM_TO_MOD_OPERATION_NAMES.inverse()[functionDescriptor.name]<EOL>"}
{"signature": "val requirements =", "body": "task.requiredNpmDependencies<EOL>"}
{"signature": "val subjectPsi =", "body": "resolvedCall.valueArguments.values.singleOrNull()?.arguments?.singleOrNull()?.getArgumentExpression() ?: return null<EOL>"}
{"signature": "fun testReflection() {", "body": "<EOL><INDENT><INDENT>val reflect = ForTestCompileRuntime.reflectJarForTests()<EOL><INDENT><INDENT>val usage = module(<STR_LIT>, listOf(reflect))<EOL><INDENT><INDENT>val (stdout, stderr) = runModule(<STR_LIT>, listOf(usage, reflect))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, stderr)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, stdout)<EOL><INDENT>}"}
{"signature": "val pastMark =", "body": "baseMark - longDuration<EOL>"}
{"signature": "val cBindings =", "body": "Bindings()<EOL>"}
{"signature": "fun setUp(testInfo: TestInfo) {", "body": "<EOL><INDENT><INDENT>buildDir = createTempDirectory(testInfo.testClass.get().simpleName, testInfo.testMethod.get().name)<EOL><INDENT>}"}
{"signature": "val aKt =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val acceptable =", "body": "enforcedProperties.isAcceptableValue(this, optionName)<EOL>"}
{"signature": "val secondAttempt =", "body": "doTestInBlockModification(file, elementToModify, testServices, dumpFirFile, firSession)<EOL>"}
{"signature": "val GET_AND_SET_ARRAY_ELEMENT<INDENT> =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!isMoreSpecific(candidate.override, override.override)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (abstractMember.typeParameters.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>val reportOn = ktFunction?.typeParameterList ?: ktFunction?.funKeyword ?: funInterfaceKeyword<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.FUN_INTERFACE_ABSTRACT_METHOD_WITH_TYPE_PARAMETERS.on(reportOn))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun nullInt(x: Int?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "if (qualifiedName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>chunks += qualifiedName<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val postponedDeclarationsForFakeOverridesBinding =", "body": "mutableListOf<IrDeclaration>()<EOL>"}
{"signature": "val MC =", "body": "Char.MIN_VALUE<EOL>"}
{"signature": "val profilerProcessBuilder =", "body": "ProcessBuilder()<EOL>"}
{"signature": "val uintList =", "body": "mutableListOf<UInt>()<EOL>"}
{"signature": "fun visitPermittedSubclass(permittedSubclass: String?) {", "body": "<EOL><INDENT><INDENT>permittedTypesList.addIfNotNull(permittedSubclass?.convertInternalNameToClassifierType())<EOL><INDENT>}"}
{"signature": "val newParts =", "body": "mapping.findPackageParts(packageFqName) ?: continue<EOL>"}
{"signature": "val PREDICATE =", "body": "LookupPredicate.create { annotated(<STR_LIT>.fqn()) }<EOL>"}
{"signature": "var storage =", "body": "<STR_LIT><EOL>"}
{"signature": "val moduleJson =", "body": "JsonParser.parseString(gradleModuleFile.readText()).asJsonObject<EOL>"}
{"signature": "if (primitiveType in TYPED_ARRAY_MAP) {", "body": "<EOL><INDENT><INDENT><INDENT>createTypedArray(primitiveType, arg)<EOL><INDENT><INDENT>}"}
{"signature": "var implicitTypes =", "body": "<NUM_LIT><EOL>"}
{"signature": "val defaultArgumentA =", "body": "UserKlass()<EOL>"}
{"signature": "val SCRIPT_FILE_LOCATION_DEFAULT_VARIABLE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "var used =", "body": "false<EOL>"}
{"signature": "var isSkip =", "body": "true<EOL>"}
{"signature": "val firstInPlaceEnter =", "body": "calledInPlace.firstOrNull()?.enterNode<EOL>"}
{"signature": "if (srcFile.isFile || kotlinFiles.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(<STR_LIT>, allowKotlinSources)<EOL><INDENT><INDENT><INDENT>compileKotlin(sourcesPath, classesDir, extraOptions, *extraClasspath.toTypedArray())<EOL><INDENT><INDENT>}"}
{"signature": "if (trueWhenString(x) && falseWhenInt(x)) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>inc<!>()<EOL><INDENT>}"}
{"signature": "val MODULE_CAPABILITY =", "body": "ModuleCapability<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "val initSelectors =", "body": "mutableListOf<FirFunctionSymbol<*>>()<EOL>"}
{"signature": "fun setB(text: String) {", "body": "}"}
{"signature": "val MUTABLE_COLLECTION_TYPE_FQ_NAMES =", "body": "setOf(<EOL>"}
{"signature": "fun testTask(body: Action<KotlinJsTest>) {", "body": "<EOL><INDENT><INDENT>testRuns.getByName(KotlinTargetWithTests.DEFAULT_TEST_RUN_NAME).executionTask.configure(body)<EOL><INDENT>}"}
{"signature": "val allTrackedParams =", "body": "listOfNotNull(function.extensionReceiverParameter) +<EOL>"}
{"signature": "if (keptClass) {", "body": "<EOL><INDENT><INDENT><INDENT>keptDeclarations.add(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (printTypeParametersAndExtensionReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>extensionReceiverParameter?.printExtensionReceiverParameter()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(param: String) {", "body": "<EOL><INDENT><INDENT><!INVISIBLE_SETTER!>foo<!> = param<EOL><INDENT><INDENT><!INVISIBLE_SETTER!>this.foo<!> = param<EOL><INDENT>}"}
{"signature": "val kotlinLongToExternRefAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val graphFunc =", "body": "{ name: Name -> graph.getOrDefault(name, emptySet()) }<EOL>"}
{"signature": "fun bar(s: String?) {", "body": "<EOL><INDENT>if (s != null) return<EOL><INDENT>s.gav()<EOL><INDENT>s <!USELESS_CAST!>as? String<!><EOL><INDENT>s as String?<EOL><INDENT>s <!CAST_NEVER_SUCCEEDS!>as<!> String<EOL>}"}
{"signature": "fun append(key: KEY, element: E) {", "body": "<EOL><INDENT><INDENT>storage.append(key, setOf(element))<EOL><INDENT>}"}
{"signature": "val builtInsFragments =", "body": "module.getPackage(packageFqName).fragments.filterIsInstance<BuiltInsPackageFragment>()<EOL>"}
{"signature": "fun test<NUM_LIT>(x: TC<Number, Collection<Number>>) {", "body": "}<EOL>fun test<NUM_LIT>(x: TC<Number, Collection<Int>>) {}"}
{"signature": "val TOO_LOW =", "body": "<STR_LIT><EOL>"}
{"signature": "fun isSurrogatePair() {", "body": "<EOL><INDENT><INDENT>assertFalse(Char.isSurrogatePair('\\u<NUM_LIT>', '\\u<NUM_LIT>'))<EOL><INDENT><INDENT>assertFalse(Char.isSurrogatePair('\\u<NUM_LIT>', '\\uDC<NUM_LIT>'))<EOL><INDENT><INDENT>assertTrue( Char.isSurrogatePair('\\uD8<NUM_LIT>', '\\uDC<NUM_LIT>'))<EOL><INDENT><INDENT>assertTrue( Char.isSurrogatePair('\\uD8<NUM_LIT>', '\\uDFFF'))<EOL><INDENT><INDENT>assertTrue( Char.isSurrogatePair('\\uDBFF', '\\uDFFF'))<EOL><INDENT><INDENT>assertFalse(Char.isSurrogatePair('\\uDBFF', '\\uF<NUM_LIT>0'))<EOL><INDENT>}"}
{"signature": "fun testKotlinLombokProjectBuild() {", "body": "<EOL><INDENT><INDENT>initProject(LOMBOK)<EOL><INDENT><INDENT>buildAllModules().assertSuccessful()<EOL><INDENT>}"}
{"signature": "fun visitErrorPrimaryConstructor(errorPrimaryConstructor: FirErrorPrimaryConstructor, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>reportFirDiagnostic(errorPrimaryConstructor.diagnostic, errorPrimaryConstructor.source, data)<EOL><INDENT>}"}
{"signature": "val unsignedPrimitiveType =", "body": "unsignedPrimitiveToSigned(type)<EOL>"}
{"signature": "val srcFiles =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>).map { File(TEST_DATA_DIR, it) }<EOL>"}
{"signature": "if (isFinal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>listOf(OBJC_SUBCLASSING_RESTRICTED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val unsignedMappings =", "body": "PrimitiveType.unsignedPrimitives.map { it to it }<EOL>"}
{"signature": "val loopsAndSwitchesToLabel =", "body": "HashSet<JsStatement>()<EOL>"}
{"signature": "val CHAR_ATOMIC_GROUP<INDENT><INDENT> =", "body": "<NUM_LIT>xfe<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or '('.toInt()<EOL>"}
{"signature": "if (declaration.isNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportError(declaration.source, <STR_LIT>, context)<EOL><INDENT><INDENT>}"}
{"signature": "val BINARY_SOURCE_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if ((isString(x) && y is String) || (!notIsString(x) && !notIsInt(y))) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT><INDENT>y.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>y.<!UNRESOLVED_REFERENCE!>inc<!>()<EOL><INDENT>}"}
{"signature": "if (isDefinitelyVisited || splitNode.isDead) {", "body": "<INDENT><INDENT><INDENT>// The edge that was added to enforce ordering of nodes needs to be marked as dead if this lambda is never<INDENT><INDENT><INDENT>// skipped. Or if the entry node is dead, because at the time we added the hack-edge we didn't know that.<INDENT><INDENT><INDENT>CFGNode.killEdge(splitNode, postponedExitNode, propagateDeadness = !isDefinitelyVisited)<INDENT><INDENT>}"}
{"signature": "val builderFactory =", "body": "OriginCollectingClassBuilderFactory(ClassBuilderMode.KAPT<NUM_LIT>)<EOL>"}
{"signature": "if (key.packageName == packageFqName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add(key.callableName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val binaryNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val psiContext =", "body": "containingClass.findLightDeclarationContext(containingDeclaration)<EOL>"}
{"signature": "val MandatoryBitcodeLLVMPostprocessingPhase =", "body": "optimizationPipelinePass(<EOL>"}
{"signature": "val dependencyNotation =", "body": "<EOL><INDENT><INDENT><INDENT>if (isPublishedLibrary)<EOL>"}
{"signature": "val KOTLIN_MPP_APPLY_DEFAULT_HIERARCHY_TEMPLATE =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "fun createAndRegisterKtModules(moduleStructure: TestModuleStructure, project: MockProject) {", "body": "<EOL><INDENT><INDENT>val ktTestModuleStructure = configurator.createModules(moduleStructure, testServices, project)<EOL><INDENT><INDENT>testServices.ktTestModuleStructureProvider.registerModuleStructure(ktTestModuleStructure)<EOL><INDENT>}"}
{"signature": "val timePerTransformer =", "body": "mutableMapOf<KClass<*>, Measure>()<EOL>"}
{"signature": "val interopWcstr =", "body": "findTopLevelPropertyGetter(InteropFqNames.packageName, Name.identifier(InteropFqNames.wcstrPropertyName), string)<EOL>"}
{"signature": "val interopCreateObjCObjectHolder =", "body": "interopFunction(<STR_LIT>)<EOL>"}
{"signature": "val nonTrivialVariables =", "body": "linkedSetOf<VariableDescriptor>()<EOL>"}
{"signature": "val correspondingProperties =", "body": "CorrespondingPropertyCache(context, facadeClass)<EOL>"}
{"signature": "val propertiesValues =", "body": "renderPropertyValues(stubInterface)<EOL>"}
{"signature": "if (dumpTree) {", "body": "<EOL><INDENT><INDENT><INDENT>println(irModule.dump())<EOL><INDENT><INDENT>}"}
{"signature": "val actualSuperTypes =", "body": "actualSymbol.superTypesRefs.groupBy { it.getClassId() }<EOL>"}
{"signature": "val isEq =", "body": "operation.isEq()<EOL>"}
{"signature": "val callForWhen =", "body": "createCallForSpecialConstruction(<EOL>"}
{"signature": "val stepStartOffset =", "body": "inductionVariableUpdate.startOffset<EOL>"}
{"signature": "fun expectCompilationResult(compilationResult: CompilationResult) {", "body": "<EOL><INDENT><INDENT>expectedResult = compilationResult<EOL><INDENT>}"}
{"signature": "fun testNonAbiChangeInLib_changeMethodBody_tracked(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>super.testNonAbiChangeInLib_changeMethodBody_tracked(gradleVersion)<EOL><INDENT>}"}
{"signature": "val statementBuilder =", "body": "JsAstProtoBuf.ExpressionStatement.newBuilder()<EOL>"}
{"signature": "val implicitCompanionValues =", "body": "mutableListOf<ImplicitReceiverValue<*>>()<EOL>"}
{"signature": "val keyE =", "body": "extrasKeyOf<Int>()<EOL>"}
{"signature": "var enableArrayOfCallTransformation =", "body": "false<EOL>"}
{"signature": "val KOTLIN_TEST_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (expected[i] != actual[i]) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val deep =", "body": "arguments.getOrNull(<NUM_LIT>)<EOL>"}
{"signature": "fun generateHashCodeMethod(function: FunctionDescriptor, properties: List<PropertyDescriptor>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addFunction(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val bodyDeserializer =", "body": "IrBodyDeserializer(builtIns, allowErrorNodes, irFactory, libraryFile, this)<EOL>"}
{"signature": "val clangMainSources =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "var typeId =", "body": "obj.typeInfo<EOL>"}
{"signature": "when (operatorToken) {", "body": "<EOL><INDENT><INDENT>KtTokens.LT -> FirOperation.LT<EOL><INDENT><INDENT>KtTokens.GT -> FirOperation.GT<EOL><INDENT><INDENT>KtTokens.LTEQ -> FirOperation.LT_EQ<EOL><INDENT><INDENT>KtTokens.GTEQ -> FirOperation.GT_EQ<EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val expandedConeType =", "body": "containingDeclaration.expandedTypeRef.coneType<EOL>"}
{"signature": "val nodeElementType =", "body": "expression.node.elementType<EOL>"}
{"signature": "val lazyValueGetter =", "body": "lazyClass.getPropertyGetter(<STR_LIT>)!!<EOL>"}
{"signature": "if (interfaces.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>assert(container is ObjCProtocol)<EOL><INDENT><INDENT><INDENT>val classifier = if (isMeta) KotlinTypes.objCObjectMeta else KotlinTypes.objCObject<EOL><INDENT><INDENT><INDENT>interfaces += classifier.type.toStubIrType()<EOL><INDENT><INDENT>}"}
{"signature": "fun linkFunctionFakeOverride(function: IrFunctionWithLateBinding, manglerCompatibleMode: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>function.acquireSymbol(IrSimpleFunctionSymbolImpl())<EOL><INDENT><INDENT>}"}
{"signature": "val topData =", "body": "Data(<NUM_LIT>)<EOL>"}
{"signature": "if (hasGetterFlags()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getterFlags<EOL><INDENT>}"}
{"signature": "when (flag<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>) {", "body": "<EOL><INDENT><INDENT>A.A<NUM_LIT> -> B()<EOL><INDENT><INDENT>A.A<NUM_LIT> -> B()<EOL><INDENT><INDENT>else -> B()<EOL><INDENT>}"}
{"signature": "val staticCacheDependencies =", "body": "mutableListOf<CompiledDependency<KLIBStaticCache>>()<EOL>"}
{"signature": "val typedIntrinsic =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (receiverExpr is FirSmartCastExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return receiverExpr.smartcastScope(<EOL><INDENT><INDENT><INDENT><INDENT>useSiteSession,<EOL><INDENT><INDENT><INDENT><INDENT>scopeSession,<EOL><INDENT><INDENT><INDENT><INDENT>requiredMembersPhase = FirResolvePhase.STATUS,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (reference is IrPropertyReference && reference.field != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val field = reference.field!!.owner<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val boundReceiver = reference.dispatchReceiver ?: reference.extensionReceiver<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val fieldReceiver = if (field.isStatic) null else boundReceiver<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>IrGetFieldImpl(UNDEFINED_OFFSET, UNDEFINED_OFFSET, field.symbol, field.type, fieldReceiver)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val valueArgumentToParameterType =", "body": "HashMap<KotlinCallArgument, TypeWithConversion>()<EOL>"}
{"signature": "val testDumpFile =", "body": "compilationResult.resultingArtifact.testDumpFile<EOL>"}
{"signature": "for (name in declarationNames) {", "body": "<EOL><INDENT><INDENT><INDENT>val classLikeSymbol = provider.getClassLikeSymbolByClassId(ClassId.topLevel(packageFqName.child(name))) ?: continue<EOL><INDENT><INDENT><INDENT>firRenderer.renderElementAsString(classLikeSymbol.fir)<EOL><INDENT><INDENT><INDENT>builder.appendLine()<EOL><INDENT><INDENT>}"}
{"signature": "val startLabel =", "body": "LabelNode().also { withFakeVariable.instructions.add(it) }<EOL>"}
{"signature": "if (length != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (version != CURRENT_VERSION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reportFail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val interopObjCObjectInitBy =", "body": "interopFunction(InteropFqNames.objCObjectInitByFunName)<EOL>"}
{"signature": "when (this.dataFlowInfo) {", "body": "<INDENT>// Nothing changed<INDENT><INDENT>dataFlowInfo -> this<INDENT>// Jump info is the same as data flow info: change both<INDENT><INDENT>jumpFlowInfo -> KotlinTypeInfo(type, dataFlowInfo, jumpOutPossible, dataFlowInfo)<INDENT>// Jump info is not the same: change data flow info only<INDENT><INDENT>else -> KotlinTypeInfo(type, dataFlowInfo, jumpOutPossible, jumpFlowInfo)<INDENT>}"}
{"signature": "when (Wrapper(index)) {", "body": "<EOL><INDENT><INDENT>!in Wrapper(<NUM_LIT>)..Wrapper(<NUM_LIT>) -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "fun foo(args: Array<Int>) {", "body": "<EOL><INDENT>fail()<EOL>}"}
{"signature": "val bitField =", "body": "accessor.getAnnotation(RuntimeNames.cStructBitField)!!<EOL>"}
{"signature": "fun testCompoundAssignment(a: A) {", "body": "<EOL><INDENT>a[<NUM_LIT>] += <NUM_LIT>0<EOL>}"}
{"signature": "if (moduleName != JvmProtoBufUtil.DEFAULT_MODULE_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(JvmProtoBuf.packageModuleName, stringTable.getStringIndex(moduleName))<EOL><INDENT><INDENT>}"}
{"signature": "val testMapFolder =", "body": "<STR_LIT><EOL>"}
{"signature": "val totalTimeMs =", "body": "event.result.endTime - event.result.startTime<EOL>"}
{"signature": "val metricsReporter =", "body": "metrics.get()<EOL>"}
{"signature": "val collectMember =", "body": "if (isRemoved) this@ChangesCollector::collectRemovedMember else this@ChangesCollector::collectChangedMember<EOL>"}
{"signature": "fun processPropertiesByName(<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>processor: (FirVariableSymbol<*>) -> Unit<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (it is JvmIrCodegenFactory.JvmIrBackendInput && firJvmBackendExtension != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.copy(backendExtension = firJvmBackendExtension)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val continuationName =", "body": "<STR_LIT><EOL>"}
{"signature": "package lib.", "body": "foo<EOL>"}
{"signature": "fun loadLibclang()<EOL><EOL><INDENT>fun prepare() {", "body": "<EOL><INDENT><INDENT>downloadDependencies()<EOL><EOL><INDENT><INDENT>loadLibclang()<EOL><INDENT>}"}
{"signature": "val JVM_DEFAULT_NO_COMPATIBILITY_CLASS_ID =", "body": "ClassId.topLevel(JVM_DEFAULT_NO_COMPATIBILITY_FQ_NAME)<EOL>"}
{"signature": "val placeToFunctionsTable =", "body": "!isAbstract && it !is IrConstructor && irClass != null<EOL>"}
{"signature": "var parameter =", "body": "getParameterByName(argument.name)<EOL>"}
{"signature": "var useInsecure =", "body": "true<EOL>"}
{"signature": "val modifierListStub =", "body": "PsiModifierListStubImpl(stub, firClass.packFlags())<EOL>"}
{"signature": "val keysToKeep =", "body": "setOf(sourcesClasspathKey, documentationClasspathKey)<EOL>"}
{"signature": "if (f.hasComposableAnnotation() || f.needsComposableRemapping()) {", "body": "<EOL><INDENT><INDENT><INDENT>f.addHiddenFromObjCAnnotation()<EOL><INDENT><INDENT><INDENT>hideFromObjCDeclarationsSet?.add(f)<EOL><INDENT><INDENT><INDENT>currentShouldAnnotateClass = true<EOL><INDENT><INDENT>}"}
{"signature": "when (counter++) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> null<EOL><INDENT><INDENT><INDENT><INDENT>else -> counter<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (it.isJavaOrEnhancement) {", "body": "<EOL><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT>ProcessorAction.STOP<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(x: X, y: String) {", "body": "}<EOL><INDENT>fun foo(x: String, y: Y) {}"}
{"signature": "val compilerService =", "body": "CompileServiceImpl(registry = registry,<EOL>"}
{"signature": "for (i in block.low..block.high) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(regex.matches(i.toChar().toString()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun outputIfNotEnabled(phaseConfig: PhaseConfigurationService, phaserState: PhaserState<Any>, context: PhaseContext, input: Any) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val altQuantifier  =", "body": "Quantifier(<NUM_LIT>,  <NUM_LIT>)<EOL>"}
{"signature": "var set =", "body": "setOf(<STR_LIT>)<EOL>"}
{"signature": "if (target is IrConstructor && target.constructedClass.isAbstract()) {", "body": "<EOL><INDENT><INDENT><INDENT>callFromBridge(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>llvm.Kotlin_ObjCExport_AbstractClassConstructorCalled,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(param(<NUM_LIT>), codegen.typeInfoValue(target.parent as IrClass))<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedAlias =", "body": "HostManager.resolveAlias(userRequest)<EOL>"}
{"signature": "val superIsInterface =", "body": "classSymbol.classKind == ClassKind.INTERFACE<EOL>"}
{"signature": "if (operationToken === KtTokens.PLUSPLUS || operationToken === KtTokens.MINUSMINUS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>report(Errors.UNUSED_CHANGED_VALUE.on(expressionInQuestion, expressionInQuestion), ctxt)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (irFunction.isJvmAbstract(context.config.jvmDefaultMode)) {", "body": "<INDENT><INDENT><INDENT>// Do not generate bridge methods for abstract methods which do not override a special bridge method.<INDENT><INDENT><INDENT>// This matches the behavior of the JVM backend, but it does mean that we generate superfluous bridges<INDENT><INDENT><INDENT>// for abstract methods overriding a special bridge for which we do not create a bridge due to,<INDENT><INDENT><INDENT>// e.g., signature clashes.<INDENT><INDENT><INDENT>return<INDENT><INDENT>}"}
{"signature": "if (j >= length || !codePoint.isCased()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (instruction is MergeInstruction) {", "body": "<EOL><INDENT><INDENT><INDENT>addMergedValues(instruction)<EOL><INDENT><INDENT>}"}
{"signature": "import ''{<NUM_LIT>}''.", "body": "Functions and properties can only be imported from packages or objects.\",<EOL>"}
{"signature": "if (type is SimpleType && !type.isMarkedNullable && descriptor is TypeParameterDescriptor && !descriptor.isReified) {", "body": "<EOL><INDENT><INDENT><INDENT>c.trace.report(TYPE_PARAMETER_AS_REIFIED.on(expression, descriptor))<EOL><INDENT><INDENT>}"}
{"signature": "when (val firExpression = wholeExpression.getOrBuildFir(analysisSession.firResolveSession)) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirQualifiedAccessExpression -> firExpression<EOL><INDENT><INDENT><INDENT>is FirSafeCallExpression -> firExpression.selector as? FirQualifiedAccessExpression<EOL><INDENT><INDENT><INDENT>is FirSmartCastExpression -> firExpression.originalExpression as? FirQualifiedAccessExpression<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (<STR_LIT> in rootProject.tasks.names) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dependsOn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firJavaElementFinder =", "body": "FirJavaElementFinder(firSession, project)<EOL>"}
{"signature": "if (typeConstructor is IntersectionTypeConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>val commonSupertype = commonSupertype(typeConstructor.supertypes)<EOL><INDENT><INDENT><INDENT>return approximate(commonSupertype.replaceArgumentsWithStarProjections())<EOL><INDENT><INDENT>}"}
{"signature": "fun unfoldThrow(expression: IrThrow, callStack: CallStack) {", "body": "<EOL><INDENT>callStack.pushSimpleInstruction(expression)<EOL><INDENT>callStack.pushCompoundInstruction(expression.value)<EOL>}"}
{"signature": "val erasedUpperBound =", "body": "dispatchReceiverParameter.type.erasedUpperBound<EOL>"}
{"signature": "val postInlinePhase =", "body": "createFileLoweringPhase(<EOL>"}
{"signature": "val localStatePtr =", "body": "localState.getAddress(functionGenerationContext)<EOL>"}
{"signature": "val JAVA_LANG_VOID =", "body": "ClassId.topLevel(FqName(<STR_LIT>))<EOL>"}
{"signature": "fun withinLimit() {", "body": "<EOL><INDENT><INDENT>val limitedList = LimitedLinkedList<Int>(<NUM_LIT>)<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), limitedList)<EOL><INDENT>}"}
{"signature": "import $MPP_PACKAGE.", "body": "*<EOL>"}
{"signature": "val coneSymbol =", "body": "candidate.symbol<EOL>"}
{"signature": "val variableAccessing =", "body": "(expression.getResolvedCall(trace.bindingContext)?.resultingDescriptor as? VariableDescriptor)<EOL>"}
{"signature": "if (fromIndex < size - toIndex) {", "body": "<INDENT><INDENT><INDENT>// closer to the first element -> shift preceding elements<INDENT><INDENT><INDENT>removeRangeShiftPreceding(fromIndex, toIndex)<INDENT><INDENT><INDENT>val newHead = positiveMod(head + length)<INDENT><INDENT><INDENT>nullifyNonEmpty(head, newHead)<INDENT><INDENT><INDENT>head = newHead<INDENT><INDENT>}"}
{"signature": "val accessedClass =", "body": "expression.symbol ?: return<EOL>"}
{"signature": "val executableArtifact =", "body": "Executable(settings.artifactFileForExecutable(rootModules), fileCheckStage)<EOL>"}
{"signature": "fun collectParents(descriptor: DeclarationDescriptorNonRoot) {", "body": "<EOL><INDENT><INDENT><INDENT>descriptor.containingDeclaration.accept(this, null)<EOL><INDENT><INDENT><INDENT>classFqnSegments.add(descriptor.name.asString())<EOL><INDENT><INDENT>}"}
{"signature": "if (staticMemberModels.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>ObjectModel(<EOL><INDENT><INDENT><INDENT><INDENT>name = IdentifierEntity(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT>members = staticMemberModels,<EOL><INDENT><INDENT><INDENT><INDENT>parentEntities = listOf(),<EOL><INDENT><INDENT><INDENT><INDENT>visibilityModifier = VisibilityModifierModel.PUBLIC,<EOL><INDENT><INDENT><INDENT><INDENT>comment = null,<EOL><INDENT><INDENT><INDENT><INDENT>external = true<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (resolvedTypeRefType !is ConeErrorType) {", "body": "<INDENT><INDENT><INDENT><INDENT>// We still need to check the resolvedTypeRef, since otherwise we couldn't report any diagnostics on them.<INDENT><INDENT><INDENT><INDENT>checkElement(resolvedTypeRef)<INDENT><INDENT><INDENT>}"}
{"signature": "fun runTest(@TestDataFile filePath: String) {", "body": "<EOL><INDENT><INDENT>testRunner(filePath, configuration).runTest(filePath)<EOL><INDENT>}"}
{"signature": "fun visitAnonymousObject(anonymousObject: FirAnonymousObject, data: MutableList<MetadataSerializer>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitClass(anonymousObject, data)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isMutable) {", "body": "<EOL><INDENT><INDENT><INDENT>report(INAPPLICABLE_TARGET_PROPERTY_IMMUTABLE.on(annotation, annotation.useSiteDescription()))<EOL><INDENT><INDENT>}"}
{"signature": "val conversionScope =", "body": "Fir<NUM_LIT>IrConversionScope(configuration)<EOL>"}
{"signature": "val plistFName =", "body": "if (targets.testTarget.family == Family.OSX) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "var seenFinally =", "body": "false<EOL>"}
{"signature": "val genericType =", "body": "signatureParser.parseClassSignature(clazz.signature, superClass, interfaces)<EOL>"}
{"signature": "val referencedValues =", "body": "hashSetOf<IrValueSymbol>()<EOL>"}
{"signature": "if (!equalsBy(expectedTypeParameters, actualTypeParameters) {", "body": "it.getName(this) }"}
{"signature": "val psiCallArgument =", "body": "collectionLiteralArgument.atom.psiCallArgument as CollectionLiteralKotlinCallArgumentImpl<EOL>"}
{"signature": "val importingScope =", "body": "scopeContext.getCompositeScope { acceptScopeKind.java.isAssignableFrom(it::class.java) }<EOL>"}
{"signature": "if (old.hasExpandedType()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.expandedType, new.expandedType)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val referencedJsClasses =", "body": "hashSetOf<IrDeclaration>()<EOL>"}
{"signature": "when (condition) {", "body": "<EOL><INDENT><INDENT>is KtWhenConditionIsPattern -> translateIsCondition(condition, context)<EOL><INDENT><INDENT>is KtWhenConditionWithExpression -> translateExpressionCondition(condition, context)<EOL><INDENT><INDENT>is KtWhenConditionInRange -> translateRangeCondition(condition, context)<EOL><INDENT><INDENT>else -> error(<STR_LIT> + condition.javaClass)<EOL><INDENT>}"}
{"signature": "fun visitDynamicMemberExpression(expression: IrDynamicMemberExpression) {", "body": "<EOL><INDENT><INDENT>visitDynamicExpression(expression)<EOL><INDENT>}"}
{"signature": "val useSite =", "body": "annotation.useSiteTarget ?: return<EOL>"}
{"signature": "if (ih == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>y[<NUM_LIT>] = fq[<NUM_LIT>]; y[<NUM_LIT>] = fq[<NUM_LIT>]; y[<NUM_LIT>] = fw<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val runner =", "body": "Runner()<EOL>"}
{"signature": "while (i < size) {", "body": "<EOL><INDENT><INDENT>set(i, init(i))<EOL><INDENT><INDENT>i++<EOL><INDENT>}"}
{"signature": "val IS_PUBLIC =", "body": "Flag(F.VISIBILITY, ProtoVisibility.PUBLIC_VALUE)<EOL>"}
{"signature": "fun addMergedWith(descriptor: BoxedValueDescriptor) {", "body": "<EOL><INDENT><INDENT>mergedWith.add(descriptor)<EOL><INDENT>}"}
{"signature": "fun testUseSiteOutT() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (annotation in info.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>genAnnotation(annotation, info.path, true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsInteropFunctionsLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "val classNameList =", "body": "protoForNames.getExtension(KlibMetadataProtoBuf.className).orEmpty()<EOL>"}
{"signature": "val providerModule =", "body": "ProjectStructureProvider.getModule(mainFile.project, mainFile, contextualModule = null)<EOL>"}
{"signature": "val reachableFringeFromNotTakenEscapeOrigins =", "body": "mutableSetOf<PointsToGraphNode>()<EOL>"}
{"signature": "val configure =", "body": "this.configure<EOL>"}
{"signature": "val firSelector =", "body": "selector.toFirExpression(<STR_LIT>)<EOL>"}
{"signature": "val intBound =", "body": "Int.MIN_VALUE<EOL>"}
{"signature": "val destination =", "body": "CharArray(<NUM_LIT>) { '.' }<EOL>"}
{"signature": "if (file is VirtualFileWithId && isKotlinBinaryClass != isKotlinBinary) {", "body": "<EOL><INDENT><INDENT><INDENT>attributeService.writeBooleanAttribute(KOTLIN_IS_COMPILED_FILE_ATTRIBUTE, file, isKotlinBinaryClass)<EOL><INDENT><INDENT>}"}
{"signature": "if (unionType.originFile != null) {", "body": "<EOL><INDENT><INDENT><INDENT>namedDeclarationsToAdd.putIfAbsent(unionType.originFile!!, mutableSetOf())<EOL><INDENT><INDENT><INDENT>namedDeclarationsToAdd[unionType.originFile!!]!!.add(IDLUnionDeclaration(<EOL><INDENT><INDENT><INDENT><INDENT>name = unionType.name,<EOL><INDENT><INDENT><INDENT><INDENT>unions = listOf()<EOL><INDENT><INDENT><INDENT>))<EOL><INDENT><INDENT>}"}
{"signature": "val rawDefaultValue =", "body": "property.get(defaultArguments)<EOL>"}
{"signature": "val abbreviated =", "body": "type.unwrap() as? AbbreviatedType<EOL>"}
{"signature": "val targ =", "body": "TypeParameterDescriptorImpl.createWithDefaultBound(<EOL>"}
{"signature": "fun uint(vararg a: <!OPT_IN_USAGE!>UInt<!>) {", "body": "}<EOL>fun ulong(vararg a: <!OPT_IN_USAGE!>ULong<!>) {}"}
{"signature": "package deprecated<EOL>.", "body": ""}
{"signature": "val simplyReversedInstructions =", "body": "instructions.reversed()<EOL>"}
{"signature": "for (edge in node.reversedEdges) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (edge.node !in visited)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>buildComponent(edge.node, visited, component)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isNestedClassConstructor =", "body": "symbol.containingClassIdIfNonLocal?.isNestedClass == true<EOL>"}
{"signature": "if (isEmpty(i)) {", "body": "<EOL><INDENT><INDENT><INDENT>store(i, x)<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val isContractsEnabled =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.AllowContractsForCustomFunctions)<EOL>"}
{"signature": "val signString =", "body": "if (inputNumberBits and signMask == <NUM_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun testCompareToNonnullableNotEq() {", "body": "<INDENT><INDENT>// https://youtrack.jetbrains.com/issue/KT<NUM_LIT><INDENT>}"}
{"signature": "if (k <= <NUM_LIT> || k > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>y = one - (e - x)<EOL><INDENT><INDENT><INDENT>y = doubleSetWord(d = y, hi = __HI(y) + (k shl <NUM_LIT>)) <EOL><INDENT><INDENT><INDENT>return y - one<EOL><INDENT><INDENT>}"}
{"signature": "val statesLock =", "body": "ReentrantReadWriteLock()<EOL>"}
{"signature": "val ownerSymbol =", "body": "containingClass?.symbol<EOL>"}
{"signature": "fun testContainer() {", "body": "<EOL><INDENT>val l = listOf<Unit>(demo())<EOL><INDENT>val d<NUM_LIT>: dynamic = l.last()<EOL><INDENT>assertTrue(d<NUM_LIT> == l.last())<EOL><INDENT>assertEquals(l.last().toString(), <STR_LIT>)<EOL>}"}
{"signature": "if (context.config.debug) {", "body": "<EOL><INDENT><INDENT><INDENT>call(llvm.llvmTrap, emptyList())<EOL><INDENT><INDENT>}"}
{"signature": "val objCMapping =", "body": "if (descriptor.isInterface) objCProtocolNames else objCClassNames<EOL>"}
{"signature": "val inlineDataBuilder =", "body": "JsAstProtoBuf.InlineData.newBuilder()<EOL>"}
{"signature": "val deleted =", "body": "cacheFile.deleteRecursively()<EOL>"}
{"signature": "val inputType =", "body": "inputOutputTypes.inputTypes.getOrNull(index + unboundReceiverCount)<EOL>"}
{"signature": "val specialFunctionName =", "body": "requireNotNull(<EOL>"}
{"signature": "val androidInstrumentedTest =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "import AnotherRootClass as Arc<EOL>.", "body": ""}
{"signature": "val DECLARATION_ORIGIN_FUNCTION_REFERENCE_IMPL =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val pluginJars =", "body": "args.pluginClasspaths?.map { it.replace(<STR_LIT>, <STR_LIT>).split(<STR_LIT>).last() }<EOL>"}
{"signature": "val stdlibFile =", "body": "ForTestCompileRuntime.stdlibCommonForTests()<EOL>"}
{"signature": "var initialized =", "body": "false<EOL>"}
{"signature": "val c_x =", "body": "Host::x<EOL>"}
{"signature": "fun foo(block: (Int, String) -> Unit) {", "body": "}"}
{"signature": "fun withInvStar(i: Inv<*>.() -> Unit) {", "body": "}<EOL><EOL>fun bar<NUM_LIT>(a: A<in Any>, i: Inv<*>) {<EOL><INDENT>a.foo(<!TYPE_MISMATCH_WARNING_FOR_INCORRECT_CAPTURE_APPROXIMATION!>i<!>)<EOL>}"}
{"signature": "val isInfix =", "body": "function.isInfix<EOL>"}
{"signature": "val I<NUM_LIT>_GET_U =", "body": "<STR_LIT><EOL>"}
{"signature": "val irClassReference =", "body": "argument as? IrClassReference<EOL>"}
{"signature": "if (byteBufferLength == bytesPerGroup) {", "body": "<EOL><INDENT><INDENT><INDENT>encodeByteBufferIntoOutput()<EOL><INDENT><INDENT>}"}
{"signature": "val expectedSources =", "body": "sourceFilesRelativeToProject(<EOL>"}
{"signature": "for (i in t.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>test = test * <NUM_LIT> + (i + <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val ctorBodyBuilder =", "body": "irBuiltIns.createIrBuilder(generatedConstructor.symbol, SYNTHETIC_OFFSET, SYNTHETIC_OFFSET)<EOL>"}
{"signature": "val leftClass =", "body": "leftArgument.type.erasedUpperBound<EOL>"}
{"signature": "fun main(j: JavaClass) {", "body": "<EOL><INDENT>j.foo += <STR_LIT><EOL>}"}
{"signature": "fun testMultipleTypeAliasedValueParameterTypesA(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: UserKlassB) {", "body": "}<EOL>fun testMultipleTypeAliasedValueParameterTypesA(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: SameUserKlassB) {}"}
{"signature": "val intermediateMetadataCompileTask =", "body": "<STR_LIT><EOL>"}
{"signature": "val regularBody =", "body": "firFunction.body?.let { visitor.convertToIrBlockBody(it) }<EOL>"}
{"signature": "val singleIncompatibility =", "body": "compatibility.keys.firstOrNull()<EOL>"}
{"signature": "for (id in commonIds) {", "body": "<EOL><INDENT><INDENT><INDENT>val packagePart<NUM_LIT> = packageParts<NUM_LIT>[id]!!<EOL><INDENT><INDENT><INDENT>val packagePart<NUM_LIT> = packageParts<NUM_LIT>[id]!!<EOL><INDENT><INDENT><INDENT>val packagePartsReport = report.packagePartsReport(id)<EOL><INDENT><INDENT><INDENT>PackagePartsMetadataTask(configuration, packagePart<NUM_LIT>, packagePart<NUM_LIT>, packagePartsReport).run()<EOL><INDENT><INDENT>}"}
{"signature": "val irAnySerialDescProperty =", "body": "getProperty(<EOL>"}
{"signature": "if (isKotlinResourcesCompatibilityRuleEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>strategy.compatibilityRules.add(KotlinResourcesCompatibility::class.java)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dbFactory =", "body": "DocumentBuilderFactory.newInstance()<EOL>"}
{"signature": "val includeArgs =", "body": "if (testDataDir.name.startsWith(<STR_LIT>))<EOL>"}
{"signature": "if (configurator.analyseInDependentSession && isDependentModeDisabledForTheTest()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun serialize(encoder: Encoder, value: JsonPrimitive) {", "body": "<EOL><INDENT><INDENT><INDENT>encoder.encodeString(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun addNewIncorporatedConstraintFromDeclaredUpperBound(runIsSubtypeOf: Runnable) {", "body": "<EOL><INDENT><INDENT><INDENT>isIncorporatingConstraintFromDeclaredUpperBound = true<EOL><INDENT><INDENT><INDENT>runIsSubtypeOf.run()<EOL><INDENT><INDENT><INDENT>isIncorporatingConstraintFromDeclaredUpperBound = false<EOL><INDENT><INDENT>}"}
{"signature": "when (target) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>WasmTarget.JS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>WasmTarget.WASI -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val valueParametersFromDescriptor =", "body": "descriptor.valueParameters<EOL>"}
{"signature": "if (!fileBoundaryReached and !whiteSpaceBefore.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>parent.addBefore(KtPsiFactory(project).createWhiteSpace(<STR_LIT>), this)<EOL><INDENT>}"}
{"signature": "fun renderType(<EOL><INDENT><INDENT><INDENT>analysisSession: KtAnalysisSession,<EOL><INDENT><INDENT><INDENT>type: KtCapturedType,<EOL><INDENT><INDENT><INDENT>typeRenderer: KtTypeRenderer,<EOL><INDENT><INDENT><INDENT>printer: PrettyPrinter,<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT>printer.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>AS_PROJECTION.renderType(analysisSession, type, typeRenderer, printer)<EOL><INDENT><INDENT><INDENT>printer.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val k<NUM_LIT>ClassNode =", "body": "parseClassNode(classesFromK<NUM_LIT>[classInternalName]!!)<EOL>"}
{"signature": "val compileTimeConstants =", "body": "resolveAnnotationValueArguments(resolvedArgument, constantType!!, expectedType, trace)<EOL>"}
{"signature": "val KLIB_PROPERTY_SERIALIZED_KLIB_FINGERPRINT =", "body": "<STR_LIT><EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>t != null<!>) {", "body": "}"}
{"signature": "val sectionsPath =", "body": "setOf(*test.mainLink.sections.toTypedArray(), test.mainLink.paragraphNumber).joinToString()<EOL>"}
{"signature": "if (!file.isValidAndExists(fileContent)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_MODULE_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "val isAllUnderClassifierImport =", "body": "importDirective.isAllUnder && importedSymbols.any { it is KtClassOrObjectSymbol }<EOL>"}
{"signature": "val includedCategories =", "body": "mutableListOf<ObjCCategory>()<EOL>"}
{"signature": "val newLoop =", "body": "oldLoop.transform(this, null)<EOL>"}
{"signature": "fun test<NUM_LIT>(a: A, b: B, c: C) {", "body": "<EOL><INDENT>assertEquals<NUM_LIT>(a, b)<EOL><INDENT><!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>assertEquals<NUM_LIT><!>(b, c)<EOL><EOL><INDENT>assertEquals<NUM_LIT>(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>assertEquals<NUM_LIT>(<NUM_LIT> or <NUM_LIT>, <NUM_LIT> or <NUM_LIT>)<EOL>}"}
{"signature": "for (@Volatile var x in <NUM_LIT>.<NUM_LIT>) {", "body": "}"}
{"signature": "if (!isOk) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val javacField =", "body": "this::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "val equalsSymbol =", "body": "classSymbol?.getEqualsSymbol() ?: equalsSymbolInAny ?: return null<EOL>"}
{"signature": "val ARCHS_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val makeDeclarationsHidden =", "body": "config.produce == CompilerOutputKind.STATIC_CACHE<EOL>"}
{"signature": "fun collectDescriptorsFromDestructingDeclaration(<INDENT><INDENT>result: MutableSet<DeclarationDescriptor>,<INDENT><INDENT>declaration: KtDestructuringDeclaration,<INDENT><INDENT>nameFilter: (Name) -> Boolean,<INDENT><INDENT>location: LookupLocation,<INDENT>) {", "body": "<INDENT><INDENT>// MultiDeclarations are not supported on global level by default<INDENT>}"}
{"signature": "val newLocation =", "body": "node.extractLocation()<EOL>"}
{"signature": "val diagnosticsService =", "body": "testServices.diagnosticsService<EOL>"}
{"signature": "fun test(f: KFunction<*>) {", "body": "<EOL><INDENT>val javaMethod = f.javaMethod<EOL><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT>assertEquals(f, javaMethod.kotlinFunction, <STR_LIT>)<EOL>}"}
{"signature": "val providers =", "body": "instances.map { it.buildProvider() }<EOL>"}
{"signature": "fun writeByte(v: Byte) {", "body": "<EOL><INDENT><INDENT><INDENT>os.write(v.toInt())<EOL><INDENT><INDENT><INDENT>written++<EOL><INDENT><INDENT>}"}
{"signature": "val functionRegex =", "body": "RegExp(<STR_LIT>)<EOL>"}
{"signature": "when (modifierListsOwner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtNullableType -> modifierListsOwner.modifierList?.annotationEntries<EOL><INDENT><INDENT><INDENT><INDENT>is KtTypeReference -> modifierListsOwner.annotationEntries<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nativePointedRawPtrPropertyName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (Directives.IGNORE_FIR in directives) {", "body": "<EOL><INDENT><INDENT><INDENT>throwTestIsPassingException(Directives.IGNORE_FIR)<EOL><INDENT><INDENT>}"}
{"signature": "val fromCall =", "body": "MethodInfo(className, this.name, this.desc)<EOL>"}
{"signature": "val abiDumpWithManifest =", "body": "LibraryAbiRenderer.render(<EOL>"}
{"signature": "for (i in from .. from + length - <NUM_LIT>) {", "body": "<EOL><INDENT>  if (!hasNext)<EOL><INDENT><INDENT>return count<EOL><INDENT>  buffer[i] = next()<EOL><INDENT>  count++<EOL><INDENT>}"}
{"signature": "fun testResolveFunAndValFromClasspath() {", "body": "<EOL><INDENT><INDENT>runScriptAndCheckResult(funAndValAccessScript, configurationWithDependenciesFromClasspath, null, <NUM_LIT>)<EOL><INDENT><INDENT>runScriptAndCheckResult(funAndValImportScript, configurationWithDependenciesFromClasspath, null, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "package view descriptor: $descriptor\"<EOL>.", "body": ""}
{"signature": "val useBKt =", "body": "javaSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val mutableProperty =", "body": "Klass<*>::<!MUTABLE_PROPERTY_WITH_CAPTURED_TYPE!>mutableProperty<!><EOL>"}
{"signature": "val mavenPublication =", "body": "publications.maybeCreate(builtArtifact, MavenPublication::class.java)<EOL>"}
{"signature": "val model =", "body": "executor.setEnvironmentVariables(env)<EOL>"}
{"signature": "val expectedProjectStructureMetadata =", "body": "expectedProjectStructureMetadata(<EOL>"}
{"signature": "fun visitPropertySetterDescriptor(descriptor: PropertySetterDescriptor, data: IrDeclarationContainer?) {", "body": "<EOL><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val avSampleFormat =", "body": "sampleFormat.toAVSampleFormat() ?: return null<EOL>"}
{"signature": "val secondCandidate =", "body": "secondReference?.candidate<EOL>"}
{"signature": "fun minOf() {", "body": "<EOL><INDENT><INDENT>propagateOf<NUM_LIT>(::minOf, ::minOf, <STR_LIT>)<EOL><INDENT><INDENT>propagateOf<NUM_LIT>(::minOf, ::minOf, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (moduleStructure.modules.size > <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT>// The test is already multimodule, no need to split it into modules further.<INDENT><INDENT><INDENT>return moduleStructure<INDENT><INDENT>}"}
{"signature": "while (expr != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (expr is IrReturn) return true<EOL><INDENT><INDENT><INDENT>if (expr is IrBreakContinue) return true<EOL><INDENT><INDENT><INDENT>if (expr !is IrBlock) return false<EOL><INDENT><INDENT><INDENT>expr = expr.statements.lastOrNull()<EOL><INDENT><INDENT>}"}
{"signature": "if (rootFile.extension == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>target += rootFile<EOL><INDENT>}"}
{"signature": "if (line.startsWith(SECTION_INDICATOR)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assert(line.length > <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>saveCurrent()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>currentName = line.drop(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var containsKotlinConstVals =", "body": "false<EOL>"}
{"signature": "val decodeElementIndex =", "body": "<STR_LIT><EOL>"}
{"signature": "val showLocalVariables =", "body": "LOCAL_VARIABLE_TABLE in module.directives<EOL>"}
{"signature": "val modifiersChecker =", "body": "modifiersChecker.withTrace(trace)<EOL>"}
{"signature": "val newAnnotationCall =", "body": "builder.buildAnnotationCall(ktAnnotationEntry, annotationCall.containingDeclarationSymbol)<EOL>"}
{"signature": "val COROUTINES_METADATA_VERSION_JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitULongValue(value: ULongValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.LONG<EOL><INDENT><INDENT>data.builder.intValue = value.value<EOL><INDENT><INDENT>data.builder.flags = Flags.IS_UNSIGNED.toFlags(true)<EOL><INDENT>}"}
{"signature": "val annotationSource =", "body": "DescriptorToSourceUtils.getSourceFromAnnotation(objCName.annotation)<EOL>"}
{"signature": "fun visitFor(x: JsFor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>level++<EOL><INDENT><INDENT><INDENT><INDENT>super.visitFor(x)<EOL><INDENT><INDENT><INDENT><INDENT>level--<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isTopLevelPrivate(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>val fileSig = declaration.fakeFileSignature(publicSignature)<EOL><INDENT><INDENT><INDENT>IdSignature.CompositeSignature(fileSig, publicSignature)<EOL><INDENT><INDENT>}"}
{"signature": "val jsSliceArrayLikeFromIndex =", "body": "context.intrinsics.jsSliceArrayLikeFromIndex<EOL>"}
{"signature": "if (resolvedFromTargetDependencies != null) {", "body": "<EOL><INDENT><INDENT>return generateUnderlyingTypeSequence(<EOL><INDENT><INDENT><INDENT>CirProvidedClassifiers.of(classifiers.commonDependencies, classifiers.targetDependencies[targetIndex]),<EOL><INDENT><INDENT><INDENT>resolvedFromTargetDependencies<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (type.features.serializer == CLASS_USE_SERIALIZER || type.features.serializer == USE_CONTEXTUAL) {", "body": "<INDENT><INDENT><INDENT><INDENT>line(<STR_LIT>)<INDENT><INDENT><INDENT><INDENT>type.named.classUsage<INDENT><INDENT><INDENT>}"}
{"signature": "val allExecutedTasks =", "body": "listOf(binary.linkTask) + compileTasks<EOL>"}
{"signature": "val genericString =", "body": "Outer<Unit>().foo()<EOL>"}
{"signature": "val Volatile =", "body": "<STR_LIT>.concurrentId()<EOL>"}
{"signature": "fun TestLambda(content: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>  content()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val booleanNotSymbol =", "body": "context.irBuiltIns.booleanNotSymbol<EOL>"}
{"signature": "if (mirror is PsiFileImpl) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>mirror.originalFile = this<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val shouldRenderArguments =", "body": "forceRenderArguments || globalMetadataInfoHandler.getExistingMetaInfosForActualMetadata(file, metaInfo)<EOL>"}
{"signature": "if (entry.isSymbolicLink) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Files.createSymbolicLink(outputFile.toPath(), Paths.get(entry.linkName))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptDependenciesStack =", "body": "ArrayDeque<KtScript>()<EOL>"}
{"signature": "val memberInfo =", "body": "abiInfo.memberInfo<EOL>"}
{"signature": "val lowestTimePeriodToKeepStrongRefs =", "body": "currentTimePeriod.get() - maxTimePeriodsToKeepStrongReferences + <NUM_LIT><EOL>"}
{"signature": "fun escapeC(c: Ckt<NUM_LIT>) {", "body": "<EOL><INDENT>b.c = c<EOL>}"}
{"signature": "fun assertNoDuplicateKeys(@Language(<STR_LIT>) src: String) {", "body": "<EOL><INDENT><INDENT>computeKeys(listOf(SourceFile(<STR_LIT>, src)))<EOL><INDENT>}"}
{"signature": "val typeQualifierAnnotation =", "body": "resolveTypeQualifierAnnotation(annotation) ?: return null<EOL>"}
{"signature": "if (firstStatement !is IrContainerExpression || firstStatement.statements.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>((MaxUB - <NUM_LIT>u).toUInt(), MaxUB.toUInt())) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (origin != IrStatementOrigin.IN && origin != IrStatementOrigin.NOT_IN) {", "body": "<INDENT><INDENT><INDENT>return super.visitCall(expression)  // The call is not an `in` expression.<INDENT><INDENT>}"}
{"signature": "val bottles =", "body": "args[<NUM_LIT>].toIntOrNull()<EOL>"}
{"signature": "val originalClass =", "body": "constructor.declarationDescriptor<EOL>"}
{"signature": "fun builderWith(b: MemberBuildActionP<TParam>) {", "body": "buildActions += BuildAction.Parametrized(b) }"}
{"signature": "val diScope =", "body": "functionScope ?: return null<EOL>"}
{"signature": "fun testHowToRunExpression() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedExitCode = <NUM_LIT>, expectedStderr = <STR_LIT><EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedStdout = <STR_LIT><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val actualDiag =", "body": "res.reports<EOL>"}
{"signature": "var isCompleted =", "body": "false<EOL>"}
{"signature": "val SOURCEINFORMATIONMARKERSTART =", "body": "<STR_LIT><EOL>"}
{"signature": "fun beforePass(pass: Int) {", "body": "<EOL><INDENT><INDENT>if (DUMP_FIR) dump = MultiModuleHtmlFirDump(File(FIR_HTML_DUMP_PATH))<EOL><INDENT><INDENT>System.gc()<EOL><INDENT><INDENT>asyncProfilerControl.beforePass(pass, reportDateStr)<EOL><INDENT>}"}
{"signature": "val diffsDeserialized =", "body": "BuildDiffsStorage.readFromFile(storageFile, reporter = null)<EOL>"}
{"signature": "fun failOnNoVariantsSubmitted() {", "body": "<EOL><INDENT><INDENT>createCommonizer().result<EOL><INDENT><INDENT>fail()<EOL><INDENT>}"}
{"signature": "val unavailablePackages =", "body": "unavailableRequiredPackages()<EOL>"}
{"signature": "val renderDocComments =", "body": "config.settings[RENDER_DOC_COMMENTS] != <STR_LIT><EOL>"}
{"signature": "val fn<NUM_LIT> =", "body": "::`my fn`<EOL>"}
{"signature": "val directParent =", "body": "PsiTreeUtil.findCommonParent(callSite, declarationSite)<EOL>"}
{"signature": "if (gfn is Float) {", "body": "<EOL><INDENT><INDENT>assertTrue(gfn == gfn, <STR_LIT>)<EOL><INDENT><INDENT>assertFalse(gfn != gfn, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val inCompaionObject =", "body": "<NUM_LIT><EOL>"}
{"signature": "val primaryConstructorSymbol =", "body": "declaration.primaryConstructorIfAny(context.session)<EOL>"}
{"signature": "val nativeTargetsForManifest =", "body": "config.nativeTargetsForManifest?.map { it.visibleName } ?: listOf(target.visibleName)<EOL>"}
{"signature": "val otherTypeAlignment =", "body": "LLVMPreferredAlignmentOfType(llvmTargetData, otherLlvmType)<EOL>"}
{"signature": "fun foo(block: KFunction<NUM_LIT><Unit>) {", "body": "<EOL><INDENT>block()<EOL>}"}
{"signature": "val androidPackage =", "body": "packageFragment.packageData.moduleData.module.applicationPackage<EOL>"}
{"signature": "val maxSignatureIndex =", "body": "IrArrayMemoryReader(library.signatures(fileIndex)).entryCount() - <NUM_LIT> // Index of the latest signature in the current file."}
{"signature": "val scopeWithGenerics =", "body": "scopeWithGenerics(inheritanceScopeWithMe())<EOL>"}
{"signature": "fun usage(voidParam: MyPlatformSpecificClass) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(myJClass: MyJClass) {", "body": "<EOL><INDENT>myJClass.meth(<!TYPE_MISMATCH!><STR_LIT><!>)<EOL>}"}
{"signature": "val iteratorClassDescriptor =", "body": "iteratorDescriptor.returnType!!.constructor.declarationDescriptor as ClassDescriptor<EOL>"}
{"signature": "val mapDependencyTo =", "body": "resultDependenciesForEachUsageContext.get(moduleDependency)<EOL>"}
{"signature": "val subResult =", "body": "ArrayList<DeclarationDescriptor>()<EOL>"}
{"signature": "val functionToOverride =", "body": "toOverride.classOrNull!!.owner.getInvokeFunction()<EOL>"}
{"signature": "val I<NUM_LIT>_EXTEND<NUM_LIT>_S =", "body": "<STR_LIT><EOL>"}
{"signature": "fun outer() {", "body": "<EOL><INDENT>bar(<!NON_MEMBER_FUNCTION_NO_BODY!>fun ()<!>)<EOL><INDENT>bar(l@ <!NON_MEMBER_FUNCTION_NO_BODY!>fun ()<!>)<EOL><INDENT>bar(<!NON_MEMBER_FUNCTION_NO_BODY!>@ann fun ()<!>)<EOL>}"}
{"signature": "if (it.isNothing() && it is AbbreviatedType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(if (declaration is KtProperty) ABBREVIATED_NOTHING_PROPERTY_TYPE else ABBREVIATED_NOTHING_RETURN_TYPE).on(target)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val implementationType =", "body": "context.returnTypeCalculator.tryCalculateReturnType(implementationMember).coneType<EOL>"}
{"signature": "fun nextDoubleFromUntil() {", "body": "<EOL><INDENT><INDENT>val firstAngle = Random.nextDouble(until = Math.PI / <NUM_LIT>);<EOL><INDENT><INDENT>assertTrue(sin(firstAngle) < <NUM_LIT>)<EOL><EOL><INDENT><INDENT>val secondAngle = Random.nextDouble(from = Math.PI / <NUM_LIT>, until = Math.PI / <NUM_LIT>)<EOL><INDENT><INDENT>val sinValue = sin(secondAngle)<EOL><INDENT><INDENT>assertTrue(sinValue >= <NUM_LIT> && sinValue < <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val restoreCoroutineState =", "body": "symbols.restoreCoroutineState<EOL>"}
{"signature": "fun persistReturnableBlockName(label: String, loop: IrReturnableBlock) {", "body": "<EOL><INDENT><INDENT>localReturnableBlockNames.declareFreshName(loop, label)<EOL><INDENT>}"}
{"signature": "fun visitParameter(parameter: KtParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitParameter(parameter)<EOL><INDENT><INDENT><INDENT>block(parameter)<EOL><INDENT><INDENT>}"}
{"signature": "val OX =", "body": "O.X<EOL>"}
{"signature": "if (enumEntriesCanBeUsed) {", "body": "<INDENT><INDENT><INDENT>// It still might be filtered out later in tower resolve if feature disabled<INDENT><INDENT><INDENT>listOfNotNull(createEnumEntriesProperty(containingClass))<INDENT><INDENT>}"}
{"signature": "val innerStatement =", "body": "x.statement<EOL>"}
{"signature": "val elementConeType =", "body": "ConeClassLikeTypeImpl(<EOL>"}
{"signature": "val maskIsStableAndDifferent =", "body": "irEqual(<EOL>"}
{"signature": "if (innerJavaClassId?.packageFqName != outerJavaClassId?.packageFqName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val wc =", "body": "WeirdComparator<String>().createInner()!!<EOL>"}
{"signature": "val searchStep =", "body": "oldValueLength.coerceAtLeast(<NUM_LIT>)<EOL>"}
{"signature": "if (FirJvmPlatformDeclarationFilter.isFunctionAvailable(symbol.fir, javaMappedClassUseSiteScope, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declared += symbol<EOL><INDENT><INDENT><INDENT><INDENT>processor(symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (silent) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val topLevelDeclaration =", "body": "getTopLevelDeclaration()<EOL>"}
{"signature": "when (val result = invoke(this as String)) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> result<EOL><INDENT><INDENT>}"}
{"signature": "fun setValue(thisRef: R, desc: KProperty<*>, value: String?) {", "body": "log += <STR_LIT>}"}
{"signature": "fun naturalOrderComparator() {", "body": "<EOL><INDENT><INDENT>val v<NUM_LIT> = <STR_LIT><EOL><INDENT><INDENT>val v<NUM_LIT> = <STR_LIT><EOL><EOL><INDENT><INDENT>assertTrue(naturalOrder<String>().compare(v<NUM_LIT>, v<NUM_LIT>) < <NUM_LIT>)<EOL><INDENT><INDENT>assertTrue(reverseOrder<String>().compare(v<NUM_LIT>, v<NUM_LIT>) > <NUM_LIT>)<EOL><INDENT><INDENT>assertTrue(reverseOrder<Int>() === naturalOrder<Int>().reversed())<EOL><INDENT><INDENT>assertTrue(naturalOrder<Int>() === reverseOrder<Int>().reversed())<EOL><INDENT>}"}
{"signature": "val reassignment =", "body": "VariableReassignment(expression, variableSymbol, variableAssignment.isAugmented())<EOL>"}
{"signature": "val KOTLIN_BRIDGE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun addingNewArgumentDoNotLooseExistingOptions() {", "body": "<EOL><INDENT><INDENT>val compilerOptions = CompilerPluginOptions()<EOL><EOL><INDENT><INDENT>compilerOptions.addPluginArgument(EXAMPLE_PLUGIN_ID, subpluginOption<NUM_LIT>)<EOL><INDENT><INDENT>compilerOptions.addPluginArgument(EXAMPLE_PLUGIN_ID, subpluginOption<NUM_LIT>)<EOL><EOL><INDENT><INDENT>assertEquals(setOf(EXAMPLE_PLUGIN_ID), compilerOptions.allOptions().keys)<EOL><INDENT><INDENT>assertEquals(listOf(subpluginOption<NUM_LIT>, subpluginOption<NUM_LIT>), compilerOptions.allOptions()[EXAMPLE_PLUGIN_ID])<EOL><INDENT>}"}
{"signature": "val generatedKotlinSources =", "body": "tmpDir.newFolder()<EOL>"}
{"signature": "val regExpBuilder =", "body": "JsAstProtoBuf.RegExpLiteral.newBuilder()<EOL>"}
{"signature": "val ok<NUM_LIT> =", "body": "Simple.valueOf(<STR_LIT>)<EOL>"}
{"signature": "fun addBinaryRoot(root: Path) {", "body": "<EOL><INDENT><INDENT>binaryRoots.add(root)<EOL><INDENT>}"}
{"signature": "val defaultImports =", "body": "listOf(<EOL>"}
{"signature": "val nsErrorCategoryName =", "body": "<STR_LIT><EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.enumEntryAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(JsProtoBuf.enumEntryAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val validPackages =", "body": "NativeForwardDeclarationKind.packageFqNameToKind.keys<EOL>"}
{"signature": "val CreateTestBundlePhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, FrontendPhaseOutput.Full>(<EOL>"}
{"signature": "fun usageBar(bar: Bar) {", "body": "<EOL><INDENT><expr>bar[<NUM_LIT>] *= <STR_LIT></expr><EOL>}"}
{"signature": "if (descriptor is FunctionDescriptor && descriptor.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJs.INLINE_EXTERNAL_DECLARATION.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "var isUsableAnnotation =", "body": "true<EOL>"}
{"signature": "val ctorDispatchReceiverType =", "body": "expression.symbol.owner.dispatchReceiverParameter?.type<EOL>"}
{"signature": "val resolvedCallForArgument =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>argument.valueArgument?.getArgumentExpression()?.getResolvedCall(bindingContext) as? NewResolvedCallImpl<EOL>"}
{"signature": "val isJumpElement =", "body": "element is KtBreakExpression<EOL>"}
{"signature": "val argumentsAsVararg =", "body": "varargElementType != null && !hasSpread(resolvedArgument)<EOL>"}
{"signature": "if (ClsClassFinder.isKotlinInternalCompiledFile(virtualFile, content.content)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val algebraType =", "body": "ALGEBRA_CLASS_ID.createConeType(session, arrayOf(argumentType))<EOL>"}
{"signature": "val rightComputation =", "body": "<EOL><INDENT><INDENT><INDENT>getNonTrivialComputation(rightExpression, bindingTrace, moduleDescriptor) ?: return ConditionalDataFlowInfo.EMPTY<EOL>"}
{"signature": "val UShort =", "body": "Short.unsignedId()<EOL>"}
{"signature": "val intrinsic =", "body": "DelegatePropertyAccessIntrinsic.intrinsic(this, context)<EOL>"}
{"signature": "fun visitTypeParameter(typeParameter: FirTypeParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>indexDeclaration(typeParameter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitElement(typeParameter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val loadedInProjectsPropertyName =", "body": "getPropertyName(kotlinPluginVersion)<EOL>"}
{"signature": "fun visitPrefixOperation(x: JsPrefixOperation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeByte(ExpressionIds.PREFIX_OPERATION)<EOL><INDENT><INDENT><INDENT><INDENT>writeByte(x.operator.ordinal)<EOL><INDENT><INDENT><INDENT><INDENT>writeExpression(x.arg)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lookup =", "body": "<EOL><INDENT><INDENT>unsafe.getObject(<EOL>"}
{"signature": "if (!path.regionMatches(<NUM_LIT>, prefix, <NUM_LIT>, prefixLength, ignoreCase = !caseSensitive)) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "fun withLock(consumer: Consumer<in T>) {", "body": "<EOL><INDENT><INDENT>withLock(consumer::accept)<EOL><INDENT>}"}
{"signature": "val archiveTask =", "body": "kotlinCompilationArchiveTasks<EOL>"}
{"signature": "if (produce != CompilerOutputKind.LIBRARY) {", "body": "<EOL><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var newCapacity =", "body": "oldCapacity + (oldCapacity shr <NUM_LIT>)<EOL>"}
{"signature": "if (!(a is B)) {", "body": "<EOL><INDENT>a?.foo()<EOL><INDENT><!UNRESOLVED_REFERENCE!>c<!>.bar()<EOL>  }"}
{"signature": "if (this[startIndex] != x) {", "body": "<EOL><INDENT><INDENT>return this.indexOf(x, startIndex + <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (!isValidJavaFqName(nameValue)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirJvmErrors.JVM_PACKAGE_NAME_MUST_BE_VALID_NAME, context)<EOL><INDENT><INDENT>}"}
{"signature": "for (col in items.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>row[col] = Field(rowNum, col, items[col].toByte())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultImplsOriginalMethods =", "body": "ConcurrentHashMap<IrSimpleFunction, IrSimpleFunction>()<EOL>"}
{"signature": "val kFunctionImplSymbol =", "body": "symbols.kFunctionImpl<EOL>"}
{"signature": "val TO_STRING_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "for (i in r) {", "body": "<EOL><INDENT><INDENT>consume(i)<EOL><INDENT>}"}
{"signature": "val hostExpression =", "body": "<EOL><INDENT><INDENT><INDENT>(delegatedCall.valueArgumentsByIndex!![<NUM_LIT>] as ExpressionValueArgument).valueArgument!!.getArgumentExpression()<EOL>"}
{"signature": "when (val partiallyAppliedSymbol = calleeReference.boundSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is FirClassSymbol<*> -> partiallyAppliedSymbol.toKtSymbol()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is FirCallableSymbol<*> -> firSymbolBuilder.callableBuilder.buildExtensionReceiverSymbol(partiallyAppliedSymbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: return null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> return null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bind(element: E) {", "body": "<EOL><INDENT><INDENT>_labeledElement = element<EOL><INDENT>}"}
{"signature": "val defFileLines =", "body": "file.readLines()<EOL>"}
{"signature": "if (status.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (isSet(access, Opcodes.ACC_STRICT)) {", "body": "<EOL><INDENT><INDENT>flags = flags or ModifierFlags.STRICTFP_MASK<EOL><INDENT>}"}
{"signature": "val functionAdapter =", "body": "getInternalClass(<STR_LIT>)<EOL>"}
{"signature": "val abc =", "body": "<NUM_LIT><EOL>"}
{"signature": "val rightOperandType =", "body": "rightOperand.resolvedType<EOL>"}
{"signature": "val defaultArgumentCount =", "body": "descriptor.valueParameters.size - argumentsInfo.valueArguments.size<EOL>"}
{"signature": "val servicesClass =", "body": "Class.forName(Services::class.java.canonicalName, true, classLoader)<EOL>"}
{"signature": "val defaultExprIsStatic =", "body": "BooleanArray(parameters.size) { true }<EOL>"}
{"signature": "val originalDeclarationReturnType =", "body": "originalFirDeclaration.returnTypeRef.coneType<EOL>"}
{"signature": "val firBuilder =", "body": "PsiRawFirBuilder(session, scopeProvider)<EOL>"}
{"signature": "if (AsmUtil.isPrimitive(context.defaultTypeMapper.mapType(p.type)) && ourSignature.argumentTypes[i].sort == Type.OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>p.type = p.type.makeNullable()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (text.length < <NUM_LIT> * chunkSize) {", "body": "<EOL><INDENT><INDENT>this.write(text.toByteArray(charset))<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "val firFileContent =", "body": "readContent(firFile, trimLines)<EOL>"}
{"signature": "val referencedExpression =", "body": "desugaredAssignmentValueReferenceExpression.expressionRef.value<EOL>"}
{"signature": "if (parent is T) {", "body": "<EOL><INDENT><INDENT><INDENT>return parent<EOL><INDENT><INDENT>}"}
{"signature": "for (overriddenFunction in getOverriddenFunctions(irFunction as IrSimpleFunction)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!overriddenFunction.isFakeOverride) trackDeclaration(irFunction, mapRawSignature(overriddenFunction))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {", "body": "<EOL><INDENT><INDENT>map[Thread.currentThread()] = value<EOL><INDENT>}"}
{"signature": "fun test(tr: Tr) {", "body": "<EOL><INDENT>val v = tr as <!NO_TYPE_ARGUMENTS_ON_RHS!>G<!><EOL><INDENT>checkSubtype<G<*>>(v)<EOL>}"}
{"signature": "val inlineFunctionDepends =", "body": "hashMapOf<IrFunction, InlineFunctionDependencies>()<EOL>"}
{"signature": "val caseSensitive =", "body": "true<EOL>"}
{"signature": "fun union() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), listOf(<NUM_LIT>, <NUM_LIT>).union(listOf(<NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>), listOf<Int>().union(listOf(<NUM_LIT>)).toList())<EOL><INDENT>}"}
{"signature": "when (System.getProperty(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.inlineStatus != InlineStatus.Inline && declaration.inlineStatus != InlineStatus.CrossInline) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val EXPERIMENTAL_CONTINUATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>platformNN != null<!>) {", "body": "}"}
{"signature": "if (greatest == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>splayTree.remove(key)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val returnTypeEncoding =", "body": "methodBridge.returnBridge.getObjCEncoding(generationState)<EOL>"}
{"signature": "if (descriptor is ClassOrPackageFragmentDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return NameAndStability(baseName, !DescriptorUtils.isDescriptorWithLocalVisibility(descriptor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (data is ResolutionMode.WithExpectedType && data.expectedTypeRef.coneTypeSafe<ConeKotlinType>()?.isUnitOrFlexibleUnit == true) {", "body": "<INDENT><INDENT><INDENT>// Unit-coercion<INDENT><INDENT><INDENT>block.resultType = data.expectedTypeRef.type<INDENT><INDENT>}"}
{"signature": "val jvmBinaryClass =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinClassFinder.findKotlinClass(<EOL>"}
{"signature": "package can be set via the DSL namespace value:<EOL>.", "body": ""}
{"signature": "import HolderWithDefault<EOL>.", "body": ""}
{"signature": "val visibleTypeParameters =", "body": "collectVisibleTypeParameters(this)<EOL>"}
{"signature": "fun visitByteValue(value: ByteValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.BYTE<EOL><INDENT><INDENT>data.builder.intValue = value.value.toLong()<EOL><INDENT>}"}
{"signature": "fun thirdPartyJvmFun() {", "body": "}"}
{"signature": "if (old.hasExtension(JsProtoBuf.packageFqName)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(JsProtoBuf.packageFqName) != new.getExtension(JsProtoBuf.packageFqName)) result.add(ProtoBufPackageKind.JS_EXT_PACKAGE_FQ_NAME)<EOL><INDENT><INDENT>}"}
{"signature": "val UNSIGNED_REM<INDENT><INDENT>  =", "body": "<STR_LIT><EOL>"}
{"signature": "val guardFile =", "body": "projectPath.resolve(<STR_LIT>).toFile()<EOL>"}
{"signature": "val unaryBuilder =", "body": "JsAstProtoBuf.UnaryOperation.newBuilder()<EOL>"}
{"signature": "val commentText =", "body": "<STR_LIT>"}
{"signature": "for (x: Comparable<*> in uintArrayOf(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u)) {", "body": "<EOL><INDENT><INDENT>test = <STR_LIT><EOL><INDENT><INDENT>useUIntAsComparable(x)<EOL><INDENT>}"}
{"signature": "val notOverflow =", "body": "<!EVALUATED: `<NUM_LIT>`!>withPossibleOverflow(<NUM_LIT>_<NUM_LIT>)<!><EOL>"}
{"signature": "fun visit(<EOL><INDENT><INDENT><INDENT><INDENT>version: Int, access: Int, name: String?, signature: String?, superName: String?, interfaces: Array<out String>?<EOL><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>classFileVersion = version<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val generatorExtensions =", "body": "session.extensionService.declarationGenerators<EOL>"}
{"signature": "if (delegatedDescriptor.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>irProperty.setter = generateDelegatedFunction(irDelegate, delegatedDescriptor.setter!!, delegateToDescriptor.setter!!)<EOL><INDENT><INDENT>}"}
{"signature": "for ((index, property) in serializableProperties.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val propertyType = codegen.typeMapper.mapType(property.type)<EOL><INDENT><INDENT><INDENT><INDENT>callReadProperty(expressionCodegen, property, propertyType, index, inputVar, descVar, propVar)<EOL><INDENT><INDENT><INDENT><INDENT>propVar += propertyType.size<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeClass =", "body": "typeConstructorDeclaration<EOL>"}
{"signature": "if (restArguments == null && typeArgumentsCanBeSpecifiedCount > result.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>c.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>OUTER_CLASS_ARGUMENTS_REQUIRED.on(qualifierParts.first().expression, nextParameterOwner)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allFirFiles =", "body": "module.files.filter { it.isKtFile }.zip(<EOL>"}
{"signature": "val startSearch =", "body": "if (matchLineTerminator) rightBound else testString.findLineTerminator(startIndex, rightBound)<EOL>"}
{"signature": "val savedStackValues =", "body": "analyzer.getStackToSpill(inlineMarker)<EOL>"}
{"signature": "val returnBlock =", "body": "CoroutineBlock()<EOL>"}
{"signature": "if (parent is KtObjectDeclaration && parent.isCompanion()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>mainFunction.fqName?.parent()?.parent()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (builder(false) {", "body": "throw RuntimeException(<STR_LIT>) }"}
{"signature": "val cxaEndCatchFunction =", "body": "externalNativeRuntimeFunction(<EOL>"}
{"signature": "val allowDangerousLanguageVersionTesting =", "body": "<EOL><INDENT><INDENT><INDENT>directives.contains(LanguageSettingsDirectives.ALLOW_DANGEROUS_LANGUAGE_VERSION_TESTING)<EOL>"}
{"signature": "fun testSimpleAbstractDeclarationDifferentSignature() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a)<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT>}"}
{"signature": "val filteredErr =", "body": "err.linesSplitTrim().filterNot { it.startsWith(<STR_LIT>) }<EOL>"}
{"signature": "val sharedApiClassesClassLoader =", "body": "SharedApiClassesClassLoader()<EOL>"}
{"signature": "package one.", "body": "two<EOL>"}
{"signature": "val excludedPackages =", "body": "registeredDirectives[EXCLUDED_PACKAGES]<EOL>"}
{"signature": "val packagePartSource =", "body": "(descriptor as DeserializedPropertyDescriptor).containerSource<EOL>"}
{"signature": "val doppelganger =", "body": "DataObject::class.java.declaredConstructors[<NUM_LIT>].apply { isAccessible = true }.newInstance()<EOL>"}
{"signature": "val matchedNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun fooDefault() {", "body": "}<EOL><EOL>@Deprecated(<STR_LIT>)<EOL>@DeprecatedSinceKotlin(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>fun fooEqual() {}"}
{"signature": "if (descriptor.kind == ClassKind.ENUM_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>val modifierOrName =<EOL><INDENT><INDENT><INDENT><INDENT>declaration.modifierList?.getModifier(KtTokens.ENUM_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: declaration.nameIdentifier<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: declaration<EOL><EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.ENUM_JVM_RECORD.on(modifierOrName))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (startIndex < testString.length) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun test(id: Id?) {", "body": "<EOL><INDENT>if (id != null) throw AssertionError()<EOL>}"}
{"signature": "if (!context.isTopLevel && !isObject) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportIfHasAnnotation(declaration, threadLocalClassId, FirNativeErrors.INAPPLICABLE_THREAD_LOCAL_TOP_LEVEL, context)<EOL><INDENT><INDENT>}"}
{"signature": "var generic =", "body": "Generic.raw<EOL>"}
{"signature": "if (list<NUM_LIT> != listOf<ULong>(MinUL)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val stubNameAndArity =", "body": "stubMethod.nameAndArity<EOL>"}
{"signature": "val INC<INDENT><INDENT><INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "fun drawRect(rect: CValue<CGRect>) {", "body": "<EOL><INDENT><INDENT>super.drawRect(rect)<EOL><EOL><INDENT><INDENT>val smile = <STR_LIT> as NSString<EOL><INDENT><INDENT>smile.drawInRect(rect, withAttributes = null)<EOL><INDENT><INDENT>drawRectInvoked = true<EOL><INDENT>}"}
{"signature": "val INAPPLICABLE_THREAD_LOCAL_TOP_LEVEL =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "val KOTLIN_INCREMENTAL_USE_CLASSPATH_SNAPSHOT =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "when (methodName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> error(methodName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun modAssign(vararg n: Int) {", "body": "}<EOL><EOL><!INAPPLICABLE_OPERATOR_MODIFIER!>operator<!> fun compareTo(other: Example): Int {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}"}
{"signature": "val KAPT_OPTIONS =", "body": "CompilerConfigurationKey.create<KaptOptions.Builder>(<STR_LIT>)<EOL>"}
{"signature": "fun foo(p: Int??) {", "body": "<EOL><EOL>}"}
{"signature": "val baseFirSymbol =", "body": "subClass.firSymbol<EOL>"}
{"signature": "val leftSymbol =", "body": "leftArgument.toResolvedVariableSymbol()!!<EOL>"}
{"signature": "val BITCODE =", "body": "org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode.BITCODE<EOL>"}
{"signature": "if (result != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val binaryExpression =", "body": "resolvedCall.call.callElement as? KtBinaryExpression ?: return<EOL>"}
{"signature": "val caseIgnorableRangesBuilder =", "body": "CaseIgnorableRangesBuilder()<EOL>"}
{"signature": "fun box(map: MutableMap<String, String>) {", "body": "<EOL><INDENT>map.get<caret>OrDefault(<STR_LIT>, null)<EOL>}"}
{"signature": "val realFile =", "body": "getRealFileForSourceFile(testFile)<EOL>"}
{"signature": "fun flush() {", "body": "<EOL><INDENT><INDENT>storage.flush()<EOL><INDENT>}"}
{"signature": "val SPECIALIZED_EQUALS_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val elvisRhs =", "body": "ifNullBranch.result<EOL>"}
{"signature": "if (!(a >= <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "if (returnType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.returnType = returnType<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expressionReceiver =", "body": "ExpressionReceiver.create(ktExpression, baseType, bindingContext)<EOL>"}
{"signature": "if (alt) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>bits_.or(anotherBits)<INDENT><INDENT><INDENT><INDENT><INDENT>//A & B<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (SHIFT == info.status) {", "body": "<EOL><INDENT><INDENT><INDENT>mv.visitLocalVariable(name, desc, signature, start, end, (info.value as StackValue.Local).index)<EOL><INDENT><INDENT>}"}
{"signature": "val maxFileNameLength =", "body": "<NUM_LIT><EOL>"}
{"signature": "val canBePrecreated =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (!expectsTypeArgument) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectsTypeArgument = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val T_PROPERTY_GETTER =", "body": "targetList(PROPERTY_GETTER)<EOL>"}
{"signature": "val dispatchReceiverValueType =", "body": "candidate.dispatchReceiver?.resolvedType ?: return<EOL>"}
{"signature": "for ((subnode, argument) in rootNode.subnodes zip oldArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>flattenExpressionTo(argument, instance[subnode.name]!!)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (containingFile is KtFile && containingFile.isCompiled) {", "body": "<INDENT><INDENT>//can't use containingKtFile due to non-physical code fragments, e.g. ssr<INDENT><INDENT>return null<INDENT>}"}
{"signature": "val toolsJarURLSpec =", "body": "defaultKotlinJavaToolchain.get()<EOL>"}
{"signature": "when (val myParent = parent) {", "body": "<EOL><INDENT><INDENT>is IrFile -> myParent<EOL><INDENT><INDENT>is IrDeclaration -> myParent.fileParentOrNull<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until groupCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.add(group(i) ?: <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (receiver !is KtQualifiedExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "if (substitution.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>NewTypeSubstitutorByConstructorMap(substitution)<EOL><INDENT><INDENT>}"}
{"signature": "val IMPORT_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "fun takeNotNullString(x: String) {", "body": "}<EOL><EOL>fun takeArrayOfNotNullString(x: Array<String>) {}"}
{"signature": "val memorySizeInPages =", "body": "(typeInfoSize / <NUM_LIT>_<NUM_LIT>) + <NUM_LIT><EOL>"}
{"signature": "val registeredAdditionalArtifactResolvers =", "body": "mutableListOf<RegisteredAdditionalArtifactResolver>()<EOL>"}
{"signature": "when (NativeForwardDeclarationKind.packageFqNameToKind[getPackageFragment().packageFqName]) {", "body": "<EOL><INDENT>null, NativeForwardDeclarationKind.Struct -> false<EOL><INDENT>NativeForwardDeclarationKind.ObjCProtocol, NativeForwardDeclarationKind.ObjCClass -> true<EOL>}"}
{"signature": "val subResolveAtoms =", "body": "resolvedAtom.subResolvedAtoms<EOL>"}
{"signature": "val contentScope =", "body": "GlobalSearchScope.filesScope(kotlinCoreProjectEnvironment.project, virtualFiles)<EOL>"}
{"signature": "val allNodes =", "body": "hierarchy.collectChildren()<EOL>"}
{"signature": "val containingClassName =", "body": "member.containingClassLookupTag()?.classId?.asSingleFqName()?.toUnsafe() ?: return false<EOL>"}
{"signature": "val isNodeFromCurrentModule =", "body": "context.currentFile.module.descriptor == context.staticContext.backendContext.module<EOL>"}
{"signature": "if (elementParents.isEmpty() && this != rootElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>elementParents.add(ElementRef(rootElement))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun implicitBoxingInIdentityEquals(i: Int, a: Any?) {", "body": "<EOL><INDENT><!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i === a<!><EOL>}"}
{"signature": "val colors =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo<NUM_LIT>(x: Int, y: Comparable<Float>,) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(x: Int = <NUM_LIT>,) {}"}
{"signature": "fun testCurrentStackTrace() {", "body": "<EOL> val topFrame = currentStackTrace()[<NUM_LIT>]<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, topFrame.fileName)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, topFrame.lineNumber)<EOL><INDENT>}"}
{"signature": "while (hasMore) {", "body": "<EOL><INDENT><INDENT><INDENT>hasMore = remaining != end || remaining and <NUM_LIT> != (v shr <NUM_LIT>) and <NUM_LIT><EOL><INDENT><INDENT><INDENT>val byte = ((v and <NUM_LIT>x<NUM_LIT>f) or if (hasMore) <NUM_LIT>x8<NUM_LIT> else <NUM_LIT>).toInt()<EOL><INDENT><INDENT><INDENT>writeByte(byte.toByte())<EOL><INDENT><INDENT><INDENT>v = remaining<EOL><INDENT><INDENT><INDENT>remaining = remaining shr <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val rootFunction =", "body": "codegen.enclosingFunctionForLocalObjects<EOL>"}
{"signature": "val UNARY_PLUS<INDENT><INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "var expected =", "body": "test();<EOL>"}
{"signature": "when (ktSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtConstructorSymbol -> providePsiForConstructor(ktSymbol, project)<EOL><INDENT><INDENT><INDENT>is KtFunctionLikeSymbol -> providePsiForFunction(ktSymbol, project)<EOL><INDENT><INDENT><INDENT>is KtEnumEntrySymbol -> providePsiForEnumEntry(ktSymbol, project)<EOL><INDENT><INDENT><INDENT>is KtVariableLikeSymbol -> providePsiForProperty(ktSymbol, project)<EOL><INDENT><INDENT><INDENT>is KtClassLikeSymbol -> providePsiForClass(ktSymbol, project)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (resolutionResults != null && !resolutionResults.isNothing) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val resolvedCall = OverloadResolutionResultsUtil.getResultingCall(resolutionResults, context)<EOL><INDENT><INDENT><INDENT><INDENT>resolvedCall?.resultingDescriptor ?: return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val sessionsWithSources =", "body": "prepareJvmSessions(<EOL>"}
{"signature": "val fooKtCache =", "body": "getFileCache(<EOL>"}
{"signature": "var n =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (version in DaemonRegistry.activeDaemons) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>stopDaemon(version, environmentVariables)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasErrors) {", "body": "<EOL><INDENT><INDENT><INDENT>replState.lineFailure(linePsi)<EOL><INDENT><INDENT><INDENT>ReplLineAnalysisResult.WithErrors(<EOL><INDENT><INDENT><INDENT><INDENT>diagnostics<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val argumentExpressionType =", "body": "nestedCall.makeNullableTypeIfSafeReceiver(candidateWithFreshVariables.returnType, context)<EOL>"}
{"signature": "package redeclarations<EOL>.", "body": ""}
{"signature": "val parameterNameAnnotation =", "body": "BuiltInAnnotationDescriptor(<EOL>"}
{"signature": "val typeRepresentingA =", "body": "symbolOfB.getSuperClassTypeNotAny()<EOL>"}
{"signature": "val overriddenMemberSymbols =", "body": "baseScope.getDirectOverriddenMembersWithBaseScope(memberSymbol)<EOL>"}
{"signature": "val stateMachineMethodName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val lowerSuperType =", "body": "commonSuperTypeForSimpleTypes(lowers, depth, stateStubTypesEqualToAnything, stateStubTypesNotEqual)<EOL>"}
{"signature": "if (conversion == null) {", "body": "<EOL><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT>}"}
{"signature": "if (vals?.any() == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data[this] = vals.toMap()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isFpToIntConversionDeprecated(otherKind)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotationsToAdd += <STR_LIT>Unclear conversion. To achieve the same result convert to Int explicitly and then to $otherName.\\<STR_LIT>toInt().to$otherName()\\<STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>annotationsToAdd += <STR_LIT><NUM_LIT>\\<STR_LIT><NUM_LIT>\\<STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun enumArg() {", "body": "}<EOL><EOL>@VarargAnn(<STR_LIT>, <STR_LIT>)<EOL>actual fun varargInAnnotation() {}"}
{"signature": "val lambdaDeclaration =", "body": "createLambdaDeclaration(<EOL>"}
{"signature": "fun fooArray<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT><INDENT>foo(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val objCObject =", "body": "callDirect(<EOL>"}
{"signature": "var xs =", "body": "intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "if (!callableDescriptor.isEffectivelyFinal(ignoreEnumClassFinality = false)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.DECLARATION_CANT_BE_INLINED_WARNING.on(functionOrProperty))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val completionResult =", "body": "firCallCompleter.completeCall(<EOL>"}
{"signature": "fun testIncompatibleClasspaths() {", "body": "<EOL><INDENT><INDENT>val firstSnapshot = ClasspathSnapshot.ClasspathSnapshotFactory.createCurrent(File(<STR_LIT>), listOf(File(<STR_LIT>)), listOf(), emptySet())<EOL><INDENT><INDENT>val secondSnapshot =<EOL><INDENT><INDENT><INDENT>ClasspathSnapshot.ClasspathSnapshotFactory.createCurrent(File(<STR_LIT>), listOf(File(<STR_LIT>)), listOf(), setOf(File(<STR_LIT>)))<EOL><INDENT><INDENT>assertEquals(KaptClasspathChanges.Unknown, firstSnapshot.diff(secondSnapshot, emptySet()))<EOL><INDENT>}"}
{"signature": "val phaseConfig =", "body": "PhaseConfig(jsOptimizationPhases)<EOL>"}
{"signature": "val OPT_INS_PURELY_FOR_COMPILER =", "body": "setOf(<EOL>"}
{"signature": "val typeScope =", "body": "getFirTypeScope(type) ?: return null<EOL>"}
{"signature": "fun visitReferenceExpression(referenceExpression: KtReferenceExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitReferenceExpression(referenceExpression)<EOL><INDENT><INDENT><INDENT>block(referenceExpression)<EOL><INDENT><INDENT>}"}
{"signature": "val languageSettingsBuilder =", "body": "(compilation.defaultSourceSet.languageSettings as DefaultLanguageSettingsBuilder)<EOL>"}
{"signature": "val invocationCounter =", "body": "AtomicInteger(<NUM_LIT>)<EOL>"}
{"signature": "val parameterType =", "body": "descriptor.valueParameters.first()?.type<EOL>"}
{"signature": "if (declaration.valueParameters.size != original.valueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val ideaTcsPackage =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitInaccessibleReceiverExpression(inaccessibleReceiverExpression: FirInaccessibleReceiverExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitInaccessibleReceiverExpression(inaccessibleReceiverExpression)<EOL><INDENT>}"}
{"signature": "if (!containingDeclaration.hasValidJsCodeBody()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirWasmErrors.JSCODE_WRONG_CONTEXT, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (prefixBitsNum == <NUM_LIT> && suffixBitsNum == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>bits<EOL><INDENT><INDENT>}"}
{"signature": "val initializerDescription =", "body": "declaration.initializer?.let { findExpressionValueDescription(it) }<EOL>"}
{"signature": "fun testRegularAndDefaultsStar() {", "body": "useKCallableStar(::regularAndDefaults) }"}
{"signature": "if (isExported) {", "body": "<EOL><INDENT><INDENT><INDENT>irClass.kotlinObjCClassInfoSymbolName<EOL><INDENT><INDENT>}"}
{"signature": "package facades<EOL>.", "body": ""}
{"signature": "val testDistributionEnabled =", "body": "<EOL><INDENT><INDENT>project.findProperty(<STR_LIT>)?.toString()?.toBoolean() ?: false<EOL>"}
{"signature": "val namesTopDownEnter =", "body": "HashSet<String>()<EOL>"}
{"signature": "var useFirFakeOverrideBuilder =", "body": "false<EOL>"}
{"signature": "val lookupNamesInScope =", "body": "lookupSymbols.getLookupNamesInScope(clazz.classId.packageFqName)<EOL>"}
{"signature": "val robolectricProperties =", "body": "System.getProperties().propertyNames().asSequence()<EOL>"}
{"signature": "val DEFAULT_VALUE_PARAMETER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val providersForModule =", "body": "arrayListOf(<EOL>"}
{"signature": "val localResult =", "body": "doCall (<EOL>"}
{"signature": "val profilerProcess =", "body": "profilerProcessBuilder.start()<EOL>"}
{"signature": "val wasmDir =", "body": "jsonFile.parentFile!!<EOL>"}
{"signature": "val thisPackage =", "body": "ShouldBeVisibleFromScript::class.java.`package`.name<EOL>"}
{"signature": "package list contains sub-packages visible to Kotlin.", "body": "(e.g., for Kotlin/JVM, it should include Java packages)<EOL>"}
{"signature": "if (expression.origin == IrStatementOrigin.OROR) {", "body": "<EOL><INDENT><INDENT><INDENT>return JsBinaryOperation(<EOL><INDENT><INDENT><INDENT><INDENT>JsBinaryOperator.OR,<EOL><INDENT><INDENT><INDENT><INDENT>expression.branches[<NUM_LIT>].condition.accept(this, context),<EOL><INDENT><INDENT><INDENT><INDENT>expression.branches[<NUM_LIT>].result.accept(this, context)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun main(args: Array<String>) {", "body": "<EOL><INDENT>customCompare(<STR_LIT>, <STR_LIT>)<EOL>}"}
{"signature": "if (fieldUpdaterClass == atomicSymbols.atomicRefFieldUpdaterClass) {", "body": "<INDENT><INDENT><INDENT>putValueArgument(<NUM_LIT>, atomicSymbols.javaClassReference(valueType)) // vclass<INDENT><INDENT><INDENT>putValueArgument(<NUM_LIT>, irString(fieldName)) // fieldName<INDENT><INDENT>}"}
{"signature": "if (key is AbstractCoroutineContextKey<*, *>) {", "body": "<EOL><INDENT><INDENT>return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this<EOL><INDENT>}"}
{"signature": "for (fileRoot in file) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>library.addRoot(fileRoot, JpsOrderRootType.COMPILED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((typePredicate, v) in openPrimitiveClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>if (typePredicate(typeArgument))<EOL><INDENT><INDENT><INDENT><INDENT>return getPrimitiveClass(v, returnType)<EOL><INDENT><INDENT>}"}
{"signature": "fun addNewIterator(iterator: JsIterator<Any?>) {", "body": "<EOL><INDENT><INDENT>jsIterators.asDynamic().push(iterator)<EOL><INDENT>}"}
{"signature": "fun reportNonReifiedTypeParameterWithRecursiveBoundUnsupported(typeParameterName: Name) {", "body": "<EOL><INDENT><INDENT>state.diagnostics.report(TYPEOF_NON_REIFIED_TYPE_PARAMETER_WITH_RECURSIVE_BOUND.on(reportErrorsOn, typeParameterName.asString()))<EOL><INDENT>}"}
{"signature": "val serializableImplementationTypeArguments =", "body": "extractKSerializerArgumentFromImplementation(serializerDescriptor)?.arguments<EOL>"}
{"signature": "val unique =", "body": "others.groupBy(NpmDependencyDeclaration::name)<EOL>"}
{"signature": "if (annotationToCheckCalls != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>testServices.assertions.assertEqualsToTestDataFileSibling(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irCollector.functionsWithAnnotationToCheckCalls.joinToString(<STR_LIT>), extension = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (defaultValueDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return defaultValueDiff<EOL><INDENT><INDENT>}"}
{"signature": "package `/`<EOL>.", "body": ""}
{"signature": "val llvmType =", "body": "functionType.llvmFunctionType<EOL>"}
{"signature": "val scriptDefinitionProviderService =", "body": "session.scriptDefinitionProviderService<EOL>"}
{"signature": "val elementClone =", "body": "calcTreeElement().clone() as FileElement<EOL>"}
{"signature": "if (isTestAgainstCompiledCode) {", "body": "<EOL><INDENT><INDENT><INDENT>globalModificationService.publishGlobalModuleStateModification()<EOL><INDENT><INDENT>}"}
{"signature": "fun initializeStateMachine(coroutineConstructors: List<IrConstructor>, coroutineClassThis: IrValueDeclaration) {", "body": "<INDENT><INDENT>// Nothing to do: it's redundant to initialize the <STR_LIT> field with null<INDENT><INDENT>// since all freshly allocated objects are zeroed out.<INDENT>}"}
{"signature": "fun testScriptingCustomExtensionNonIncremental(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testScriptingCustomExtensionImpl(gradleVersion, withIC = false)<EOL><INDENT>}"}
{"signature": "if (oldDeclaration.dispatchReceiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotations =", "body": "configuration.getList(ANNOTATION)<EOL>"}
{"signature": "val sourceSetAMetadataFile =", "body": "metadataOutputDirectory.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (path.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return normalizeTail(<NUM_LIT>, path, false)<EOL><INDENT><INDENT>}"}
{"signature": "val mainFile =", "body": "File(mainFileName)<EOL>"}
{"signature": "val SOURCE_SETS_NODE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val subclassPackage =", "body": "declaration.classId.packageFqName<EOL>"}
{"signature": "val bbInstanceOf =", "body": "basicBlock(<STR_LIT>, value.startLocation)<EOL>"}
{"signature": "for (function in setOf(BuiltInOperatorNames.ANDAND, BuiltInOperatorNames.OROR)) {", "body": "<EOL><INDENT><INDENT>addOperation(function, PrimitiveType.BOOLEAN.typeName.asString())<EOL><INDENT>}"}
{"signature": "if (memberDeclaration.isConst) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val equalsFloat<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER, EQUALITY_NOT_APPLICABLE!><NUM_LIT>f == <STR_LIT><!><EOL>"}
{"signature": "val methodInsn =", "body": "insn as MethodInsnNode<EOL>"}
{"signature": "while (!haveRun) {", "body": "}"}
{"signature": "if (wasRemoved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ref.performCleanup()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitEnumEntry(entry: KlibEnumEntry) {", "body": "<EOL><INDENT><INDENT>enumEntries += entry<EOL><INDENT>}"}
{"signature": "val commonJsBody =", "body": "JsBlock(wrapCommonJs(factoryName.makeRef(), importedModules, program))<EOL>"}
{"signature": "val appliedPlugins =", "body": "<STR_LIT>.toRegex().findAll(output).map { it.groupValues[<NUM_LIT>] }.toSet()<EOL>"}
{"signature": "fun success<NUM_LIT>(c: () -> Unit) {", "body": "}<EOL><INDENT>success<NUM_LIT>(fun() {}"}
{"signature": "if (substituted == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return ConeOuterClassArgumentsRequired(typeParameter.symbol.containingDeclarationSymbol as FirClassLikeSymbol<*>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (saveClassesDir != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.put(JVMConfigurationKeys.OUTPUT_DIRECTORY, saveClassesDir)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (asLiteral && KT_<NUM_LIT>_AFFECTED_FILENAMES.contains(fileName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(KT_<NUM_LIT>_HEADER)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val statementsLabels =", "body": "HashMap<JsStatement, JsLabel>()<EOL>"}
{"signature": "val modulePattern =", "body": "Pattern.compile(<STR_LIT>)<EOL>"}
{"signature": "var EXPECTED_QUEUE_COUNT =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (languageVersion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>EnforcedLanguageVersion.K<NUM_LIT> -> copyEnsuringK<NUM_LIT>()<EOL><INDENT><INDENT><INDENT><INDENT>EnforcedLanguageVersion.K<NUM_LIT> -> copyEnsuringK<NUM_LIT>()<EOL><INDENT><INDENT><INDENT><INDENT>else -> this<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (subjectVariable != null) {", "body": "<EOL><INDENT><INDENT><INDENT>subjectVariable = subjectVariable?.transform(transformer, data)<EOL><INDENT><INDENT><INDENT>subject = subjectVariable?.initializer<EOL><INDENT><INDENT>}"}
{"signature": "if (hasMeaningfulFqName(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>DescriptorUtils.getFqName(descriptor).hashCode()<EOL><INDENT><INDENT>}"}
{"signature": "var normalizeAbsolutePath =", "body": "false<EOL>"}
{"signature": "val inferenceSession =", "body": "topLevelCallContext.inferenceSession<EOL>"}
{"signature": "val TYPE_INFO_ITABLE_OFFSET =", "body": "TYPE_INFO_ITABLE_SIZE_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "when (descriptor.visibility) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DescriptorVisibilities.PUBLIC,<EOL><INDENT><INDENT><INDENT><INDENT>DescriptorVisibilities.PROTECTED,<EOL><INDENT><INDENT><INDENT><INDENT>DescriptorVisibilities.INTERNAL -> false<EOL><INDENT><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(action: java.lang.Runnable) {", "body": "}"}
{"signature": "val resolvedHostSpecificMetadataConfiguration =", "body": "platformCompilationsByResolvedVariantName<EOL>"}
{"signature": "val bottomSourceSets =", "body": "allVisibleSourceSetNames.filter { it !in dependsOnSourceSets }.toSet()<EOL>"}
{"signature": "fun zero() {", "body": "}<EOL>private fun zero(a: Int) {}"}
{"signature": "val nonConstOne =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (testDisplayNameTag != null) {", "body": "<EOL><INDENT><INDENT>systemProperty(<STR_LIT>, testDisplayNameTag)<EOL><INDENT>}"}
{"signature": "if (value != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>fiveBits = fiveBits or <NUM_LIT>x2<NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val fooParams =", "body": "Host::foo.parameters<EOL>"}
{"signature": "val interopCEnumVar =", "body": "interopClass(<STR_LIT>)<EOL>"}
{"signature": "fun test(m : M) {", "body": "<EOL><INDENT><!VAL_REASSIGNMENT!>m.x<!> = <NUM_LIT><EOL><INDENT>m.y = <NUM_LIT><EOL>}"}
{"signature": "if (resultType != null && resultType !is WasmUnreachableType) {", "body": "<EOL><INDENT><INDENT><INDENT>body.buildDrop(location)<EOL><INDENT><INDENT>}"}
{"signature": "if (compilation.platformType == KotlinPlatformType.wasm) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.nodeArgs.addWasmExperimentalArguments()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fakeFunctionCall =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(<NUM_LIT>.arity).joinToString(prefix = <STR_LIT>, separator = <STR_LIT>, postfix = <STR_LIT>) { <STR_LIT> }<EOL>"}
{"signature": "val compileJavaTask =", "body": "project.tasks.withType<AbstractCompile>().named(javaSourceSet.compileJavaTaskName)<EOL>"}
{"signature": "val varAssignedInBlocks =", "body": "hashMapOf<JsName, HashSet<JsBlock>>()<EOL>"}
{"signature": "if (isDirectiveDefined(testDataFileText, <STR_LIT>)) {", "body": "<INDENT><INDENT><INDENT><INDENT>return true<INDENT><INDENT><INDENT>}"}
{"signature": "var newName =", "body": "name<EOL>"}
{"signature": "val fnan =", "body": "Float.NaN<EOL>"}
{"signature": "val receiverIsStable =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiver.isNullOrStable() &&<EOL>"}
{"signature": "fun declareFunction(subroutine: KtElement, pseudocode: Pseudocode) {", "body": "<EOL><INDENT><INDENT><INDENT>add(LocalFunctionDeclarationInstruction(subroutine, pseudocode, currentScope))<EOL><INDENT><INDENT>}"}
{"signature": "for (a in array) {", "body": "<EOL><INDENT><INDENT>a()<EOL><INDENT>}"}
{"signature": "val methodAnnotations =", "body": "arrayListOf<String>()<EOL>"}
{"signature": "fun abort(throwable: Throwable, count: Int) {", "body": "<EOL><INDENT><INDENT>statistics.error(count)<EOL><INDENT><INDENT>project.logger.quiet(<STR_LIT>, throwable)<EOL><INDENT>}"}
{"signature": "val m =", "body": "O.Gamma.FromGamma()<EOL>"}
{"signature": "fun interfaces() {", "body": "snapshotAPIAndCompare(testName.methodName) }"}
{"signature": "fun negated(opcode<NUM_LIT>: Int, opcode<NUM_LIT>: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>a[opcode<NUM_LIT>] = opcode<NUM_LIT><EOL><INDENT><INDENT><INDENT>a[opcode<NUM_LIT>] = opcode<NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun reportInOperation(context: CallCheckerContext, reportOn: PsiElement) {", "body": "<EOL><INDENT><INDENT>context.trace.report(ErrorsJs.WRONG_OPERATION_WITH_DYNAMIC.on(reportOn, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "val regexp =", "body": "<STR_LIT><EOL>"}
{"signature": "val reversedFilesReversedLookupsOrderRoot =", "body": "workingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (ok<NUM_LIT> != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (symbol !in accepted) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>pending += symbol<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result += symbol to substitution<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val overridingValue =", "body": "manuallyConfiguredProperties[it.key]<EOL>"}
{"signature": "if (typeParameter is FirConstructedClassTypeParameterRef) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val publicSetter =", "body": "FunctionModel(<EOL>"}
{"signature": "val irAnonymousObject =", "body": "classifierStorage.getCachedIrLocalClass(anonymousObject)?.apply { this.parent = irParent }<EOL>"}
{"signature": "val podName =", "body": "<STR_LIT><EOL>"}
{"signature": "val posPat =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val filesToBeReported =", "body": "absoluteFiles(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (inliningContext.isRoot) {", "body": "<EOL><INDENT><INDENT><INDENT>val remapValue = remapper.remap(parameters.argsSizeOnStack + <NUM_LIT>).value<EOL><INDENT><INDENT><INDENT>InternalFinallyBlockInliner.processInlineFunFinallyBlocks(<EOL><INDENT><INDENT><INDENT><INDENT>resultNode, lambdasFinallyBlocks, (remapValue as StackValue.Local).index,<EOL><INDENT><INDENT><INDENT><INDENT>languageVersionSettings.supportsFeature(LanguageFeature.ProperFinally)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val returnableBlockScope =", "body": "ReturnableBlockScope(value, resultSlot)<EOL>"}
{"signature": "val processedFunctions =", "body": "mutableSetOf<JsFunction>()<EOL>"}
{"signature": "val withResolvedExplicitReceiver =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (callResolutionMode == CallResolutionMode.PROVIDE_DELEGATE) functionCall else transformExplicitReceiverOf(functionCall)<EOL>"}
{"signature": "val myDemo =", "body": "MyDemo<NUM_LIT>()<EOL>"}
{"signature": "val rawChunk =", "body": "rawChunks[index]<EOL>"}
{"signature": "val applyBindIfNecessary =", "body": "false<EOL>"}
{"signature": "if ((klass as FirControlFlowGraphOwner).controlFlowGraphReference != null) {", "body": "<EOL><INDENT><INDENT><INDENT>graphs.pop()<EOL><INDENT><INDENT><INDENT>return null to null<EOL><INDENT><INDENT>}"}
{"signature": "fun visitQualifiedAccessExpression(qualifiedAccessExpression: FirQualifiedAccessExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitQualifiedAccessExpression(qualifiedAccessExpression)<EOL><INDENT>}"}
{"signature": "fun tripleToList() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), (Triple(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, null, <NUM_LIT>), (Triple(<NUM_LIT>, null, <NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <STR_LIT>), (Triple(<NUM_LIT>, <NUM_LIT>, <STR_LIT>)).toList())<EOL><INDENT>}"}
{"signature": "val jsCompileTask =", "body": "js.compilations.main.compileTaskProvider.get()<EOL>"}
{"signature": "val strategy =", "body": "RangesWritingStrategy.of(target)<EOL>"}
{"signature": "val STABILITY_GENERIC_CLOSE =", "body": "'>'<EOL>"}
{"signature": "val coll =", "body": "C() as Any<EOL>"}
{"signature": "for (var key in a) {", "body": "<EOL><INDENT><INDENT>result += <NUM_LIT>;<EOL><INDENT>}"}
{"signature": "var backingFieldIsAlreadyResolved =", "body": "false<EOL>"}
{"signature": "val actualManifestSanitizedText =", "body": "actualManifestSanitized.joinToString(separator = <STR_LIT>) { (key, value) -> <STR_LIT> }<EOL>"}
{"signature": "val debugger =", "body": "Debugger(this)<EOL>"}
{"signature": "var varProp =", "body": "<STR_LIT><EOL>"}
{"signature": "val allDescriptors =", "body": "analyzeAndGetAllDescriptors(brokenJar)<EOL>"}
{"signature": "val linksDefinitions =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "for (classProto in data.moduleData.optionalAnnotations) {", "body": "<EOL><INDENT><INDENT><INDENT>v.optionalAnnotationClasses.add(classProto.toKmClass(data.moduleData.nameResolver, false))<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinClassFinder =", "body": "ReflectKotlinClassFinder(classLoader)<EOL>"}
{"signature": "val processingNode =", "body": "prepareNode(node, finallyDeepShift)<EOL>"}
{"signature": "val specialBridgeMethods =", "body": "SpecialBridgeMethods(context)<EOL>"}
{"signature": "fun TestIdenticalPrivateVisibilityReverse() {", "body": "}<EOL><EOL>class TestIdenticalInternalVisibility {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) internal constructor()<EOL>}"}
{"signature": "val classStartOffset =", "body": "classOverride.parentAsClass.startOffset<EOL>"}
{"signature": "val BUILT_IN_TYPE_QUALIFIER_ANNOTATIONS =", "body": "setOf(<EOL>"}
{"signature": "fun visitErrorProperty(errorProperty: FirErrorProperty, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitErrorProperty(errorProperty)<EOL><INDENT>}"}
{"signature": "var paramOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun recordSourceParameter(call: IrCall, index: Int, scope: Scope.BlockScope) {", "body": "<EOL><INDENT><INDENT>sourceFixups.add(SourceInfoFixup(call, index, scope))<EOL><INDENT>}"}
{"signature": "val xLong =", "body": "<NUM_LIT>toLong()<EOL>"}
{"signature": "val sourcesUsage =", "body": "component.usages.find { it.name.contains(<STR_LIT>, true) }<EOL>"}
{"signature": "val compilerResultWithDCE =", "body": "compileWasm(<EOL>"}
{"signature": "val arraysCopyOfFunctions =", "body": "HashMap<IrClassifierSymbol, IrSimpleFunction>()<EOL>"}
{"signature": "val stringResult =", "body": "platformEncodeToString(source, startIndex, endIndex)<EOL>"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, newValue: T) {", "body": "<EOL><INDENT><INDENT>value = newValue<EOL><INDENT>}"}
{"signature": "val classpathFiles =", "body": "<EOL><INDENT><INDENT><INDENT>configuration.getList(CLIConfigurationKeys.CONTENT_ROOTS).filterIsInstance<JvmClasspathRoot>().map(JvmContentRoot::file)<EOL>"}
{"signature": "fun visitReturnExpression(returnExpression: FirReturnExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitReturnExpression(returnExpression)<EOL><INDENT>}"}
{"signature": "val enumValueOfIntrinsic =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val functionFromSupertype =", "body": "expectedType.supertypes().first { it.isFunctionType }.unwrap()<EOL>"}
{"signature": "if (ktLoopParameter != null && ktLoopDestructuringDeclaration == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val loopParameter = getOrFail(BindingContext.VALUE_PARAMETER, ktLoopParameter)<EOL><INDENT><INDENT><INDENT><INDENT>context.symbolTable.descriptorExtension.declareVariable(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ktLoopParameter.startOffsetSkippingComments, ktLoopParameter.endOffset, IrDeclarationOrigin.FOR_LOOP_VARIABLE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>loopParameter, loopParameter.type.toIrType(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irNextCall<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val diffEntryName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (sourcesToReprocess.isNotEmpty() || classNamesToReprocess.isNotEmpty()) {", "body": "<INDENT><INDENT><INDENT>// Invalidate state only if there are some files that will be reprocessed<INDENT><INDENT><INDENT>javaCache.invalidateDataForTypes(impactedTypes)<INDENT><INDENT><INDENT>aptCache.invalidateAggregating()<INDENT><INDENT><INDENT>// for isolating, invalidate both own types and classpath types<INDENT><INDENT><INDENT>aptCache.invalidateIsolatingForOriginTypes(impactedTypes + dirtyClasspathFqNames)<INDENT><INDENT>}"}
{"signature": "val intArrayGet =", "body": "intArray.functions.single { it.owner.name == OperatorNameConventions.GET }<EOL>"}
{"signature": "val test_jnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>j === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === j<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>j !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== j<!><EOL>"}
{"signature": "val equalityConstraints =", "body": "filter { it.kind == ConstraintKind.EQUALITY }.groupBy { it.typeHashCode }<EOL>"}
{"signature": "val unitClass =", "body": "builtIns.unit.toIrSymbol()<EOL>"}
{"signature": "fun testSimpleScriptWithArgs() {", "body": "<EOL><INDENT><INDENT>val out = checkRun(<STR_LIT>, listOf(<STR_LIT>))<EOL><INDENT><INDENT>Assert.assertEquals(<STR_LIT>, out)<EOL><INDENT>}"}
{"signature": "if (forceNonIncrementalCompilation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>options.forceNonIncrementalMode()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testGenericJavaCtor<NUM_LIT>(x: Any) {", "body": "<EOL><INDENT>x as (String) -> Int<EOL><INDENT>G(x)<EOL>}"}
{"signature": "val kctor<NUM_LIT> =", "body": "jctor<NUM_LIT>kotlinFunction ?: throw AssertionError(<STR_LIT>)<EOL>"}
{"signature": "val stableSortNote =", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL>"}
{"signature": "fun ensureCapacity() {", "body": "<INDENT><INDENT>ArrayList<String>().ensureCapacity(<NUM_LIT>) // negative argument is ignored<INDENT>}"}
{"signature": "if (test.y != null) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "for (person in people) {", "body": "<EOL><INDENT><INDENT>person.greet()<EOL><INDENT>}"}
{"signature": "if (target.isVersionChanged(this, compilerArguments)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinBuilder.LOG.info(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testB(foo: B, bar: Any) {", "body": "<EOL><INDENT>if (foo == bar) bar.<!UNRESOLVED_REFERENCE!>b<!>()<EOL><INDENT>if (bar == foo) bar.<!UNRESOLVED_REFERENCE!>b<!>()<EOL>}"}
{"signature": "fun foo(bar: Boolean) {", "body": "}<EOL><INDENT>fun foo(bar: Any?) {}"}
{"signature": "var previousGeneratedColumn =", "body": "<NUM_LIT><EOL>"}
{"signature": "val highIndex =", "body": "<NUM_LIT> - lowIndex<EOL>"}
{"signature": "fun processGivenForkPointBranchConstraints(<EOL><INDENT><INDENT>c: Context,<EOL><INDENT><INDENT>constraintSet: Collection<Pair<TypeVariableMarker, Constraint>>,<EOL><INDENT><INDENT>position: IncorporationConstraintPosition<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>processGivenConstraints(<EOL><INDENT><INDENT><INDENT>c,<EOL><INDENT><INDENT><INDENT>TypeCheckerStateForConstraintInjector(c, position),<EOL><INDENT><INDENT><INDENT>constraintSet,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val DELEGATE_SUPER_FIELD_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "package sets are computed and cached separately or with [computePackageNames].", "body": "<EOL>"}
{"signature": "val resolveScope =", "body": "element.resolveScope<EOL>"}
{"signature": "val someStableReleasedVersion =", "body": "LanguageVersion.entries.first { it.isStable && it >= LanguageVersion.FIRST_NON_DEPRECATED }<EOL>"}
{"signature": "val sizeGetterSymbol =", "body": "arraySymbol.getPropertyGetter(<STR_LIT>)!!<EOL>"}
{"signature": "if (r.key == key) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val majorIdeaVersion =", "body": "readSystemPropertyValue(<STR_LIT>)<EOL>"}
{"signature": "val processedDependencies =", "body": "hashSetOf<ResolvedDependencyResult>()<EOL>"}
{"signature": "val getterType =", "body": "context.buildGetterType(type)<EOL>"}
{"signature": "val DECLARATION_SIGNATURE =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val clientSocket =", "body": "serverSocket.accept()<EOL>"}
{"signature": "if (old.hasExtension(JvmProtoBuf.methodSignature)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JvmProtoBuf.methodSignature), new.getExtension(JvmProtoBuf.methodSignature))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (lightClass != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>handleClass(lightClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when(e) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is UnsupportedOperationException,<EOL><INDENT><INDENT><INDENT><INDENT>is IllegalArgumentException -> null<EOL><INDENT><INDENT><INDENT><INDENT>else -> throw e<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeArgumentType =", "body": "(typeArgument as? ConeKotlinType) ?: (typeArgument as? ConeKotlinTypeProjection)?.type<EOL>"}
{"signature": "val sha<NUM_LIT> =", "body": "MessageDigest.getInstance(<STR_LIT>)<EOL>"}
{"signature": "if (!kindMismatchError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>kindMismatchError = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(VAR_OVERRIDDEN_BY_VAL.on(member, declared as PropertyDescriptor, overridden as PropertyDescriptor))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var hasMarkedDirty =", "body": "false<EOL>"}
{"signature": "val candidateHasPrimitiveReturnType =", "body": "candidate.hasPrimitiveReturnTypeInJvm(candidateType)<EOL>"}
{"signature": "val classesDirs =", "body": "compilation.output.classesDirs<EOL>"}
{"signature": "if (DescriptorUtils.isEnumClass(classDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateAdditionalMembersForEnumClass(irClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (name != null && name.imported) {", "body": "<EOL><INDENT><INDENT><INDENT>usedImports += name<EOL><INDENT><INDENT>}"}
{"signature": "val wholeBytesInLastGroup =", "body": "wholeElementsPerSet(numberOfChars, charsPerByte, byteSeparatorLength)<EOL>"}
{"signature": "val testsMap =", "body": "mutableMapOf<String, JsStatement>()<EOL>"}
{"signature": "val ARM<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val throwJsException =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.typeAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.typeAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun visitElement(element: FirElement, data: FirStatement?) {", "body": "<EOL><INDENT><INDENT>element.acceptChildren(this, data)<EOL><INDENT>}"}
{"signature": "val STABLE_EQUALS_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "if (J.staticNonFinalJava is String) {", "body": "<EOL><INDENT><INDENT><!SMARTCAST_IMPOSSIBLE!>J.staticNonFinalJava<!>.length<EOL><INDENT><INDENT>(J.staticFinalJava as String).length<EOL><INDENT>}"}
{"signature": "val mjsFiles =", "body": "mutableListOf<AdditionalFile>()<EOL>"}
{"signature": "val unboxedAsCtor =", "body": "asResultCtor.typed()<EOL>"}
{"signature": "fun publicImplementation() {", "body": "<EOL><INDENT><INDENT><INDENT>implementation.isPublic = true<EOL><INDENT><INDENT>}"}
{"signature": "val toStringCall =", "body": "state.createToStringIrCall()<EOL>"}
{"signature": "val provideDelegateDescriptor =", "body": "provideDelegateResults.resultingDescriptor<EOL>"}
{"signature": "val collectClassIdentifiersLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "val singleOperation =", "body": "operationsOnTypeA.singleOrNull()<EOL>"}
{"signature": "val nullableViewType =", "body": "createClass(FqName(AndroidConst.VIEW_FQNAME)).defaultType.makeNullable()<EOL>"}
{"signature": "val runnerMarkerKClass =", "body": "RunnerWithTargetBackendForTestGeneratorMarker::class.java<EOL>"}
{"signature": "var isOverriddenProperty =", "body": "false<EOL>"}
{"signature": "for (irBranch in branches) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irBranch.condition = irBranch.condition.cast(irBuiltIns.booleanType)<EOL><INDENT><INDENT><INDENT><INDENT>irBranch.result = irBranch.result.cast(type)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val appSubproject =", "body": "subProject(<STR_LIT>)<EOL>"}
{"signature": "fun visitField(declaration: IrField) {", "body": "<EOL><INDENT><INDENT>declaration.type = typeRemapper.remapType(declaration.type)<EOL><INDENT><INDENT>super.visitField(declaration)<EOL><INDENT>}"}
{"signature": "import j.", "body": "Base<EOL>"}
{"signature": "val actualClassName =", "body": "symbol.getContainingJvmClassName()<EOL>"}
{"signature": "fun resetBuilderDebugLocation() {", "body": "<EOL><INDENT><INDENT><INDENT>if (!context.shouldContainLocationDebugInfo()) return<EOL><INDENT><INDENT><INDENT>LLVMBuilderResetDebugLocation(builder)<EOL><INDENT><INDENT>}"}
{"signature": "fun exception(e: Throwable) {", "body": "<EOL><INDENT><INDENT>errorWriter.println(<STR_LIT>)<EOL><INDENT><INDENT>e.printStackTrace(errorWriter)<EOL><INDENT><INDENT>errorWriter.flush()<EOL><INDENT>}"}
{"signature": "if (isVararg) {", "body": "<EOL><INDENT><INDENT>this.transformTypeToArrayType(session)<EOL><INDENT>}"}
{"signature": "var av =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (setOK()) {", "body": "<EOL><INDENT>}"}
{"signature": "val referenceExpected =", "body": "readLinesReference(text, charset)<EOL>"}
{"signature": "if (el.needPureAbstractElement) {", "body": "<EOL><INDENT><INDENT><INDENT>el.otherParents.add(pureAbstractElement)<EOL><INDENT><INDENT>}"}
{"signature": "val diagnosticHeaderEnd =", "body": "fromText.indexOf(<STR_LIT>, startIndex = diagnosticStartIndex)<EOL>"}
{"signature": "val rightFalse =", "body": "right.filter { it.simpleEffect.isReturns { value.isFalse } }<EOL>"}
{"signature": "val fromSourceSets =", "body": "multiplatformExtension.awaitSourceSets()<EOL>"}
{"signature": "if (!strongSkippingEnabled && isUsed && isUnstable && isRequired) {", "body": "<INDENT><INDENT><INDENT><INDENT>// if it is a used + unstable parameter with no default expression and we are<INDENT><INDENT><INDENT><INDENT>// not in strong skipping mode, the fn will _never_ skip<INDENT><INDENT><INDENT><INDENT>mightSkip = false<INDENT><INDENT><INDENT>}"}
{"signature": "val visibleVariables =", "body": "mutableListOf<IrValueDeclaration>()<EOL>"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.constructorAnnotation) != new.getExtensionCount(JsProtoBuf.constructorAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(a: A<Int>) {", "body": "<EOL>}"}
{"signature": "var isOptimisticallyCommonizedType =", "body": "false<EOL>"}
{"signature": "val SERIAL_DESCRIPTOR_FOR_INLINE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (isRange) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irInt(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val acc =", "body": "<STR_LIT><EOL>"}
{"signature": "val oldLibs =", "body": "klibDiff.missingLibs + klibDiff.remainingLibs.map { it.old }<EOL>"}
{"signature": "var addParam =", "body": "<STR_LIT><EOL>"}
{"signature": "val nonAndroidDslOptions =", "body": "getNonAndroidDslApOptions(ext, project, kotlinSourceDir, null, null)<EOL>"}
{"signature": "if (this[index] == '\\r') {", "body": "<EOL><INDENT><INDENT>if (index + <NUM_LIT> < endIndex && this[index + <NUM_LIT>] == '\\n') index + <NUM_LIT> else index + <NUM_LIT><EOL><INDENT>}"}
{"signature": "import { test } from <STR_LIT><EOL>.", "body": ""}
{"signature": "if (classId !in data.state.classifierMap) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.state.classifierMap[classId] = classLike<EOL><INDENT><INDENT><INDENT><INDENT>data.state.classifierContainerFileMap[classId] = data.file<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TARGET_ARCHITECTURE =", "body": "<STR_LIT><EOL>"}
{"signature": "val WasmExport =", "body": "<STR_LIT>.wasmId()<EOL>"}
{"signature": "val lhsJsType =", "body": "lhs.type.getPrimitiveType()<EOL>"}
{"signature": "for (receiver in declaration.contextReceivers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkUpperBoundViolated(receiver.typeRef, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val diagnosticHolder =", "body": "KotlinDiagnosticsHolder.SimpleHolder()<EOL>"}
{"signature": "val unwrappedPointeeType =", "body": "pointeeType.unwrapTypedefs()<EOL>"}
{"signature": "if (c >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>skip = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (o is String) {", "body": "<EOL><INDENT><INDENT>return listOf(o)<EOL><INDENT>}"}
{"signature": "if (element.firstChild == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>actualTextBuilder.append(element.text)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun who(sender: String) {", "body": "<EOL><INDENT><INDENT>prevSender = sender<EOL><INDENT>}"}
{"signature": "val text<NUM_LIT> =", "body": "url.readText(charset(<STR_LIT>))<EOL>"}
{"signature": "val exported =", "body": "if (entryPoint != null)<EOL>"}
{"signature": "import llvm.", "body": "*<EOL>"}
{"signature": "val nodeSize =", "body": "node.leavesCount<EOL>"}
{"signature": "val nodeList =", "body": "(ktFile.node as FileElement).stubbedSpine.spineNodes<EOL>"}
{"signature": "var manifestFound =", "body": "false<EOL>"}
{"signature": "val kotlinType =", "body": "declaration.getKotlinType() ?: return@lazyPub PsiType.NULL<EOL>"}
{"signature": "val descs =", "body": "Holder.serializer().descriptor.elementDescriptors.toList()<EOL>"}
{"signature": "if (symbol.owner.parentAsClass.hasAnnotationSafe(ComposeFqNames.Immutable)) {", "body": "<EOL><INDENT><INDENT><INDENT>return areAllArgumentsStatic()<EOL><INDENT><INDENT>}"}
{"signature": "if (approxRes.isZero()) {", "body": "<EOL><INDENT><INDENT><INDENT>approxRes = ONE<EOL><INDENT><INDENT>}"}
{"signature": "if (this is UnsignedProgressionType) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// The loop variable is signed but bounds are signed for unsigned progressions.<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it.asSigned()<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (resolvedClassifier != null && resolvedClassifier is CirTypeAlias) {", "body": "<EOL><INDENT><INDENT><INDENT>return backwardsSubstitute(sourceType, destinationClassifierId, resolvedClassifier)<EOL><INDENT><INDENT>}"}
{"signature": "val edges =", "body": "edgesMap[instruction] ?: continue<EOL>"}
{"signature": "if (fd.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT>AsmUtil.pop(v, callable.getValueParameters().last().asmType)<EOL><INDENT><INDENT>}"}
{"signature": "package frontend<EOL>.", "body": ""}
{"signature": "if (expectedFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>val resultDump = dumper.generateResultingDump()<EOL><INDENT><INDENT><INDENT>assertions.assertEqualsToFile(expectedFile, resultDump)<EOL><INDENT><INDENT>}"}
{"signature": "val lightElementClassQualifier =", "body": "directives.singleValue(Directives.PSI)<EOL>"}
{"signature": "if (analysisContext.builtIns.areSameArrayTypeIgnoringProjections(containingArrayType, constantType)) {", "body": "<INDENT><INDENT>// If an element in the array has the same type as the containing array, it's a spread component that needs<INDENT><INDENT>// to be expanded here. (It should have the array element type instead.)<INDENT><INDENT>(constantValue as ArrayValue).value.expandArrayAnnotationValue(containingArrayType, analysisContext)<INDENT>}"}
{"signature": "val expectEffectiveModality =", "body": "effectiveModality(expectModality, expectContainingClassModality)<EOL>"}
{"signature": "fun renderTypeVariableType(typeConstructor: NewTypeVariableConstructor, printer: PrettyPrinter) {", "body": "<EOL><INDENT><INDENT>val name = typeConstructor.originalTypeParameter?.name ?: SpecialNames.NO_NAME_PROVIDED<EOL><INDENT><INDENT>printer.append(<STR_LIT>).append(name.asString()).append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var noParamAssertions =", "body": "false<EOL>"}
{"signature": "val irModule =", "body": "compileToIr(files)<EOL>"}
{"signature": "val objectValue =", "body": "companionObjectValue[objectName] ?: throw InternalError(<STR_LIT>)<EOL>"}
{"signature": "fun measureTime(flag: Boolean) {", "body": "<EOL><INDENT><INDENT>measureTime = flag<EOL><INDENT>}"}
{"signature": "val reducedArg =", "body": "not.arg.accept(this) ?: return null<EOL>"}
{"signature": "for (i in ((Long.MAX_VALUE - <NUM_LIT>) until Long.MIN_VALUE).reversed()) {", "body": "return <STR_LIT> }"}
{"signature": "var functionReferenceCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (exponent >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>processNormalNumber()<EOL><INDENT><INDENT>}"}
{"signature": "val inputSnapshotsCacheDir =", "body": "File(cachesRootDir, <STR_LIT>).apply { mkdirs() }<EOL>"}
{"signature": "for (name in getClassifierNames()) {", "body": "<EOL><INDENT><INDENT>processClassifiersByName(name, processor)<EOL><INDENT>}"}
{"signature": "val atLeastVersion =", "body": "MavenComparableVersion(<STR_LIT>)<EOL>"}
{"signature": "val konanCacheKind =", "body": "project.getKonanCacheKind(konanTarget)<EOL>"}
{"signature": "val chunk =", "body": "chunkRef.dereference()<EOL>"}
{"signature": "val paramSize =", "body": "paramOffset<EOL>"}
{"signature": "val cPointedName =", "body": "<STR_LIT><EOL>"}
{"signature": "val transformedCallee =", "body": "resolveQualifiedAccessAndSelectCandidate(<EOL>"}
{"signature": "val overriddenProperties =", "body": "containingClassScope.getDirectOverriddenProperties(propertySymbol)<EOL>"}
{"signature": "if (!isContainingDeclarationTopLevel) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirWasmErrors.JSCODE_WRONG_CONTEXT, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val typeParameterInfo =", "body": "TypeParameterInfo(<EOL>"}
{"signature": "var suspended =", "body": "false<EOL>"}
{"signature": "package ${packageFqName.", "body": "asString()}\")<EOL>"}
{"signature": "else if (nestedClassifier is FirRegularClassSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.addNestedClassName(getSimpleNameIndex(nestedClassifier.name))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor.isSuspendFunctionNotSuspensionView()) {", "body": "<EOL><INDENT><INDENT><INDENT>return mapReturnType(getOrCreateJvmSuspendFunctionView(descriptor as SimpleFunctionDescriptor), sw)<EOL><INDENT><INDENT>}"}
{"signature": "fun bar(vararg x: Any?) {", "body": "<EOL><INDENT>println(x)<EOL>}"}
{"signature": "val irBuilder =", "body": "context.createIrBuilder(symbol, SYNTHETIC_OFFSET, SYNTHETIC_OFFSET)<EOL>"}
{"signature": "for (i in labeledProperties.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>labels[i + <NUM_LIT>] = Label()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (deparenthesizedElement is KtUnaryExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>val token = deparenthesizedElement.operationToken<EOL><INDENT><INDENT><INDENT>if (token == KtTokens.PLUS || token == KtTokens.MINUS) return<EOL><INDENT><INDENT>}"}
{"signature": "package m<EOL>.", "body": ""}
{"signature": "val importingScopes =", "body": "getScopeContextForPosition(originalFile = file, positionInFakeFile = file)<EOL>"}
{"signature": "val startCounts =", "body": "startGCData[it.name]<EOL>"}
{"signature": "fun testDecode(symbols: String, bytes: ByteArray) {", "body": "<EOL><INDENT><INDENT><INDENT>testDecode(Base<NUM_LIT>, symbols, bytes)<EOL><INDENT><INDENT><INDENT>testDecode(Base<NUM_LIT>.UrlSafe, symbols, bytes)<EOL><INDENT><INDENT><INDENT>testDecode(Base<NUM_LIT>.Mime, symbols, bytes)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in ((logged(<STR_LIT>, <NUM_LIT>) downTo logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)).reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * 1<NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "fun mapPutAll() {", "body": "<EOL><INDENT><INDENT>val map = createTestMap()<EOL><INDENT><INDENT>val newMap = emptyMutableMap()<EOL><INDENT><INDENT>newMap.putAll(map)<EOL><INDENT><INDENT>assertEquals(KEYS.size, newMap.size)<EOL><INDENT>}"}
{"signature": "val ktOperator =", "body": "expression.operationReference<EOL>"}
{"signature": "val delegatedSelfTypeRef =", "body": "classWrapper.delegatedSelfTypeRef<EOL>"}
{"signature": "val compiledProjectsCache =", "body": "mutableMapOf<GlobalCompiledProjectsCacheKey, Pair<MutableSet<String>, Path>>()<EOL>"}
{"signature": "val NULL_OBJECT =", "body": "Any()<EOL>"}
{"signature": "val baseFirClass =", "body": "ktClass.toFirSymbol(classId, baseKtModule)?.fir as? FirClass ?: return emptyList()<EOL>"}
{"signature": "fun testUnitResult() {", "body": "<EOL><INDENT><INDENT>val resVal = evalScriptWithResult(<STR_LIT>)<EOL><INDENT><INDENT>Assert.assertTrue(resVal is ResultValue.Unit)<EOL><INDENT>}"}
{"signature": "if (c<NUM_LIT> != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val appendedEntries =", "body": "LinkedHashMap<KEY, VALUE>()<EOL>"}
{"signature": "val referencingSymbol =", "body": "wrapInDelegatedSymbol(rawSymbol)<EOL>"}
{"signature": "val bitMaskSlotsCount =", "body": "serializableProperties.bitMaskSlotCount()<EOL>"}
{"signature": "val ALL =", "body": "BINARY + UNARY<EOL>"}
{"signature": "val receiverAnnotationProperty =", "body": "<NUM_LIT><EOL>"}
{"signature": "for ((index, cell) in row.cells.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(cell.padText(colSize[index]))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(VLINE)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val klib =", "body": "it.value.klib as? KotlinLibrary ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (true) <NUM_LIT>.<NUM_LIT> else <!BREAK_OR_CONTINUE_OUTSIDE_A_LOOP!>continue@l<!>) {", "body": "}"}
{"signature": "if (declaredLater.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>member.accept(visitor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val unicodeDataUrl =", "body": "<STR_LIT>"}
{"signature": "if (hasExtension(JsProtoBuf.functionContainingFileId)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JsProtoBuf.functionContainingFileId)<EOL><INDENT>}"}
{"signature": "val sortedDiagnosticDescriptors =", "body": "getActualSortedDiagnosticDescriptors(actual)<EOL>"}
{"signature": "val extReg =", "body": "ExtensionRegistryLite.newInstance()<EOL>"}
{"signature": "fun appendArrayTypeDeclaration(type: WasmArrayDeclaration) {", "body": "<EOL><INDENT><INDENT>b.writeVarInt<NUM_LIT>(WasmBinary.ARRAY_TYPE)<EOL><INDENT><INDENT>appendFiledType(type.field)<EOL><INDENT>}"}
{"signature": "val missingMandatoryOptions =", "body": "optionTypes.filterKeys { it !in options }.filterValues { it.mandatory }.keys<EOL>"}
{"signature": "if (a !is ClassWithSixTypeParameters<*, *, *, *, *, *>?) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val NUMBER_OF_CHAR_IN_COMPLETION_NAME =", "body": "<NUM_LIT><EOL>"}
{"signature": "else if (e is RemoteException) {", "body": "<EOL><INDENT><INDENT>throw DaemonCrashedException(e)<EOL><INDENT>}"}
{"signature": "val CHANGED_PARAMETER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val workDirPath =", "body": "FileUtil.toSystemIndependentName(workDir.absolutePath)<EOL>"}
{"signature": "var VIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val multiNodesOrder =", "body": "mutableListOf<DirectedGraphMultiNode<K>>()<EOL>"}
{"signature": "for ((signature, declarations) in declarationsBySignature) {", "body": "<EOL><INDENT><INDENT><INDENT>if (declarations.size <= <NUM_LIT>) continue<EOL><INDENT><INDENT><INDENT>reportSignatureConflict(signature, declarations, diagnosticReporter)<EOL><INDENT><INDENT>}"}
{"signature": "val partialLinkageConfig =", "body": "configuration.partialLinkageConfig<EOL>"}
{"signature": "if (shouldCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isAnythingGenerated = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val retentionPolicyEnum =", "body": "buildClass(JvmAnnotationNames.RETENTION_POLICY_ENUM, classKind = ClassKind.ENUM_CLASS)<EOL>"}
{"signature": "for (annotationDescriptor in getSuppressionAnnotations(annotated)) {", "body": "<EOL><INDENT><INDENT><INDENT>processAnnotation(builder, annotationDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val publicPackagePrefixes =", "body": "publicPackages.map { it.replace('.', '/') + '/' }<EOL>"}
{"signature": "fun testApiVersionChange(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testMutations(<EOL><INDENT><INDENT><INDENT>gradleVersion,<EOL><INDENT><INDENT><INDENT>propertyMutationChain(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val xCastExplicitType =", "body": "Test().findViewById<X>(<NUM_LIT>) as X<EOL>"}
{"signature": "else if (containingClassSymbol.classKind == ClassKind.INTERFACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.RESERVED_MEMBER_FROM_INTERFACE_INSIDE_VALUE_CLASS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>containingClassSymbol.name.asString(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reservedName,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (ErrorUtils.containsUninferredTypeVariable(expectedType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>matchStatus = ArgumentMatchStatus.MATCH_MODULO_UNINFERRED_TYPES<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (functionSymbol is KtFunctionSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createDelegateMethod(functionSymbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val withInternalInvoke =", "body": "WithInternalInvoke()<EOL>"}
{"signature": "val findString =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in logged(<STR_LIT>, <NUM_LIT>) until logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT>0 + i<EOL><INDENT>}"}
{"signature": "fun runTest() {", "body": "<EOL><INDENT><INDENT>justSomeSuspendFunction()<EOL><INDENT><INDENT>result += super.getO() + super.getK()<EOL><INDENT>}"}
{"signature": "if (newNameForOrigin == kotlinOrigin?.name) {", "body": "<EOL><INDENT><INDENT><INDENT>jvmNameAnnotation?.delete()<EOL><INDENT><INDENT><INDENT>return this<EOL><INDENT><INDENT>}"}
{"signature": "fun doTest<NUM_LIT>() {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, bar<NUM_LIT>())<EOL>}"}
{"signature": "val buildersList =", "body": "mutableListOf<StringBuilder>()<EOL>"}
{"signature": "val kotlinInternalPackageFragment =", "body": "createEmptyExternalPackageFragment(builtInsModule, kotlinInternalPackage)<EOL>"}
{"signature": "fun useFloatAsAny(a: Any) {", "body": "<EOL><INDENT>a as Float<EOL>}"}
{"signature": "val offsetOfCentralDirectory =", "body": "getLong(endOfCentralDirectoryOffset + <NUM_LIT>)<EOL>"}
{"signature": "for (j in <NUM_LIT>u .. continue) {", "body": "}"}
{"signature": "if (cache == null) {", "body": "<EOL><INDENT><INDENT><INDENT>cache = buildCache(recordComponent)<EOL><INDENT><INDENT><INDENT>this._cache = cache<EOL><INDENT><INDENT>}"}
{"signature": "if (filteredArgs.any()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val helpLine = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>log.info(helpLine)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(helpLine)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT> + filteredArgs.joinToString(<STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var skip =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (node.tokenType == KtNodeTypes.FUN) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return DECLARATION_SIGNATURE.mark(node, startOffset, endOffset, tree)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isProjectIsolationRequested =", "body": "project.isProjectIsolationRequested<EOL>"}
{"signature": "if (it === this) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (it.isLast) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val targetFunction =", "body": "JsNameRef(targetName, targetPrototype)<EOL>"}
{"signature": "fun visitWhenBranchResultEnterNode(node: WhenBranchResultEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitWhenBranchResultEnterNode(node)<EOL><INDENT>}"}
{"signature": "val allAssociatedCompilationsImpl =", "body": "MutableObservableSetImpl<KotlinCompilation<*>>()<EOL>"}
{"signature": "when (lastStatement) {", "body": "<EOL><INDENT><INDENT><INDENT>is JsReturn -> lastStatement.expression<EOL><INDENT><INDENT><INDENT>is JsExpressionStatement -> lastStatement.expression<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val baseClassSuite =", "body": "symbols.baseClassSuite.owner<EOL>"}
{"signature": "val MANGLE_FUN_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "when (curChar) {", "body": "<EOL><INDENT><INDENT>in '<NUM_LIT>'..'<NUM_LIT>' -> curChar.code - '<NUM_LIT>'.code<EOL><INDENT><INDENT>in 'a'..'f' -> curChar.code - 'a'.code + 1<NUM_LIT><EOL><INDENT><INDENT>in 'A'..'F' -> curChar.code - 'A'.code + 1<NUM_LIT><EOL><INDENT><INDENT>else -> fail(curPos, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val packageSegmentAsName =", "body": "PackageName(listOf(packageSegment))<EOL>"}
{"signature": "val externalLambdaArguments =", "body": "oldCall.functionLiteralArguments<EOL>"}
{"signature": "fun testSrcAndTests() {", "body": "<EOL><INDENT>srcAndTests()<EOL>}"}
{"signature": "val pathToRootOutputDir =", "body": "allDirectives[JsEnvironmentConfigurationDirectives.PATH_TO_ROOT_OUTPUT_DIR].first()<EOL>"}
{"signature": "val currentHashesToAnalyze =", "body": "getHashesToAnalyze(currentToLoad)<EOL>"}
{"signature": "fun prepareForAnalyze(<EOL><INDENT><INDENT>psiFile: KtFile,<EOL><INDENT><INDENT>priority: Int<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>topDownAnalysisContext.scripts.clear()<EOL><INDENT><INDENT>trace.clearDiagnostics()<EOL><EOL><INDENT><INDENT>val script = psiFile.script!!<EOL><EOL><INDENT><INDENT>script.putUserData(ScriptPriorities.PRIORITY_KEY, priority)<EOL><INDENT>}"}
{"signature": "var text<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testFiltersNegative() {", "body": "<EOL><INDENT><INDENT>doTestFilters(<EOL><INDENT><INDENT><INDENT>Filter(<EOL><INDENT><INDENT><INDENT><INDENT>listOf(), listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (context.platform.isJvm() && irClass.isSerialInfoAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>serialInfoJvmGenerator.generateImplementationFor(irClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val globalSharedObjects =", "body": "mutableSetOf<LLVMValueRef>()<EOL>"}
{"signature": "if (isSelf) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irScript.thisReceiver = irReceiver<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irScript.baseClass = irReceiver.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!function.hasDeclaredReturnType() && !function.hasBlockBody()) {", "body": "<EOL><INDENT><INDENT><INDENT>ForceResolveUtil.forceResolveAllContents(functionDescriptor.returnType)<EOL><INDENT><INDENT>}"}
{"signature": "val upperParameters =", "body": "upperBound.constructor.parameters<EOL>"}
{"signature": "val jvmResultsConverter =", "body": "Fir<NUM_LIT>IrJvmResultsConverter(testServices)<EOL>"}
{"signature": "val variableCache =", "body": "mutableMapOf<FirVariable, IrVariableSymbol>()<EOL>"}
{"signature": "if (arguments.includes.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(ERROR, <STR_LIT>, null)<EOL><INDENT><INDENT><INDENT><INDENT>return COMPILATION_ERROR<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (element is FirQualifiedAccessExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>visitQualifiedAccess(node, element, data)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (context.configuration.generateBodies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>bodyGenerator.generateExpressionBody(defaultValue)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var isGetter =", "body": "true<EOL>"}
{"signature": "fun jumpIfLess(v: InstructionAdapter, label: Label) {", "body": "<EOL><INDENT><INDENT>compareAndJump(v, label, Opcodes.IFLT)<EOL><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.multiFieldValueClassUnderlyingTypeCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getMultiFieldValueClassUnderlyingType(i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "var theCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val runtimeCp =", "body": "System.getProperty(<STR_LIT>)!!.split(File.pathSeparator).map(::File) + outJar<EOL>"}
{"signature": "val receiverWithParameter =", "body": "{ Int.<!ILLEGAL_SELECTOR!>(<!UNRESOLVED_REFERENCE!>a<!>)<!> <!SYNTAX!>-><!> }<EOL>"}
{"signature": "if (keys[i] >= keys[i + <NUM_LIT>]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val boolArray =", "body": "booleanArrayOf(true)<EOL>"}
{"signature": "var fromParent =", "body": "false<EOL>"}
{"signature": "val newModifierOrder =", "body": "MODIFIERS_ORDER.indexOf(modifier)<EOL>"}
{"signature": "if (descriptor.kind == CallableMemberDescriptor.Kind.SYNTHESIZED) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val gapStart =", "body": "markNewLinkedLabel()<EOL>"}
{"signature": "var computedNext =", "body": "false<EOL>"}
{"signature": "val boolVal =", "body": "A.boolVal<EOL>"}
{"signature": "val deprecationAnnotationSimpleNames =", "body": "analysisSession.useSiteSession.annotationPlatformSupport.deprecationAnnotationsSimpleNames<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JvmProtoBuf.classLocalVariable) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(JvmProtoBuf.classLocalVariable, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val unitConversionData =", "body": "performConversionBeforeSubtyping(<EOL>"}
{"signature": "import MyObject.", "body": "bar<EOL>"}
{"signature": "if ((type as? KtClassType)?.expandedClassSymbol?.classKind?.isClass != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (cur != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package outer<EOL>.", "body": ""}
{"signature": "fun test(lib: Lib) {", "body": "<EOL><INDENT>lib.t<caret><caret_onAirContext>est(null)<EOL>}"}
{"signature": "val ratio =", "body": "current.calcRatio(previous)<EOL>"}
{"signature": "fun visitLoopJump(loopJump: FirLoopJump, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLoopJump(loopJump)<EOL><INDENT>}"}
{"signature": "fun builder<NUM_LIT>(coroutine c: Controller.(Long, String) -> Continuation<Unit>) {", "body": "//<INDENT>val controller<NUM_LIT> = Controller()//<INDENT>val controller<NUM_LIT> = Controller()////<INDENT>c(controller<NUM_LIT>, <NUM_LIT><NUM_LIT>34567890<NUM_LIT><NUM_LIT>3456789L, <STR_LIT>).resume(Unit)//<INDENT>c(controller<NUM_LIT>, <NUM_LIT><NUM_LIT>34567890<NUM_LIT><NUM_LIT>3456789L, <STR_LIT>).resume(Unit)////<INDENT>runControllers(controller<NUM_LIT>, controller<NUM_LIT>)//}"}
{"signature": "fun visitWhenConditionIsPattern(condition: KtWhenConditionIsPattern) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>mark(condition)<EOL><INDENT><INDENT><INDENT><INDENT>createNonSyntheticValue(condition, MagicKind.IS, getSubjectExpression(condition))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var hasGetter =", "body": "false<EOL>"}
{"signature": "val psiFactory =", "body": "KtPsiFactory(resolutionFacade.project)<EOL>"}
{"signature": "if (this is IrConstructor && parentAsClass.kind === ClassKind.ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT>return AsmUtil.NO_FLAG_PACKAGE_PRIVATE<EOL><INDENT>}"}
{"signature": "val establishedMaximum =", "body": "usedMemory.take(buildCount / <NUM_LIT>).maxOrNull()!!<EOL>"}
{"signature": "val buildDirProvider =", "body": "taskProvider.buildDir.get().asFile<EOL>"}
{"signature": "val enabledMut =", "body": "initiallyEnabled.toMutableSet()<EOL>"}
{"signature": "fun collectOverridesTree(irFunction: IrSimpleFunction, visited: MutableSet<IrFunction>) {", "body": "<EOL><INDENT><INDENT>if (!visited.add(irFunction)) return<EOL><INDENT><INDENT>collectOverridesOf(irFunction, visited)<EOL><INDENT>}"}
{"signature": "val publishedArchive =", "body": "projectPath.resolve(<EOL>"}
{"signature": "if (!descriptor.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(Errors.INAPPLICABLE_LATEINIT_MODIFIER.on(ktDeclaration, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (isFullRebuild) {", "body": "<EOL><INDENT><INDENT><INDENT>RuntimeProcType.NON_INCREMENTAL<EOL><INDENT><INDENT>}"}
{"signature": "val publicVal =", "body": "<STR_LIT><EOL>"}
{"signature": "fun decomposeIntArray() {", "body": "<EOL><INDENT><INDENT>val (a, b, c, d, e) = intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(a, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(b, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(c, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(d, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(e, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val incrementalMultiplatform =", "body": "PropertiesProvider(project).incrementalMultiplatform ?: true<EOL>"}
{"signature": "if (member.name !in resolvedUnionTypes && member.name !in failedToResolveUnionTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>processUnionType(member)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun TestMultipleDifferentlyNamedValueParametersA(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>B: UserKlassB) {", "body": "}<EOL><EOL>class TestMultipleDifferentlyNamedValueParametersAReverse {<EOL><INDENT>constructor(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>A: UserKlassB)<EOL>}"}
{"signature": "fun enterCallable() {", "body": "<EOL><INDENT><INDENT>cacheStack += Fir<NUM_LIT>IrScopeCache()<EOL><INDENT>}"}
{"signature": "val androidGradlePluginVersion =", "body": "AndroidGradlePluginVersion(<EOL>"}
{"signature": "val kotlinDerived =", "body": "KotlinDerived()<EOL>"}
{"signature": "if (element is KtNamedDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return PositioningStrategies.DECLARATION_NAME.mark(element)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val minVideoFrames =", "body": "<NUM_LIT><EOL>"}
{"signature": "val cExtFun =", "body": "C()::extFun<EOL>"}
{"signature": "if (!dstClass.isInterface) {", "body": "<EOL><INDENT><INDENT><INDENT>call(llvm.isSubclassFastFunction,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(objTypeInfo, llvm.int<NUM_LIT>(dstHierarchyInfo.classIdLo), llvm.int<NUM_LIT>(dstHierarchyInfo.classIdHi)))<EOL><INDENT><INDENT>}"}
{"signature": "val dependencyModules =", "body": "module.dependencies.associateBy { ModuleInfoImpl(it) }<EOL>"}
{"signature": "val noArgExtension =", "body": "project.extensions.getByType(NoArgExtension::class.java)<EOL>"}
{"signature": "val basicAlphabet =", "body": "<STR_LIT><EOL>"}
{"signature": "val invokingContext =", "body": "context()<EOL>"}
{"signature": "for (argument in kotlinCall.argumentsInParenthesis) {", "body": "<EOL><INDENT><INDENT><INDENT>baseSystem.addSubsystemFromArgument(argument)<EOL><INDENT><INDENT>}"}
{"signature": "val importedField =", "body": "import?.name?.toString()<EOL>"}
{"signature": "if (memberDeclaration is IrFunction) withinScope(memberDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>transformFunctionFlat(memberDeclaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualInterfaceNames =", "body": "jClass.getInterfaces().mapTo(linkedSetOf<String>()) { it.name }<EOL>"}
{"signature": "val expectedMainGroup =", "body": "CInteropCommonizerGroup(<EOL>"}
{"signature": "fun consumeBoxedConcrete(arg: Box<Concrete>) {", "body": "}<EOL>fun consumeBoxedGeneric(arg: Box<Generic<*>>) {}"}
{"signature": "val x  =", "body": "<STR_LIT><EOL>"}
{"signature": "val scriptResultFieldName =", "body": "resultValue.name.identifier<EOL>"}
{"signature": "for (i in MaxUI..MinUI) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (old.hasNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.nullable != new.nullable) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun rain() {", "body": "<INDENT><NUM_LIT>(b)().inv()<INDENT><NUM_LIT>(id(b))().inv() // should be consistent}"}
{"signature": "if (ignoredTests.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add(TestRunParameter.WithGTestPatterns(negativePatterns = ignoredTests))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val oldProcessors =", "body": "this.processors<EOL>"}
{"signature": "fun checkOpen() {", "body": "<EOL><INDENT><INDENT>if (isClosed) throw IOException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun fFloat(g: (Float) -> Unit) {", "body": "<EOL><INDENT>g(<NUM_LIT>f)<EOL>}"}
{"signature": "fun useOverloadedInline()  {", "body": "<EOL><INDENT>overloadedInline()<EOL>}"}
{"signature": "val NO_MUTE =", "body": "SuppressionResult(false, null)<EOL>"}
{"signature": "if (!valueParameter.isMovedReceiver()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>++sourceParameterIndex<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val startDownloadTime =", "body": "System.currentTimeMillis()<EOL>"}
{"signature": "if ((resultValue and <NUM_LIT>xFFFFFFFF_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>UL) == <NUM_LIT>UL) {", "body": "resultValue = resultValue shl <NUM_LIT>; exp -= <NUM_LIT> }"}
{"signature": "val nonErrorType =", "body": "nonErrorParameterTypeProvider(index) { parseType(it.children.single()) }<EOL>"}
{"signature": "val erasedType =", "body": "type.erasure()<EOL>"}
{"signature": "fun visitConstructorDescriptor(constructorDescriptor: ConstructorDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT>renderConstructor(constructorDescriptor, builder)<EOL><INDENT><INDENT>}"}
{"signature": "val nullableDoubleIeee<NUM_LIT>Equals =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val argsValues =", "body": "args.wrap(this, irFunction)<EOL>"}
{"signature": "if (maybeSerializer == null && genericIndex != null) {", "body": "<INDENT><INDENT><INDENT>// get field from serializer object<INDENT><INDENT><INDENT>genericSerializerFieldGetter?.invoke(iv, kType)<INDENT><INDENT><INDENT>return true<INDENT><INDENT>}"}
{"signature": "fun visitErrorValue(value: ErrorValue, data: Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val K<NUM_LIT>SpecialBackendChecksPhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, Fir<NUM_LIT>IrOutput>(<EOL>"}
{"signature": "fun testAccess() {", "body": "<EOL><INDENT>E<NUM_LIT><EOL><INDENT><!INVISIBLE_MEMBER!>NestedEntry<!><EOL><INDENT><!INVISIBLE_MEMBER!>A<NUM_LIT><!>()<EOL><INDENT><!INVISIBLE_MEMBER!>A<NUM_LIT><!><EOL>}"}
{"signature": "fun interpretFunctionExpression(expression: IrFunctionExpression) {", "body": "<EOL><INDENT><INDENT>val function = KFunctionState(expression.function, expression.type.classOrNull!!.owner, environment)<EOL><INDENT><INDENT>if (expression.function.isLocal) callStack.storeUpValues(function)<EOL><INDENT><INDENT>callStack.pushState(function)<EOL><INDENT>}"}
{"signature": "if (WEBPACK_INFRASTRUCTURE_REGEX.matches(text)) {", "body": "<EOL><INDENT><INDENT><INDENT>infrastructureLogged.value = true<EOL><INDENT><INDENT><INDENT>printMessage(text, LogType.LIFECYCLE)<EOL><INDENT><INDENT>}"}
{"signature": "if (loop == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(BREAK_OR_CONTINUE_OUTSIDE_A_LOOP.on(expression))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val konanDataDirProperty =", "body": "buildOptions.konanDataDir<EOL>"}
{"signature": "if (cachedResponses.size >= cacheMaxSize) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>cachedResponses[request.url] = CachedResponse(result, TimeSource.Monotonic.markNow())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (bound in typeParameter.bounds) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>checkUpperBoundViolated(bound, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val constructorKeywordRendered =", "body": "renderConstructorKeyword || !constructor.isPrimary || visibilityRendered<EOL>"}
{"signature": "fun hashCodeOfLong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, (<NUM_LIT>L).hashCode())<EOL><INDENT>}"}
{"signature": "val bottom =", "body": "kotlin.sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "if (generateFunctionKeyMetaClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>functionKeyTransformer.realizeKeyMetaAnnotations(moduleFragment)<EOL><INDENT><INDENT>}"}
{"signature": "fun testParserDoesNotClashWithTheSameOptionTwice() {", "body": "<EOL><INDENT><INDENT>val parser = SimpleExternalDependenciesResolverOptionsParser<EOL><INDENT><INDENT>val options = parser(<STR_LIT>).valueOrThrow()<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "var firDumpEnabled =", "body": "false<EOL>"}
{"signature": "package pkg<NUM_LIT>pkg<NUM_LIT><EOL>.", "body": ""}
{"signature": "val defaultValues =", "body": "mutableListOf<Int>()<EOL>"}
{"signature": "val classProtosToRead =", "body": "ClassProtosToRead()<EOL>"}
{"signature": "fun visitDesugaredAssignmentValueReferenceExpression(desugaredAssignmentValueReferenceExpression: FirDesugaredAssignmentValueReferenceExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDesugaredAssignmentValueReferenceExpression(desugaredAssignmentValueReferenceExpression)<EOL><INDENT>}"}
{"signature": "val COLON =", "body": "':'<EOL>"}
{"signature": "fun setExpected(f: Boolean) {", "body": "<EOL><INDENT><INDENT>mask = mask or IdSignature.Flags.IS_EXPECT.encode(f)<EOL><INDENT>}"}
{"signature": "val paramNode =", "body": "context.nodes[param.name]!!<EOL>"}
{"signature": "val serializedKlib =", "body": "library.serializedKlibFingerprint ?: SerializedKlibFingerprint(File(libraryFile.path))<EOL>"}
{"signature": "val blockInfo =", "body": "SubroutineInfo(<EOL>"}
{"signature": "val kTypeImplIntrinsicConstructor =", "body": "lookup.findNoParametersConstructor(kTypeImpl)!!<EOL>"}
{"signature": "val addedFakeOverrides =", "body": "mutableListOf<IrOverridableMember>()<EOL>"}
{"signature": "val targetSize =", "body": "intoClassNode.targetDeclarations.size<EOL>"}
{"signature": "if (argumentMapping is ArgumentMatch) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameterValues = generateValueArgument(argument, argumentMapping.valueParameter, parameterValues)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val callExpressionTypes =", "body": "arrayOf(<EOL>"}
{"signature": "fun renderSeparated(elements: List<FirElement>, visitor: Visitor) {", "body": "<EOL><INDENT><INDENT>printer.renderSeparated(elements, visitor)<EOL><INDENT>}"}
{"signature": "fun subListAdd() {", "body": "<EOL><INDENT><INDENT>val a = ArrayList(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>val s = a.subList(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), s)<EOL><EOL><INDENT><INDENT>assertTrue(s.add(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), s)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>), a)<EOL><INDENT>}"}
{"signature": "val isStaticOrCompanionMember =", "body": "<EOL><INDENT><INDENT><INDENT>DescriptorUtils.isStaticDeclaration(candidate) || candidate.containingDeclaration.isCompanionObject()<EOL>"}
{"signature": "if (aValueSize > bValueSize) {", "body": "<EOL><INDENT><INDENT><INDENT>aValue.size += bValueSize<EOL><INDENT><INDENT><INDENT>aValue.observers = newObservers<EOL><INDENT><INDENT><INDENT>unifyValues(b, aValue)<EOL><INDENT><INDENT>}"}
{"signature": "when (open) {", "body": "}"}
{"signature": "val libFragment =", "body": "loadedIr.loadedFragments[libFile] ?: notFoundIcError(<STR_LIT>, libFile)<EOL>"}
{"signature": "val classPrefixesToLoadByParentFromRegistry =", "body": "<EOL><INDENT><INDENT><INDENT>System.getProperty(<STR_LIT>)?.split(',')?.map { it.trim() } ?: emptyList()<EOL>"}
{"signature": "val errorStream =", "body": "process.errorStream<EOL>"}
{"signature": "if (subdir != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>).append(subdir)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val parsed =", "body": "parseNodeJsStackTrace(<EOL>"}
{"signature": "for (andArgument in andArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (!isEmpty) append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(wrapIfNeeded(andArgument))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val symbolsToRead =", "body": "minOf(symbolBuffer.size, symbolsNeeded)<EOL>"}
{"signature": "if (knownClassNamesInPackage != null) return knownClassNamesInPackage.mapTo(HashSet()) {", "body": "Name.identifier(it) }"}
{"signature": "var ok_ =", "body": "<STR_LIT><EOL>"}
{"signature": "val deprecationAnnotationsWithOverridesPropagation =", "body": "mapOf(<EOL>"}
{"signature": "val cards =", "body": "lines.windowed(<NUM_LIT>)<EOL>"}
{"signature": "val notImplementedSymbols =", "body": "mutableListOf<FirCallableSymbol<*>>()<EOL>"}
{"signature": "val HIDDEN_CHEAP_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (function.dispatchReceiverParameter?.type != overload.owner.dispatchReceiverParameter?.type) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@mapNotNull null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val methodListDiffs =", "body": "ArrayList<DiffEntry>()<EOL>"}
{"signature": "fun visitLocalDelegatedPropertyReference(<EOL><INDENT><INDENT>expression: IrLocalDelegatedPropertyReference<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>print(expression.delegate.owner.name)<EOL><INDENT>}"}
{"signature": "var s =", "body": "<NUM_LIT><EOL>"}
{"signature": "val DEFAULT_OUTPUT_DIRECTORY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (expressionType.isUnit() && expectedType.isUnit()) {", "body": "<EOL><INDENT><INDENT><INDENT>return this<EOL><INDENT><INDENT>}"}
{"signature": "if (propertyAccessor is FirSyntheticPropertyAccessor) {", "body": "<INDENT><INDENT><INDENT><INDENT>// No need to distinguish between the accessor and its delegate.<INDENT><INDENT><INDENT><INDENT>visitSimpleFunction(propertyAccessor.delegate)<INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_ANDROID_JVM_STDLIB_MODULE_NAME =", "body": "KOTLIN_STDLIB_MODULE_NAME<EOL>"}
{"signature": "fun bar(b: A<String>) {", "body": "}<EOL><EOL>fun func(p: A<B<String>>) {<EOL>}"}
{"signature": "for (index in <NUM_LIT>.arrayIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>writer?.appendLine(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val javaModuleGraph =", "body": "JavaModuleGraph(javaModuleFinder)<EOL>"}
{"signature": "val methodNode =", "body": "cfg.methodNode<EOL>"}
{"signature": "val resolutionModeForRhs =", "body": "withExpectedType(<EOL>"}
{"signature": "fun test(a: Any, s: String) {", "body": "<EOL><INDENT>val b = foo(a, s)<EOL><INDENT>checkItIsExactlyAny(a, arrayListOf(b))<EOL><INDENT>val c = bar(a, s)<EOL><INDENT>checkItIsExactlyAny(a, arrayListOf(c))<EOL>}"}
{"signature": "val basePhase =", "body": "elementToResolve.resolvePhase<EOL>"}
{"signature": "package second;<EOL>.", "body": ""}
{"signature": "val sourceFixups =", "body": "mutableListOf<SourceInfoFixup>()<EOL>"}
{"signature": "if (alreadyDelegated != null) {", "body": "<INDENT><INDENT><INDENT>if (classOrObject is KtClassOrObject) // report errors only for physical (non-synthetic) classes or objects<INDENT><INDENT><INDENT><INDENT>trace.report(MANY_IMPL_MEMBER_NOT_IMPLEMENTED.on(classOrObject, classOrObject, alreadyDelegated))<INDENT><INDENT><INDENT>return true<INDENT><INDENT>}"}
{"signature": "val fff =", "body": "{ x: Int -> <!UNRESOLVED_REFERENCE!>aaa<!> }<EOL>"}
{"signature": "fun generateAdditionalMembersForSingleFieldValueClasses(irClass: IrClass, ktClassOrObject: KtClassOrObject) {", "body": "<EOL><INDENT><INDENT>DataClassMembersGenerator(declarationGenerator, context.configuration.generateBodies).generateSingleFieldValueClassMembers(ktClassOrObject, irClass)<EOL><INDENT>}"}
{"signature": "val changedFiles =", "body": "androidHistory.historyFilesForChangedFiles(setOf(appJar, libJar))<EOL>"}
{"signature": "val kotlinName =", "body": "constant.name<EOL>"}
{"signature": "fun check(typeRef: FirFunctionTypeParameter, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>val name = typeRef.name ?: return<EOL><INDENT><INDENT>val typeRefSource = typeRef.source ?: return<EOL><INDENT><INDENT>FirJvmNamesChecker.checkNameAndReport(name, typeRefSource, context, reporter)<EOL><INDENT>}"}
{"signature": "val propertyNameRef =", "body": "JsNameRef(propertyName, delegateRef)<EOL>"}
{"signature": "fun write(<EOL><INDENT><INDENT>assignment: KtElement,<EOL><INDENT><INDENT>lValue: KtElement,<EOL><INDENT><INDENT>rValue: PseudoValue,<EOL><INDENT><INDENT>target: AccessTarget,<EOL><INDENT><INDENT>receiverValues: Map<PseudoValue, ReceiverValue><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>delegateBuilder.write(assignment, lValue, rValue, target, receiverValues)<EOL><INDENT>}"}
{"signature": "if (<!SENSELESS_COMPARISON!>(null) == x<!>) {", "body": "}"}
{"signature": "val annotationVisitor =", "body": "<EOL><INDENT><INDENT><INDENT>if (!isTypeAnnotation) visitAnnotation(asmTypeDescriptor, retentionPolicy == RetentionPolicy.RUNTIME) else<EOL>"}
{"signature": "val unresolvedDependency =", "body": "project.dependencies.create(<STR_LIT>)<EOL>"}
{"signature": "val varBeforeAssignmentUsages =", "body": "hashSetOf<JsName>()<EOL>"}
{"signature": "if (isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><!UNSAFE_CALL!>length<!><EOL><INDENT><INDENT>}"}
{"signature": "val fgs =", "body": "MyDependency(a = <STR_LIT>)<EOL>"}
{"signature": "val fileCacheDirectory =", "body": "baseLibraryCacheDirectory.child(cacheFileId(singleFileStrategy.fqName, singleFilePath))<EOL>"}
{"signature": "val SCRIPT_PLUGIN_K<NUM_LIT>_REGISTRAR_NAME =", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL>"}
{"signature": "if (typeReference != null && knownType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val dataFlowValue = components.dataFlowValueFactory.createDataFlowValue(leftHandSide, knownType, context)<EOL><INDENT><INDENT><INDENT>val conditionInfo = checkTypeForIs(context, expression, expression.isNegated, knownType, typeReference, dataFlowValue).thenInfo<EOL><INDENT><INDENT><INDENT>val newDataFlowInfo = conditionInfo.and(typeInfo.dataFlowInfo)<EOL><INDENT><INDENT><INDENT>context.trace.record(BindingContext.DATAFLOW_INFO_AFTER_CONDITION, expression, newDataFlowInfo)<EOL><INDENT><INDENT>}"}
{"signature": "fun f(list: List<Int>, s: List<String>) {", "body": "<EOL><INDENT>C().f(list, s)<EOL>}"}
{"signature": "val TYPE_VARIABLE_NAME_PREFIX_FOR_CR_PARAMETER_TYPE =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in ULong.MIN_VALUE until ULong.MAX_VALUE step Long.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT>ulongList += i<EOL><INDENT>}"}
{"signature": "if (key in declaredSet) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return VariableControlFlowState.create(isInitialized = key in initSet, isDeclared = true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val knmFile =", "body": "knmFiles.singleOrNull { <STR_LIT> !in it.path }<EOL>"}
{"signature": "val typealiasNames =", "body": "typealiases<EOL>"}
{"signature": "fun foo(a: MutableMap<String, String>, x: String?) {", "body": "<EOL><INDENT>a[x!!] = x<EOL><INDENT>a[x] = x<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!><EOL>}"}
{"signature": "fun optInToInternals() {", "body": "<EOL><INDENT><INDENT><INDENT>implementation.requiresOptIn = true<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedCallForCollectionReplacedArgument =", "body": "candidateForCollectionReplacedArgument.resolvedCall<EOL>"}
{"signature": "val appendedValue =", "body": "properties.getProperty(key, <STR_LIT>)<EOL>"}
{"signature": "val compiledScript =", "body": "runBlocking { compiler(script.toScriptSource(name = <STR_LIT>), compilationConfiguration) }<EOL>"}
{"signature": "val fluent =", "body": "annotation?.getBooleanArgument(FLUENT, session)<EOL>"}
{"signature": "fun foz(baz: Int) {", "body": "}<EOL><EOL><INDENT>fun Double.mext(mez: Long) {}"}
{"signature": "val icon =", "body": "BitmapFactory.decodeResource(resources, R.drawable.ic_task)<EOL>"}
{"signature": "val compilerDescription =", "body": "data.getRequiredField(<STR_LIT>)<EOL>"}
{"signature": "fun testCheckSmartcast(x: Any?) {", "body": "<EOL><INDENT>check(x is String)<EOL><INDENT>x.length<EOL>}"}
{"signature": "val destructuringContainerVar =", "body": "buildScriptDestructuringDeclaration(declaration)<EOL>"}
{"signature": "val LOCAL_REPOSITORY_PLACEHOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "val overrideByBaseItem =", "body": "overrideByBase[this]<EOL>"}
{"signature": "val optionalTransformer =", "body": "if (method.withTransformer) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val JS_JPS_LOG =", "body": "<STR_LIT><EOL>"}
{"signature": "for ((receiverType, type) in fragmentTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>properties += genPropertyForFragment(packageFragmentDescriptor, receiverType, type, resource)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun subListClear() {", "body": "<EOL><INDENT><INDENT>val a = ArrayList(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>val s = a.subList(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), s)<EOL><EOL><INDENT><INDENT>s.clear()<EOL><INDENT><INDENT>assertEquals(listOf<String>(), s)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), a)<EOL><INDENT>}"}
{"signature": "var processes =", "body": "ConcurrentLinkedQueue<Process>()<EOL>"}
{"signature": "fun incrementAndCheckPostCondition(loopExit: Label) {", "body": "<EOL><INDENT><INDENT>v.iinc(indexVar, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val fragments =", "body": "backendEngine.splitIntoFragments(irModule)<EOL>"}
{"signature": "for (i in logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT>0 + i<EOL><INDENT>}"}
{"signature": "val contravariantArgumentMode =", "body": "<EOL><INDENT><INDENT>if (!canBeUsedInSupertypePosition)<EOL>"}
{"signature": "val modelContainer =", "body": "ModelContainer<T>()<EOL>"}
{"signature": "val kindId =", "body": "getLlvmAttributeKindId(it)<EOL>"}
{"signature": "val defaultMinCapacity =", "body": "<NUM_LIT><EOL>"}
{"signature": "else if (psi.parent is KtDestructuringDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>val parameter = psi.parent.parent as? KtParameter ?: return false<EOL><INDENT><INDENT><INDENT>val forExpression = parameter.parent as? KtForExpression ?: return false<EOL><INDENT><INDENT><INDENT>return forExpression.loopParameter == parameter<EOL><INDENT><INDENT>}"}
{"signature": "val standAloneDrains =", "body": "interestingDrains.toMutableSet()<EOL>"}
{"signature": "val FACADE_KIND =", "body": "<NUM_LIT><EOL>"}
{"signature": "val expectedEntryNamesSet =", "body": "expectedEntryNames.toList().sorted().joinToString(<STR_LIT>)<EOL>"}
{"signature": "val signatureToVirtualFunction =", "body": "virtualFunctionsMetadata.associateBy { it.signature }<EOL>"}
{"signature": "val MaxRawChunksCount =", "body": "<NUM_LIT> // <NUM_LIT>GB in total."}
{"signature": "fun runSuspend(block: suspend () -> Unit) {", "body": "<EOL><INDENT>val run = RunSuspend()<EOL><INDENT>block.startCoroutine(run)<EOL><INDENT>run.await()<EOL>}"}
{"signature": "fun testOtherLiteralValues() {", "body": "<EOL><INDENT><INDENT>val values: Map<KmAnnotationArgument, String> = mapOf(<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.StringValue(<STR_LIT>) to <STR_LIT>foo\\<STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.CharValue('a') to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.FloatValue(<NUM_LIT>f) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.DoubleValue(<NUM_LIT>) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.BooleanValue(true) to <STR_LIT>,<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>doTest(values)<EOL><INDENT>}"}
{"signature": "val receiverInfo =", "body": "ReceiverInfo(<EOL>"}
{"signature": "fun configureTest(builder: TestConfigurationBuilder, disposable: Disposable) {", "body": "<INDENT><INDENT>sourceConfigurator.configureTest(builder, disposable)<INDENT><INDENT>// `StandaloneModeConfiguratorBase` is ordered last so that it overrules the source test configuration.<INDENT><INDENT>super.configureTest(builder, disposable)<INDENT>}"}
{"signature": "if (shouldPreserveRelativeOrder) {", "body": "<EOL><INDENT><INDENT><INDENT>strictOrder[it] = idx++<EOL><INDENT><INDENT>}"}
{"signature": "if (prev == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>r = it.op()<EOL><INDENT><INDENT><INDENT><INDENT>prev = it<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val enumAsPackage =", "body": "with(sirSession) { packageFqName.sirPackageEnum(sirModule) }<EOL>"}
{"signature": "if (diff % distance != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return code<EOL><INDENT>}"}
{"signature": "if (KotlinBuiltIns.isArray(type) && type.arguments.first().type.genericIndex != null) {", "body": "<INDENT><INDENT><INDENT>// Array<T> is unsupported, since we can't get T::class from KSerializer<T><INDENT><INDENT><INDENT>trace.report(SerializationErrors.GENERIC_ARRAY_ELEMENT_NOT_SUPPORTED.on(ktType ?: fallbackElement))<INDENT><INDENT>}"}
{"signature": "val normalizedType =", "body": "context.defaultTypeMapper.mapType(it.type).normalize()<EOL>"}
{"signature": "val desugaredSource =", "body": "incrementDecrementExpression.source?.fakeElement(fakeSourceKind)<EOL>"}
{"signature": "var lowestApplicability =", "body": "CandidateApplicability.RESOLVED<EOL>"}
{"signature": "if (dependencies[i].modificationCount != timestamps[i]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!finalSupertypeReported && !isObject && symbol.modality == Modality.FINAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(superTypeRef.source, FirErrors.FINAL_SUPERTYPE, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>finalSupertypeReported = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (typeParameter.upperBounds.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> appendType(typeParameter.upperBounds[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> appendSortedTypes(typeParameter.upperBounds, separator = <STR_LIT>, prefix = <STR_LIT>, postfix = <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val parentPropertyVisibilityStatus =", "body": "containingProperty?.propertyVisibilityStatus<EOL>"}
{"signature": "val definedClasses =", "body": "mutableListOf<ConstPointer>()<EOL>"}
{"signature": "val LL_FIR_DIVERGENCE_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "val firLoop =", "body": "expression.getOrBuildFirSafe<FirWhileLoop>(firResolveSession) ?: return emptyList()<EOL>"}
{"signature": "val gradleTaskName =", "body": "EnvironmentVariable.GRADLE_TASK_NAME.readValue()<EOL>"}
{"signature": "val STRING_METRICS_EXPECTED_VERSION_AND_HASH =", "body": "Pair(<NUM_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val genericFakeOverrideWithMFVCUpperBound =", "body": "GenericFakeOverrideWithMFVCUpperBound<Double>()<EOL>"}
{"signature": "val substitutedParamType =", "body": "param.type.substitute(superTypeArgumentsMap)<EOL>"}
{"signature": "if (!callToNonModule && callToModule || callToNonModule && !callToModule) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirJsErrors.CALL_FROM_UMD_MUST_BE_JS_MODULE_AND_JS_NON_MODULE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val strong =", "body": "StableRef.create(data)<EOL>"}
{"signature": "val resolvedLet =", "body": "findLet()<EOL>"}
{"signature": "if (isTrivial()) {", "body": "<EOL><INDENT><INDENT><INDENT>shallowCopy()<EOL><INDENT><INDENT>}"}
{"signature": "var todo =", "body": "n.toInt()<EOL>"}
{"signature": "fun unzipList() {", "body": "<EOL><INDENT><INDENT>val list = listOf(<NUM_LIT> to 'a', <NUM_LIT> to 'b', <NUM_LIT> to 'c')<EOL><INDENT><INDENT>val (ints, chars) = list.unzip()<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), ints)<EOL><INDENT><INDENT>assertEquals(listOf('a', 'b', 'c'), chars)<EOL><INDENT>}"}
{"signature": "val useComposableLambdaN =", "body": "argumentCount > MAX_RESTART_ARGUMENT_COUNT<EOL>"}
{"signature": "if (raw) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotations = listOf(specialAnnotations.generateRawTypeAnnotationCall())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val propertySource =", "body": "toFirSourceElement()<EOL>"}
{"signature": "when (val it = statements[statements.lastIndex - <NUM_LIT>]) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirVariableAssignment -> it.rValue as? FirFunctionCall ?: return null<EOL><INDENT><INDENT><INDENT>is FirFunctionCall -> extractOperationFromDynamicSetCall(it) ?: return null<EOL><INDENT><INDENT><INDENT>else -> return null<EOL><INDENT><INDENT>}"}
{"signature": "val MODULE_FILES =", "body": "ModuleCapability<List<KtFile>>(<STR_LIT>)<EOL>"}
{"signature": "val ln<NUM_LIT>_lo =", "body": "1.908<NUM_LIT>149<NUM_LIT>9<NUM_LIT>705877000<NUM_LIT>e<NUM_LIT><INDENT><EOL>"}
{"signature": "val llvmTrap =", "body": "llvmIntrinsic(<EOL>"}
{"signature": "val objCProtocolName =", "body": "<STR_LIT><EOL>"}
{"signature": "val timeMs =", "body": "task.getDurationMs()<EOL>"}
{"signature": "fun sameVariance() {", "body": "}<EOL><EOL>@Ann<Ann<Any>><EOL>actual fun <!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>startProjection<!>() {}"}
{"signature": "var str =", "body": "<STR_LIT><EOL>"}
{"signature": "var outputLength =", "body": "<NUM_LIT><EOL>"}
{"signature": "package another<EOL>.", "body": ""}
{"signature": "fun regExpToString() {", "body": "<EOL><INDENT><INDENT>val pattern = <STR_LIT><EOL><INDENT><INDENT>val re = RegExp(pattern, <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, re.toString())<EOL><INDENT>}"}
{"signature": "val kotlinClassId =", "body": "JavaToKotlinClassMap.mapJavaToKotlin(javaClassId.asSingleFqName()) ?: javaClassId<EOL>"}
{"signature": "var fastJarFileSystemFieldInitialized =", "body": "false<EOL>"}
{"signature": "if (b is C<Y, Z>) {", "body": "<EOL><INDENT><INDENT>b<!UNNECESSARY_SAFE_CALL!>?.<!><!OVERLOAD_RESOLUTION_AMBIGUITY!>foo<!>(null)<EOL><INDENT>}"}
{"signature": "val resolvedKotlinLibraries =", "body": "resolvedLibraries.map { it.library }<EOL>"}
{"signature": "val sortedVariables =", "body": "localVariables.sortedBy { labelToIndex[it.start.label] }<EOL>"}
{"signature": "fun visitSafeCallExpression(safeCallExpression: FirSafeCallExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(safeCallExpression)<EOL><INDENT>}"}
{"signature": "val localInX =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visitAnonymousObject(anonymousObject: FirAnonymousObject) {", "body": "<EOL><INDENT><INDENT>visitElement(anonymousObject)<EOL><INDENT>}"}
{"signature": "if (declaration is FirDefaultPropertyBackingField) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val referencedObject =", "body": "target.getReferencedObject()<EOL>"}
{"signature": "if (typeArgumentsOrTypeName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(WRONG_NUMBER_OF_TYPE_ARGUMENTS.on(typeArgumentsOrTypeName, numberOfParameters, typeAliasDescriptor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testClassPropPostfix() {", "body": "<EOL><INDENT>val p<NUM_LIT> = C().p++<EOL><INDENT>val p<NUM_LIT> = C().p--<EOL>}"}
{"signature": "if (nextFound < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (a && b && c) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "when (methodFullNameMode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>UnboxFunction -> listOf(KotlinTypeMapper.UNBOX_JVM_METHOD_NAME) + it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Getter -> listOf(JvmAbi.getterName(it.first())) + it.subList(<NUM_LIT>, nameParts.size)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val replacementInsn =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (targetApiVersion.version >= atLeastVersion)<EOL>"}
{"signature": "if (targetSymbol is IrReturnableBlockSymbol && !expression.isTheLastReturnStatementIn(targetSymbol)) {", "body": "<EOL><INDENT><INDENT><INDENT>persistReturnableBlockName(SYNTHETIC_BLOCK_LABEL, targetSymbol.owner)<EOL><INDENT><INDENT>}"}
{"signature": "val fooClass =", "body": "file.getClassOrFail(<STR_LIT>)<EOL>"}
{"signature": "for (checker in configuration.enabledModuleMetadataCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.check(metadata<NUM_LIT>, metadata<NUM_LIT>, report)<EOL><INDENT><INDENT>}"}
{"signature": "val compiledClassByName =", "body": "kaptContext.compiledClasses.associateBy { it.name!! }<EOL>"}
{"signature": "val TABLE_SET =", "body": "<STR_LIT><EOL>"}
{"signature": "val json =", "body": "js(<STR_LIT>)<EOL>"}
{"signature": "val globalCacheImpl =", "body": "parseCacheImplementationType(configuration.get(AndroidConfigurationKeys.DEFAULT_CACHE_IMPL))<EOL>"}
{"signature": "fun testLanguageVersionChanged() {", "body": "<EOL><INDENT><INDENT>languageOrApiVersionChanged(CommonCompilerArguments::languageVersion)<EOL><INDENT>}"}
{"signature": "package and `x` is not assignable to `B`)<EOL>.", "body": ""}
{"signature": "if (this.causes.size <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>super.printStackTrace(printWriter)<EOL><INDENT><INDENT>}"}
{"signature": "for (mergedValue in getMergedValues(inputValue)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addValueUsage(mergedValue, instruction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (delegate) {", "body": "<EOL><INDENT><INDENT><INDENT>onlyWithUseSiteTarget(VALUE_PARAMETER, PROPERTY_GETTER, PROPERTY_SETTER, FIELD)<EOL><INDENT><INDENT>}"}
{"signature": "for (contextReceiver in contextReceivers) {", "body": "<EOL><INDENT><INDENT><INDENT>frameMap.enter(contextReceiver, classCodegen.typeMapper.mapType(contextReceiver.type))<EOL><INDENT><INDENT>}"}
{"signature": "val oldDefaultContinueTarget =", "body": "defaultContinueTarget<EOL>"}
{"signature": "val localFunctions =", "body": "hashMapOf<CallableDescriptor, FunctionWithWrapper>()<EOL>"}
{"signature": "while (index < length && !pattern[index].isLineSeparator()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val selectorName =", "body": "baseMethod.selector<EOL>"}
{"signature": "val _counter =", "body": "atomic(<NUM_LIT>L)<EOL>"}
{"signature": "val CALEE_NAME =", "body": "RegExp(<STR_LIT>\"((?:equals|hashCode|toString)[^(]*)<STR_LIT>\")<EOL>"}
{"signature": "if (methodOfAny) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(function.source, FirErrors.METHOD_OF_ANY_IMPLEMENTED_IN_INTERFACE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val valFromObject =", "body": "<STR_LIT><EOL>"}
{"signature": "fun assertEquals(expected: String, actual: Any) {", "body": "<EOL><INDENT>if (<STR_LIT> != expected)<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "val conditionParser =", "body": "PsiConditionParser(collector, callContext, this)<EOL>"}
{"signature": "fun testBooleanArray() {", "body": "<EOL><INDENT><INDENT>assertFalse(booleanArr[<NUM_LIT>].value)<EOL><INDENT><INDENT>booleanArr[<NUM_LIT>].compareAndSet(false, true)<EOL><INDENT><INDENT>booleanArr[<NUM_LIT>].lazySet(true)<EOL><INDENT><INDENT>assertFalse(booleanArr[<NUM_LIT>].getAndSet(true))<EOL><INDENT><INDENT>assertTrue(booleanArr[<NUM_LIT>].value && booleanArr[<NUM_LIT>].value && booleanArr[<NUM_LIT>].value)<EOL><INDENT>}"}
{"signature": "fun outOfBlockModification(element: PsiElement) {", "body": "<INDENT><INDENT>val ktModule = ProjectStructureProvider.getModule(project, element, contextualModule = null)<INDENT><INDENT>// We should check outdated modifications before to avoid cache dropping (e.g., KtModule cache)<INDENT><INDENT>dropOutdatedModifications(ktModule)<INDENT><INDENT>project.analysisMessageBus.syncPublisher(MODULE_OUT_OF_BLOCK_MODIFICATION).onModification(ktModule)<INDENT>}"}
{"signature": "val exceptionStateRef =", "body": "JsNameRef(context.metadata.exceptionStateName, JsThisRef())<EOL>"}
{"signature": "import userSetupNoHint.", "body": "*<EOL>"}
{"signature": "val kCallableClass =", "body": "builtIns.kCallable.toIrSymbol()<EOL>"}
{"signature": "val supportsJvmStaticInInterface =", "body": "context.supports(LanguageFeature.JvmStaticInInterface)<EOL>"}
{"signature": "val unusedPatterns =", "body": "checker.unusedMatchers()<EOL>"}
{"signature": "val loopBlock =", "body": "basicBlock(<STR_LIT>, position()?.start)<EOL>"}
{"signature": "if (error != null) {", "body": "<EOL><INDENT><INDENT>throw IllegalStateException(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>error<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (w) {", "body": "<EOL><INDENT><INDENT><INDENT>val message = <STR_LIT><EOL><INDENT><INDENT><INDENT>message.toString()<EOL><INDENT><INDENT>}"}
{"signature": "val moduleMapping =", "body": "ByteArrayOutputStream(<NUM_LIT>)<EOL>"}
{"signature": "if (lastClassSearch?.first?.classId != classId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return search(FindClassRequest(classId, acceptedRootTypes), findClassGivenDirectory)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (<NUM_LIT> != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>foo = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (index > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.append('\\n')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!property.isConst) {", "body": "<EOL><INDENT><INDENT><INDENT>property.hasConstant = false<EOL><INDENT><INDENT>}"}
{"signature": "val knownPluginOptions =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val tryResult =", "body": "aTry.tryResult.accept(this, data)<EOL>"}
{"signature": "if (element is ClassStub.Companion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>listOf(ConstructorStub(isPrimary = true, visibility = VisibilityModifier.PRIVATE, origin = StubOrigin.Synthetic.DefaultConstructor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val symbolNameCache =", "body": "FirCompositeCachedSymbolNamesProvider.create(<EOL>"}
{"signature": "fun set(i: Int, newValue: Byte) {", "body": "<EOL><INDENT><INDENT>value = newValue<EOL><INDENT>}"}
{"signature": "val defaultJsOptions =", "body": "BuildOptions.JsOptions(<EOL>"}
{"signature": "fun visitFunctionAccess(expression: IrFunctionAccessExpression, data: IrDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitFunctionAccess(expression, data)<EOL><INDENT><INDENT><INDENT>expression.symbol.owner.enqueue(data, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(f: (Int) -> Unit) {", "body": "<EOL><INDENT>f(<NUM_LIT>)<EOL>}"}
{"signature": "val underlyingConstructedType =", "body": "resultingDescriptor.underlyingConstructorDescriptor.returnType<EOL>"}
{"signature": "if (typeRef.contextReceiverTypeRefs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(CompilerConeAttributes.ContextFunctionTypeParams(typeRef.contextReceiverTypeRefs.size))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun checkIsMutable() {", "body": "<EOL><INDENT><INDENT>if (isReadOnly) throw UnsupportedOperationException()<EOL><INDENT>}"}
{"signature": "fun test(d<NUM_LIT>: DiagnosticWithParameters<NUM_LIT><*, *>, d<NUM_LIT>: DiagnosticWithParameters<NUM_LIT><*, *, *>) {", "body": "<EOL><INDENT>val res = select(d<NUM_LIT>.a, d<NUM_LIT>.b)<EOL>}"}
{"signature": "when (callable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KmFunction -> pkg.functions += callable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KmProperty -> pkg.properties += callable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val loops =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "if (qualifier.typeArgumentList.typeArguments.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderSeparated(qualifier.typeArgumentList.typeArguments, visitor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isBuiltInClass(declaration) || checkIsFunctionInterface(declaration.symbol.signature)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>optionalCrossModuleImports += tag<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val stackElement =", "body": "unwindBlockStack(endLabel, data) { it.loop == jump.loop }<EOL>"}
{"signature": "var reports =", "body": "convert(jsonReport, currentBuildNumber, target)<EOL>"}
{"signature": "val OK =", "body": "<STR_LIT><EOL>"}
{"signature": "val libraryResolver =", "body": "JvmLibraryResolver(<EOL>"}
{"signature": "val extendedAnalysisMode =", "body": "configuration.getBoolean(CommonConfigurationKeys.USE_FIR_EXTENDED_CHECKERS)<EOL>"}
{"signature": "val luhny =", "body": "Luhny()<EOL>"}
{"signature": "val lowestTimePeriodToKeepSoftRefs =", "body": "lowestTimePeriodToKeepStrongRefs - maxTimePeriodsToKeepSoftReferences<EOL>"}
{"signature": "val newUseSiteFile =", "body": "<EOL><INDENT><INDENT><INDENT>if (classLikeDeclaration.isLocalClassOrAnonymousObject()) @OptIn(PrivateForInline::class) useSiteFile<EOL>"}
{"signature": "val changedJsSource =", "body": "resolvePath(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (callableReference.type.isKFunction()) {", "body": "<EOL><INDENT><INDENT><INDENT>val kFunction = data.irBuiltIns.kFunctionN(typeArguments.size)<EOL><INDENT><INDENT><INDENT>val newType = kFunction.typeWith(receiver.type, *typeArguments.toTypedArray())<EOL><INDENT><INDENT><INDENT>callableReference.type = newType<EOL><INDENT><INDENT>}"}
{"signature": "fun visitMaxs(stack: Int, locals: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>lambdasFinallyBlocks = resultNode.tryCatchBlocks.size<EOL><INDENT><INDENT><INDENT><INDENT>super.visitMaxs(stack, locals)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun g(x: (s: String) -> Unit) {", "body": "<EOL><INDENT><INDENT>x(a)<EOL><INDENT>}"}
{"signature": "if (old.hasConclusionOfConditionalEffect()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.conclusionOfConditionalEffect, new.conclusionOfConditionalEffect)) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun printAny(v: Any?) {", "body": "<EOL><INDENT>println(v)<EOL>}"}
{"signature": "val jvmSignatureRegex =", "body": "Regex(<STR_LIT>)"}
{"signature": "fun main()  {", "body": "<INDENT>val y = foo(Test.flexibleNumbers() ?: materializeArray()) // Any? in NI, Number! in OI (T of `materializeArray` is inferred to Any?)}"}
{"signature": "if (buildOperationRecord is TaskRecord) {", "body": "<EOL><INDENT><INDENT>buildOperationRecord.compilerArguments.asList()<EOL><INDENT>}"}
{"signature": "val ownerParent =", "body": "owner.closestDeclarationParent()<EOL>"}
{"signature": "if (kotlinRepeatable != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkKotlinRepeatableAnnotationDeclaration(kotlinRepeatable, declaration, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (binary is Framework) {", "body": "<EOL><INDENT><INDENT>createFrameworkArtifact(binary, linkTask)<EOL><INDENT>}"}
{"signature": "val otherArraysStr =", "body": "C().four().toString()<EOL>"}
{"signature": "for ((index, proto) in typeParameterProtos.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result[proto.id] = DeserializedTypeParameterDescriptor(c, proto, index)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val breakContinueTargetStatements =", "body": "mutableMapOf<JsContinue, JsStatement>()<EOL>"}
{"signature": "val q<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val memberSymbol =", "body": "containingClassSymbol.declarationSymbols.find { it.findPsi() == member } as? FirCallableSymbol<*><EOL>"}
{"signature": "val xSuperType =", "body": "xClass.clazz.supertypes.singleOrNull()<EOL>"}
{"signature": "fun testBinary<NUM_LIT>() {", "body": "<EOL><INDENT><STR_LIT> <!UNREACHABLE_CODE!>+<!> todo()<EOL>}"}
{"signature": "if (deprecatedModifierReplacement != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>modifierSource,<EOL><INDENT><INDENT><INDENT><INDENT>FirErrors.DEPRECATED_MODIFIER,<EOL><INDENT><INDENT><INDENT><INDENT>modifierToken,<EOL><INDENT><INDENT><INDENT><INDENT>deprecatedModifierReplacement,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val explicitParamsStartIndex =", "body": "if (irScript.earlierScriptsParameter == null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val correspondingCppClass =", "body": "primaryConstructor.owner.valueParameters.first().type.classOrNull?.owner!!<EOL>"}
{"signature": "when (val subject = a) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT>else -> -<NUM_LIT><EOL><INDENT>}"}
{"signature": "fun markPostponedVariable(variable: TypeVariableMarker) {", "body": "<EOL><INDENT><INDENT>storage.postponedTypeVariables += variable<EOL><INDENT>}"}
{"signature": "val deprecatedProperties =", "body": "properties.filter { it.generateDeprecatedKotlinOption }<EOL>"}
{"signature": "if (!overrideConflict) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>overrideConflict = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(DATA_CLASS_OVERRIDE_CONFLICT.on(dataModifier, componentFunction, overridden.containingDeclaration))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var allWarningsAsErrors =", "body": "false<EOL>"}
{"signature": "val reifiedTypeParameters =", "body": "closureReifiedMarkers.getOrPut(declaration) { declaration.reifiedTypeParameters }<EOL>"}
{"signature": "val rValueLightTree =", "body": "rValue.source!!.lighterASTNode<EOL>"}
{"signature": "val sortedMap =", "body": "map.toSortedMap(nullsLast())<EOL>"}
{"signature": "val KLIB_PROPERTY_METADATA_VERSION =", "body": "<STR_LIT><EOL>"}
{"signature": "fun complexSame() {", "body": "}<EOL><EOL>@ComplexNested<A>(<EOL><INDENT>ComplexNested<A>(),<EOL><INDENT>ComplexNested<A>(),<EOL>)<EOL>actual fun complexDiffer() {}"}
{"signature": "for (i in (<NUM_LIT>uL downTo <NUM_LIT>uL step <NUM_LIT>L).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT><NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val alternatePath =", "body": "FlowPath.CfgEdge(edge.label, node.fir)<EOL>"}
{"signature": "when (accessor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is PropertyGetterDescriptor -> generateDefaultGetterBody(accessor, irAccessor)<EOL><INDENT><INDENT><INDENT><INDENT>is PropertySetterDescriptor -> generateDefaultSetterBody(accessor, irAccessor)<EOL><INDENT><INDENT><INDENT><INDENT>else -> throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CACHE_FOLDER_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (cleanup.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>+kotlinCall<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (markBlack.size < defFiles.size) {", "body": "<EOL><INDENT><INDENT>visit(defFiles[index++])<EOL><INDENT>}"}
{"signature": "if (first is Array<*> && second is Array<*>) {", "body": "<EOL><INDENT><INDENT>arraysEqual(first, second)<EOL><INDENT>}"}
{"signature": "if (targetAnnotations != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>declaration.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirWasmErrors.NON_EXTERNAL_DECLARATION_IN_INAPPROPRIATE_FILE,<EOL><INDENT><INDENT><INDENT><INDENT>targetAnnotations.resolvedType,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (superType.coneType is ConeDynamicType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(superType.source, FirErrors.DYNAMIC_SUPERTYPE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun executeBeforeInlineCallMarker(insn: AbstractInsnNode) {", "body": "<EOL><INDENT><INDENT><INDENT>saveStackAndClear(insn)<EOL><INDENT><INDENT>}"}
{"signature": "val invLogOfTenBaseTwo =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (guardLabel == name && isInLoop()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!fromOtherPackage()) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun toProperties() {", "body": "<EOL><INDENT><INDENT>val map = mapOf(<STR_LIT> to <STR_LIT>, <STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT>val prop = map.toProperties()<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, prop.size)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, prop.getProperty(<STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, prop.getProperty(<STR_LIT>, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "val flagFile =", "body": "getOrCreateClientFlagFile(daemonOptions)<EOL>"}
{"signature": "val arrayOf =", "body": "arrayOf(<EOL>"}
{"signature": "val leafParents =", "body": "mutableMapOf<T, Node>()<EOL>"}
{"signature": "val WITH_NEW_INFERENCE_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (classifierId.packageName.isUnderKotlinNativeSyntheticPackages) {", "body": "<EOL><INDENT><INDENT><INDENT>return CirClassType.createInterned(<EOL><INDENT><INDENT><INDENT><INDENT>classId = classifierId,<EOL><INDENT><INDENT><INDENT><INDENT>outerType = outerType,<EOL><INDENT><INDENT><INDENT><INDENT>arguments = arguments,<EOL><INDENT><INDENT><INDENT><INDENT>isMarkedNullable = isMarkedNullable<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val tra =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in classIdsInRoots.size..index) {", "body": "<EOL><INDENT><INDENT><INDENT>classIdsInRoots.add(JavaSourceClassIdReader(roots[i].file).readClassIds())<EOL><INDENT><INDENT>}"}
{"signature": "fun visitAnonymousFunction(anonymousFunction: FirAnonymousFunction) {", "body": "<EOL><INDENT><INDENT>visitElement(anonymousFunction)<EOL><INDENT>}"}
{"signature": "val noMapping =", "body": "coordinates to coordinates<EOL>"}
{"signature": "val HASH_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val whenResultValue =", "body": "<EOL><INDENT><INDENT><INDENT>whenReturnType?.let { facade.components.dataFlowValueFactory.createDataFlowValue(expression, it, contextAfterSubject) }<EOL>"}
{"signature": "val Char =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "var cache =", "body": "this._cache<EOL>"}
{"signature": "val VAL_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "val substitutedConstructor =", "body": "constructor.substitute(substitutorForUnderlyingClass) ?: return null<EOL>"}
{"signature": "if (!isContainedInInvariantOrContravariantPositionsAmongUpperBound(session, typeVariableConstructor, dependentTypeParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "while (i > <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><INDENT>fw = fq[i - <NUM_LIT>] + fq[i]<INDENT><INDENT><INDENT><INDENT>fq[i] += fq[i - <NUM_LIT>] - fw<INDENT><INDENT><INDENT><INDENT>fq[i - <NUM_LIT>] = fw<INDENT><INDENT><INDENT><INDENT>//--<INDENT><INDENT><INDENT><INDENT>i--<INDENT><INDENT><INDENT>}"}
{"signature": "val originalFileNames =", "body": "module.files.map { it.name }<EOL>"}
{"signature": "fun addValueParameter(valueParameter: IrBuiltinValueParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>valueParameters.add(valueParameter)<EOL><INDENT>}"}
{"signature": "for (fqNameSet in fqNameSets) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fqNameSet.mapTo(this, FqName::asString)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun accept(d: IrDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>d.acceptVoid(this)<EOL><INDENT><INDENT>}"}
{"signature": "if (single != null && single.typeReference?.typeElement == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return single.replace(superTypeListEntry) as KtSuperTypeListEntry<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val importedScriptClass =", "body": "it.owner.targetClass!!.owner<EOL>"}
{"signature": "val variablesToAdd =", "body": "mutableMapOf<IrDeclarationParent, MutableSet<IrVariable>>()<EOL>"}
{"signature": "val mantissaIsZero =", "body": "f == <NUM_LIT><EOL>"}
{"signature": "if (upperBoundStrings.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>).append(renderKeyword(<STR_LIT>)).append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>upperBoundStrings.joinTo(builder, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val PATH_TO_ROOT_TOKEN =", "body": "<STR_LIT><EOL>"}
{"signature": "val stackLocals =", "body": "mutableListOf<StackLocal>()<EOL>"}
{"signature": "val KOTLIN_LIBRARY_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val substitutedParameterType =", "body": "freshVariablesSubstitutor.safeSubstitute(unsubstitutedParameterType)<EOL>"}
{"signature": "fun addFunction(descriptor: FunctionDescriptor, expression: JsExpression?, psi: KtElement?) {", "body": "<EOL><INDENT><INDENT>if (expression == null) return<EOL><INDENT><INDENT>context.addFunctionButNotExport(descriptor, expression)<EOL><INDENT><INDENT>context.export(descriptor)<EOL><INDENT>}"}
{"signature": "fun writeValue(v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT>throwError()<EOL><INDENT>}"}
{"signature": "if (it.isValid) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.delete()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun defineClass(origin: PsiElement?, version: Int, access: Int, name: String, signature: String?, superName: String, interfaces: Array<out String>) {", "body": "<EOL><INDENT><INDENT><INDENT>javaClassName = name<EOL><EOL><INDENT><INDENT><INDENT>super.defineClass(origin, version, access, name, signature, superName, interfaces)<EOL><INDENT><INDENT>}"}
{"signature": "if (!isComputingDeferredType(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(type.constructor.declarationDescriptor as? ClassDescriptor)?.let(::consider)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jvmPlatforms =", "body": "setOf(KotlinPlatformType.jvm, KotlinPlatformType.androidJvm)<EOL>"}
{"signature": "val actualOutermostClassId =", "body": "actualTypealiasSymbol.fullyExpandedClass(actualSession)?.classId ?: return null<EOL>"}
{"signature": "fun fill(dest : Array<in String>, v : String) {", "body": "<EOL><INDENT>dest[<NUM_LIT>] = v<EOL>}"}
{"signature": "val srcPath =", "body": "src<EOL>"}
{"signature": "val isCommonizedKey =", "body": "extrasKeyOf<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "if (singleSpreadElement != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val spreadExpr = singleSpreadElement.expression<EOL><INDENT><INDENT><INDENT>if (isImmediatelyCreatedArray(spreadExpr))<EOL><INDENT><INDENT><INDENT><INDENT>return spreadExpr.transform(this, null)<EOL><INDENT><INDENT>}"}
{"signature": "if (dependency == LanguageFeature.Coroutines) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkCoroutinesFeature(languageVersionSettings, trace, node.psi)<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val subpluginOption<NUM_LIT> =", "body": "SubpluginOption(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val compileClasspath =", "body": "java<NUM_LIT>CompileClasspath<EOL>"}
{"signature": "package ${package}<EOL>.", "body": ""}
{"signature": "if (contractProvider != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(ContractProviderKey, contractProvider)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedTypeParameters =", "body": "expectDeclaration.typeParameters<EOL>"}
{"signature": "if (javaRepeatable != null && kotlinRepeatable != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ErrorsJvm.REDUNDANT_REPEATABLE_ANNOTATION.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinRepeatable.entry,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinRepeatable.descriptor.abbreviationFqName ?: FqName.ROOT,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>javaRepeatable.descriptor.abbreviationFqName ?: FqName.ROOT,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (A.x != null) {", "body": "<EOL><INDENT><INDENT>useInt(A.x)<EOL><INDENT><INDENT>useInt(<!ARGUMENT_TYPE_MISMATCH!>B.x<!>)<EOL><INDENT>}"}
{"signature": "fun store(<EOL><INDENT><INDENT><INDENT>compiledScript: CompiledScript, script: SourceCode, scriptCompilationConfiguration: ScriptCompilationConfiguration<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val b_x_Float =", "body": "BFloat().x as Any as FloatArray<EOL>"}
{"signature": "val arrangedValue =", "body": "arranger(storedValue)<EOL>"}
{"signature": "if (heater.isHot) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val from =", "body": "expression.getTypeArgument(<NUM_LIT>)!!<EOL>"}
{"signature": "val providedPropertiesParameters =", "body": "providedPropertiesParamTypes.map(::createValueParameter)<EOL>"}
{"signature": "if (propertyAccessorDeclaration != null || other.propertyAccessorDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return propertyAccessorDeclaration == other.propertyAccessorDeclaration<EOL><INDENT><INDENT>}"}
{"signature": "for (ch in sequence) {", "body": "<EOL><INDENT><INDENT><INDENT>sequenceMap[ch] = i++;<EOL><INDENT><INDENT>}"}
{"signature": "val topLevelProperties =", "body": "foundProperties ?: declarationProvider.getTopLevelProperties(callableId)<EOL>"}
{"signature": "val packageFragmentDescriptor =", "body": "context.moduleDescriptor.findPackageFragmentForFile(ktFile)!!<EOL>"}
{"signature": "fun execute(insn: AbstractInsnNode, interpreter: Interpreter<BasicValue>) {", "body": "<INDENT><INDENT><INDENT>// This can be a void non-local return from a non-void method; Frame#execute would throw and do nothing else.<INDENT><INDENT><INDENT>if (insn.opcode == Opcodes.RETURN) return<INDENT><INDENT><INDENT>super.execute(insn, interpreter)<INDENT><INDENT>}"}
{"signature": "val NonExistent =", "body": "<STR_LIT><EOL>"}
{"signature": "val allowErrors =", "body": "false<EOL>"}
{"signature": "val articleId =", "body": "url.substringAfterLast('-').hexToLong()<EOL>"}
{"signature": "if (properties.kotlinOverrideUserValues.get()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>forceConfigureTask(properties)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun add(line: CompiledReplCodeLine, value: T) {", "body": "<EOL><INDENT><INDENT>history.add(line to value)<EOL><INDENT>}"}
{"signature": "val rxy =", "body": "safeRange(x, y)<EOL>"}
{"signature": "if (x.statement is JsLoop) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>statementsLabels[x.statement] = x<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ComposableTargetApplierArgument =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "package fragment provider<EOL>.", "body": ""}
{"signature": "if (lastInPlaceExit !== enterNode || !isLocalClass) {", "body": "<INDENT><INDENT><INDENT><INDENT>// (init blocks if any, else class entry) -> non-delegating or super-delegating constructor.<INDENT><INDENT><INDENT><INDENT>// For local classes, if there are no init blocks, the CFG edge from the class entry already exists,<INDENT><INDENT><INDENT><INDENT>// as it is also a DFG edge. See `enterClass`.<INDENT><INDENT><INDENT><INDENT>addEdgeToSubGraph(lastInPlaceExit, graph.enterNode)<INDENT><INDENT><INDENT>}"}
{"signature": "package inlineInIfFalseDex<EOL>.", "body": ""}
{"signature": "val kotlinBaseJars =", "body": "kotlinCompilerJars + kotlinLibsJars + kotlinScriptingJars<EOL>"}
{"signature": "fun push(c : T) {", "body": "//<INDENT><INDENT>buf[tail] = c//<INDENT><INDENT>tail = prev(tail)//<INDENT><INDENT>size++//<INDENT>}"}
{"signature": "val extractedOverridesSymbols =", "body": "extractedOverrides.map { it.member }<EOL>"}
{"signature": "val pluginContext =", "body": "IrPluginContextImpl(<EOL>"}
{"signature": "val nativeOutputKindClass =", "body": "typeName(<STR_LIT>)<EOL>"}
{"signature": "fun buildAllAdaptersRecursively(elements: CAdapterExportedElements) {", "body": "<EOL><INDENT><INDENT>val top = elements.scopes.single()<EOL><INDENT><INDENT>assert(top.kind == ScopeKind.TOP)<EOL><INDENT><INDENT>top.generateCAdapters(this::buildCAdapter)<EOL><INDENT>}"}
{"signature": "if (frame.top().functionalArgument is LambdaInfo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>toDelete.add(cur)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val derived<NUM_LIT> =", "body": "DerivedClass(int = <NUM_LIT>)<EOL>"}
{"signature": "fun test(array: Array<B>) {", "body": "<EOL><INDENT>A.take(array)<EOL><INDENT>takeA(<!ARGUMENT_TYPE_MISMATCH!>array<!>)<EOL><INDENT>takeOutA(array)<EOL>}"}
{"signature": "for (i in (MaxUL - <NUM_LIT>u)..MaxUL step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "fun exitFromInlining() {", "body": "<EOL><INDENT><INDENT>inlineCallsAndDeclarations.removeLast()<EOL><INDENT><INDENT>val pop = typesUsedInInlineFunctions.pop()<EOL><INDENT><INDENT>typesUsedInInlineFunctions.peek()?.addAll(pop)<EOL><INDENT>}"}
{"signature": "val loopGuardMap =", "body": "mutableMapOf<JsDoWhile, JsLabel>()<EOL>"}
{"signature": "val renderingContext =", "body": "RenderingContext.Impl(sortedDeclarations)<EOL>"}
{"signature": "val contains<NUM_LIT> =", "body": "<!EVALUATED: `true`!>mapOf(<NUM_LIT> to <STR_LIT>, <NUM_LIT> to <STR_LIT>, <NUM_LIT> to <STR_LIT>).containsValue(<STR_LIT>)<!><EOL>"}
{"signature": "val contentElement =", "body": "codeFragment.getContentElement()<EOL>"}
{"signature": "if (ix > <NUM_LIT>x<NUM_LIT>fe9<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) {", "body": "<INDENT><INDENT><EOL><INDENT><INDENT><INDENT>qx = <NUM_LIT>.28125<EOL><INDENT><INDENT>}"}
{"signature": "for (j in <NUM_LIT>.stringSingles.size / <NUM_LIT> - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(<STR_LIT> + regex.pattern + <STR_LIT> + stringSingles[i][j],<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>regex.matches(stringSingles[i][j * <NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>assertFalse(<STR_LIT> + regex.pattern + <STR_LIT> + stringSingles[i][j * <NUM_LIT> + <NUM_LIT>],<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>regex.matches(stringSingles[i][j * <NUM_LIT> + <NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (main != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val mainFile = dir.resolve(main)<EOL><INDENT><INDENT><INDENT>resolveAsFile(mainFile)<EOL><INDENT><INDENT><INDENT><INDENT>?: resolveIndex(mainFile)<EOL><INDENT><INDENT>}"}
{"signature": "val getterStatus =", "body": "getter?.status<EOL>"}
{"signature": "val extensionsPattern =", "body": "Pattern.compile(<STR_LIT>)<EOL>"}
{"signature": "val isInAbi =", "body": "visibility == DescriptorVisibilities.PUBLIC<EOL>"}
{"signature": "val coloring =", "body": "graph.computeColoringGreedy()<EOL>"}
{"signature": "val betterTo =", "body": "to.nonFillerLastChildOrSelf(tree)<EOL>"}
{"signature": "val staticMethod =", "body": "getOrCreateStaticMethod(function)<EOL>"}
{"signature": "val lastAnnotationCall =", "body": "context.callsOrAssignments.lastOrNull() as? FirAnnotation<EOL>"}
{"signature": "val zip =", "body": "<STR_LIT><EOL>"}
{"signature": "if (type.isUnit) {", "body": "<EOL><INDENT><INDENT>return isInFunctionReturnPosition<EOL><INDENT>}"}
{"signature": "fun trimToSize() {", "body": "<EOL><INDENT>}"}
{"signature": "val existingClass =", "body": "findClassAcrossModuleDependencies(classId)<EOL>"}
{"signature": "val containsFunctionN =", "body": "returnType!!.containsFunctionN() ||<EOL>"}
{"signature": "fun store(value: LLVMValueRef) {", "body": "<EOL><INDENT><INDENT><INDENT>functionGenerationContext.storeAny(value, address, true)<EOL><INDENT><INDENT>}"}
{"signature": "val fileClassFqName =", "body": "(irClass.parent as IrFile).getFileClassInfo().fileClassFqName<EOL>"}
{"signature": "else if (descriptor.isReferenceToMemberEntriesWithoutExpectedFunctionalType(reportOn, context)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.DEPRECATED_ACCESS_TO_ENUM_ENTRY_PROPERTY_AS_REFERENCE.on(reportOn))<EOL><INDENT><INDENT>}"}
{"signature": "val withProtectedInvoke =", "body": "WithProtectedInvoke()<EOL>"}
{"signature": "val objCFactoryFqName =", "body": "NativeStandardInteropNames.objCFactoryClassId.asSingleFqName()<EOL>"}
{"signature": "if (resolveIfNeeded && initializer is FirLiteralExpression<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>property.lazyResolveToPhase(FirResolvePhase.BODY_RESOLVE)<EOL><INDENT><INDENT><INDENT>return getEffectivePropertyInitializer(property, resolveIfNeeded = false)<EOL><INDENT><INDENT>}"}
{"signature": "val insideStringConcat =", "body": "<STR_LIT>b<STR_LIT><EOL>"}
{"signature": "if (info.isRemapped) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return RemapInfo(info, remapped, REMAPPED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var copyValuesFrom =", "body": "<NUM_LIT><EOL>"}
{"signature": "val directDependencySymbols =", "body": "match.groupValues[<NUM_LIT>].split(',').filter(String::isNotEmpty).toSet()<EOL>"}
{"signature": "val fileToDeclarationMap =", "body": "mutableMapOf<Int, DeclarationIrTableFileReader>()<EOL>"}
{"signature": "val beforeParamsKey =", "body": "noQuoteKey.substringBefore(<STR_LIT>)<EOL>"}
{"signature": "if (!inputChanges.isIncremental) {", "body": "<EOL><INDENT><INDENT>SourcesChanges.Unknown<EOL><INDENT>}"}
{"signature": "package $packageName\\n\\nclass $simpleName\")<EOL>.", "body": ""}
{"signature": "val typeParameter =", "body": "toType.classifierOrNull?.owner as? IrTypeParameter<EOL>"}
{"signature": "val JSPECIFY_ANNOTATIONS_PACKAGE =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val KONAN_PLATFORM_LIBS_NAME_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun sayIt() {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitIntegerLiteralOperatorCall(integerLiteralOperatorCall: FirIntegerLiteralOperatorCall) {", "body": "<EOL><INDENT><INDENT>visitElement(integerLiteralOperatorCall)<EOL><INDENT>}"}
{"signature": "if (lexemes.currentChar == Lexer.CHAR_CARET) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lexemes.next()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>negative = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val innerStack =", "body": "ArrayDeque<SubFrame>().apply { add(SubFrame(subFrameOwner)) }<EOL>"}
{"signature": "val fakeOverrideProperties =", "body": "klass.declarations.filterIsInstanceAnd(IrProperty::isFakeOverride)<EOL>"}
{"signature": "fun testTrailingBits(v: Double, count: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>val mask = (<NUM_LIT>uL shl count) - <NUM_LIT>uL<EOL><INDENT><INDENT><INDENT>assertEquals(<NUM_LIT>uL, v.toULong() and mask)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitKtFile(file: KtFile) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitKtFile(file)<EOL><INDENT><INDENT><INDENT>computeAnnotations(file)<EOL><INDENT><INDENT>}"}
{"signature": "val elementsToValues =", "body": "BidirectionalMap<KtElement, PseudoValue>()<EOL>"}
{"signature": "val messengerNameSuffix =", "body": "if (isStret) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun closeTag(p: Printer, tag: String) {", "body": "<EOL><INDENT><INDENT>p.popIndent()<EOL><INDENT><INDENT>p.println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val classOrObjectFqName =", "body": "classOrObjectDeclaration?.fqName<EOL>"}
{"signature": "for (parameter in constructor.valueParameters) {", "body": "<INDENT><INDENT><INDENT><INDENT>// force properties resolution to fill BindingContext.VALUE_PARAMETER_AS_PROPERTY slice<INDENT><INDENT><INDENT><INDENT>getContributedVariables(parameter.name, location)<INDENT><INDENT><INDENT>}"}
{"signature": "val transitiveDependenciesToVisit =", "body": "module.dependencies<EOL>"}
{"signature": "val uintSerializer =", "body": "IrUnsafeCoerceWrappedSerializer(intSerializer, symbols.kotlinUInt.defaultType, irBuiltIns.intType)<EOL>"}
{"signature": "val lhsValue =", "body": "getValue(value.lhs) ?: return null<EOL>"}
{"signature": "val isDefaultAccessor =", "body": "backingField != null && function.origin == IrDeclarationOrigin.DEFAULT_PROPERTY_ACCESSOR<EOL>"}
{"signature": "val cStructMemberAt =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val virtualFunctionsMetadata =", "body": "mutableListOf<VirtualMethodMetadata>()<EOL>"}
{"signature": "fun check(declaration: FirSimpleFunction, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>checkFeatureIsEnabled(declaration, context, reporter)<EOL><INDENT>}"}
{"signature": "if (type == null && with(typeSystem) {", "body": "typeParameterForArgument?.getVariance() }"}
{"signature": "if (!valueArgument.isExternal()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>updateRecordedType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>argumentExpression,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameter,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>newContext,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>constantConvertedArgument?.unknownIntegerType?.unwrap(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resolvedCall.isReallySuccess()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val IS_VARARG =", "body": "FlagField.booleanFirst()<EOL>"}
{"signature": "val diagnosticsReporter =", "body": "<EOL><INDENT><INDENT><INDENT>UpperBoundViolatedReporter(trace, argumentType, typeParameterDescriptor, diagnosticForTypeAliases = diagnosticForTypeAliases)<EOL>"}
{"signature": "if (returnType.isUnit) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (index in cfg.getSuccessorsIndices(insn)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val succ = methodNode.instructions[index]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (isBeforeSuspendMarker(succ)) return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (collectSuspensionPointEnds(succ, visited, ends)) return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentValue =", "body": "container.getMetric(StringMetrics.MPP_PLATFORMS)!!.toStringRepresentation()<EOL>"}
{"signature": "fun visitDoWhileLoop(doWhileLoop: FirDoWhileLoop, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allDoWhileLoopCheckers.check(doWhileLoop, data)<EOL><INDENT>}"}
{"signature": "val executionPointB =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "val mainBinaryRoots =", "body": "StandaloneProjectFactory.getVirtualFilesForLibraryRoots(<EOL>"}
{"signature": "val elementTypeByPrimitiveArrayType =", "body": "primitiveArrayTypeByElementType.inverseMap()<EOL>"}
{"signature": "fun unregisterEverything(extensionPoint: ExtensionPointName<*>) {", "body": "<EOL><INDENT>Area.getExtensionPoint(extensionPoint).foo().hashCode()<EOL>}"}
{"signature": "val weak =", "body": "WeakReference(v)<EOL>"}
{"signature": "val hidesFromObjCFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val subResolvedAtoms =", "body": "<EOL><INDENT><INDENT><INDENT>getSubResolvedAtomsToAnalyze(resolvedCall, context.resolutionContext.expectedType, context.trace.bindingContext) ?: return false<EOL>"}
{"signature": "val containerIsAnonymous =", "body": "container.classId.shortClassName == SpecialNames.ANONYMOUS<EOL>"}
{"signature": "val runtimeIdentifier =", "body": "simulatorRuntime.identifier<EOL>"}
{"signature": "if (ktElement.destructuringDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>origin = IrDeclarationOrigin.DESTRUCTURED_OBJECT_PARAMETER<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val checkNotNullSymbol =", "body": "context.irBuiltIns.checkNotNullSymbol<EOL>"}
{"signature": "val globalCount =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "if (declaration is IrSimpleFunction && declaration.isAccessorForOverriddenExternalField()) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.enqueue(declaration.correspondingPropertySymbol!!.owner, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val topLevelIdSig =", "body": "idSig.topLevelSignature()<EOL>"}
{"signature": "val dependentTypeParameters =", "body": "getDependentTypeParameters(typeVariableConstructor)<EOL>"}
{"signature": "fun addNonLocalTowerDataElements(newElements: List<FirTowerDataElement>) {", "body": "<EOL><INDENT><INDENT>replaceTowerDataContext(towerDataContext.addNonLocalTowerDataElements(newElements))<EOL><INDENT>}"}
{"signature": "var result<NUM_LIT> =", "body": "ULong.MAX_VALUE<EOL>"}
{"signature": "val innerElvisLastBranch =", "body": "innerElvisWhen.branches.last()<EOL>"}
{"signature": "val erasedAdapteeClass =", "body": "getErasedClassForSignatureAdaptation(adapteeType)<EOL>"}
{"signature": "val lombokConfigPath =", "body": "workDir.resolve(<STR_LIT>).also { assert(it.exists()) }<EOL>"}
{"signature": "if (type.isByte() || type.isShort()) {", "body": "<INDENT><INDENT>// There is no special append or valueOf function for byte and short on the JVM.<INDENT><INDENT>return irImplicitCast(expression, context.irBuiltIns.intType)<INDENT>}"}
{"signature": "val kotlinPointed =", "body": "passThroughBridge(<STR_LIT>, CTypes.voidPtr, kotlinPointedType)<EOL>"}
{"signature": "val toDescriptor =", "body": "bridge.to<EOL>"}
{"signature": "val adaptedSource =", "body": "typeAnnotations.fold(text) { result, annotation -> result.replace(<STR_LIT>, <STR_LIT>) }<EOL>"}
{"signature": "val nonDeclaredNames =", "body": "getNonDeclaredClassifierNames() ?: return@lazy null<EOL>"}
{"signature": "val paramsJs =", "body": "parameters<EOL>"}
{"signature": "fun dependencies(paths: Collection<Path>) {", "body": "<EOL><INDENT><INDENT><INDENT>filtersMap.getValue(binaryModuleData.regular) += paths<EOL><INDENT><INDENT>}"}
{"signature": "val originalCall =", "body": "this<EOL>"}
{"signature": "val nodes =", "body": "graph.allNodes()<EOL>"}
{"signature": "if (newName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>RenamedVariant(newName, it)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nullabilityAnnotationOnWildcard =", "body": "extractNullabilityAnnotationOnBoundedWildcard(c, javaType)<EOL>"}
{"signature": "val v<NUM_LIT>SourceDirToUse =", "body": "target.project.file(<STR_LIT>)<EOL>"}
{"signature": "val irParameters =", "body": "valueParameters.drop(firFunction.contextReceivers.size)<EOL>"}
{"signature": "for (testFile in module.files) {", "body": "<EOL><INDENT><INDENT><INDENT>val text = testServices.sourceFileProvider.getContentOfSourceFile(testFile)<EOL><INDENT><INDENT><INDENT>val filePath = tmpDir / testFile.relativePath<EOL><INDENT><INDENT><INDENT>filePath.parent.createDirectories()<EOL><EOL><INDENT><INDENT><INDENT>val tmpSourceFile = filePath.createFile()<EOL><INDENT><INDENT><INDENT>tmpSourceFile.writeText(text)<EOL><INDENT><INDENT>}"}
{"signature": "val defaultExpressionInfo =", "body": "computeDefaultExpression(defaultStatement, firDefaultStatement, firValuedReturnExpressions)<EOL>"}
{"signature": "when (dependency.group) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> configurationTimeMetrics.put(BooleanMetrics.ENABLED_DAGGER, true)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> configurationTimeMetrics.put(BooleanMetrics.ENABLED_DATABINDING, true)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (context.trace.bindingContext.getType(argExpression)?.isDynamic() == true && arg.getSpreadElement() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJs.WRONG_OPERATION_WITH_DYNAMIC.on(arg.asElement(), <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val provider =", "body": "createReferenceInformationProvider()<EOL>"}
{"signature": "if (<!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>toBeOrNot<!>() && <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>toBeOrNot<!>()) {", "body": "}"}
{"signature": "fun testInlineCallInExpressionBody() {", "body": "<INDENT>// CHECK_NOT_CALLED_IN_SCOPE: scope=testInlineCallInExpressionBody$test function=Unit_getInstance<INDENT>fun test() = inlineDemo()<INDENT>val x = test()<INDENT>assertEquals(flushDemoCallCounter(), <NUM_LIT>)<INDENT>assertEquals(x.toString(), <STR_LIT>)}"}
{"signature": "val integer =", "body": "if (subject.type.isNullable())<EOL>"}
{"signature": "val isStart =", "body": "instruction.isStartInstruction(traversalOrder)<EOL>"}
{"signature": "val compiler =", "body": "KJvmReplCompilerWithIdeServices()<EOL>"}
{"signature": "val containingClassTypeConstructorParameters =", "body": "parents.firstIsInstanceOrNull<ClassDescriptor>()?.typeConstructor?.parameters.orEmpty()<EOL>"}
{"signature": "val suspendOrReturnFunctionSymbol =", "body": "context.intrinsics.suspendOrReturnFunctionSymbol<EOL>"}
{"signature": "fun testPersistedDeserialization(hexValue: String, expected: Any) {", "body": "<EOL><INDENT><INDENT>val actual = deserializeFromHex<Any>(hexValue)<EOL><INDENT><INDENT>assertEquals(expected, actual)<EOL><INDENT>}"}
{"signature": "val totalBytes =", "body": "connection.contentLengthLong<EOL>"}
{"signature": "for (dir in sourceSet.sourceDirectories) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sourceRoots += PSourceRoot(dir, if (sourceSet.forTests) Kind.TEST else Kind.PRODUCTION)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var applicationName =", "body": "project.name<EOL>"}
{"signature": "val testCompilationFactory =", "body": "TestCompilationFactory()<EOL>"}
{"signature": "if (A().b) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val fragmentGenerators =", "body": "compilerForIC.compile(loadedIr.loadedFragments.values, dirtyFilesForCompiling)<EOL>"}
{"signature": "while (length-- > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>readElement()<EOL><INDENT><INDENT>}"}
{"signature": "val ordinal =", "body": "entryProto.getExtensionOrNull(KlibMetadataProtoBuf.enumEntryOrdinal)<EOL>"}
{"signature": "fun setBackgroundColorWithAnotherMethod(color: Int) {", "body": "<EOL><INDENT><INDENT>this.backgroundColor = color<EOL><INDENT><INDENT>setBackgroundColor(color)<EOL><INDENT>}"}
{"signature": "val isDefinitelyVisited =", "body": "invocationKind?.isDefinitelyVisited() == true<EOL>"}
{"signature": "fun registerVersionSpecificAppExtensionPoints(area: ExtensionsArea) {", "body": "<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>CoreApplicationEnvironment.registerExtensionPoint(area, ClsCustomNavigationPolicy.EP_NAME, ClsCustomNavigationPolicy::class.java)<EOL><INDENT><INDENT>CoreApplicationEnvironment.registerExtensionPoint(area, JavaModuleSystem.EP_NAME, JavaModuleSystem::class.java)<EOL><INDENT>}"}
{"signature": "when (size) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> emptySet()<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> setOf(if (this is List) this[<NUM_LIT>] else iterator().next())<EOL><INDENT><INDENT><INDENT>else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))<EOL><INDENT><INDENT>}"}
{"signature": "val orExprs =", "body": "mutableListOf<IrExpression>()<EOL>"}
{"signature": "val brokenClass =", "body": "BrokenClass(brokenPackage.qualifiedName, <STR_LIT>, manager)<EOL>"}
{"signature": "val FATAL_DEPRECATION_MESSAGE =", "body": "<STR_LIT> +<EOL>"}
{"signature": "var hasRequiredFields =", "body": "false<EOL>"}
{"signature": "val factories =", "body": "VariantImplementationFactoriesConfigurator.get(gradle)<EOL>"}
{"signature": "if (!expectedFile.isFile) {", "body": "<EOL><INDENT><INDENT><INDENT>expectedFile.createNewFile()<EOL><INDENT><INDENT><INDENT>expectedFile.writeText(actualNormalized)<EOL><EOL><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val DeprecatedSinceKotlin =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val longTarget<NUM_LIT> =", "body": "LINUX_ARM<NUM_LIT>name<EOL>"}
{"signature": "fun processCallableReferenceAccess(callableReferenceAccess: FirCallableReferenceAccess) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (callableReferenceAccess.dispatchedWithoutImport) return<EOL><INDENT><INDENT><INDENT><INDENT>processErrorNameReference(callableReferenceAccess)<EOL><EOL><INDENT><INDENT><INDENT><INDENT>val referencedByName = callableReferenceAccess.callableReferenceName ?: return<EOL><INDENT><INDENT><INDENT><INDENT>saveCallable(callableReferenceAccess, referencedByName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (configuration.get(CommonConfigurationKeys.USE_FIR) == true) {", "body": "<EOL><INDENT><INDENT><INDENT>processSourceModuleWithK<NUM_LIT>(environmentForJS, libraries, friendLibraries, arguments, outputKlibPath)<EOL><INDENT><INDENT>}"}
{"signature": "val doubleIterator =", "body": "getPrimitiveIterator(PrimitiveType.DOUBLE)<EOL>"}
{"signature": "val appNodeFetchVersion =", "body": "moduleVersion(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun unitTestVariant(configure: KotlinAndroidTargetVariantDsl.() -> Unit) {", "body": "<EOL><INDENT><INDENT>unitTestVariant.configure()<EOL><INDENT>}"}
{"signature": "fun test(){", "body": "<INDENT>val x = foo(array(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) // Should infer type 'Int'<INDENT>//<INDENT><INDENT><INDENT>^--- public final fun <T : kotlin.Any? > array(vararg t : DONT_CARE) : kotlin.Array<DONT_CARE> defined in Kotlin<INDENT>//<INDENT>   ^--- public final fun <E : kotlin.Any? > foo(items t : kotlin.Array<DONT_CARE>) : kotlin.Array<DONT_CARE> defined in root package<INDENT>checkSubtype<Array<Int>>(x)}"}
{"signature": "val topMostCallFrame =", "body": "waitForPauseEvent().callFrames[<NUM_LIT>]<EOL>"}
{"signature": "val kotlinDebugKey =", "body": "extrasKeyOf<Any>(<STR_LIT>)<EOL>"}
{"signature": "package visibility<EOL>.", "body": ""}
{"signature": "val tempRootDir =", "body": "System.getProperty(<STR_LIT>) ?: System.getProperty(<STR_LIT>) ?: <STR_LIT><EOL>"}
{"signature": "val el =", "body": "l<NUM_LIT>find { it.first == <NUM_LIT> } ?: return<EOL>"}
{"signature": "val postponedArgumentsWithRevisableType =", "body": "postponedArguments<EOL>"}
{"signature": "val psiToFir =", "body": "hashMapOf<KtElement, FirDeclaration>()<EOL>"}
{"signature": "when (incrementalChanges) {", "body": "<EOL><INDENT><INDENT><INDENT>is KaptIncrementalChanges.Unknown -> Pair(emptyList<File>(), emptyList<String>())<EOL><INDENT><INDENT><INDENT>is KaptIncrementalChanges.Known -> Pair(incrementalChanges.changedSources.toList(), incrementalChanges.changedClasspathJvmNames)<EOL><INDENT><INDENT>}"}
{"signature": "val haveFilesWithoutNumbers =", "body": "testDataDir.walkTopDown().any { it.name.matches(<STR_LIT>.toRegex()) }<EOL>"}
{"signature": "val IGNORED_ATTRIBUTES =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val newReificationArgument =", "body": "reificationArgument.combine(mapping.reificationArgument)<EOL>"}
{"signature": "val PREAMBLE_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val mingwX<NUM_LIT> =", "body": "Unit<EOL>"}
{"signature": "val defaultParams =", "body": "mutableListOf<JsParameter>()<EOL>"}
{"signature": "val ignored =", "body": "skipIgnored && InTextDirectivesUtils.isIgnoredTarget(targetBackend, directives, false)<EOL>"}
{"signature": "val resolvedPropertySymbol =", "body": "calleeReference.resolvedSymbol<EOL>"}
{"signature": "val cfoo =", "body": "C::class.members.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "if (iy == <NUM_LIT>x<NUM_LIT>ff<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) {", "body": "<INDENT><EOL><INDENT><INDENT><INDENT>if (hy < <NUM_LIT>) return one / x; else return x<EOL><INDENT><INDENT>}"}
{"signature": "val repository =", "body": "KonanDistributionRepository(distribution, outputTargets.konanTargets, libraryLoader)<EOL>"}
{"signature": "if (!candidateDescriptor.isOperator && callComponents.statelessCallbacks.isOperatorCall(kotlinCall)) {", "body": "<EOL><INDENT><INDENT><INDENT>addDiagnostic(InvokeConventionCallNoOperatorModifier)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until 1<NUM_LIT>) {", "body": "<EOL><INDENT>  v.value = newValue<EOL><INDENT>  plan.execute()<EOL><INDENT>}"}
{"signature": "fun testTypeMismatch(a: String?, b: Any) {", "body": "<EOL><INDENT>doInt(<!TYPE_MISMATCH!>a ?: b<!>)<EOL>}"}
{"signature": "val isReportedByErrorNodeDiagnosticCollector =", "body": "initializer is FirCall && initializer.toReference(context.session)?.isError() == true<EOL>"}
{"signature": "val blockExitNode =", "body": "graph.exitNode.previousNodes.lastOrNull { it is BlockExitNode } ?: return<EOL>"}
{"signature": "val ITERATOR =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "for ((i, _) in (<NUM_LIT>.'c' - 'a').withIndex()) {", "body": "<EOL><INDENT><INDENT>r += i.toString()<EOL><INDENT>}"}
{"signature": "if (declaration is D && signature.hasTheSameSignature(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>return declaration<EOL><INDENT><INDENT>}"}
{"signature": "package is omitted to get declarations directly under the module<EOL>.", "body": ""}
{"signature": "val none<NUM_LIT> =", "body": "parcelableCreator<NullableWrapper>().createFromParcel(parcel)<EOL>"}
{"signature": "val secondJar =", "body": "tmpdir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val groupedByParentClassId =", "body": "FactoryMap.create<CirEntityId, MutableList<ClassEntry>> { ArrayList() }<EOL>"}
{"signature": "val sessionFlagRead =", "body": "sessionFlagFile<EOL>"}
{"signature": "val minStart<NUM_LIT> =", "body": "minStart(<EOL>"}
{"signature": "val declaringClass =", "body": "containingDeclaration as? ClassDescriptor<EOL>"}
{"signature": "fun foobar() {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>module<NUM_LIT>compile {<EOL><INDENT><INDENT><INDENT><INDENT>assertCompiledSources(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>assertAddedOutputs(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val withType =", "body": "LLVMConstBitCast(withBits, type)!!<EOL>"}
{"signature": "fun checkHashMap(obj: Any) {", "body": "<EOL><INDENT>assertTrue(obj is HashMap<*, *>, <STR_LIT>)<EOL><INDENT>assertTrue(obj is MutableMap<*, *>, <STR_LIT>)<EOL><INDENT>assertTrue(obj is Map<*, *>, <STR_LIT>)<EOL><INDENT>assertTrue((obj as Map<*, *>).values is Collection, <STR_LIT>)<EOL><INDENT>assertTrue((obj as Map<*, *>).keys is Set, <STR_LIT>)<EOL>}"}
{"signature": "if (!blockExitNode.isDead) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirErrors.NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY, context)<EOL><INDENT><INDENT>}"}
{"signature": "val mh =", "body": "MethodHandles.lookup().findVirtual(<EOL>"}
{"signature": "if (!hasSuitableConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>EXTERNAL_SERIALIZER_NO_SUITABLE_CONSTRUCTOR.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classDescriptor.defaultType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serializableKType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parametersCount.toString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsNameAnnotation =", "body": "AnnotationsUtils.getJsNameAnnotation(this) ?: return null<EOL>"}
{"signature": "var complexCondition =", "body": "false<EOL>"}
{"signature": "val pointerSize =", "body": "generationState.runtime.pointerSize<EOL>"}
{"signature": "if (value >= java.lang.Short.MIN_VALUE && value <= java.lang.Short.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IntInsnNode(Opcodes.SIPUSH, value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (status.modality == Modality.OPEN && containingClass?.status?.modality == Modality.FINAL) {", "body": "<EOL><INDENT><INDENT>true -> Modality.FINAL<EOL><INDENT><INDENT>false -> status.modality<EOL><INDENT>}"}
{"signature": "fun testComplexLoopTest() {", "body": "<EOL><INDENT>val testClass = ComplexLoopTest()<EOL><INDENT>testClass.test()<EOL>}"}
{"signature": "val BACKSLASH =", "body": "'\\\\'<EOL>"}
{"signature": "fun save(output: DataOutput, snapshot: PackageFacadeKotlinClassSnapshot) {", "body": "<EOL><INDENT><INDENT>ClassIdExternalizer.save(output, snapshot.classId)<EOL><INDENT><INDENT>LongExternalizer.save(output, snapshot.classAbiHash)<EOL><INDENT><INDENT>NullableValueExternalizer(KotlinClassInfoExternalizer).save(output, snapshot.classMemberLevelSnapshot)<EOL><INDENT><INDENT>SetExternalizer(StringExternalizer).save(output, snapshot.packageMemberNames)<EOL><INDENT>}"}
{"signature": "val parsedValue =", "body": "JvmClosureGenerationScheme.fromString(value)<EOL>"}
{"signature": "val fA =", "body": "FloatArray(<NUM_LIT>)<EOL>"}
{"signature": "val parameterCount =", "body": "method.parameterList.parametersCount<EOL>"}
{"signature": "if (target.family == Family.MINGW) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>configuration.report(CompilerMessageSeverity.STRONG_WARNING, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setFixed() {", "body": "<EOL><INDENT><INDENT>isFixed = true<EOL><INDENT>}"}
{"signature": "val FACADE_CLASS_ATTRIBUTES =", "body": "Opcodes.ACC_PUBLIC or Opcodes.ACC_FINAL or Opcodes.ACC_SUPER<EOL>"}
{"signature": "import messaging.", "body": "*<EOL>"}
{"signature": "val executeTaskNames =", "body": "allTasks.filter { it.enabled }.map { it.name }.toSet()<EOL>"}
{"signature": "val classNodes =", "body": "CommonizerMap<CirEntityId, CirClassNode>()<EOL>"}
{"signature": "when (TypeCheckingProcedure.getEffectiveProjectionKind(argument.typeParameter!!, argument.projection)!!) {", "body": "<INDENT><INDENT><INDENT><INDENT>EnrichedProjectionKind.OUT -> position<INDENT><INDENT><INDENT><INDENT>EnrichedProjectionKind.IN -> position.opposite()<INDENT><INDENT><INDENT><INDENT>EnrichedProjectionKind.INV -> INVARIANT<INDENT><INDENT><INDENT><INDENT>EnrichedProjectionKind.STAR -> null // CONFLICTING_PROJECTION error was reported<INDENT><INDENT><INDENT>}"}
{"signature": "if (hasConstructorWithCapacity) {", "body": "<INDENT><INDENT><INDENT><INDENT>v.load(sizeVarIndex, Type.INT_TYPE)<INDENT><INDENT><INDENT><INDENT>v.invokespecial(collectionType.internalName, <STR_LIT>, <STR_LIT>, false) // -> list<INDENT><INDENT><INDENT>}"}
{"signature": "val classTypeParameters =", "body": "(getMethod.containingDeclaration as ClassDescriptor).typeConstructor.parameters<EOL>"}
{"signature": "val diagnosticsPerFile =", "body": "testServices.firDiagnosticCollectorService.getFrontendDiagnosticsForModule(info)<EOL>"}
{"signature": "val typeParameters =", "body": "type.constructor.parameters<EOL>"}
{"signature": "fun visitClassType(name: String) {", "body": "<EOL><INDENT><INDENT>push(ClassType, name = name)<EOL><INDENT>}"}
{"signature": "val recompiledFilesToCheck =", "body": "incrementalArtifact.allFiles()<EOL>"}
{"signature": "if (a == null || throw Exception()) {", "body": "<EOL><INDENT><INDENT>a<!UNSAFE_CALL!>.<!>foo()<EOL><INDENT>}"}
{"signature": "val exampleAnn =", "body": "<STR_LIT><EOL>"}
{"signature": "val argumentTranslator =", "body": "CallArgumentTranslator(resolvedCall, receiver, innerContext)<EOL>"}
{"signature": "val INLINE_NOSOURCES_CHEAP_MODULE_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "var hasTitle =", "body": "false<EOL>"}
{"signature": "fun setSomething(s: String) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val p<NUM_LIT>BuildGradleKtsContent =", "body": "p<NUM_LIT>BuildGradleKts.readText()<EOL>"}
{"signature": "if (kind.psiClassLoading) {", "body": "<EOL><INDENT><INDENT><INDENT>useMetaTestConfigurators(::PsiClassFilesReadingForCompiledJavaTestSuppressor)<EOL><INDENT><INDENT>}"}
{"signature": "val whenExpressionFilePathToEnumClass =", "body": "ConcurrentHashMap<String, MutableSet<String>>()<EOL>"}
{"signature": "if (root.packagePrefix != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>, JAVA_SOURCE_PACKAGE_PREFIX, <STR_LIT><STR_LIT>\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import lib<NUM_LIT>B<EOL>.", "body": ""}
{"signature": "if (androidSourceSet.aidl.srcDirs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>androidSourceSet.aidl.srcDir(KotlinSourceSetFactory.defaultSourceFolder(project, kotlinSourceSet.name, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (idx == <NUM_LIT> || tokens[idx - <NUM_LIT>] == KtTokens.WHITE_SPACE && StringUtil.containsLineBreak(getter[idx - <NUM_LIT>])) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result = idx<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (smartCasts.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (!mbs.isRegistered(beanName)) {", "body": "<EOL><INDENT><INDENT><INDENT>mbs.registerMBean(StandardMBean(service, beanInterfaceType), beanName)<EOL><INDENT><INDENT><INDENT>services[qualifier] = service<EOL><INDENT><INDENT><INDENT>logger.debug(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val cacheFactory =", "body": "session.firCachesFactory<EOL>"}
{"signature": "val fakeArguments =", "body": "supertype.arguments.map { TypeProjectionImpl(it.projectionKind, DONT_CARE) }<EOL>"}
{"signature": "val l<NUM_LIT> =", "body": "r<EOL>"}
{"signature": "val baseFile =", "body": "testDataFile.withExtension(extension)<EOL>"}
{"signature": "val answerReturnType =", "body": "answerProperty.returnType as? CirClassType<EOL>"}
{"signature": "val expectedDescriptor =", "body": "kotlinType.builtIns.getFunction(typeBridge.numberOfParameters)<EOL>"}
{"signature": "if (rawResult == nativeNullPtr) {", "body": "<EOL><INDENT><INDENT>throw OutOfMemoryError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var remainder =", "body": "quotient % ALPHABET_SIZE<EOL>"}
{"signature": "if (src in aload<NUM_LIT>s) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>toReplace.add(src)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun doTest(data: ByteArray, offset: Int, len: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(cityHash<NUM_LIT>(data, offset, len), _<NUM_LIT>Bit)<EOL><INDENT><INDENT><INDENT>assertEquals(cityHash<NUM_LIT>(data, offset, len), Hash<NUM_LIT>Bits(_<NUM_LIT>BitLow, _<NUM_LIT>BitHigh))<EOL><INDENT><INDENT><INDENT>assertEquals(cityHash<NUM_LIT>WithSeed(kSeed<NUM_LIT>, data, offset, len), Hash<NUM_LIT>Bits(_<NUM_LIT>BitLowSeed, _<NUM_LIT>BitHighSeed))<EOL><INDENT><INDENT>}"}
{"signature": "if (it.containingDeclaration !is BuiltInsPackageFragment && it.extensionReceiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>symbolTable.referenceClassifier(it.extensionReceiverParameter!!.type.constructor.declarationDescriptor!!)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val destructuredParameters =", "body": "getDestructuredParameters(declaration)<EOL>"}
{"signature": "val artifactNameWithoutSuffix =", "body": "artifact.name.removeSuffix(artifactSuffix)<EOL>"}
{"signature": "var classAbiHash =", "body": "mutableMapOf<String, ByteArray>()<EOL>"}
{"signature": "fun setValue(thisRef: Any?, kProperty: Any, newValue: T) {", "body": "<EOL><INDENT><INDENT>_value = newValue<EOL><INDENT>}"}
{"signature": "if (xsb != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (x + tiny < <NUM_LIT>.<NUM_LIT>)<INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT>return tiny - one<INDENT><EOL><INDENT><INDENT>}"}
{"signature": "val staticScope =", "body": "LazyJavaStaticClassScope(c, jClass, this)<EOL>"}
{"signature": "val maxEnd<NUM_LIT> =", "body": "maxEnd(<EOL>"}
{"signature": "fun category() {", "body": "<EOL><INDENT><INDENT>assertTrue('<'<INDENT>  in CharCategory.MATH_SYMBOL)<EOL><INDENT><INDENT>assertTrue(';'<INDENT>  in CharCategory.OTHER_PUNCTUATION)<EOL><INDENT><INDENT>assertTrue('_'<INDENT>  in CharCategory.CONNECTOR_PUNCTUATION)<EOL><INDENT><INDENT>assertTrue('$'<INDENT>  in CharCategory.CURRENCY_SYMBOL)<EOL><INDENT>}"}
{"signature": "if (conditionWhenTrue != null) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(ConditionalEffect(conditionWhenTrue, ESReturns(ESConstants.trueValue)))<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinEnumsFqn =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (consumerValue == null && androidJvm in candidateValues && jvm in candidateValues) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>closestMatch(jvm)<EOL><INDENT><INDENT><INDENT><INDENT>return@with<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!flag) {", "body": "<EOL><INDENT><INDENT>it<EOL><INDENT>}"}
{"signature": "val rs =", "body": "atomic<String>(<STR_LIT>)<EOL>"}
{"signature": "val namesTopDownLeave =", "body": "HashSet<String>()<EOL>"}
{"signature": "when (function.nameOrSpecialName) {", "body": "<INDENT><INDENT><INDENT><INDENT>OperatorNameConventions.EQUALS -> cache.equalsSymbol<INDENT><INDENT><INDENT><INDENT>OperatorNameConventions.HASH_CODE -> cache.hashCodeSymbol<INDENT><INDENT><INDENT><INDENT>OperatorNameConventions.TO_STRING -> cache.toStringSymbol<INDENT><INDENT><INDENT><INDENT>else -> return@runIf // componentN functions are the same for all sessions<INDENT><INDENT><INDENT>}"}
{"signature": "val delegatedConstructorCall =", "body": "this as? FirDelegatedConstructorCall ?: return null<EOL>"}
{"signature": "fun clearModule() {", "body": "<EOL><INDENT>  _builder.clearModule()<EOL><INDENT>}"}
{"signature": "val serialDescriptorGetter =", "body": "<EOL><INDENT><INDENT><INDENT>serializerIrClass.getPropertyGetter(SERIAL_DESC_FIELD)!!.owner<EOL>"}
{"signature": "val typeTranslator =", "body": "context.typeTranslator<EOL>"}
{"signature": "fun test<NUM_LIT>(foo: String?) {", "body": "<EOL><INDENT>foo == null && return<EOL><INDENT>foo<!UNSAFE_CALL!>.<!>length<EOL>}"}
{"signature": "val compilerOption =", "body": "<STR_LIT><EOL>"}
{"signature": "val CACHED_FIND_VIEW_BY_ID_METHOD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun updateJavaClasspath(javaClasspath: MutableList<String>) {", "body": "<EOL><INDENT><INDENT>javaClasspath += layoutlibJar.path<EOL><INDENT>}"}
{"signature": "val directiveToIgnoreSymbolRestore =", "body": "directives.doNotCheckSymbolRestoreDirective()<EOL>"}
{"signature": "var isModified =", "body": "false<EOL>"}
{"signature": "val uai =", "body": "ua.toUInt()<EOL>"}
{"signature": "val base<NUM_LIT>UrlEncodeMap =", "body": "byteArrayOf(<EOL>"}
{"signature": "val testsAmount =", "body": "if (ignored == <NUM_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun noDefaultLibs(flag: Boolean) {", "body": "<EOL><INDENT><INDENT>noDefaultLibs = flag<EOL><INDENT>}"}
{"signature": "val VisibilityClassId =", "body": "ClassId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val allPackagePartsMetadataCheckers =", "body": "listOf(<EOL>"}
{"signature": "fun visitQualifiedAccessExpression(qualifiedAccessExpression: FirQualifiedAccessExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allQualifiedAccessExpressionCheckers.check(qualifiedAccessExpression, data)<EOL><INDENT>}"}
{"signature": "import DefaultHttpClient.", "body": "client<EOL>"}
{"signature": "import testProject.", "body": "`new-mpp-cocoapods-template`.src.iosX<NUM_LIT>Main.kotlin.foo<EOL>"}
{"signature": "val knownVirtualFileSources =", "body": "mutableMapOf<String, VirtualFileScriptSource>()<EOL>"}
{"signature": "val methodParameterTypes =", "body": "Type.getArgumentTypes(methodNode.desc)<EOL>"}
{"signature": "fun expectActualTracker_report(expectedFilePath: String, actualFilePath: String) {", "body": "<EOL><INDENT><INDENT>expectActualTracker!!.report(File(expectedFilePath), File(actualFilePath))<EOL><INDENT>}"}
{"signature": "if (NameSuggestion.sanitizeName(name) != name) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJs.NAME_CONTAINS_ILLEGAL_CHARS.on(reportOn))<EOL><INDENT><INDENT>}"}
{"signature": "val fileWithSpacesInPath =", "body": "projectPath.resolve(<STR_LIT>).toFile()<EOL>"}
{"signature": "fun test(foo: Foo, bar: Bar) {", "body": "<EOL><INDENT>foo.ok(<NUM_LIT>)<EOL><INDENT>foo.ok(<NUM_LIT>, <STR_LIT>)<EOL><INDENT>bar.ok(<NUM_LIT>)<EOL><INDENT>bar.ok(<NUM_LIT>, <STR_LIT>)<EOL>}"}
{"signature": "if (x == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><!NON_TAIL_RECURSIVE_CALL!>test<!>(<NUM_LIT>)<EOL><INDENT><INDENT>return <NUM_LIT> + <!NON_TAIL_RECURSIVE_CALL!>test<!>(x - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val componentName =", "body": "DataClassDescriptorResolver.createComponentName(n)<EOL>"}
{"signature": "val builtInFile =", "body": "split.second<EOL>"}
{"signature": "val embedBitcodeMode =", "body": "project.objects.property(org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode::class.java)<EOL>"}
{"signature": "val classpathRoots =", "body": "compilerConfiguration[CLIConfigurationKeys.CONTENT_ROOTS, emptyList()]<EOL>"}
{"signature": "val dependencyCache =", "body": "incrementalCaches[oldDependencyLibFile] ?: continue<EOL>"}
{"signature": "val hs =", "body": "HashSet<String>()<EOL>"}
{"signature": "val ENUM_ENTRIES =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun testProperty(nc: C?) {", "body": "<EOL><INDENT>nc?.p++<EOL>}"}
{"signature": "val SERIALIZER_CLASS_NAME =", "body": "Name.identifier(SERIALIZER_CLASS)<EOL>"}
{"signature": "val landingpad =", "body": "gxxLandingpad(<NUM_LIT>)<EOL>"}
{"signature": "val kotlinCall =", "body": "firstResolvedCall.psiKotlinCall<EOL>"}
{"signature": "if (i != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>useInt(this@A.i)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.origin != IrDeclarationOrigin.PROPERTY_BACKING_FIELD) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>renderDeclaredIn(declaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val severity =", "body": "if (isUseOldBackendAllowed()) WARNING else ERROR<EOL>"}
{"signature": "val targetTask =", "body": "registerLinkFrameworkTask(<EOL>"}
{"signature": "val FAT_FIRST_MACHO_OFFSET_OFFSET =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "if (receiverGroup != null && other.receiverGroup != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (receiverGroup != other.receiverGroup) return false<EOL><INDENT><INDENT>}"}
{"signature": "val sourceMapContentEmbedding =", "body": "config.sourceMapContentEmbedding<EOL>"}
{"signature": "val oldProtoMap =", "body": "translationResults[srcFile]?.metadata?.let { protoData(srcFile, it) } ?: emptyMap()<EOL>"}
{"signature": "val argTypes =", "body": "Type.getArgumentTypes(cur.desc)<EOL>"}
{"signature": "if (indexInClass >= <NUM_LIT> && indexInClass <= clazz.typeParameters.lastIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return clazz.typeParameters[indexInClass]<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val parameterToArgument =", "body": "mutableListOf<ParameterToArgument>()<EOL>"}
{"signature": "if (Type.getType(localVariableNode.desc).sort != Type.OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isFunctionReference(x) && name != null) {", "body": "<EOL><INDENT><INDENT><INDENT>tracker.markReachable(name)<EOL><INDENT><INDENT>}"}
{"signature": "var varWithBackingFieldAndAccessors =", "body": "<NUM_LIT><EOL>"}
{"signature": "val exportForwardDeclarations =", "body": "configuration.exportForwardDeclarations.toMutableList()<EOL>"}
{"signature": "val originalExtensionReceiverType =", "body": "substitutedDescriptor.original.extensionReceiverParameter?.type<EOL>"}
{"signature": "val primaryArtifactFile =", "body": "temporaryFolder.newFile(<STR_LIT>)<EOL>"}
{"signature": "val dynamicReceiver =", "body": "getDynamicReceiver(dispatchReceiverValue, extensionReceiverValue)<EOL>"}
{"signature": "val allCharsByCategory =", "body": "(Char.MIN_VALUE..Char.MAX_VALUE).groupBy { it.category }<EOL>"}
{"signature": "val subReturnType =", "body": "subDescriptor.returnType!!<EOL>"}
{"signature": "fun onCreate(savedInstanceState: Bundle?) {", "body": "<EOL><INDENT><INDENT>super.onCreate(savedInstanceState)<EOL><INDENT><INDENT>setContentView(R.layout.activity_main)<EOL><INDENT>}"}
{"signature": "import weatherForecast.", "body": "*;<EOL>"}
{"signature": "fun visitCatchClauseEnterNode(node: CatchClauseEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitCatchClauseEnterNode(node)<EOL><INDENT>}"}
{"signature": "val archivesBaseName =", "body": "<STR_LIT><EOL>"}
{"signature": "val setPartiallyAppliedSymbol =", "body": "fir.toPartiallyAppliedSymbol(arrayAccessExpression.arrayExpression) ?: return null<EOL>"}
{"signature": "fun test(a: A<out CharSequence>) {", "body": "<EOL><INDENT>a + <!TYPE_MISMATCH!><STR_LIT><!><EOL><INDENT>a[<NUM_LIT>] = <!TYPE_MISMATCH!><STR_LIT><!><EOL><INDENT>a[<!TYPE_MISMATCH!><STR_LIT><!>]<EOL>}"}
{"signature": "if (!project.kotlinPropertiesProvider.useClasspathSnapshot) {", "body": "<EOL><INDENT><INDENT><INDENT>super.configureClassInspectionForIC(project)<EOL><INDENT><INDENT>}"}
{"signature": "val irConstExpressionTransformer =", "body": "IrConstAllTransformer(<EOL>"}
{"signature": "val defaultAlignment =", "body": "if (isPackedStruct) <NUM_LIT>L else it.typeAlign<EOL>"}
{"signature": "val negativeTestString =", "body": "<STR_LIT><EOL>"}
{"signature": "val classFqNameToSourceMap =", "body": "registerMap(ClassFqNameToSourceMap(CLASS_FQ_NAME_TO_SOURCE.storageFile, icContext))<EOL>"}
{"signature": "val previousVersion =", "body": "JvmMetadataVersion(previousVersionIntArray[<NUM_LIT>], previousVersionIntArray[<NUM_LIT>], previousVersionIntArray[<NUM_LIT>])<EOL>"}
{"signature": "fun assertEquals(first: Any?, second: Any?) {", "body": "<EOL><INDENT>if (first != second) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "val javaBin =", "body": "javaHome + separator + <STR_LIT> + separator + <STR_LIT><EOL>"}
{"signature": "fun visitTypeRefWithNullability(typeRefWithNullability: FirTypeRefWithNullability, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allTypeRefCheckers.check(typeRefWithNullability, data)<EOL><INDENT>}"}
{"signature": "val maxSurrogate =", "body": "Char.MAX_SURROGATE.toInt()<EOL>"}
{"signature": "val KT_WITHOUT_FIR_PREFIX =", "body": "<STR_LIT>\"^(.+)(?<!\\.fir)\\.kt$<STR_LIT>\"<EOL>"}
{"signature": "val taskConfigActions =", "body": "ArrayDeque<(TaskProvider<TASK>) -> Unit>()<EOL>"}
{"signature": "val thisPsi =", "body": "source.psi<EOL>"}
{"signature": "for (i in NA .. NB) {", "body": "<EOL><INDENT><INDENT>xs.add(i)<EOL><INDENT><INDENT>if (xs.size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val expectSuffix =", "body": "<STR_LIT><EOL>"}
{"signature": "for ((staticReplacement, original) in inlineClassReplacements.originalFunctionForStaticReplacement) {", "body": "<EOL><INDENT><INDENT><INDENT>if (staticReplacement !is IrSimpleFunction) continue<EOL><INDENT><INDENT><INDENT>val newOriginal = functionSymbolMap[original.symbol]?.owner ?: continue<EOL><INDENT><INDENT><INDENT>val newStaticReplacement = inlineClassReplacements.getReplacementFunction(newOriginal) ?: continue<EOL><INDENT><INDENT><INDENT>functionSymbolMap[staticReplacement.symbol] = newStaticReplacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "val previousType =", "body": "previousConstraint.type<EOL>"}
{"signature": "if (psiElement.isVarArgs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val longRange =", "body": "<NUM_LIT>toLong()..<NUM_LIT>toLong()<EOL>"}
{"signature": "var containsTrue =", "body": "false<EOL>"}
{"signature": "for (followLinks in listOf(false, true)) {", "body": "<EOL><INDENT><INDENT><INDENT>val root = createTempDirectory().cleanupRecursively()<EOL><INDENT><INDENT><INDENT>val src = root.resolve(<STR_LIT>).createFile()<EOL><INDENT><INDENT><INDENT>val dstLink = root.resolve(<STR_LIT>).tryCreateSymbolicLinkTo(src) ?: return<EOL><EOL><INDENT><INDENT><INDENT>src.copyToRecursively(dstLink, followLinks = followLinks, overwrite = true)<EOL><INDENT><INDENT><INDENT>assertFalse(dstLink.isSymbolicLink())<EOL><INDENT><INDENT>}"}
{"signature": "val SOURCE_STUB_VERSION =", "body": "<NUM_LIT><EOL>"}
{"signature": "val blockParents =", "body": "hashMapOf<JsBlock, JsBlock>()<EOL>"}
{"signature": "val klibCacheDirs =", "body": "cacheRootDir.list()<EOL>"}
{"signature": "fun bare(x: Outer<*>.Inner<*, *>.Inner<NUM_LIT>Base, y: Outer<*>.Inner<*, *>.Inner<NUM_LIT>Base<Int>) {", "body": "<EOL><INDENT>if (x is Outer.Inner.Inner<NUM_LIT>) return<EOL><INDENT>if (y is Outer.Inner.Inner<NUM_LIT>) return<EOL><INDENT>if (y is Outer<String>.Inner.<!WRONG_NUMBER_OF_TYPE_ARGUMENTS!>Inner<NUM_LIT><!>) return<EOL><INDENT>if (y is <!WRONG_NUMBER_OF_TYPE_ARGUMENTS!>Outer<!>.Inner<String, Int>.Inner<NUM_LIT><Double>) return<EOL>}"}
{"signature": "val stringUppercaseGenerators =", "body": "mutableListOf<StringUppercaseGenerator>()<EOL>"}
{"signature": "val USHORT_RANGE =", "body": "UShort.MIN_VALUE.toLong()..UShort.MAX_VALUE.toLong()<EOL>"}
{"signature": "when (insn.opcode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Opcodes.POP -> analyzePop(insn, frame)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Opcodes.POP<NUM_LIT> -> analyzePop<NUM_LIT>(insn, frame)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var changes =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun Boo(content: @Composable () -> Unit) {", "body": "<EOL><EOL><INDENT><INDENT>}"}
{"signature": "if (nonBitSet == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return alt xor bits_.get(ch)<EOL><INDENT><INDENT>}"}
{"signature": "val implLookupField =", "body": "MethodHandles.Lookup::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "val foos<NUM_LIT> =", "body": "J<<!UPPER_BOUND_VIOLATED!>T?<!>>()<EOL>"}
{"signature": "val singleElementIntArrayToList =", "body": "<!EVALUATED: `<NUM_LIT>`!>intArrayOf(<NUM_LIT>).toList().size<!><EOL>"}
{"signature": "if (length != splayTreeSize) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun platformSpecificModule(descriptor: ModuleDescriptor) {", "body": "<EOL><EOL><INDENT><INDENT>}"}
{"signature": "val nameToType =", "body": "mutableMapOf<String, DeclaredProcType>()<EOL>"}
{"signature": "val CHAR_POS_LOOKAHEAD<INDENT><INDENT>=", "body": "<NUM_LIT>xe<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or '('.toInt()<EOL>"}
{"signature": "if (declaredImports.add(key)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val name = nameTable[key]!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>importBlock.statements += JsAstUtils.newVar(name, importExpr)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val declarationResolveState =", "body": "resolveState<EOL>"}
{"signature": "val classBound =", "body": "Kotlin::class.java.methods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val functionContext =", "body": "invokingContext<EOL>"}
{"signature": "when (psiElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtFunction -> psiElement.typeReference<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtProperty -> if (descriptor is PropertyGetterDescriptor) psiElement.typeReference else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtPropertyAccessor -> if (descriptor is PropertyGetterDescriptor) psiElement.property.typeReference else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtParameter -> if (descriptor is PropertyGetterDescriptor) psiElement.typeReference else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (operationType === EQ) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>visitAssignment(left, getDeferredValue(right), expression)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var qualifier =", "body": "this<EOL>"}
{"signature": "if (destinationEndIndex < <NUM_LIT> || destinationEndIndex > destinationSize) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IndexOutOfBoundsException(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitSimpleFunction(simpleFunction: FirSimpleFunction, data: FirRecorderData) {", "body": "<EOL><INDENT><INDENT><INDENT>val symbol = simpleFunction.symbol<EOL><INDENT><INDENT><INDENT>registerCallable(symbol, data, data.state.functionMap)<EOL><INDENT><INDENT>}"}
{"signature": "if (classId in kotlinNativePrimitiveClassIds) {", "body": "<EOL><INDENT><INDENT>return ObjCIdType<EOL><INDENT>}"}
{"signature": "val baseSubType =", "body": "capturedType.lowerType() ?: nothingType()<EOL>"}
{"signature": "val dispatchReceiverReference =", "body": "calleeReference<EOL>"}
{"signature": "fun f<NUM_LIT>(p: Out<*>) {", "body": "}<EOL>fun f<NUM_LIT>(p: Inv<*>) {}"}
{"signature": "val testGroupOutputDirPrefix =", "body": "allDirectives[JsEnvironmentConfigurationDirectives.TEST_GROUP_OUTPUT_DIR_PREFIX].first()<EOL>"}
{"signature": "val postponedPCLACalls =", "body": "mutableListOf<FirStatement>()<EOL>"}
{"signature": "if (mode == Mode.ESCAPE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processInEscapeMode()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val k<NUM_LIT>JVMCompilerArgumentsArrayArgumentProperties =", "body": "commonCompilerArgumentsArrayProperties + listOf(<EOL>"}
{"signature": "val lldbTestCases =", "body": "testCases.filter { it.kind == TestKind.STANDALONE_LLDB }<EOL>"}
{"signature": "val irComponentCall =", "body": "callGenerator.generateCall(<EOL>"}
{"signature": "val elementToReportOn =", "body": "classOrigin.element ?: return null<EOL>"}
{"signature": "val tsStart =", "body": "System.currentTimeMillis()<EOL>"}
{"signature": "fun test(expr: B) {", "body": "<EOL><INDENT>checkExactType<A>(<!TYPE_MISMATCH!>expr<!>)<EOL><INDENT>checkExactType<B>(expr)<EOL><INDENT>checkExactType<C>(<!TYPE_MISMATCH!>expr<!>)<EOL><INDENT>checkTypeEquality(A(), <!TYPE_MISMATCH!>expr<!>)<EOL><INDENT>checkTypeEquality(B(), expr)<EOL><INDENT>checkTypeEquality(C(), <!TYPE_MISMATCH!>expr<!>)<EOL>}"}
{"signature": "val groupSeparatorsPerLine =", "body": "(bytesPerLine - <NUM_LIT>) / bytesPerGroup<EOL>"}
{"signature": "fun foo(arg: Any?) {", "body": "<EOL><INDENT>val x = arg <!USELESS_CAST!>as? Any<!> ?: return<EOL><INDENT>arg.hashCode()<EOL><INDENT>x.hashCode()<EOL>}"}
{"signature": "val classesJars =", "body": "listOf(File(distLibDir, <STR_LIT>)).filterExisting()<EOL>"}
{"signature": "val substitutedSuperReturnType =", "body": "typeSubstitutor.substitute(superReturnType, Variance.OUT_VARIANCE)!!<EOL>"}
{"signature": "var usedExtraSlots =", "body": "<NUM_LIT><EOL>"}
{"signature": "val invokeMethodDescriptor =", "body": "lambdaInfo.invokeMethodDescriptor<EOL>"}
{"signature": "if (candidate.isFunctionForExpectTypeFromCastFeature()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>system.addSubtypeConstraint(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>initialType, expectedType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ConeExpectedTypeConstraintPosition,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val commandLine =", "body": "<STR_LIT> <STR_LIT> <STR_LIT><EOL>"}
{"signature": "val myEnum =", "body": "cache.javaCache.getStructure(MY_TEST_DIR.resolve(<STR_LIT>))!! as SourceFileStructure<EOL>"}
{"signature": "val cEnum =", "body": "packageName.child(cEnumName)<EOL>"}
{"signature": "val suggestMakingItFinal =", "body": "containingClass != null &&<EOL>"}
{"signature": "val serializationExceptionMissingFieldName =", "body": "<STR_LIT><EOL>"}
{"signature": "val contextReceiverParameters =", "body": "descriptor.contextReceiverParameters<EOL>"}
{"signature": "val standardOverrideChecker =", "body": "session.firOverrideChecker<EOL>"}
{"signature": "val actualFiles =", "body": "actual.listFiles().orEmpty()<EOL>"}
{"signature": "val samFirType =", "body": "argument.resolvedType.let { it.removeExternalProjections() ?: it }<EOL>"}
{"signature": "val deviceIdProvider =", "body": "project.valueSourceWithExecProviderCompat(XcodeDefaultTestDevicesValueSource::class.java)<EOL>"}
{"signature": "var refinedCandidates =", "body": "candidates<EOL>"}
{"signature": "val nameAndKindToExpectCallables =", "body": "expectClassCallables.groupBy { it.name to it.functionVsPropertyKind }<EOL>"}
{"signature": "if (lightClass == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return NOT_GENERATED_DIRECTIVE<EOL><INDENT><INDENT>}"}
{"signature": "fun testDaemonFallbackStrategy(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestExecutionStrategy(<EOL><INDENT><INDENT><INDENT>gradleVersion,<EOL><INDENT><INDENT><INDENT>KotlinCompilerExecutionStrategy.DAEMON,<EOL><INDENT><INDENT><INDENT>addHeapDumpOptions = false,<EOL><INDENT><INDENT><INDENT>testFallbackStrategy = true,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "for (it in array) {", "body": "<EOL><INDENT><INDENT>sum += it<EOL><INDENT>}"}
{"signature": "import bad.", "body": "prefix.KotlinTestInBadPrefix<EOL>"}
{"signature": "if (Files.isDirectory(dirPath)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendLine(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>appendDirectory(dirPath)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addFieldExpectation(className: String, memberName: String, jvmSignature: String?, genericSignature: String) {", "body": "<EOL><INDENT><INDENT><INDENT>fieldExpectations.add(SignatureExpectation(<STR_LIT>, memberName, jvmSignature, genericSignature))<EOL><INDENT><INDENT>}"}
{"signature": "if (result < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>result = surrogates.matches(startIndex, testString, matchResult)<EOL><INDENT><INDENT>}"}
{"signature": "when (val directlyExpanded = unexpandedConeClassLikeType?.directExpansionType(session) {", "body": "it.expandedConeType }"}
{"signature": "for ((symbol, scope) in overriddenMemberSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val (superIsHiddenFromObjC, superIsRefinedInSwift) = symbol.inheritsRefinedAnnotations(context.session, scope)<EOL><INDENT><INDENT><INDENT><INDENT>if (superIsHiddenFromObjC) isHiddenFromObjC = true else supersNotHiddenFromObjC.add(symbol)<EOL><INDENT><INDENT><INDENT><INDENT>if (superIsRefinedInSwift) isRefinedInSwift = true else supersNotRefinedInSwift.add(symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ep =", "body": "E(<NUM_LIT>)  as E<EOL>"}
{"signature": "val originalBindingContext =", "body": "bindingContext as? CleanableBindingContext<EOL>"}
{"signature": "val lowerTypeAttr =", "body": "TypeUsage.COMMON.toAttributes(isRaw = true).withFlexibility(JavaTypeFlexibility.FLEXIBLE_LOWER_BOUND)<EOL>"}
{"signature": "val adhocValueSourceClass =", "body": "AdhocValueSource::class.java as Class<AdhocValueSource<T>><EOL>"}
{"signature": "val SPEC_DOCS_TC_CONFIGURATION_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "val finalGradleArgs =", "body": "gradleArgs<EOL>"}
{"signature": "when (diagnostic.descriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FunctionInvokeDescriptor -> INVOKE_ON_FUNCTION_TYPE<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is DeserializedCallableMemberDescriptor -> INTEROP_FUNCTION<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> NON_KOTLIN_FUNCTION<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val delegateProperty =", "body": "declarationStorage.createAndCacheIrProperty(<EOL>"}
{"signature": "fun expanded(maxCapacity: Int, newCapacity: Int, buffer: Array<Any?>) {", "body": "<EOL><INDENT>select(buffer.copyOf(newCapacity), toArray(arrayOfNulls(newCapacity)))<EOL>}"}
{"signature": "fun assertNotImplemented(block: () -> Unit) {", "body": "<EOL><INDENT><INDENT>assertFailsWith<NotImplementedError>(block = block)<EOL><INDENT>}"}
{"signature": "var prop =", "body": "S(<STR_LIT>)<EOL>"}
{"signature": "val inheritedMemberErrors =", "body": "CollectErrorInformationForInheritedMembersStrategy(klass, classDescriptor)<EOL>"}
{"signature": "val SERIALIZER =", "body": "KlibMetadataMonolithicSerializer(<EOL>"}
{"signature": "val EVAL_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in a until M) {", "body": "<EOL><INDENT><INDENT>n++<EOL><INDENT>}"}
{"signature": "val cleanUpActions =", "body": "mutableListOf<Pair<Path, (Path) -> Unit>>()<EOL>"}
{"signature": "val declarationParent =", "body": "parent<EOL>"}
{"signature": "val lengthPtr =", "body": "alloc<size_tVar>()<EOL>"}
{"signature": "var testMember<NUM_LIT> =", "body": "4<NUM_LIT><EOL>"}
{"signature": "val encoderType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "fun vein(args: Array<<!WRONG_ANNOTATION_TARGET_WITH_USE_SITE_TARGET!>@file:Anno<!> String>) {", "body": "}<EOL><EOL>fun rain(args: Array<<!WRONG_ANNOTATION_TARGET!>@Anno<!> String>) {}"}
{"signature": "var hasReturn =", "body": "false<EOL>"}
{"signature": "if (copyTaskFromVariantName[variantName] != null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (val converted = convertExpression(expression, errorReason)) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirStatement -> converted<EOL><INDENT><INDENT><INDENT>else -> buildErrorExpression(<EOL><INDENT><INDENT><INDENT><INDENT>expression.toFirSourceElement(),<EOL><INDENT><INDENT><INDENT><INDENT>ConeSimpleDiagnostic(errorReason, DiagnosticKind.ExpressionExpected),<EOL><INDENT><INDENT><INDENT><INDENT>converted,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val lowerWithoutPrefix =", "body": "lowerRendered.substring(lowerPrefix.length)<EOL>"}
{"signature": "if (descriptor.kind.isReal && !descriptor.isKniBridgeFunction() && !descriptor.isDeprecatedTopLevelFunction()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>visitCallableMemberDescriptor(descriptor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (declaration is KtFunction && !declaration.hasDeclaredReturnType() && !declaration.hasBlockBody()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ForceResolveUtil.forceResolveAllContents(descriptor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var anyBaseEnhanced =", "body": "false<EOL>"}
{"signature": "if (leftIsNullable && rightIsNullable) {", "body": "<INDENT><INDENT><INDENT>// The logic system is not complex enough to express a second level of implications this creates:<INDENT><INDENT><INDENT>// if either `== null` then this creates the same implications as a constant null comparison,<INDENT><INDENT><INDENT>// otherwise the same as if the corresponding `...IsNullable` is false.<INDENT><INDENT><INDENT>return<INDENT><INDENT>}"}
{"signature": "fun useAfoo() {", "body": "<EOL><INDENT>A.foo()<EOL>}"}
{"signature": "if (actualDeclaration.isJavaField) {", "body": "<EOL><INDENT><INDENT><INDENT>return ExpectActualMatchingCompatibility.ActualJavaField<EOL><INDENT><INDENT>}"}
{"signature": "val linesByStatement =", "body": "lineNumbersByStatement.getOrPut(it, ::mutableListOf)<EOL>"}
{"signature": "val onCompilationFinished =", "body": "arrayListOf<() -> Unit>()<EOL>"}
{"signature": "if (x is Any || x == null) {", "body": "<EOL><INDENT><INDENT>var k: Any? = x<EOL><INDENT>}"}
{"signature": "if (method is IrSimpleFunction && method.overriddenSymbols.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>return effectiveThrowsClasses(method.overriddenSymbols.first().owner, symbols)<EOL><INDENT>}"}
{"signature": "if (NSThread.isMainThread()) {", "body": "<EOL><INDENT><INDENT>invokerArg!!.callContinuation<NUM_LIT><T<NUM_LIT>, T<NUM_LIT>>()<EOL><INDENT>}"}
{"signature": "val KLIB_PROPERTY_IR_PROVIDER =", "body": "<STR_LIT><EOL>"}
{"signature": "val typeFqNames =", "body": "problemNodes.map { it.containingDeclaration }.map { it.fqNameUnsafe.asString() }.toSortedSet()<EOL>"}
{"signature": "val captureExpressions =", "body": "captures.map { irGet(it) }<EOL>"}
{"signature": "val inferenceAbbreviation =", "body": "inferenceCompatibility.abbreviation<EOL>"}
{"signature": "fun Vector() {", "body": "}"}
{"signature": "val methodToString =", "body": "method.annotatedReturnType.annotations.toList().toString()<EOL>"}
{"signature": "fun testIICmp(x: IICmp) {", "body": "<EOL><INDENT>if (x.iic.compareTo(II(<NUM_LIT>)) != <NUM_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val typesCaches =", "body": "hashMapOf<ClassWithAppliedArguments, Set<IrType>>()<EOL>"}
{"signature": "val bigChunks =", "body": "LongArray(ChunkBucketSize)<EOL>"}
{"signature": "val lowerResult =", "body": "lowerBound.enhanceInflexible(<EOL>"}
{"signature": "val explicitReceiverKind =", "body": "infoProvider.explicitReceiverKind()<EOL>"}
{"signature": "val F<NUM_LIT>_CANON_NAN =", "body": "<NUM_LIT>x<NUM_LIT>FF<NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>L<EOL>"}
{"signature": "fun testSeveralDirs() {", "body": "<EOL><INDENT><INDENT>val dir<NUM_LIT> = writeDir(<STR_LIT>, processors(<STR_LIT>))<EOL><INDENT><INDENT>val dir<NUM_LIT> = writeDir(<STR_LIT>, processors(<STR_LIT>))<EOL><EOL><INDENT><INDENT>val impls = ServiceLoaderLite.findImplementations<Processor>(listOf(dir<NUM_LIT>, dir<NUM_LIT>))<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, impls.size)<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in impls)<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in impls)<EOL><INDENT>}"}
{"signature": "fun acceptBoxed(x: Any?) {", "body": "}<EOL>fun acceptFlattened(x: DPoint) {}"}
{"signature": "if (typeConstructor.isClassTypeConstructor()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return mapClassType(typeConstructor, mode, type, context, sw, materialized)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var compilerSettings =", "body": "CompilerSettings()<EOL>"}
{"signature": "for ((oldFile, newName) in fileEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val newFile = File(moduleSrcDir, newName)<EOL><INDENT><INDENT><INDENT><INDENT>oldFile.copyTo(newFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_NATIVE_BINARY_OPTION_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val DEFAULT_TEXT =", "body": "<!EVALUATED(<STR_LIT>)!><STR_LIT><!><EOL>"}
{"signature": "for (classId in CompanionObjectMapping.allClassesWithIntrinsicCompanions()) {", "body": "<EOL><INDENT><INDENT><INDENT>add(<EOL><INDENT><INDENT><INDENT><INDENT>ClassId.topLevel(FqName(<STR_LIT> + classId.shortClassName.asString() + <STR_LIT>)),<EOL><INDENT><INDENT><INDENT><INDENT>classId.createNestedClassId(SpecialNames.DEFAULT_NAME_FOR_COMPANION_OBJECT)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val SCRIPT_DEFINITIONS_CLASSPATH_OPTION =", "body": "<STR_LIT><EOL>"}
{"signature": "val valueStr =", "body": "values()[<NUM_LIT>].name + Variants.values()[<NUM_LIT>].name<EOL>"}
{"signature": "if (expression.returnTargetSymbol == currentConstructor.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitReturn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>JsIrBuilder.buildReturn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>constructorReplacement.symbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>JsIrBuilder.buildGetValue(selfParameterSymbol),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irClass.defaultType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val byteArraySerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelCreateByteArray, symbols.parcelWriteByteArray)<EOL>"}
{"signature": "if (function.coroutineMetadata!!.hasController) {", "body": "<EOL><INDENT><INDENT><INDENT>instantiation.arguments += JsThisRef()<EOL><INDENT><INDENT>}"}
{"signature": "if (getStackTrace().isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return message ?: <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (config.incrementalCompilationEnvironment?.classpathChanges is ClasspathChanges.ClasspathSnapshotEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>statTags.add(StatTag.ARTIFACT_TRANSFORM)<EOL><INDENT><INDENT>}"}
{"signature": "var useJavac =", "body": "false<EOL>"}
{"signature": "val isJsCodeCall =", "body": "expression.symbol.owner.fqNameWhenAvailable == jsCodeFqName<EOL>"}
{"signature": "if (B(a)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>NA()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (outputJar == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fastJarFs<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (v.i) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> callRecursive(Bad(<NUM_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> Bad(a.callRecursive(Bad(<NUM_LIT>9)).i + callRecursive(Bad(<NUM_LIT>)).i)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> Bad(a.callRecursive(Bad(<NUM_LIT><NUM_LIT>)).i + <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val moduleBuildDir =", "body": "buildDir.resolve(moduleName)<EOL>"}
{"signature": "if (it is KtDeclarationModifierList) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@flatMap it.children.asSequence()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TRANSIENT_ANNOTATION_CLASS_ID =", "body": "ClassId.topLevel(TRANSIENT_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "for (substitutor in substitutors) {", "body": "<EOL><INDENT><INDENT><INDENT>val substitutedDescriptor = inferenceErrorData.descriptor.substitute(substitutor)<EOL><INDENT><INDENT><INDENT>substitutedDescriptors.add(substitutedDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val pluginInMultipleProjectsHolder =", "body": "KotlinPluginInMultipleProjectsHolder(<EOL>"}
{"signature": "else if (byte<NUM_LIT> and <NUM_LIT>xC<NUM_LIT> != <NUM_LIT>x8<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return malformed(<NUM_LIT>, index, throwOnMalformed)<EOL><INDENT>}"}
{"signature": "else if (B(b)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>NA()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isImplementingMethodOfAny(declaredCallableMember)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(METHOD_OF_ANY_IMPLEMENTED_IN_INTERFACE.on(declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val signum =", "body": "if (value < <NUM_LIT>) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val memberParametersCount =", "body": "memberParameterList.parametersCount<EOL>"}
{"signature": "val aB =", "body": "ByteArray(<NUM_LIT>)<EOL>"}
{"signature": "val hierarchyDisjointUnions =", "body": "DisjointUnions<IrClassSymbol>()<EOL>"}
{"signature": "fun bar(k: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>foo(I(k))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>foo(J(k))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is IrConstructor) {", "body": "<INDENT><INDENT><INDENT><INDENT>val constructedClass = (this.parent as IrClass)<INDENT><INDENT><INDENT><INDENT>closureBuilder.declareVariable(constructedClass.thisReceiver)<INDENT><INDENT><INDENT><INDENT>// Include closure of the class in the constructor closure.<INDENT><INDENT><INDENT><INDENT>val classBuilder = constructedClass.closureBuilder<INDENT><INDENT><INDENT><INDENT>closureBuilder.include(classBuilder)<INDENT><INDENT><INDENT>}"}
{"signature": "if (classifier is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>result = result.add(getSyntheticPropertyAndRecordLookups(classifier, name, location))<EOL><INDENT><INDENT>}"}
{"signature": "val DIAGNOSTIC_START_REGEX =", "body": "<STR_LIT>\"\\s*([we]:)?\\s*\\[\\w+ \\| \\w+].*<STR_LIT>\".toRegex()<EOL>"}
{"signature": "val nextNodesToVisit =", "body": "edgesProvider.invoke(nodeToVisit) - visitedAndToVisitNodes<EOL>"}
{"signature": "when (variance) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariance.INV -> ResolveDirection.UNKNOWN<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariance.OUT -> startDirection<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariance.IN -> startDirection.opposite()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lastCondition =", "body": "conditions.lastOrNull()<EOL>"}
{"signature": "val thisWithLabel =", "body": "thisQualifierName(receiver)?.let { <STR_LIT> }<EOL>"}
{"signature": "if (isUnresolvedType(type) && presentableUnresolvedTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(renderError(ErrorUtils.unresolvedTypeAsItIs(type)))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is IncorporationConstraintPosition) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>from.originalPosition()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import MyInterface.", "body": "Nested<EOL>"}
{"signature": "val cacheKey =", "body": "KlibCacheKey(sourceModules, freeCompilerArgs, useHeaders)<EOL>"}
{"signature": "if (nullWhenString(x) == null) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "val extra =", "body": "BridgeGenerationInfo(global.fullName, mirror.info)<EOL>"}
{"signature": "val JVM_OVERLOADS_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun visitDeclaration(declaration: IrDeclarationBase, data: IrDeclaration?) {", "body": "<EOL><INDENT><INDENT>declaration.acceptChildren(this, declaration)<EOL><INDENT>}"}
{"signature": "val javaClasses =", "body": "javaClassFinder.findClasses(classId).filterNot(JavaClass::hasMetadataAnnotation)<EOL>"}
{"signature": "val dependencyLib =", "body": "signatureSrc?.lib ?: libFile<EOL>"}
{"signature": "fun a(href: String, init: A.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val a = initTag(A(), init)<EOL><INDENT><INDENT>a.href = href<EOL><INDENT>}"}
{"signature": "val byPackage =", "body": "this.groupingBy { it.`package` }.eachCount()<EOL>"}
{"signature": "val topLevelNamePrefix =", "body": "abbreviate(configuration.frameworkName)<EOL>"}
{"signature": "if (sign == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>value = -value<EOL><INDENT><INDENT>buffer.set(<NUM_LIT>, CharCodes.MINUS.code.toChar())<EOL><INDENT>}"}
{"signature": "val coneClassLikeType =", "body": "firProperty.returnTypeRef.coneTypeUnsafe<ConeClassLikeType>()<EOL>"}
{"signature": "val thisOrigin =", "body": "IrDeclarationOrigin.DEFINED<EOL>"}
{"signature": "val compileConf =", "body": "context.evaluationConfiguration[compilationConfiguration]<EOL>"}
{"signature": "val requestsBuilder =", "body": "ArtifactRequestBuilder(classifier, extension)<EOL>"}
{"signature": "val DELETED_SESSION_FILE_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "var konanConfig =", "body": "KonanConfig(project, configuration)<EOL>"}
{"signature": "val javaSearchScopeField =", "body": "this::class.java.superclass.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "when (buildScript.extension) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> generateResolvedVariantTaskCodeGroovy(request.configuration, request.dependencyFilter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> generateResolvedVariantTaskCodeKts(request.configuration, request.dependencyFilter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (statement is IrFunction) withinScope(statement) {", "body": "transformFunctionFlat(statement) }"}
{"signature": "val receiverCanBeNull =", "body": "receiverDataFlowValue != null && initialDataFlowInfoForArguments.getStableNullability(receiverDataFlowValue).canBeNull()<EOL>"}
{"signature": "val backoffMilliseconds =", "body": "longArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "var matchStatus =", "body": "ArgumentMatchStatus.SUCCESS<EOL>"}
{"signature": "if (constantValue == null) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.badDescription(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT>argumentExpression ?: expression<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val qPrototype =", "body": "JsNameRef(targetName, prototypeOf(qualifierName, context.staticContext))<EOL>"}
{"signature": "val platformLib =", "body": "platformLibs[platformLibName] ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (verbatim || !isObjectType(llvmCallable.returnType)) {", "body": "<EOL><INDENT><INDENT><INDENT>args<EOL><INDENT><INDENT>}"}
{"signature": "val outputText =", "body": "runCommand(buildSettingsReceivingCommand, logger) { directory(podsXcodeProjDir.parentFile) }<EOL>"}
{"signature": "val isReceiver =", "body": "receiverInfo.isReceiver<EOL>"}
{"signature": "val fieldGetter =", "body": "klass.getPropertyGetter(primaryValueParameter!!.name.identifier)<EOL>"}
{"signature": "if (target is FirField && target.origin == FirDeclarationOrigin.Synthetic.DelegateField) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// delegated field should be resolved in the same context as super types<INDENT><INDENT><INDENT><INDENT><INDENT>resolveOutsideClassBody(target, transformer::transformDelegateField)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (inheritsBridge) {", "body": "<INDENT><INDENT><INDENT><INDENT>target // Bridge is inherited from superclass.<INDENT><INDENT><INDENT>}"}
{"signature": "for (x in xs.indices) {", "body": "<EOL><INDENT><INDENT>println(x)<EOL><INDENT>}"}
{"signature": "val NOT_NULL =", "body": "KtConstantReference<KotlinTypeBean, Nothing?>(<STR_LIT>)<EOL>"}
{"signature": "val mappingFromFrontend =", "body": "FirExpressionEvaluator.evaluateAnnotationArguments(this, session)<EOL>"}
{"signature": "package sx<NUM_LIT><EOL>.", "body": ""}
{"signature": "fun foo(x : B<*>) {", "body": "<EOL><INDENT>bar<NUM_LIT>(x)<EOL><INDENT>bar<NUM_LIT>(x)<EOL>}"}
{"signature": "for (path in paths) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendImport(path)<EOL><INDENT><INDENT><INDENT><INDENT>append('\\n')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package part (e.", "body": "g. it can be <STR_LIT>)<EOL>"}
{"signature": "when (name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> out.println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> out.println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(name)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is ConeDefinitelyNotNullType) {", "body": "<EOL><INDENT><INDENT>return original.enhanceInflexibleType(session, position, qualifiers, index, subtreeSizes, isFromDefinitelyNotNullType = true, convertErrorToWarning)<EOL><INDENT>}"}
{"signature": "fun contract(builder: ContractBuilder.() -> Unit) {", "body": "}"}
{"signature": "val parseRes =", "body": "LLVMParseBitcodeInContext<NUM_LIT>(llvmContext, memoryBuffer, moduleRef.ptr)<EOL>"}
{"signature": "val multifileFacadeMemberToPartMember =", "body": "mutableMapOf<IrSimpleFunction, IrSimpleFunction>()<EOL>"}
{"signature": "package prefix.", "body": "<EOL>"}
{"signature": "when (subnode) {", "body": "<EOL><INDENT><INDENT><INDENT>is MfvcNodeWithSubnodes -> subnode.allUnboxMethods<EOL><INDENT><INDENT><INDENT>is LeafMfvcNode -> listOf(subnode.unboxMethod)<EOL><INDENT><INDENT>}"}
{"signature": "val superQName =", "body": "DescriptorUtils.getFqName(superDescriptor).asString()<EOL>"}
{"signature": "fun abc(fn: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fn()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val sourceInformationEnabled =", "body": "configuration.getBoolean(<EOL>"}
{"signature": "for (argument in annotation.argumentMapping.mapping.values) {", "body": "<EOL><INDENT><INDENT><INDENT>val argumentKind = argument.accept(this, data)<EOL><INDENT><INDENT><INDENT>if (argumentKind != ConstantArgumentKind.VALID_CONST) return argumentKind<EOL><INDENT><INDENT>}"}
{"signature": "fun test(_ab: a.b) {", "body": "<EOL><INDENT>_ab.some_ab()<EOL><EOL><INDENT>val _ab<NUM_LIT> = a.b()<EOL><INDENT>_ab<NUM_LIT>.some_ab()<EOL>}"}
{"signature": "val allElements =", "body": "createResultSet<T>(dequeue.size)<EOL>"}
{"signature": "val deparenthesizedElement =", "body": "KtPsiUtil.deparenthesize(callElement)!!<EOL>"}
{"signature": "for (builder in allLeafBuilders) {", "body": "<EOL><INDENT><INDENT><INDENT>LeafBuilderConfigurationContext(builder).config()<EOL><INDENT><INDENT>}"}
{"signature": "fun endVisit(x: JsArrayAccess, ctx: JsContext<*>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.endVisit(x, ctx)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val OPEN_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "for ((key, values) in entrySet().reversedSet()) {", "body": "<EOL><INDENT><INDENT><INDENT>newMap.putValues(key, values.reversed())<EOL><INDENT><INDENT>}"}
{"signature": "fun visitErrorDeclaration(declaration: IrErrorDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.mangleSimpleDeclaration(MangleConstant.ERROR_DECLARATION)<EOL><INDENT><INDENT>}"}
{"signature": "fun usage(action: String.(Int) -> String) {", "body": "<EOL><INDENT> *   <STR_LIT>.<expr>action</expr>(<NUM_LIT>)<EOL><INDENT> * }"}
{"signature": "val idx =", "body": "text.indexOf(fileDirective)<EOL>"}
{"signature": "val cEnumEntryValueAnnotationName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val partialLinkageEnabled =", "body": "configuration.partialLinkageConfig.isEnabled<EOL>"}
{"signature": "import wrong.", "body": "*<EOL>"}
{"signature": "if (!(a is B) || !(<!USELESS_IS_CHECK!>a is C<!>)) {", "body": "<EOL>  }"}
{"signature": "val basicCallResolutionContext =", "body": "basicCallContext.replaceBindingTrace(variable.resolvedCall.trace)<EOL>"}
{"signature": "if (setterImplicitVisibility == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun testReportFromIntermediateSourceSet(gradleVersion: GradleVersion, @TempDir tempDir: Path) {", "body": "<EOL><INDENT><INDENT>publishLibrary(<STR_LIT>, gradleVersion, tempDir)<EOL><INDENT><INDENT>checkDiagnostics(gradleVersion, <STR_LIT>, tempDir, expectReportForDependency = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val expectedB =", "body": "B(A(<STR_LIT>))<EOL>"}
{"signature": "fun compose(block: @Composable () -> Unit) {", "body": "}"}
{"signature": "val throwStatement =", "body": "JsIrBuilder.buildThrow(nothingType, pendingException())<EOL>"}
{"signature": "val kotlinOrigin =", "body": "<EOL><INDENT><INDENT>declarationForOrigin<EOL>"}
{"signature": "if (entry.useSiteTarget != null && isSuperType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.ANNOTATION_ON_SUPERCLASS.on(languageVersionSettings, entry))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testNativeDependencies(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testNativeDependencies(<STR_LIT>, <STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "if (compileTaskName == taskName || kaptGenerateStubsTaskName == taskName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>compileKotlinTask.configureAction()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val toManyArguments =", "body": "asTextDiagnostic(diagnostics[<NUM_LIT>])<EOL>"}
{"signature": "val origin =", "body": "kotlinOrigin<EOL>"}
{"signature": "fun testGood(x: Any) {", "body": "assertReifiedIs<Function<NUM_LIT><*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>>(x, type) }"}
{"signature": "if (objcGenerics && kotlinType.isTypeParameter()) {", "body": "<EOL><INDENT><INDENT><INDENT>val genericTypeUsage = objCExportScope<EOL><INDENT><INDENT><INDENT><INDENT>.nearestScopeOfType<ObjCClassExportScope>()<EOL><INDENT><INDENT><INDENT><INDENT>?.getGenericTypeUsage(TypeUtils.getTypeParameterDescriptorOrNull(kotlinType))<EOL><INDENT><INDENT><INDENT>if (genericTypeUsage != null)<EOL><INDENT><INDENT><INDENT><INDENT>return genericTypeUsage<EOL><INDENT><INDENT>}"}
{"signature": "when (leftOperand) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirWhenSubjectExpression -> leftOperand.whenRef.value.subject<EOL><INDENT><INDENT><INDENT>else -> leftOperand<EOL><INDENT><INDENT>}"}
{"signature": "val frameOwner =", "body": "callStack.currentFrameOwner as IrTry<EOL>"}
{"signature": "var irDcePrintReachabilityInfo =", "body": "false<EOL>"}
{"signature": "fun after() {", "body": "<EOL><INDENT><INDENT>call(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitDeclaration(declaration: IrDeclarationBase, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDeclaration(declaration)<EOL><INDENT>}"}
{"signature": "val constructedClassSymbol =", "body": "constructedClass.symbol<EOL>"}
{"signature": "var byteIndex =", "body": "startIndex<EOL>"}
{"signature": "val HELPERS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val actualListingLines =", "body": "actualString.split('\\n').toList()<EOL>"}
{"signature": "val testCase<NUM_LIT> =", "body": "generateObjCFrameworkTestCase(<EOL>"}
{"signature": "when (parameter) {", "body": "<EOL><INDENT><INDENT><INDENT>is ConeKotlinType -> checkType(parameter, diagnostic as KtDiagnostic)<EOL><INDENT><INDENT>}"}
{"signature": "val compilerArgs =", "body": "parseCompilerArgumentsFromBuildOutput(K<NUM_LIT>NativeCompilerArguments::class, compileTaskOutput)<EOL>"}
{"signature": "if (irClass.isMultiFieldValueClass && ktClassOrObject is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateAdditionalMembersForMultiFieldValueClasses(irClass, ktClassOrObject)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val statuses =", "body": "overriddenStatuses<EOL>"}
{"signature": "if (simplifiedConstraints != null && isLowerAndFlexibleTypeWithDefNotNullLowerBound) {", "body": "<EOL><INDENT><INDENT><INDENT>clearGroupedConstraintCaches()<EOL><INDENT><INDENT>}"}
{"signature": "fun indexStub(stub: KotlinScriptStub, sink: IndexSink) {", "body": "<EOL><INDENT><INDENT>StubIndexService.getInstance().indexScript(stub, sink)<EOL><INDENT>}"}
{"signature": "fun case<NUM_LIT>(a: A){", "body": "<INDENT>Case<NUM_LIT>.Companion(a)  //ok resolved to (<NUM_LIT>)<INDENT>Case<NUM_LIT>.Companion(parameterA = a) //ok resolved to (<NUM_LIT>)}"}
{"signature": "val sealedSerializer =", "body": "Name.identifier(SpecialBuiltins.sealedSerializer)<EOL>"}
{"signature": "fun ownIndependentInline() {", "body": "<EOL><INDENT><INDENT><INDENT>c<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>c<NUM_LIT>()<EOL><INDENT><INDENT>}"}
{"signature": "fun spray() {", "body": "<EOL><INDENT>val a = Any()<EOL><INDENT>val b = Any()<EOL><INDENT>val c = Any()<EOL><INDENT>val d = Any()<EOL><INDENT>val e = Any()<EOL>}"}
{"signature": "var next =", "body": "if (hasNext) first else finalElement<EOL>"}
{"signature": "val newMutability =", "body": "superQualifiers.mapNotNull { it.mutability }.toSet()<EOL>"}
{"signature": "val indexNVariable =", "body": "(it as? FirPropertyAccessExpression)?.calleeReference?.toResolvedPropertySymbol()?.fir<EOL>"}
{"signature": "for (registration in descriptor.getRegistrations()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>registrationMap.putValue(registration, descriptor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualAnnotation =", "body": "ANNOTATION.render(incompatibilityType.actualAnnotation)<EOL>"}
{"signature": "for (i in <NUM_LIT> until 1<NUM_LIT><NUM_LIT>) {", "body": "<EOL><INDENT>  first.value = i<EOL><INDENT>  plan.execute()<EOL><INDENT>  if (last.value != i)<EOL><INDENT>  alert(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val compileWriter =", "body": "System.out.writer() // FileWriter(<STR_LIT>)"}
{"signature": "val valueKind =", "body": "ConstantValueKind.entries[kindOrdinal]<EOL>"}
{"signature": "val drains =", "body": "mutableListOf<PointsToGraphNode>()<EOL>"}
{"signature": "var currentClass =", "body": "this<EOL>"}
{"signature": "val targetWorker =", "body": "this<EOL>"}
{"signature": "val supers =", "body": "serializableClass.getSuperClassNotAny()<EOL>"}
{"signature": "package name from the relative declaration name in<EOL>.", "body": ""}
{"signature": "val androidStyleInstrumentedTest =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "fun testNum(numX: Number) {", "body": "<EOL><INDENT>assertEquals(true, numX is Number, <STR_LIT>)<EOL><INDENT>assertEquals(true, numX is Int, <STR_LIT>)<EOL><EOL><INDENT>assertEquals(true, numX is Short, <STR_LIT>)<EOL><INDENT>assertEquals(true, numX is Byte, <STR_LIT>)<EOL><INDENT>assertEquals(false, numX is Long, <STR_LIT>)<EOL><EOL><INDENT>assertEquals(true, numX is Double, <STR_LIT>)<EOL><INDENT>assertEquals(true, numX is Float, <STR_LIT>)<EOL>}"}
{"signature": "fun kotlinOptions(fn: Action<KotlinCommonToolOptions>) {", "body": "<EOL><INDENT><INDENT>fn.execute(kotlinOptions)<EOL><INDENT>}"}
{"signature": "if (hx < <NUM_LIT>x<NUM_LIT>c9<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>U) {", "body": "<INDENT><EOL><INDENT><INDENT>t = huge + x<INDENT><EOL><INDENT><INDENT>return x - (t - (huge + x))<EOL><INDENT>}"}
{"signature": "val assignIsSuccessful =", "body": "assignCallReference?.isError == false<EOL>"}
{"signature": "val predefinedClassNames =", "body": "mapOf(<EOL>"}
{"signature": "val linuxMainSourceFile =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val eqCall =", "body": "asEqCall(condition) ?: return null<EOL>"}
{"signature": "for (i in (MC.toInt() + <NUM_LIT>).toChar() downTo MC) {", "body": "<EOL><INDENT><INDENT>++t<EOL><INDENT><INDENT>s += i.toInt()<EOL><INDENT><INDENT>if (t > <NUM_LIT>) throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "import dependency.", "body": "Bar<EOL>"}
{"signature": "fun foo(o: Outer<String>) {", "body": "<EOL><INDENT>val a = o.A<Int>()<EOL><INDENT>println(<expr>a</expr>)<EOL>}"}
{"signature": "val inputDirectory =", "body": "inputDirectoryPath?.File()<EOL>"}
{"signature": "var pos =", "body": "<NUM_LIT><EOL>"}
{"signature": "val savedErr =", "body": "System.err<EOL>"}
{"signature": "val viewType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "val klibCollectionDir =", "body": "project.layout.buildDirectory.dir(<STR_LIT>).get().asFile<EOL>"}
{"signature": "val FILE_FINGERPRINTS_SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testConcurrentAccessToPrivateFunction() {", "body": "<EOL><INDENT><INDENT>compileAndRunProgram(KtTestUtil.getTestDataPathBase() + <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val hasSetterWithBody =", "body": "declaration is KtProperty && declaration.setter?.hasBody() == true<EOL>"}
{"signature": "val compilerOpts   =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val addStdlib =", "body": "<STR_LIT> !in kotlinc.args<EOL>"}
{"signature": "fun foo(p<NUM_LIT>: P?, p<NUM_LIT>: P?) {", "body": "}<EOL><INDENT>fun foo(listener: suspend RS.(P?, P?) -> Unit) {}"}
{"signature": "for (b in arrayOf(<NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>break@outer<EOL><INDENT><INDENT>}"}
{"signature": "if (!onWindows && className.length + methodName.length < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return@lazy KtTestUtil.tmpDirForTest(className, methodName)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinPlatformId =", "body": "<STR_LIT><EOL>"}
{"signature": "val mixed_in_class_f =", "body": "TestMixed().f<EOL>"}
{"signature": "val moduleContentScope =", "body": "GlobalSearchScope.allScope(project)<EOL>"}
{"signature": "val sourceDestinationDir =", "body": "File(workDir, sourceDirName)<EOL>"}
{"signature": "val filteredImprovements =", "body": "filterBenchmarks(detailedReport.improvements)<EOL>"}
{"signature": "val QUANT_PLUS_P =", "body": "QMOD_POSSESSIVE or '+'.toInt()<EOL>"}
{"signature": "fun generateUnboundSymbolsAsDependencies(irProviders: List<IrProvider>) {", "body": "<EOL><INDENT><INDENT>ExternalDependenciesGenerator(context.symbolTable, irProviders).generateUnboundSymbolsAsDependencies()<EOL><INDENT>}"}
{"signature": "val nonEmptyClassReports =", "body": "mutableListOf<ClassReport>()<EOL>"}
{"signature": "val resolverForSpecialInfoName =", "body": "<STR_LIT><EOL>"}
{"signature": "val declarationScopeProvider =", "body": "componentProvider.get<DeclarationScopeProvider>()<EOL>"}
{"signature": "val canSkipExecution =", "body": "buildPreambleStatementsAndReturnIfSkippingPossible(<EOL>"}
{"signature": "val open<NUM_LIT> =", "body": "bindings.open()<EOL>"}
{"signature": "if (completionMode.shouldForkPointConstraintsBeResolved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolveForkPointsConstraints()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (compilerArgumentsClass) {", "body": "<EOL><INDENT><INDENT>K<NUM_LIT>MetadataCompilerArguments::class.java -> k<NUM_LIT>MetadataCompilerArguments as T<EOL><INDENT><INDENT>K<NUM_LIT>JVMCompilerArguments::class.java -> k<NUM_LIT>JvmCompilerArguments as T<EOL><INDENT><INDENT>K<NUM_LIT>JSCompilerArguments::class.java -> k<NUM_LIT>JsCompilerArguments as T<EOL><INDENT><INDENT>else -> commonCompilerArguments as T<EOL><INDENT>}"}
{"signature": "val cacheForIncorporationConfigToSuperDirection =", "body": "ConcurrentHashMap<KotlinTypeMarker, ApproximationResult>()<EOL>"}
{"signature": "val oldOut =", "body": "out<EOL>"}
{"signature": "if (isMainOutput) {", "body": "<EOL><INDENT><INDENT><INDENT>mainIrFragment = irModuleFragment<EOL><INDENT><INDENT>}"}
{"signature": "for (j in <NUM_LIT>.maze.width - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val cell = Pair(i, j)<EOL><INDENT><INDENT><INDENT>print(<EOL><INDENT><INDENT><INDENT><INDENT>if (maze.walls[i][j]) <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else if (cell == maze.start) <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else if (cell == maze.end) <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else if (path != null && path.contains(cell)) <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else <STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val producerValue =", "body": "parseCommonizerTarget(details.producerValue ?: return) as? SharedCommonizerTarget ?: return<EOL>"}
{"signature": "for (argument in valueArgument.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val spread = argument.getSpreadElement() ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.SPREAD_ON_SIGNATURE_POLYMORPHIC_CALL.on(context.languageVersionSettings, spread))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val memberFir =", "body": "memberSymbol.firSymbol.fir as? FirCallableDeclaration ?: return null<EOL>"}
{"signature": "when(z) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> while(false) z += <NUM_LIT><EOL><INDENT><INDENT>else -> while(false) z += 2<NUM_LIT><EOL><INDENT>}"}
{"signature": "val gradleVersion =", "body": "arguments.get().first()<EOL>"}
{"signature": "if (classKind == ClassKind.CLASS && klass.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, KtErrorsParcelize.PARCELABLE_SHOULD_BE_INSTANTIABLE, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(bar: String) {", "body": "<EOL><INDENT>consume(<STR_LIT> <expr>join</expr> bar)<EOL>}"}
{"signature": "val jvmLambdaType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "fun takeInt(i: Int) {", "body": "}<EOL><EOL><INDENT>fun f() {<EOL><INDENT><INDENT>a = A()<EOL><INDENT><INDENT><!SMARTCAST_IMPOSSIBLE!>a<!>.f(true)<EOL><INDENT><INDENT>takeInt(<!SMARTCAST_IMPOSSIBLE!>a<!>.f(<STR_LIT>))<EOL><INDENT><INDENT>a.<!NONE_APPLICABLE!>f<!>()<EOL><INDENT>}"}
{"signature": "if (list.last < descriptorLimit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return list.toDescriptors<FunctionDescriptor>()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun Test(value: InlineClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>used(value)<EOL><INDENT><INDENT><INDENT><INDENT>A()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val signaturesFile =", "body": "testDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (keepClassAsIs || removeClassFromAbi) {", "body": "<INDENT><INDENT><INDENT><INDENT>// We don't care about methods when we remove or keep this class completely.<INDENT><INDENT><INDENT><INDENT>return method<INDENT><INDENT><INDENT>}"}
{"signature": "if (checkIsReifiedR<String>(s)) {", "body": "<EOL><INDENT><INDENT><INDENT>s.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>}"}
{"signature": "val SCRIPT_DEFINITION_MARKERS_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "if (directParent != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return directParent<EOL><INDENT><INDENT>}"}
{"signature": "if (clazz != null && !clazz.isExpect) {", "body": "<EOL><INDENT><INDENT><INDENT>return clazz<EOL><INDENT><INDENT>}"}
{"signature": "package prefix rule, 'a.", "body": "b.c' denotes 'c' in package 'a.b' (thus ab_c, not a_bc)<EOL>"}
{"signature": "val SAFE_PROPERTY_SUFFIXES =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "val functionListGlobal =", "body": "<STR_LIT><EOL>"}
{"signature": "fun takeArrayOfNullableString(x: Array<String?>) {", "body": "}<EOL>fun <K: Any> takeArrayOfNotNullK(x: Array<K>) {}"}
{"signature": "if (xcodeMajorVersion < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assertCommandLineArgumentsContain(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val variableUseState =", "body": "enterData.getOrNull(variableDescriptor)<EOL>"}
{"signature": "val javaIoSerializableFqn =", "body": "<EOL><INDENT><INDENT>FqName(<STR_LIT>).child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (operation == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>flow.addAllStatements(statements)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isReachable(referrer)) {", "body": "<EOL><INDENT><INDENT><INDENT>markReachable(referenced)<EOL><INDENT><INDENT>}"}
{"signature": "val parcelableProperties =", "body": "declaration.parcelableProperties<EOL>"}
{"signature": "val windowed<NUM_LIT> =", "body": "data.windowed(Int.MAX_VALUE, Int.MAX_VALUE, partialWindows)<EOL>"}
{"signature": "val shouldNotBeEscapedFromFile =", "body": "shouldNotBeEscapedFile.readLinesOrNull()?.drop(<NUM_LIT>)<EOL>"}
{"signature": "when (compilerKind) {", "body": "<EOL><INDENT><INDENT><INDENT>CompilerKind.JVM -> sourcesPath / <STR_LIT><EOL><INDENT><INDENT><INDENT>CompilerKind.JS -> sourcesPath / <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val jsUndefined =", "body": "getUndefined()<EOL>"}
{"signature": "val goldenTransformRule =", "body": "<EOL><INDENT><INDENT>GoldenTransformRule(<STR_LIT>)<EOL>"}
{"signature": "val iosX<NUM_LIT>Test =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "if (isReleaseComponent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(component.publishable, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jarConnection =", "body": "this::class.java.getResource(resourcePath).openConnection() as? JarURLConnection<EOL>"}
{"signature": "val gradlePropertiesText =", "body": "propertiesFile.readText()<EOL>"}
{"signature": "if (condition(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(elementToReport, diagnosticFactory, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var needNewLine =", "body": "false<EOL>"}
{"signature": "val currentConstructor =", "body": "expression.symbol.owner<EOL>"}
{"signature": "when (val parent = expression.parent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtParenthesizedExpression, is KtAnnotatedExpression, is KtLabeledExpression -> expression = parent as KtExpression<EOL><INDENT><INDENT><INDENT><INDENT>else -> break@loop<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (assertionInfo != null) {", "body": "<EOL><INDENT><INDENT><INDENT>c.trace.record(JvmBindingContextSlices.RECEIVER_RUNTIME_ASSERTION_INFO, expressionReceiverValue, assertionInfo)<EOL><INDENT><INDENT>}"}
{"signature": "if (kaptMetadata == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DensityCompositionLocal =", "body": "CompositionLocal.of<Density>()<EOL>"}
{"signature": "for (name in listOf(<STR_LIT>, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>out.printDoc(BasePrimitivesGenerator.incDecOperatorsDoc(name), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>out.println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>out.println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>out.println()<EOL><INDENT><INDENT>}"}
{"signature": "val listSerializer =", "body": "IrListParcelSerializer(classifier, elementType, get(elementType, scope, parcelizeType, strict()))<EOL>"}
{"signature": "fun builder(block: suspend Unit.() -> Unit) {", "body": "<EOL><INDENT>block.startCoroutine(Unit, EmptyContinuation)<EOL>}"}
{"signature": "val initModulesMethod =", "body": "compiler.javaClass.getMethod(<STR_LIT>, JavacList::class.java)<EOL>"}
{"signature": "val getAndAddIntFieldIntrinsic =", "body": "<EOL><INDENT><INDENT>context.referenceFunctions(CallableId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>)))<EOL>"}
{"signature": "val parentIsAnnotation =", "body": "dispatchReceiverType<EOL>"}
{"signature": "val supportedByListSerializer =", "body": "setOf(<EOL>"}
{"signature": "val TEST =", "body": "{ <NUM_LIT> }()<EOL>"}
{"signature": "val wasmOutput =", "body": "outputPrefix + <STR_LIT><EOL>"}
{"signature": "val SERIAL_ANNOTATION =", "body": "<STR_LIT><EOL>"}
{"signature": "fun OpenCustom(content: CustomComposable) {", "body": "<EOL><INDENT><INDENT><INDENT>content.call()<EOL><INDENT><INDENT>}"}
{"signature": "if (KotlinTarget.EXPRESSION !in annotation.getAllowedAnnotationTargets(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(annotation.source, FirErrors.WRONG_ANNOTATION_TARGET, <STR_LIT>, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor !is TypeAliasConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT>}"}
{"signature": "fun charArray(c: CharArray) {", "body": "}<EOL><EOL>private fun varargStrings(vararg s: String) {}"}
{"signature": "fun testUsualCall() {", "body": "<EOL><INDENT>val x = demo()<EOL><INDENT>assertEquals(flushDemoCallCounter(), <NUM_LIT>)<EOL><INDENT>assertEquals(x.toString(), <STR_LIT>)<EOL>}"}
{"signature": "val simpleOsName =", "body": "HostManager.platformName()<EOL>"}
{"signature": "if (isDynamicBinaryOperator(expression)) {", "body": "<EOL><INDENT><INDENT><INDENT>return generateDynamicBinaryExpression(expression)<EOL><INDENT><INDENT>}"}
{"signature": "val conditionalProto =", "body": "proto.conditional<EOL>"}
{"signature": "fun assertProduces(radix: Int, input: String, output: T) {", "body": "<EOL><INDENT><INDENT>assertEquals(output, convertOrFail(input, radix))<EOL><INDENT><INDENT>assertEquals(output, convertOrNull(input, radix))<EOL><INDENT>}"}
{"signature": "fun testRandomStringArgumentsJVM() {", "body": "<EOL><INDENT><INDENT>doRandomStringArgumentsTest<K<NUM_LIT>JVMCompilerArguments>()<EOL><INDENT>}"}
{"signature": "fun onNonAccessible() {", "body": "<EOL><INDENT><INDENT>this::x.<!LATEINIT_INTRINSIC_CALL_ON_NON_ACCESSIBLE_PROPERTY!>isInitialized<!><EOL><INDENT>}"}
{"signature": "package sub names, [<STR_LIT>, <STR_LIT>, <STR_LIT>]<EOL>.", "body": ""}
{"signature": "fun incompatibleIdentityRegardlessNullability(a: Int?, b: String?) {", "body": "<EOL><INDENT><!EQUALITY_NOT_APPLICABLE!>a == b<!><EOL><INDENT><!EQUALITY_NOT_APPLICABLE!>a === b<!><EOL>}"}
{"signature": "for (callableSymbol in symbols) {", "body": "<EOL><INDENT><INDENT>if (builder.isNotEmpty()) builder.appendLine()<EOL><INDENT><INDENT>renderer.renderElementAsString(callableSymbol.fir)<EOL><INDENT>}"}
{"signature": "fun A(x: Int, $composer: Composer<*>, $changed: Int) {", "body": "*<INDENT>   var $dirty = ... *<INDENT>   // ... *<INDENT>   B( *<INDENT><INDENT>   x, *<INDENT><INDENT>   <NUM_LIT>, *<INDENT><INDENT>   $composer, *<INDENT><INDENT>   (<NUM_LIT>b<NUM_LIT><NUM_LIT><NUM_LIT> and $dirty) or   // <NUM_LIT>st param has same state that our <NUM_LIT>st param does *<INDENT><INDENT>   <NUM_LIT>b<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><INDENT><INDENT><INDENT><INDENT> // <NUM_LIT>nd parameter is <STR_LIT> *<INDENT>   ) *<INDENT> }"}
{"signature": "if (<!SENSELESS_COMPARISON!>x != <!REDUNDANT_LABEL_WARNING!>foo@<!> null<!>) {", "body": "}"}
{"signature": "val superTypeOrAny =", "body": "irClass.getSuperClassNotAny() ?: context.ir.symbols.any.owner<EOL>"}
{"signature": "if (firDefaultStatement in firValuedReturnExpressions) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val maxVisibilityMember =", "body": "findMemberWithMaxVisibility(overridables).override<EOL>"}
{"signature": "val customEqualsSupported =", "body": "session.languageVersionSettings.supportsFeature(LanguageFeature.CustomEqualsInValueClasses)<EOL>"}
{"signature": "when (testCompilation) {", "body": "<EOL><INDENT><INDENT><INDENT>is DeprecatedKotlinCompilationToRunnableFiles<*> -> configurations.maybeCreateDependencyScope(testCompilation.runtimeOnlyConfigurationName)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val leftWhenEntry =", "body": "left.psi.getNonStrictParentOfType<KtWhenEntry>()<EOL>"}
{"signature": "fun TestTypeAliasedValueParameterTypesB(arg: UserKlass) {", "body": "}<EOL><EOL>class TestTypeAliasedValueParameterTypesBReverse {<EOL><INDENT>constructor(arg: SameUserKlass)<EOL>}"}
{"signature": "val indexOfParameter =", "body": "valueParameterReference.parameterIndex + <NUM_LIT><EOL>"}
{"signature": "val messageDigest =", "body": "MessageDigest.getInstance(<STR_LIT>)<EOL>"}
{"signature": "fun test(str: String, id: Id) {", "body": "<EOL><INDENT>if (id.id != <STR_LIT> && str != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val entryNamesSet =", "body": "entries()<EOL>"}
{"signature": "val kotlinPlatformAttribute =", "body": "attributes.getAttribute(Attribute.of(KotlinPlatformType.attribute.name, String::class.java))<EOL>"}
{"signature": "val nullableTopLevel =", "body": "::nullableTopLevel.apply { isAccessible = true }<EOL>"}
{"signature": "if (property.typeReference == null && !languageVersionSettings.supportsFeature(LanguageFeature.ShortSyntaxForPropertyGetters)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageFeature.ShortSyntaxForPropertyGetters to languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val currentModuleData =", "body": "session.moduleData<EOL>"}
{"signature": "val newArgumentMatch =", "body": "ArgumentMatchImpl(newValueParameter)<EOL>"}
{"signature": "val setDelegatingToFunction =", "body": "underlyingClass?.functions?.single { it.name == OperatorNameConventions.SET }<EOL>"}
{"signature": "fun fghj() {", "body": "}"}
{"signature": "fun restartProfiling() {", "body": "<EOL><INDENT><INDENT>stopProfiling()<EOL><INDENT><INDENT>startProfiling()<EOL><INDENT>}"}
{"signature": "val emptyIntersectionTypeInfo =", "body": "candidate.system.getEmptyIntersectionTypeKind(upperTypes) ?: continue<EOL>"}
{"signature": "val extraImports =", "body": "ExtraImportsProviderExtension.getInstance(file.project).getExtraImports(file)<EOL>"}
{"signature": "val ktParam =", "body": "p.source.getPsi() as? KtParameter ?: declaration<EOL>"}
{"signature": "for (el in list) {", "body": "<EOL><INDENT><INDENT>val <!NAME_SHADOWING!>el<!> = <NUM_LIT><EOL><INDENT>}"}
{"signature": "val oldSmartCasts =", "body": "trace[key, expression]<EOL>"}
{"signature": "val pass<NUM_LIT> =", "body": "SerializerClassLowering(pluginContext, metadataPlugin, moduleFragment)<EOL>"}
{"signature": "for (insn in insnList) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>synthetic(insn)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (cur.nodeType == AbstractInsnNode.LABEL) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>//NB: Cause we generate exception table for default handler using gaps (see ExpressionCodegen.visitTryExpression)<INDENT><INDENT><INDENT><INDENT><INDENT>//it may occurs that interval for default handler starts before catch start label, so this label seems as dead,<INDENT><INDENT><INDENT><INDENT><INDENT>//but as result all this labels will be merged into one (see KT<NUM_LIT>)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (captures.isEmpty() && skipNonCapturingLambdas) {", "body": "<EOL><INDENT><INDENT><INDENT>metrics.recordLambda(<EOL><INDENT><INDENT><INDENT><INDENT>composable = false,<EOL><INDENT><INDENT><INDENT><INDENT>memoized = true,<EOL><INDENT><INDENT><INDENT><INDENT>singleton = true<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return expression.markAsStatic(true)<EOL><INDENT><INDENT>}"}
{"signature": "val aObj =", "body": "A(a)<EOL>"}
{"signature": "val jsInterfaceFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun testAcceptedAnnotationsLegacy() {", "body": "<EOL><INDENT><INDENT>val messageCollector = TestMessageCollector()<EOL><INDENT><INDENT>val aClass = compileScript(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>ScriptWithAcceptedAnnotationsLegacyResolver::class,<EOL><INDENT><INDENT><INDENT>null,<EOL><INDENT><INDENT><INDENT>messageCollector = messageCollector<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>Assert.assertNotNull(<STR_LIT>, aClass)<EOL><INDENT>}"}
{"signature": "val suspensionJumpLabels =", "body": "HashSet<LabelNode>()<EOL>"}
{"signature": "val callableQualifier =", "body": "qualifier<EOL>"}
{"signature": "val compileLinuxMainMetadata =", "body": "project.tasks.getByName(<STR_LIT>) as KotlinNativeCompile<EOL>"}
{"signature": "if (limitedRootTypes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lBrace =", "body": "bodyExpression.lBrace ?: return<EOL>"}
{"signature": "if (type.typeConstructor().getTypeParameterClassifier() == null && !type.isInterfaceOrAnnotationClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>mapType(type, TypeMappingMode.GENERIC_ARGUMENT)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val typeRenderer =", "body": "result.typeRenderer<EOL>"}
{"signature": "if (it.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>configuration.put(ScriptingConfigurationKeys.LEGACY_SCRIPT_RESOLVER_ENVIRONMENT_OPTION, envName, it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val js =", "body": "kotlin.sourceSets.maybeCreate(<STR_LIT>)<EOL>"}
{"signature": "fun markLineNumberAfterInlineIfNeeded(registerLineNumberAfterwards: Boolean) {", "body": "<EOL><INDENT><INDENT>lineNumberMapper.markLineNumberAfterInlineIfNeeded(registerLineNumberAfterwards)<EOL><INDENT>}"}
{"signature": "fun apply(hierarchyDescriptor: KotlinHierarchyTemplate, describeExtension: (KotlinHierarchyBuilder.Root.() -> Unit)?) {", "body": "<EOL><INDENT><INDENT>if (describeExtension != null) extension.applyHierarchyTemplate(hierarchyDescriptor, describeExtension)<EOL><INDENT><INDENT>else extension.applyHierarchyTemplate(hierarchyDescriptor)<EOL><INDENT>}"}
{"signature": "val arrayName =", "body": "StandardNames.FqNames.array.shortName()<EOL>"}
{"signature": "if (PowerAssertConfigurationDirectives.WITH_JUNIT<NUM_LIT> in module.directives) {", "body": "<EOL><INDENT><INDENT><INDENT>return junit<NUM_LIT>Classpath<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinProjectNpmResolver =", "body": "KotlinProjectNpmResolver(target, this)<EOL>"}
{"signature": "val processorForDeprecatedName =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>kind.createTowerProcessor(this, deprecatedName!!, tracing, scopeTower, detailedReceiver, context)<EOL>"}
{"signature": "if (resolvedCall == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createNonSyntheticValue(expression, MagicKind.UNRESOLVED_CALL)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (parameter in typeRef.parameters) {", "body": "<EOL><INDENT><INDENT><INDENT>checkSyntax(parameter, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "val allDependentTasksPaths =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val declaredValues =", "body": "mutableSetOf<IrValueDeclaration>()<EOL>"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>(MaxUI)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "import okhttp<NUM_LIT>Request<EOL>.", "body": ""}
{"signature": "if (modifierToReplace != null && modifierList.firstChild == modifierList.lastChild) {", "body": "<EOL><INDENT><INDENT>modifierToReplace.replace(newModifier)<EOL><INDENT>}"}
{"signature": "val SCRIPT_SPECIAL_NAME_STRING =", "body": "<STR_LIT><EOL>"}
{"signature": "else if (doubleColonLhs is DoubleColonLHS.Type && isTypeParameterOrArrayOfTypeParameter(doubleColonLhs.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.ANNOTATION_ARGUMENT_KCLASS_LITERAL_OF_TYPE_PARAMETER.on(argumentExpression))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun message(sender: String, message: String) {", "body": "}"}
{"signature": "val lastQualifiedAccess =", "body": "context.callsOrAssignments.lastOrNull() as? FirQualifiedAccessExpression<EOL>"}
{"signature": "if (hasFlags()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + flags<EOL><INDENT>}"}
{"signature": "fun visitBinaryAndExitNode(node: BinaryAndExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (states.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>stateStackHolder.remove()<EOL><INDENT><INDENT>}"}
{"signature": "val cStructVarConstructorSymbol =", "body": "lookup.findPrimaryConstructor(cStuctVar)!!<EOL>"}
{"signature": "fun fMinusZero() {", "body": "}<EOL>@F(+<NUM_LIT>f)<EOL>fun fPlusZero() {}"}
{"signature": "if (constructor.isActual) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val deviceRegex =", "body": "<STR_LIT>\"[<NUM_LIT><NUM_LIT>A-F]{<NUM_LIT>}-([<NUM_LIT><NUM_LIT>A-F]{<NUM_LIT>}-){<NUM_LIT>}[<NUM_LIT><NUM_LIT>A-F]{<NUM_LIT>}<STR_LIT>\".toRegex()<EOL>"}
{"signature": "val objectBuilder =", "body": "JsAstProtoBuf.ObjectLiteral.newBuilder()<EOL>"}
{"signature": "package name\")<EOL>.", "body": ""}
{"signature": "val realParams =", "body": "currentParams - fn.contextReceiverParametersCount<EOL>"}
{"signature": "if (afnq is Float?) {", "body": "<EOL><INDENT><INDENT>assertFalse(afnq == afnq, <STR_LIT>)<EOL><INDENT><INDENT>assertTrue(afnq != afnq, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (arg.first ?: false) {", "body": "<INDENT><INDENT>// Should be still resolved to extension, without smart cast or smart cast impossible<INDENT><INDENT>list.remove(arg.first)<INDENT>}"}
{"signature": "when(both) {", "body": "<EOL><INDENT><INDENT><!USELESS_IS_CHECK!>is A<!> -> <NUM_LIT><EOL><INDENT><INDENT><!USELESS_IS_CHECK!>is SubA<!> -> <NUM_LIT><EOL><INDENT><INDENT><!USELESS_IS_CHECK!>is B<!> -> <NUM_LIT><EOL><INDENT><INDENT><!USELESS_IS_CHECK!>is SubB<!> -> <NUM_LIT><EOL><INDENT><INDENT>is SubAandB -> <NUM_LIT><EOL><INDENT>}"}
{"signature": "val someVal =", "body": "<expr>Array<String></expr>::class.java<EOL>"}
{"signature": "while (i <= m) {", "body": "<INDENT><INDENT>f[i] = if (j < <NUM_LIT>) zero else ipio<NUM_LIT>[j].toDouble()<INDENT><INDENT>//--<INDENT><INDENT>i++; j++<INDENT>}"}
{"signature": "fun foo(arg: Any) {", "body": "<EOL><INDENT>printInt(arg as? Int ?: <NUM_LIT>)<EOL>}"}
{"signature": "val isTheSameType =", "body": "lower is KtNonErrorClassType && upper is KtNonErrorClassType && lower.classId == upper.classId ||<EOL>"}
{"signature": "val contextOps =", "body": "c as? ConstraintSystemOperation<EOL>"}
{"signature": "val testCaseDir =", "body": "lowercaseFirstLetter(<EOL>"}
{"signature": "else if (superQualifier != null) {", "body": "<EOL><INDENT><INDENT><INDENT>generateInvokeSpecialForCall(expression, superQualifier)<EOL><INDENT><INDENT>}"}
{"signature": "val stabilities =", "body": "Array(parameters.size) { Stability.Unstable }<EOL>"}
{"signature": "fun useMetaInfoProcessors(vararg updaters: Constructor<AdditionalMetaInfoProcessor>) {", "body": "<EOL><INDENT><INDENT>additionalMetaInfoProcessors += updaters<EOL><INDENT>}"}
{"signature": "fun visitClassReference(expression: IrClassReference, data: Visibles) {", "body": "<INDENT><INDENT><INDENT>// classType should only contain star projections, but check it to be sure.<INDENT><INDENT><INDENT>data.visitTypeAccess(expression, expression.classType)<INDENT><INDENT><INDENT>super.visitClassReference(expression, data)<INDENT><INDENT>}"}
{"signature": "val INVALID_CLANG_IDENTIFIER_REGEX =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "while (current is KtUserType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>current = current.qualifier ?: break<EOL><INDENT><INDENT><INDENT><INDENT>psiTypeArguments += current.typeArgumentsAsTypes<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val declareBlockScope =", "body": "!isBlockInDoWhile(expression)<EOL>"}
{"signature": "val jsKlibName =", "body": "<STR_LIT><EOL>"}
{"signature": "for (c in csWithMemIt) {", "body": "<EOL><INDENT><INDENT>csWithMemItResult.append(c)<EOL><INDENT>}"}
{"signature": "val exportChecker =", "body": "JsDescriptorExportChecker()<EOL>"}
{"signature": "fun emptyArrayLastIndex() {", "body": "<EOL><INDENT><INDENT>val arr<NUM_LIT> = IntArray(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(-<NUM_LIT>, arr<NUM_LIT>.lastIndex)<EOL><EOL><INDENT><INDENT>val arr<NUM_LIT> = emptyArray<String>()<EOL><INDENT><INDENT>assertEquals(-<NUM_LIT>, arr<NUM_LIT>.lastIndex)<EOL><INDENT>}"}
{"signature": "package while_bug_<NUM_LIT><EOL>.", "body": ""}
{"signature": "val suppressCache =", "body": "IrBasedSuppressCache()<EOL>"}
{"signature": "if (specTest.exception == null) {", "body": "<EOL><INDENT><INDENT><INDENT>super.doParsingTest(filePath, CommonParser::testInfoFilter)<EOL><INDENT><INDENT>}"}
{"signature": "fun testSingletonCollectionSerialization(value: Any) {", "body": "<EOL><INDENT><INDENT>val deserialized = checkSerializeAndDeserialize(value)<EOL><INDENT><INDENT>assertReadOnly(deserialized)<EOL><INDENT>}"}
{"signature": "if (argument.origin != IrStatementOrigin.LAMBDA && argument.origin != IrStatementOrigin.ANONYMOUS_FUNCTION) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (state.value == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>state.value = <NUM_LIT><EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "val scheme =", "body": "Scheme(<EOL>"}
{"signature": "for (el in arr) {", "body": "<EOL><INDENT><INDENT>sum += el.arg<EOL><INDENT>}"}
{"signature": "val wasmFile =", "body": "File(testDir, command.filename)<EOL>"}
{"signature": "val widgetType =", "body": "attributesMap[AndroidConst.CLASS_ATTRIBUTE_NO_NAMESPACE] ?: localName<EOL>"}
{"signature": "if (annotationClassId.packageFqName == DEPRECATED_RUNTIME_PACKAGE) {", "body": "<EOL><INDENT><INDENT><INDENT>val factory = if (isForbidden) KtErrorsParcelize.FORBIDDEN_DEPRECATED_ANNOTATION else KtErrorsParcelize.DEPRECATED_ANNOTATION<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotationCall.source, factory, context)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val newNode =", "body": "ANode(BNode(CNode(<NUM_LIT>)))<EOL>"}
{"signature": "val ktTokenToPsiModifier =", "body": "listOf(<EOL>"}
{"signature": "fun testCheckNotNull(x: Int?) {", "body": "<EOL><INDENT>checkNotNull(x)<EOL><INDENT>x.inc()<EOL>}"}
{"signature": "import for Granular source sets metadata<EOL>.", "body": ""}
{"signature": "fun serialize(encoder: Encoder, value: Bruh) {", "body": "<EOL><INDENT><INDENT>encoder.encodeString(value.s + <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (files.isNotEmpty() && isJava<NUM_LIT>OrLater()) {", "body": "<EOL><INDENT><INDENT>val initModulesMethod = compiler.javaClass.getMethod(<STR_LIT>, JavacList::class.java)<EOL><EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>return compiler.stopIfErrorOccurred(<EOL><INDENT><INDENT><INDENT>CompileState.PARSE,<EOL><INDENT><INDENT><INDENT>initModulesMethod.invoke(compiler, files) as JavacList<JCTree.JCCompilationUnit><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (lastQuestion != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return markRange((prevQuestion ?: lastQuestion).psi, lastQuestion.psi)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val excludesClassMethods =", "body": "mutableListOf<Pair<String, String>>()<EOL>"}
{"signature": "val PARAMETER_VARARG_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val TABLE_GROW =", "body": "<STR_LIT><EOL>"}
{"signature": "val windowsTargets =", "body": "listOf(windows<NUM_LIT>)<EOL>"}
{"signature": "val safeReceiverResult =", "body": "foldedWhen.branches[<NUM_LIT>].result<EOL>"}
{"signature": "val objectRef =", "body": "context().getInnerReference(descriptor)<EOL>"}
{"signature": "val IR_BACKEND_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val cycle =", "body": "cycle(<STR_LIT>);<EOL>"}
{"signature": "if (!isSynthesized && captureThis != null) {", "body": "<EOL><INDENT><INDENT><INDENT>writeParameter(sw, JvmMethodParameterKind.OUTER, captureThis.defaultType, descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "fun recordComposableCall(<EOL><INDENT><INDENT>expression: IrCall,<EOL><INDENT><INDENT>paramMeta: List<ComposableFunctionBodyTransformer.CallArgumentMeta><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>calls++<EOL><INDENT>}"}
{"signature": "if (logName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val expectedFile = File(testDataDir, logName + <STR_LIT>)<EOL><INDENT><INDENT><INDENT>val normalizedContent = normalizeOutput(File(testDataDir), <STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>KotlinTestUtils.assertEqualsToFile(expectedFile, normalizedContent)<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation, i), new.getExtension(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val externalComponents =", "body": "module.includes<EOL>"}
{"signature": "if (runtimeNativeLibraries.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dependencyProviders =", "body": "computeDependencyProviderList(moduleData)<EOL>"}
{"signature": "val nativeAnnotations =", "body": "JsStandardClassIds.Annotations.nativeAnnotations.map { it.asSingleFqName() }<EOL>"}
{"signature": "val objCProtocolForwardDeclarations =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val overridables =", "body": "extractMembersOverridableInBothWays(<EOL>"}
{"signature": "if (data.localProperties.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.localDelegatedProperties[declaration.attributeOwnerId] = data.localProperties<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.effectConstructorArgumentCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getEffectConstructorArgument(i), new.getEffectConstructorArgument(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "val alternateFlowStart =", "body": "this is FinallyBlockEnterNode<EOL>"}
{"signature": "if (!renameAtomic(tmpKlib.absolutePath, outKlib.absolutePath, replaceExisting = false)) {", "body": "<EOL><INDENT><INDENT><INDENT>tmpKlib.deleteRecursively()<EOL><INDENT><INDENT>}"}
{"signature": "val signatureParser =", "body": "SignatureParser(treeMaker)<EOL>"}
{"signature": "if ((resultValue and <NUM_LIT>x8<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>UL) == <NUM_LIT>UL) {", "body": "resultValue = resultValue shl <NUM_LIT>; exp -= <NUM_LIT> }"}
{"signature": "if (!hasParentSymbol(symbol)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (isLocalVariable) {", "body": "<EOL><INDENT><INDENT><INDENT>return boxed.taint()<EOL><INDENT><INDENT>}"}
{"signature": "var type =", "body": "typeMirror as DeclaredType<EOL>"}
{"signature": "if (old.hasExtension(JvmProtoBuf.constructorSignature)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JvmProtoBuf.constructorSignature), new.getExtension(JvmProtoBuf.constructorSignature))) return false<EOL><INDENT><INDENT>}"}
{"signature": "val scriptCompilationConfiguration =", "body": "scriptDefinitionProviderService.configurationProvider?.getScriptConfiguration(ktFile)?.configuration<EOL>"}
{"signature": "fun bar()<EOL><EOL><INDENT>private fun privateMethodWithDefault() {", "body": "<EOL><INDENT><INDENT>System.out.println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val classTypeParams =", "body": "ownerClass.typeConstructor.parameters<EOL>"}
{"signature": "val ctorProvidedPropertiesParametersStart =", "body": "<EOL><INDENT><INDENT>ctorImplicitReceiversParametersStart + scriptDescriptor.implicitReceivers.size<EOL>"}
{"signature": "fun visitVariableDeclarationNode(node: VariableDeclarationNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitVariableDeclarationNode(node)<EOL><INDENT>}"}
{"signature": "val lastInList =", "body": "j == lastIndex<EOL>"}
{"signature": "val fileAnnotationList =", "body": "handler.psiFactory.createFileAnnotationListWithAnnotation(annotationText)<EOL>"}
{"signature": "val int<NUM_LIT>Type =", "body": "LLVMInt<NUM_LIT>TypeInContext(llvmContext)!!<EOL>"}
{"signature": "val DEPRECATED_SUBSTITUTE_PATH =", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL>"}
{"signature": "val coroutineSuspendedGetter =", "body": "<EOL><INDENT><INDENT>context.coroutineSymbols.coroutineSuspendedGetter<EOL>"}
{"signature": "val javaLangClass =", "body": "createClass(createPackage(<STR_LIT>), <STR_LIT>, ClassKind.CLASS)<EOL>"}
{"signature": "val artifactPath =", "body": "line.trimStart { it.isWhitespace() }<EOL>"}
{"signature": "for (a in array(<NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT>}"}
{"signature": "val predSpilledReferencesCount =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (preds.isNullOrEmpty()) initialSpilledVariablesCount<EOL>"}
{"signature": "val capturedInConstructor =", "body": "<NUM_LIT><EOL>"}
{"signature": "val SYNTHETIC_LOOP_LABEL =", "body": "<STR_LIT><EOL>"}
{"signature": "if (value is IrValueParameter && icUtils.shouldValueParameterBeBoxed(value)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irBuiltIns.anyType<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun exitWhenExpression(whenExpression: FirWhenExpression, callCompleted: Boolean) {", "body": "<EOL><INDENT><INDENT>val (whenExitNode, syntheticElseNode) = graphBuilder.exitWhenExpression(whenExpression, callCompleted)<EOL><INDENT><INDENT>syntheticElseNode?.mergeWhenBranchEntryFlow()<EOL><INDENT><INDENT>whenExitNode.mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "fun f(x: T) {", "body": "<EOL><INDENT><INDENT>result = x.toString()<EOL><INDENT>}"}
{"signature": "package c<NUM_LIT><EOL>.", "body": ""}
{"signature": "when (executionStrategy) {", "body": "<EOL><INDENT><INDENT>KotlinCompilerExecutionStrategy.DAEMON -> kotlinDaemonOOMHelperMessage<EOL><INDENT><INDENT>KotlinCompilerExecutionStrategy.IN_PROCESS -> kotlinInProcessOOMHelperMessage<EOL><INDENT><INDENT>KotlinCompilerExecutionStrategy.OUT_OF_PROCESS -> kotlinOutOfProcessOOMHelperMessage<EOL><INDENT>}"}
{"signature": "if (arguments.sourceMapBaseDirs != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(WARNING, <STR_LIT>, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (container is ProtoContainer.Class && container.kind == ProtoBuf.Class.Kind.INTERFACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return kotlinClassFinder.findKotlinClass(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>container.classId.createNestedClassId(Name.identifier(JvmAbi.DEFAULT_IMPLS_CLASS_NAME)),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>jvmMetadataVersion<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun recordNewAssignment(flow: MutableFlow, variable: RealVariable, index: Int) {", "body": "<EOL><INDENT><INDENT>flow.replaceVariable(variable, null)<EOL><INDENT><INDENT>flow.assignmentIndex[variable] = index<EOL><INDENT>}"}
{"signature": "if (declaration is FirFunction && !context.isRenamableFunction(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(jvmName.source, FirJvmErrors.INAPPLICABLE_JVM_NAME, context)<EOL><INDENT><INDENT>}"}
{"signature": "var hasJump =", "body": "false<EOL>"}
{"signature": "if (outputDirectory in lockedOutputDirectories) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT>return action(lockFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsTarget =", "body": "compilation.target as KotlinJsIrTarget<EOL>"}
{"signature": "val receiverTypePresenceDiff =", "body": "aHasReceiverType - bHasReceiverType<EOL>"}
{"signature": "val intToLong =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (declaration.source?.kind is KtRealSourceElementKind && declaration.returnTypeRef.source?.kind is KtRealSourceElementKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkAllRepeatedAnnotations(declaration.returnTypeRef, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (inverseBoundsEvaluationOrder) {", "body": "<EOL><INDENT><INDENT><INDENT>StackValue.local(endVar, asmElementType).store(endValue, v)<EOL><INDENT><INDENT><INDENT>loopParameter().store(startValue, v)<EOL><INDENT><INDENT>}"}
{"signature": "val treeSize =", "body": "if (onlyHeadTypeConstructor) <NUM_LIT> else indexedThisType.size<EOL>"}
{"signature": "val kotlinCachingEnabled =", "body": "project.readSystemPropertyAtConfigurationTime(KOTLIN_CACHING_ENABLED_PROPERTY)<EOL>"}
{"signature": "val simpleName =", "body": "jClass.name.asString()<EOL>"}
{"signature": "var regularTowerDataContexts =", "body": "FirRegularTowerDataContexts(regular = FirTowerDataContext())<EOL>"}
{"signature": "val factoryMethods =", "body": "model.elements<EOL>"}
{"signature": "if (modifierList != null) {", "body": "<EOL><INDENT><INDENT><INDENT>modifierList.addBefore(annotationEntry, modifierList.firstChild) as KtAnnotationEntry<EOL><INDENT><INDENT>}"}
{"signature": "fun clearUnresolvedBinaryDependency() {", "body": "<EOL><INDENT>  _builder.clearUnresolvedBinaryDependency()<EOL><INDENT>}"}
{"signature": "val mutableListRemove<NUM_LIT> =", "body": "<!EVALUATED: `After remove new size is <NUM_LIT>`!>testRemove(mutableListOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), <STR_LIT>)<!><EOL>"}
{"signature": "val cast =", "body": "casts[i]<EOL>"}
{"signature": "val isGradleDaemonUsed =", "body": "System.getProperty(<STR_LIT>)?.let(String::toBoolean)<EOL>"}
{"signature": "if (it.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println(it.readText())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classDataPointer =", "body": "staticData.placeGlobal(<EOL>"}
{"signature": "for (multiNodeIndex in start until end) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val node = nodes[multiNodes[multiNodeIndex]]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.multiNodeStart = start<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.multiNodeEnd = end<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val versionNeededToExtract =", "body": "<EOL><INDENT><INDENT><INDENT>getShort(currentOffset + <NUM_LIT>).toInt()<EOL>"}
{"signature": "if (wrapper != null && wrapper.statements.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ctx.replaceMe(function)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val functionAnnotations =", "body": "mutableListOf<FirAnnotationCall>()<EOL>"}
{"signature": "fun suspendThrowsNothing() {", "body": "}<EOL><EOL>interface SuspendFun {<EOL><INDENT>suspend fun foo()<EOL>}"}
{"signature": "if (myEnum !is MyEnum) {", "body": "<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(x: Inv<Number>, list: List<Inv<out Any>>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL>}"}
{"signature": "val partsFinder =", "body": "DirectoryBasedClassFinder(file.parent!!, packageFqName)<EOL>"}
{"signature": "for (i in coll?.indices ?: return <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>sum += i<EOL><INDENT>}"}
{"signature": "val leftIsBoolean =", "body": "leftVariable != null && fir.leftOperand.resolvedType.isBoolean<EOL>"}
{"signature": "fun setValue(o : Nothing?, desc: KProperty<*>, value: T) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (!isKSerializer(param.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SerializationErrors.CUSTOM_SERIALIZER_PARAM_ILLEGAL_TYPE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>targetElement,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serializerType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serializableType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>param.name.asString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val importResolver =", "body": "fileScopeProvider.getImportResolver(importDirective.containingKtFile)<EOL>"}
{"signature": "val expectedListingLines =", "body": "expectedString.split('\\n').toList()<EOL>"}
{"signature": "if (origin<NUM_LIT>isSaturated()) {", "body": "<EOL><INDENT><INDENT>return infinityOfSign(origin<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val javaExec =", "body": "File(File(SystemProperties.getJavaHome(), <STR_LIT>), <STR_LIT>)<EOL>"}
{"signature": "val fromExpansion =", "body": "from.expandedType()<EOL>"}
{"signature": "val targetNative =", "body": "targetJVM<EOL>"}
{"signature": "if (ktExpression.operationToken == KtTokens.IDENTIFIER) {", "body": "<EOL><INDENT><INDENT><INDENT>return generateCall(getResolvedCall(ktExpression)!!, ktExpression, null)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration is FirTypeAlias) {", "body": "<EOL><INDENT><INDENT>val expandedDeclaration = declaration.expandedConeType?.lookupTag?.toSymbol(session)?.fir ?: return null<EOL><INDENT><INDENT>return typeForQualifierByDeclaration(expandedDeclaration, session, element, file)<EOL><INDENT>}"}
{"signature": "fun ushrForLong() {", "body": "<EOL><INDENT><INDENT>assertEquals(Long.MAX_VALUE, <NUM_LIT>L ushr <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(Long.MAX_VALUE, <NUM_LIT>L ushr <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (name != null && projections.size >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(typeRef.source, FirErrors.DUPLICATE_PARAMETER_NAME_IN_FUNCTION_TYPE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (failureStr.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(failureStr)<EOL><INDENT><INDENT>}"}
{"signature": "val allSuperTypeCallEntries =", "body": "classOrObject.superTypeListEntries.filterIsInstance<KtSuperTypeCallEntry>()<EOL>"}
{"signature": "fun unfoldBody(body: IrBody, callStack: CallStack) {", "body": "<EOL><INDENT>callStack.pushSimpleInstruction(body)<EOL><INDENT>unfoldStatements(body.statements, callStack)<EOL>}"}
{"signature": "for ((load, store) in previousInstructions zip newInstructions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newInstructions.remove(store)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.instructions.insert(load, store)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val bitcodeLayout =", "body": "libraryLayout<EOL>"}
{"signature": "var buildsCountToShow =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (isNotNullAlsoCall(x) {", "body": "x = null }"}
{"signature": "val SYNCED_PROPERTIES_START_LINE =", "body": "<STR_LIT><EOL>"}
{"signature": "val lineSeparator =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val prepare =", "body": "mutableListOf<IrStatement>()<EOL>"}
{"signature": "val JsNoImpl =", "body": "<STR_LIT>.callableId(BASE_JS_PACKAGE)<EOL>"}
{"signature": "val SETUP_COMPILER_ARGS =", "body": "<STR_LIT><EOL>"}
{"signature": "val b_internal =", "body": "atomic(<NUM_LIT>)<EOL>"}
{"signature": "if (expression.type.isSyntheticComposableFunction()) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.symbol.owner.mark()<EOL><INDENT><INDENT>}"}
{"signature": "if (configureSubProjects) {", "body": "<EOL><INDENT><INDENT>configureSingleNativeTargetInSubFolders(preset)<EOL><INDENT>}"}
{"signature": "val elementsWithLocationToPatch =", "body": "hashSetOf<IrGetValue>()<EOL>"}
{"signature": "var typeText =", "body": "<STR_LIT><EOL>"}
{"signature": "val anyMethodSelectors =", "body": "mapOf(<EOL>"}
{"signature": "for (lookedUpSymbol in symbols) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>lookups.putValue(lookedUpSymbol, newSourcePath)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val remappedSymbol =", "body": "symbolMap[expression.symbol]<EOL>"}
{"signature": "val progressionElementTypes =", "body": "context.ir.symbols.progressionElementTypes<EOL>"}
{"signature": "if (postponedAtom.mightNeedAdditionalResolution) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>postponedAtom.collectNotFixedVariables()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var sourceIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val PACKAGE_PARTS =", "body": "<STR_LIT><EOL>"}
{"signature": "fun objcReleaseFromRunnableThreadState(objCReference: LLVMValueRef) {", "body": "<EOL><INDENT><INDENT>switchThreadStateIfExperimentalMM(ThreadState.Native)<EOL><INDENT><INDENT>objcReleaseFromNativeThreadState(objCReference)<EOL><INDENT><INDENT>switchThreadStateIfExperimentalMM(ThreadState.Runnable)<EOL><INDENT>}"}
{"signature": "if (hasAbbreviatedTypeId()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeById(abbreviatedTypeId).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "if (devServer != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.add(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>versions.webpackDevServer<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val memBuffer =", "body": "allocator.allocate(stringLength.coerceAtMost(maxStringLength) * CHAR_SIZE_BYTES).address.toInt()<EOL>"}
{"signature": "val USHR<INDENT><INDENT><INDENT><INDENT>  =", "body": "<STR_LIT><EOL>"}
{"signature": "val ps =", "body": "PrintStream(os)<EOL>"}
{"signature": "val unknownAllDependencies =", "body": "unknownDependencies + unknownFriends + unknownDependsOn<EOL>"}
{"signature": "val node<NUM_LIT> =", "body": "Node(node<NUM_LIT>)<EOL>"}
{"signature": "val nodeBinDir =", "body": "computeNodeBinDir(destinationDir, isWindows).toPath()<EOL>"}
{"signature": "val functionIsUnusableDueToContainingClass =", "body": "(functionDeclaration?.parent as? IrClass)?.symbol == cause.symbol<EOL>"}
{"signature": "fun onLiteral() {", "body": "<EOL><INDENT><INDENT>val p = this::x<EOL><INDENT><INDENT>p.<!LATEINIT_INTRINSIC_CALL_ON_NON_LITERAL!>isInitialized<!><EOL><INDENT>}"}
{"signature": "if (deprecation != null) {", "body": "<EOL><INDENT><INDENT>result = mutableListOf()<EOL><INDENT><INDENT>result.addAll(prevDiagnostics)<EOL><INDENT><INDENT>result.add(ConeDeprecated(source, symbol, deprecation))<EOL><INDENT>}"}
{"signature": "val truncatedString =", "body": "removeSuffix(compilerType.lowerName)<EOL>"}
{"signature": "if (invokeExtensionDescriptor == null) {", "body": "<EOL><INDENT><INDENT><INDENT>usualInvoke<EOL><INDENT><INDENT>}"}
{"signature": "val BASE_JVM_FUNCTIONS_PACKAGE =", "body": "BASE_JVM_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "fun log(a: String) {", "body": "<EOL><INDENT>log += a + <STR_LIT><EOL>}"}
{"signature": "if (cur == null) {", "body": "<EOL><INDENT><INDENT><INDENT>val new = MapBuilderEntries(this)<EOL><INDENT><INDENT><INDENT>entriesView = new<EOL><INDENT><INDENT><INDENT>return new<EOL><INDENT><INDENT>}"}
{"signature": "val endConstValue =", "body": "codegen.getCompileTimeConstant(endExpression) as? IntegerValueConstant<*> ?: return null<EOL>"}
{"signature": "val linuxArm<NUM_LIT> =", "body": "KonanTarget.LINUX_ARM<NUM_LIT><EOL>"}
{"signature": "val allCauses =", "body": "generateSequence(exception) { e: Throwable -> e.cause }.toList()<EOL>"}
{"signature": "val argumentsAreOrdered =", "body": "resolvedCall.call.valueArguments.withIndex().none { (index, arg) -> resolvedOrder[arg] != index }<EOL>"}
{"signature": "fun check(field<NUM_LIT>: FieldNode, field<NUM_LIT>: FieldNode, report: FieldReport) {", "body": "<EOL><INDENT><INDENT>val anns<NUM_LIT> = getAnnotations(field<NUM_LIT>)<EOL><INDENT><INDENT>val anns<NUM_LIT> = getAnnotations(field<NUM_LIT>)<EOL><INDENT><INDENT>val annDiff = compareAnnotations(anns<NUM_LIT>, anns<NUM_LIT>) ?: return<EOL><INDENT><INDENT>report.addAnnotationDiffs(this, annDiff)<EOL><INDENT>}"}
{"signature": "fun fqName() {", "body": "<EOL><EOL>}"}
{"signature": "var backend =", "body": "TargetBackend.ANY<EOL>"}
{"signature": "val MAX_DIAGNOSTIC_PARAMETER_COUNT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val linkerOptions =", "body": "argParser.option(ArgType.String, <STR_LIT>,<EOL>"}
{"signature": "if (isMultiModuleTest) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>packageText.append(String.format(<STR_LIT>, moduleDescriptor.name))<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (i >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (backing[offset + i] == element) return i<EOL><INDENT><INDENT><INDENT><INDENT>i--<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitInitBlockExitNode(node: InitBlockExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val originalPositions =", "body": "mutableMapOf<KtModule, Int>()<EOL>"}
{"signature": "val dependenciesFile =", "body": "Files.createTempFile(<STR_LIT>, <STR_LIT>).toAbsolutePath().toFile()<EOL>"}
{"signature": "if (overridesAnyBase(klass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>baseDescendants += klass<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (compareByDomainCapacity(toFloating, fromFloating) < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT> The resulting value is the closest `$otherName` to this `$thisName` value.<EOL><INDENT><INDENT><INDENT> In case when this `$thisName` value is exactly between two `$otherName`s,<EOL><INDENT><INDENT><INDENT> the one with zero at least significant bit of mantissa is selected.<EOL><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val wasmToIr =", "body": "mutableMapOf<Wasm, Ir>()<EOL>"}
{"signature": "fun test<NUM_LIT>(node: Foo<NUM_LIT><*>) {", "body": "<EOL><INDENT>node.data.get(C)<EOL>}"}
{"signature": "var markedStableClasses =", "body": "<NUM_LIT><EOL>"}
{"signature": "val UNREACHABLE_CODE =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val ktClasses =", "body": "SyntaxTraverser.psiTraverser(ktFile).filter(KtClassOrObject::class.java).toList()<EOL>"}
{"signature": "fun check(block: Canvas.(Stroke, Fill) -> Unit) {", "body": "}<EOL><EOL>fun box(): String {<EOL><INDENT>test<NUM_LIT>()<EOL><INDENT>test<NUM_LIT>()<EOL><EOL><INDENT>return <STR_LIT><EOL>}"}
{"signature": "if (processModule(module).stop()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!reportOutputFiles) null else fun(sources: List<File>, output: File) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(OUTPUT, OutputMessageUtil.formatOutputMessage(sources, output))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun disposeChildren(p<NUM_LIT>: Array<out LighterASTNode>?, p<NUM_LIT>: Int) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val interopNativePointedRawPtrGetter =", "body": "lookup.findMemberPropertyGetter(interopClass(InteropFqNames.nativePointedName), Name.identifier(InteropFqNames.nativePointedRawPtrPropertyName))!!<EOL>"}
{"signature": "if (<!ARGUMENT_TYPE_MISMATCH!>b<!> in <NUM_LIT>.<NUM_LIT>) {", "body": "}"}
{"signature": "val elementMapping =", "body": "ElementMapping(elements)<EOL>"}
{"signature": "if (!fSet.secondPassVisited) {", "body": "<EOL><INDENT><INDENT><INDENT>val newFSet = fSet.processSecondPass()<EOL><INDENT><INDENT><INDENT>@OptIn(ExperimentalNativeApi::class)<EOL><INDENT><INDENT><INDENT>assert(newFSet == fSet)<EOL><INDENT><INDENT>}"}
{"signature": "val packageSymbol =", "body": "getPackageSymbolIfPackageExists(packageFqName) ?: return emptyList()<EOL>"}
{"signature": "val useUnitialized =", "body": "<!UNINITIALIZED_VARIABLE!>x<!> +<EOL>"}
{"signature": "val superAsmType =", "body": "typeMapper.mapClass(classDescriptor.getSuperClassNotAny().sure { <STR_LIT> })<EOL>"}
{"signature": "while (i++ < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list.add(i)<EOL><INDENT>}"}
{"signature": "val UTF<NUM_LIT>_MODE_MARKER =", "body": "<NUM_LIT>toChar()<EOL>"}
{"signature": "if (x is D) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val thisSize =", "body": "this.length<EOL>"}
{"signature": "val ktParameters =", "body": "function.valueParameters<EOL>"}
{"signature": "fun test<NUM_LIT>(f: () -> Array<String>) {", "body": "<EOL><INDENT>f().boo()<EOL>}"}
{"signature": "val linuxArm<NUM_LIT>CompileTask =", "body": "kotlin.linuxArm<NUM_LIT>().compilations.getByName(<STR_LIT>)<EOL>"}
{"signature": "fun throwsSpreadEmptyArrayOf() {", "body": "}<EOL><EOL>@Throws(exceptionClasses = <!NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION!>[<!ANNOTATION_ARGUMENT_MUST_BE_CONST!><!UNRESOLVED_REFERENCE!>UE<!>::class<!>]<!>)<EOL>fun throwsNamedLiteralWithUnresolved() {}"}
{"signature": "var isReadLineStartSent =", "body": "false<EOL>"}
{"signature": "fun visitFqName(name: String) {", "body": "<EOL><INDENT><INDENT>fqName = name<EOL><INDENT>}"}
{"signature": "val alreadyGenerated =", "body": "alreadyProcessed.isGenerated(platformLibsDirectory)<EOL>"}
{"signature": "val javaClassUseSiteScope =", "body": "javaClass.unsubstitutedScope(<EOL>"}
{"signature": "while (result in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>--result<EOL><INDENT><INDENT>if (continue is Int?) result += <NUM_LIT> else result += <NUM_LIT><EOL><INDENT>}"}
{"signature": "val fname =", "body": "m[<NUM_LIT>]<EOL>"}
{"signature": "var nextDeclarationIndex =", "body": "(params.maxOfOrNull { it.declarationIndex } ?: <NUM_LIT>) + <NUM_LIT><EOL>"}
{"signature": "val statementsWithoutBody =", "body": "wrapper.body.statements.filter { it !is JsReturn }<EOL>"}
{"signature": "if (arguments.javaPackagePrefix != null) {", "body": "<EOL><INDENT><INDENT><INDENT>strongWarning(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val karmaConfJs =", "body": "npmProject.dir.getFile().resolve(<STR_LIT>)<EOL>"}
{"signature": "if (calleeReference.isError) {", "body": "<EOL><INDENT><INDENT><INDENT>delegatedConstructorCall.replaceArgumentList(buildArgumentListForErrorCall(originalArgumentList, allArgsMapping))<EOL><INDENT><INDENT>}"}
{"signature": "val ktBaseExpression =", "body": "ktExpression.baseExpression!!<EOL>"}
{"signature": "val firFileSequence =", "body": "if (withProgress) firFiles.progress(<STR_LIT>) else firFiles.asSequence()<EOL>"}
{"signature": "if (context.compileSuspendAsJsGenerator) {", "body": "<EOL><INDENT><INDENT><INDENT>JsSuspendFunctionWithGeneratorsLowering(context)<EOL><INDENT><INDENT>}"}
{"signature": "val finallyBlockGenerator =", "body": "FinallyBlockGenerator(finallyBlock)<EOL>"}
{"signature": "val appClassKtSourceFile =", "body": "secondProject.subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "if (declaration.kind == ClassKind.ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>classFqnSegments.add(MangleConstant.ENUM_ENTRY_CLASS_NAME)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val cacheUpdater =", "body": "CacheUpdater(<EOL>"}
{"signature": "val uninitializedValuesToRemovableUsages =", "body": "hashMapOf<AbstractInsnNode, MutableSet<AbstractInsnNode>>()<EOL>"}
{"signature": "val builtinName =", "body": "SpecialGenericSignatures.getBuiltinFunctionNamesByJvmName(name) ?: return false<EOL>"}
{"signature": "val resolverForModuleFactory =", "body": "CommonResolverForModuleFactory(<EOL>"}
{"signature": "val podspec =", "body": "<STR_LIT><EOL>"}
{"signature": "if (shouldBeSubtype) {", "body": "<EOL><INDENT><INDENT>assertTrue(subtype.isSubtypeOf(supertype))<EOL><INDENT><INDENT>assertTrue(supertype.isSupertypeOf(subtype))<EOL><INDENT>}"}
{"signature": "if (!commonizer.commonizeWith(nextElement)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mapWithLongKeys =", "body": "HashMap<Long, Int>()<EOL>"}
{"signature": "val MEMORY_FILL =", "body": "<STR_LIT><EOL>"}
{"signature": "val boundsForNestedVariable =", "body": "getTypeBounds(it).bounds<EOL>"}
{"signature": "fun g(block: Int.() -> Unit) {", "body": "}<EOL>fun g(block: (Int, Int) -> Unit) {}"}
{"signature": "when (val parent = this.parent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is IrFunction -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parent.dispatchReceiverParameter == this<EOL><INDENT><INDENT><INDENT><INDENT>is IrClass -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parent.thisReceiver == this<EOL><INDENT><INDENT><INDENT><INDENT>else -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun reportCachesDump(cachesDump: String) {", "body": "<EOL><INDENT><INDENT>testICReporter.cachesDump = cachesDump<EOL><INDENT>}"}
{"signature": "if (results.add(initialEdge)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>yield(initialEdge)<EOL><INDENT><INDENT><INDENT><INDENT>resolveDequeue.add(initialEdge)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val decoyImplementationDefaultsBitmaskAnnotation =", "body": "<EOL><INDENT><INDENT>getTopLevelClass(DecoyClassIds.DecoyImplementationDefaultsBitMask).owner<EOL>"}
{"signature": "val chainedSubstitutor =", "body": "ChainedSubstitutor(coneSubstitutor, substitutor.substitutor)<EOL>"}
{"signature": "val appClass =", "body": "classloader.loadClass(<STR_LIT>)<EOL>"}
{"signature": "val optimized =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "else if (this is KtPropertyGetterSymbol || this is KtPropertySetterSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>val property = this.getContainingSymbol() as KtPropertySymbol<EOL><INDENT><INDENT><INDENT>val isExtension = property.isExtension<EOL><INDENT><INDENT><INDENT>val isInner = (property.getContainingSymbol() as? KtNamedClassOrObjectSymbol)?.isInner == true<EOL><INDENT><INDENT><INDENT>if (isExtension && isInner) property.receiverType else null<EOL><INDENT><INDENT>}"}
{"signature": "val anotherPodName =", "body": "<STR_LIT><EOL>"}
{"signature": "val DISABLE_SCRIPT_DEFINITIONS_FROM_CLSSPATH_OPTION =", "body": "CliOption(<EOL>"}
{"signature": "val smartcastedType =", "body": "smartCastExpression.resolvedType<EOL>"}
{"signature": "val expectedOptIn =", "body": "listOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (firProperty.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val source =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (firProperty.getContainingClassSymbol(context.session) != classSymbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>firProperty.source<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FUN_INTERFACE_CANNOT_HAVE_ABSTRACT_PROPERTIES, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val disabledTestCaseIds =", "body": "hashSetOf<TestCaseId>()<EOL>"}
{"signature": "val prune =", "body": "abiInfo.prune<EOL>"}
{"signature": "val expectSingleCandidate =", "body": "(compatibility[Compatible] ?: compatibility.values.singleOrNull())?.singleOrNull()<EOL>"}
{"signature": "val swiftCompiler =", "body": "configs.absoluteTargetToolchain + <STR_LIT><EOL>"}
{"signature": "package boundsWithSubstitutors<EOL>.", "body": ""}
{"signature": "else if (actualStackSize >= <NUM_LIT> && expectedStackSize < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rawFunctionType =", "body": "invocableFunctionClass.typeWith()<EOL>"}
{"signature": "if (declaration == owner || owner.isAccessorOf(declaration) || ownerIsMemberOfDeclaration && !ownerHasReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>val type = thisReceiverExpression.resolvedType<EOL><INDENT><INDENT><INDENT>toValueParameterReference(type, <NUM_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val comparisonOperatorTokens =", "body": "setOf(KtTokens.EQEQ, KtTokens.EXCLEQ, KtTokens.LT, KtTokens.LTEQ, KtTokens.GT, KtTokens.GTEQ)<EOL>"}
{"signature": "fun test<NUM_LIT>(myJClass: MyJClass<NUM_LIT>) {", "body": "<EOL><INDENT>myJClass.meth(<!TYPE_MISMATCH!><STR_LIT><!>)<EOL>}"}
{"signature": "val collectedContext =", "body": "PersistenceContextCollector.collectContext(<EOL>"}
{"signature": "if (extensionFunctionsInExternals) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this[LanguageFeature.JsEnableExtensionFunctionInExternals] = LanguageFeature.State.ENABLED<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val declarationsText =", "body": "<EOL><INDENT><INDENT><INDENT>KtTestUtil.doLoadFile(File(testDataPath + <STR_LIT>))<EOL>"}
{"signature": "fun target<NUM_LIT>() {", "body": "}<EOL>fun target<NUM_LIT>() {}"}
{"signature": "var kaptVerboseModePassed =", "body": "false<EOL>"}
{"signature": "val propertyPsi =", "body": "it.descriptor.findPsi() ?: return@forEach<EOL>"}
{"signature": "if (shouldRunCheck && (languageVersionSettings.supportsFeature(ProperCheckAnnotationsTargetInTypeUsePositions) || checkWithoutLanguageFeature)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkAnnotationEntry(entry, actualTargets, trace)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun putValueIfNeeded(parameterType: JvmKotlinType, value: StackValue, kind: ValueKind, parameterIndex: Int) {", "body": "<INDENT><INDENT>//original method would be inlined directly into default impl body without any inline magic<INDENT><INDENT>//so we no need to load variables on stack to further method call<INDENT>}"}
{"signature": "if (argTypeInfo != null && argTypeInfo.jumpOutPossible) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>jumpOutPossible = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>jumpFlowInfo = argTypeInfo.jumpFlowInfo<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isIncremental =", "body": "readBoolean()<EOL>"}
{"signature": "val freeVariables =", "body": "data.variableDeclarations.flatMapTo(mutableSetOf()) { it.values }<EOL>"}
{"signature": "if (!annotationDescriptorsAlreadyPresent.contains(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>visitAnnotation(descriptor, false).visitEnd()<EOL><INDENT><INDENT>}"}
{"signature": "var globalVarBacking =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (arg !is JsIntLiteral) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val firstMeaningful =", "body": "if (names.size > <NUM_LIT> && COMMON_GROUP_NAMES.contains(names[<NUM_LIT>])) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "for ((methodReplacement, original) in inlineClassReplacements.originalFunctionForMethodReplacement) {", "body": "<EOL><INDENT><INDENT><INDENT>if (methodReplacement !is IrSimpleFunction) continue<EOL><INDENT><INDENT><INDENT>val newOriginal = functionSymbolMap[original.symbol]?.owner ?: continue<EOL><INDENT><INDENT><INDENT>val newMethodReplacement = inlineClassReplacements.getReplacementFunction(newOriginal) ?: continue<EOL><INDENT><INDENT><INDENT>functionSymbolMap[methodReplacement.symbol] = newMethodReplacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "if (line.char.length > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>casedRangesBuilder.append(line.char, line.name, line.categoryCode)<EOL><INDENT><INDENT><INDENT><INDENT>caseIgnorableRangesBuilder.append(line.char, line.name, line.categoryCode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitConstantValue(expression: IrConstantValue) {", "body": "<EOL><INDENT><INDENT>visitExpression(expression)<EOL><INDENT>}"}
{"signature": "val resultIdSignature =", "body": "symbolDeserializer.deserializeIdSignature(BinarySymbolData.decode(result.base.base.symbol).signatureId)<EOL>"}
{"signature": "val gradleIncrementalArgs =", "body": "compilationOptions as IncrementalCompilationOptions<EOL>"}
{"signature": "if (descriptor.name != name && (name == OperatorNameConventions.UNARY_PLUS || name == OperatorNameConventions.UNARY_MINUS)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return listOf(DeprecatedUnaryPlusAsPlus)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val memoryUsageAfterBuild =", "body": "runCatching { daemon.getUsedMemory(withGC = false).takeIf { it.isGood }?.get() }.getOrNull()<EOL>"}
{"signature": "val expressionType =", "body": "bindingTrace.getType(expression) ?: return<EOL>"}
{"signature": "if (lazyOperationsLog != null) {", "body": "<EOL><INDENT><INDENT><INDENT>exceptionFromLazyResolveLogValidation = checkLazyResolveLog(lazyOperationsLog, testDataFile)<EOL><INDENT><INDENT>}"}
{"signature": "if (project.isKaptVerbose()) {", "body": "<EOL><INDENT><INDENT>pluginOptions += SubpluginOption(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun testLongerPath() {", "body": "<EOL><INDENT><INDENT>checkGraph(<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>A; B; C; D; E<EOL><INDENT><INDENT><INDENT>E > D; E > B; D > C; C > B; C > A; B > A<EOL><INDENT><INDENT><STR_LIT>\".trimIndent(),<EOL><INDENT><INDENT><INDENT>listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val typeArgumentsWithWrongType =", "body": "mutableListOf<ConeKotlinType>()<EOL>"}
{"signature": "fun funcFromBase() {", "body": "}<EOL><INDENT>fun Int.extFuncFromBase() {}"}
{"signature": "if (candidateTypeRef is FirErrorTypeRef && baseTypeRef is FirErrorTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>return maybeEqualErrorTypes(candidateTypeRef, baseTypeRef)<EOL><INDENT><INDENT>}"}
{"signature": "val capturingClasses =", "body": "collectCapturingClasses(irScript, typeRemapper)<EOL>"}
{"signature": "if (backingField?.hasAnnotation(KonanFqNames.volatile) != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return unsupported(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (InlineUtil.isInline(parentDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val checker = getChecker(parentDescriptor as FunctionDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT>checker.check(resolvedCall, reportOn, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val utilSrc =", "body": "project.kotlinSourcesDir(<STR_LIT>).resolve(<STR_LIT>)<EOL>"}
{"signature": "if (checkClassIsHiddenFromObjC(it)) {", "body": "<EOL><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT>}"}
{"signature": "fun visitRegularClass(regularClass: FirRegularClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classes[regularClass.classId] = location<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitElement(regularClass)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (completedSimpleAtom.atom.callKind == KotlinCallKind.CALLABLE_REFERENCE) {", "body": "<EOL><INDENT><INDENT><INDENT>NewCallableReferenceResolvedCall(<EOL><INDENT><INDENT><INDENT><INDENT>completedSimpleAtom as ResolvedCallableReferenceCallAtom,<EOL><INDENT><INDENT><INDENT><INDENT>typeApproximator,<EOL><INDENT><INDENT><INDENT><INDENT>expressionTypingServices.languageVersionSettings,<EOL><INDENT><INDENT><INDENT><INDENT>resultSubstitutor<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun checkType(type: ValueType<*>) {", "body": "<INDENT>type as ValueType.Optional // K<NUM_LIT>: ok, K<NUM_LIT>: NO_TYPE_ARGUMENTS_ON_RHS}"}
{"signature": "val compilerPlugins =", "body": "listOfNotNull(<EOL>"}
{"signature": "val reportedCacheDirectoriesSize =", "body": "fileContents.lineSequence().find { <STR_LIT> in it }<EOL>"}
{"signature": "fun setFunctionNoInline(function: LLVMValueRef) {", "body": "<EOL><INDENT>addLlvmFunctionEnumAttribute(function, LlvmFunctionAttribute.NoInline)<EOL>}"}
{"signature": "val irReturn =", "body": "JsIrBuilder.buildReturn(function, getSuspendResultAsType(anyN), nothing)<EOL>"}
{"signature": "for ((ap, bp) in a.parameters.zip(b.parameters)) {", "body": "<EOL><INDENT><INDENT><INDENT>unifySchemes(ap, bp)<EOL><INDENT><INDENT>}"}
{"signature": "val SLOTS_PER_INT =", "body": "<NUM_LIT><EOL>"}
{"signature": "import Derived.", "body": "foo<EOL>"}
{"signature": "if (baseType.info is TypeInfo.Pointer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KotlinTypes.cPointerVarOf.typeWith(valueType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((delegated, delegatedTo) in DelegationResolver.getDelegates(descriptor, superTypeDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkDescriptor(declaration, delegated, delegatedTo, context.trace)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val areBuildMetricsNeeded =", "body": "CompilationResultCategory.BUILD_METRICS in requestedResults<EOL>"}
{"signature": "while (iterator.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>val next = iterator.next()<EOL><INDENT><INDENT><INDENT>yield(transform(current, next))<EOL><INDENT><INDENT><INDENT>current = next<EOL><INDENT><INDENT>}"}
{"signature": "val ignoreAnonymousOrLocalClasses =", "body": "true<EOL>"}
{"signature": "val countDown =", "body": "CountDownLatch(<NUM_LIT>)<EOL>"}
{"signature": "val delegatedProperty<NUM_LIT> =", "body": "<NUM_LIT>2 // intentionally left as non-delegated"}
{"signature": "import = imports[tag]!!<EOL>.", "body": ""}
{"signature": "val isReceiverNullable =", "body": "!AbstractNullabilityChecker.isSubtypeOfAny(context.session.typeContext, dispatchReceiverValueType)<EOL>"}
{"signature": "val matchingPrimaryConstructorParam =", "body": "containingClass?.declarations?.filterIsInstance<FirPrimaryConstructor>()<EOL>"}
{"signature": "val subtypeOfNullableSuperType =", "body": "ktType.symbol.upperBounds.all { upperBound -> upperBound.canBeNull }<EOL>"}
{"signature": "fun putAll(from: Map<out K, V>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (method.parameterTypes.isEmpty()) {", "body": "<EOL><INDENT><INDENT>return method.invoke(null) as? String<EOL><INDENT>}"}
{"signature": "if (useTempFile) {", "body": "<EOL><INDENT><INDENT><INDENT>tempFile.moveTo(targetFile, overwrite = true)<EOL><INDENT><INDENT>}"}
{"signature": "var invokeArgIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (!isVisible) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@let<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val anotherSdkDefaultPodTaskName =", "body": "podBuildFullTaskName(sdkName = anotherSdk)<EOL>"}
{"signature": "if (argument is FirVarargArgumentsExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(argument.arguments)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val propertyCall =", "body": "listOfNotNull(propertyName, <STR_LIT>)<EOL>"}
{"signature": "val prevPrintBinary =", "body": "printIntsAsBinary<EOL>"}
{"signature": "fun branchedAndNested(x: Any?, y: Any?) {", "body": "<EOL><INDENT>myAssert(equalsTrue(notEqualsNull(nullWhenNotString(x))) && equalsTrue(isString(y)))<EOL><INDENT>x.length<EOL><INDENT>y.length<EOL>}"}
{"signature": "val staticBackingFields =", "body": "ConcurrentHashMap<IrProperty, IrField>()<EOL>"}
{"signature": "package delegation<EOL>.", "body": ""}
{"signature": "package ab<EOL>.", "body": ""}
{"signature": "val doWhileLoop =", "body": "statement.branches[<NUM_LIT>].result as? IrDoWhileLoop ?: return null<EOL>"}
{"signature": "val completionList<NUM_LIT> =", "body": "repl.complete(codeLine<NUM_LIT>, <NUM_LIT>3)<EOL>"}
{"signature": "val targetParameters =", "body": "target.valueParameters<EOL>"}
{"signature": "var reset =", "body": "false<EOL>"}
{"signature": "if (label != null) {", "body": "<EOL><INDENT><INDENT><INDENT>persistLoopName(label, loop)<EOL><INDENT><INDENT>}"}
{"signature": "fun testDeclaringClass() {", "body": "<INDENT><INDENT>// This file<INDENT><INDENT>assertEquals(TestEnum::class.java, TestEnum.E.declaringJavaClass)<INDENT><INDENT>// From Java<INDENT><INDENT>assertEquals(TimeUnit::class.java, TimeUnit.MILLISECONDS.declaringJavaClass)<INDENT><INDENT>// From Kotlin<INDENT><INDENT>assertEquals(DurationUnit::class.java, DurationUnit.MILLISECONDS.declaringJavaClass)<INDENT>}"}
{"signature": "val beforeCallGlobal =", "body": "mutableMapOf<IrFunction, BitSet>()<EOL>"}
{"signature": "for ((parameter, javaParameter) in functionTypeParameterToJavaTypeParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>javaClass.javaTypeParameterStack.addParameter(javaParameter, parameter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (nodejsLazyDelegate.isInitialized()) {", "body": "<EOL><INDENT><INDENT><INDENT>nodejs(body)<EOL><INDENT><INDENT>}"}
{"signature": "for (annotation in descriptor.backingField?.nonSourceAnnotations.orEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>proto.addExtensionOrNull(extension, annotationSerializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mainVersion =", "body": "parts.take(<NUM_LIT>).map { s -> s.toIntOrNull()?.toString() ?: <STR_LIT> }<EOL>"}
{"signature": "val bitcodePath =", "body": "bitcodeFile.absoluteFile.normalize().path<EOL>"}
{"signature": "val shouldBuildAsFunctionType =", "body": "isBuiltinFunctionClass(classId) && type.argumentList.none { it.projection == Projection.STAR }<EOL>"}
{"signature": "val JVM_SYNTHETIC_ANNOTATION_CLASS_ID =", "body": "ClassId.topLevel(JVM_SYNTHETIC_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "val testCaseBuildDir =", "body": "buildDir.resolve(testSource.name)<EOL>"}
{"signature": "fun testArrayIncrementDecrement(d: dynamic) {", "body": "<EOL><INDENT>val t<NUM_LIT> = ++d[<STR_LIT>]<EOL><INDENT>val t<NUM_LIT> = --d[<STR_LIT>]<EOL><INDENT>val t<NUM_LIT> = d[<STR_LIT>]++<EOL><INDENT>val t<NUM_LIT> = d[<STR_LIT>]--<EOL>}"}
{"signature": "for (child in path.listDirectoryEntries()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (child.name.endsWith(<STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>child.deleteExisting()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val instanceProp =", "body": "A::instanceProp<EOL>"}
{"signature": "val correct<NUM_LIT> =", "body": "A().fooA<A>().fooA() as A<EOL>"}
{"signature": "val VOLATILE_WRAPPER_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (storedReference == null || !ErrorUtils.isError(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.record(REFERENCE_TARGET, calleeExpression, descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until expression.valueArgumentsCount) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.putValueArgument(i, newArguments[i + <NUM_LIT>])<EOL><INDENT><INDENT>}"}
{"signature": "val revisedExpectedType =", "body": "argument.revisedExpectedType<EOL>"}
{"signature": "fun sss() {", "body": "<INDENT>val some = <NUM_LIT><INDENT>// Should be resolved to top-level some,<INDENT>// because with local some invoke isn't applicable<INDENT>some()}"}
{"signature": "if (currentState.resolvePhase >= toPhase) {", "body": "<INDENT><INDENT><INDENT><INDENT>// already resolved by some other thread<INDENT><INDENT><INDENT><INDENT>return<INDENT><INDENT><INDENT>}"}
{"signature": "val didSessionExist =", "body": "sessionCache.removeSession(module)<EOL>"}
{"signature": "for (classProto in file.classesToDecompile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>createClassStub(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fileStub, classProto, nameResolver, nameResolver.getClassId(classProto.fqName), source = null, context = context<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val paramsByNames =", "body": "function.parameters.associate { it.name to it }<EOL>"}
{"signature": "fun foo(s: List<String>) {", "body": "}<!><EOL><!CONFLICTING_JVM_DECLARATIONS!>fun foo(s: java.util.List<String>) {}"}
{"signature": "fun bar(xBar<NUM_LIT>: Int, xBar<NUM_LIT>: Int, xBar<NUM_LIT>: Int) {", "body": "<EOL><INDENT>baz(<NUM_LIT>00, <NUM_LIT>0<NUM_LIT>, <NUM_LIT>0<NUM_LIT>)<EOL>}"}
{"signature": "val testNames =", "body": "executable.testNames.filterIrrelevant(testCase)<EOL>"}
{"signature": "val languageFeatureName =", "body": "tail.substring(<NUM_LIT>)<EOL>"}
{"signature": "val filteredSymbols =", "body": "declarations.filter(filter)<EOL>"}
{"signature": "if (dstClass.defaultType.isObjCObjectType()) {", "body": "<EOL><INDENT><INDENT><INDENT>genInstanceOfObjC(obj, dstClass)<EOL><INDENT><INDENT>}"}
{"signature": "package plugins.", "body": "publishing<EOL>"}
{"signature": "val newLineIdx =", "body": "string.indexOf(<STR_LIT>)<EOL>"}
{"signature": "for ((name, value) in annotation.allValueArguments) {", "body": "<EOL><INDENT><INDENT><INDENT>val argument = ProtoBuf.Annotation.Argument.newBuilder()<EOL><INDENT><INDENT><INDENT>argument.nameId = stringTable.getStringIndex(name.asString())<EOL><INDENT><INDENT><INDENT>argument.setValue(valueProto(value))<EOL><INDENT><INDENT><INDENT>addArgument(argument)<EOL><INDENT><INDENT>}"}
{"signature": "if (!ignoreTreeAccess || e.message?.startsWith(<STR_LIT>) != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw e<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val platform = target.platform) {", "body": "<EOL><INDENT><INDENT><INDENT>Platform.Common -> <STR_LIT><EOL><INDENT><INDENT><INDENT>Platform.Native -> if (target.backend == Backend.Wasm) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> platform.name.lowercase().capitalize()<EOL><INDENT><INDENT>}"}
{"signature": "when (arg.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ProjectionKind.IN -> ConeKotlinTypeProjectionIn(it)<EOL><INDENT><INDENT><INDENT><INDENT>ProjectionKind.OUT -> ConeKotlinTypeProjectionOut(it)<EOL><INDENT><INDENT><INDENT><INDENT>ProjectionKind.STAR -> ConeStarProjection<EOL><INDENT><INDENT><INDENT><INDENT>ProjectionKind.INVARIANT -> it<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(<EOL><INDENT>a: Any,<EOL><INDENT>b: Int<EOL><INDENT>c: String<EOL>) {", "body": "<EOL><EOL>}"}
{"signature": "val KLIB_METADATA_FILE_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val containingModule =", "body": "PLModule.determineModuleFor(declaration)<EOL>"}
{"signature": "fun process(foo: Foo<Long>) {", "body": "<EOL><INDENT>foo as Foo<NUM_LIT><*><EOL>}"}
{"signature": "val creator =", "body": "parcelableCreator<Test>()<EOL>"}
{"signature": "val surrogatesEnd =", "body": "minOf(end, maxSurrogate)<EOL>"}
{"signature": "val propertyReceiver =", "body": "resolvedSymbol as? FirPropertySymbol ?: return resolvedSymbol<EOL>"}
{"signature": "val shouldSpillStack =", "body": "node.requiresEmptyStackOnEntry()<EOL>"}
{"signature": "val lowExpectedIndex =", "body": "prevNonWhitespaceIndex + <NUM_LIT><EOL>"}
{"signature": "val debugLocation =", "body": "codegen.generateLocationInfo(startLocationInfo)<EOL>"}
{"signature": "for (dir in paths) {", "body": "<EOL><INDENT><INDENT>if (tryLoadKonanLibrary(dir, fullLibraryName, runFromDaemon)) return<EOL><INDENT>}"}
{"signature": "var classId =", "body": "value.classId<EOL>"}
{"signature": "package kt<NUM_LIT>_kt<NUM_LIT><EOL>.", "body": ""}
{"signature": "val indexedAccessAugmentedAssignment =", "body": "generateIndexedAccessAugmentedAssignment(<EOL>"}
{"signature": "val hasModifierByDeclaration =", "body": "hasModifier(name)<EOL>"}
{"signature": "fun test(c : Class<*>) {", "body": "<INDENT>val sc = c <!UNCHECKED_CAST!>as Class<String><!><INDENT>// No ambiguous overload<INDENT>c.getAnnotations();<INDENT>sc.getAnnotations();}"}
{"signature": "else if (isWrong && initializer != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(initializer.source, FirWebCommonErrors.WRONG_INITIALIZER_OF_EXTERNAL_DECLARATION, context)<EOL><INDENT><INDENT>}"}
{"signature": "var parameterTypes =", "body": "mapJList(type.parameters) { convert(it.typeReference, substitutions) }<EOL>"}
{"signature": "for (char in chars) {", "body": "<EOL><INDENT><INDENT>result += char<EOL><INDENT>}"}
{"signature": "val nativeTestTransformationTask =", "body": "locateOrRegisterCInteropMetadataDependencyTransformationTask(nativeTest)<EOL>"}
{"signature": "val OR<INDENT><INDENT><INDENT><INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "if (a.compareAndSet(value, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(<NUM_LIT>, a.value)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun translate(classDeclaration: KtEnumEntry, context: TranslationContext, enumInitializerName: JsName, ordinal: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>return ClassTranslator(classDeclaration, context, enumInitializerName, ordinal).translate()<EOL><INDENT><INDENT>}"}
{"signature": "else if (line.contains(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parsePos(line)<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val singleFileFacade =", "body": "getPackageName(<STR_LIT>)<EOL>"}
{"signature": "val destinationDir =", "body": "project.layout.buildDirectory.dir(<STR_LIT>)<EOL>"}
{"signature": "val fooPackageDir =", "body": "File(javaFilesDir, <STR_LIT>)<EOL>"}
{"signature": "val bSymbol =", "body": "file.getClassOrFail(<STR_LIT>)<EOL>"}
{"signature": "if (elements.contains(backing[rangeOffset + i]) == retain) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>backing[rangeOffset + j++] = backing[rangeOffset + i++]<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val enclosingSuspendFunction =", "body": "findEnclosingSuspendFunction(context)<EOL>"}
{"signature": "fun unreachable<NUM_LIT>() {", "body": "<EOL><INDENT>return<EOL><INDENT><!UNREACHABLE_CODE!>bar(todo())<!><EOL>}"}
{"signature": "val C<NUM_LIT> =", "body": "-1.1359<NUM_LIT>4755778819482<NUM_LIT>5e<NUM_LIT> <EOL>"}
{"signature": "if (containsKey(key)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getCanonicalPath(key)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!me.isShadowedByFieldCandidate(candidates)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result += myCandidate<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val konanTarget =", "body": "task.konanTarget<EOL>"}
{"signature": "fun onNewBoxedValue(value: BoxedBasicValue) {", "body": "<EOL><INDENT><INDENT>candidatesBoxedValues.add(value.descriptor)<EOL><INDENT>}"}
{"signature": "val parsedContract =", "body": "PsiContractParserDispatcher(collector, callContext, storageManager).parseContract()<EOL>"}
{"signature": "val substitutedValueParameter =", "body": "resolvedCall.resultingDescriptor.valueParameters[valueParameter.index]<EOL>"}
{"signature": "if (old.hasExtension(KlibMetadataProtoBuf.enumEntryOrdinal)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(KlibMetadataProtoBuf.enumEntryOrdinal) != new.getExtension(KlibMetadataProtoBuf.enumEntryOrdinal)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val llvm =", "body": "generationState.llvm<EOL>"}
{"signature": "if (context.configuration.generateBodies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>bodyGenerator.generateExpressionBody(defaultValue)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (it !is ExportedConstructor || it.isProtected) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mavenLocalOverride =", "body": "System.getProperty(<STR_LIT>) ?: return<EOL>"}
{"signature": "for (arg in argumentList.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT>arg.unwrapAndFlattenArgument(flattenArrays = true).forEach(::take)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(mh: MethodHandle?, mt: MethodType?) {", "body": "<EOL><INDENT>val z = if (cond()) mh else mt<EOL>}"}
{"signature": "val scriptDefinitionProvider =", "body": "ScriptDefinitionProvider.getInstance(project) as? CliScriptDefinitionProvider<EOL>"}
{"signature": "if (isExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>tryResult.materializeAt(tryAsmType, aTry.type, true)<EOL><INDENT><INDENT><INDENT>savedValue = frameMap.enterTemp(tryAsmType)<EOL><INDENT><INDENT><INDENT>mv.store(savedValue, tryAsmType)<EOL><INDENT><INDENT>}"}
{"signature": "val librariesConfigurationName =", "body": "project.registerLibsDependencies(target, artifactName + nameSuffix, modules)<EOL>"}
{"signature": "val maximumRegression =", "body": "report.maximumRegression<EOL>"}
{"signature": "import good.", "body": "prefix.JavaTest;<EOL>"}
{"signature": "import<EOL>package n<EOL>.", "body": ""}
{"signature": "fun testImportDiamond() {", "body": "<EOL><INDENT><INDENT>runTest(<STR_LIT>, listOf(<STR_LIT>, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "if (reason is Error) {", "body": "<EOL><INDENT><INDENT>throw reason<EOL><INDENT>}"}
{"signature": "fun Foo(a: Bar) {", "body": "<EOL><INDENT><INDENT><INDENT>used(a)<EOL><INDENT><INDENT>}"}
{"signature": "fun render(declaration: FirDeclaration) {", "body": "<EOL><INDENT><INDENT>val contractDescription = (declaration as? FirContractDescriptionOwner)?.contractDescription ?: return<EOL><INDENT><INDENT>render(contractDescription)<EOL><INDENT>}"}
{"signature": "val constructorTypeParameters =", "body": "<EOL><INDENT><INDENT><INDENT>classDescriptor.declaredTypeParameters +<EOL>"}
{"signature": "for (v in elements) {", "body": "<EOL><INDENT><INDENT><INDENT>if (add(v)) changed = true<EOL><INDENT><INDENT>}"}
{"signature": "val additionalDependencyModulesCopy =", "body": "additionalDependencyModules.toSet()<EOL>"}
{"signature": "fun uIntToULong(f: (UInt) -> ULong) {", "body": "}<EOL><INDENT>fun listOfUIntsToListOfULongs(f: (List<UInt>) -> List<ULong>) {}"}
{"signature": "val callArgErrors =", "body": "setOf(<EOL>"}
{"signature": "package name is not present in the manifest file (${manifestFile.", "body": "absolutePath})\"<EOL>"}
{"signature": "val testConstructor =", "body": "<!UNDERSCORE_USAGE_WITHOUT_BACKTICKS!>_<!><Any>()<EOL>"}
{"signature": "fun visitPropertyAccessor(propertyAccessor: FirPropertyAccessor, data: T) {", "body": "<EOL><INDENT><INDENT>visitFunction(propertyAccessor, data)<EOL><INDENT>}"}
{"signature": "val otherName =", "body": "otherType.capitalized<EOL>"}
{"signature": "val BITS_PER_SLOT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val unstableError =", "body": "if (dispatchReceiver.isStable) null else UnstableSmartCastDiagnostic<EOL>"}
{"signature": "val clearFunction =", "body": "builderClass.createFunction(<EOL>"}
{"signature": "if (now.y != <NUM_LIT> && !field.northWall()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>possibleSteps.add(Coordinate(now.x, now.y - <NUM_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stubGenerator =", "body": "MissingDeclarationStubGenerator(builtIns)<EOL>"}
{"signature": "val typeParams =", "body": "typeParameters.renderTypeParams()<EOL>"}
{"signature": "val mainModuleLib =", "body": "sortedDependencies.last()<EOL>"}
{"signature": "if (Files.exists(outputFile)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>stashFile(outputFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val RETURN_VALUE =", "body": "<NUM_LIT><EOL>"}
{"signature": "val reportTarget =", "body": "declarationDescriptor.getJsNameArgument() ?: declaration.getIdentifier()<EOL>"}
{"signature": "val conflictedHandles =", "body": "SmartSet.create<H>()<EOL>"}
{"signature": "val aClassSaved =", "body": "savedClassLoader.loadClass(aClass.name)<EOL>"}
{"signature": "package name in which callable symbols should be declared<EOL>.", "body": ""}
{"signature": "fun visitValueParameterDescriptor(descriptor: ValueParameterDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>reportUnexpectedDescriptor(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val filed =", "body": "BinaryJavaField(Name.identifier(name), access, this, access.isSet(Opcodes.ACC_ENUM), type, processedValue)<EOL>"}
{"signature": "while (a == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "fun recordFileRead() {", "body": "<EOL><INDENT><INDENT><INDENT>fileReadHistory.add(fileObject.toUri())<EOL><INDENT><INDENT>}"}
{"signature": "val buildInfo =", "body": "sax.build(<EOL>"}
{"signature": "var wasFoundAny =", "body": "false<EOL>"}
{"signature": "if (jumpsIfNull) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>goTo(originalLabel.label)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinCache =", "body": "project.dataManager.getKotlinCache(kotlinContext.targetsBinding[target])<EOL>"}
{"signature": "if (HostManager.host !is KonanTarget.MACOS_ARM<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.typeParameterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.typeParameterAnnotation, i), new.getExtension(KlibMetadataProtoBuf.typeParameterAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val builderAfterAnnotationResolve =", "body": "StringBuilder()<EOL>"}
{"signature": "val resolvedExpandedTypeRef =", "body": "symbol.resolvedExpandedTypeRef<EOL>"}
{"signature": "val functionById =", "body": "mutableMapOf<DeclarationID, FunctionDecl?>()<EOL>"}
{"signature": "fun reorderArgumentsIfNeeded(actualArgsWithDeclIndex: List<ArgumentAndDeclIndex>, valueParameterTypes: List<Type>) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun singleEmptyDirectory() {", "body": "<EOL><INDENT><INDENT>val testDir = createTempDirectory().cleanup()<EOL><INDENT><INDENT>assertTrue(testDir.walk().none())<EOL><INDENT><INDENT>assertEquals(testDir, testDir.walk(PathWalkOption.INCLUDE_DIRECTORIES).single())<EOL><INDENT>}"}
{"signature": "val actualReceiverClassifier =", "body": "actualReceiverType.classifierOrFail<EOL>"}
{"signature": "val originallyDefinedSuperClass =", "body": "implicitlyExportedClassesString.takeIf { it.isNotEmpty() }?.let { <STR_LIT> }.orEmpty()<EOL>"}
{"signature": "val otherDir =", "body": "File(tempDir, <STR_LIT>).apply { mkdir() }<EOL>"}
{"signature": "val fakeSource =", "body": "expression.toKtPsiSourceElement(KtFakeSourceElementKind.DesugaredForLoop)<EOL>"}
{"signature": "var active =", "body": "false<EOL>"}
{"signature": "val addReflect =", "body": "<STR_LIT> !in kotlinc.args<EOL>"}
{"signature": "val floatType =", "body": "float.toIrType()<EOL>"}
{"signature": "val BUILD_SESSION_SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "if (shouldOptimiseUnusedVariables) {", "body": "<EOL><INDENT><INDENT><INDENT>updateLvtAccordingToLiveness(methodNode, isForNamedFunction, stateLabels)<EOL><INDENT><INDENT>}"}
{"signature": "if (isRefinement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportArgumentsIgnoredFromRefinement(it, messageCollector, ignoredOptionsReportingState)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (thisKind != PrimitiveType.BYTE && thisKind != PrimitiveType.SHORT && thisKind == otherKind) {", "body": "<EOL><INDENT><INDENT><INDENT>return setAsExternal(thisKind)<EOL><INDENT><INDENT>}"}
{"signature": "val universalMagic =", "body": "listOf(<NUM_LIT>xca, <NUM_LIT>xfe, <NUM_LIT>xba, <NUM_LIT>xbe)<EOL>"}
{"signature": "if (declaration.hasDelegate()) {", "body": "<EOL><INDENT><INDENT><INDENT>return Errors.CONST_VAL_WITH_DELEGATE.on(declaration.delegate!!).nonApplicable()<EOL><INDENT><INDENT>}"}
{"signature": "if (JvmCodegenUtil.isConst(closure)) {", "body": "<EOL><INDENT><INDENT><INDENT>generateConstInstance(asmType, wrapperMethod.returnType)<EOL><INDENT><INDENT>}"}
{"signature": "val frozenAnnotation =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun printNonTestOutput(text: String, type: LogType?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val value = text.trimEnd()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>progressLogger.progress(value)<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parseConsole(value, type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isIntrinsicConst) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fn.annotations += intrinsicConstAnnotation<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (fromSources) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Compile test, NOT respecting possible `mode=TWO_STAGE_MULTI_MODULE`: don't add intermediate LibraryCompilation(kt->klib).<INDENT><INDENT><INDENT><INDENT>// KT<NUM_LIT>: Extract this test from usual Native test run, and run it in scope of new test module<INDENT><INDENT><INDENT><INDENT>barTestCase to compileToExecutableInOneStage(barTestCase, fooLibrary.asLibraryDependency())<INDENT><INDENT><INDENT>}"}
{"signature": "val classParent =", "body": "classOrObject.parent<EOL>"}
{"signature": "val depth<NUM_LIT>ExpectedNames =", "body": "depth<NUM_LIT>ExpectedNames +<EOL>"}
{"signature": "fun testClassIsRemovedNonIC(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestClassIsRemoved(gradleVersion, defaultBuildOptions)<EOL><INDENT>}"}
{"signature": "for (annotationB in annotationsB) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>mismatches += Mismatch.MissingEntity(annotationKind, annotationClassName, containerContext.path, annotationB, true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (function is KtNamedFunction) {", "body": "<EOL><INDENT><INDENT>function.baz()<EOL><INDENT>}"}
{"signature": "val us =", "body": "arrayOf(UInt(<NUM_LIT>), UInt(<NUM_LIT>), UInt(<NUM_LIT>))<EOL>"}
{"signature": "val oldEntries =", "body": "registrationMap[entry.key]<EOL>"}
{"signature": "val samClassDescriptor =", "body": "samType.constructor.declarationDescriptor as? ClassDescriptor<EOL>"}
{"signature": "package c.", "body": "b.a<EOL>"}
{"signature": "if (diagnostic is DeprecationDiagnosticData) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(diagnostic.featureForError.name)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fooI<NUM_LIT> =", "body": "i<NUM_LIT>.foo(ic).x<EOL>"}
{"signature": "fun visitReturnExpression(returnExpression: FirReturnExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allReturnExpressionCheckers.check(returnExpression, data)<EOL><INDENT>}"}
{"signature": "var wordIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val newDeclaration =", "body": "getTransformedSymbol(expression.symbol) ?: return expression<EOL>"}
{"signature": "when (x as? String) {", "body": "<EOL><INDENT><INDENT> *<INDENT> is CharSequence -> ...<EOL><INDENT><INDENT> *<INDENT> null -> ...<EOL><INDENT><INDENT> * }"}
{"signature": "else if (candidateDescriptor is FakeCallableDescriptorForObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nestedClass = candidateDescriptor.getReferencedObject()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val KONAN_EXTENSION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val pending =", "body": "mutableListOf<FirClassifierSymbol<*>>()<EOL>"}
{"signature": "if (a === null) {", "body": "<EOL><INDENT>}"}
{"signature": "val fi =", "body": "Fourple::class.typeParameters<EOL>"}
{"signature": "val barb =", "body": "bar(b)<EOL>"}
{"signature": "val splitRe =", "body": "<STR_LIT>\"(?:\\\\.|[^,\\\\]++)*<STR_LIT>\".toRegex()<EOL>"}
{"signature": "val currentDeclarationParent =", "body": "currentDeclarationParent!!<EOL>"}
{"signature": "if (textFormat == RenderingFormat.HTML) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun resetCursorRects() {", "body": "<EOL><INDENT>   sb.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val methodVisitor =", "body": "classBuilder.newMethod(<EOL>"}
{"signature": "fun test<NUM_LIT>Null() {", "body": "<EOL><INDENT>if (eqDI(<NUM_LIT>.<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqDL(<NUM_LIT>.<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqID(<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqLD(<NUM_LIT>L, null)) throw Exception()<EOL><INDENT>if (eqFI(<NUM_LIT>.<NUM_LIT>F, null)) throw Exception()<EOL><INDENT>if (eqFL(<NUM_LIT>.<NUM_LIT>F, null)) throw Exception()<EOL><INDENT>if (eqIF(<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqLF(<NUM_LIT>L, null)) throw Exception()<EOL>}"}
{"signature": "fun processHeader(headerMetadata: ByteArray) {", "body": "<EOL><INDENT><INDENT>this.headerMetadata = headerMetadata<EOL><INDENT>}"}
{"signature": "val bytecode =", "body": "classFileBytecodeString(classFile)<EOL>"}
{"signature": "for ((a, b) in list) {", "body": "<EOL><INDENT><INDENT>i = a;<EOL><INDENT><INDENT>s = b;<EOL><INDENT>}"}
{"signature": "if (e is IrTry) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>needReset = !found<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!symbol.owner.hasComposableAnnotation()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>symbol.owner.annotations += createComposableAnnotation()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val packageFragmentCache =", "body": "ContainerUtil.createConcurrentWeakValueMap<CacheKey, CacheValue<ProtoBuf.PackageFragment>>()<EOL>"}
{"signature": "val jsArguments =", "body": "context.intrinsics.jsArguments<EOL>"}
{"signature": "val boundTopLevel =", "body": "<STR_LIT>::topLevel<EOL>"}
{"signature": "if (hasType()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + type.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "fun builder(coroutine c: Controller.() -> Continuation<Unit>) {", "body": "<EOL><EOL>}"}
{"signature": "val isPrimitiveTypeOrWrapper =", "body": "<EOL><INDENT><INDENT><INDENT>argumentType.isPrimitiveType() ||<EOL>"}
{"signature": "val androidFilePath =", "body": "configuration.singleFile.canonicalPath<EOL>"}
{"signature": "when (rawValue.lowercase().trim()) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> Option(this, CommonizerLogLevel.Quiet)<EOL><INDENT><INDENT><INDENT><STR_LIT> -> Option(this, CommonizerLogLevel.Info)<EOL><INDENT><INDENT><INDENT>else -> Option(this, CommonizerLogLevel.Quiet)<EOL><INDENT><INDENT>}"}
{"signature": "var hasInterfaceDelegation =", "body": "false<EOL>"}
{"signature": "if (result === UNDECIDED) {", "body": "<EOL><INDENT><INDENT><INDENT>if (resultRef.compareAndSet(UNDECIDED, COROUTINE_SUSPENDED)) return COROUTINE_SUSPENDED<EOL><INDENT><INDENT><INDENT>result = resultRef.value<EOL><INDENT><INDENT>}"}
{"signature": "fun clearChanges() {", "body": "<EOL><INDENT><INDENT>addedEntries.clear()<EOL><INDENT><INDENT>modifiedEntries.clear()<EOL><INDENT><INDENT>appendedEntries.clear()<EOL><INDENT><INDENT>removedKeys.clear()<EOL><INDENT>}"}
{"signature": "val outStreams =", "body": "Array(ParallelStartParams.threads, { ByteArrayOutputStream() })<EOL>"}
{"signature": "if (!returnType.isExportableReturn(bindingContext)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJs.NON_EXPORTABLE_TYPE.on(declaration, <STR_LIT>, returnType))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (index in ktTypeArguments.size until expectedTypeArgumentCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>typeArguments.add(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ErrorUtils.createErrorType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ErrorTypeKind.MISSED_TYPE_ARGUMENT_FOR_TYPE_PARAMETER,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>candidateDescriptor.typeParameters[index].name.toString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var charSeqVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "val kotlinAndroidAndroidTestSourceSet =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "if (isFunction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>functionalSupertype = superType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var maxElem =", "body": "this[<NUM_LIT>]<EOL>"}
{"signature": "if (source?.kind is KtFakeSourceElementKind.DesugaredPrefixSecondGetReference) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (kind == OwnerKind.ERASED_INLINE_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sw.writeReturnType()<EOL><INDENT><INDENT><INDENT><INDENT>sw.writeAsmType(mapType(f.containingDeclaration))<EOL><INDENT><INDENT><INDENT><INDENT>sw.writeReturnTypeEnd()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedReceiver =", "body": "lambda.expectedType.receiver()<EOL>"}
{"signature": "var iteratorVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (returnCrossesTryCatchBoundary(expression)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateJumpsToCatchAndFinally()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val classData =", "body": "classDataFinder.findClassData(classId) ?: return null<EOL>"}
{"signature": "fun markAsRunnable() {", "body": "<EOL><INDENT><INDENT>this.state = this.state or STATE_RUNNABLE<EOL><INDENT>}"}
{"signature": "val alreadyPresent =", "body": "computeStubsForSuperClasses(irClass)<EOL>"}
{"signature": "var outerGroupRequired =", "body": "false<EOL>"}
{"signature": "var mutableProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "val includedBuild =", "body": "project.gradle.includedBuild(identifier.identityPath.topRealPath().name!!)<EOL>"}
{"signature": "val OPERATOR_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val INVOKE =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val javaRetentionPolicy =", "body": "kotlinRetentionPolicy?.let { symbols.annotationRetentionMap[it] } ?: symbols.rpRuntime<EOL>"}
{"signature": "val RETURNS =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val value_ =", "body": "HashMap<Nothing, Nothing>(<NUM_LIT>).also { it.isReadOnly = true }<EOL>"}
{"signature": "val symbolName =", "body": "pkgName.replace(INVALID_CLANG_IDENTIFIER_REGEX, <STR_LIT>) + <STR_LIT><EOL>"}
{"signature": "val innerPackageCaches =", "body": "HashMap<String, Cache>()<EOL>"}
{"signature": "val barLamdbdaVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (parent is IrFunction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parentFunction = parent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (aliasImportNames.isEmpty()) {", "body": "// optimization<INDENT><INDENT><INDENT>allImplicitImports<INDENT><INDENT>}"}
{"signature": "var arraySize =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun restoreFlags(flags: Int) {", "body": "<INDENT><INDENT>this.flags = flags<INDENT><INDENT>lookAhead = currentChar<INDENT><INDENT>lookAheadSpecialToken = curSpecialToken<INDENT><INDENT>// curTokenIndex is an index of closing bracket ')'<INDENT><INDENT>index = curTokenIndex + <NUM_LIT><INDENT><INDENT>lookAheadTokenIndex = curTokenIndex<INDENT><INDENT>movePointer()<INDENT>}"}
{"signature": "if (propertyDescriptor.modality == Modality.ABSTRACT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportVisibilityModifierDiagnostics(tokens.values, PRIVATE_SETTER_FOR_ABSTRACT_PROPERTY)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setUnnamedAddr(value: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMSetUnnamedAddr(llvmGlobal, if (value) <NUM_LIT> else <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun boxExternalObject() {", "body": "<EOL><INDENT>anyExample(ExternalObject)<EOL><INDENT>anyOrNullExample(ExternalObject)<EOL><INDENT>genericExample(ExternalObject)<EOL><INDENT>genericOrNullExample(ExternalObject)<EOL><INDENT>dynamicExample(ExternalObject)<EOL>}"}
{"signature": "val performanceMetrics =", "body": "buildMetrics?.buildPerformanceMetrics?.asMap() ?: emptyMap()<EOL>"}
{"signature": "package first<EOL>.", "body": ""}
{"signature": "val alreadyModifiedFiles =", "body": "modifiedFiles[dependentLib] ?: emptyMap()<EOL>"}
{"signature": "fun noInline(s: () -> Int) {", "body": "<EOL><INDENT>s()<EOL>}"}
{"signature": "val stackLocalsInitBb =", "body": "basicBlockInFunction(<STR_LIT>, null)<EOL>"}
{"signature": "when (val kotlinExtension = project.kotlinExtension) {", "body": "<EOL><INDENT><INDENT>is KotlinMultiplatformExtension -> kotlinExtension.targets.withType(KotlinAndroidTarget::class.java).singleOrNull()<EOL><INDENT><INDENT>is KotlinAndroidProjectExtension -> kotlinExtension.target<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "fun test(a: C<Y, Y, Y>) {", "body": "<EOL><INDENT><INDENT>val d: D<X, Y, Y> = <!TYPE_MISMATCH, TYPE_MISMATCH!>D(a)<!><EOL><INDENT>}"}
{"signature": "fun enterAnonymousFunctionExpression(anonymousFunctionExpression: FirAnonymousFunctionExpression) {", "body": "<EOL><INDENT><INDENT>graphBuilder.enterAnonymousFunctionExpression(anonymousFunctionExpression)?.mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (imports != null) {", "body": "<EOL><INDENT><INDENT><INDENT>appendImports(imports)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitPostponedLambdaExitNode(node: PostponedLambdaExitNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitPostponedLambdaExitNode(node)<EOL><INDENT>}"}
{"signature": "val FIB_SCRIPT_OUTPUT_TAIL =", "body": "<EOL><INDENT><STR_LIT>\"<EOL>"}
{"signature": "val isEffectivelyExpect =", "body": "declaration.isEffectivelyExpect(context.containingDeclarations.lastOrNull() as? FirRegularClass, context)<EOL>"}
{"signature": "val NO_PARAM_SCRIPT_DEFINITION =", "body": "<EOL><INDENT><INDENT><INDENT>ScriptDefinition.FromLegacy(<EOL>"}
{"signature": "fun bar(o: Int?) {", "body": "}"}
{"signature": "val fieldRefType =", "body": "context.mirror(field.type)<EOL>"}
{"signature": "if (isIncompatibleInAccordanceWithBuiltInOverridabilityRules(superDescriptor, subDescriptor, subClassDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Result.INCOMPATIBLE<EOL><INDENT><INDENT>}"}
{"signature": "val javaSourceRootProperties =", "body": "commonSourceRoot.properties as? JavaSourceRootProperties<EOL>"}
{"signature": "val codeWithRemappedLines =", "body": "parsedProgram.toStringWithLineNumbers()<EOL>"}
{"signature": "fun visitRawFunctionReference(expression: IrRawFunctionReference, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitRawFunctionReference(expression)<EOL><INDENT>}"}
{"signature": "if (isOverridden) {", "body": "<EOL><INDENT><INDENT><INDENT>(method.visibleAnnotations ?: emptyList()) + AnnotationNode(Type.getType(Override::class.java).descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (virtualFile != null && virtualFile.extension == BuiltInSerializerProtocol.BUILTINS_FILE_EXTENSION) {", "body": "<EOL><INDENT><INDENT><INDENT>return builtinsModule<EOL><INDENT><INDENT>}"}
{"signature": "val toolConfiguration =", "body": "ToolPatternImpl(sourceSets.extension, <STR_LIT>, *deps.toTypedArray())<EOL>"}
{"signature": "val precursor =", "body": "buildConstraintGraphPrecursor(nodesMap, functions, typeHierarchy, rootSet)<EOL>"}
{"signature": "val patternApt =", "body": "<STR_LIT><EOL>"}
{"signature": "if (prefixLength > pathLength) {", "body": "<EOL><INDENT><INDENT>false<EOL><INDENT>}"}
{"signature": "val presentLines =", "body": "expectedLines.filter { uniqueLogLines.getValue(logLevel).contains(it) }<EOL>"}
{"signature": "val innerClassesDiffs =", "body": "ArrayList<DiffEntry>()<EOL>"}
{"signature": "val newANullability =", "body": "nullabilityOfA.refine(if (isEquate) nullabilityOfB else nullabilityOfB.invert())<EOL>"}
{"signature": "val overriddenMembers =", "body": "(clazz.declarations.filterIsInstance<IrOverridableMember>() + implementedMembers)<EOL>"}
{"signature": "val comp<NUM_LIT> =", "body": "(engine as Compilable).compile(<STR_LIT>)<EOL>"}
{"signature": "fun runNothingBlock(block: () -> Nothing) {", "body": "(block as () -> Any?)() }"}
{"signature": "if (androidSourceSet.resources.srcDirs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>androidSourceSet.resources.srcDir(KotlinSourceSetFactory.defaultSourceFolder(project, kotlinSourceSet.name, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>kotlinSourceSet.resources.srcDirs(androidSourceSet.resources.srcDirs)<EOL><INDENT><INDENT>}"}
{"signature": "val byteArray<NUM_LIT> =", "body": "copyByteArray(*byteArray)<EOL>"}
{"signature": "for (candidateContextReceiverParameter in candidateDescriptor.contextReceiverParameters) {", "body": "<EOL><INDENT><INDENT><INDENT>val contextReceiverArgument = findContextReceiver(implicitReceiversGroups, candidateContextReceiverParameter) ?: return<EOL><INDENT><INDENT><INDENT>contextReceiversArguments.add(contextReceiverArgument)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(i: Int, j: Int) {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE!>foo<!>[i, j]<EOL>}"}
{"signature": "if (declaration !is FirFunction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (ktDeclaration == nonLocalDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>val session = sessionProvider.getResolvableSession(module)<EOL><INDENT><INDENT><INDENT>return nonLocalDeclaration.findSourceNonLocalFirDeclaration(<EOL><INDENT><INDENT><INDENT><INDENT>firFileBuilder = session.moduleComponents.firFileBuilder,<EOL><INDENT><INDENT><INDENT><INDENT>provider = session.firProvider,<EOL><INDENT><INDENT><INDENT>).symbol<EOL><INDENT><INDENT>}"}
{"signature": "for (c in <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>print(c)<EOL><INDENT>}"}
{"signature": "val PLUGIN_JAR_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val fieldReceiver =", "body": "if (field.isStatic) null else boundReceiver<EOL>"}
{"signature": "val compareAndSetFieldIntrinsic =", "body": "<EOL><INDENT><INDENT>context.referenceFunctions(CallableId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))).single()<EOL>"}
{"signature": "var sizeLimits =", "body": "mutableListOf(SizeLimit(Long.MAX_VALUE, <STR_LIT>))<EOL>"}
{"signature": "val abiTypeNames =", "body": "HashSet<String>(abiTypesSize)<EOL>"}
{"signature": "val PLUGIN_CLASSPATH_CONFIGURATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun useTrackedJavaClassFooMethodUsage(jc: TrackedJavaClass) {", "body": "<EOL><INDENT>jc.foo()<EOL>}"}
{"signature": "package good.", "body": "prefix<EOL>"}
{"signature": "if (it is JsExpressionStatement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.expression.source = sourceInfo<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (<NUM_LIT> > <NUM_LIT>)<EOL><INDENT><INDENT>{", "body": "<EOL><INDENT><INDENT><INDENT>_oldVersion++<EOL><INDENT><INDENT>}"}
{"signature": "if (interfaceCompanions.isNotEmpty()) <STR_LIT> + interfaceCompanions.joinToString(<STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>it.toTypeScript(<EOL><INDENT><INDENT><INDENT><INDENT>indent,<EOL><INDENT><INDENT><INDENT><INDENT>prefix,<EOL><INDENT><INDENT><INDENT><INDENT>esModules<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun addJavaSourceRoot(rootPath: JavaRootPath) {", "body": "<EOL><INDENT><INDENT>javaSourceRoots.add(rootPath)<EOL><INDENT>}"}
{"signature": "val annotatedWith =", "body": "roundEnv.getElementsAnnotatedWith(KotlinFilerGenerated::class.java)<EOL>"}
{"signature": "for (propertyParameter in getConstructorProhibitedPropertyParameters(declaration, lastClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(propertyParameter.source, FirErrors.EXPECTED_CLASS_CONSTRUCTOR_PROPERTY_PARAMETER, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (jarPath.startsWith(JAR_PROTOCOL + <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>jarPath = jarPath.substring(JAR_PROTOCOL.length + <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val nullabilityQualifier =", "body": "extractNullability(typeQualifier) { false } ?: return null<EOL>"}
{"signature": "val coroutineImplExceptionStatePropertyGetter =", "body": "coroutineSymbols.coroutineImplExceptionStatePropertyGetter<EOL>"}
{"signature": "val ignoredOptionsReportingState =", "body": "IgnoredOptionsReportingState()<EOL>"}
{"signature": "val staticScopesBeforeContainingClass =", "body": "transformer.staticScopesBefore<EOL>"}
{"signature": "for (key in listOf(argument.value, argument.shortName, argument.deprecatedName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (key.isNotEmpty()) put(key, argumentField)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun andForInt() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT> and <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val lambdaResult =", "body": "KotlinObject()<EOL>"}
{"signature": "val defaultTrace =", "body": "Trace()<EOL>"}
{"signature": "fun testFakeOverrideTwoDeclarationsThroughFakeOverrides() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>val d = v(<STR_LIT>)<EOL><INDENT><INDENT>val e = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a, d to c, e to b, e to d)<EOL><INDENT><INDENT>doTest(e, setOf(bridge(c, a)))<EOL><INDENT>}"}
{"signature": "if (wrapPrimitives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>value.mv.aconst(boxType(value.type))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (symbol is KtFe<NUM_LIT>DynamicFunctionDescValueParameterSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>return getContainingModule(symbol.owner)<EOL><INDENT><INDENT>}"}
{"signature": "if (!fieldIsStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>receiver = qualifiedAccess.findIrDispatchReceiver(explicitReceiverExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val jvmJsSourceSets =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val sealedParents =", "body": "HashSet<FqName>()<EOL>"}
{"signature": "val bridgeArgument =", "body": "<STR_LIT><EOL>"}
{"signature": "val compilationApiConfiguration =", "body": "getByName(mainCompilation.apiConfigurationName)<EOL>"}
{"signature": "val saveClassLoader =", "body": "Thread.currentThread().contextClassLoader<EOL>"}
{"signature": "val knownCachesDirectories =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (element is IrDeclarationWithName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stack.add(element.name)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>element.acceptChildrenVoid(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stack.removeLast()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (a != null || throw Exception()) {", "body": "<EOL><INDENT><INDENT>a.foo()<EOL><INDENT>}"}
{"signature": "val receiverParameterName =", "body": "JsScope.declareTemporaryName(Namer.getReceiverParameterName())<EOL>"}
{"signature": "val classGetClassFunction =", "body": "context.mapping.wasmGetJsClass[klass]!!<EOL>"}
{"signature": "if (rootDir == file.parentFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>extractedName<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isSet(access, Opcodes.ACC_FINAL)) {", "body": "<EOL><INDENT><INDENT>flags = flags or ModifierFlags.FINAL_MASK<EOL><INDENT>}"}
{"signature": "val isIntegerConstant =", "body": "nodeElementType == KtNodeTypes.INTEGER_CONSTANT<EOL>"}
{"signature": "if (descriptor is ConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return Type.VOID_TYPE<EOL><INDENT><INDENT>}"}
{"signature": "val TEST_PACKAGE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!dataFlowOnly && otherLambda != info) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>prohibitSmartCasts.merge(otherLambda.assignedInside)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun A(x: Any) {", "body": "}<EOL><INDENT><INDENT><STR_LIT>\",<EOL><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>@Composable<EOL><INDENT><INDENT><INDENT>fun Example() {<EOL><INDENT><INDENT><INDENT><INDENT>A(listOf(<STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nInsns =", "body": "instructions.size()<EOL>"}
{"signature": "if (mapping.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>mode.newLine(this)<EOL><INDENT><INDENT><INDENT><INDENT>renderIncompatibilityInformation(mapping, indent + INDENTATION_UNIT, context, mode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testConvertAll(value: UShort) {", "body": "<EOL><INDENT>assertEquals(value.toByte(), value.convert<Byte>())<EOL><INDENT>assertEquals(value.toUByte(), value.convert<UByte>())<EOL><INDENT>assertEquals(value.toShort(), value.convert<Short>())<EOL><INDENT>assertEquals(value.toUShort(), value.convert<UShort>())<EOL><INDENT>assertEquals(value.toInt(), value.convert<Int>())<EOL><INDENT>assertEquals(value.toUInt(), value.convert<UInt>())<EOL><INDENT>assertEquals(value.toLong(), value.convert<Long>())<EOL><INDENT>assertEquals(value.toULong(), value.convert<ULong>())<EOL>}"}
{"signature": "for (i in <NUM_LIT>u.toUByte() until MinUB step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val kSuspendFunctionImplConstructorSymbol =", "body": "kSuspendFunctionImplSymbol.constructors.single()<EOL>"}
{"signature": "val propertyReferenceLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "fun transformSecondaryConstructorFlat(constructor: IrConstructor, replacement: IrSimpleFunction): List<IrDeclaration><EOL><EOL><INDENT>open fun visitParameter(parameter: IrValueParameter) {", "body": "<EOL><INDENT><INDENT>parameter.transformChildrenVoid()<EOL><INDENT>}"}
{"signature": "if (value !is T) {", "body": "<EOL><INDENT><INDENT>throw IllegalArgumentException()<EOL><INDENT>}"}
{"signature": "val compileJava =", "body": "configuration.getBoolean(JVMConfigurationKeys.COMPILE_JAVA)<EOL>"}
{"signature": "for ((target, files) in generatedFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val kotlinModuleBuilderTarget = kotlinContext.targetsBinding[target]!!<EOL><INDENT><INDENT><INDENT><INDENT>kotlinModuleBuilderTarget.updateCaches(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinDirtyFilesHolder,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>incrementalCaches[kotlinModuleBuilderTarget]!!,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>files,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>changesCollector,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>environment<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun registerApplicationServices(application: MockApplication) {", "body": "}<EOL><EOL><INDENT>override fun registerProjectExtensionPoints(project: MockProject) {<EOL><INDENT><INDENT>PluginStructureProvider.registerProjectExtensionPoints(project, PLUGIN_RELATIVE_PATH)<EOL><INDENT>}"}
{"signature": "when (val origin = it.klibModuleOrigin) {", "body": "<EOL><INDENT><INDENT><INDENT>CurrentKlibModuleOrigin, SyntheticModulesOrigin -> false<EOL><INDENT><INDENT><INDENT>is DeserializedKlibModuleOrigin -> origin.library in libraries<EOL><INDENT><INDENT>}"}
{"signature": "fun test(content: @Composable () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><call>content()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val createContravariantKTypeProjection =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "while (a < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "if (containingDeclaration is ClassifierDescriptor) {", "body": "<EOL><INDENT><INDENT>containingDeclaration<EOL><INDENT>}"}
{"signature": "val manifestAddendProperties =", "body": "properties.duplicate()<EOL>"}
{"signature": "if (tokenType == BLOCK) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "fun bb() {", "body": "}<EOL><INDENT>val b = <NUM_LIT><EOL><INDENT>val a = <NUM_LIT><EOL><INDENT>fun aa() {}"}
{"signature": "val KOTLIN_<NUM_LIT>_<NUM_LIT>_M<NUM_LIT>_METADATA_VERSION =", "body": "JvmMetadataVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT><NUM_LIT>)<EOL>"}
{"signature": "val logFactor =", "body": "<NUM_LIT> // log of number of code points that are sampled per each bit length of code point"}
{"signature": "val nativeCompileTime =", "body": "getCompileBenchmarkTime(<EOL>"}
{"signature": "var insideLambda =", "body": "false<EOL>"}
{"signature": "if (file.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (value > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>digit = digit or VLQ_CONTINUATION_BIT<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package third<EOL>.", "body": ""}
{"signature": "var hasDeadInsn =", "body": "false<EOL>"}
{"signature": "val BASE_JVM_PACKAGE =", "body": "BASE_KOTLIN_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val SAM_LOOKUP_NAME =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "if (testFile.renderDiagnosticsFullText) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>shouldCheckDiagnosticsFullText = true<EOL><INDENT><INDENT><INDENT><INDENT>AnalyzerWithCompilerReport.reportDiagnostics(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>moduleBindingContext.diagnostics,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>diagnosticsFullTextCollector,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderInternalDiagnosticName = false<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testCompatibleScriptJvmTargetJavaVersionDetect() {", "body": "<EOL><INDENT><INDENT>val configuration = makeConfiguration()<EOL><INDENT><INDENT>val result = runTest(configuration)<EOL><INDENT><INDENT>Assert.assertTrue(result is ReplCompileResult.CompiledClasses)<EOL><INDENT>}"}
{"signature": "fun createMutableMap() {", "body": "<EOL><INDENT><INDENT>val map = mutableMapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>map.put(<STR_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>), map.toList())<EOL><INDENT>}"}
{"signature": "var hit =", "body": "false<EOL>"}
{"signature": "fun test(pair: Pair<String, Int>) {", "body": "<INDENT>val id = <STR_LIT> // variable is marked as unused<INDENT>println(<STR_LIT> + query(<NUM_LIT>, mapOf(id to <NUM_LIT>)))<INDENT>println(<STR_LIT> + query(<NUM_LIT>, mapOf(pair)))}"}
{"signature": "val stackTraceDelimiterIndex =", "body": "line.indexOf(STACK_TRACE_DELIMITER)<EOL>"}
{"signature": "fun visitPackageFragment(declaration: IrPackageFragment) {", "body": "<EOL><INDENT><INDENT>visitElement(declaration)<EOL><INDENT>}"}
{"signature": "if (compilation.target is KotlinMetadataTarget) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// Shared native compilation, for example, 'appleMain'<INDENT><INDENT><INDENT><INDENT><INDENT>compilation.configureCommonCompilerOptions(compilationCompilerOptions)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isTypeNotNull) {", "body": "<EOL><INDENT><INDENT><INDENT>putNullabilityAndTypeInfo(nullabilityInfo, value, NOT_NULL, languageVersionSettings)<EOL><INDENT><INDENT>}"}
{"signature": "fun recordLookup(name: Name) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (valueToBox.type.isNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>+irIfThen(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>condition = irIsNull(irGet(valueToBox)),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>thenPart = irReturn(irNull())<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package plugins<EOL>.", "body": ""}
{"signature": "if (JvmEnvironmentConfigurationDirectives.USE_PSI_CLASS_FILES_READING in module.directives) {", "body": "<EOL><INDENT><INDENT><INDENT>configuration.put(JVMConfigurationKeys.USE_PSI_CLASS_FILES_READING, true)<EOL><INDENT><INDENT>}"}
{"signature": "when (Provider.getCondition()) {", "body": "<EOL><INDENT>true -> <NUM_LIT><EOL><INDENT>false -> <NUM_LIT><EOL><INDENT>null -> <NUM_LIT><EOL>}"}
{"signature": "val familyPrimitives =", "body": "mutableMapOf<Family, Set<Pair<PrimitiveType, PrimitiveType>>>()<EOL>"}
{"signature": "val orphanTestSourceSet =", "body": "kotlin.sourceSets.create(<STR_LIT>) as DefaultKotlinSourceSet<EOL>"}
{"signature": "for (index in tail - <NUM_LIT> downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (element == elementData[index]) return index + elementData.size - head<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (input.produceHeaderKlib) {", "body": "<EOL><INDENT><INDENT>manifestProperties.setProperty(KLIB_PROPERTY_HEADER, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val platformSpecificModule =", "body": "plainModules.getValue(platformSpecificModuleId)<EOL>"}
{"signature": "val options =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, frameworkParentDirPath, <STR_LIT>, frameworkParentDirPath)<EOL>"}
{"signature": "if (candidateType is ConeRawType) {", "body": "<EOL><INDENT><INDENT><INDENT>return candidateType.computeJvmDescriptorRepresentation() == baseType.computeJvmDescriptorRepresentation()<EOL><INDENT><INDENT>}"}
{"signature": "fun Callback(block: () -> Unit) {", "body": "block() }"}
{"signature": "if (parent is IrClass && parent !is Fir<NUM_LIT>IrDeclarationStorage.NonCachedSourceFileFacadeClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val taskConfigAction =", "body": "KaptWithoutKotlincConfig(<EOL>"}
{"signature": "if (coneAttributes === constructor.attributes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>constructor<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val tosses<NUM_LIT> =", "body": "List(<NUM_LIT>) { charSeq.randomOrNull(random<NUM_LIT>) }<EOL>"}
{"signature": "val argumentsExpressions =", "body": "mapArguments(<EOL>"}
{"signature": "for (codePoint in lastChecked + <NUM_LIT>.<NUM_LIT>x1<NUM_LIT>FFFF) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFalse(codePoint.isCaseIgnorable())<EOL><INDENT><INDENT>}"}
{"signature": "if (!dynamicTypesSettings.dynamicTypesAllowed) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c.trace.report(UNSUPPORTED.on(type, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val elementToComment =", "body": "mutableMapOf<PsiElement, String>()<EOL>"}
{"signature": "val updateHeapRefFunction =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "if (moduleName == MAIN_MODULE_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>File(moduleSourceDir, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>.writeText(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (superInterfaces != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (end >= Char.MIN_SUPPLEMENTARY_CODE_POINT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>mayContainSupplCodepoints = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!rightType.isAny()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>c.trace.report(INCORRECT_RIGHT_COMPONENT_OF_INTERSECTION.on(intersectionType.getRightTypeRef()!!))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val abstractInvisibleSuper =", "body": "linkedSetOf<CallableMemberDescriptor>()<EOL>"}
{"signature": "for (i in <NUM_LIT> .. < n) {", "body": "}"}
{"signature": "val oldVar =", "body": "statements[<NUM_LIT>] as IrVariable<EOL>"}
{"signature": "val _containingDeclarations =", "body": "mutableListOf<FirDeclaration>()<EOL>"}
{"signature": "if (expectSingleCandidate != null) {", "body": "<EOL><INDENT><INDENT><INDENT>checkIfExpectHasDefaultArgumentsAndActualizedWithTypealias(expectSingleCandidate, reportOn, context)<EOL><INDENT><INDENT><INDENT>checkAnnotationsMatch(expectSingleCandidate, descriptor, reportOn, context)<EOL><INDENT><INDENT>}"}
{"signature": "import static a.", "body": "x.I;<EOL>"}
{"signature": "val CONFIGURATION_BUILD_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val matcher =", "body": "CheckerTestUtil.individualDiagnosticPattern.matcher(text)<EOL>"}
{"signature": "val currentFun =", "body": "(container as? IrSimpleFunction)<EOL>"}
{"signature": "fun set(i: Int, newValue: Double) {", "body": "<EOL><INDENT><INDENT>value = newValue<EOL><INDENT>}"}
{"signature": "val REPL_SNIPPET_FIRST_GEN =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (iter in <NUM_LIT> until <NUM_LIT><NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val destination = ByteArray(<NUM_LIT>)<EOL><INDENT><INDENT>if (destination[<NUM_LIT>] != <NUM_LIT>.toByte()) return <STR_LIT><EOL><INDENT><INDENT>destination[<NUM_LIT>] = <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (cacheCleared) {", "body": "<EOL><INDENT><INDENT><INDENT>cacheRoot.deleteRecursively()<EOL><INDENT><INDENT>}"}
{"signature": "val primitives =", "body": "setOf(<EOL>"}
{"signature": "val isSubstitutionOverride =", "body": "(symbol.fir as? FirCallableDeclaration)?.isSubstitutionOverride == true<EOL>"}
{"signature": "val failuresNumber =", "body": "elementToInt(data.getRequiredField(<STR_LIT>), <STR_LIT>)<EOL>"}
{"signature": "val PurpleGrey<NUM_LIT> =", "body": "Color(<NUM_LIT>xFF<NUM_LIT>b<NUM_LIT>)<EOL>"}
{"signature": "val DELEGATED_PROPERTIES_ARRAY_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val correspondingJsPath =", "body": "entryName.removeSuffix(KotlinJavascriptMetadataUtils.JS_MAP_EXT) +<EOL>"}
{"signature": "val contextFile =", "body": "session.modulesWithFiles.getValue(contextModule).single() as KtFile<EOL>"}
{"signature": "when (val psi = psi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtProperty -> psi.initializer<EOL><INDENT><INDENT><INDENT><INDENT>is KtParameter -> psi<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val structAnnotations =", "body": "listOfNotNull(structAnnotation, cPlusPlusClassAnnotation)<EOL>"}
{"signature": "val inlined =", "body": "test(<STR_LIT>)<EOL>"}
{"signature": "val baz =", "body": "baz(<EOL>"}
{"signature": "val expectedEnclosingMethod =", "body": "if (isIR()) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (classLikeDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>yield(builder.classifierBuilder.buildClassLikeSymbol(classLikeDeclaration.symbol))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nextInvocation =", "body": "JsInvocation(pureFqn(nextName, iteratorVar.makeRef())).source(expression)<EOL>"}
{"signature": "val kotlinCompileTask =", "body": "kotlinTasksBySourceSet[sourceSet.name]<EOL>"}
{"signature": "val jvmEcosystemPluginId =", "body": "<STR_LIT><EOL>"}
{"signature": "val sizeInBits =", "body": "expression.type.size<EOL>"}
{"signature": "if (hasSetterValueParameter()) {", "body": "<EOL><INDENT><INDENT>v.setterParameter = setterValueParameter.toKmValueParameter(c)<EOL><INDENT>}"}
{"signature": "val frontendContext =", "body": "FirKotlinToJvmBytecodeCompiler.FrontendContextForMultiChunkMode(<EOL>"}
{"signature": "fun configureCompilerConfiguration(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>configuration: CompilerConfiguration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>module: TestModule<EOL><INDENT><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>configuration.addJvmClasspathRoots(librariesPaths)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun check(declaration: FirProperty, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>checkGetter(declaration, context, reporter)<EOL><INDENT><INDENT>checkSetter(declaration, context, reporter)<EOL><INDENT>}"}
{"signature": "val argumentContexts =", "body": "resolvedCall.call.valueArguments.associate { it to context.innerBlock() }<EOL>"}
{"signature": "if (hasIntValue()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + intValue.hashCode()<EOL><INDENT>}"}
{"signature": "val collectingVisitor =", "body": "IrDeclarationMappingCollectingVisitor()<EOL>"}
{"signature": "val stdLibTypes =", "body": "setOf(<EOL>"}
{"signature": "if (valueArgument is VarargValueArgument) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (values.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>printer.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedNicknames =", "body": "ConcurrentHashMap<Any, TAnnotation>()<EOL>"}
{"signature": "val trivialPredecessor =", "body": "label.previous<EOL>"}
{"signature": "if (!(a == <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "if (tp.isStarProjection) {", "body": "<EOL><INDENT><INDENT><INDENT>return callHelperFunction(Namer.GET_START_KTYPE_PROJECTION)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitTryMainBlockExitNode(node: TryMainBlockExitNode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tryScopeCount--<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val sscanfResult =", "body": "sscanf(<STR_LIT>, <STR_LIT>, aVar.ptr, bVar.ptr)<EOL>"}
{"signature": "val LEFT_INDENT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val intValue =", "body": "summary.useContents { integer }<EOL>"}
{"signature": "for (index in (initialVarsCountByType[type]?.plus(<NUM_LIT>) ?: <NUM_LIT>)..maxIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>classBuilderForCoroutineState.newField(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JvmDeclarationOrigin.NO_ORIGIN, AsmUtil.NO_FLAG_PACKAGE_PRIVATE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type.fieldNameForVar(index), type.descriptor, null, null<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (child is KtImportDirective && child.alias != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (args.irProduceJs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>metricsConsumer.report(BooleanMetrics.JS_SOURCE_MAP, args.sourceMap)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>metricsConsumer.report(StringMetrics.JS_PROPERTY_LAZY_INITIALIZATION, args.irPropertyLazyInitialization.toString())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val generatorInstance =", "body": "TestGeneratorImplInstance(<EOL>"}
{"signature": "val startCaretPosition =", "body": "match.range.first<EOL>"}
{"signature": "val objCObjectSuperInitCheckFunName =", "body": "<STR_LIT><EOL>"}
{"signature": "val inlineScopesGenerator =", "body": "inliningContext.inlineScopesGenerator<EOL>"}
{"signature": "val FIB_SCRIPT_DEFINITION =", "body": "<EOL><INDENT><INDENT><INDENT>ScriptDefinition.FromLegacy(<EOL>"}
{"signature": "var hasNonTrivialMapping =", "body": "false<EOL>"}
{"signature": "if (argumentExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(INVISIBLE_MEMBER.on(argumentExpression, invisibleMember, invisibleMember.visibility, invisibleMember))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!function.propertySymbol.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>function.propertySymbol.source,<EOL><INDENT><INDENT><INDENT><INDENT>ComposeErrors.COMPOSABLE_EXPECTED,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (isFloat<NUM_LIT>RangeEnforced) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, Float.fromBits(value.toBits()))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, Float.fromBits(value.toRawBits()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var isSplitModifierList =", "body": "false<EOL>"}
{"signature": "val allPresetEntries =", "body": "listOf(<EOL>"}
{"signature": "val lhsResult =", "body": "<EOL><INDENT><INDENT><INDENT>if (expression.isEmptyLHS) null<EOL>"}
{"signature": "if (errors > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>System.exit(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val DEC<INDENT><INDENT><INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "val alreadyCached =", "body": "alreadyProcessed.isCached(platformLibsDirectory, konanCacheKind)<EOL>"}
{"signature": "val superContinuation =", "body": "superConstructor.valueParameters.single()<EOL>"}
{"signature": "val definitionsLock =", "body": "ReentrantLock()<EOL>"}
{"signature": "fun set(index: Int, value: UShort) {", "body": "<EOL><INDENT><INDENT>storage[index] = value.toShort()<EOL><INDENT>}"}
{"signature": "val NAMES =", "body": "listOf(<EOL>"}
{"signature": "fun test(s: Int?) {", "body": "<EOL><INDENT>apx = s!!<EOL>}"}
{"signature": "val defaultImplsClassName =", "body": "classId.relativeClassName.shortName().asString() + nestedClass<EOL>"}
{"signature": "val INVALID_VERSION =", "body": "JsMetadataVersion()<EOL>"}
{"signature": "fun beforeRun() {", "body": "<EOL><INDENT><INDENT>engine.eval(SETUP_KOTLIN_OUTPUT)<EOL><INDENT>}"}
{"signature": "fun testReference() {", "body": "<EOL><INDENT><INDENT>_x.value = <STR_LIT><EOL><INDENT><INDENT>assertEquals(<STR_LIT>, _x.value)<EOL><INDENT><INDENT>_x.lazySet(<STR_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, _x.value)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, _x.getAndSet(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, _x.value)<EOL><INDENT>}"}
{"signature": "val processorName =", "body": "delegate.processorName<EOL>"}
{"signature": "fun inlineFunWrongUsage(s: (p: Int) -> Unit) {", "body": "<EOL><INDENT><!USAGE_IS_NOT_INLINABLE!>s<!><EOL><EOL><INDENT>if (true) <!USAGE_IS_NOT_INLINABLE!>s<!> else <NUM_LIT><EOL><EOL><INDENT><!USAGE_IS_NOT_INLINABLE!>s<!> ?: <!USAGE_IS_NOT_INLINABLE!>s<!><EOL>}"}
{"signature": "val isStrict =", "body": "hasAnnotation(STRICTFP_ANNOTATION_FQ_NAME) && origin != JvmLoweredDeclarationOrigin.JVM_OVERLOADS_WRAPPER<EOL>"}
{"signature": "when(!isString(x)) {", "body": "<EOL><INDENT><INDENT>true -> x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>false -> x.length<EOL><INDENT>}"}
{"signature": "val FRAMEWORK_SEARCH_PATHS =", "body": "<STR_LIT><EOL>"}
{"signature": "val I<NUM_LIT>_NE =", "body": "<STR_LIT><EOL>"}
{"signature": "val argsSize =", "body": "serializableIrClass.typeParameters.size<EOL>"}
{"signature": "fun testFrom<NUM_LIT>() {", "body": "<EOL><INDENT>takeNotNull(reifiedNull() ?: <STR_LIT>)<EOL>}"}
{"signature": "for (gap in it.gaps) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>mv.visitLocalVariable(it.declaration.name.asString(), it.type.descriptor, null, start, gap.start, it.index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>start = gap.end<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val recompiledSourceMapParse =", "body": "SourceMapParser.parse(recompiledSourceMap)<EOL>"}
{"signature": "val jsonString =", "body": "StringBuilder()<EOL>"}
{"signature": "val functionTypeInterfacePackages =", "body": "FunctionTypeInterfacePackages()<EOL>"}
{"signature": "if (builder.tokenType == KtTokens.RBRACKET) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.advanceLexer()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newBlock =", "body": "ensureBlock(label!!)<EOL>"}
{"signature": "fun testNullable<NUM_LIT>(x: NX<NUM_LIT><String>?, y: NY<NUM_LIT><Number>?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] == ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] === ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "when (val r = this.receiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is IrComposite -> r.statements.lastOrNull() ?: return false<EOL><INDENT><INDENT><INDENT><INDENT>else -> r<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (result.exitCode != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportCompilationErrors(cSourcePath, stubs, result, messageCollector, verbose)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualizedActualType =", "body": "actualType.actualize()<EOL>"}
{"signature": "val parametersValue =", "body": "classStabilityInferredCollection?.getParametersValue(descriptor)<EOL>"}
{"signature": "fun add(errorCandidate: ErrorCandidate<*>) {", "body": "<EOL><INDENT><INDENT>result.add(errorCandidate)<EOL><INDENT>}"}
{"signature": "fun emptyMapGet() {", "body": "<EOL><INDENT><INDENT>val map = emptyMap()<EOL><INDENT><INDENT>assertEquals(null, map.get(<STR_LIT>), <STR_LIT>\"failed on map.get(<STR_LIT>)<STR_LIT>\")<EOL><INDENT><INDENT>assertEquals(null, map[<STR_LIT>], <STR_LIT>\"failed on map[<STR_LIT>]<STR_LIT>\")<EOL><INDENT>}"}
{"signature": "when (element) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>is ClassStub.Companion -> return // Nested, see below.<INDENT><INDENT><INDENT><INDENT><INDENT>is ClassStub.Enum -> element.annotations<INDENT><INDENT><INDENT><INDENT><INDENT>is ClassStub.Simple -> element.annotations<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var isPhysical =", "body": "true<EOL>"}
{"signature": "val providedModules =", "body": "mutableListOf<ResolvedDependency>()<EOL>"}
{"signature": "package ok.", "body": "c<EOL>"}
{"signature": "val test_dnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>d === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === d<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>d !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== d<!><EOL>"}
{"signature": "val constrainedAlignmentVersion =", "body": "<STR_LIT><EOL>"}
{"signature": "when (param) {", "body": "<EOL><INDENT><INDENT>is SealedClass.A -> <STR_LIT><EOL><INDENT><INDENT>is SealedClass.B -> <STR_LIT><EOL><INDENT><INDENT>SealedClass.C -> <STR_LIT><EOL><INDENT>}"}
{"signature": "val sigData =", "body": "loadSignatureProto(index)<EOL>"}
{"signature": "val companionObjectId =", "body": "classId.createNestedClassId(companionObjectName)<EOL>"}
{"signature": "fun topLevelFunInParameter(s: Some) {", "body": "}<EOL>fun Some.topLevelFunInExtension() {}"}
{"signature": "val boundInstanceMethodRef =", "body": "testCallableReferences::instanceMethod<EOL>"}
{"signature": "val Fir<NUM_LIT>IrSerializerPhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, FirSerializerInput, SerializerOutput>(<EOL>"}
{"signature": "if (old.hasTypeParameter()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.typeParameter != new.typeParameter) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun validateAndDeleteReportFile(vararg expectedText: String) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(reportDir.exists())<EOL><INDENT><INDENT><INDENT>val reportFile = getReportFile()<EOL><INDENT><INDENT><INDENT>assertFileContains(reportFile, *expectedText)<EOL><INDENT><INDENT><INDENT>reportFile.delete()<EOL><INDENT><INDENT>}"}
{"signature": "val stateVar =", "body": "JsIrBuilder.buildVar(context.irBuiltIns.intType, stateMachineFunction)<EOL>"}
{"signature": "val MINUS<NUM_LIT>F =", "body": "-<NUM_LIT>.<NUM_LIT>F<EOL>"}
{"signature": "val multifileFacadeClassForPart =", "body": "mutableMapOf<IrClass, IrClass>()<EOL>"}
{"signature": "val irReturnedExpression =", "body": "expression.returnedExpression?.let { generateExpression(it) }<EOL>"}
{"signature": "val doesOverrideBuiltinDeclaration =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TypeCheckingProcedure.findCorrespondingSupertype(superClassDescriptor.defaultType, builtinContainerDefaultType) != null<EOL>"}
{"signature": "when(s) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> s<EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "var containingTypeRef =", "body": "context.annotationContainers.lastOrNull() as? FirResolvedTypeRef<EOL>"}
{"signature": "fun cleanCompileTimeInitializerCache() {", "body": "}<EOL><EOL><INDENT>override fun copy(newOwner: CallableDescriptor, newName: Name, newIndex: Int): ValueParameterDescriptor {<EOL><INDENT><INDENT>return ValueParameterDescriptorImpl(<EOL><INDENT><INDENT><INDENT><INDENT>newOwner, null, newIndex, annotations, newName, type, declaresDefaultValue(),<EOL><INDENT><INDENT><INDENT><INDENT>isCrossinline, isNoinline, varargElementType, SourceElement.NO_SOURCE<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val icUnit =", "body": "U(Unit)<EOL>"}
{"signature": "package first;<EOL>.", "body": ""}
{"signature": "if (containingExpectClass == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val abstractModifier =", "body": "declaration.modifierList?.let { it.getModifier(KtTokens.ABSTRACT_KEYWORD) }<EOL>"}
{"signature": "val packageProp =", "body": "<STR_LIT><EOL>"}
{"signature": "for (clazz in testClassModels.flatMapTo(mutableSetOf()) {", "body": "classModel -> classModel.imports }"}
{"signature": "val ELEM_DROP =", "body": "<STR_LIT><EOL>"}
{"signature": "var errors =", "body": "<NUM_LIT> <EOL>"}
{"signature": "val FOR_CLASS =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (irFunction.startOffset >= <NUM_LIT>) {", "body": "<INDENT><INDENT>// if it suspend function like `suspend fun foo(...)`<INDENT><INDENT>irFunction.file.fileEntry.getLineNumber(irFunction.startOffset) + <NUM_LIT><INDENT>}"}
{"signature": "val jsFiles =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "val metrics =", "body": "delegate.getMetrics()<EOL>"}
{"signature": "val lowerIntersectedType =", "body": "intersectTypes(replaceArgumentsWithCapturedArgumentsByIntersectionComponents(type.lowerBound))<EOL>"}
{"signature": "else if (allowAnyScriptsInSourceRoots) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(LanguageFeature.SkipStandaloneScriptsInSourceRoots, LanguageFeature.State.DISABLED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isFeatureTurnedOn =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.AllowContractsForCustomFunctions)<EOL>"}
{"signature": "val digitsEndIndex =", "body": "endIndex - suffix.length<EOL>"}
{"signature": "val PATTERN_SINGLE_WILD =", "body": "<STR_LIT><EOL>"}
{"signature": "val capturedTypesImpl =", "body": "mutableMapOf<TypeParameterDescriptor, JsName>()<EOL>"}
{"signature": "if (!a.process()) {", "body": "<EOL><INDENT><INDENT><INDENT>break@loop<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration !is IrClass || !declaration.isFacadeClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>classFqnSegments.add(declaration.name.asString())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun expectMinMaxWith(min: ULong, max: ULong, elements: ULongArray, comparator: Comparator<ULong>) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(min, elements.minWith(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWith(comparator))<EOL><INDENT>}"}
{"signature": "val constLimitAsLong =", "body": "progressionType.maxValueAsLong<EOL>"}
{"signature": "fun call(a: @ParameterName(<STR_LIT>) Int, b: @ParameterName(<STR_LIT>) String) {", "body": "<EOL><INDENT><expr>call(<NUM_LIT>, <STR_LIT>)</expr><EOL>}"}
{"signature": "val typeRefSource =", "body": "type.toFirSourceElement()<EOL>"}
{"signature": "val actualSourceSets =", "body": "project<EOL>"}
{"signature": "if (excludedImportNames.isEmpty()) {", "body": "// optimization<INDENT><INDENT>emptySet<Name>()<INDENT>}"}
{"signature": "if (callableSymbol is KtValueParameterSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>return callableSymbol.getDirectlyOverriddenSymbols()<EOL><INDENT><INDENT>}"}
{"signature": "val valueElement =", "body": "gson.toJsonTree(value)<EOL>"}
{"signature": "if (originalInstruction === originalPseudocode.internalErrorInstruction && copy is SubroutineExitInstruction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>internalErrorInstruction = copy<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (javaClass.x == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>javaClass.x = <STR_LIT><EOL><INDENT>}"}
{"signature": "val unresolvedQualifierCount =", "body": "totalQualifierCount - resolvedQualifierCount<EOL>"}
{"signature": "fun test<NUM_LIT>(x: List<String>?) {", "body": "<INDENT>// x should be non-null in arguments list, despite of a chain<INDENT>x?.subList(<NUM_LIT>, x.size)?.<INDENT>   subList(<NUM_LIT>, x.size)?.<INDENT>   get(x.size)}"}
{"signature": "else if (jarPath.startsWith(':')) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>jarPath = jarPath.substring(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val constructorMethod =", "body": "Method(<STR_LIT>, Type.VOID_TYPE, info.capturedArgs)<EOL>"}
{"signature": "if (verbose && classifier.isInner && typeConstructorParameters.size > typeParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (containingClass != null && ktProperty != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkParcelableClassProperty(descriptor, containingClass, ktProperty, trace, trace.bindingContext)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(y: MyAnnotation) {", "body": "<EOL><INDENT>y.hashCode()<EOL>}"}
{"signature": "val grandDerived =", "body": "GrandDerivedWithPropertyOverride()<EOL>"}
{"signature": "val overriddenDeclarations =", "body": "OverridingUtil.getOverriddenDeclarations(descriptor)<EOL>"}
{"signature": "if(a?.b.valueIsNotNull()){", "body": "<EOL><INDENT><INDENT>a<!UNSAFE_CALL!>.<!>b<!UNSAFE_CALL!>.<!>length<EOL><INDENT>}"}
{"signature": "else if (multipleImplementations.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(MANY_IMPL_MEMBER_NOT_IMPLEMENTED.on(klass, klass, multipleImplementations.first()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun f(g: () -> Int) {", "body": "}<EOL>inline fun h(g: () -> Int) = run { f(g) }"}
{"signature": "package y<EOL>.", "body": ""}
{"signature": "if (completionMode == ConstraintSystemCompletionMode.FULL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (analyzeRemainingNotAnalyzedPostponedArgument(postponedArguments, analyze))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (event.isTriggered()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val JFBiFunction =", "body": "javaFunction(<STR_LIT>)<EOL>"}
{"signature": "if (properties.isForGeneratedSources) {", "body": "<EOL><INDENT><INDENT><INDENT>sourceRootTag.setAttribute(IS_GENERATED_ATTRIBUTE, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (element === target) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = path<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val initializer =", "body": "declaration.initializer<EOL>"}
{"signature": "val exceptionExpected =", "body": "<NUM_LIT> / <NUM_LIT><EOL>"}
{"signature": "when (val signatures = directDependencies[lib, src]) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> directDependencies[lib, src] = hashMapOf(signature to hash)<EOL><INDENT><INDENT><INDENT>else -> signatures[signature] = hash<EOL><INDENT><INDENT>}"}
{"signature": "for (ptr in addr..<addr + sizeU) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Pointer(ptr).storeByte(value)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (matchingReceiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>matchingReceiver.source ?: qualifiedAccess.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.UNINITIALIZED_ENUM_COMPANION,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>companionSymbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val JVM_RECORD_ANNOTATION_CLASS_ID =", "body": "ClassId.topLevel(JVM_RECORD_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "fun main(j : C, s : Array<String?>) {", "body": "<INDENT>j.from()<INDENT>j.from(<STR_LIT>)<INDENT>j.from(<STR_LIT>, <STR_LIT>)<INDENT>j.<!OVERLOAD_RESOLUTION_AMBIGUITY!>from<!>(<STR_LIT>, <STR_LIT>, <STR_LIT>)<INDENT>j.<!OVERLOAD_RESOLUTION_AMBIGUITY!>from<!>(<STR_LIT>, *s) // This should not be an ambiguity, see KT<NUM_LIT><INDENT>j.from(*s)}"}
{"signature": "for ((pkg, testCalls) in tests) {", "body": "<EOL><INDENT><INDENT><INDENT>val pkgTestFun = JsFunction(emptyScope, JsBlock(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>pkgTestFun.body.statements += testCalls<EOL><INDENT><INDENT><INDENT>testFun.body.statements += JsInvocation(suiteFunRef, JsStringLiteral(pkg), JsBooleanLiteral(false), pkgTestFun).makeStmt()<EOL><INDENT><INDENT>}"}
{"signature": "if (sourceName != targetName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val statement = generateDelegateCall(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor, key, value, JsThisRef(), context, false,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor.source.getPsi()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>model.postDeclarationBlock.statements += statement<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val serializerClass =", "body": "serializableDescriptor.getClassFromSerializationPackage(SerialEntityNames.KSERIALIZER_CLASS)<EOL>"}
{"signature": "if (function.isHiddenForResolutionEverywhereBesideSupercalls) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun topFoo(@ANNOTATION param: Int) {", "body": "<EOL>}"}
{"signature": "when(<STR_LIT>) {", "body": "<EOL><INDENT>  !in set -> true<EOL><INDENT>  else -> false<EOL><INDENT>}"}
{"signature": "fun testIrStdlib() {", "body": "<EOL><INDENT><INDENT>irStdlibModuleApi.checkRecursively(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "package javax.", "body": "validation.constraints;<EOL>"}
{"signature": "if (!arePartiallySpecifiedTypeArgumentsEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.UNSUPPORTED.on(typeReference, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((expectArg, actualArg) in expectTypeRef.arguments.zip(actualTypeRef.arguments)) {", "body": "<EOL><INDENT><INDENT><INDENT>val expectArgType = expectArg.typeOrNull ?: continue<EOL><INDENT><INDENT><INDENT>val actualArgType = actualArg.typeOrNull ?: continue<EOL><INDENT><INDENT><INDENT>checkAnnotationsOnTypeRefAndArguments(expectContainingSymbol, actualContainingSymbol, expectArgType, actualArgType, checker)<EOL><INDENT><INDENT>}"}
{"signature": "val STDLIB_CLASS_FINDER_CAPABILITY =", "body": "ModuleCapability<StdlibClassFinder>(<STR_LIT>)<EOL>"}
{"signature": "val generateOptimizedCallableReferenceSuperClasses =", "body": "context.config.generateOptimizedCallableReferenceSuperClasses<EOL>"}
{"signature": "val libraryJar =", "body": "MockLibraryUtilExt.compileJvmLibraryToJar(workDir.resolve(<STR_LIT>).absolutePath, libraryName)<EOL>"}
{"signature": "if (skipIfPrivate(member)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "when (overridabilityResult) {", "body": "<EOL><INDENT><INDENT><INDENT>OverridingUtil.OverrideCompatibilityInfo.Result.OVERRIDABLE -> Result.OVERRIDABLE<EOL><INDENT><INDENT><INDENT>else -> Result.UNKNOWN<EOL><INDENT><INDENT>}"}
{"signature": "if (effect !is ConditionalEffect) {", "body": "<EOL><INDENT><INDENT><INDENT>return MutableContextInfo.EMPTY.fire(effect)<EOL><INDENT><INDENT>}"}
{"signature": "var resultB =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (first.type == llvm.int<NUM_LIT>Type) {", "body": "<EOL><INDENT><INDENT><INDENT>val tmp = and(second, llvm.int<NUM_LIT>(<NUM_LIT>))<EOL><INDENT><INDENT><INDENT>zext(tmp, llvm.int<NUM_LIT>Type)<EOL><INDENT><INDENT>}"}
{"signature": "val before =", "body": "inputJsFiles<EOL>"}
{"signature": "if (delegatedConstructorCall is FirLazyDelegatedConstructorCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (file.isCustomTestData) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@compareBase true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val outputDirPrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "fun takeInt(ilt: Int) {", "body": "}<EOL>fun takeLong(ilt: Long) {}"}
{"signature": "val LONG_BINARY_OPERATION_INTEGER =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "fun addImport(tag: String, vars: JsVars) {", "body": "<EOL><INDENT><INDENT>existingImports[tag] = vars.vars[<NUM_LIT>].name<EOL><INDENT><INDENT>importList.add(vars)<EOL><INDENT>}"}
{"signature": "var receiverType =", "body": "receiverParameterDescriptor.type<EOL>"}
{"signature": "val outputKlibFile =", "body": "resolveModuleArtifact(module, buildDir)<EOL>"}
{"signature": "if (declaration.returnTypeRef !is FirImplicitTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>return declaration.symbol.resolvedReturnTypeRef<EOL><INDENT><INDENT>}"}
{"signature": "fun testAddedField() {", "body": "<EOL><INDENT><INDENT>val testAddedField<NUM_LIT> = TestAddedField<NUM_LIT>(<NUM_LIT>)<EOL><INDENT><INDENT>val serialized = serializeToPlainText(testAddedField<NUM_LIT>)<EOL><INDENT><INDENT>val deserialized = deserializeFromPlainText<TestAddedField<NUM_LIT>>(serialized)<EOL><EOL><INDENT><INDENT>assertEquals(TestAddedField<NUM_LIT>(<NUM_LIT>, null), deserialized)<EOL><INDENT>}"}
{"signature": "for (primitive in topLevelAtoms) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>primitive.process(notAnalyzedArguments)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (ktExpression !is KtStringTemplateExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>LOG.error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeAlias.isLocal && typeAlias !in context.targetedLocalClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>return typeAlias.runAllPhasesForLocalClass(components, data)<EOL><INDENT><INDENT>}"}
{"signature": "fun withScope(symbol: IrSymbol, crossinline block: () -> Unit) {", "body": "<EOL><INDENT><INDENT>enterScope(symbol)<EOL><INDENT><INDENT>block()<EOL><INDENT><INDENT>leaveScope(symbol)<EOL><INDENT>}"}
{"signature": "if (typeParameterSymbols.size != typeArgumentsWithSourceInfo.size) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>lhs.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirErrors.WRONG_NUMBER_OF_TYPE_ARGUMENTS,<EOL><INDENT><INDENT><INDENT><INDENT>correspondingDeclaration.typeParameterSymbols.size,<EOL><INDENT><INDENT><INDENT><INDENT>correspondingDeclaration,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val SHORT =", "body": "CompileTimeType<Short>()<EOL>"}
{"signature": "if (builder.implementation.isPublic) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>, implementationDetailAnnotation.render(), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val newTowerDataContext =", "body": "towerDataContext.addNonLocalScope(whenSubjectImportingScope)<EOL>"}
{"signature": "val wrapperClassInstance =", "body": "AVolatileWrapper$internal()<EOL>"}
{"signature": "val lineIndexToPasteJspecifyMark =", "body": "fileLinePositions.indexOfLast { it < metaInfo.start }<EOL>"}
{"signature": "val classesKt =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val oneArg =", "body": "create(<NUM_LIT>)<EOL>"}
{"signature": "val ktCallInfos =", "body": "getCallInfo(<EOL>"}
{"signature": "for ((_, realOverride) in realOverrides.toList()) {", "body": "<EOL><INDENT><INDENT>excludeRepeated(realOverride)<EOL><INDENT>}"}
{"signature": "val enumClassSwiftNames =", "body": "EnumNameMapping()<EOL>"}
{"signature": "fun free(mem: NativePtr) {", "body": "<EOL><INDENT><INDENT>freeRaw(mem)<EOL><INDENT>}"}
{"signature": "val toFreshSubstitutor =", "body": "CreateFreshVariablesSubstitutor.createToFreshVariableSubstitutorAndAddInitialConstraints(<EOL>"}
{"signature": "val e =", "body": "this[i]<EOL>"}
{"signature": "val lhsSymbol =", "body": "lhsReference?.toResolvedVariableSymbol()<EOL>"}
{"signature": "val accumulator =", "body": "destination[key]<EOL>"}
{"signature": "val alternativeType =", "body": "type.alternativeType ?: return null<EOL>"}
{"signature": "val checkTypeProp =", "body": "prop<EOL>"}
{"signature": "val delegated<NUM_LIT> =", "body": "ref<NUM_LIT>.delegatedTypeRef as? FirUserTypeRef ?: return false<EOL>"}
{"signature": "if (propertyEvaluator == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>transformJavaFieldAndGetResultAsString(firProperty)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (a<NUM_LIT>?.i() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT>;<EOL><INDENT>}"}
{"signature": "val i<NUM_LIT> =", "body": "takeUInt(<NUM_LIT>xFFFF_FFFFu)<EOL>"}
{"signature": "val builderInferenceSessions =", "body": "nestedInferenceSessions.filterIsInstance<BuilderInferenceSession>()<EOL>"}
{"signature": "var v<NUM_LIT> =", "body": "ArrayList<String>()<EOL>"}
{"signature": "val inherentType =", "body": "result.type<EOL>"}
{"signature": "if (this.containingDeclarations.lastOrNull() is FirProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val locals =", "body": "mutableSetOf<IrValueDeclaration>()<EOL>"}
{"signature": "if (generateRegionComments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>statements += JsSingleLineComment(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeWithParameters =", "body": "typeWithParametersProjection.type?.lowerBoundIfFlexible()?.fullyExpandedType(this)<EOL>"}
{"signature": "val golden<NUM_LIT>File =", "body": "testPathFull.resolve(<STR_LIT>)<EOL>"}
{"signature": "val functionCandidate =", "body": "candidates.firstOrNull { firElementByPsiElementChooser.isMatchingCallableDeclaration(declaration, it.fir) }<EOL>"}
{"signature": "val filerObj =", "body": "filerField.get(proEnvObj)<EOL>"}
{"signature": "if (!Files.exists(file.parent)) {", "body": "<EOL><INDENT><INDENT><INDENT>Files.createDirectories(file.parent)<EOL><INDENT><INDENT>}"}
{"signature": "if (!decoysEnabled || signatureBuilder == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>composerParamTransformer.visitSimpleFunction(it) as IrSimpleFunction<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val smallWords =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "fun println(value: Int) {", "body": "}<EOL>fun println(value: String) {}"}
{"signature": "val extensionValRef =", "body": "B::<!EXTENSION_IN_CLASS_REFERENCE_NOT_ALLOWED!>extensionVal<!><EOL>"}
{"signature": "val otherFqName =", "body": "other.fqName<EOL>"}
{"signature": "var targetInstructionIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "var isLiftedUp =", "body": "!commonIsMissing<EOL>"}
{"signature": "if (x < (if (y >= <NUM_LIT>) <NUM_LIT> else <NUM_LIT>)) {", "body": "}"}
{"signature": "val psiManager =", "body": "PsiManager.getInstance(environment.project)<EOL>"}
{"signature": "val actualMissingModuleNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val methodCall =", "body": "param.method()<EOL>"}
{"signature": "val testRunner =", "body": "createProperTestRunner(testRun, testRunSettings)<EOL>"}
{"signature": "fun test<NUM_LIT>(f: (myParamName: String) -> Unit) {", "body": "<EOL><INDENT>f(<STR_LIT>)<EOL><INDENT>f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p<NUM_LIT><!> = <STR_LIT>)<!><EOL><INDENT>f(<!NAMED_ARGUMENTS_NOT_ALLOWED!>myParamName<!> = <STR_LIT>)<EOL><INDENT>f.invoke(<STR_LIT>)<EOL><INDENT>f.invoke(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p<NUM_LIT><!> = <STR_LIT>)<!><EOL><INDENT>f.invoke(<!NAMED_ARGUMENTS_NOT_ALLOWED!>myParamName<!> = <STR_LIT>)<EOL>}"}
{"signature": "if (thisPtr.type == thisPtrArgType) {", "body": "<EOL><INDENT><INDENT><INDENT>thisPtr<EOL><INDENT><INDENT>}"}
{"signature": "if (evaluationResult.exceptionDetails != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>evaluationResult.exceptionDetails.rethrow()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (name in referenceFilenames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val file = basedir.resolve(name)<EOL><INDENT><INDENT><INDENT><INDENT>if (file.extension.isEmpty())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>file.createDirectories()<EOL><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>file.createFile()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun serializeEnumEntry(enumEntry: FirEnumEntry, proto: ProtoBuf.EnumEntry.Builder) {", "body": "<EOL><INDENT><INDENT>enumEntry.serializeAnnotations(session, additionalMetadataProvider, annotationSerializer, proto, protocol.enumEntryAnnotation)<EOL><INDENT>}"}
{"signature": "val goodFunctionsExact =", "body": "goodFunctions.filterNot { it.endsWith(<STR_LIT>) }.toSet()<EOL>"}
{"signature": "val IMPORTED_SCRIPT_PARAM_NAME_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "for (property in properties.serializableProperties) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>+getAddElementToDescriptorExpr(property, serialDescVar)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val returnTypeConstructor =", "body": "type.constructor<EOL>"}
{"signature": "var onTestFrameworkCallbacks =", "body": "project.objects.domainObjectSet<Action<KotlinJsTestFramework>>()<EOL>"}
{"signature": "val cacheRoot =", "body": "File(cacheDir)<EOL>"}
{"signature": "val pio<NUM_LIT> =", "body": "xxx[1<NUM_LIT>]<EOL>"}
{"signature": "if (!assertion) {", "body": "<EOL><INDENT><INDENT><INDENT>assertions.add(AssertionError(lazyMessage?.invoke()?.toString()))<EOL><INDENT><INDENT>}"}
{"signature": "val nameGenerator =", "body": "SymbolLightField.FieldNameGenerator()<EOL>"}
{"signature": "if (this is CharCategoryRangesBuilder) {", "body": "//<INDENT><INDENT><INDENT>println(ranges.subList(fromIndex = <NUM_LIT>, toIndex = 1<NUM_LIT>).joinToString(separator = <STR_LIT>))//<INDENT><INDENT>}"}
{"signature": "for (module in chunk) {", "body": "<EOL><INDENT><INDENT><INDENT>moduleVisibilityManager.addModule(module)<EOL><INDENT><INDENT>}"}
{"signature": "if (!expandedType.isNullable() && !isPrimitive(asmType)) {", "body": "<EOL><INDENT><INDENT><INDENT>mv.load(findLocalIndex(param.symbol), asmType)<EOL><INDENT><INDENT><INDENT>mv.aconst(param.name.asString())<EOL><INDENT><INDENT><INDENT>val methodName = if (config.unifiedNullChecks) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>mv.invokestatic(JvmSymbols.INTRINSICS_CLASS_NAME, methodName, <STR_LIT>, false)<EOL><INDENT><INDENT>}"}
{"signature": "when (val sizeInBits = type.sizeInBits()) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> LLVMConstInt(type, Int.MIN_VALUE.toLong(), <NUM_LIT>)!!<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> LLVMConstInt(type, Long.MIN_VALUE, <NUM_LIT>)!!<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val benchmarkOutputDir =", "body": "benchmarkOutputsDir.resolve(projectName)<EOL>"}
{"signature": "val dumpBridges =", "body": "false<EOL>"}
{"signature": "fun some(x: Int, y: Int) {", "body": "<INDENT><INDENT>// println(<STR_LIT>)<INDENT>}"}
{"signature": "else if (insn is LabelNode) {", "body": "<EOL><INDENT><INDENT><INDENT>result[insn.label] = currentLineNumber<EOL><INDENT><INDENT>}"}
{"signature": "val resultingMap =", "body": "HashMap<ConeClassLikeLookupTag, MutableList<ConeClassLikeType>>()<EOL>"}
{"signature": "if (sourceElement !is KtPsiSourceElement) {", "body": "<EOL><INDENT><INDENT><INDENT>sourcesToPath[sourceElement.treeStructure.root] = path<EOL><INDENT><INDENT>}"}
{"signature": "if (serializableDesc.isEnumWithLegacyGeneratedSerializer()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>SerializerForEnumsTranslator(descriptor, translator, context).generate()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (fqName !in existingClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>removedClasses.add(fqName)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun render(function: FirFunction) {", "body": "<EOL><INDENT><INDENT>renderBody(function.body)<EOL><INDENT>}"}
{"signature": "val deprecatedParentTargetMap =", "body": "mapOf<KtKeywordToken, Set<KotlinTarget>>()<EOL>"}
{"signature": "val EXPERIMENTAL_OPTION =", "body": "CliOption(<STR_LIT>, <STR_LIT>, <STR_LIT>, required = false)<EOL>"}
{"signature": "val inv =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.inv()<!><EOL>"}
{"signature": "fun reportSupertypeLoopError(type: KotlinType) {", "body": "<INDENT><INDENT>// Do nothing<INDENT>}"}
{"signature": "if (<!SENSELESS_COMPARISON!>x != null<!>) {", "body": "}"}
{"signature": "if (parameter.defaultValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(parameter.source, FirWasmErrors.WASM_IMPORT_EXPORT_PARAMETER_DEFAULT_VALUE, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun markInputs(mark: Int) {", "body": "<EOL><INDENT>super.markInputs(mark)<EOL><INDENT>scale.mark = mark<EOL><INDENT>offset.mark = mark<EOL>  }"}
{"signature": "val lazyDefs =", "body": "lazyDefsSeq.toList()<EOL>"}
{"signature": "val klibToModuleDeserializerMap =", "body": "mutableMapOf<KotlinLibrary, KonanPartialModuleDeserializer>()<EOL>"}
{"signature": "if (symbol == irBuiltins.dataClassArrayMemberHashCodeSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>overloadSymbol = symbols.findContentHashCodeOverload(argumentType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>returnType = irBuiltins.intType<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (packageName) {", "body": "<EOL><INDENT><INDENT><INDENT>CNAMES_STRUCTS_PACKAGE -> cOpaqueType<EOL><INDENT><INDENT><INDENT>OBJCNAMES_CLASSES_PACKAGE -> objcObjectBase<EOL><INDENT><INDENT><INDENT>OBJCNAMES_PROTOCOLS_PACKAGE -> objcCObject<EOL><INDENT><INDENT><INDENT>else -> emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val compileClasspathKind =", "body": "JpsJavaClasspathKind.compile(srcTarget.isTests)<EOL>"}
{"signature": "val firMetaInfo =", "body": "firArtifact?.let { processFirModule(module, it) } ?: irMetaInfo<EOL>"}
{"signature": "import ffmpeg.", "body": "*<EOL>"}
{"signature": "if (rightDfv != null) {", "body": "<EOL><INDENT><INDENT><INDENT>resultingDataFlowInfo = resultingDataFlowInfo.disequate(leftDfv, rightDfv, languageVersionSettings)<EOL><INDENT><INDENT>}"}
{"signature": "val enumValueGetters =", "body": "mapping.enumValueGetters<EOL>"}
{"signature": "fun test(nothing: Nothing?) {", "body": "<EOL><INDENT>val i = <!CANNOT_INFER_PARAMETER_TYPE!>infer<!>(<!ARGUMENT_TYPE_MISMATCH!>nothing<!>)<EOL>}"}
{"signature": "if (capturedLambda == null) {", "body": "<EOL><INDENT><INDENT>capturedLambda = lambda<EOL><INDENT>}"}
{"signature": "fun zzz(i: Int, f: (Int) -> Int) {", "body": "throw Exception(<STR_LIT>)}"}
{"signature": "val unoptimizedCode =", "body": "FileUtil.loadFile(File(unoptimizedName))<EOL>"}
{"signature": "package libCase<NUM_LIT><EOL>.", "body": ""}
{"signature": "val PLATFORM_FUNCTION_MARKER =", "body": "'%'<EOL>"}
{"signature": "val TEST_COMPILATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val debugInfoDelegate =", "body": "lazy { DebugInfo(this) }<EOL>"}
{"signature": "if (isK<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.put(CommonConfigurationKeys.USE_FIR, true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lightElements =", "body": "declaration.toLightElements()<EOL>"}
{"signature": "fun addCustomSourceFilesExtensions(extensions: List<String>) {", "body": "<EOL><INDENT><INDENT>explicitlyAddedCustomSourceFilesExtensions.addAll(extensions)<EOL><INDENT>}"}
{"signature": "if (member is CallableMemberDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkInheritedAndDelegatedSignatures(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>member, inheritedReportStrategy, overrideReportStrategyForDelegates, kotlinTypeRefiner<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var invalidUrl =", "body": "false<EOL>"}
{"signature": "val classpathEntries =", "body": "setOf(tmpDir.newFolder(), tmpDir.newFolder())<EOL>"}
{"signature": "val KOTLIN_INTERNAL_FQ_NAME =", "body": "BUILT_INS_PACKAGE_FQ_NAME.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (descriptor.constructedClass.isArray) {", "body": "<EOL><INDENT><INDENT><INDENT>MethodBridge.ReturnValue.Instance.FactoryResult<EOL><INDENT><INDENT>}"}
{"signature": "var removedAnyLabels =", "body": "false<EOL>"}
{"signature": "val KOTLIN_MPP_ENABLE_CINTEROP_COMMONIZATION =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val resultFieldName =", "body": "scriptResultFieldName(compileResult.lineId.no)<EOL>"}
{"signature": "val float =", "body": "Long.MAX_VALUE.toFloat() + long.toFloat()<INDENT>// We lose accuracy here, hence `eps` is used."}
{"signature": "if (strictRoot == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentRoot = currentRoot?.let(::findRoot) ?: Node()<EOL><INDENT><INDENT><INDENT><INDENT>addToRoot(leaf, currentRoot)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectQualifier =", "body": "expectDelegatedTypeRef.qualifier<EOL>"}
{"signature": "val definitelyNotNull =", "body": "Flags.DEFINITELY_NOT_NULL_TYPE.get(type.flags)<EOL>"}
{"signature": "package helpers<EOL>.", "body": ""}
{"signature": "val PACKAGE_FQN =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun g(q: Int) {", "body": "}<EOL><EOL><INDENT>@JvmStatic<EOL><INDENT>private val y = <STR_LIT><EOL><EOL><INDENT>private var yy: String<EOL><INDENT><INDENT>@JvmStatic get() = <STR_LIT><EOL><INDENT><INDENT>@JvmStatic set(value) {}"}
{"signature": "val defContents =", "body": "defFile.readText().split(<STR_LIT>).map { it.trim() }<EOL>"}
{"signature": "when (module) {", "body": "<EOL><INDENT><INDENT>this.module -> ModuleContent(module, syntheticFiles, searchScope)<EOL><INDENT><INDENT>else -> ModuleContent(module, emptyList(), searchScope)<EOL><INDENT>}"}
{"signature": "val isNegated =", "body": "(element as? KtBinaryExpression)?.operationToken == KtTokens.EXCLEQ ?: false<EOL>"}
{"signature": "when (stepId) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> if (values.isEmpty()) return true<EOL><INDENT><INDENT><NUM_LIT>, <NUM_LIT>, <NUM_LIT> -> if (values == listOf(<NUM_LIT> to <STR_LIT>, <NUM_LIT> to <STR_LIT>)) return true<EOL><INDENT><INDENT>else -> return false<EOL><INDENT>}"}
{"signature": "for (cf in classFiles) {", "body": "<EOL><INDENT><INDENT><INDENT>checkBytecodeNotContains(cf, strings.toList())<EOL><INDENT><INDENT>}"}
{"signature": "val setVar =", "body": "this.statements[<NUM_LIT>] as? IrSetValue ?: return null<EOL>"}
{"signature": "when (sort) {", "body": "<EOL><INDENT>Type.BOOLEAN, Type.BYTE, Type.CHAR, Type.SHORT -> true<EOL><INDENT>else -> false<EOL>}"}
{"signature": "val CHEAP_MODULE_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitExpression(name: Name?, expr: FirExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultValue = expr<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until time) {", "body": "<EOL><INDENT><INDENT>universe.evolve()<EOL><INDENT>}"}
{"signature": "if (hasIllegalModifier) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.NON_PRIVATE_OR_PROTECTED_CONSTRUCTOR_IN_SEALED, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var numberOfClasses =", "body": "<NUM_LIT><EOL>"}
{"signature": "val MAX_LONG_STRING =", "body": "<STR_LIT><EOL>"}
{"signature": "val ALLOWED_MEMBER_NAMES =", "body": "setOf(<EOL>"}
{"signature": "fun executeTest(classLoader: ClassLoader) {", "body": "<EOL><INDENT><INDENT>val clazz = getGeneratedClass(classLoader, className)<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>clazz.getMethodOrNull(testMethod)!!.invoke(null)<EOL><INDENT>}"}
{"signature": "for (klass in listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>add(klass, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val quantifier =", "body": "quantifierFromLexerToken(quant)<EOL>"}
{"signature": "fun assertEvalUnit(repl: TestRepl, state: IReplStageState<*>, line: String) {", "body": "<EOL><INDENT><INDENT>val compiledClasses = checkCompile(repl, state, line)<EOL><EOL><INDENT><INDENT>val evalResult = repl.compiledEvaluator.eval(state, compiledClasses!!)<EOL><INDENT><INDENT>val unitResult = evalResult as? ReplEvalResult.UnitResult<EOL><INDENT><INDENT>TestCase.assertNotNull(<STR_LIT>, unitResult)<EOL><INDENT>}"}
{"signature": "fun lowerInitializers() {", "body": "<EOL><INDENT><INDENT><INDENT>collectAndRemoveInitializers()<EOL><INDENT><INDENT><INDENT>val initializeMethodSymbol = createInitializerMethod()<EOL><INDENT><INDENT><INDENT>lowerConstructors(initializeMethodSymbol)<EOL><INDENT><INDENT>}"}
{"signature": "val metaAnnotations =", "body": "with(analysisSession) { getClassOrObjectSymbolByClassId(classId)?.annotationsList }<EOL>"}
{"signature": "val eagerInitializationAnnotation =", "body": "context.staticContext.backendContext.propertyLazyInitialization.eagerInitialization<EOL>"}
{"signature": "val excludedProjectDirectories =", "body": "if (project == project.rootProject) excludedProjects.map { it.buildDir } else emptyList()<EOL>"}
{"signature": "val dataDouble =", "body": "listOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.MIN_VALUE, -Double.MIN_VALUE,<EOL>"}
{"signature": "val z =", "body": "Z(<NUM_LIT>)<EOL>"}
{"signature": "val KOTLIN_<NUM_LIT>_<NUM_LIT>_RC_METADATA_VERSION =", "body": "JvmMetadataVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT><NUM_LIT>)<EOL>"}
{"signature": "if (multipleDefaultsInSuper) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(MULTIPLE_DEFAULTS_INHERITED_FROM_SUPERTYPES_WHEN_NO_EXPLICIT_OVERRIDE.on(classElement, descriptor))<EOL><INDENT><INDENT>}"}
{"signature": "val hashCalculator =", "body": "HashCalculatorForIC()<EOL>"}
{"signature": "val open =", "body": "restParams.indexOf('<')<EOL>"}
{"signature": "fun unpin() {", "body": "<EOL><INDENT><INDENT>disposeStablePointer(this.stablePtr)<EOL><INDENT>}"}
{"signature": "if (evaluatorFragmentInfoForPsi<NUM_LIT>Ir != null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.evaluatorData = JvmEvaluatorData(mutableMapOf())<EOL><INDENT><INDENT>}"}
{"signature": "val notOnJava<NUM_LIT> =", "body": "Cache(null, null, null)<EOL>"}
{"signature": "val returnTypeBasedOnVariable =", "body": "<EOL><INDENT><INDENT><INDENT>components.typeFromCallee(provideDelegate).type<EOL>"}
{"signature": "when (classStub) {", "body": "<EOL><INDENT><INDENT><INDENT>is ClassStub.Simple -> renderClassifierDeclaration(classStub.classifier)<EOL><INDENT><INDENT><INDENT>is ClassStub.Companion -> <STR_LIT><EOL><INDENT><INDENT><INDENT>is ClassStub.Enum -> renderClassifierDeclaration(classStub.classifier)<EOL><INDENT><INDENT>}"}
{"signature": "if (charOrNull(i) != ':' || charOrNull(i + <NUM_LIT>) != '\\'') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>arg as? String ?: <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isOptional) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (position == <NUM_LIT>) null else konstants[position - <NUM_LIT>]<EOL><INDENT><INDENT>}"}
{"signature": "val SIMPLE_LOG =", "body": "<STR_LIT><EOL>"}
{"signature": "val waitingContinuations =", "body": "mutableListOf<Continuation<Result<T>>>()<EOL>"}
{"signature": "val outerJavaClassId =", "body": "parent.mapToJava()<EOL>"}
{"signature": "val syntheticFunctionSignature =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getPropertySignature(proto, container.nameResolver, container.typeTable, synthetic = true) ?: return emptyList()<EOL>"}
{"signature": "val testSuiteVal =", "body": "irTemporary(constructorCall, <STR_LIT>)<EOL>"}
{"signature": "if (propertyType is ConeErrorType || getterReturnType is ConeErrorType) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val someName =", "body": "someParameter?.name<EOL>"}
{"signature": "when (modifier) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>in GranularModifiersBox.VISIBILITY_MODIFIERS -> GranularModifiersBox.computeVisibilityForMember(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ktModule,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>containingPropertySymbolPointer,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun replaceSuperTypeRef(newSuperTypeRef: FirTypeRef) {", "body": "<EOL><INDENT><INDENT>superTypeRef = newSuperTypeRef<EOL><INDENT>}"}
{"signature": "val companionObjectDesc =", "body": "if (serializableDescriptor.isSerializableObject) serializableDescriptor else serializableDescriptor.companionObjectDescriptor<EOL>"}
{"signature": "var wasmGenerateWat =", "body": "false<EOL>"}
{"signature": "for ((index, valueParameter) in function.valueParameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val get = irGet(valueParameter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>call.putValueArgument(index, valueParametersAdapters[index].adaptIfNeeded(get, builder))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val SECONDARY_LINKS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (type is KtFunctionalType) {", "body": "<EOL><INDENT><INDENT>numberOfParameters = type.parameterTypes.size<EOL><INDENT><INDENT>returnType = type.returnType<EOL><INDENT>}"}
{"signature": "else if (serializableClass.serializableAnnotationIsUseless) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw CompilationException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, null, serializableClass.findPsi()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeArgumentsAsTypes =", "body": "kType.argumentTypesOrUpperBounds()<EOL>"}
{"signature": "fun foo(b: Any) {", "body": "<EOL><INDENT>val t = aa[<NUM_LIT>]<EOL><INDENT>val a = b<EOL>}"}
{"signature": "for (localVariable in localDelegatedProperties) {", "body": "<EOL><INDENT><INDENT><INDENT>val serializer = FirElementSerializer.createForLambda(session, scopeSession,this, approximator, languageVersionSettings)<EOL><INDENT><INDENT><INDENT>proto.addExtension(extension, serializer.propertyProto(localVariable)?.build() ?: continue)<EOL><INDENT><INDENT>}"}
{"signature": "var queueCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val secondWordStart =", "body": "indices.drop(<NUM_LIT>).firstOrNull { !isLowerCaseCharAt(it, asciiOnly) }<EOL>"}
{"signature": "val jsFunAnnotation =", "body": "symbol.owner.getAnnotation(JsAnnotations.jsFunFqn) ?: return null<EOL>"}
{"signature": "if (hasGetter()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getter.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val getStarKTypeProjection =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (LanguageVersion.LATEST_STABLE.major >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.languageVersion = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val diagnosticsToJspecifyMarksForMode =", "body": "diagnosticsToJspecifyMarks[jspecifyMode] ?: return<EOL>"}
{"signature": "if (print) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>WITH_USES_SITE.renderUseSiteTarget(analysisSession, annotation, owner, annotationRenderer, printer)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val processedName =", "body": "processEnumMember(memberName)<EOL>"}
{"signature": "val archive =", "body": "createZipFile(parent, name, entries)<EOL>"}
{"signature": "package<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.", "body": "symbol.callableId.packageName == useSiteFile.packageFqName<EOL>"}
{"signature": "val generalType =", "body": "typeKindSelector(generalValueParameterTypes[index]) ?: continue<EOL>"}
{"signature": "if (lightTreeComparingModeEnabled) {", "body": "<EOL><INDENT><INDENT>metaInfo.attributes += if (lightTreeEnabled) PsiLightTreeMetaInfoProcessor.LT else PsiLightTreeMetaInfoProcessor.PSI<EOL><INDENT>}"}
{"signature": "when (c) {", "body": "<EOL><INDENT><INDENT><INDENT>in 'A'..'Z' -> c.toInt() - 'A'.toInt()<EOL><INDENT><INDENT><INDENT>in 'a'..'z' -> c.toInt() - 'a'.toInt() + <NUM_LIT><EOL><INDENT><INDENT><INDENT>in '<NUM_LIT>'..'<NUM_LIT>' -> c.toInt() - '<NUM_LIT>'.toInt() + <NUM_LIT><EOL><INDENT><INDENT><INDENT>'+' -> <NUM_LIT><EOL><INDENT><INDENT><INDENT>'/' -> <NUM_LIT><EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "for (error in diagnostic.candidate.errors) {", "body": "<EOL><INDENT><INDENT><INDENT>addIfNotNull(<EOL><INDENT><INDENT><INDENT><INDENT>error.toDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>qualifiedAccessSource,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>session.typeContext,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>diagnostic.candidate,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val family =", "body": "target.konanTarget.family<EOL>"}
{"signature": "fun onModification() {", "body": "<EOL><INDENT><INDENT><INDENT>getInstance(project).invalidateAll(includeLibraryModules = false)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitCallsEffectDeclaration(callsEffect: KtCallsEffectDeclaration<KotlinTypeBean, Nothing?>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinContractEffectType.CALLS.ordinal)<EOL><INDENT><INDENT>dataStream.writeInt(callsEffect.valueParameterReference.parameterIndex)<EOL><INDENT><INDENT>dataStream.writeInt(callsEffect.kind.ordinal)<EOL><INDENT>}"}
{"signature": "package parts existing in the package with the given FQ name.", "body": "<EOL>"}
{"signature": "val stubs =", "body": "(if (withObjCBaseDeclarations) objCBaseDeclarations() else emptyList()).plus(objCStubs)<EOL>"}
{"signature": "val ANNOTATIONS_PATHS =", "body": "arrayOf(<EOL>"}
{"signature": "val llFirSessionCache =", "body": "LLFirSessionCache.getInstance(project)<EOL>"}
{"signature": "if (currentResult == null) {", "body": "<EOL><INDENT><INDENT><INDENT>_result = next<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val bHasLowerType =", "body": "if (b.lowerType != null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "if (materialized) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>t.classOrNull?.owner?.let(::addInnerClassInfo)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultConstructorDelegate =", "body": "LightMethodBuilder(manager, language, name)<EOL>"}
{"signature": "val topLevelProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (operator == IrDynamicOperator.INVOKE && qualifiedAccess !is FirImplicitInvokeCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>IrDynamicMemberExpressionImpl(startOffset, endOffset, type, name.identifier, selectedReceiver)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val globalPtr =", "body": "AtomicNativePtr(NativePtr.NULL)<EOL>"}
{"signature": "val notDeclaredAsNothing =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@OptIn(UnexpandedTypeCheck::class) !declaration.returnTypeRef.isNothing<EOL>"}
{"signature": "fun withOneCharSequenceArg(f: ((String) -> CharSequence) -> Unit) {", "body": "<EOL><INDENT>for (arg<NUM_LIT>Builder in charSequenceBuilders) f(arg<NUM_LIT>Builder)<EOL>}"}
{"signature": "val reflectiveZero =", "body": "Target::class.java.getAnnotation(ZeroArg::class.java)<EOL>"}
{"signature": "for (@[ann]) {", "body": "}"}
{"signature": "val superTypeSymbol =", "body": "superTypeRef.type.toRegularClassSymbol(session)<EOL>"}
{"signature": "val suspendableExpressionValues =", "body": "mutableMapOf<IrSuspendableExpression, MutableList<IrSuspensionPoint>>()<EOL>"}
{"signature": "val resolvedAtoms =", "body": "subResolvedAtoms<EOL>"}
{"signature": "val maxULong =", "body": "<NUM_LIT>xFFFF_FFFF_FFFF_FFFFuL<EOL>"}
{"signature": "fun testRandomArrayArgumentsMetadata() {", "body": "<EOL><INDENT><INDENT>doRandomArrayArgumentsTest<K<NUM_LIT>MetadataCompilerArguments>()<EOL><INDENT>}"}
{"signature": "fun useUnit<NUM_LIT>(fn: () -> Unit) {", "body": "}<EOL>fun useUnit<NUM_LIT>(fn: (Int) -> Unit) {}"}
{"signature": "val friends =", "body": "module.friendDependencies.map { getJsModuleArtifactPath(testServices, it.moduleName) + <STR_LIT> }<EOL>"}
{"signature": "val unsubstitutedSamType =", "body": "typeAliasDescriptor.expandedType<EOL>"}
{"signature": "if (topLevelExtension is KotlinProjectExtension) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>project.kotlinExtension.sourceSets = kotlinSourceSetContainer(kotlinSourceSetFactory(project))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var needsBackRefReplacement =", "body": "false<EOL>"}
{"signature": "if (irClassSymbol.isBound) {", "body": "<EOL><INDENT><INDENT><INDENT>return irClassSymbol.owner<EOL><INDENT><INDENT>}"}
{"signature": "val srcFileForChanging =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val rawPointer =", "body": "args[<NUM_LIT>]<EOL>"}
{"signature": "if (minimumValue !== null && maximumValue !== null) {", "body": "<EOL><INDENT><INDENT>if (minimumValue > maximumValue) throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>if (this < minimumValue) return minimumValue<EOL><INDENT><INDENT>if (this > maximumValue) return maximumValue<EOL><INDENT>}"}
{"signature": "if (kind.annotationOnInvokeClassId == annotationClassId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(kind)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package org.", "body": "jetbrains.kotlin.gradle.unitTests<EOL>"}
{"signature": "for (stmt in additionalStatements) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>+stmt<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (candidate is Candidate) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>candidate.argumentMapping<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val tagName =", "body": "name.replace(' ', '_')<EOL>"}
{"signature": "val intModInt =", "body": "byte.mod(int)<EOL>"}
{"signature": "val hasExplicitGroups =", "body": "declaration.hasExplicitGroups<EOL>"}
{"signature": "val PRESET_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (i % prime == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>simple = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val requestedResults =", "body": "compilationOptions<EOL>"}
{"signature": "val markBlack =", "body": "mutableSetOf<DefFile>()<EOL>"}
{"signature": "val multiModuleInfoDumper =", "body": "MultiModuleInfoDumper()<EOL>"}
{"signature": "if (old.getExtensionCount(BuiltInsProtoBuf.classAnnotation) != new.getExtensionCount(BuiltInsProtoBuf.classAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(ProtoBufClassKind.BUILT_INS_EXT_CLASS_ANNOTATION_LIST)<EOL><INDENT><INDENT>}"}
{"signature": "val retentionMapping =", "body": "hashMapOf(<EOL>"}
{"signature": "val serializerFactoryClass =", "body": "<EOL><INDENT><INDENT><INDENT>classDescriptor.module.getClassFromInternalSerializationPackage(<STR_LIT>)<EOL>"}
{"signature": "val INVALID_REFINES_IN_SWIFT_TARGETS =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "fun h<NUM_LIT>(x : Any) {", "body": "<EOL><INDENT>}"}
{"signature": "val currentReleaseConfiguration =", "body": "column<Int>(<STR_LIT>).getValue(this)<EOL>"}
{"signature": "val pp =", "body": "p<NUM_LIT> + p<NUM_LIT><EOL>"}
{"signature": "val absoluteIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val generateTests =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "var dependenciesOfCurrentModule =", "body": "mutableListOf<DependencyDescription>()<EOL>"}
{"signature": "if (hasEntry) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendLine(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val projectDescriptor =", "body": "context.projectDescriptor<EOL>"}
{"signature": "if (!useOptimizedSuperClass) {", "body": "<EOL><INDENT><INDENT><INDENT>referenceClass.addSimpleDelegatingConstructor(superConstructor, context.irBuiltIns, isPrimary = true)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var MyDemoOpenSetterCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (mapper.shouldBeExposed(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.unsubstitutedMemberScope.collectClasses(collector)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.andArgumentCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getAndArgument(i), new.getAndArgument(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "while (stack.peek().kind != ClassType) {", "body": "<EOL><INDENT><INDENT><INDENT>stack.pop()<EOL><INDENT><INDENT>}"}
{"signature": "if (parameter.getVariance() == TypeVariance.INV) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newArguments[index] = createTypeArgument(approximatedArgument, effectiveVariance)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isResolvedToProject =", "body": "moduleId in params.build<EOL>"}
{"signature": "val llContent =", "body": "helper.readContent(testDataFile, trimLines = false).removeLlFirDivergenceDirective(trimLines = true)<EOL>"}
{"signature": "if (dsymInputs.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun visitReadValue(instruction: ReadValueInstruction) {", "body": "<EOL><INDENT><INDENT>visitAccessInstruction(instruction)<EOL><INDENT>}"}
{"signature": "val rangeStart =", "body": "intArrayOf(<EOL>"}
{"signature": "if (!simpleName.isSpecial) {", "body": "<EOL><INDENT><INDENT><INDENT>val simpleNameProp = JsPropertyInitializer(JsNameRef(Namer.METADATA_SIMPLE_NAME), JsStringLiteral(simpleName.identifier))<EOL><INDENT><INDENT><INDENT>metadataLiteral.propertyInitializers += simpleNameProp<EOL><INDENT><INDENT>}"}
{"signature": "val genericTypeParameterNameMapping =", "body": "GenericTypeParameterNameMapping()<EOL>"}
{"signature": "if (expectedType is ConeIntegerConstantOperatorType) {", "body": "<EOL><INDENT><INDENT><INDENT>return integerLiteralOperatorCall<EOL><INDENT><INDENT>}"}
{"signature": "val TYPE_INFO_SUPER_TYPE_OFFSET =", "body": "TYPE_INFO_TYPE_SIMPLE_NAME_PRT_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "import platform.", "body": "posix.memcpy<EOL>"}
{"signature": "val cBridgePrinter =", "body": "createCBridgePrinter()<EOL>"}
{"signature": "val lineBuf =", "body": "StringBuilder()<EOL>"}
{"signature": "fun beforeCompile() {", "body": "<EOL><INDENT><INDENT>markUsed()<EOL><INDENT>}"}
{"signature": "fun resetCallback() {", "body": "<EOL><INDENT><INDENT>diagnosticsCallback = null<EOL><INDENT><INDENT>delegateDiagnostics.resetCallback()<EOL><INDENT>}"}
{"signature": "val bench =", "body": "FirResolveBench(withProgress)<EOL>"}
{"signature": "val align =", "body": "<NUM_LIT><EOL>"}
{"signature": "val iterableTypeArgument =", "body": "typeArguments[<NUM_LIT>]<EOL>"}
{"signature": "if (splitted.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>mv.aconst(splitted.first())<EOL><INDENT><INDENT>}"}
{"signature": "package is a class file root<EOL>.", "body": ""}
{"signature": "var e<NUM_LIT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (receiver.isTrivial()) {", "body": "<INDENT><INDENT>// Receiver has no side effects (aside from maybe class initialization) so discard it.<INDENT><INDENT>return this<INDENT>}"}
{"signature": "val extenders =", "body": "allVisibleSourceSets.flatMap { it.internal.compileDependenciesConfigurations }<EOL>"}
{"signature": "val voidType =", "body": "IDLSingleTypeDeclaration(<STR_LIT>, null, false)<EOL>"}
{"signature": "if (res === undefined) {", "body": "<EOL><INDENT><INDENT>const POW_<NUM_LIT>_3<NUM_LIT> = 4<NUM_LIT>94967<NUM_LIT>96;<EOL><INDENT><INDENT>const hash = (Math.random() * POW_<NUM_LIT>_3<NUM_LIT>) | <NUM_LIT>;<EOL><INDENT><INDENT>hashCodes.set(obj, hash);<EOL><INDENT><INDENT>return hash;<EOL><INDENT>}"}
{"signature": "val allFunctions =", "body": "element.values.all { it is WasmTable.Value.Function }<EOL>"}
{"signature": "val finallyBlockEnterNode =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>generateSequence(it, CFGNode<*>::lastPreviousNode).firstIsInstanceOrNull<FinallyBlockEnterNode>() ?: return null<EOL>"}
{"signature": "val functions =", "body": "<EOL><INDENT><INDENT>ReferencableAndDefinable<IrFunctionSymbol, WasmFunction>()<EOL>"}
{"signature": "for (j in range) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(pattern.replace(<STR_LIT>, typePatterns[i]).replace(<STR_LIT>, typePatterns[j].replace(<STR_LIT>, <STR_LIT>)))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package kt<NUM_LIT>lib<EOL>.", "body": ""}
{"signature": "if (current.left.value < min.value) {", "body": "<EOL><INDENT><INDENT>min = current.left<EOL><INDENT>  }"}
{"signature": "if (<!SENSELESS_COMPARISON!><!REDUNDANT_LABEL_WARNING!>foo@<!> null != x<!>) {", "body": "}"}
{"signature": "if (contextReceiversCount == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>emptyList()<EOL><INDENT>}"}
{"signature": "val matchingKind =", "body": "matchingExtensionKinds.singleOrNull() ?: return null<EOL>"}
{"signature": "if (current.right.exists && current.right.value < min.value) {", "body": "<EOL><INDENT><INDENT>min = current.right<EOL><INDENT>  }"}
{"signature": "val serializerType =", "body": "declaration.annotations.serializableWith(module) ?: return<EOL>"}
{"signature": "val ktBody =", "body": "literal.bodyExpression<EOL>"}
{"signature": "if (x is IC<NUM_LIT> && x is IC<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val (x<NUM_LIT>, x<NUM_LIT>) = x<EOL><INDENT>}"}
{"signature": "val valueParametersAsMutableList =", "body": "mutableListOf<IrValueParameter>()<EOL>"}
{"signature": "for ((classFqName, affectedFiles) in fqNameToAffectedFiles) {", "body": "<EOL><INDENT><INDENT>reporter.reportMarkDirtyClass(affectedFiles, classFqName.asString())<EOL><INDENT>}"}
{"signature": "var hasOpen =", "body": "false<EOL>"}
{"signature": "val intermediateBuilders =", "body": "mutableListOf<IntermediateBuilder<BuilderField, Element>>()<EOL>"}
{"signature": "if (usage is KtDotQualifiedExpression && usage.receiverExpression == outermostQualifiedExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>report(UNSAFE_CALL_ON_PARTIALLY_DEFINED_RESOURCE.on(calleeExpression))<EOL><INDENT><INDENT>}"}
{"signature": "var privateLProp =", "body": "Unit<EOL>"}
{"signature": "fun visitSetterAnnotation(annotation: KmAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>proto.addExtension(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KlibMetadataProtoBuf.propertySetterAnnotation,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>annotation.writeAnnotation(c.strings).build()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (myVarIndex.size != myVarSizes.size) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val relativeBasePath =", "body": "<STR_LIT><EOL>"}
{"signature": "import table.", "body": "<EOL>"}
{"signature": "val encodedText =", "body": "text.encodeToByteArray(charset)<EOL>"}
{"signature": "if (proto.afterCommentsCount != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>commentsAfterNode = proto.afterCommentsList.map(::deserializeComment)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitStringConcatenationCallNode(node: StringConcatenationCallNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitStringConcatenationCallNode(node)<EOL><INDENT>}"}
{"signature": "if (it.name in skipAttrs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.value = <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val componentNIndex =", "body": "DataClassResolver.getComponentIndex(this.nameOrSpecialName.identifier)<EOL>"}
{"signature": "val drainFactory =", "body": "{ CompressedPointsToGraph.Node.drain(drainsCount++) }<EOL>"}
{"signature": "val SIMPLE_BINARY_OPERATION_NAMES =", "body": "setOf(TIMES, PLUS, MINUS, DIV, MOD, REM)<EOL>"}
{"signature": "val deferredReturnTypeCalculation =", "body": "deferredReturnTypeCalculationOrNull(mostSpecific)<EOL>"}
{"signature": "fun processClassifiersByNameWithSubstitution(<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>processor: (FirClassifierSymbol<*>, ConeSubstitutor) -> Unit,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>delegate.processClassifiersByNameWithSubstitution(name, processor)<EOL><INDENT>}"}
{"signature": "val vk =", "body": "getK()<EOL>"}
{"signature": "if (kDocLineWords.size >= <NUM_LIT> && kDocLineWords[<NUM_LIT>] == generatedWords[<NUM_LIT>] && kDocLineWords[<NUM_LIT>] == generatedWords[<NUM_LIT>]) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>return i + <NUM_LIT>  // position after last `@param` kDoc line, describing same parameter as in generatedCommentLine<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val RETURN_WITH_LABEL =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val testMode =", "body": "__UNKNOWN_TEST_MODE__<EOL>"}
{"signature": "for (i in (start..intArray.size - <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>sum += intArray[i]<EOL><INDENT>}"}
{"signature": "val pathNode =", "body": "queue.removeFirst()<EOL>"}
{"signature": "val functionOrPropertyBaseCommonizer =", "body": "functionOrPropertyBaseCommonizer.asCommonizer()<EOL>"}
{"signature": "val equals =", "body": "Z::equals<EOL>"}
{"signature": "var hasErrors =", "body": "false<EOL>"}
{"signature": "fun visitVariable(declaration: IrVariable, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitVariable(declaration)<EOL><INDENT>}"}
{"signature": "val resultMjs =", "body": "File(binariesDir, mainModuleMjsName)<EOL>"}
{"signature": "val argumentRange =", "body": "maxOf(shift, <NUM_LIT>) until (kotlinParameterTypes.size + shift)<EOL>"}
{"signature": "val loopVariableComponentIndices =", "body": "mutableListOf<Int>()<EOL>"}
{"signature": "val resolvedLambdaAtom =", "body": "preprocessLambdaArgument(<EOL>"}
{"signature": "val func =", "body": "::fff<EOL>"}
{"signature": "val result =", "body": "test.block()<EOL>"}
{"signature": "var noStdlib =", "body": "false<EOL>"}
{"signature": "var nextFound =", "body": "next.find(startIndex, testString, matchResult)<EOL>"}
{"signature": "var lastArgIsOptionWithoutEqualsSign =", "body": "false<EOL>"}
{"signature": "val tasksWithNativeCompilerArguments =", "body": "listOf(<EOL>"}
{"signature": "val METADATA_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val appKt =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>) ?: error(<STR_LIT>)<EOL>"}
{"signature": "fun bind(owner: IrExternalPackageFragment) {", "body": "<EOL><INDENT><INDENT>_owner = owner<EOL><INDENT>}"}
{"signature": "val title =", "body": "titlecaseMapping.map { it.hexToInt().toChar() }.joinToString(separator = <STR_LIT>)<EOL>"}
{"signature": "for ((string, symbol) in stringLiteralAddress.unbound) {", "body": "<EOL><INDENT><INDENT><INDENT>symbol.bind(stringDataSectionStart)<EOL><INDENT><INDENT><INDENT>stringLiteralPoolId.reference(string).bind(stringLiteralCount)<EOL><INDENT><INDENT><INDENT>val constData = ConstantDataCharArray(<STR_LIT>, string.toCharArray())<EOL><INDENT><INDENT><INDENT>stringDataSectionBytes += constData.toBytes().toList()<EOL><INDENT><INDENT><INDENT>stringDataSectionStart += constData.sizeInBytes<EOL><INDENT><INDENT><INDENT>stringLiteralCount++<EOL><INDENT><INDENT>}"}
{"signature": "val pendingException =", "body": "{ JsIrBuilder.buildGetValue(pendingExceptionDeclaration.symbol) }<EOL>"}
{"signature": "val DIVISION_OPERATION_NAMES =", "body": "<EOL><INDENT>listOf(OperatorNameConventions.DIV, OperatorNameConventions.REM, OperatorNameConventions.MOD)<EOL>"}
{"signature": "val oldMembers =", "body": "members(oldProto).filterNot { it.isPrivate }<EOL>"}
{"signature": "fun visitBinaryAndEnterNode(node: BinaryAndEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "for ((index, _) in xs.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun foo(g: suspend String.() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>g(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>.length<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (shortName !in failsIn) {", "body": "<EOL><INDENT><INDENT><INDENT>return e<EOL><INDENT><INDENT>}"}
{"signature": "fun test_fun_stays_protected(g: G) {", "body": "<EOL><INDENT>g.<!INVISIBLE_MEMBER!>protected_fun<!>()<EOL>}"}
{"signature": "val implementationVal =", "body": "symbol.intersections.first { it is FirPropertySymbol && it.isVal && !it.isAbstract }<EOL>"}
{"signature": "fun prepareAndroidModuleAndGenerateTests(skipSdkDirWriting: Boolean) {", "body": "<EOL><INDENT><INDENT>prepareAndroidModule(skipSdkDirWriting)<EOL><INDENT><INDENT>generateTestsAndFlavourSuites()<EOL><INDENT>}"}
{"signature": "val containingCall =", "body": "containingArgument?.getParentOfType<KtCallExpression>(true)<EOL>"}
{"signature": "if (isFromLibrary) {", "body": "<EOL><INDENT><INDENT><INDENT>FirResolvedDeclarationStatusImpl(Visibilities.Unknown, Modality.FINAL, EffectiveVisibility.Unknown)<EOL><INDENT><INDENT>}"}
{"signature": "val debugRenderer =", "body": "DebugSymbolRenderer()<EOL>"}
{"signature": "fun foo(m : Map<String, String>) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>foo(HashMap())<EOL>}"}
{"signature": "for (configure in variant.configurationConfigurations) {", "body": "<EOL><INDENT><INDENT>configuration.apply(configure)<EOL><INDENT>}"}
{"signature": "val kotlinJsInputFile =", "body": "InputFile(InputResource.file(kotlinJsLib), null, kotlinJsLibOutput, <STR_LIT>)<EOL>"}
{"signature": "if (erasedExpectedClass.isSingleFieldValueClass) {", "body": "<INDENT><INDENT><INDENT><INDENT>// LambdaMetafactory doesn't know about method mangling.<INDENT><INDENT><INDENT><INDENT>TypeAdaptationConstraint.CONFLICT<INDENT><INDENT><INDENT>}"}
{"signature": "var isErrorInSupertypesFound =", "body": "false<EOL>"}
{"signature": "val NON_EXISTENT_QUALIFIED_CLASS_NAME =", "body": "NON_EXISTENT_CLASS_NAME.replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val baseFunClass =", "body": "baseFun.parent as? IrClass<EOL>"}
{"signature": "val setterImpl =", "body": "actualImplementation.setter<EOL>"}
{"signature": "fun testSCmp(x: SCmp) {", "body": "<EOL><INDENT>if (x.sc.compareTo(<STR_LIT>) != <NUM_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val annotationClassSymbol =", "body": "getClassOrObjectSymbolByClassId(annotationClassId) ?: return@any false<EOL>"}
{"signature": "fun recordLambda(<EOL><INDENT><INDENT>composable: Boolean,<EOL><INDENT><INDENT>memoized: Boolean,<EOL><INDENT><INDENT>singleton: Boolean,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>totalLambdas++<EOL><INDENT><INDENT>if (composable) composableLambdas++<EOL><INDENT><INDENT>if (memoized) memoizedLambdas++<EOL><INDENT><INDENT>if (composable && singleton) singletonComposableLambdas++<EOL><INDENT><INDENT>if (!composable && singleton) singletonLambdas++<EOL><INDENT>}"}
{"signature": "val expectedMissingModuleNames =", "body": "allModuleNames - expectedCommonModuleNames<EOL>"}
{"signature": "if (resolved.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return resolved.absolutePath<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val COMPOSE_COMPILER_ARTIFACT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun runTest(module: SirModule, goldenDataFile: String) {", "body": "<EOL><INDENT><INDENT>val expectedSwiftSrc = File(KtTestUtil.getHomeDirectory()).resolve(<STR_LIT>)<EOL><INDENT><INDENT>val actualSwiftSrc = SirAsSwiftSourcesPrinter.print(module, stableDeclarationsOrder = false, renderDocComments = true)<EOL><INDENT><INDENT>JUnit<NUM_LIT>Assertions.assertEqualsToFile(expectedSwiftSrc, actualSwiftSrc)<EOL><INDENT>}"}
{"signature": "for (statement in this) {", "body": "<EOL><INDENT><INDENT>visitor.accept(statement)<EOL><INDENT>}"}
{"signature": "val callRefinementExtensions =", "body": "session.extensionService.callRefinementExtensions.takeIf { it.isNotEmpty() }<EOL>"}
{"signature": "val touch =", "body": "MyElement::class.java<EOL>"}
{"signature": "val ks<NUM_LIT>Foo =", "body": "ks<NUM_LIT>(::foo)<EOL>"}
{"signature": "if (!qualifiedAccessExpression.isResolved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>storeTypeFromCallee(qualifiedAccessExpression, isLhsOfAssignment = false)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import directly without JS layer.", "body": "<EOL>"}
{"signature": "if (typeRef !is FirResolvedTypeRef || typeRef is FirErrorTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var dnan =", "body": "java.lang.Double.NaN<EOL>"}
{"signature": "if (function is FirAnonymousFunction && function.invocationKind?.canBeRevisited() != false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>enterRepeatableStatement(flow, assignedInside)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val headerKlibLib =", "body": "File(getHeaderPath(<STR_LIT>))<EOL>"}
{"signature": "val lastSiblingToDelete =", "body": "PsiTreeUtil.skipSiblingsForward(sibling, PsiWhiteSpace::class.java)?.prevSibling ?: sibling<EOL>"}
{"signature": "fun setMethodImplForUint<NUM_LIT>Array(obj: Uint<NUM_LIT>Array, index: Int, value: Byte) {", "body": "js(<STR_LIT>) }"}
{"signature": "val bridgeTarget =", "body": "it.bridgeTarget<EOL>"}
{"signature": "val backendDiagnostics =", "body": "generationState.collectedExtraJvmDiagnostics.all()<EOL>"}
{"signature": "val dispatchState =", "body": "currentState<EOL>"}
{"signature": "val jsConfig =", "body": "JsEnvironmentConfigurator.createJsConfig(project, configuration)<EOL>"}
{"signature": "val declarationsDts =", "body": "types + declarations.joinTypeScriptFragments().raw<EOL>"}
{"signature": "when (val callee = expression.symbol.owner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is IrFunction -> callee.dispatchReceiverParameter?.type<EOL><INDENT><INDENT><INDENT><INDENT>is IrProperty -> callee.getter?.dispatchReceiverParameter?.type<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val intSerializer =", "body": "<STR_LIT><EOL>"}
{"signature": "val externalBuildDir =", "body": "tempDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun checkMetaSerializableApplicable(descriptor: ClassDescriptor, trace: BindingTrace) {", "body": "<EOL><INDENT><INDENT>if (descriptor.kind != ClassKind.ANNOTATION_CLASS) return<EOL><INDENT><INDENT>if (descriptor.classId?.isNestedClass != true) return<EOL><INDENT><INDENT>val entry = descriptor.findAnnotationDeclaration(SerializationAnnotations.metaSerializableAnnotationFqName) ?: return<EOL><INDENT><INDENT>trace.report(SerializationErrors.META_SERIALIZABLE_NOT_APPLICABLE.on(entry))<EOL><INDENT>}"}
{"signature": "val programSource =", "body": "File(tmpdir, <STR_LIT>)<EOL>"}
{"signature": "for (exact in listOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, <NUM_LIT>, Double.MIN_VALUE, -Double.MIN_VALUE)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(exact, atanh(tanh(exact)))<EOL><INDENT><INDENT>}"}
{"signature": "val classLoadersCachingService =", "body": "ClassLoadersCachingBuildService.registerIfAbsent(project)<EOL>"}
{"signature": "if (!assertionsHappened) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(true, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun generateOther(i: Int, argument: ResolvedValueArgument) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (isDenormalized || !mantissaIsZero) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>r = f shl <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>s = <NUM_LIT>L shl <NUM_LIT> - e<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!languageVersionSettings.supportsFeature(LanguageFeature.TypeAliases)) {", "body": "<EOL><INDENT><INDENT><INDENT>c.trace.report(UNSUPPORTED_FEATURE.on(type, LanguageFeature.TypeAliases to languageVersionSettings))<EOL><INDENT><INDENT><INDENT>return createErrorTypeForTypeConstructor(c, projectionFromAllQualifierParts, typeConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "fun testJvmTarget() {", "body": "<EOL><INDENT><INDENT>jvmTargetTestImpl(<STR_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>jvmTargetTestImpl(<STR_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>jvmTargetTestImpl(<STR_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitClassLiteral(value: ClassLiteralValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>elements.add(KClassData(value.classId, value.arrayNestedness))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var runId =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (hasDefaults) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultParamCount(numContextParams + numRealValueParams)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (i < hexString.length) {", "body": "<EOL><INDENT><INDENT><INDENT>bytes[o++] = hexToByte(hexString[i++], hexString[i++])<EOL><INDENT><INDENT>}"}
{"signature": "fun intersect() {", "body": "<EOL><INDENT><INDENT>assertTrue(listOf(<NUM_LIT>, <NUM_LIT>).intersect(listOf(<NUM_LIT>)).none())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>), listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).intersect(listOf(<NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).intersect(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertTrue(listOf<Int>().intersect(listOf(<NUM_LIT>)).none())<EOL><INDENT>}"}
{"signature": "val mainModuleArtifact =", "body": "moduleArtifacts.last()<EOL>"}
{"signature": "if (symbol is IrFieldSymbol && (symbol.descriptor as? WrappedPropertyDescriptor)?.isBound() == true) {", "body": "//<INDENT><INDENT><INDENT>return generateStubBySymbol(symbol, symbol.descriptor)//<INDENT><INDENT>}"}
{"signature": "val extensionReceiverType =", "body": "descriptor.extensionReceiverParameter?.type<EOL>"}
{"signature": "if (order.toString() != expected) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (annotation in parameterDescriptor.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.append(descriptorRenderer.renderAnnotation(annotation))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun markStarted(ts: Long) {", "body": "<EOL><INDENT><INDENT><INDENT>reportStarted(ts)<EOL><INDENT><INDENT>}"}
{"signature": "var hasAbstractFromClass =", "body": "false<EOL>"}
{"signature": "val toRead =", "body": "min(todo, bufferAvailable)<EOL>"}
{"signature": "if (actualParameter.defaultValue == null && expectDefaultValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>actualParameter.defaultValue = expectDefaultValue.deepCopyWithSymbols(actualFunction).transform(visitor, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val thirtyTwo =", "body": "<NUM_LIT><EOL>"}
{"signature": "val inputDir =", "body": "tmp.resolve(<STR_LIT>)<EOL>"}
{"signature": "val isNotOptimizedAwayThreadLocalInitializerCall =", "body": "(calleeOrigin == DECLARATION_ORIGIN_STATIC_THREAD_LOCAL_INITIALIZER<EOL>"}
{"signature": "val SYNCHRONIZED_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val allUsedTypeParameters =", "body": "mutableSetOf<ConeTypeParameterLookupTag>()<EOL>"}
{"signature": "val valueParametersAssociated =", "body": "baseMethodBridge.valueParametersAssociated(this)<EOL>"}
{"signature": "fun testConstructor() {", "body": "<EOL><INDENT>val generatedClass: AllOpenGenerated = AllOpenGenerated()<EOL>}"}
{"signature": "if (deprecatedAnnotation == null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.DEPRECATED_SINCE_KOTLIN_WITHOUT_DEPRECATED.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deprecatedSinceAnnotationName<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun accept(visitor: KmTypeAliasExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibTypeAliasExtensionVisitor)<EOL><INDENT><INDENT>uniqId?.let(visitor::visitUniqId)<EOL><INDENT>}"}
{"signature": "val browser =", "body": "withoutOs.substring(rawSuiteNameOnly.length + <NUM_LIT>) // HeadlessChrome <NUM_LIT>.<NUM_LIT>"}
{"signature": "val sourcesGenerated =", "body": "mutableListOf<Int>()<EOL>"}
{"signature": "val qualifiedReference =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (jsQualifier == null) moduleName.makeRef() else (listOf(moduleName) + jsQualifier).makeRef()<EOL>"}
{"signature": "val sourceMapBuilder =", "body": "SourceMap<NUM_LIT>Builder(outputFile, output::getColumn, config.sourceMapPrefix)<EOL>"}
{"signature": "val compilerClass =", "body": "classLoader.loadClass(<STR_LIT>)<EOL>"}
{"signature": "val outerTransformer =", "body": "(returnTypeCalculator as ReturnTypeCalculatorWithJump).outerTransformer<EOL>"}
{"signature": "if (currentItem.line != <NUM_LIT> || currentItem.expectation != logItem.expectation) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(logItem)<EOL><INDENT><INDENT><INDENT>currentItem = logItem<EOL><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(x: Out<Number>, list: List<Out<Number>>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL>}"}
{"signature": "if (srcDirs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addVariant(sourceSet.name, srcDirs)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (context.configuration.getBoolean(USE_INLINE_SCOPES_NUMBERS)) {", "body": "<EOL><INDENT><INDENT><INDENT>irFile.acceptVoid(ScopeNumberVariableProcessor())<EOL><INDENT><INDENT>}"}
{"signature": "val startInstruction =", "body": "getStartInstruction(traversalOrder)<EOL>"}
{"signature": "if (stableName.isPresentInGeneratedCode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(stableName.copy(symbol = targetSymbol))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val create<NUM_LIT>CompletionParameter =", "body": "create<NUM_LIT>Function.valueParameters[<NUM_LIT>]<EOL>"}
{"signature": "val synthesizedSuperFun =", "body": "createSynthesizedFunctionWithFirstParameterAsReceiver(invokeDeclaration)<EOL>"}
{"signature": "fun protectedFoo() {", "body": "}<EOL><INDENT>private fun privateFoo() {}"}
{"signature": "var isEnhanced =", "body": "false<EOL>"}
{"signature": "val currentClassLoader =", "body": "Thread.currentThread().contextClassLoader<EOL>"}
{"signature": "val jsCodeArg =", "body": "expression.getValueArgument(<NUM_LIT>) ?: compilationException(<STR_LIT>, expression)<EOL>"}
{"signature": "val partiallyAppliedSymbol =", "body": "KtPartiallyAppliedSymbol(<EOL>"}
{"signature": "if (writeIndex < size) {", "body": "<EOL><INDENT><INDENT>for (removeIndex in lastIndex downTo writeIndex)<EOL><INDENT><INDENT><INDENT>removeAt(removeIndex)<EOL><EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val SECTIONS_IN_FILE_REGEX =", "body": "<STR_LIT>\"[\\w-\\.]+(,\\s+[\\w-\\.]+)*<STR_LIT>\"<EOL>"}
{"signature": "val supertypesGroups =", "body": "buildSupertypesGroups(supertypesTrees)<EOL>"}
{"signature": "var lengthVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun test_<NUM_LIT>(b: B) {", "body": "<EOL><INDENT>b.x<NUM_LIT><EOL><INDENT>b.x<NUM_LIT><EOL><INDENT>b.x<NUM_LIT><EOL><INDENT>b.x<NUM_LIT><EOL>}"}
{"signature": "package localAnonymousFunction<EOL>.", "body": ""}
{"signature": "val leftArgumentDesugaredSource =", "body": "leftArgument.source?.fakeElement(fakeSourceKind)<EOL>"}
{"signature": "val composerParamTransformer =", "body": "ComposerParamTransformer(<EOL>"}
{"signature": "if (parsedValue != null) {", "body": "<EOL><INDENT><INDENT>put(key, parsedValue)<EOL><INDENT>}"}
{"signature": "val wrappedLambdaField =", "body": "lambdaClass.findFunctionField()<EOL>"}
{"signature": "val expected =", "body": "mapOf(<NUM_LIT>u to <STR_LIT>, <NUM_LIT>u to <STR_LIT>, <NUM_LIT>u to <STR_LIT>)<EOL>"}
{"signature": "var subjectSupplier =", "body": "{ subject }<EOL>"}
{"signature": "val qualifierNameDiff =", "body": "aQualifier.name.compareTo(bQualifier.name)<EOL>"}
{"signature": "when(arg.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> put(arg[<NUM_LIT>], arg[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> put(arg[<NUM_LIT>], arg[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val eagerInitializerBlock =", "body": "JsCompositeBlock()<EOL>"}
{"signature": "val test_snn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === s<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== s<!><EOL>"}
{"signature": "val STUB_FOR_INLINING =", "body": "<STR_LIT><EOL>"}
{"signature": "if (superFunctionParentSymbol == null || irField.type.isSubtypeOfClass(superFunctionParentSymbol)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getField<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (function.isInline && !function.isExported) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// An exported inline function calls a non-exported inline function:<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// should track its callees as well as it won't be handled by the main visitor.<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trackCallees(function)<INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val LONG_DEPRECATED =", "body": "Opcodes.ACC_DEPRECATED.toLong()<EOL>"}
{"signature": "if (initialVersionsCount > filteredVersions.count()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(filteredVersions + minSupportedGradleVersion).toSet()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val referenceArraySerializer =", "body": "Name.identifier(SpecialBuiltins.referenceArraySerializer)<EOL>"}
{"signature": "fun testSimple(x: X) {", "body": "}<EOL>fun testSimple(z: Z) {}"}
{"signature": "fun use(x: Any) {", "body": "}<EOL><EOL>fun <U> use<NUM_LIT>(x: Sam<NUM_LIT><U>) {}"}
{"signature": "val innerAnnotations =", "body": "composeAnnotations(<EOL>"}
{"signature": "fun checkLinkedHashMap(obj: Any) {", "body": "<EOL><INDENT>assertTrue(obj is LinkedHashMap<*, *>, <STR_LIT>)<EOL><INDENT>checkHashMap(obj)<EOL>}"}
{"signature": "if (symbol is FirSimpleSyntheticPropertySymbol && symbol.deprecatedOverrideOfHidden) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.reportDiagnostic(CallToDeprecatedOverrideOfHidden)<EOL><INDENT><INDENT>}"}
{"signature": "if (unit is TranslationUnit.SourceFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>files.add(unit.file)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val objCExportInterceptedContinuation =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "package names in reflection information without package patching.", "body": "<EOL>"}
{"signature": "val otherTypeSize =", "body": "LLVMSizeOfTypeInBits(llvmTargetData, otherLlvmType)<EOL>"}
{"signature": "val WORLD =", "body": "<STR_LIT><EOL>"}
{"signature": "if (cn.toInt() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (implicitReceiverStack.lastOrNull() is InaccessibleImplicitReceiverValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ConeInstanceAccessBeforeSuperCall(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val idSignatureShouldBePresent =", "body": "environment.configuration.getBoolean(JVMConfigurationKeys.LINK_VIA_SIGNATURES)<EOL>"}
{"signature": "if (this is T) {", "body": "<EOL><INDENT><INDENT>  t = this@C<EOL><INDENT>   }"}
{"signature": "if (aTry.finallyExpression != null) TryWithFinallyInfo(aTry.finallyExpression!!) else TryInfo()) {", "body": "<EOL><INDENT><INDENT><INDENT>visitTryWithInfo(aTry, data, it)<EOL><INDENT><INDENT>}"}
{"signature": "val getterKFunctionType =", "body": "this@WasmPropertyReferenceLowering.context.irBuiltIns.getKFunctionType(<EOL>"}
{"signature": "val interner =", "body": "Interner.createStringInterner()<EOL>"}
{"signature": "val perFileOutputDir =", "body": "getOutputDir(originalFile, testGroupOutputDirForPerFileCompilation, stopFile)<EOL>"}
{"signature": "val annotationCall =", "body": "IrConstructorCallImpl.fromSymbolOwner(<EOL>"}
{"signature": "if (classValueReceiver && explicitReceiver is QualifierReceiver) {", "body": "<EOL><INDENT><INDENT>val classValue = explicitReceiver.classValueReceiverWithSmartCastInfo ?: return withoutClassValueProcessor<EOL><INDENT><INDENT>return PrioritizedCompositeScopeTowerProcessor(<EOL><INDENT><INDENT><INDENT>withoutClassValueProcessor,<EOL><INDENT><INDENT><INDENT>ExplicitReceiverScopeTowerProcessor(scopeTower, context, classValue, collectCandidates)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val irAdapteeCall =", "body": "IrCallImpl(<EOL>"}
{"signature": "val rootLoop =", "body": "IrDoWhileLoopImpl(<EOL>"}
{"signature": "if (expression.symbol.owner in variablesSet) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>used = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val approved =", "body": "mutableSetOf<OperationStatement>()<EOL>"}
{"signature": "val projectionKinds =", "body": "this.map { it.projectionKind }.toSet()<EOL>"}
{"signature": "val union =", "body": "alloc<Packed>()<EOL>"}
{"signature": "val CLASSLOADERS_CACHE_DISABLE_FOR_PROCESSORS =", "body": "<STR_LIT><EOL>"}
{"signature": "val valueSetterParameter =", "body": "setter.valueParameters.first()<EOL>"}
{"signature": "fun valuesNullable(map: MutableMap<Int, String?>) {", "body": "<EOL><INDENT>map.<caret>putIfAbsent(<NUM_LIT>, null)<EOL>}"}
{"signature": "if (isBuilderInferenceCall(valueParameterDescriptor, valueArgument, languageVersionSettings)) {", "body": "<EOL><INDENT><INDENT><INDENT>builderInferenceSupport.analyzeBuilderInferenceCall(functionLiteral, valueArgument, constraintSystem, context, effectiveExpectedType)<EOL><INDENT><INDENT>}"}
{"signature": "when (state.getLowerCapturedTypePolicy(subType, superTypeCaptured)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CHECK_ONLY_LOWER -> return isSubtypeOf(state, subType, nullableLowerType)<EOL><INDENT><INDENT><INDENT><INDENT>CHECK_SUBTYPE_AND_LOWER -> if (isSubtypeOf(state, subType, nullableLowerType)) return true<EOL><INDENT><INDENT><INDENT><INDENT>SKIP_LOWER -> Unit<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val callName =", "body": "getArrayFunctionCallName(context.expectedType)<EOL>"}
{"signature": "for (i in <NUM_LIT>.N) {", "body": "<EOL><INDENT><INDENT>if (i%<NUM_LIT> == <NUM_LIT>) continue<EOL><INDENT><INDENT>sum += i<EOL><INDENT>}"}
{"signature": "if (descriptor.kind.isSingleton || descriptor.kind.isEnumClass) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (elementLoopComponent != null) {", "body": "<EOL><INDENT><INDENT><INDENT>StackValue.local(elementLoopComponent.parameterVar, elementLoopComponent.parameterType)<EOL><INDENT><INDENT><INDENT><INDENT>.store(StackValue.onStack(AsmTypes.OBJECT_TYPE), v)<EOL><INDENT><INDENT>}"}
{"signature": "fun testDerivedWithKey(context: CoroutineContext, element: CoroutineContext.Element) {", "body": "<EOL><INDENT><INDENT>val ctx = context + element<EOL><INDENT><INDENT>assertEquals(context.size + <NUM_LIT>, ctx.size)<EOL><INDENT><INDENT>assertSame(element, ctx[Base]!!)<EOL><INDENT><INDENT>assertSame(element, ctx[DerivedWithKey]!!)<EOL><INDENT><INDENT>assertEquals(context, ctx.minusKey(Base))<EOL><INDENT><INDENT>assertEquals(context, ctx.minusKey(DerivedWithKey))<EOL><INDENT>}"}
{"signature": "val det =", "body": "<STR_LIT><EOL>"}
{"signature": "val anotherResult =", "body": "map.replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val kTrue =", "body": "llvm.int<NUM_LIT>(true)<EOL>"}
{"signature": "package can still get one:<EOL>.", "body": ""}
{"signature": "fun foo(block: (Continuation<Unit>) -> Any?) {", "body": "<EOL><INDENT>block as (suspend () -> Unit)<EOL>}"}
{"signature": "val VALUES =", "body": "arrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>).toList()<EOL>"}
{"signature": "val upperResult =", "body": "upperBound.enhanceInflexible(<EOL>"}
{"signature": "fun setFinalizersDoneTime(value: Long) {", "body": "<EOL><INDENT><INDENT>postGcCleanupTimeNs = value<EOL><INDENT>}"}
{"signature": "if (newReportingStrategy is CollectWarningInformationForInheritedMembersStrategy) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>newReportingStrategy.doReportErrors()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isUrlSafe) {", "body": "//<INDENT><INDENT>java.util.Base<NUM_LIT>getUrlEncoder()//<INDENT>}"}
{"signature": "val aOne =", "body": "A(<NUM_LIT>U, -<NUM_LIT>)<EOL>"}
{"signature": "if (mappedPackages.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>val symbolBasedPackage = MappedSymbolBasedPackage(FqName(fqName), mappedPackages, this)<EOL><INDENT><INDENT><INDENT>symbolBasedPackagesCache[fqName] = symbolBasedPackage<EOL><INDENT><INDENT><INDENT>return symbolBasedPackage<EOL><INDENT><INDENT>}"}
{"signature": "val isStableOperator =", "body": "fqName.topLevelName() == <STR_LIT> ||<EOL>"}
{"signature": "val serializerClassSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>property.serializableWith(compilerContext)<EOL>"}
{"signature": "fun testParserAcceptsSpecialSymbols() {", "body": "<EOL><INDENT><INDENT>val parser = SimpleExternalDependenciesResolverOptionsParser<EOL><INDENT><INDENT>val options = parser(<STR_LIT>).valueOrThrow()<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitGetEnumValue(expression: IrGetEnumValue) {", "body": "<EOL><INDENT><INDENT>val classifier = expression.type.classOrNull ?: return<EOL><INDENT><INDENT>print(classifier.owner.name)<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>print(expression.symbol.owner.name)<EOL><INDENT>}"}
{"signature": "fun test(x: X) {", "body": "<EOL><INDENT>val interface_as_fun = x.<!RESOLUTION_TO_CLASSIFIER!>A<!>()<EOL><INDENT>val interface_as_val = x.<!NESTED_CLASS_ACCESSED_VIA_INSTANCE_REFERENCE, NO_COMPANION_OBJECT!>A<!><EOL><EOL><INDENT>val object_as_fun = x.<!RESOLUTION_TO_CLASSIFIER!>B<!>()<EOL><INDENT>val class_as_val = x.<!NESTED_CLASS_ACCESSED_VIA_INSTANCE_REFERENCE, NO_COMPANION_OBJECT!>C<!><EOL>}"}
{"signature": "val extraArguments =", "body": "getExtraArguments(compileArguments)<EOL>"}
{"signature": "if (facadeInternalName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addClassWithJvmPackageNameMultifileFacadeShortNameId(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>getMultifileFacadeShortNameId(facadeInternalName, facadeNameToId)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (f.toInt() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun x(x: A<NUM_LIT><A<NUM_LIT>, A<NUM_LIT>>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>class Triple<T, R, M><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias B<NUM_LIT> = String<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias B<NUM_LIT> = Long<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x(x: Triple<B<NUM_LIT>, String, B<NUM_LIT>>) {}"}
{"signature": "val charSequenceBuilders =", "body": "listOf(::createString, ::createStringBuilder)<EOL>"}
{"signature": "val contextSession =", "body": "getSession(module.contextModule, preferBinary = false)<EOL>"}
{"signature": "if (llvm.tlsCount > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val memory = function.param(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>call(llvm.addTLSRecord, listOf(memory, llvm.tlsKey, llvm.int<NUM_LIT>(llvm.tlsCount)))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (getter != null) {", "body": "<EOL><INDENT><INDENT>result.add(createSymbolLightAccessorMethod(getter))<EOL><INDENT>}"}
{"signature": "fun noGenerics_InterfaceWithFun() {", "body": "}<EOL><EOL><INDENT>fun withOuterGeneric_InterfaceWithFun(): T {}"}
{"signature": "package <STR_LIT>;\")<EOL>.", "body": ""}
{"signature": "val projectEnvironment =", "body": "context.environment.toAbstractProjectEnvironment()<EOL>"}
{"signature": "val exportedTag =", "body": "statement.exportedTag<EOL>"}
{"signature": "val localFunctionCache =", "body": "mutableMapOf<JsFunction, JsFunction>()<EOL>"}
{"signature": "fun nativeUtilReturns<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, libNativePlatformUtil().toInt())<EOL><INDENT>}"}
{"signature": "for (file in stubFilesAfterFirstBuild.keys) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val fileContentsAfterFirstBuild = stubFilesAfterFirstBuild[file]<EOL><INDENT><INDENT><INDENT><INDENT>val fileContentsAfterSecondBuild = stubFilesAfterSecondBuild[file]<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(fileContentsAfterFirstBuild, fileContentsAfterSecondBuild)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val PER_FILE_CACHE_IR_LEVEL_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val callInJvm =", "body": "ktFileInJvm.findDescendantOfType<KtCallExpression>()!!<EOL>"}
{"signature": "fun checkMultifileClassPart() {", "body": "<EOL><INDENT>val klass = Class.forName(<STR_LIT>).kotlin<EOL><INDENT>assertEquals(<STR_LIT>, klass.simpleName)<EOL><INDENT>assertEquals(<STR_LIT>, klass.qualifiedName)<EOL><INDENT>check(klass)<EOL>}"}
{"signature": "if (supertype.isMarkedNullable || subtype.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>return isCastErased(TypeUtils.makeNotNullable(supertype), TypeUtils.makeNotNullable(subtype), typeChecker)<EOL><INDENT><INDENT>}"}
{"signature": "val originalCallee =", "body": "unwrappedExplicitReceiver.calleeReference.safeAs<FirNamedReference>() ?: return emptyList()<EOL>"}
{"signature": "val basicCallContext =", "body": "functionContext.basicCallContext<EOL>"}
{"signature": "val headerLines =", "body": "build()<EOL>"}
{"signature": "val unstableSmartCasts =", "body": "bindingContext[BindingContext.UNSTABLE_SMARTCAST, expression]<EOL>"}
{"signature": "val outer =", "body": "Outer.Inner<EOL>"}
{"signature": "val CALL_INDIRECT =", "body": "<STR_LIT><EOL>"}
{"signature": "val fooMethods =", "body": "Impl::class.java.getMethods().filter { it.getName() == <STR_LIT> }<EOL>"}
{"signature": "val delegate =", "body": "Delegate(this)<EOL>"}
{"signature": "val globalInitializers =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>moduleDFG.symbolTable.functionMap.values.filter { it.isStaticFieldInitializer } +<EOL>"}
{"signature": "val nestedStep =", "body": "progression.step<EOL>"}
{"signature": "fun coerceInComparable() {", "body": "<EOL><INDENT><INDENT>val workingDays = DayOfWeek.MONDAY..DayOfWeek.FRIDAY<EOL><INDENT><INDENT>assertPrints(DayOfWeek.WEDNESDAY.coerceIn(workingDays), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(DayOfWeek.SATURDAY.coerceIn(workingDays), <STR_LIT>)<EOL><EOL><INDENT><INDENT>assertPrints(DayOfWeek.FRIDAY.coerceIn(DayOfWeek.SATURDAY, DayOfWeek.SUNDAY), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val ktDelegateExpression =", "body": "ktDelegate.expression!!<EOL>"}
{"signature": "val topLevelClassifierNamesByPackage =", "body": "<EOL><INDENT><INDENT>session.firCachesFactory.createCache(::computeTopLevelClassifierNames)<EOL>"}
{"signature": "if (continuationDescriptor != null) {", "body": "<EOL><INDENT><INDENT>val jsParameter = JsParameter(getNameForDescriptor(continuationDescriptor))<EOL><INDENT><INDENT>targetList += jsParameter<EOL><INDENT><INDENT>aliases[continuationDescriptor] = JsAstUtils.stateMachineReceiver()<EOL><INDENT>}"}
{"signature": "fun check(condition: Boolean) {", "body": "}<EOL><EOL>interface Foo {<EOL><INDENT>fun process(): Boolean<EOL>}"}
{"signature": "fun test(text: String) {", "body": "<EOL><INDENT><caret_context>consume(text)<EOL>}"}
{"signature": "var fx =", "body": "<NUM_LIT><EOL>"}
{"signature": "val xSafeCallCastExplicitType =", "body": "t<!UNNECESSARY_SAFE_CALL!>?.<!>findViewById<X>(<NUM_LIT>) as X<EOL>"}
{"signature": "fun applyForDirAndJar(name: String, vararg entries: Entry, block: (File) -> Unit) {", "body": "<EOL><INDENT><INDENT>val zip = writeJar(<STR_LIT>, *entries)<EOL><INDENT><INDENT>block(zip)<EOL><EOL><INDENT><INDENT>val dir = writeDir(name, *entries)<EOL><INDENT><INDENT>block(dir)<EOL><INDENT>}"}
{"signature": "val globalPatch =", "body": "nameToGlobalPatch[name]<EOL>"}
{"signature": "val JVM =", "body": "<STR_LIT><EOL>"}
{"signature": "if (my == null) {", "body": "<EOL><INDENT><INDENT>my<!UNSAFE_CALL!>.<!>foo()<EOL><INDENT>}"}
{"signature": "val newInsn =", "body": "uninitializedValue.newInsn<EOL>"}
{"signature": "val variableType =", "body": "variable.resolvedCall.candidateDescriptor.returnType<EOL>"}
{"signature": "val bigLongConstCopy =", "body": "bigLongConst<EOL>"}
{"signature": "for(i in <NUM_LIT>.argumentCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getArgument(i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> downTo it) {", "body": "sb.append(i) }"}
{"signature": "fun bar(l: () -> Unit) {", "body": "l() }"}
{"signature": "if (a is B?) {", "body": "<EOL><INDENT><INDENT><INDENT>a!!.foo()<EOL><INDENT><INDENT>}"}
{"signature": "val metricsMap =", "body": "buildMetrics.buildPerformanceMetrics.asMap()<EOL>"}
{"signature": "for (n in <NUM_LIT> * UShort.SIZE_BITS..<NUM_LIT> * UShort.SIZE_BITS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val rl = value.rotateLeft(n)<EOL><INDENT><INDENT><INDENT><INDENT>val rr = value.rotateRight(-n)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rl, rr)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rl, value.rotateLeft(n % UShort.SIZE_BITS))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rr, value.rotateRight((-n) % UShort.SIZE_BITS))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, value.rotateLeft(n).rotateLeft(-n))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, value.rotateRight(n).rotateRight(-n))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var javaClassToIrClass =", "body": "mutableMapOf<Class<*>, IrClass>()<EOL>"}
{"signature": "if (!annotationMatchingService.isAnnotated(receiverClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val requestHref =", "body": "<STR_LIT><EOL>"}
{"signature": "if (c is C? && d is D?) {", "body": "<EOL><INDENT><INDENT>c == d<EOL><INDENT><INDENT>c === d<EOL><INDENT>}"}
{"signature": "fun extractSignatureFromSymbol(symbolId: Long, isPrivate: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>val signatureId = BinarySymbolData.decode(symbolId).signatureId<EOL><INDENT><INDENT><INDENT>val signature = signatureDeserializer.deserializeIdSignature(signatureId)<EOL><INDENT><INDENT><INDENT>ownDeclarationSignatures[signature] = !isPrivate<EOL><INDENT><INDENT>}"}
{"signature": "val importKind =", "body": "matchedCallables.minOfOrNull { it.importKind } ?: importKindFromOption ?: return null<EOL>"}
{"signature": "val dependencyBuildTarget =", "body": "kotlinContext.targetsBinding[ModuleBuildTarget(module, isTests)]<EOL>"}
{"signature": "fun indexOfChar() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <STR_LIT>.indexOf('e', <NUM_LIT>))<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <STR_LIT>.indexOf('a', <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <STR_LIT>.indexOf('a', <NUM_LIT>))<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <STR_LIT>.indexOf(<NUM_LIT>toChar(), <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <STR_LIT>.indexOf(<NUM_LIT>toChar(), <NUM_LIT>))<EOL><INDENT>}"}
{"signature": "if (isLocalFunction(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return asmTypeForAnonymousClass(<EOL><INDENT><INDENT><INDENT><INDENT>bindingContext,<EOL><INDENT><INDENT><INDENT><INDENT>(descriptor as FunctionDescriptor).unwrapInitialDescriptorForSuspendFunction()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (isCapturedFieldName(name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isolationModeStr =", "body": "getValue(<STR_LIT>)?.toLowerCaseAsciiOnly()<EOL>"}
{"signature": "package properties<EOL>.", "body": ""}
{"signature": "val klibModules =", "body": "getKlibModules(klibList, dependencyModule)<EOL>"}
{"signature": "val actualMessages =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "var currentWarmup =", "body": "<NUM_LIT><EOL>"}
{"signature": "val _commonExpressionCheckers =", "body": "ComposedExpressionCheckers(MppCheckerKind.Common)<EOL>"}
{"signature": "val twoVal =", "body": "<NUM_LIT><!EVALUATED(<STR_LIT>)!>toShort()<!><EOL>"}
{"signature": "else if (statement is JsExpressionStatement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val exportedTag = statement.exportedTag<EOL><INDENT><INDENT><INDENT><INDENT>if (exportedTag != null && !exportedTags.add(exportedTag)) continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinFiles =", "body": "KotlinTestUtils.loadToKtFiles(environment, dir.listFiles { it -> it.extension == <STR_LIT> }?.toList().orEmpty())<EOL>"}
{"signature": "val tBar =", "body": "t.bar()<EOL>"}
{"signature": "if (rebuild) {", "body": "<EOL><INDENT><INDENT>libraryCacheDir.deleteRecursively()<EOL><INDENT>}"}
{"signature": "if (sourceFiles != null) {", "body": "<EOL><INDENT><INDENT><INDENT>internalNameToSource[className.internalName] = sourceFiles<EOL><INDENT><INDENT>}"}
{"signature": "val TYPED_ARRAY_MAP =", "body": "EnumMap(mapOf(BYTE to <STR_LIT>,<EOL>"}
{"signature": "if (annotated.baseExpression is KtObjectLiteralExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.SUBCLASS_OPT_IN_INAPPLICABLE.on(entry, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun pairHashCode() {", "body": "<EOL><INDENT><INDENT>assertEquals(Pair(<NUM_LIT>, <STR_LIT>).hashCode(), p.hashCode())<EOL><INDENT><INDENT>assertNotEquals(Pair(<NUM_LIT>, <STR_LIT>).hashCode(), p.hashCode())<EOL><INDENT><INDENT>assertNotEquals(<NUM_LIT>, Pair(null, <STR_LIT>).hashCode())<EOL><INDENT><INDENT>assertNotEquals(<NUM_LIT>, Pair(<STR_LIT>, null).hashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, Pair(null, null).hashCode())<EOL><INDENT>}"}
{"signature": "val cxxMembers =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (library.language == Language.CPP && structDecl != null) collectCxxMembers(cursor, RecordType(structDecl))<EOL>"}
{"signature": "if (delegate != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>markElement(delegate)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val REQUESTED_VERSION_BY_INCOMING_DEPENDENCY_REGEX =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "fun addSpread(spreadArgument: T) {", "body": "<EOL><INDENT><INDENT>spreads[position++] = spreadArgument<EOL><INDENT>}"}
{"signature": "if (propagatedPaths.add(path)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addAlternateFlow(path, buildAlternateFlow(path, builder).freeze())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val commonizerNativeDistributionTask =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test_arrayList() {", "body": "<EOL><INDENT>val l = listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL><INDENT>val m = listOf<Int>()<EOL><INDENT>val n = l + m<EOL><INDENT>assertEquals(l, n)<EOL>}"}
{"signature": "for (psiClass in getLightClassesFromFile(ktFile)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>psiClass.accept(elementVisitor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinLibrary =", "body": "(it.getCapability(KlibModuleOrigin.CAPABILITY) as? DeserializedKlibModuleOrigin)?.library<EOL>"}
{"signature": "when(array[<NUM_LIT>]) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> array[<NUM_LIT>] += <NUM_LIT>6<EOL><INDENT><INDENT>else -> array[<NUM_LIT>] += <NUM_LIT>7<EOL><INDENT>}"}
{"signature": "if (!classSymbol.isEffectivelyExternal(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(classSymbol.source, FirJsPlainObjectsErrors.NON_EXTERNAL_DECLARATIONS_NOT_SUPPORTED, classKind, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun takesNullable(b: Buz?) {", "body": "}<EOL>fun takesNonNull(b: Buz) {}"}
{"signature": "val G_<NUM_LIT>_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "if (it.required && !testInfoElementsMap.contains(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw SpecTestValidationException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SpecTestValidationFailedReason.TESTINFO_NOT_VALID,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (annotationClass.fqNameSafe == WRITE_WITH_FQNAME) {", "body": "<EOL><INDENT><INDENT><INDENT>checkWriteWithUsage(resolvedCall, annotationEntry, context, annotationOwner)<EOL><INDENT><INDENT>}"}
{"signature": "var errorTypeExistInBranch =", "body": "false<EOL>"}
{"signature": "val classValue =", "body": "explicitReceiver.classValueReceiverWithSmartCastInfo ?: return withoutClassValueProcessor<EOL>"}
{"signature": "for ((diagnostic, start, end) in uncheckedDiagnostics) {", "body": "<EOL><INDENT><INDENT><INDENT>val range = TextRange(start, end)<EOL><INDENT><INDENT><INDENT>diagnosticsGroupedByRanges.put(range, diagnostic)<EOL><INDENT><INDENT>}"}
{"signature": "package StringBuilder<EOL>.", "body": ""}
{"signature": "val viaId =", "body": "<!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>id<!>(<!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>foo<!>()) as String<EOL>"}
{"signature": "val insn<NUM_LIT> =", "body": "insn<NUM_LIT>previous ?: continue<EOL>"}
{"signature": "val postponedSymbols =", "body": "llImplicitBodyResolveComputationSession.postponedSymbols(target)<EOL>"}
{"signature": "if (enumEntry.getBody() != null || supertypes.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>ClassTranslator.translate(enumEntry, context, enumInitializer.name, enumEntryOrdinal)<EOL><INDENT><INDENT><INDENT>enumInitializer.body.statements += JsNew(context.getInnerReference(descriptor)).source(enumEntry).makeStmt()<EOL><INDENT><INDENT>}"}
{"signature": "val x<NUM_LIT>Test =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "fun getNonDeclaredClasses(name: Name, result: MutableSet<ClassDescriptor>) {", "body": "<EOL><INDENT><INDENT>c.syntheticResolveExtension.generateSyntheticClasses(thisDescriptor, name, c, declarationProvider, result)<EOL><INDENT>}"}
{"signature": "val bridgeArguments =", "body": "mutableListOf<TypedKotlinValue>()<EOL>"}
{"signature": "val or<NUM_LIT> =", "body": "falseVal.<!EVALUATED(<STR_LIT>)!>or(falseVal)<!><EOL>"}
{"signature": "if (property.isOverriddenExported(context)) {", "body": "<EOL><INDENT><INDENT>return isOverriddenExported(context)<EOL><INDENT>}"}
{"signature": "if (values.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>DataFlowIR.Node.Variable(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>values = edges,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>type   = symbolTable.mapType(expression.type),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>kind   = DataFlowIR.VariableKind.Temporary<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val benchmarksToRun =", "body": "getBenchmarksList(filterArgs, filterRegexArgs)<EOL>"}
{"signature": "val currentProject =", "body": "it.getObject(<STR_LIT>).getPrimitive(<STR_LIT>).content<EOL>"}
{"signature": "val specNameKey =", "body": "<STR_LIT><EOL>"}
{"signature": "val subSubList =", "body": "subList.subList(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val lambdaParameters =", "body": "ArrayList<IrValueParameter>()<EOL>"}
{"signature": "if (AndroidExtensionsFeature.PARCELIZE in features) {", "body": "<EOL><INDENT><INDENT><INDENT>registerParcelExtensions(project)<EOL><INDENT><INDENT>}"}
{"signature": "val codeLineForErrorCheck =", "body": "nextCodeLine(code, lineCounter)<EOL>"}
{"signature": "val subClass =", "body": "testServices.expressionMarkerProvider.getElementOfTypeAtCaret<KtClassOrObject>(mainFile, <STR_LIT>)<EOL>"}
{"signature": "fun testPreReleaseFlagIsConsistentBetweenBootstrapAndCurrentCompiler() {", "body": "<EOL><INDENT><INDENT>val bootstrapCompiler = JarFile(PathUtil.kotlinPathsForCompiler.compilerPath)<EOL><INDENT><INDENT>val classFromBootstrapCompiler = bootstrapCompiler.getEntry(LanguageFeature::class.java.name.replace(<STR_LIT>, <STR_LIT>) + <STR_LIT>)<EOL><INDENT><INDENT>checkPreReleaseness(<EOL><INDENT><INDENT><INDENT>bootstrapCompiler.getInputStream(classFromBootstrapCompiler).readBytes(),<EOL><INDENT><INDENT><INDENT>KotlinCompilerVersion.isPreRelease()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "var currentHashCode =", "body": "cachedHashCode<EOL>"}
{"signature": "if (newMap.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>storage[key] = newMap<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fpInfConst =", "body": "<NUM_LIT>F / <NUM_LIT>F<EOL>"}
{"signature": "fun assertSourceSetsExist(androidName: String, kotlinName: String) {", "body": "<EOL><INDENT><INDENT><INDENT>val androidSourceSet = assertNotNull(android.sourceSets.findByName(androidName), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>val kotlinSourceSet = assertNotNull(kotlin.sourceSets.findByName(kotlinName), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertSame(kotlinSourceSet, androidSourceSet.kotlinSourceSet)<EOL><INDENT><INDENT>}"}
{"signature": "val deserializedBuildId =", "body": "deserialized.callMethod(<STR_LIT>)<EOL>"}
{"signature": "val longConstCopy =", "body": "longConst<EOL>"}
{"signature": "val classFinder =", "body": "createClassFinder(project)<EOL>"}
{"signature": "if (!hasComposableAnnotation()) {", "body": "<EOL><INDENT><INDENT><INDENT>annotations = annotations + IrConstructorCallImpl.fromSymbolOwner(<EOL><INDENT><INDENT><INDENT><INDENT>composableSymbol.owner.defaultType,<EOL><INDENT><INDENT><INDENT><INDENT>composableSymbol.constructors.single(),<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (entry in it.entries()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (entry.name == <STR_LIT>) manifestFound = true<EOL><INDENT><INDENT><INDENT><INDENT>if (entry.name == <STR_LIT>) irFound = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package names, and in package facades only the<EOL>.", "body": ""}
{"signature": "if (it.isFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>makeBackup(it)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package null_safety<EOL>.", "body": ""}
{"signature": "val IntrinsicConstEvaluation =", "body": "<STR_LIT>.internalId()<EOL>"}
{"signature": "val KOTLIN_MPP_RESOURCES_RESOLUTION_STRATEGY =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "fun f<NUM_LIT>(a: Any?) {", "body": "<EOL><INDENT>a as String<EOL><INDENT>checkSubtype<String>(a)<EOL>}"}
{"signature": "fun testKotlinStdLibCommon() {", "body": "<INDENT><INDENT>// KT<NUM_LIT> to avoid using a hardcoded path<INDENT><INDENT>doTestKotlinStdLibResolve(CommonPlatforms.defaultCommonPlatform, Paths.get(<STR_LIT>))<INDENT>}"}
{"signature": "val extraTest =", "body": "project.multiplatformExtension.sourceSets.create(disambiguateName(<STR_LIT>))<EOL>"}
{"signature": "val twoReceivers =", "body": "<EOL><INDENT><INDENT><INDENT>(dispatchReceiver != null || superQualifierSymbol != null) && extensionReceiver != null<EOL>"}
{"signature": "val returnTypeArgument =", "body": "type.arguments.last()<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.typeParameterCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getTypeParameter(i), new.getTypeParameter(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (element is T) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>block(element)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kFalse =", "body": "llvm.int<NUM_LIT>(false)<EOL>"}
{"signature": "fun test(wrapper: JpaSpecificationExecutor<String>, l: List<String>, l<NUM_LIT>: List<Int>) {", "body": "<EOL><INDENT>OngoingStubbing.`when`(wrapper.findAll()).thenReturn(l)<EOL><INDENT>OngoingStubbing.`when`(wrapper.findAll(), l<NUM_LIT>).thenReturn(l)<EOL>}"}
{"signature": "val GET_AND_SET<INDENT><INDENT><INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "fun after(s: String) {", "body": "<EOL><INDENT><INDENT>operationsTracer?.after(s)<EOL><INDENT>}"}
{"signature": "val kotlinParameterTypes =", "body": "jvmSignature.valueParameters<EOL>"}
{"signature": "if (!configurationName.endsWith(METADATA_CONFIGURATION_NAME_SUFFIX)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>maybeCreateDependencyScope(configurationName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var age =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (iv in (<NUM_LIT>.<NUM_LIT>).withIndex()) {", "body": "<EOL><INDENT>}"}
{"signature": "val badClasses =", "body": "linkedMapOf<Class<*>, Collection<Field>>()<EOL>"}
{"signature": "val rightVariable =", "body": "getVariableIfStable(flowFromRight, fir.rightOperand)<EOL>"}
{"signature": "val skipParameterChecking =", "body": "skipParameterCheckingInDirectives || !doLambdaInliningCheck(outputFiles, inlineInfo)<EOL>"}
{"signature": "fun accept(d: DeclarationDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>d.accept(this, null)<EOL><INDENT><INDENT>}"}
{"signature": "fun testCompanion() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, a)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, b)<EOL><INDENT>}"}
{"signature": "val lhsBinaryType =", "body": "lhs.type.computeBinaryType()<EOL>"}
{"signature": "val leadingArgs =", "body": "commonLeadingArgs.toMutableList()<EOL>"}
{"signature": "val dollar =", "body": "<STR_LIT><EOL>"}
{"signature": "val SMARTCAST =", "body": "DebugInfoDiagnosticFactory<NUM_LIT>(<STR_LIT>, Severity.INFO)<EOL>"}
{"signature": "val diff<NUM_LIT> =", "body": "nullsLast(compareBy<Item> { it.rating }.thenBy { it.name }).compare(v<NUM_LIT>, v<NUM_LIT>)<EOL>"}
{"signature": "val defaultsMap =", "body": "extractDefaultValuesFromConstructor(irClass)<EOL>"}
{"signature": "val javaFqName =", "body": "JavaToKotlinClassMap.mapKotlinToJava(FqNameUnsafe(kotlinFqName))?.asSingleFqName()?.asString() ?: kotlinFqName<EOL>"}
{"signature": "val serializers =", "body": "mutableListOf<TypeParcelerMapping>()<EOL>"}
{"signature": "val helpOutput =", "body": "argParser.makeUsage().trimIndent()<EOL>"}
{"signature": "import diff.", "body": "Base;<EOL>"}
{"signature": "val samConversionData =", "body": "performConversionBeforeSubtyping(<EOL>"}
{"signature": "val stepType =", "body": "signedType<EOL>"}
{"signature": "val EmbedBitcodeMode =", "body": "BitcodeEmbeddingModeDsl()<EOL>"}
{"signature": "val constantType =", "body": "constantValue.getType(analysisContext.resolveSession.moduleDescriptor)<EOL>"}
{"signature": "fun stubPreventBoxingOptimization(s: Int?) {", "body": "<EOL><INDENT>s<EOL>}"}
{"signature": "val identWriteMap =", "body": "hashMapOf<String, Int>()<EOL>"}
{"signature": "val kaptTaskName =", "body": "kotlinCompile.kaptGenerateStubsTaskName<EOL>"}
{"signature": "while (fir is FirTypeAlias) {", "body": "<EOL><INDENT><INDENT><INDENT>fir = fir.expandedConeType?.lookupTag?.toSymbol(session)?.fir ?: return null<EOL><INDENT><INDENT>}"}
{"signature": "val calleeParameters =", "body": "method.getValueParameters()<EOL>"}
{"signature": "val errorMessage =", "body": "renderFileReadingErrorMessage(file)<EOL>"}
{"signature": "if (scriptFile?.isScript() == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Pair(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtScriptModuleByCompilerConfiguration(project, testModule, scriptFile, testServices),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>TestModuleKind.ScriptSource,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val propertyReferenceAccess =", "body": "resolvedArgumentMapping?.keys?.toList()?.getOrNull(<NUM_LIT>) as? FirCallableReferenceAccess ?: return<EOL>"}
{"signature": "val leftResolvedType =", "body": "leftSymbol.resolvedReturnTypeRef<EOL>"}
{"signature": "val rootProjectCommonizeNativeDistributionTask =", "body": "rootProject.assertContainsTaskWithName(commonizeNativeDistributionTaskName)<EOL>"}
{"signature": "for (i in <NUM_LIT> ..> n) {", "body": "}"}
{"signature": "package list contains all packages with some Kotlin declarations inside.", "body": "<EOL>"}
{"signature": "if (body !is IrStatementContainer || body.statements.lastOrNull() !is IrReturn) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val (returnType, returnIrType) = irFunction.returnAsmAndIrTypes()<EOL><INDENT><INDENT><INDENT><INDENT>result.materializeAt(returnType, returnIrType)<EOL><INDENT><INDENT><INDENT><INDENT>mv.areturn(returnType)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (to in typeVariablesInOutputType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addPostponeArgumentsEdges(from, to)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (secondPadIndex == endIndex || source[secondPadIndex] != padSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (irClass?.isInterface == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>placedInterfaceAdapters<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!languageVersionSettings.supportsFeature(LanguageFeature.BoundCallableReferences)) {", "body": "<EOL><INDENT><INDENT><INDENT>c.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.receiverExpression!!,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageFeature.BoundCallableReferences to languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val CONCURRENT_HASH_MAP_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val uintRange =", "body": "<NUM_LIT>u..<NUM_LIT>u<EOL>"}
{"signature": "val isVararg =", "body": "clang_Cursor_isVariadic(cursor) != <NUM_LIT><EOL>"}
{"signature": "fun shrForUInt() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>u, <NUM_LIT>u shr <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>u, <NUM_LIT>u shr <NUM_LIT>)<EOL><EOL><INDENT><INDENT>assertEquals(Int.MAX_VALUE.toUInt(), UInt.MAX_VALUE shr <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(Int.MAX_VALUE.toUInt(), UInt.MAX_VALUE shr <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val callableOwner =", "body": "owner as? FirCallableDeclaration<EOL>"}
{"signature": "val sourceMapConfig =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val referencedJsClassesFromExpressions =", "body": "hashSetOf<IrClass>()<EOL>"}
{"signature": "val tempVar =", "body": "scope.createTemporaryVariable(returnValue, irType = context.irBuiltIns.anyType)<EOL>"}
{"signature": "val bal =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (x in j.arrayOfNotNull()) {", "body": "<EOL><INDENT><INDENT>use(x)<EOL><INDENT><INDENT>J.use(x)<EOL><INDENT>}"}
{"signature": "if (newA == null) {", "body": "<EOL><INDENT><INDENT><INDENT>newA = A()<EOL><INDENT><INDENT>}"}
{"signature": "fun usage(str: String) {", "body": "<EOL><INDENT><expr>str.extFun()</expr><EOL>}"}
{"signature": "val optional =", "body": "!descriptor.annotations.serialRequired && declaresDefaultValue<EOL>"}
{"signature": "if (materializeFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>metadataLibraryFile.parentFile?.mkdirs()<EOL><INDENT><INDENT><INDENT><INDENT>metadataBinary.copyTo(metadataLibraryFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allTypeParameterBounds =", "body": "LinkedHashMap<TypeVariable, TypeBoundsImpl>()<EOL>"}
{"signature": "val oldProtoData =", "body": "storage[key]?.toProtoData(className.packageFqName)<EOL>"}
{"signature": "if (declaration.isKotlinObjCClass()) {", "body": "<EOL><INDENT><INDENT><INDENT>createKotlinObjCClassDeclarations(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (internalIndex < tail) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>elementData.copyInto(elementData, internalIndex + <NUM_LIT>, internalIndex, tail)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(r: Runnable?) {", "body": "<EOL><INDENT>}"}
{"signature": "if (this is SirUnsupportedType && sirSession.unsupportedTypeStrategy == ErrorTypeStrategy.Fail) {", "body": "<EOL><INDENT><INDENT><INDENT>reportUnsupportedType()<EOL><INDENT><INDENT>}"}
{"signature": "val abiTypesSize =", "body": "input.readInt()<EOL>"}
{"signature": "val INTEGER_REGEX =", "body": "<STR_LIT>\"[<NUM_LIT><NUM_LIT>]\\d*<STR_LIT>\"<EOL>"}
{"signature": "for (j in start(<NUM_LIT>, <NUM_LIT>, continue) downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val specialLowerSigma =", "body": "'\\u<NUM_LIT>C<NUM_LIT>'<EOL>"}
{"signature": "val getObjectTypeInfo =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "val classActualizationInfo =", "body": "collector.collectClassActualizationInfo()<EOL>"}
{"signature": "val testConstructor<NUM_LIT> =", "body": "`_`<Any>()<EOL>"}
{"signature": "val signatureSerializer =", "body": "JvmSignatureSerializerImpl(stringTable)<EOL>"}
{"signature": "val defaultClasspath =", "body": "getClasspath(file, excludeNonTypeUseJetbrainsAnnotations)<EOL>"}
{"signature": "if (tag != newtag) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>imports[newtag] = import<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JsNameBinding(newtag, name)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val uniqueModuleName =", "body": "irFile.moduleDescriptor.name.asString()<EOL>"}
{"signature": "if (discardErrorReference && this is FirResolvedErrorReference) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "val occurrenceInfo =", "body": "parseOccurrenceInfo(expectedOccurrencesMatcher, backend, inlineScopesNumbersEnabled)<EOL>"}
{"signature": "val JSONP =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(state: State) {", "body": "<EOL><INDENT>test<NUM_LIT>(state)<EOL>}"}
{"signature": "import x.", "body": "*<EOL>"}
{"signature": "when (it.origin) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IrDeclarationOrigin.IR_EXTERNAL_DECLARATION_STUB -> isPropertyWithBackingFieldFromAnotherModule<EOL><INDENT><INDENT><INDENT><INDENT>else -> it.backingField != null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (d) {", "body": "}"}
{"signature": "val testFramework =", "body": "runner.also(body)<EOL>"}
{"signature": "if (descriptor.needCompanionObjectProperty(namer, mapper)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>methods += ObjCGetterForObjectInstance(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>namer.getCompanionObjectPropertySelector(descriptor),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>symbolTable.descriptorExtension.referenceClass(descriptor.companionObjectDescriptor!!)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotationParametersDefaultValues =", "body": "HashMap<MemberSignature, ConstantValue<*>>()<EOL>"}
{"signature": "val transitiveLibraries =", "body": "WasmEnvironmentConfigurator.getKlibDependencies(module, testServices, DependencyRelation.RegularDependency)<EOL>"}
{"signature": "val fileDocumentManager =", "body": "FileDocumentManager.getInstance()<EOL>"}
{"signature": "for (x in i) {", "body": "<EOL><INDENT>System.out.println(x)<EOL>  }"}
{"signature": "fun renderType(type: ConeKotlinType?) {", "body": "<EOL><INDENT><INDENT>if (type == null) return<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>typeRenderer.render(type)<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var copyFromIndex =", "body": "internalIndex(toIndex) // lower bound of range, inclusive"}
{"signature": "val fullPath =", "body": "relativeFinallyPath + successor<EOL>"}
{"signature": "if (hasReified()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + reified.hashCode()<EOL><INDENT>}"}
{"signature": "fun testNullsAsNullable<NUM_LIT>(x: NX<NUM_LIT><String>?, y: NY<NUM_LIT><Number>?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (!xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] != ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] !== ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "val yearTemplate =", "body": "<STR_LIT><EOL>"}
{"signature": "else if(x < y) {", "body": "<EOL><INDENT>}"}
{"signature": "if (session.dependencySerializationInfoProvider.useGeneratedEnumSerializer && classSymbol.isSerializableEnumWithMissingSerializer(session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>classSymbol.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirSerializationErrors.EXPLICIT_SERIALIZABLE_IS_REQUIRED,<EOL><INDENT><INDENT><INDENT><INDENT>this,<EOL><INDENT><INDENT><INDENT><INDENT>positioningStrategy = SourceElementPositioningStrategies.ENUM_MODIFIER<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun visitLogicalBinaryOperationContractExpression(<EOL><INDENT><INDENT>binaryLogicExpression: KtBinaryLogicExpression<KotlinTypeBean, Nothing?>,<EOL><INDENT><INDENT>data: Nothing?<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinContractEffectType.BOOLEAN_LOGIC.ordinal)<EOL><INDENT><INDENT>dataStream.writeBoolean(binaryLogicExpression.kind == LogicOperationKind.AND)<EOL><INDENT><INDENT>binaryLogicExpression.left.accept(this, data)<EOL><INDENT><INDENT>binaryLogicExpression.right.accept(this, data)<EOL><INDENT>}"}
{"signature": "var _oldVersion =", "body": "oldVersion<EOL>"}
{"signature": "if (callee.source?.kind != KtFakeSourceElementKind.ArrayAccessNameReference) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val modeFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val visible =", "body": "visibilityChecker.isVisible(<EOL>"}
{"signature": "val lengths =", "body": "stream.readIntArray()<EOL>"}
{"signature": "val isGivenKlibArtifact =", "body": "sourceModules.singleOrNull() is TestModule.Given<EOL>"}
{"signature": "val errorArguments =", "body": "arguments.map { TypeProjectionImpl(it as KotlinType) }<EOL>"}
{"signature": "val receiverCandidates =", "body": "resolvedCall.extensionReceiverArgumentCandidates<EOL>"}
{"signature": "fun check(c: Collection<KProperty<*>>, names: Set<String>) {", "body": "<EOL><INDENT>assertEquals(names, c.names())<EOL>}"}
{"signature": "package fooIsExtension<EOL>.", "body": ""}
{"signature": "val subprojectBuildScript =", "body": "subProject(subproject).buildGradleKts<EOL>"}
{"signature": "import C<NUM_LIT><EOL>.", "body": ""}
{"signature": "val _diagnostics =", "body": "arrayListOf<ScriptDiagnostic>()<EOL>"}
{"signature": "fun resolveConstructedTypeRefForDelegatedConstructorCall(<EOL><INDENT><INDENT>delegatedConstructorCall: FirDelegatedConstructorCall<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>delegatedConstructorCall.replaceConstructedTypeRef(delegatedConstructorCall.constructedTypeRef.transformSingle(this, null))<EOL><INDENT><INDENT>delegatedConstructorCall.transformCalleeReference(this, null)<EOL><INDENT>}"}
{"signature": "var typeAnnotations =", "body": "annotations<EOL>"}
{"signature": "val implicitReceiversParameters =", "body": "implicitReceiversParamTypes.map(::createValueParameter)<EOL>"}
{"signature": "val setterNameRef =", "body": "JsNameRef(setterName, delegateRef)<EOL>"}
{"signature": "val QUANT_PLUS_R =", "body": "QMOD_RELUCTANT or '+'.toInt()<EOL>"}
{"signature": "fun notifyIRLoweringStarted() {", "body": "<EOL><INDENT><INDENT>irLoweringStart = PerformanceCounter.currentTime()<EOL><INDENT>}"}
{"signature": "val lineInsn =", "body": "insn as LineNumberNode<EOL>"}
{"signature": "val contextualOnFileFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "var readCodePoints =", "body": "<NUM_LIT><EOL>"}
{"signature": "val constructorCapturedVars =", "body": "usageTracker.capturedDescriptors<EOL>"}
{"signature": "val fakeOverridesCount =", "body": "declarations.count { it.isFakeOverride }<EOL>"}
{"signature": "if (bases.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>bases.add(moduleSourceDir.absolutePath)<EOL><INDENT><INDENT>}"}
{"signature": "val controller =", "body": "Controller()<EOL>"}
{"signature": "val androidMain =", "body": "android.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "fun foo(x: Int, y: Any?, z: Int) {", "body": "}<EOL><EOL>fun myRun(block: () -> Unit): Any? {<EOL><INDENT>return null<EOL>}"}
{"signature": "if (target is KotlinJvmTarget) {", "body": "<EOL><INDENT><INDENT><INDENT>target.setUpMultiplatformResourcesAndAssets()<EOL><INDENT><INDENT>}"}
{"signature": "if (descriptor is PropertyDescriptor || descriptor is FunctionDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val receiverParameter = (descriptor as CallableDescriptor).extensionReceiverParameter<EOL><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return StackValue.sharedTypeForType(mapType(receiverParameter.type))<EOL><INDENT><INDENT>}"}
{"signature": "val methodTypeParameters =", "body": "method.typeParameters.map { p -> c.typeParameterResolver.resolveTypeParameter(p)!! }<EOL>"}
{"signature": "var sourceMapAnnotationPresent =", "body": "false<EOL>"}
{"signature": "else if (KDocTokens.CONTENT_TOKENS.contains(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>flushCodeBlock()<EOL><INDENT><INDENT><INDENT><INDENT>indentedCodeBlock = false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val BR_TABLE =", "body": "<STR_LIT><EOL>"}
{"signature": "val executable =", "body": "request.executableAbsolutePath<EOL>"}
{"signature": "val impactedClassMembers =", "body": "findReachableNodes(classMembers, impactedSymbolsResolver::getImpactedClassMembers)<EOL>"}
{"signature": "fun visitReference(reference: FirReference, data: MutableMap<KtElement, FirElement>) {", "body": "}<EOL><INDENT>override fun visitControlFlowGraphReference(controlFlowGraphReference: FirControlFlowGraphReference, data: MutableMap<KtElement, FirElement>) {}"}
{"signature": "fun postProcess() {", "body": "<EOL><INDENT><INDENT>delegate.postProcess()<EOL><INDENT>}"}
{"signature": "val shapeType =", "body": "argumentTypeResolver.getShapeTypeOfCallableReference(callableReference, context, false)<EOL>"}
{"signature": "val fakeOverride =", "body": "synthesizedSuperFun.copy(<EOL>"}
{"signature": "when(val $subj = x) {", "body": "$subj == <STR_LIT> -> <NUM_LIT> }"}
{"signature": "if (module.directives.contains(AbstractCompilerFacilityTest.Directives.ATTACH_DUPLICATE_STDLIB)) {", "body": "<EOL><INDENT><INDENT><INDENT>configuration.add(CLIConfigurationKeys.CONTENT_ROOTS, JvmClasspathRoot(ForTestCompileRuntime.minimalRuntimeJarForTests()))<EOL><INDENT><INDENT>}"}
{"signature": "if (expression !in tailRecursionCalls) {", "body": "<EOL><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT>}"}
{"signature": "val classicFileContent =", "body": "testDataFile.readLines()<EOL>"}
{"signature": "var enableMultiplatform =", "body": "false<EOL>"}
{"signature": "if (configured == null) {", "body": "<EOL><INDENT><INDENT><INDENT>configured = finalizeConfiguration()<EOL><INDENT><INDENT>}"}
{"signature": "val unusableClassifierInSignature =", "body": "declaration.rewriteTypesInFunction()<EOL>"}
{"signature": "fun testNullableD(foo: D?, bar: D?) {", "body": "<EOL><INDENT>if (foo != null && foo == bar) bar.d()<EOL>}"}
{"signature": "val xAny =", "body": "Any()<EOL>"}
{"signature": "val hasAssignment =", "body": "blockStack.any { it in assignments }<EOL>"}
{"signature": "for ((element, subElements) in elementSubclasses) {", "body": "<EOL><INDENT><INDENT>element.subElements = subElements<EOL><INDENT>}"}
{"signature": "val nonConstNull =", "body": "null<EOL>"}
{"signature": "for (actualSymbol in actualMemberSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>require(actualSymbol is IrSymbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>diagnosticsReporter.reportExpectActualMismatch(expectSymbol, actualSymbol, incompatibility)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptContainerMap =", "body": "mutableMapOf<FirScriptSymbol, FirFile>()<EOL>"}
{"signature": "val resultAttributes =", "body": "types.map { it.attributes }.reduce { x, y -> x.intersect(y) }<EOL>"}
{"signature": "val sortedList =", "body": "this@sortedWith.toMutableList()<EOL>"}
{"signature": "val softDeprecatedTargets =", "body": "setOf(<EOL>"}
{"signature": "val storageElementType =", "body": "type.asSigned.capitalized<EOL>"}
{"signature": "val allIntegerClasses =", "body": "signedIntegerClasses + unsignedIntegerClasses<EOL>"}
{"signature": "fun assertClassDeclarationsContain(classesDir: Path, classFqn: String, vararg expectedDeclarations: String) {", "body": "<EOL><INDENT>assertClassDeclarationsContain(classesDir, classFqn, expectedDeclarations.toSet())<EOL>}"}
{"signature": "var propertyWithAnnotations =", "body": "genericCall<SCHEME>()<EOL>"}
{"signature": "fun assertDisabled() {", "body": "<EOL><INDENT>@OptIn(kotlin.experimental.ExperimentalNativeApi::class)<EOL><INDENT>assert(false)<EOL>}"}
{"signature": "fun visitMembers(visitor: KotlinJvmBinaryClass.MemberVisitor, cachedContents: ByteArray?) {", "body": "<EOL><INDENT><INDENT>ReflectClassStructure.visitMembers(klass, visitor)<EOL><INDENT>}"}
{"signature": "val repoOccurrencesStableOrder =", "body": "repoOccurrences<EOL>"}
{"signature": "fun println(vararg objects: Any) {", "body": "<EOL><INDENT><INDENT>print(*objects)<EOL><INDENT><INDENT>printer.printlnWithNoIndent()<EOL><INDENT><INDENT>lineBeginning = true<EOL><INDENT>}"}
{"signature": "fun asNullablePrimitive(c: AsNonNullPrimitive?) {", "body": "}<EOL>fun asNullableReference(c: AsNonNullReference?) {}"}
{"signature": "if (current in descriptors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return descriptors.getValue(current)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((@A a, _)<!SYNTAX!><!>) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (disposed) {", "body": "<EOL><INDENT><INDENT><INDENT>reportInvalidResolver()<EOL><INDENT><INDENT>}"}
{"signature": "import lombok.", "body": "*;<EOL>"}
{"signature": "fun doTest(filePath: String) {", "body": "<EOL><INDENT><INDENT>val file = File(filePath)<EOL><INDENT><INDENT>val expectedText = KtTestUtil.doLoadFile(file)<EOL><INDENT><INDENT>doMultiFileTest(file, createTestFilesFromFile(file, expectedText))<EOL><INDENT>}"}
{"signature": "if (threshold > ch) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val BR_ON_CAST_FAIL =", "body": "<STR_LIT><EOL>"}
{"signature": "val compCfg =", "body": "simpleScriptCompilationConfiguration<EOL>"}
{"signature": "val videoContext =", "body": "videoStream?.openCodec(<STR_LIT>)<EOL>"}
{"signature": "if (anonInitializers.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(MangleConstant.LOCAL_DECLARATION_INDEX_PREFIX)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(anonInitializers.indexOf(declaration))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bottom() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val valueDirectives =", "body": "mutableMapOf<ValueDirective<*>, MutableList<Any>>()<EOL>"}
{"signature": "if (retries % <NUM_LIT> == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>logInfo(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (isOne(Bar.ONE) && !isOne(Bar.TWO) && Bar.ONE != Bar.TWO) {", "body": "<EOL><INDENT><INDENT>true -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "val artifact =", "body": "nonTransitiveFiles.single()<EOL>"}
{"signature": "fun test(a: A, b: B, c: C, d: D, e: E, f: F){", "body": "<EOL><INDENT>a.foo()<EOL><INDENT>a.a<EOL><INDENT>b.foo()<EOL><INDENT>b.a<EOL><INDENT>c.foo()<EOL><INDENT>d.foo()<EOL><INDENT>f.foo()<EOL>}"}
{"signature": "if (resultingNullabilityInfo === parent?.completeNullabilityInfo && resultingTypeInfo === parent.completeTypeInfo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return parent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val internalAnnotationsForResolve =", "body": "setOf(<EOL>"}
{"signature": "fun main(a: A<String>) {", "body": "<EOL><INDENT>a.size<EOL>}"}
{"signature": "if (resultValues == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resultValues = computeValues()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val symbolTableDecorator =", "body": "context.symbolTable as FragmentCompilerSymbolTableDecorator<EOL>"}
{"signature": "package thispackage<EOL>.", "body": ""}
{"signature": "val BACKING_FIELD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (varSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT>addStatement(JsIrBuilder.buildGetValue(varSymbol.symbol))<EOL><INDENT><INDENT>}"}
{"signature": "val objCNamesProtocolsPackage =", "body": "objCNamesPackage.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "for (index in fromIndex.coerceAtLeast(<NUM_LIT>)..this.lastIndex) {", "body": "<EOL><INDENT><INDENT>if (ch == get(index)) return index<EOL><INDENT>}"}
{"signature": "val sortedRandomInts =", "body": "randomInts.sorted()<EOL>"}
{"signature": "val enumClassConstructorBodyLoweringPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "if (name == wireSourceSet.jarTaskName) {", "body": "<EOL><INDENT><INDENT><INDENT>from(wireSourceSet.output, commonSourceSet.output)<EOL><INDENT><INDENT><INDENT>setupPublicJar(archiveBaseName.get())<EOL><INDENT><INDENT><INDENT>addEmbeddedRuntime()<EOL><INDENT><INDENT><INDENT>addEmbeddedRuntime(wireSourceSet.embeddedConfigurationName)<EOL><INDENT><INDENT>}"}
{"signature": "for (index in <NUM_LIT> until contextReceiverCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>putValueArgument(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>index,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitor.convertToIrExpression(statement.contextReceiverArguments[index]),<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val symbolImplementationPackageNames =", "body": "listOf(<EOL>"}
{"signature": "val javaComponentType =", "body": "arrayType.componentType<EOL>"}
{"signature": "val absolutePath =", "body": "file.virtualFile.canonicalPath ?: file.virtualFile.path<EOL>"}
{"signature": "val versionArgument =", "body": "MavenComparableVersion(<STR_LIT>)<EOL>"}
{"signature": "fun performAction(element: FirElementWithResolveState) {", "body": "<EOL><INDENT><INDENT>performResolve(element)<EOL><INDENT>}"}
{"signature": "val filteredEqualTypes =", "body": "filterTypes(inputTypes, ::isStrictSupertype)<EOL>"}
{"signature": "val feature =", "body": "LanguageFeature.fromString(name) ?: error(<STR_LIT>$name\\<STR_LIT>)<EOL>"}
{"signature": "val getValueReturnType =", "body": "getValueDescriptor.returnType<EOL>"}
{"signature": "if (version != METADATA_VERSION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return FileInfo.EMPTY<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val publicFunctionCache =", "body": "mutableMapOf<String, JsFunction>()<EOL>"}
{"signature": "val button<NUM_LIT> =", "body": "this.loginButton<EOL>"}
{"signature": "var args =", "body": "arrayOf(pathContext.url(sourceRoot.directory))<EOL>"}
{"signature": "if (it is KtBlockExpression && it.statements.size == <NUM_LIT> && it.textRange == it.statements.single().textRange) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.statements.single()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isExpression =", "body": "!aTry.type.isUnit()<EOL>"}
{"signature": "val afterCast =", "body": "model as CallUsageNodeFlameGraphModelWithTypealiasedSupertypeArgument<EOL>"}
{"signature": "val objectOutputStream =", "body": "ObjectOutputStream(outputStream)<EOL>"}
{"signature": "if (returnType.isSuspendFunctionType) {", "body": "<EOL><INDENT><INDENT>return MethodBridge.ReturnValue.Suspend<EOL><INDENT>}"}
{"signature": "val newFSet =", "body": "fSet.processSecondPass()<EOL>"}
{"signature": "val receiverParenthesized =", "body": "(<!CANNOT_INFER_PARAMETER_TYPE, NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>foo<!>()).<!UNRESOLVED_REFERENCE!>fooA<!>() as A<EOL>"}
{"signature": "val elementRenderer =", "body": "RenderIrElementVisitor()<EOL>"}
{"signature": "import <!SYNTAX!>.", "body": "a.B<!><EOL>"}
{"signature": "val lightModifierListOwner =", "body": "lightModifierList.parent<EOL>"}
{"signature": "if (sumNumbers(<NUM_LIT>) !== <NUM_LIT>) {", "body": "<EOL><INDENT>throw <STR_LIT>;<EOL>}"}
{"signature": "fun info(msg: String) {", "body": "<EOL><INDENT><INDENT>saveLogEntry(LogLevel.INFO, msg)<EOL><INDENT>}"}
{"signature": "for (annotation in descriptor.delegateField?.nonSourceAnnotations.orEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>proto.addExtensionOrNull(extension, annotationSerializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resultSubstitution =", "body": "mutableMapOf<FirTypeParameterSymbol, ConeKotlinType>()<EOL>"}
{"signature": "fun testValueInMapAppearsIfPresent() {", "body": "<EOL><INDENT><INDENT>val map = mapOf(<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT>val options = makeExternalDependenciesResolverOptions(map)<EOL><EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val classifier<NUM_LIT> =", "body": "scope<NUM_LIT>?.getContributedClassifier(name, location)<EOL>"}
{"signature": "when (packageOrClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>is PackageViewDescriptor -> packageOrClassDescriptor.memberScope.getContributedClassifier(declaredName, location)<EOL><INDENT><INDENT><INDENT>is ClassDescriptor -> packageOrClassDescriptor.unsubstitutedInnerClassesScope.getContributedClassifier(declaredName, location)<EOL><INDENT><INDENT><INDENT>else -> throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val privateConst =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (element is T && predicate(element)) {", "body": "<EOL><INDENT><INDENT><INDENT>return element<EOL><INDENT><INDENT>}"}
{"signature": "while (OK != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>inlineFunction(<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "for (artifact in artifacts) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>artifactToResolverIndex[artifact] = resolverIndex<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (approximationBounds.upper.containsConstrainingTypeWithoutProjection() && bound.kind != LOWER_BOUND) {", "body": "<EOL><INDENT><INDENT>addNewBound(approximationBounds.upper, UPPER_BOUND)<EOL><INDENT>}"}
{"signature": "fun visitEqualityOperatorCallNode(node: EqualityOperatorCallNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (!fileQualifiedName.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>parts.add(fileQualifiedName)<EOL><INDENT><INDENT>}"}
{"signature": "if (x === implicitNullableNothingProperty || false) {", "body": "break }"}
{"signature": "val callInitGlobalPossiblyLock =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "for ((index, x) in iterable.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val srcDirectory =", "body": "createTempDirectory(root, <STR_LIT>)<EOL>"}
{"signature": "fun coVerify(verifyBlock: suspend Context.() -> Unit) {", "body": "<EOL><INDENT>builder(verifyBlock)<EOL>}"}
{"signature": "if (!declaration.isExternal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>process(declaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val sam<NUM_LIT> =", "body": "roundtrip(Sam<NUM_LIT>(::plusK))<EOL>"}
{"signature": "for (i in correctTestPatterns.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFalse(<STR_LIT> + correctTestPatterns[i] + <STR_LIT> + wrongInputSecuence[i],<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Regex(correctTestPatterns[i]).matches(wrongInputSecuence[i]))<EOL><INDENT><INDENT>}"}
{"signature": "val outerDeclarations =", "body": "mutableListOf<IrDeclaration>()<EOL>"}
{"signature": "val intStep =", "body": "max(<NUM_LIT>, (this.size * step).toInt())<EOL>"}
{"signature": "val selectedModule =", "body": "resolvedDependency.selected<EOL>"}
{"signature": "val receiverSmartCasts =", "body": "expression.getImplicitReceiverSmartCast()<EOL>"}
{"signature": "val extraFile<NUM_LIT> =", "body": "SourceFile(<STR_LIT>, extra, path = path)<EOL>"}
{"signature": "val ctorSymbolPointer =", "body": "constructorSymbolPointer ?: return args<EOL>"}
{"signature": "var instantiated =", "body": "false<EOL>"}
{"signature": "fun foo(f: (Int, String) -> Unit) {", "body": "<EOL><INDENT>f<expr>(<NUM_LIT>, <STR_LIT>)</expr><EOL>}"}
{"signature": "fun report(project: Project, diagnostic: ToolingDiagnostic) {", "body": "<EOL><INDENT><INDENT>handleDiagnostic(project, diagnostic)<EOL><INDENT>}"}
{"signature": "var indexInLine =", "body": "<NUM_LIT><EOL>"}
{"signature": "val tailSize =", "body": "head.next?.remainingAll() ?: <NUM_LIT>L<EOL>"}
{"signature": "val containingDeclarationOfContainingDeclaration =", "body": "<EOL><INDENT><INDENT><INDENT>containingDeclarations.getOrNull(containingDeclarations.size - <NUM_LIT>)<EOL>"}
{"signature": "if (constCommonizationState != NonConst) {", "body": "<INDENT><INDENT><INDENT>// previous property was constant but this one is not<INDENT><INDENT><INDENT>this.constCommonizationState = NonConst<INDENT><INDENT>}"}
{"signature": "fun delay() {", "body": "<EOL>}"}
{"signature": "val rect =", "body": "sdlDisposable(<STR_LIT>,<EOL>"}
{"signature": "for (enumEntry in enumEntries) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(enumEntry.source, ABSTRACT_MEMBER_NOT_IMPLEMENTED_BY_ENUM_ENTRY, enumEntry.symbol, notImplemented, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (order?.notExpired() ?: true) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val makeConfigurationProvider =", "body": "configurationProvider?.let { { it } }<EOL>"}
{"signature": "var inBoxMethod =", "body": "false<EOL>"}
{"signature": "fun webpackConfigApplier(body: Action<KotlinWebpackConfig>) {", "body": "<EOL><INDENT><INDENT>webpackConfigAppliers.add(body)<EOL><INDENT>}"}
{"signature": "val anyToStringMethodSymbol =", "body": "context.ir.symbols.memberToString<EOL>"}
{"signature": "package apt<EOL>.", "body": ""}
{"signature": "val variantReportRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val valueFromIr =", "body": "constValueProvider?.findConstantValueFor(this)<EOL>"}
{"signature": "val topLevelAnon =", "body": "<!ANONYMOUS_OBJECTS_NOT_SUPPORTED!>@Serializable<!> object {}<EOL>"}
{"signature": "val anyArr =", "body": "atomicArrayOfNulls<Any?>(<NUM_LIT>)<EOL>"}
{"signature": "val acceptedProducerValues =", "body": "listOf(KOTLIN_METADATA, KOTLIN_API, *javaUsagesForKotlinMetadataConsumers.toTypedArray())<EOL>"}
{"signature": "fun test_<NUM_LIT>(a: A, out<NUM_LIT>: Out<NUM_LIT><A>, out<NUM_LIT>: Out<NUM_LIT><<!CONFLICTING_PROJECTION_IN_TYPEALIAS_EXPANSION!>in<!> A>, out<NUM_LIT>: Out<NUM_LIT><<!REDUNDANT_PROJECTION!>out<!> A>) {", "body": "<EOL><INDENT>out<NUM_LIT>.value().foo()<EOL><INDENT>out<NUM_LIT>.<!UNRESOLVED_REFERENCE!>value<!>().foo()<EOL><INDENT>out<NUM_LIT>.value().foo()<EOL>}"}
{"signature": "if (index != classes.indices.last) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.appendLine()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ubytes<NUM_LIT> =", "body": "subject.nextUBytes(UByteArray(size))<EOL>"}
{"signature": "val shortFloorShort =", "body": "byte.floorDiv(short)<EOL>"}
{"signature": "fun visitFunctionEnterNode(node: FunctionEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionEnterNode(node)<EOL><INDENT>}"}
{"signature": "val KOTLIN_KLIBS_KT<NUM_LIT>_WORKAROUND_ENABLED =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val ans =", "body": "C::class.constructors.map { it.annotations.single().annotationClass.java.simpleName }.sorted()<EOL>"}
{"signature": "if (isReceiver || candidateParameter == null || candidateExpectedType == null) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "val sourceMapper =", "body": "if (smapStack.isEmpty()) smap else smapStack.first().parentSmap<EOL>"}
{"signature": "if (ErrorUtils.isError(candidateDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>candidateCall.addStatus(SUCCESS)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val CLASSPATH_FILE_ID_DIGEST =", "body": "<STR_LIT><EOL>"}
{"signature": "val newPropertySymbol =", "body": "FirPropertySymbol(property.symbol.callableId)<EOL>"}
{"signature": "val genericIdx =", "body": "irClass.defaultType.arguments.indexOf(arg).let { if (it == <NUM_LIT>) null else it }<EOL>"}
{"signature": "val invertedMap =", "body": "hashMapOf<TypeConstructor, UnwrappedType>()<EOL>"}
{"signature": "if (declaration.delegateFieldSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(fieldAnnotation.source, FirErrors.VOLATILE_ON_DELEGATE, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun set(i: Int, j: Int) {", "body": "}<EOL><INDENT>operator fun set(i: Int, x: Any) { throw Exception() }"}
{"signature": "val getKotlin =", "body": "from.javaClass.getMethod(<STR_LIT>)<EOL>"}
{"signature": "fun addProtocolImport(name: String) {", "body": "<INDENT><INDENT>literalPatches += LiteralPatch(ObjCDataGenerator.classNameGenerator, name, name)<INDENT><INDENT>// So that protocol name literal wouldn't be detected as unhandled class.<INDENT>}"}
{"signature": "when (val snapshot = it.value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is AccessibleClassSnapshot -> AccessibleClassSnapshotImpl(snapshot.classAbiHash)<EOL><INDENT><INDENT><INDENT><INDENT>is InaccessibleClassSnapshot -> InaccessibleClassSnapshotImpl<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isErroneous(typeToPrint)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>printWithNoIndent(StandardNames.NON_EXISTENT_CLASS.asString())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun unsafeCall(trace: BindingTrace, type: KotlinType, isCallForImplicitInvoke: Boolean) {", "body": "<EOL><INDENT><INDENT>unexpectedError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var localAllocs =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (mode.minimizedMemberNames) {", "body": "<EOL><INDENT><INDENT><INDENT>backendContext.fieldDataCache.clear()<EOL><INDENT><INDENT><INDENT>backendContext.minimizedNameGenerator.clear()<EOL><INDENT><INDENT>}"}
{"signature": "val bitcodeToLink =", "body": "topSortedLibraries.filter { shouldContainBitcode(it) }<EOL>"}
{"signature": "val builtinsSession =", "body": "LLFirBuiltinsSessionFactory.getInstance(project).getBuiltinsSession(platform)<EOL>"}
{"signature": "val expectForActualMap =", "body": "fir.memberExpectForActual ?: mutableMapOf()<EOL>"}
{"signature": "val setValueParameters =", "body": "setValueDescriptor.valueParameters<EOL>"}
{"signature": "val noOverrides =", "body": "OverridingUtil.filterOverrides(<EOL>"}
{"signature": "for (i in <NUM_LIT> until bound) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val METHOD_INDEX_FOR_NON_ORIGIN_METHOD =", "body": "<NUM_LIT><EOL>"}
{"signature": "val packageInternalProperty =", "body": "object : MyClass() {fun invisible() {}}<EOL>"}
{"signature": "val jumpInsn =", "body": "insn as JumpInsnNode<EOL>"}
{"signature": "if (origin in currentOrigins) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>generated.add(file)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val libCacheDir =", "body": "getICCacheDir(executableName, executableProjectName).resolve(cacheFlavor).resolve(<STR_LIT>)<EOL>"}
{"signature": "val rawDescriptorName =", "body": "descriptor.name.asString()<EOL>"}
{"signature": "val supportFailingBuildOnWarning =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>GradleVersion.version(chooseWrapperVersionOrFinishTest()) >= GradleVersion.version(<STR_LIT>)<EOL>"}
{"signature": "val charSequenceTrim =", "body": "<!EVALUATED: `<NUM_LIT>`!>(<STR_LIT> as CharSequence).trim().toString()<!><EOL>"}
{"signature": "if (!checkPluginsArguments(messageCollector, useK<NUM_LIT>, pluginClasspaths, pluginOptions, pluginConfigurations)) {", "body": "<EOL><INDENT><INDENT><INDENT>return INTERNAL_ERROR<EOL><INDENT><INDENT>}"}
{"signature": "var writtenBytes =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (imask != null) {", "body": "<EOL><INDENT><INDENT><INDENT>masks.push(imask)<EOL><INDENT><INDENT><INDENT>currentSize = imask.size<EOL><INDENT><INDENT>}"}
{"signature": "val id =", "body": "wasmFragment.stringLiteralPoolId.reference(string)<EOL>"}
{"signature": "val constantMap =", "body": "ConcurrentHashMap<Function<NUM_LIT><*>, Any>()<EOL>"}
{"signature": "val actualErrors =", "body": "getMessages(BuildMessage.Kind.ERROR)<EOL>"}
{"signature": "val outputDirFile =", "body": "outputDir.asFile.get()<EOL>"}
{"signature": "if (config.makeDeclarationsHidden) {", "body": "<EOL><INDENT><INDENT><INDENT>makeVisibilityHiddenLikeLlvmInternalizePass(module)<EOL><INDENT><INDENT>}"}
{"signature": "when (typeBridge) {", "body": "<EOL><INDENT><INDENT>is ReferenceBridge -> objCReferenceToKotlin(value, resultLifetime)<EOL><INDENT><INDENT>is BlockPointerBridge -> objCBlockPointerToKotlin(value, typeBridge, resultLifetime)<EOL><INDENT><INDENT>is ValueTypeBridge -> objCToKotlin(value, typeBridge.objCValueType)<EOL><INDENT>}"}
{"signature": "val interopCreateKotlinObjectHolder =", "body": "interopFunction(<STR_LIT>)<EOL>"}
{"signature": "val canHaveAbstractMembers =", "body": "classCanHaveAbstractFakeOverride(classDescriptor)<EOL>"}
{"signature": "if (matchingPrimaryConstructorParam != null) {", "body": "<INDENT><INDENT><INDENT>// If property is a constructor parameter, check parameter default value<INDENT><INDENT><INDENT>// (serializable classes always have parameters-as-properties, so no name clash here)<INDENT><INDENT><INDENT>(matchingPrimaryConstructorParam.defaultValue != null) to hasBackingField<INDENT><INDENT>}"}
{"signature": "if (x<NUM_LIT> !== x) {", "body": "}"}
{"signature": "when (data) {", "body": "}"}
{"signature": "if (<!USELESS_IS_CHECK!>!value.isNullOrEmpty() is Boolean<!>) {", "body": "<EOL><INDENT><INDENT>value<!UNSAFE_CALL!>.<!>length<EOL><INDENT>}"}
{"signature": "val thread<NUM_LIT> =", "body": "Thread({<caret> println(<STR_LIT>) })<EOL>"}
{"signature": "val confJsWriters =", "body": "mutableListOf<(Appendable) -> Unit>()<EOL>"}
{"signature": "val newSnippet =", "body": "if (cursorAbs == <NUM_LIT>) snippet else getNewSnippet(snippet, cursorAbs)<EOL>"}
{"signature": "val _failedTests =", "body": "mutableListOf<TestCase>()<EOL>"}
{"signature": "fun visitClass(klass: FirClass, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitClass(klass)<EOL><INDENT>}"}
{"signature": "val newReflectionTarget =", "body": "expression.reflectionTarget?.run { owner.transformed ?: owner }<EOL>"}
{"signature": "val absoluteFile =", "body": "File(absolutePath)<EOL>"}
{"signature": "val parentDeclarations =", "body": "anchor.parentsOfType<KtDeclaration>(withSelf = true)<EOL>"}
{"signature": "val generatedSerializerClassId =", "body": "ClassId(SerializationPackages.internalPackageFqName, SerialEntityNames.GENERATED_SERIALIZER_CLASS)<EOL>"}
{"signature": "if (dst.isRegularFile()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(src.readBytes().contentEquals(dst.readBytes()), message)<EOL><INDENT><INDENT>}"}
{"signature": "fun ensureGenerated() {", "body": "<EOL><INDENT><INDENT>classBuilder()<EOL><INDENT>}"}
{"signature": "val stripTypeAliasDeclarationsPhase =", "body": "createFileLoweringPhase(<EOL>"}
{"signature": "val ifStmt =", "body": "(statement as? JsIf)<EOL>"}
{"signature": "val COROUTINES_INTRINSICS_PACKAGE_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun testDefaultSettings() {", "body": "<EOL><INDENT><INDENT>val settings = createMavenSettings()<EOL><INDENT><INDENT>assertNotNull(settings.localRepository)<EOL><INDENT>}"}
{"signature": "if (!psi<NUM_LIT>ir.configuration.ignoreErrors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>analysisResult.throwIfError()<EOL><INDENT><INDENT><INDENT><INDENT>AnalyzingUtils.throwExceptionOnErrors(bindingContext)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allEq =", "body": "{ _: Boolean, _: Boolean -> eq }<EOL>"}
{"signature": "for (c in s) {", "body": "<EOL><INDENT><INDENT><INDENT>val d = c - '<NUM_LIT>'<EOL><INDENT><INDENT><INDENT>if (d !in <NUM_LIT>..<NUM_LIT>) return null<EOL><INDENT><INDENT><INDENT>result = result * 1<NUM_LIT> + d<EOL><INDENT><INDENT>}"}
{"signature": "if (now.x != width - <NUM_LIT> && !field.eastWall()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>possibleSteps.add(Coordinate(now.x + <NUM_LIT>, now.y))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val IMPLICIT_RECEIVER_SMARTCAST =", "body": "<EOL><INDENT><INDENT><INDENT>DebugInfoDiagnosticFactory<NUM_LIT>(<STR_LIT>, Severity.INFO)<EOL>"}
{"signature": "val USER_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val mutableToBaseMap =", "body": "baseTypesToMutableEquivalent.entries.associateBy({ it.value }) { it.key }<EOL>"}
{"signature": "fun useFunInterfacePredicate(fn: KBoolean) {", "body": "<EOL><INDENT>fn.invoke(true)<EOL>}"}
{"signature": "val exports =", "body": "mutableListOf<WasmExport<*>>()<EOL>"}
{"signature": "val INLINE_CONST_TRACKER =", "body": "CompilerConfigurationKey.create<InlineConstTracker>(<STR_LIT>)<EOL>"}
{"signature": "if (expectTypeArgument !is FirTypeProjectionWithVariance || actualTypeArgument !is FirTypeProjectionWithVariance) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fn =", "body": "{ <STR_LIT> }<EOL>"}
{"signature": "val useNamedFromIndex =", "body": "<EOL><INDENT><INDENT><INDENT>if (firstVarargIndex != null && firstVarargIndex != parameters.lastIndex) firstVarargIndex else parameters.size<EOL>"}
{"signature": "val manInsn =", "body": "insn as MultiANewArrayInsnNode<EOL>"}
{"signature": "val additionalProducedBitcodeFiles =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "for (topLevelDeclarationIndex in fileProto.declarationIdList) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>extractSignature(declarationProto = fileReader.declaration(topLevelDeclarationIndex), isParentPrivate = false)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val argsCasted =", "body": "args.map { constPointer(it).bitcast(llvm.int<NUM_LIT>PtrType) }<EOL>"}
{"signature": "var expectedInlinesCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val anyGenerator =", "body": "MethodsFromAnyGeneratorForLowerings(context, klass, IrDeclarationOrigin.SYNTHETIC_GENERATED_SAM_IMPLEMENTATION)<EOL>"}
{"signature": "when (val candidate = module.contextModule) {", "body": "<EOL><INDENT><INDENT><INDENT>contextModule -> true<EOL><INDENT><INDENT><INDENT>is KtDanglingFileModule -> hasContextModule(candidate, contextModule)<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "if (!statisticsIsEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nameIndex =", "body": "name?.let(this::getNameIndex) ?: <NUM_LIT><EOL>"}
{"signature": "if (companionObject.name == CREATOR_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "fun useCheckers(checkers: DeclarationCheckers) {", "body": "<EOL><INDENT><INDENT>session.checkersComponent.register(checkers)<EOL><INDENT>}"}
{"signature": "if (calleeReference.isError()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>errorReferences++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println((calleeReference as FirDiagnosticHolder).diagnostic.reason)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lOriginal =", "body": "l<EOL>"}
{"signature": "val readCount =", "body": "if (writeHoldCount == <NUM_LIT>) readHoldCount else <NUM_LIT><EOL>"}
{"signature": "val boxFunctions =", "body": "DefaultDelegateFactory.newDeclarationToDeclarationMapping<IrClass, IrSimpleFunction>()<EOL>"}
{"signature": "val isSingleUnderscoreAllowed =", "body": "declaration is FirAnonymousFunction || declaration is FirPropertyAccessor<EOL>"}
{"signature": "val strField =", "body": "it<EOL>"}
{"signature": "val DEFAULT_SOCKET_CONNECT_ATTEMPTS =", "body": "<NUM_LIT><EOL>"}
{"signature": "val actualizerVisitor =", "body": "ActualizerVisitor(symbolRemapper)<EOL>"}
{"signature": "fun visitProperty(property: FirProperty, data: MutableMap<KtElement, FirElement>) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "if (property.isExported(context) || property.getJsName() != null || property.isOverriddenExternal()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.intrinsics.jsPrototypeOfSymbol.owner.enqueue(irFunction, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>context.intrinsics.jsDefinePropertySymbol.owner.enqueue(irFunction, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var expectActualClasses =", "body": "false<EOL>"}
{"signature": "if (declaration.hasExplicitBackingField) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportError(declaration.source, <STR_LIT>, context)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in (<NUM_LIT>u..<NUM_LIT>u).reversed() step <NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "val paramAnnsList<NUM_LIT> =", "body": "parameterAnnotationsProperty.get(method<NUM_LIT>)?.toList().orEmpty()<EOL>"}
{"signature": "fun testIncorrectRemoveSignature() {", "body": "<EOL><INDENT><INDENT>compileKotlin(<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir,<EOL><INDENT><INDENT><INDENT>listOf(),<EOL><INDENT><INDENT><INDENT>additionalSources = listOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val whileLoop =", "body": "statements[<NUM_LIT>] as? FirWhileLoop ?: return<EOL>"}
{"signature": "val expectedAlias =", "body": "mainModule.testModule.directives[Directives.TYPE_ALIAS].joinToString(<STR_LIT>)<EOL>"}
{"signature": "val receiverArgument =", "body": "candidateCall.extensionReceiver<EOL>"}
{"signature": "val ideaTcsReflections =", "body": "Reflections(ideaTcsPackage, AllClassScanner, Scanners.SubTypes, Scanners.TypesAnnotated)<EOL>"}
{"signature": "val progression =", "body": "P<EOL>"}
{"signature": "for (kotlinErrorPath in kotlinErrorPaths) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertDirectoryDoesNotExist(kotlinErrorPath)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val anonymousClass =", "body": "expression.statements.firstOrNull()<EOL>"}
{"signature": "if (flexibleType.isMutabilityFlexible()) {", "body": "<EOL><INDENT><INDENT><INDENT>irAnnotations.addIfNotNull(extensions.generateFlexibleMutabilityAnnotationCall())<EOL><INDENT><INDENT>}"}
{"signature": "val expectedNormalized =", "body": "expectedFile.readText().normalizeSeparators()<EOL>"}
{"signature": "fun appendSuperClass() {", "body": "<EOL><INDENT><INDENT><INDENT>if (superClass != null) append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>formatGenerics(this, superClassGenerics)<EOL><INDENT><INDENT>}"}
{"signature": "if (obj !== value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (parallel) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val topLevelTypeAliases =", "body": "mutableListOf<KmTypeAlias>()<EOL>"}
{"signature": "val objectsWithPureInitialization =", "body": "DefaultDelegateFactory.newDeclarationToValueMapping<IrClass, Boolean>()<EOL>"}
{"signature": "val enhancedExpectedType =", "body": "substitutor.substituteOrNull(expectedType)<EOL>"}
{"signature": "fun processEqNull(flow: MutableFlow, expression: FirExpression, operand: FirExpression, isEq: Boolean) {", "body": "<EOL><INDENT><INDENT>val operandVariable = getOrCreateVariableIfRealAndStable(flow, operand) ?: return<EOL><INDENT><INDENT>val expressionVariable = variableStorage.createSynthetic(expression)<EOL><INDENT><INDENT>flow.addImplication((expressionVariable eq isEq) implies (operandVariable eq null))<EOL><INDENT><INDENT>flow.addImplication((expressionVariable eq !isEq) implies (operandVariable notEq null))<EOL><INDENT>}"}
{"signature": "val originalSubstitution =", "body": "createSubstitutionForScope(symbol.fir.typeParameters, type, useSiteSession)<EOL>"}
{"signature": "if (objCName.exact && (declaration !is FirClass || declaration.classKind == ClassKind.ENUM_ENTRY)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotationSource, INAPPLICABLE_EXACT_OBJC_NAME, context)<EOL><INDENT><INDENT>}"}
{"signature": "val forBinaryCompatibility =", "body": "Deprecation(<STR_LIT>, level = DeprecationLevel.HIDDEN)<EOL>"}
{"signature": "val inInlineFunctionScope =", "body": "allScopes.any { scope -> (scope.irElement as? IrFunction)?.isInline ?: false }<EOL>"}
{"signature": "if (!parameterFromSupertype.returnTypeRef.coneType.lowerBoundIfFlexible().isAny) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>allParametersAreAny = false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_OVERRIDE_USER_VALUES =", "body": "<STR_LIT><EOL>"}
{"signature": "val constProperty =", "body": "<NUM_LIT><EOL>"}
{"signature": "val DEFAULT_CALL_CHECKERS =", "body": "listOf(<EOL>"}
{"signature": "val rightNode =", "body": "if (rightArgument.type.needsMfvcFlattening()) replacements.getRootMfvcNodeOrNull(rightClass) else null<EOL>"}
{"signature": "if (file.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@run file.readText()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when(this) {", "body": "<EOL><INDENT><INDENT>is Leaf  -> this.x<EOL><INDENT><INDENT>is Node  -> this.left.max()<EOL><INDENT><INDENT>else -> <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun visitLoop(loop: IrLoop) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Give all loops unique labels so that we can generate unambiguous instructions for non-local<INDENT><INDENT><INDENT><INDENT>// `break`/`continue` statements.<INDENT><INDENT><INDENT><INDENT>loop.label = stack.joinToString(<STR_LIT>, postfix = (++counter).toString())<INDENT><INDENT><INDENT><INDENT>super.visitLoop(loop)<INDENT><INDENT><INDENT>}"}
{"signature": "if (SystemInfoRt.isFileSystemCaseSensitive) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (incrementalCompilationOptions.classpathChanges is ClasspathChanges.ClasspathSnapshotEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>EmptyModulesApiHistory<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> downTo <NUM_LIT> step it) {", "body": "sb.append(i) }"}
{"signature": "val tr<NUM_LIT> =", "body": "if (true) tr else createTestResult()<EOL>"}
{"signature": "val protocolName =", "body": "namer.getClassOrProtocolName(it).objCName<EOL>"}
{"signature": "if (count() == <NUM_LIT> || totalNumber == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT>.<NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val reference =", "body": "expression?.let { getReference(it) } ?: return null<EOL>"}
{"signature": "val endPosition =", "body": "position()?.end<EOL>"}
{"signature": "fun throwIfNotWriteable(writeable: Boolean, name: String) {", "body": "<EOL><INDENT><INDENT><INDENT>if (writeable) return<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val MSG =", "body": "<STR_LIT> + <STR_LIT><EOL>"}
{"signature": "val wholeClassId =", "body": "typeRef.resolvedClassId ?: return null<EOL>"}
{"signature": "val buckets =", "body": "stringConstantToMatchedCase.keys.groupBy { it.hashCode() }<EOL>"}
{"signature": "if (target.family.isAppleFamily) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolveToolchainExecutable(target, executable)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val separatedTestCasesUnexpectedBehaviorNumber =", "body": "cases.byNumbers.count { it.value.unexpectedBehavior }<EOL>"}
{"signature": "val singleDecompositions =", "body": "intArrayOf(<EOL>"}
{"signature": "fun registerReplacement(original: IrValueDeclaration, replacement: IrValueDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>oldValueSymbol<NUM_LIT>NewValueSymbol[original.symbol] = replacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "val b<NUM_LIT> =", "body": "B(<NUM_LIT>)<EOL>"}
{"signature": "if (c.importPair != null) {", "body": "<EOL><INDENT><INDENT><INDENT>b.writeString(c.importPair.moduleName)<EOL><INDENT><INDENT><INDENT>b.writeString(c.importPair.declarationName)<EOL><INDENT><INDENT><INDENT>b.writeByte(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>appendType(c.type)<EOL><INDENT><INDENT><INDENT>b.writeVarUInt<NUM_LIT>(c.isMutable)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val zLong =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "if (path.exists(LinkOption.NOFOLLOW_LINKS)) {", "body": "<EOL><INDENT><INDENT><INDENT>yield(path)<EOL><INDENT><INDENT>}"}
{"signature": "package ${symbol.", "body": "fqName}\")<EOL>"}
{"signature": "val tempSymbol =", "body": "IrPropertySymbolImpl()<EOL>"}
{"signature": "val localEvaluator =", "body": "GenericReplEvaluator(emptyList(), Thread.currentThread().contextClassLoader,<EOL>"}
{"signature": "val firHashCode =", "body": "getHashCodeFunction(classForType)<EOL>"}
{"signature": "else if (elementGraph in data) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>element.acceptChildren(this, elementGraph.subGraphs.toSet())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val FOO_PRIVATE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (annotations.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>AssignResolutionAltererExtension.Companion.registerExtension(CliAssignPluginResolutionAltererExtension(annotations))<EOL><INDENT><INDENT><INDENT>StorageComponentContainerContributor.registerExtension(AssignmentComponentContainerContributor(annotations))<EOL><INDENT><INDENT><INDENT>FirExtensionRegistrarAdapter.registerExtension(FirAssignmentPluginExtensionRegistrar(annotations))<EOL><INDENT><INDENT>}"}
{"signature": "fun multipleMixedRefinementsFunction() {", "body": "}"}
{"signature": "import c<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "if (trueIfEqual) {", "body": "<EOL><INDENT><INDENT><INDENT>cleanupOnNullReceiver(v)<EOL><INDENT><INDENT>}"}
{"signature": "if (container.superTypeRefs.isEmpty() && !isKotlinAny) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>container.superTypeRefs += implicitAnyType<EOL><INDENT><INDENT><INDENT><INDENT>delegatedSuperTypeRef = implicitAnyType<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (metadata is MetadataSource.Script) {", "body": "<EOL><INDENT><INDENT><INDENT>extraFlags = extraFlags or JvmAnnotationNames.METADATA_SCRIPT_FLAG<EOL><INDENT><INDENT>}"}
{"signature": "val fallbackResult =", "body": "collectDesignationPathWithTreeTraversal(target)<EOL>"}
{"signature": "val parametersInfo =", "body": "method.getParametersInfo(containingClass, isInner, descriptor)<EOL>"}
{"signature": "val floatSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Float.SIZE }()<!><EOL>"}
{"signature": "val testFunctions =", "body": "mutableMapOf<String, MutableList<String>>()<EOL>"}
{"signature": "if (startElement != null && endElement != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return markRange(startElement, endElement)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val iv =", "body": "InstructionAdapter(mv)<EOL>"}
{"signature": "fun close() {", "body": "<EOL><INDENT><INDENT>client.close()<EOL><INDENT>}"}
{"signature": "val binaryenArgs =", "body": "listOf(<EOL>"}
{"signature": "if (lineResult is ReplEvalResult.Incomplete) {", "body": "<EOL><INDENT><INDENT><INDENT>WhatNextAfterOneLine.INCOMPLETE<EOL><INDENT><INDENT>}"}
{"signature": "if (serializableIrClass.modality == Modality.ABSTRACT || serializableIrClass.modality == Modality.SEALED) {", "body": "<EOL><INDENT><INDENT><INDENT>return@addFunctionBody<EOL><INDENT><INDENT>}"}
{"signature": "val assignmentLValue =", "body": "unwrappedLhs.convert()<EOL>"}
{"signature": "fun baz(v:(() -> Unit)) {", "body": "<EOL><INDENT>v()<EOL>}"}
{"signature": "if (kind.isReflectType) {", "body": "<EOL><INDENT><INDENT>FunctionTypeKind.KFunction<EOL><INDENT>}"}
{"signature": "if (loadValueFromPomXml(file.path, listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)) == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val version = loadValueFromPomXml(file.path, listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>poms.add(Pom(file.path, version))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (resultDesignation == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>path.removeLast()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val stubGeneratorForMissingClasses =", "body": "DeclarationStubGeneratorForNotFoundClasses(stubGenerator)<EOL>"}
{"signature": "val cinteropArtifact =", "body": "apiElements.artifacts.filter { artifact -> artifact.classifier == <STR_LIT> }<EOL>"}
{"signature": "while (j < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (i + j > <NUM_LIT>) break@outer<EOL><INDENT><INDENT><INDENT><INDENT>log += <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>suspendAndContinue()<EOL><INDENT><INDENT><INDENT><INDENT>j++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (cc<NUM_LIT>bits == null || cc<NUM_LIT>bits == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun prepareForGlobalCompletion() {", "body": "<INDENT><INDENT>// There's no more separation of outer/inner variables once global completion starts<INDENT><INDENT>storage.outerSystemVariablesPrefixSize = <NUM_LIT><INDENT>}"}
{"signature": "val dependencyResolver =", "body": "DependencyResolver(typeResolver)<EOL>"}
{"signature": "val _currentHolder =", "body": "CurrentHolder()<EOL>"}
{"signature": "val mainException =", "body": "closeCachesManager()<EOL>"}
{"signature": "val deviceType =", "body": "simulatorRuntime.supportedDeviceTypes.find { it.identifier == deviceId }<EOL>"}
{"signature": "val runnerProcess =", "body": "ProcessBuilder(args).redirectErrorStream(true).start()<EOL>"}
{"signature": "fun testToPath() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, pathConverter.toPath(baseDir.resolve(<STR_LIT>)))<EOL><INDENT>}"}
{"signature": "var mutable =", "body": "<STR_LIT><EOL>"}
{"signature": "val GRADLE_SHA_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val varsBefore =", "body": "variableDeclarationPerStatement[statement]<EOL>"}
{"signature": "if (builder.isEmpty() || builder[builder.lastIndex] == '\\n') {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>.repeat(indentSize * indent))<EOL><INDENT><INDENT>}"}
{"signature": "val PLATFORM_INTEGERS_SUPPORT_LIBRARY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (whenExpression.isExhaustive) {", "body": "<INDENT><INDENT><INDENT>// whenExpression.isExhaustive is checked as otherwise the constraint is checked below<INDENT><INDENT><INDENT>reportEmptyThenInExpression(whenExpression, context, reporter)<INDENT><INDENT><INDENT>return<INDENT><INDENT>}"}
{"signature": "val windows =", "body": "(if (partialWindows) indices else <NUM_LIT> until length - size + <NUM_LIT>) step step<EOL>"}
{"signature": "if (resultType == intPtrValue.type) {", "body": "<EOL><INDENT><INDENT><INDENT>intPtrValue<EOL><INDENT><INDENT>}"}
{"signature": "if (receiverInfo.shouldReportUnsafeCall) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticsHolder.addDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT>UnsafeCallError(subCallArgument, isForImplicitInvoke = receiverInfo.reportUnsafeCallAsUnsafeImplicitInvoke)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "import p<NUM_LIT>Scaffold<EOL>.", "body": ""}
{"signature": "if (first.pointed.string.toKString().contains(second.pointed.string.toKString())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while(i < <NUM_LIT>) {", "body": "<EOL><INDENT>   b[i] = i++<EOL><INDENT>}"}
{"signature": "val argumentAsFunctionExpression =", "body": "argument as? FunctionExpression<EOL>"}
{"signature": "val INAPPLICABLE_SHARED_IMMUTABLE_TOP_LEVEL =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "val SinceKotlin =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val savedTypesCache =", "body": "hashMapOf<IrClassSymbol, Set<IrClassSymbol>>()<EOL>"}
{"signature": "if (hasExplicitBackingField) {", "body": "<EOL><INDENT><INDENT>backingField<EOL><INDENT>}"}
{"signature": "if (numberClassId != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this[numberClassId] = numberClassId.shortClassName.asString().getObjCKotlinStdlibClassOrProtocolName().objCName<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun altMain() {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT> + <NUM_LIT>)<EOL><INDENT>println(<STR_LIT>)<EOL>}"}
{"signature": "if (isBackingFieldReference(variableDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reportValReassigned(expression, variableDescriptor, ctxt)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isUnnamed =", "body": "(name == <STR_LIT>) // LLVM will select the unique index and represent the global as `@idx`."}
{"signature": "val isTransformedLambda =", "body": "with(transformer) { element.hasTransformedLambda() }<EOL>"}
{"signature": "if (isScript == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isScript = result != null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((i, x) in ixs) {", "body": "<EOL><INDENT><INDENT>sb.append(<STR_LIT>)<EOL><INDENT><INDENT>arr = intArrayOf(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val irScript =", "body": "declarationStorage.getCachedIrScript(firScript) ?: error(<STR_LIT>)<EOL>"}
{"signature": "val nameHash =", "body": "input.readInt()<EOL>"}
{"signature": "if (originalArgument !is IrVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>samConvertScalarExpression(originalArgument)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (extension in CompilerConfigurationExtension.getInstances(project)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>extension.updateConfiguration(configuration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun someSuspendingFunction() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun testAnnotationWithArrayLiteral() {", "body": "<EOL><INDENT><INDENT>val annotations = annotations(<STR_LIT>, TestAnnotation::class)<EOL><INDENT><INDENT><INDENT>.valueOrThrow()<EOL><INDENT><INDENT><INDENT>.filterIsInstance(TestAnnotation::class.java)<EOL><EOL><INDENT><INDENT>assertEquals(annotations.count(), <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(annotations.first().options.toList(), listOf(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.array.size + <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>array[i] = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val jarPath =", "body": "Paths.get(jar.absolutePath)<EOL>"}
{"signature": "val compilerExcludes =", "body": "JpsJavaExtensionService.getInstance()<EOL>"}
{"signature": "val typeArgumentMap =", "body": "mutableMapOf<FirTypeParameterSymbol, ConeKotlinType>()<EOL>"}
{"signature": "var markBefore =", "body": "baseMark<EOL>"}
{"signature": "if (prev != null) {", "body": "<EOL><INDENT><INDENT><INDENT>holder = holder.minus(slice.key)<EOL><INDENT><INDENT>}"}
{"signature": "val isDataClass =", "body": "irClass != null && irClass.isData<EOL>"}
{"signature": "val fieldInsn =", "body": "cur as FieldInsnNode<EOL>"}
{"signature": "val addFive =", "body": "{ a: Int -> a + <NUM_LIT> }<EOL>"}
{"signature": "if (call is KtCallExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return call<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stubFunction =", "body": "symbol.owner<EOL>"}
{"signature": "if (added.compilationName == compilationName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>postConfigureAction?.configure(added.internal.decoratedInstance)<EOL><INDENT><INDENT><INDENT><INDENT>postConfigureAction = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isStartedImpl =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "val isAnyMethod =", "body": "callee.target.parentAsClass.isAny()<EOL>"}
{"signature": "fun bar(x: InnerBase<String>, y: Any?, z: Outer<*>.InnerBase<String>) {", "body": "<EOL><INDENT><INDENT>x as Inner<EOL><INDENT><INDENT>y as <!NO_TYPE_ARGUMENTS_ON_RHS!>Inner<!><EOL><INDENT><INDENT>z as Inner<EOL><INDENT>}"}
{"signature": "val USER_CONSENT_REQUEST =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val bufferLength =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val allTypeModifiers =", "body": "mutableListOf<Modifier>()<EOL>"}
{"signature": "val skipPrereleaseCheck =", "body": "languageVersionSettings.getFlag(AnalysisFlags.skipPrereleaseCheck)<EOL>"}
{"signature": "val packageScope =", "body": "packageOrClassDescriptor.memberScope<EOL>"}
{"signature": "val ownerTag =", "body": "this.toLookupTag()<EOL>"}
{"signature": "for (o<NUM_LIT> in <!ITERATOR_MISSING!>o<!>) {", "body": "<EOL><INDENT>}"}
{"signature": "val TEST_MODE_NAMES =", "body": "TestMode.entries.map { it.name }<EOL>"}
{"signature": "when (it.analysisApiMode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>AnalysisApiMode.Ide -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>model(it, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>AnalysisApiMode.Standalone -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>model(it, <STR_LIT>, excludeDirsRecursively = listOf(<STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val baseReceiverType =", "body": "dispatchReceiverClassTypeOrNull()<EOL>"}
{"signature": "val errorProperty =", "body": "CommonToolArguments::errors<EOL>"}
{"signature": "val gradleSourceSets =", "body": "project.sourceSets?.toList() ?: emptyList()<EOL>"}
{"signature": "val linuxX<NUM_LIT>Test =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val isolatedLock<NUM_LIT> =", "body": "IsolatedLock(isolatedClassLoader<NUM_LIT>, temporaryFolder)<EOL>"}
{"signature": "val loadPattern =", "body": "(<STR_LIT>).toRegex(RegexOption.LITERAL)<EOL>"}
{"signature": "val podspecFileName =", "body": "<STR_LIT><EOL>"}
{"signature": "val psiJavaModule =", "body": "psiFile.children.singleOrNull { it is PsiJavaModule } as? PsiJavaModule ?: return null<EOL>"}
{"signature": "fun rawStatement(statement: String) {", "body": "<EOL><INDENT><INDENT>statements.add(statement)<EOL><INDENT>}"}
{"signature": "val arrO =", "body": "arrayOf(o)<EOL>"}
{"signature": "val innerClassId =", "body": "ClassId(parentClass.packageFqName, relativeClassName.child(importedName), isLocal = false)<EOL>"}
{"signature": "val inputStream =", "body": "ByteArrayInputStream(this)<EOL>"}
{"signature": "val runtimeStringConcat =", "body": "JvmStringConcat.fromString(stringConcat)<EOL>"}
{"signature": "val qualifiedParent =", "body": "expression.getTopmostParentQualifiedExpressionForSelector()<EOL>"}
{"signature": "val nameRefBuilder =", "body": "JsAstProtoBuf.NameReference.newBuilder()<EOL>"}
{"signature": "val suffixPathSegments =", "body": "suffix.pathSegments()<EOL>"}
{"signature": "val expectedContextReceivers =", "body": "lambda.expectedType.contextReceivers()<EOL>"}
{"signature": "when (this@printContainerKeyword) {", "body": "<EOL><INDENT><INDENT><INDENT>is SirClass -> <STR_LIT><EOL><INDENT><INDENT><INDENT>is SirEnum -> <STR_LIT><EOL><INDENT><INDENT><INDENT>is SirExtension -> <STR_LIT><EOL><INDENT><INDENT><INDENT>is SirStruct -> <STR_LIT><EOL><INDENT><INDENT><INDENT>is SirModule -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val PRIVATE_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val compilationAttribute =", "body": "Attribute.of(<STR_LIT>, String::class.java)<EOL>"}
{"signature": "if (type.unwrapTypedefs() is RecordType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>BridgeTypedNativeValue(BridgedType.NATIVE_PTR, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val thisSymbol =", "body": "(expression as? IrCall)?.dispatchReceiver?.type?.classifierOrNull as? IrClassSymbol<EOL>"}
{"signature": "for (index in boundsForNestedVariable.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>generateNewBound(newBound, boundsForNestedVariable[index])<EOL><INDENT><INDENT>}"}
{"signature": "val lowBound =", "body": "codegen.generateCallReceiver(rangeCall)<EOL>"}
{"signature": "val enclosingClass<NUM_LIT> =", "body": "res<NUM_LIT>.javaClass.enclosingClass<EOL>"}
{"signature": "val packagePrivateProperty =", "body": "object : MyClass() {fun invisible() {}}<EOL>"}
{"signature": "val obj<NUM_LIT> =", "body": "array.objectAtIndex(<NUM_LIT>) as NSObjectImpl<EOL>"}
{"signature": "val sumRef =", "body": "::sum<EOL>"}
{"signature": "var errorFunctionCallTypes =", "body": "<NUM_LIT><EOL>"}
{"signature": "val cachedDependency =", "body": "context.config.cachedLibraries.getLibraryCache(library)<EOL>"}
{"signature": "for (jvmType in JvmPrimitiveType.values()) {", "body": "<EOL><INDENT><INDENT><INDENT>add(<EOL><INDENT><INDENT><INDENT><INDENT>ClassId.topLevel(jvmType.wrapperFqName),<EOL><INDENT><INDENT><INDENT><INDENT>ClassId.topLevel(StandardNames.getPrimitiveFqName(jvmType.primitiveType))<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val typeAttributesCache =", "body": "mutableMapOf<IrType, List<LlvmParameterAttribute>>()<EOL>"}
{"signature": "val MASK =", "body": "js(<STR_LIT>);<EOL>"}
{"signature": "val effectivelyEmptyConstraintSystem =", "body": "initializeCommonSystem(initialStorage)<EOL>"}
{"signature": "val cEnumVarClassGenerator =", "body": "<EOL><INDENT><INDENT><INDENT>CEnumVarClassGenerator(context, symbols)<EOL>"}
{"signature": "val referencedDeclaration =", "body": "selector.calleeReference.toResolvedCallableSymbol()?.unwrapCallRepresentative(c)?.fir<EOL>"}
{"signature": "val actualPropertyDescriptor =", "body": "property.descriptor.findActualForExpect()<EOL>"}
{"signature": "while (!(a is B)) {", "body": "<EOL>  }"}
{"signature": "import flow.", "body": "*<EOL>"}
{"signature": "val preReleaseStart =", "body": "string.indexOf('-', patchStart + <NUM_LIT>)<EOL>"}
{"signature": "for (j in <NUM_LIT> until <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>s<NUM_LIT> = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val keyValuePair =", "body": "rawValue.split('=', limit = <NUM_LIT>).takeIf { it.size == <NUM_LIT> }<EOL>"}
{"signature": "val stat =", "body": "GC.lastGCInfo<EOL>"}
{"signature": "val positionDependentApproximation =", "body": "false<EOL>"}
{"signature": "fun generateComponentFunction(irProperty: IrProperty) {", "body": "<EOL><INDENT><INDENT><INDENT>+irReturn(irGetProperty(irThis(), irProperty))<EOL><INDENT><INDENT>}"}
{"signature": "for (typeArgument in qualifier[i].typeArgumentList.typeArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(FirTypeRefSource((typeArgument as? FirTypeProjectionWithVariance)?.typeRef, typeArgument.source))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BUILTIN_STUB_VERSION =", "body": "BINARY_STUB_VERSION + <NUM_LIT><EOL>"}
{"signature": "val replIdeMode =", "body": "System.getProperty(<STR_LIT>) == <STR_LIT><EOL>"}
{"signature": "val NO_ELSE_BRANCH =", "body": "NotExhaustive(listOf(WhenMissingCase.Unknown))<EOL>"}
{"signature": "val diagnosticSeverityStats =", "body": "mutableMapOf<Int, MutableMap<Severity, Int>>()<EOL>"}
{"signature": "val abstractClass =", "body": "::<!CREATING_AN_INSTANCE_OF_ABSTRACT_CLASS!>AbstractClass<!><EOL>"}
{"signature": "val cinteropApiElements =", "body": "project.locateOrCreateCInteropApiElementsConfiguration(target)<EOL>"}
{"signature": "package level declarations, so we can safely rely on real fq name for parent<EOL>.", "body": ""}
{"signature": "if (addStdlib) {", "body": "<EOL><INDENT><INDENT><INDENT>compileClasspath.add(Path(getProject(), KotlinAntTaskUtil.runtimeJar.absolutePath))<EOL><INDENT><INDENT>}"}
{"signature": "val psi<NUM_LIT>ir =", "body": "Psi<NUM_LIT>IrTranslator(<EOL>"}
{"signature": "val ul =", "body": "<!FORBIDDEN_IDENTITY_EQUALS!>ul<NUM_LIT> === ul<NUM_LIT><!> || <!FORBIDDEN_IDENTITY_EQUALS!>ul<NUM_LIT> !== ul<NUM_LIT><!><EOL>"}
{"signature": "val argumentsSubList =", "body": "arguments.subList(index, toIndex)<EOL>"}
{"signature": "val lessFunByOperandType =", "body": "primitiveIrTypesWithComparisons.defineComparisonOperatorForEachIrType(BuiltInOperatorNames.LESS)<EOL>"}
{"signature": "val castNode =", "body": "ordinaryNode { <STR_LIT> }<EOL>"}
{"signature": "val metaFiles =", "body": "files.filter { it.name.endsWith(<STR_LIT>) }<EOL>"}
{"signature": "val cachedScriptClassRes =", "body": "runBlocking { cachedScript!!.getClass(null) }<EOL>"}
{"signature": "if (expression is KtThisExpression) {", "body": "<INDENT><INDENT><INDENT><INDENT>// this.foo() -- explicit receiver<INDENT><INDENT><INDENT><INDENT>dispatchReceiverDescriptor = context.get(BindingContext.REFERENCE_TARGET, expression.instanceReference)<INDENT><INDENT><INDENT>}"}
{"signature": "val maybeParentClass =", "body": "(ir.parent as? IrClass)?.takeIf { !it.isInterface }<EOL>"}
{"signature": "val rValueType =", "body": "rValue.getType(context.trace.bindingContext) ?: return<EOL>"}
{"signature": "var rLong =", "body": "<NUM_LIT>L..1<NUM_LIT>L<EOL>"}
{"signature": "val newAccess =", "body": "if (keepAccess) access else<EOL>"}
{"signature": "fun bar<NUM_LIT>(f :  () -> Int) {", "body": "}<EOL><EOL>infix fun String.to(dest : String) {<EOL><EOL>}"}
{"signature": "for (i in (<NUM_LIT>uL downTo <NUM_LIT>uL).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (proxySelector != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.setProxy(proxySelector.getProxy(builder.build()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun pumpEvents() {", "body": "}<EOL><EOL><INDENT>private fun launch(block: suspend Any.() -> Unit) {}"}
{"signature": "var valueParametersToCopy =", "body": "bridge.valueParameters<EOL>"}
{"signature": "fun compareConstructors(<EOL><INDENT><INDENT>constructorContext: Context,<EOL><INDENT><INDENT>constructorA: KmConstructor,<EOL><INDENT><INDENT>constructorB: KmConstructor<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>compareFlags(constructorContext, constructorA, constructorB, CONSTRUCTOR_FLAGS)<EOL><INDENT><INDENT>compareAnnotationLists(constructorContext, constructorA.annotations, constructorB.annotations)<EOL><EOL><INDENT><INDENT>compareValueParameterLists(constructorContext, constructorA.valueParameters, constructorB.valueParameters)<EOL><INDENT>}"}
{"signature": "val dispatchReceiverWithoutSmartCastType =", "body": "<EOL><INDENT><INDENT><INDENT>removeSmartCastTypeForAttemptToFitVisibility(candidate.dispatchReceiver, candidate.callInfo.session) ?: return false<EOL>"}
{"signature": "val changesCollector =", "body": "ChangesCollector()<EOL>"}
{"signature": "val lastArgType =", "body": "valueParameters.lastOrNull()?.type<EOL>"}
{"signature": "val oldBinaryAsts =", "body": "originalArtifact.icCache!!<EOL>"}
{"signature": "fun registerModuleComponents(<EOL><INDENT><INDENT>container: StorageComponentContainer,<EOL><INDENT><INDENT>platform: TargetPlatform,<EOL><INDENT><INDENT>moduleDescriptor: ModuleDescriptor<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>container.useInstance(SerializationPluginDeclarationChecker())<EOL><INDENT>}"}
{"signature": "val CONFIGURATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val loopRange =", "body": "forExpression.loopRange!!<EOL>"}
{"signature": "val actualResourcesDirectories =", "body": "androidVariantSourceSets.flatMapTo(linkedSetOf()) { it.resourcesDirectories }<EOL>"}
{"signature": "val stringArgumentsByName =", "body": "CompilerArgumentsContentProspector.getStringCompilerArgumentProperties(arguments::class)<EOL>"}
{"signature": "val equalNodes =", "body": "allNodes.filter { otherNode -> otherNode == node }<EOL>"}
{"signature": "if (thenBranch != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>branches.add(thenBranch)<EOL><INDENT><INDENT><INDENT><INDENT>generateInstructions(thenBranch)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newFnClass =", "body": "context.function(argCount + extraParams).owner<EOL>"}
{"signature": "val variantName =", "body": "compilation.name<EOL>"}
{"signature": "if (s is Sub) {", "body": "<EOL><INDENT><INDENT>s.name<EOL><INDENT><INDENT>s.name = <STR_LIT><EOL><INDENT><INDENT><!SMARTCAST_IMPOSSIBLE!>s<!>.onlyInSub<EOL><INDENT>}"}
{"signature": "val lighterASTNodeUpdater =", "body": "AtomicReferenceFieldUpdater.newUpdater(<EOL>"}
{"signature": "val currentNode =", "body": "nodesOnStack[i]<EOL>"}
{"signature": "val upperBoundType =", "body": "(userType?.let { it.stub ?: loadStubByElement(it) } as? KotlinUserTypeStubImpl)?.upperBound<EOL>"}
{"signature": "val objCSignatureOverrideClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "var rebuildingAllKotlin =", "body": "false<EOL>"}
{"signature": "val userParcelable =", "body": "UserParcelable(User(<STR_LIT>, <NUM_LIT>))<EOL>"}
{"signature": "val LEGACY_SERVICE_QUALIFIER =", "body": "<STR_LIT><EOL>"}
{"signature": "val EDGE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitLabel(label: FirLabel, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLabel(label)<EOL><INDENT>}"}
{"signature": "if (builtInsPlatform != BuiltInsPlatform.COMMON) {", "body": "<EOL><INDENT><INDENT><INDENT>manifestProperties.setProperty(KLIB_PROPERTY_BUILTINS_PLATFORM, builtInsPlatform.name)<EOL><INDENT><INDENT>}"}
{"signature": "if (propertyAccessor.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val jarFileSystem =", "body": "VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.JAR_PROTOCOL)!!<EOL>"}
{"signature": "val parameterFunctionType =", "body": "parameter.returnTypeRef.coneType<EOL>"}
{"signature": "for ((index, arg) in wrapper.valueParameters.indices zip List(expression.valueArgumentsCount, expression::getValueArgument)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>putValueArgument(index, arg?.transform(this@JvmMultiFieldValueClassLowering, null))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val callComponents =", "body": "candidate.callComponents<EOL>"}
{"signature": "val SPACES =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo(i: IStubFileElementType<*>) {", "body": "<EOL><INDENT>bar(i.getFoo())<EOL>}"}
{"signature": "val checks =", "body": "rangeChecks(rangeStart, rangeEnd, <STR_LIT>)<EOL>"}
{"signature": "fun f(a: (Int) -> Unit) {", "body": "<EOL><INDENT>a as Int.() -> Unit<EOL><EOL><INDENT>f<NUM_LIT>(a as Int.() -> Unit)<EOL>}"}
{"signature": "val logFile =", "body": "FileUtil.createTempFile(prefix, suffix)<EOL>"}
{"signature": "val dep =", "body": "addModule(<EOL>"}
{"signature": "val arraySize =", "body": "size<EOL>"}
{"signature": "if (valueParameter.isCrossinline) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val groovyBuildScripts =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val objcnamesClassesPackageName =", "body": "<STR_LIT><EOL>"}
{"signature": "val cExpr =", "body": "block(cFunctionParameters.takeLast(kotlinValues.size).map { (name, _) -> name })<EOL>"}
{"signature": "if (logger is Logger) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>GradleKotlinLogger(logger, prefix)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val memberName =", "body": "member.value<EOL>"}
{"signature": "val setOfValues =", "body": "maybeValues ?: mutableSetOf()<EOL>"}
{"signature": "fun bar(f: Int.() -> Unit) {", "body": "<EOL><INDENT><NUM_LIT>f<caret>()<EOL>}"}
{"signature": "import <!UNRESOLVED_REFERENCE!>some<!>.", "body": "<!SYNTAX!><!><EOL>"}
{"signature": "val pseudocodeElement =", "body": "instruction.owner.correspondingElement<EOL>"}
{"signature": "if (localClassDescriptorManager.insideMyClass(elementOfDeclaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>return localClassDescriptorManager.expressionTypingContext.dataFlowInfo<EOL><INDENT><INDENT>}"}
{"signature": "fun progress(@Nls message: String) {", "body": "<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>context.processMessage(ProgressMessage(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "fun invOutFinal(x: Out<Inv<out Final>>) {", "body": "}// method: OutInvKt::invOutFinal// generic signature: (LOut<LInv<+LFinal;>;>;)Vfun invIn(x: Out<Inv<in Final>>) {}"}
{"signature": "for (expr in referenceExpressions) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// skip binary set operations<INDENT><INDENT><INDENT><INDENT><INDENT>if (expr == expression && binaryExpression.operationToken in PROPERTY_SET_OPERATIONS) return false<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun recordFile(file: FirFile) {", "body": "<EOL><INDENT><INDENT>generatedFilesProvider.recordFile(file)<EOL><INDENT>}"}
{"signature": "if (method.isAlloc()) {", "body": "<EOL><INDENT><INDENT><INDENT>annotations += AnnotationStub.Deprecated.deprecatedObjCAlloc<EOL><INDENT><INDENT>}"}
{"signature": "when (obj) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is JsCallDataWithCode -> format(obj)<EOL><INDENT><INDENT><INDENT><INDENT>else -> obj.message<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val EVALUATED_CONST_TRACKER =", "body": "<EOL><INDENT><INDENT>CompilerConfigurationKey.create<EvaluatedConstTracker>(<STR_LIT>)<EOL>"}
{"signature": "val atLeast<NUM_LIT>Java =", "body": "JavaVersion.current().compareTo(JavaVersion.compose(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, false)) >= <NUM_LIT><EOL>"}
{"signature": "while (parent !is IrPackageFragment) {", "body": "<EOL><INDENT><INDENT><INDENT>irClass = parent as? IrClass<EOL><INDENT><INDENT><INDENT>if (irClass != null) break<EOL><INDENT><INDENT><INDENT>parent = (parent as IrDeclaration).parent<EOL><INDENT><INDENT>}"}
{"signature": "val ALLOW_ANY_SCRIPTS_IN_SOURCE_ROOTS =", "body": "<EOL><INDENT><INDENT>CompilerConfigurationKey.create<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "val locationInSourceCode =", "body": "file.computeLocationForOffset(element.startOffsetOfFirstDenotableIrElement())<EOL>"}
{"signature": "val jsToKotlinStringAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "fun emptyInput() {", "body": "<EOL><INDENT><INDENT>val outputs = TransformOutputsMock(tmp.newFolder())<EOL><INDENT><INDENT>transform(tmp.newFolder(<STR_LIT>), outputs)<EOL><EOL><INDENT><INDENT>val data = ClasspathEntryData.ClasspathEntrySerializer.loadFrom(outputs.createdOutputs.single())<EOL><INDENT><INDENT>assertTrue(data.classAbiHash.isEmpty())<EOL><INDENT><INDENT>assertTrue(data.classDependencies.isEmpty())<EOL><INDENT>}"}
{"signature": "val hasStrongBound =", "body": "bounds.any { it.position.isStrong() }<EOL>"}
{"signature": "val arrayInfo =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>InlineClassArrayInfo(this@JsBridgesConstruction.context, varargElement.varargElementType!!, varargElement.type)<EOL>"}
{"signature": "when (val withoutExtension = filename.removeSuffix(BuiltInSerializerProtocol.DOT_DEFAULT_EXTENSION)) {", "body": "<INDENT><INDENT><INDENT>// this is the filename used in stdlib, others should match<INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><INDENT><INDENT><INDENT>else -> withoutExtension<INDENT><INDENT>}"}
{"signature": "val BUILD_TASK_GROUP =", "body": "LifecycleBasePlugin.BUILD_GROUP<EOL>"}
{"signature": "val GaugeSpecTmsIntegrationServiceId =", "body": "ServiceId(<STR_LIT>)<EOL>"}
{"signature": "fun storeCallableReferenceContext(<EOL><INDENT><INDENT>access: FirCallableReferenceAccess,<EOL><INDENT><INDENT>context: FirTowerDataContext,<EOL><INDENT><INDENT>inferenceSession: FirInferenceSession<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>contextForCallableReferences[access] = Pair(context, inferenceSession)<EOL><INDENT>}"}
{"signature": "val removedModulesInfo =", "body": "(projectInfo.modules - projStep.order.toSet()).map { setupTestStep(projStep, it) }<EOL>"}
{"signature": "val abbreviatedType =", "body": "KotlinTypeFactory.simpleType(<EOL>"}
{"signature": "val rootMarker =", "body": "builder.mark()<EOL>"}
{"signature": "val delegationSpecifierListStub =", "body": "KotlinPlaceHolderStubImpl<KtSuperTypeList>(classOrObjectStub, KtStubElementTypes.SUPER_TYPE_LIST)<EOL>"}
{"signature": "var mc =", "body": "java.math.MathContext(<NUM_LIT>, java.math.RoundingMode.UP)<EOL>"}
{"signature": "val classBytes =", "body": "getBytes(definitionName)<EOL>"}
{"signature": "val sourceFiles =", "body": "ktFiles.map { VfsUtilCore.virtualToIoFile(it.virtualFile) }<EOL>"}
{"signature": "val TYPE_INFO_TYPE_SIMPLE_NAME_LENGTH_OFFSET =", "body": "TYPE_INFO_TYPE_PACKAGE_NAME_PRT_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "val fileTxt =", "body": "createTempFile(dir, suffix = <STR_LIT>)<EOL>"}
{"signature": "if (currentDepth != <NUM_LIT> && getElementType(element) in types) {", "body": "<EOL><INDENT><INDENT><INDENT>processChild(element)<EOL><INDENT><INDENT>}"}
{"signature": "val moduleConfiguration =", "body": "compilerConfiguration.applyModuleProperties(module, buildFile)<EOL>"}
{"signature": "val Comparable =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, value: String?) {", "body": "<EOL><INDENT><INDENT>map[thisRef to property] = value<EOL><INDENT>}"}
{"signature": "val currentReturnTypeCalculator =", "body": "components.context.returnTypeCalculator as? ReturnTypeCalculatorWithJump<EOL>"}
{"signature": "when (val container = containingDeclaration) {", "body": "<EOL><INDENT><INDENT>is DeserializedClassDescriptor -> (container.source as? KotlinJvmBinarySourceElement)?.binaryClass<EOL><INDENT><INDENT>is LazyJavaPackageFragment -> (container.source as? KotlinJvmBinaryPackageSourceElement)?.getRepresentativeBinaryClass()<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "if (resolvedCall.extensionReceiver is TransientReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>val irAdaptedReceiverParameter = irAdapterFun.valueParameters[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT>irAdapteeCall.extensionReceiver =<EOL><INDENT><INDENT><INDENT><INDENT>IrGetValueImpl(startOffset, endOffset, irAdaptedReceiverParameter.type, irAdaptedReceiverParameter.symbol)<EOL><INDENT><INDENT><INDENT>shift = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (end == charCode - <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT>// _X_ is empty -> append the letter<INDENT><INDENT><INDENT>end = charCode<INDENT><INDENT><INDENT>return true<INDENT><INDENT>}"}
{"signature": "fun test(a: Array<Int>) {", "body": "<EOL><INDENT><expr>a[<NUM_LIT>]</expr>++<EOL>}"}
{"signature": "val libJar =", "body": "libRoot.resolve(<STR_LIT>)<EOL>"}
{"signature": "val setterParameter =", "body": "ktSetter?.parameter<EOL>"}
{"signature": "val kotlinPosition =", "body": "stubLineInfo.getPositionInKotlinFile(sourceFile, targetElement.tree)<EOL>"}
{"signature": "for (p in a) {", "body": "<EOL><INDENT><INDENT>bar(<!ARGUMENT_TYPE_MISMATCH!>x<!>)<EOL><INDENT><INDENT>if (x == null) break<EOL><INDENT><INDENT>bar(x)<EOL><INDENT>}"}
{"signature": "val componentFunctionSymbol =", "body": "(fir.initializer as? FirComponentCall)?.getCalleeSymbol() ?: return null<EOL>"}
{"signature": "val scopeB =", "body": "Scope(<STR_LIT>)<EOL>"}
{"signature": "val generatedSymbolsProvider =", "body": "FirSwitchableExtensionDeclarationsSymbolProvider.createIfNeeded(this)<EOL>"}
{"signature": "when (dependency.relation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DependencyRelation.RegularDependency -> ktModule.directRegularDependencies.add(dependencyKtModule)<EOL><INDENT><INDENT><INDENT><INDENT>DependencyRelation.FriendDependency -> ktModule.directFriendDependencies.add(dependencyKtModule)<EOL><INDENT><INDENT><INDENT><INDENT>DependencyRelation.DependsOnDependency -> ktModule.directDependsOnDependencies.add(dependencyKtModule)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val year =", "body": "java.time.LocalDate.now().year.toString()<EOL>"}
{"signature": "if (relatedTypeParameters.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ErrorsJvm.WRONG_TYPE_PARAMETER_NULLABILITY_FOR_JAVA_OVERRIDE.on(declaration, relatedTypeParameters.first())<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val minusIntValue =", "body": "-intValue<EOL>"}
{"signature": "val parentContainer =", "body": "this<EOL>"}
{"signature": "if (!newIrFunction.isFakeOverride) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newIrFunction.body = newIrFunction.generateDefaultStubBody(irFunction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_DIAGNOSTIC_STACKTRACE_START =", "body": "DIAGNOSTIC_STACKTRACE_START<EOL>"}
{"signature": "fun y(a: Int) {", "body": "}<EOL><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><EOL><INDENT><INDENT><INDENT><STR_LIT> withSource <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT>class Box<T><EOL><INDENT><INDENT><INDENT><INDENT>fun x(): Box<Long> = Box<Long>()<EOL><INDENT><INDENT><INDENT><INDENT>fun y(a: Long) {}"}
{"signature": "if (clazz is IrLazyDeclarationBase) {", "body": "<EOL><INDENT><INDENT><INDENT>resolveOverridenSymbolsInLazyClass(clazz as Fir<NUM_LIT>IrLazyClass, resolver)<EOL><INDENT><INDENT>}"}
{"signature": "for (platformCollection in mutabilityMappings) {", "body": "<EOL><INDENT><INDENT><INDENT>addMapping(platformCollection)<EOL><INDENT><INDENT>}"}
{"signature": "val visitedModuleNames =", "body": "HashSet<String>()<EOL>"}
{"signature": "if (returnType.coneType.fullyExpandedType(context.session).isUnit) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.returnTypeRef.source, FirErrors.REDUNDANT_RETURN_UNIT_TYPE, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (context.inVerbosePhase || !policy.suppressWarning(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.messageCollector.report(CompilerMessageSeverity.WARNING, it.message)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mustBeDocumentedAnnotations =", "body": "mustBeDocumentedAnnotations(annotations)<EOL>"}
{"signature": "val remapper =", "body": "VariableRemapper(parameterToArgument)<EOL>"}
{"signature": "if (exp >= <NUM_LIT>x<NUM_LIT>FF) {", "body": "<INDENT><INDENT>// overflow<INDENT><INDENT>resultValue = <NUM_LIT>x<NUM_LIT>FF<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>UL<INDENT>}"}
{"signature": "for (internalName in partInternalNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>arv.visit(null, internalName)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val cirModule =", "body": "moduleContext.get<CirModule>(node) ?: return null<EOL>"}
{"signature": "val lambdaBuilder =", "body": "context.createIrBuilder(symbol)<EOL>"}
{"signature": "val initSpecialMetadata =", "body": "getSpecialInitMetadata(name)<EOL>"}
{"signature": "val AGP_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val subtype =", "body": "subCallable.returnType<EOL>"}
{"signature": "for ((i, v) in (<NUM_LIT>.array.size + <NUM_LIT> step <NUM_LIT>).withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>array[i] = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "for (s in <!ITERATOR_ON_NULLABLE!>other<!>) {", "body": "}"}
{"signature": "for ((index, leafExpression) in flattenedGetterExpressions.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(index, leafExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val signatureBeforeSubstitution =", "body": "symbol.asSignature()<EOL>"}
{"signature": "var contractMode =", "body": "true<EOL>"}
{"signature": "if (arguments.isNotEmpty()) {", "body": "<EOL><INDENT>SymbolLightLazyAnnotationParameterList(this, lazyOf(arguments))<EOL>}"}
{"signature": "val nullableIt =", "body": "it.makeNullable()<EOL>"}
{"signature": "for (part in registry.parts.values.addCompiledPartsAndSort(state)) {", "body": "<EOL><INDENT><INDENT>part.addTo(this)<EOL><INDENT>}"}
{"signature": "val TIMEOUT_SECONDS =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val I<NUM_LIT>_CLZ =", "body": "<STR_LIT><EOL>"}
{"signature": "if (boundDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return boundDiff<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nameMap =", "body": "buildNameMap(fragment)<EOL>"}
{"signature": "val declarationToStructureElement =", "body": "allStructureElements.associateBy { it.declaration.psi }<EOL>"}
{"signature": "val interfaceClass =", "body": "kotlinAsJavaSupport.getLightClass(classOrObject) ?: continue<EOL>"}
{"signature": "val platformCompilation =", "body": "sourceSet.awaitPlatformCompilations().singleOrNull()<EOL>"}
{"signature": "val COMMON_DIAGNOSTICS =", "body": "setOf(<EOL>"}
{"signature": "if (classOrObjectDeclaration != null || other.classOrObjectDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return other.classOrObjectDeclaration == classOrObjectDeclaration<EOL><INDENT><INDENT>}"}
{"signature": "val MINUS_ASSIGN =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val Fir<NUM_LIT>IrPhase =", "body": "createSimpleNamedCompilerPhase(<EOL>"}
{"signature": "val sizeFSerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelReadSizeF, symbols.parcelWriteSizeF)<EOL>"}
{"signature": "package some<NUM_LIT><EOL>.", "body": ""}
{"signature": "val getterWrapper =", "body": "KtUltraLightMethodForSourceDeclaration(<EOL>"}
{"signature": "val testCaseIssues =", "body": "cases.byNumbers.flatMap { it.value.issues!! }<EOL>"}
{"signature": "val types =", "body": "listOf(<EOL>"}
{"signature": "while (compiled != null && evaluated != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val evaluatedVal = evaluated.get()<EOL><INDENT><INDENT><INDENT>if (evaluatedVal.compiledSnippet !== compiled.get())<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>if (evaluatedVal.result.scriptClass == null)<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>compiled = compiled.previous<EOL><INDENT><INDENT><INDENT>evaluated = evaluated.previous<EOL><INDENT><INDENT>}"}
{"signature": "if (id == null) {", "body": "<INDENT><INDENT><INDENT><INDENT>// We don't compute id for typealiases and classes.<INDENT><INDENT><INDENT><INDENT>candidate is ClassDescriptor || candidate is TypeAliasDescriptor<INDENT><INDENT><INDENT>}"}
{"signature": "var xBool =", "body": "false<EOL>"}
{"signature": "val keywordWithEscapeIfNeed =", "body": "if (shouldBeEscaped) <STR_LIT> else keyword<EOL>"}
{"signature": "val labelTargetEnclosingFunc =", "body": "getEnclosingFunctionDescriptor(bindingContext, jumpTarget, skipInlineFunctions)<EOL>"}
{"signature": "if ((librariesMismatch || signaturesMismatch) && onMismatchMode == OnMismatchMode.FAIL) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun hoo() {", "body": "<EOL><INDENT><INDENT>result += <STR_LIT><EOL><INDENT>}"}
{"signature": "for (catchEnterNode in nextCatch) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addEdge(node, catchEnterNode, preferredKind = kind, propagateDeadness = false)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val devirtualizedCallSite =", "body": "virtualCallSites[expression] ?: return data<EOL>"}
{"signature": "if (containsKey(element)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this@AbstractMutableMap.remove(element)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val irSubject =", "body": "generateWhenSubject(expression)<EOL>"}
{"signature": "val childrenArray =", "body": "getChildrenArray(node).filterNotNull()<EOL>"}
{"signature": "val isNullable =", "body": "typeReference.typeElement is KtNullableType<EOL>"}
{"signature": "val actualReports =", "body": "SourcesVariantResolutionReport.parse(output, expectedReports.keys)<EOL>"}
{"signature": "fun cast(value: A<NUM_LIT>): B<NUM_LIT><EOL><INDENT>class Trivial<A<NUM_LIT> : B<NUM_LIT>, B<NUM_LIT>> : Subtype<A<NUM_LIT>, B<NUM_LIT>>() {", "body": "<EOL><INDENT><INDENT>override fun cast(value: A<NUM_LIT>): B<NUM_LIT> = value<EOL><INDENT>}"}
{"signature": "fun visitCharValue(value: CharValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.CHAR<EOL><INDENT><INDENT>data.builder.intValue = value.value.code.toLong()<EOL><INDENT>}"}
{"signature": "val outerFqName =", "body": "FqName(substrings[<NUM_LIT>].replace('/', '.'))<EOL>"}
{"signature": "fun testEqualToAnythingClass() {", "body": "<INDENT><INDENT>// Mutually recursive tail calls & broken equals<INDENT><INDENT>val rec = EqualToAnythingClassRec()<INDENT><INDENT>val result = rec.a.invoke(deepTree(<NUM_LIT>))<INDENT><INDENT>assertEquals(<NUM_LIT>, rec.nullCount)<INDENT><INDENT>assertEquals(<NUM_LIT>, result.i)<INDENT>}"}
{"signature": "if (!callToModule && callToNonModule) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>diagnosticSink.report(ErrorsJs.CALL_TO_JS_NON_MODULE_WITH_MODULE_SYSTEM.on(reportOn, normalizeDescriptor(callee)))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dispatchPoint =", "body": "expression as? IrDispatchPoint<EOL>"}
{"signature": "val hostArch =", "body": "HostManager.host.architecture<EOL>"}
{"signature": "fun updatedInferredScheme(type: InferenceFunction, scheme: Scheme) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>type.recordScheme(scheme)<EOL><INDENT><INDENT><INDENT><INDENT>type.updateScheme(scheme)<EOL><INDENT><INDENT><INDENT><INDENT>current[type] = scheme<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (clause != catches.last()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>mv.goTo(tryCatchBlockEnd)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val functionalSupertypes =", "body": "descriptor.getAllSuperClassifiers().filterIsInstance<FunctionClassDescriptor>().toList()<EOL>"}
{"signature": "val contextForQualifier =", "body": "context.replaceTraceAndCache(temporaryForQualifier)<EOL>"}
{"signature": "if (androidTargetAssetsMap[target] != null) {", "body": "<EOL><INDENT><INDENT><INDENT>target.project.reportDiagnostic(KotlinToolingDiagnostics.AssetsPublishedMoreThanOncePerTarget())<EOL><INDENT><INDENT>}"}
{"signature": "if (compilation is KotlinNativeCompilation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compilation.konanTarget.enabledOnCurrentHostForKlibCompilation(project.kotlinPropertiesProvider)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testAny(anyX: Any) {", "body": "<EOL><INDENT>assertEquals(true, anyX is Number, <STR_LIT>)<EOL><INDENT>assertEquals(true, anyX is Int, <STR_LIT>)<EOL><EOL><INDENT>assertEquals(true, anyX is Short, <STR_LIT>)<EOL><INDENT>assertEquals(true, anyX is Byte, <STR_LIT>)<EOL><INDENT>assertEquals(false, anyX is Long, <STR_LIT>)<EOL><EOL><INDENT>assertEquals(true, anyX is Double, <STR_LIT>)<EOL><INDENT>assertEquals(true, anyX is Float, <STR_LIT>)<EOL>}"}
{"signature": "fun registerProjectExtensionPoints(area: ExtensionsArea) {", "body": "<EOL><INDENT><INDENT><INDENT>CoreApplicationEnvironment.registerExtensionPoint(<EOL><INDENT><INDENT><INDENT><INDENT>area, PsiTreeChangePreprocessor.EP.name, PsiTreeChangePreprocessor::class.java<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>CoreApplicationEnvironment.registerExtensionPoint(area, PsiElementFinder.EP.name, PsiElementFinder::class.java)<EOL><EOL><INDENT><INDENT><INDENT>IdeaExtensionPoints.registerVersionSpecificProjectExtensionPoints(area)<EOL><INDENT><INDENT>}"}
{"signature": "fun visit(ref: Ref) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>nodes.add(ref)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitBinaryAndExitLeftOperandNode(node: BinaryAndExitLeftOperandNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryAndExitLeftOperandNode(node)<EOL><INDENT>}"}
{"signature": "val neg_patterns =", "body": "arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "when (realExpression?.callKind) {", "body": "<EOL><INDENT><INDENT><INDENT>FakeCallKind.ITERATOR -> TracingStrategyForIteratorCall(fakeCalleeExpression, realExpression.expressionToReportErrorsOn, call)<EOL><INDENT><INDENT><INDENT>FakeCallKind.COMPONENT -> TracingStrategyForComponentCall(<EOL><INDENT><INDENT><INDENT><INDENT>fakeCalleeExpression,<EOL><INDENT><INDENT><INDENT><INDENT>realExpression.expressionToReportErrorsOn,<EOL><INDENT><INDENT><INDENT><INDENT>name,<EOL><INDENT><INDENT><INDENT><INDENT>call<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val linksUsages =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun resumeWithException(exception: Throwable) {", "body": "<EOL><INDENT><INDENT>continuation!!.resumeWithException(exception)<EOL><INDENT><INDENT>continuation = null<EOL><INDENT>}"}
{"signature": "if (type in originatingTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isolatingGenerated.add(file)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val delta =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (suppressExceptions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return this<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun buildCatchAll() {", "body": "<EOL><INDENT><INDENT>buildInstrWithNoLocation(WasmOp.CATCH_ALL)<EOL><INDENT>}"}
{"signature": "val removedMembers =", "body": "previousMemberHashes.keys - currentMemberHashes.keys<EOL>"}
{"signature": "val localScopesBase =", "body": "towerDataContext.localScopes<EOL>"}
{"signature": "val decimal =", "body": "((value shr shift) and <NUM_LIT>xF).toInt()<EOL>"}
{"signature": "fun testListingCompiledFromSources() {", "body": "<EOL><INDENT><INDENT>doTest(TEST_CASE_PATH, fromSources = true)<EOL><INDENT>}"}
{"signature": "fun useAndroidEmulator(task: Task) {", "body": "<EOL><INDENT><INDENT>task.useAndroidConfiguration(systemPropertyName = <STR_LIT>, configName = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun print() {", "body": "<EOL><INDENT><INDENT>result += value.toString()<EOL><INDENT>}"}
{"signature": "val F<NUM_LIT>_EQ =", "body": "<STR_LIT><EOL>"}
{"signature": "val safeCastPositive =", "body": "safe_cast_positive().toString()<EOL>"}
{"signature": "fun testBase(inv: Inv<A, B>) {", "body": "<EOL><INDENT>inv.k()<EOL><INDENT>inv.t()<EOL>}"}
{"signature": "val eqIntrinsic =", "body": "binaryIntrinsic(operator = eqSelector)<EOL>"}
{"signature": "if (second != ExitCode.OK) {", "body": "<EOL><INDENT><INDENT><INDENT>return Pair(output.toString(), second)<EOL><INDENT><INDENT>}"}
{"signature": "var rows =", "body": "BENCHMARK_SIZE<EOL>"}
{"signature": "val cfgNode =", "body": "getClosestControlFlowNode(fir)<EOL>"}
{"signature": "val allSourceFileRoots =", "body": "sourceFiles.map { JavaRoot(it.virtualFile, JavaRoot.RootType.SOURCE) }<EOL>"}
{"signature": "val deviceTargets =", "body": "listOf(device<NUM_LIT>, device<NUM_LIT>)<EOL>"}
{"signature": "val apiConfiguration =", "body": "project.configurations.getByName(compilation.apiConfigurationName)<EOL>"}
{"signature": "val correctedPosition =", "body": "parentKDoc?.owner ?: positionInFakeFile<EOL>"}
{"signature": "val lowerCheck =", "body": "JsAstUtils.invokeMethod(lower, <STR_LIT>, subject).apply { sideEffects = SideEffectKind.PURE }<EOL>"}
{"signature": "val partHeader =", "body": "partFile.classHeader<EOL>"}
{"signature": "val bridgeFunction =", "body": "createBridgeDeclaration(<EOL>"}
{"signature": "val isJvm =", "body": "module.isJvmModule<EOL>"}
{"signature": "fun testLibClassBecameFinal(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestLibClassBecameFinal(gradleVersion)<EOL><INDENT>}"}
{"signature": "val onVariantsCalled =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "fun test_<NUM_LIT>(a: Any?) {", "body": "<EOL><INDENT>(a as String?)!!<EOL><INDENT>a<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!><EOL>}"}
{"signature": "for (index in <NUM_LIT> until length) {", "body": "<EOL><INDENT><INDENT>accumulator = operation(index, accumulator, this[index])<EOL><INDENT><INDENT>result.add(accumulator)<EOL><INDENT>}"}
{"signature": "val projectWide =", "body": "SimpleModificationTracker()<EOL>"}
{"signature": "val callableReferenceAdaptation =", "body": "getCallableReferenceAdaptation(<EOL>"}
{"signature": "if (!application.isHeadlessEnvironment) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.error(Throwable(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "var compileJava =", "body": "false<EOL>"}
{"signature": "val KOTLIN_API =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo<NUM_LIT>(x: C) {", "body": "}<EOL><EOL>fun <T: (Float) -> Unit> selectNumber(vararg x: T) = x[<NUM_LIT>]<EOL><EOL>fun foo<NUM_LIT>(x: Int) {}"}
{"signature": "val otherValueParameterTypes =", "body": "other.collectValueParameterTypes()<EOL>"}
{"signature": "if (receiver != null && (receiver.type.isKFunction() || receiver.type.isKSuspendFunction())) {", "body": "<EOL><INDENT><INDENT><INDENT>val newType = parentClass.defaultType<EOL><EOL><INDENT><INDENT><INDENT>expression.dispatchReceiver = IrTypeOperatorCallImpl(<EOL><INDENT><INDENT><INDENT><INDENT>expression.startOffset, expression.endOffset, newType, IrTypeOperator.IMPLICIT_CAST, newType, receiver<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun TestTypeAliasedValueParameterTypesBReverse(arg: UserKlass) {", "body": "}<EOL><EOL><EOL>class TestMultipleIdenticalValueParameters {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) constructor(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: UserKlassB)<EOL>}"}
{"signature": "package prefix\" is computed individually for every test file and reflects relative path to the test file.", "body": "<EOL>"}
{"signature": "val performSpecializationCheck =", "body": "<EOL><INDENT><INDENT><INDENT>jvmDefaultMode == JvmDefaultMode.ALL_COMPATIBILITY && !descriptor.hasJvmDefaultNoCompatibilityAnnotation() &&<EOL>"}
{"signature": "if (method is IrSimpleFunction && method.origin == IrDeclarationOrigin.LOWERED_SUSPEND_FUNCTION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>listOf(symbols.cancellationException.owner)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is FirSimpleFunctionBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this.contractDescription = it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val deprecatedJsInterfaceFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun scriptDefinitions(vararg fqNames: String) {", "body": "<EOL><INDENT><INDENT>myScriptDefinitions.addAll(fqNames)<EOL><INDENT>}"}
{"signature": "fun visitAnonymousFunctionExpression(anonymousFunctionExpression: FirAnonymousFunctionExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnonymousFunctionExpression(anonymousFunctionExpression)<EOL><INDENT>}"}
{"signature": "val publicSig =", "body": "idSig.asPublic() ?: error(<STR_LIT>)<EOL>"}
{"signature": "val JVM_INLINE_ANNOTATION_CLASS_ID =", "body": "ClassId.topLevel(JVM_INLINE_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "val unboxedTypes =", "body": "unboxedTypesAndMethodNamesAndFieldNames.map { (type, _, _) -> type }<EOL>"}
{"signature": "fun samePrimitiveIdentity(a: Int, b: Int) {", "body": "<EOL><INDENT><!DEPRECATED_IDENTITY_EQUALS!>a === b<!><EOL>}"}
{"signature": "val definitionModule =", "body": "mutableMapOf<String, JsIrModuleCrossModuleReferenceBuilder>()<EOL>"}
{"signature": "val doubleArray =", "body": "doubleArrayOf(<NUM_LIT>)<EOL>"}
{"signature": "val got =", "body": "parcelableCreator<Test>().createFromParcel(parcel)<EOL>"}
{"signature": "if (declaration is FirFunction && declaration.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirWebCommonErrors.INLINE_EXTERNAL_DECLARATION, context)<EOL><INDENT><INDENT>}"}
{"signature": "val printBytecodeForTheseMethods =", "body": "module.directives[CURIOUS_ABOUT]<EOL>"}
{"signature": "val isSuspendLambda =", "body": "transformingFunction.parent === coroutineClass<EOL>"}
{"signature": "val openingMatch =", "body": "Opening(counter++, opening.groups[<NUM_LIT>]!!.value, opening.range.first)<EOL>"}
{"signature": "val newStaticDefaultSymbol =", "body": "staticDefaultStubs[newNonStaticDefaultSymbol]?.symbol ?: continue<EOL>"}
{"signature": "val newChildren =", "body": "arrayOfNulls<IrExpression?>(numberOfChildren)<EOL>"}
{"signature": "val INVOKE_INITIALIZERS_OPTION =", "body": "CliOption(<EOL>"}
{"signature": "fun renderCallableId(callableId: CallableId) {", "body": "<EOL><INDENT><INDENT>builder.append(callableId.callableName)<EOL><INDENT>}"}
{"signature": "val trimmedWithPredicate =", "body": "<!EVALUATED: `<NUM_LIT>`!>(<STR_LIT> as CharSequence).trim { it.isWhitespace() }.toString()<!><EOL>"}
{"signature": "val isObjectGetter =", "body": "irGetter?.origin == JsLoweredDeclarationOrigin.OBJECT_GET_INSTANCE_FUNCTION<EOL>"}
{"signature": "fun sendToListeners(event: TestListener.() -> Unit) {", "body": "<EOL><INDENT><INDENT>settings.logger.event()<EOL><INDENT><INDENT>settings.listeners.forEach(event)<EOL><INDENT>}"}
{"signature": "for (initializer in propertyDescriptor.propertyInitializers) {", "body": "<INDENT><INDENT><INDENT><INDENT>// process as if it was instance.name = value<INDENT><INDENT><INDENT><INDENT>processAssignment(statement, JsNameRef(propertyName.value, target), initializer.valueExpr)<INDENT><INDENT><INDENT>}"}
{"signature": "for (i in x!!) {", "body": "<EOL><INDENT><INDENT>x = null<EOL><INDENT><INDENT>break<EOL><EOL><INDENT>}"}
{"signature": "val expectedDiagnosticsIds =", "body": "listOf(<EOL>"}
{"signature": "val objCClassNames =", "body": "GlobalNameMapping<Any, String>()<EOL>"}
{"signature": "if (visited.add(nextInsn)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>stack.add(nextInsn)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in parentScopeSymbols.size - <NUM_LIT> downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val currentSymbol = parentScopeSymbols[i] as? IrFunctionSymbol ?: break<EOL><INDENT><INDENT><INDENT><INDENT>functionSymbol = currentSymbol<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val buildAttributesMap =", "body": "buildAttributes.groupingBy { it }.eachCount()<EOL>"}
{"signature": "val bool<NUM_LIT> =", "body": "bool<EOL>"}
{"signature": "if (!Flags.HAS_ANNOTATIONS.get(classProto.flags)) {", "body": "<EOL><INDENT><INDENT><INDENT>Annotations.EMPTY<EOL><INDENT><INDENT>}"}
{"signature": "val n<NUM_LIT> =", "body": "C.Nested.Root.<!UNRESOLVED_REFERENCE!>Nested<!>.N<NUM_LIT>()<EOL>"}
{"signature": "val arrayContentEqualsMap =", "body": "context.ir.symbols.arraysContentEquals<EOL>"}
{"signature": "val restoreAt =", "body": "<EOL><INDENT><INDENT><INDENT>testServices.expressionMarkerProvider.getElementsOfTypeAtCarets<KtElement>(<EOL>"}
{"signature": "if (<STR_LIT> != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "var vres =", "body": "foo<EOL>"}
{"signature": "fun test_<NUM_LIT>(s: Any) {", "body": "<EOL><INDENT>requreIsInstance<String>(s)<EOL><INDENT>s.length<EOL>}"}
{"signature": "val universeAge =", "body": "Duration.days(<NUM_LIT>) * <NUM_LIT>e<NUM_LIT><EOL>"}
{"signature": "val iosTest =", "body": "getByName(<STR_LIT>)<EOL>"}
{"signature": "val pathIterator =", "body": "path.iterator()<EOL>"}
{"signature": "if (module != null) {", "body": "<EOL><INDENT><INDENT><INDENT>targetId(TargetId(module))<EOL><INDENT><INDENT><INDENT>moduleName(module.getModuleName())<EOL><INDENT><INDENT><INDENT>outDirectory(File(module.getOutputDirectory()))<EOL><INDENT><INDENT>}"}
{"signature": "val readableString =", "body": "StringBuilder()<EOL>"}
{"signature": "val withIncrementalCacheBuildOptions =", "body": "defaultBuildOptions.copy(<EOL>"}
{"signature": "val returnTypeFromExpected =", "body": "expectedType.getFunctionReturnTypeOrNull() ?: return<EOL>"}
{"signature": "for (platformTask in platformTasks) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>platformTask.setSource(commonSources)<EOL><INDENT><INDENT><INDENT><INDENT>platformTask.commonSourceSet.from(commonSources)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val overrideInfoProviderImpl =", "body": "KtFirOverrideInfoProvider(this, token)<EOL>"}
{"signature": "fun processAfterAllModules(someAssertionWasFailed: Boolean) {", "body": "}<EOL><EOL><INDENT>companion object {<EOL><INDENT><INDENT>const val DUMPED_IR_FOLDER_NAME = <STR_LIT><EOL><INDENT><INDENT>val AFTER_PREFIX = BeforeOrAfter.AFTER.name<EOL><INDENT><INDENT>val BEFORE_PREFIX = BeforeOrAfter.BEFORE.name<EOL><INDENT>}"}
{"signature": "if (tryAssign(element, it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return it<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isFloat =", "body": "primitive?.isFloatingPoint() == true<EOL>"}
{"signature": "val newLowerBound =", "body": "substitutedLowerBound?.lowerBoundIfFlexible() ?: type.lowerBound<EOL>"}
{"signature": "val trimMarginDefault =", "body": "<STR_LIT>\"ABC<EOL>"}
{"signature": "val towerResolver =", "body": "FirTowerResolver(this, resolutionStageRunner, collector)<EOL>"}
{"signature": "val _result =", "body": "namespace.main.foobar(__param)<EOL>"}
{"signature": "val leftBoolean =", "body": "left.unwrapOr<FirLiteralExpression<*>> { return it }?.value as? Boolean ?: return NotEvaluated<EOL>"}
{"signature": "if (index < lastValueParameterIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val pathRelativeToOutput =", "body": "calculatePathRelativeToOutput(file)<EOL>"}
{"signature": "val SPACES_PATTERN =", "body": "Regex(<STR_LIT>\"[,]?[ \\t]+<STR_LIT>\")<EOL>"}
{"signature": "if (left is KtProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>accessTarget = getDeclarationAccessTarget(left)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isProhibitedEnumEntryWithBody(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.EXPECTED_ENUM_ENTRY_WITH_BODY, context)<EOL><INDENT><INDENT>}"}
{"signature": "val caseIgnorableRanges =", "body": "arrayOf<IntRange>(<EOL>"}
{"signature": "val isBoxedResult =", "body": "this is IrValueParameter && parent is IrSimpleFunction &&<EOL>"}
{"signature": "val IMPLEMENTATION_FUNCTION_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val DOT_MODULE_EXTENSION =", "body": "<STR_LIT> + MODULE_EXTENSION<EOL>"}
{"signature": "val commonizerInvocations =", "body": "mutableListOf<CommonizerInvocation>()<EOL>"}
{"signature": "val validDiagnostics =", "body": "diagnostics.filter { actualDiagnostic -> actualDiagnostic.diagnostic.isValid }<EOL>"}
{"signature": "while (items.isEmpty() && childrenMap.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val childNode = childrenMap.values.first()<EOL><EOL><INDENT><INDENT>items += childNode.items<EOL><EOL><INDENT><INDENT>childrenMap.clear()<EOL><INDENT><INDENT>childrenMap += childNode.childrenMap<EOL><EOL><INDENT><INDENT>packageSegment = joinPackageNames(packageSegment, childNode.packageSegment)<EOL><INDENT>}"}
{"signature": "val shrunkClasspathSnapshotFile =", "body": "icWorkingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (firstErrorMessage == null && severity.isError) {", "body": "<EOL><INDENT><INDENT><INDENT>firstErrorMessage = message<EOL><INDENT><INDENT><INDENT>firstErrorLocation = location<EOL><INDENT><INDENT>}"}
{"signature": "val xt =", "body": "dx[t]<EOL>"}
{"signature": "fun memberFun(){", "body": "}<EOL><EOL><INDENT>@Deprecated(<STR_LIT>, level = DeprecationLevel.HIDDEN)<EOL><INDENT>private fun privateFun(){}"}
{"signature": "val AT_LEAST_ONCE_KIND =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val irTypeFields =", "body": "element.getFieldsWithIrTypeType()<EOL>"}
{"signature": "val arrayOfCallTransformer =", "body": "FirArrayOfCallTransformer()<EOL>"}
{"signature": "if (psiFile?.parent != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>list += psiFile<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val minusIntMaxValue =", "body": "-Int.MAX_VALUE<EOL>"}
{"signature": "val irBuiltins =", "body": "context.irBuiltIns<EOL>"}
{"signature": "val possibleParentTargetPredicateMap =", "body": "mapOf(<EOL>"}
{"signature": "if (returnedExpression == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>hasEmptyReturn = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (it.kind) {", "body": "<EOL><INDENT><INDENT><INDENT>Kind.DYNAMIC -> true<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "var delta =", "body": "deltaInp<EOL>"}
{"signature": "when (textLabelType) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> errorMessageView.text = <STR_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> errorMessageView.text = <STR_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> errorMessageView.text = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (declaration.origin == FirDeclarationOrigin.Synthetic.DelegateField) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>transformDelegateField(declaration)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (shouldWriteFilesOnDisk()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeFilesOnDisk()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitInitBlockEnterNode(node: InitBlockEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitInitBlockEnterNode(node)<EOL><INDENT>}"}
{"signature": "if (container !is FirCatch && tryExpression.finallyBlock != container) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tryExpression.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ComposeErrors.ILLEGAL_TRY_CATCH_AROUND_COMPOSABLE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (ErrorUtils.isError(resolvedCall.candidateDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>kotlinToResolvedCallTransformer.runArgumentsChecks(topLevelCallContext, lastCall)<EOL><INDENT><INDENT><INDENT>checkMissingReceiverSupertypes(resolvedCall, missingSupertypesResolver, topLevelTrace)<EOL><INDENT><INDENT><INDENT>return resolvedCall<EOL><INDENT><INDENT>}"}
{"signature": "val minIndent =", "body": "lines.filter { it.trim().isNotEmpty() }.minOfOrNull { it.calcIndent() } ?: <NUM_LIT><EOL>"}
{"signature": "val applications =", "body": "annotationsProvider[classId]<EOL>"}
{"signature": "val DEFAULT_SIZE =", "body": "<NUM_LIT><EOL>"}
{"signature": "package rex<NUM_LIT><EOL>.", "body": ""}
{"signature": "for ((index, localScope) in towerDataElementsForName.reversedFilteredLocalScopes) {", "body": "<EOL><INDENT><INDENT><INDENT>onScope(localScope, null, parentGroup.Local(index))<EOL><INDENT><INDENT>}"}
{"signature": "val generationState =", "body": "NativeGenerationState(context.config, backendContext,<EOL>"}
{"signature": "import a.", "body": "D.Companion.bar<EOL>"}
{"signature": "if (kk > <NUM_LIT> && kk <= <NUM_LIT>) {", "body": "<INDENT><INDENT>// <NUM_LIT>e<NUM_LIT> -> <NUM_LIT><INDENT><INDENT>buffer.memoryCopy(kk + <NUM_LIT>, kk, -k)<INDENT><INDENT>buffer[kk] = CharCodes.DOT.code.toChar()<INDENT><INDENT>return length + <NUM_LIT><INDENT>}"}
{"signature": "val replState =", "body": "ResettableAnalyzerState()<EOL>"}
{"signature": "val externRefToKotlinUShortAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "for (value in testValues) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(value, value.toDuration(DurationUnit.NANOSECONDS).inWholeNanoseconds)<EOL><INDENT><INDENT><INDENT>assertEquals(-value, -value.toDuration(DurationUnit.NANOSECONDS).inWholeNanoseconds)<EOL><INDENT><INDENT>}"}
{"signature": "val CLASSIC_BACKEND_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "fun invalidateAll() {", "body": "<EOL><INDENT><INDENT>sourceCache.clear()<EOL><INDENT>}"}
{"signature": "val globalNames =", "body": "NameTable<String>(nameScope)<EOL>"}
{"signature": "package lowlevel<EOL>.", "body": ""}
{"signature": "val compilerClasspathRegex =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val TRANSFORMED_WHEN_MAPPING_MARKER =", "body": "<STR_LIT><EOL>"}
{"signature": "if ((callableStub as KotlinPropertyStub).hasInitializer()) {", "body": "<EOL><INDENT><INDENT><INDENT>KotlinNameReferenceExpressionStubImpl(callableStub, StringRef.fromString(COMPILED_DEFAULT_INITIALIZER))<EOL><INDENT><INDENT>}"}
{"signature": "val directions =", "body": "HashMap<Variable, ResolveDirection>()<EOL>"}
{"signature": "for (property in script.declarations.filterIsInstance<KtProperty>()) {", "body": "<EOL><INDENT><INDENT><INDENT>membersBuilder<EOL><INDENT><INDENT><INDENT><INDENT>.createPropertyField(property, usedNames, forceStatic = false)<EOL><INDENT><INDENT><INDENT><INDENT>?.let(result::add)<EOL><INDENT><INDENT>}"}
{"signature": "if (kindFilter.acceptsKinds(DescriptorKindFilter.CLASSIFIERS_MASK)) {", "body": "<EOL><INDENT><INDENT><INDENT>descriptors.addIfNotNull(getContributedClassifier(aliasName, NoLookupLocation.WHEN_GET_ALL_DESCRIPTORS))<EOL><INDENT><INDENT>}"}
{"signature": "val op =", "body": "wasmInstr.operator<EOL>"}
{"signature": "package name: <STR_LIT><root>\" })<EOL>.", "body": ""}
{"signature": "val secondModule =", "body": "TestModule(<EOL>"}
{"signature": "val maxValueChange =", "body": "((bigValueIntervalEnd - smallValueIntervalEnd) / bigValueIntervalEnd)<EOL>"}
{"signature": "val redundantModalities =", "body": "element.redundantModalities(context)<EOL>"}
{"signature": "val foo  =", "body": "<STR_LIT><EOL>"}
{"signature": "val isSuperClassCast =", "body": "value.argument.type.isSubtypeOfClass(dstClass.symbol)<EOL>"}
{"signature": "val isJar =", "body": "root.fileSystem.protocol == StandardFileSystems.JAR_PROTOCOL<EOL>"}
{"signature": "val failFile =", "body": "testFile.parentFile.resolve(<STR_LIT>).takeIf { it.exists() }<EOL>"}
{"signature": "for (val (a) in b) {", "body": "}"}
{"signature": "val test_fnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>f === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === f<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>f !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== f<!><EOL>"}
{"signature": "val statisticData =", "body": "prepareData(<EOL>"}
{"signature": "import p<NUM_LIT>B<EOL>.", "body": ""}
{"signature": "if (firDispatchReceiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.dispatchReceiver = visitor.convertToIrExpression(firDispatchReceiver)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(noinline lambda: (Int) -> Int) {", "body": "}<EOL><INDENT>inline fun foo<NUM_LIT>(crossinline lambda: (Int) -> Int) {}"}
{"signature": "val JVM_IR_FAILING_FOR_UNSIGNED_FILENAMES =", "body": "setOf<String>()<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.propertyBackingFieldAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.propertyBackingFieldAnnotation, i), new.getExtension(KlibMetadataProtoBuf.propertyBackingFieldAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val diagnosticStats =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "fun transform(outputs: TransformOutputs) {", "body": "<EOL><INDENT><INDENT>val input = inputArtifact.get().asFile<EOL><INDENT><INDENT>val unzipDir = outputs.dir(EXTRACTED_ARCHIVE_RELATED_PATH)<EOL><INDENT><INDENT>unzipTo(input, unzipDir)<EOL><INDENT>}"}
{"signature": "val sameDispatchReceiver =", "body": "resolvedCall.hasThisOrNoDispatchReceiver(trace.bindingContext)<EOL>"}
{"signature": "var semanticsHazard =", "body": "false<EOL>"}
{"signature": "var reader =", "body": "StringReader(<STR_LIT>).buffered()<EOL>"}
{"signature": "if (receiver != null && receiver.symbol == boxParameter?.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>meetCapturing = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitBinaryAndEnterRightOperandNode(node: BinaryAndEnterRightOperandNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryAndEnterRightOperandNode(node)<EOL><INDENT>}"}
{"signature": "var secondRange =", "body": "Wrapper(<NUM_LIT>)..Wrapper(<NUM_LIT>)<EOL>"}
{"signature": "var supertypesLocked =", "body": "false<EOL>"}
{"signature": "fun cannotOverrideInvisibleMember(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overriding: CallableMemberDescriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>invisibleOverridden: CallableMemberDescriptor<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(CANNOT_OVERRIDE_INVISIBLE_MEMBER.on(member, declared, invisibleOverridden))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val superValueParameters =", "body": "superFunction?.valueParameters.orEmpty()<EOL>"}
{"signature": "if (sourceFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>JsonString(sourceFile.readText())<EOL><INDENT><INDENT>}"}
{"signature": "var c =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (packagePartProvider in packagePartProviders) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>packagePartProvider.addRoots(newRoots, configuration.getNotNull(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val declarationOwner =", "body": "declarationFunctionDescriptor.containingDeclaration as ClassDescriptor<EOL>"}
{"signature": "import spr.", "body": "*;<EOL>"}
{"signature": "val rangeOwner =", "body": "if (info.receiverType == WithIndexReceiverType.SEQUENCE) findSequence() else findIterable()<EOL>"}
{"signature": "val lastIndex =", "body": "this.lastIndex<EOL>"}
{"signature": "var irProduceKlibFile =", "body": "false<EOL>"}
{"signature": "val afoo =", "body": "a.foo()<EOL>"}
{"signature": "val durationInUnit =", "body": "duration.toLong(unit)<EOL>"}
{"signature": "if (value == null || !Name.isValidIdentifier(value)) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(ErrorsJvm.ILLEGAL_JVM_NAME.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val compilerVersion =", "body": "KotlinCompilerVersion.getVersion().toString()<EOL>"}
{"signature": "if (needArguments) {", "body": "<EOL><INDENT><INDENT>resolvedAnnotationsWithArguments<EOL><INDENT>}"}
{"signature": "when (val z = if (getBoolean()) {", "body": "x!!; break@loop }"}
{"signature": "val rawFiles =", "body": "arrayListOf<TestClassInfo>()<EOL>"}
{"signature": "if (onOff) {", "body": "<EOL><INDENT><INDENT><INDENT>enable(phase)<EOL><INDENT><INDENT>}"}
{"signature": "val reparsedActualNormalized =", "body": "dumpBuildLog(parseTestBuildLog(expectedFile)).normalizeSeparators()<EOL>"}
{"signature": "if (dispatchReceiverReference !is FirSuperReference) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.obj.array.size<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>needSmallArray = true<EOL><INDENT><INDENT><INDENT>obj.array[i] = <NUM_LIT><EOL><INDENT><INDENT><INDENT>needSmallArray = false<EOL><INDENT><INDENT>}"}
{"signature": "val FLOAT_TYPE_SUFFIX =", "body": "<STR_LIT> //$NON-NLS<NUM_LIT>$"}
{"signature": "if (DescriptorUtils.isTopLevelDeclaration(it) && it is DeclarationDescriptorWithVisibility && it.visibility == DescriptorVisibilities.PRIVATE) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val localFun<NUM_LIT> =", "body": "::local<NUM_LIT> as Any<EOL>"}
{"signature": "val valueMap =", "body": "mutableMapOf<IrValueSymbol, IrValueDeclaration>()<EOL>"}
{"signature": "if (tree is JCTree.JCIdent) {", "body": "<EOL><INDENT><INDENT><INDENT>val fieldName = Name.identifier(tree.name.toString())<EOL><INDENT><INDENT><INDENT>return CurrentClassAndInnerFieldScope(javac, compilationUnit).findField(containingClass, fieldName)<EOL><INDENT><INDENT>}"}
{"signature": "if (scope<NUM_LIT> != null) {", "body": "<EOL><INDENT><INDENT><INDENT>addNonLocalScope(scope<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val matchingCompatibilityToMembersMap =", "body": "declaration.symbol.expectForActual.orEmpty()<EOL>"}
{"signature": "if (intKind == Kind.LOCAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@test<NUM_LIT> Global(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (configurables !is MingwConfigurables) {", "body": "<INDENT><INDENT><INDENT>// `-fPIC` allows us to avoid some problems when producing dynamic library.<INDENT><INDENT><INDENT>// See KT<NUM_LIT><INDENT><INDENT><INDENT>add(listOf(<STR_LIT>))<INDENT><INDENT>}"}
{"signature": "val removeOptionalJvmInlineAnnotation =", "body": "ReplacingSourceTransformer(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val IS_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val errorDiagnostics =", "body": "analysisResult.bindingContext.diagnostics.noSuppression()<EOL>"}
{"signature": "val contextSerializer =", "body": "Name.identifier(SpecialBuiltins.contextSerializer)<EOL>"}
{"signature": "val relevantMethodIds =", "body": "methods<NUM_LIT>keys.union(methods<NUM_LIT>keys)<EOL>"}
{"signature": "when (it.condition.operation) {", "body": "<INDENT><INDENT><INDENT><INDENT>Operation.EqTrue -> expressionVariable eq false implies it.effect<INDENT><INDENT><INDENT><INDENT>Operation.EqFalse -> expressionVariable eq true implies it.effect<INDENT><INDENT><INDENT><INDENT>// `argumentVariable eq/notEq null` shouldn't exist since `argumentVariable` is presumably `Boolean`<INDENT><INDENT><INDENT><INDENT>else -> null<INDENT><INDENT><INDENT>}"}
{"signature": "fun setValue(t: Any?, p: KProperty<*>, i: Int) {", "body": "inner = i }"}
{"signature": "import p<NUM_LIT>I;<EOL>.", "body": ""}
{"signature": "var get<NUM_LIT> =", "body": "get<NUM_LIT><EOL>"}
{"signature": "val refClassConstructor =", "body": "refClass.constructors.single()<EOL>"}
{"signature": "val MinUL =", "body": "ULong.MIN_VALUE<EOL>"}
{"signature": "fun my<NUM_LIT>(my: <!OPT_IN_USAGE_FUTURE_ERROR!>MyList<!>) {", "body": "}<EOL><EOL>fun my<NUM_LIT>(my: <!OPT_IN_USAGE_ERROR!>YourList<!>) {}"}
{"signature": "val commonGeneratedDir =", "body": "baseDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val POD_INSTALL_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val separatedTestCasesUnspecifiedBehaviorNumber =", "body": "cases.byNumbers.count { it.value.unspecifiedBehavior }<EOL>"}
{"signature": "fun testMultipleTypeAliasedValueParameterTypesAReverse(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: UserKlassB) {", "body": "}<EOL>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) fun testMultipleTypeAliasedValueParameterTypesAReverse(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: SameUserKlassB) {}"}
{"signature": "val TYPE_PARAMETER_MARKER_NAME_SETTER =", "body": "<STR_LIT><EOL>"}
{"signature": "val bothValidateSet =", "body": "phaseSetFromArguments(phases, arguments.phasesToValidate, ::report)<EOL>"}
{"signature": "for (i in MaxUL - <NUM_LIT>u..MaxUL step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>3) break<EOL><INDENT>}"}
{"signature": "when (deprecationLevel) {", "body": "<EOL><INDENT><INDENT>DeprecationLevelValue.WARNING -> <STR_LIT><EOL><INDENT><INDENT>DeprecationLevelValue.ERROR, DeprecationLevelValue.HIDDEN -> <STR_LIT><EOL><INDENT>}"}
{"signature": "if (file != null && location != null) {", "body": "<EOL><INDENT><INDENT><INDENT>JsLocation(file, location.startLine, location.startChar)<EOL><INDENT><INDENT>}"}
{"signature": "if (symbol.toLookupTag() == ownerLookupTag) {", "body": "<EOL><INDENT><INDENT>return !isStrict<EOL><INDENT>}"}
{"signature": "var renderConfiguration =", "body": "RenderConfiguration()<EOL>"}
{"signature": "val recordedSteps =", "body": "meaningfulBlocks.map { block -> Step.parse(block, LLDB_COMMAND_PREFIX) }<EOL>"}
{"signature": "fun visitAnonymousObject(anonymousObject: FirAnonymousObject, data: Any?) {", "body": "<EOL><INDENT><INDENT>visitClass(anonymousObject, null)<EOL><INDENT>}"}
{"signature": "val deserializationComponentsForJava =", "body": "<EOL><INDENT><INDENT><INDENT>makeDeserializationComponentsForJava(<EOL>"}
{"signature": "val APPLICABILITY_OF_JSPECIFY_DEFAULTS =", "body": "listOf(<EOL>"}
{"signature": "fun addEmpty(variable: IrValueDeclaration, loop: IrLoop?) {", "body": "<EOL><INDENT><INDENT>elementData[variable] = Variable(loop, mutableSetOf())<EOL><INDENT>}"}
{"signature": "val currentClassSnapshotExcludingMember =", "body": "currentClassSnapshotsExcludingMembers[classId]<EOL>"}
{"signature": "val invocationKind =", "body": "if (proto.hasKind())<EOL>"}
{"signature": "fun Group(content: @Composable () -> Unit) {", "body": "content() }"}
{"signature": "if (username != null && password != null) {", "body": "<EOL><INDENT><INDENT>val auth = Base<NUM_LIT>getEncoder().encode((username + <STR_LIT> + password).toByteArray()).toString(Charsets.UTF_<NUM_LIT>)<EOL><INDENT><INDENT>connection.addRequestProperty(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val fooC =", "body": "file.getClassOrFail(<STR_LIT>).getMemberScope().getFunctionOrFail(<STR_LIT>)<EOL>"}
{"signature": "val fqn =", "body": "parent.packageFqName.asString()<EOL>"}
{"signature": "val task =", "body": "project.registerAssembleXCFrameworkTask(xcFrameworkName, buildType)<EOL>"}
{"signature": "if (kotlinFile.packageFqName != classId.packageFqName) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptySequence()<EOL><INDENT><INDENT>}"}
{"signature": "if (i == contextReceivers.lastIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeProjection =", "body": "KotlinTypeProjectionStubImpl(typeArgumentsListStub, projectionKind.ordinal)<EOL>"}
{"signature": "if (!result.add(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT>}"}
{"signature": "val LOMBOK_CONFIG_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun saveInlineFunctionBodies() {", "body": "<EOL><INDENT><INDENT>outputFiles.inlineFunctionBodiesFile!!.writeBytes(<EOL><INDENT><INDENT><INDENT><INDENT>InlineFunctionBodyReferenceSerializer.serialize(generationState.inlineFunctionBodies))<EOL><INDENT>}"}
{"signature": "var inlineScopeNumberIncrement =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun typeParameter(<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>variance: Variance,<EOL><INDENT><INDENT>isReified: Boolean,<EOL><INDENT><INDENT>key: GeneratedDeclarationKey,<EOL><INDENT><INDENT>config: TypeParameterBuildingContext.() -> Unit<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>shouldNotBeCalled()<EOL><INDENT>}"}
{"signature": "val towerGroup =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TowerGroup<EOL>"}
{"signature": "if (skipGenericSignature() || hasNothingInNonContravariantPosition(type) || type.arguments.isEmpty() || type.isRawTypeImpl()) {", "body": "<EOL><INDENT><INDENT><INDENT>writeAsmType(asmType)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (isString(a)) {", "body": "<EOL><INDENT><INDENT>a.asDynamic().substring(startIndex, endIndex).unsafeCast<String>()<EOL><INDENT>}"}
{"signature": "val BOXED_VALUE_METHOD_NAMES =", "body": "mapOf(<EOL>"}
{"signature": "val supportedPatterns =", "body": "listOf(<EOL>"}
{"signature": "val typeParameterClassId =", "body": "ClassId.topLevel(FqName.topLevel(name))<EOL>"}
{"signature": "import checkType<EOL>.", "body": ""}
{"signature": "if (dataFlowValue.isStable || !stableSmartCastsOnly) {", "body": "// we don't include smart cast receiver types for <STR_LIT> receiver value to mark members grayed<INDENT><INDENT>smartCastManager.getSmartCastVariantsWithLessSpecificExcluded(<INDENT><INDENT><INDENT>receiverValue,<INDENT><INDENT><INDENT>bindingContext,<INDENT><INDENT><INDENT>moduleDescriptor,<INDENT><INDENT><INDENT>dataFlowInfo,<INDENT><INDENT><INDENT>languageVersionSettings,<INDENT><INDENT><INDENT>dataFlowValueFactory<INDENT><INDENT>)<INDENT>}"}
{"signature": "if ((f<NUM_LIT> / f<NUM_LIT> - <NUM_LIT>.5) > 0.0<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (nameValue.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirJvmErrors.JVM_PACKAGE_NAME_CANNOT_BE_EMPTY, context)<EOL><INDENT><INDENT>}"}
{"signature": "for ((descriptor, parameter) in valueParameterDescriptors.zip(valueParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT>ForceResolveUtil.forceResolveAllContents(descriptor.annotations)<EOL><INDENT><INDENT><INDENT>resolveDefaultValue(descriptor, parameter, contextForDefaultValue)<EOL><INDENT><INDENT>}"}
{"signature": "val namedGroups =", "body": "match.groups<EOL>"}
{"signature": "if (AbstractTypeChecker.equalTypes(typeCheckerState, superBound, subBound)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.remove()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue@outer<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (<!ILLEGAL_DECLARATION_IN_WHEN_SUBJECT!>val y: Any<!>) {", "body": "<EOL><INDENT><INDENT><!EXPECTED_CONDITION, USELESS_IS_CHECK!>is String<!> -> <!UNINITIALIZED_VARIABLE!>y<!>.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val resolvedFromTargetDependencies =", "body": "classifiers.targetDependencies[targetIndex].classifier(id)<EOL>"}
{"signature": "val aClasses =", "body": "mapToPlatformIndependentClasses(a, platformToKotlinClassMapper)<EOL>"}
{"signature": "val metaInfoProcessors =", "body": "additionalMetaInfoProcessors.map { it.invoke(this) }<EOL>"}
{"signature": "val lastAssignedVars =", "body": "mutableListOf<Pair<JsName, JsNode>>()<EOL>"}
{"signature": "for ((i, contextReceiverValue) in contextReceiverValues.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(i, contextReceiverValue.load())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (inheritorId in inheritors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.addSealedSubclassFqName(stringTable.getQualifiedClassNameIndex(inheritorId))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testElvis(x: Any?) {", "body": "<EOL><INDENT>val y = x ?: ::<!UNRESOLVED_REFERENCE!>unresolved<!><EOL>}"}
{"signature": "val visited =", "body": "mutableListOf<Throwable>()<EOL>"}
{"signature": "import PackageDescription<EOL>.", "body": ""}
{"signature": "val asResult =", "body": "Result<Result<Int>>(asInt)<EOL>"}
{"signature": "var run =", "body": "<NUM_LIT><EOL>"}
{"signature": "val LOCAL_PRIVATE =", "body": "<NUM_LIT><EOL>"}
{"signature": "val specificityComparator =", "body": "JvmTypeSpecificityComparator(components.session.typeContext)<EOL>"}
{"signature": "else if (section == ObjCDataGenerator.classNameGenerator.section) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val whenObjectAddedListener =", "body": "TestListener()<EOL>"}
{"signature": "fun shrForULong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>UL, <NUM_LIT>UL shr <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>UL, <NUM_LIT>UL shr <NUM_LIT>)<EOL><EOL><INDENT><INDENT>assertEquals(Long.MAX_VALUE.toULong(), ULong.MAX_VALUE shr <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(Long.MAX_VALUE.toULong(), ULong.MAX_VALUE shr <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val taskPath =", "body": "event.descriptor.taskPath<EOL>"}
{"signature": "if (contextReceiverAnnotations.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptContent =", "body": "lldbPath.readLines()<EOL>"}
{"signature": "val typeCheckerContext =", "body": "newTypeCheckerState(errorTypesEqualToAnything = false, stubTypesEqualToAnything = true)<EOL>"}
{"signature": "val moduleDescriptorByModule =", "body": "mutableMapOf<TestModule, ModuleDescriptor>()<EOL>"}
{"signature": "val returnTypeBridge =", "body": "bridgeType(returnType)<EOL>"}
{"signature": "if (remoteHost != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>executable = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>val remoteExecutable = this@RunKotlinNativeTask.executable.split(<STR_LIT>).last()<EOL><INDENT><INDENT><INDENT><INDENT>args (remoteHost, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (obj<NUM_LIT> !== obj<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return obj<NUM_LIT> !== obj<NUM_LIT><EOL><INDENT>}"}
{"signature": "val filteredTypes =", "body": "ArrayList(inputTypes)<EOL>"}
{"signature": "fun testStringFromChars(expected: String, chars: CharArray) {", "body": "<EOL><INDENT><INDENT>assertEquals(expected, String(chars))<EOL><INDENT><INDENT>assertEquals(expected, chars.concatToString())<EOL><INDENT>}"}
{"signature": "val snapshotOutputFile =", "body": "outputs.file(classpathEntryInputDirOrJar.name.replace('.', '_') + <STR_LIT>)<EOL>"}
{"signature": "fun fillCompilerArguments(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformCommonCompilerOptions,<EOL><INDENT><INDENT>args: org.jetbrains.kotlin.cli.common.arguments.K<NUM_LIT>MetadataCompilerArguments,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerOptionsHelper.fillCompilerArguments(from, args)<EOL><INDENT>}"}
{"signature": "for (dependency in module.dependencies()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (dependency == firstDependency) continue<EOL><INDENT><INDENT><INDENT>module.assertModuleDependencyIsCorrect(dependency)<EOL><EOL><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>moduleDescriptors.add(resolverForProject.descriptorForModule(dependency as M))<EOL><INDENT><INDENT>}"}
{"signature": "val attrName =", "body": "getLocalName(index)!!<EOL>"}
{"signature": "val inherited =", "body": "findInheritedThrows(descriptor).entries.distinctBy { it.value }<EOL>"}
{"signature": "fun visitBinaryOrExitNode(node: BinaryOrExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val callResolver =", "body": "resolutionFacade.frontendService<CallResolver>()<EOL>"}
{"signature": "val initializerStatement =", "body": "builder.at(initValue).irSetField(null, declaration, initValue)<EOL>"}
{"signature": "fun parseException(e: ParseException, text: String) {", "body": "<EOL><INDENT><INDENT>log.error(<STR_LIT>$text\\<STR_LIT>, e)<EOL><INDENT>}"}
{"signature": "val initialFileContent =", "body": "fileBuilder.stripAdditionalEmptyLines(file).toString()<EOL>"}
{"signature": "val isReified =", "body": "isOperationReifiedMarker(insn.previous)<EOL>"}
{"signature": "val ktGetter =", "body": "(declaration as? KtProperty)?.getter<EOL>"}
{"signature": "val oneIsBuiltin =", "body": "l.isBuiltin || r.isBuiltin<EOL>"}
{"signature": "if (declaration.originalBeforeInline != null) {", "body": "<INDENT><INDENT><INDENT>// Don't take into account regenerated classes<INDENT><INDENT><INDENT>return super.visitClass(declaration, data.copy(processingOriginalDeclarations = false))<INDENT><INDENT>}"}
{"signature": "val buildTypeConstants =", "body": "listOf(<EOL>"}
{"signature": "fun computeNonDeclaredProperties(name: Name, result: MutableCollection<PropertyDescriptor>) {", "body": "<INDENT><INDENT>//no undeclared properties<INDENT>}"}
{"signature": "val lowerArgs =", "body": "renderArguments(lowerBound)<EOL>"}
{"signature": "fun visitFunctionAccess(expression: IrFunctionAccessExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionAccess(expression)<EOL><INDENT>}"}
{"signature": "var realSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "val statsLineCount =", "body": "if (!ownPackages.isPresent) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "fun invoke(text: String){", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(text)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!argument.type.isExportable(bindingContext, currentlyProcessed)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentlyProcessed.remove(this)<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val booleanArr =", "body": "AtomicBooleanArray(<NUM_LIT>)<EOL>"}
{"signature": "if (callIndex != <NUM_LIT> && superCallIndex != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val tmp = statements[callIndex]<EOL><INDENT><INDENT><INDENT>statements[callIndex] = statements[superCallIndex]<EOL><INDENT><INDENT><INDENT>statements[superCallIndex] = tmp<EOL><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(s : ((Int) -> Int)?) {", "body": "<EOL><EOL>}"}
{"signature": "if (oldSize == hashes.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val newSize = if (oldSize > <NUM_LIT>) oldSize * <NUM_LIT> else <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>hashes = hashes.copyOf(newSize)<EOL><INDENT><INDENT><INDENT><INDENT>values = values.copyOf(newSize)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun f<NUM_LIT>(t: List<Array<Array<Thread.State>>>) {", "body": "}<EOL><INDENT>fun f<NUM_LIT>(): A<NUM_LIT>.B<NUM_LIT>.C<NUM_LIT>? = null<EOL><INDENT>fun f<NUM_LIT>() {<EOL><INDENT><INDENT>foo<A<NUM_LIT>.B<NUM_LIT>.C<NUM_LIT>>()<EOL><INDENT>}"}
{"signature": "val repeatableAnnotation =", "body": "getAnnotationByClassId(StandardClassIds.Annotations.Repeatable, session)<EOL>"}
{"signature": "var samples =", "body": "listOf<String>()<EOL>"}
{"signature": "val atomicfuPropertyToVolatile =", "body": "mutableMapOf<IrProperty, IrProperty>()<EOL>"}
{"signature": "if (hasSuperClassAndCompanion()) {", "body": "<INDENT><INDENT><INDENT>tsIgnore(<STR_LIT>) + <STR_LIT><INDENT><INDENT>}"}
{"signature": "import util.", "body": "HashSet<EOL>"}
{"signature": "fun updateUserSession() {", "body": "<EOL><INDENT>val session = loadSession()<EOL><INDENT>session.lastAccess = now()<EOL><INDENT>storeSession(session)<EOL>}"}
{"signature": "val rootDirPath =", "body": "target.project.rootDir.toPath()<EOL>"}
{"signature": "val asyncProfilerControl =", "body": "AsyncProfilerControl()<EOL>"}
{"signature": "if (container is IrSimpleFunction && container.isTailrec) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>lowerTailRecursionCalls(container)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun alert(msg: String) {", "body": "<EOL>  throw Error(msg)<EOL>}"}
{"signature": "while (tree.find(key) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>key = generateKey()<EOL><INDENT><INDENT>}"}
{"signature": "val newCapturedTypeConstructor =", "body": "NewCapturedTypeConstructor(<EOL>"}
{"signature": "val resourcesConfiguration =", "body": "consumer.multiplatformExtension.linuxX<NUM_LIT>()<EOL>"}
{"signature": "val lifetimes =", "body": "runPhase(EscapeAnalysisPhase, EscapeAnalysisInput(module, moduleDFG, devirtualizationAnalysisResults), disable = !optimize)<EOL>"}
{"signature": "val reifiedTypeParametersUsages =", "body": "ReifiedTypeParametersUsages()<EOL>"}
{"signature": "val nestingLevel =", "body": "packageFqNameSegments.size<EOL>"}
{"signature": "val kidsArray =", "body": "ref.get() ?: return<EOL>"}
{"signature": "if (other is RouteCost) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>comparator.compare(this, other)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (serializerDescriptor.classId in SerializersClassIds.setOfSpecialSerializers) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun testFriendPaths() {", "body": "<EOL><INDENT><INDENT>val friendPath = tmpDir.newFolder()<EOL><INDENT><INDENT>taskApi.friendPaths.from(friendPath)<EOL><INDENT><INDENT>assertEquals(setOf(friendPath), taskImpl.friendPaths.files)<EOL><INDENT>}"}
{"signature": "fun null<NUM_LIT>Float(x: Float?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "if (resolvedCall.dispatchReceiver is TransientReceiver) {", "body": "<INDENT><INDENT><INDENT>// Unbound callable reference 'A::foo', receiver is passed as a first parameter<INDENT><INDENT><INDENT>val irAdaptedReceiverParameter = irAdapterFun.valueParameters[<NUM_LIT>]<INDENT><INDENT><INDENT>irAdapteeCall.dispatchReceiver =<INDENT><INDENT><INDENT><INDENT>IrGetValueImpl(startOffset, endOffset, irAdaptedReceiverParameter.type, irAdaptedReceiverParameter.symbol)<INDENT><INDENT>}"}
{"signature": "val nameInJava =", "body": "getJvmMethodNameIfSpecial(overriddenBuiltin)!!<EOL>"}
{"signature": "var finalValue =", "body": "relativeEnd < <NUM_LIT> ?<EOL>"}
{"signature": "fun addOneToManyMappingsGenerators(generatedDir: File, target: KotlinTarget) {", "body": "<EOL><INDENT><INDENT>val uppercase = OneToManyMappingsGenerator.forUppercase(generatedDir.resolve(<STR_LIT>), target, bmpUnicodeDataLines)<EOL><INDENT><INDENT>val lowercase = OneToManyMappingsGenerator.forLowercase(generatedDir.resolve(<STR_LIT>), target, bmpUnicodeDataLines)<EOL><INDENT><INDENT>oneToManyMappingsGenerators.add(uppercase)<EOL><INDENT><INDENT>oneToManyMappingsGenerators.add(lowercase)<EOL><INDENT>}"}
{"signature": "val signedChar =", "body": "simple(<STR_LIT>)<EOL>"}
{"signature": "val receiverArgumentType =", "body": "receiverArgument.type<EOL>"}
{"signature": "if (!isNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT>return kotlinToJsAdapterIfNeededNotNullable(isReturn)<EOL><INDENT><INDENT>}"}
{"signature": "val reportRelativePath =", "body": "<STR_LIT><EOL>"}
{"signature": "val superClassDescriptor =", "body": "superType.constructor.declarationDescriptor<EOL>"}
{"signature": "if (this !is SirAccessor) {", "body": "print(<STR_LIT>) }"}
{"signature": "if (--counter == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>_dispose(holder!!)<EOL><INDENT><INDENT><INDENT><INDENT>holder = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (smartCastManager.getSmartCastReceiverResult(receiverArgument, erasedReceiverType, this) == null) {", "body": "<EOL><INDENT><INDENT><INDENT>RECEIVER_TYPE_ERROR<EOL><INDENT><INDENT>}"}
{"signature": "val enc =", "body": "json.encodeToString(input)<EOL>"}
{"signature": "if (irField.type.binaryTypeIsReference() && irField.storageKind(context) != FieldStorageKind.THREAD_LOCAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val address = staticFieldPtr(irField, functionGenerationContext)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>storeHeapRef(codegen.kNullObjHeaderPtr, address)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun addUnsignedSuperTypes() {", "body": "<EOL><INDENT><INDENT>checkBoundsAndAddSuperType(value, module.unsignedType(StandardNames.FqNames.uInt))<EOL><INDENT><INDENT>checkBoundsAndAddSuperType(value, module.unsignedType(StandardNames.FqNames.uByte))<EOL><INDENT><INDENT>checkBoundsAndAddSuperType(value, module.unsignedType(StandardNames.FqNames.uShort))<EOL><INDENT><INDENT>supertypes.add(module.unsignedType(StandardNames.FqNames.uLong))<EOL><INDENT>}"}
{"signature": "val isEAP =", "body": "languageVersion.isPreRelease()<EOL>"}
{"signature": "fun inlineFun()expect fun nonInlineFun()// MODULE: m<NUM_LIT>-jvm()()(m<NUM_LIT>-common)// FILE: jvm.kt<!ACTUAL_WITHOUT_EXPECT!>actual<!> fun inlineFun() {", "body": "}"}
{"signature": "val providerForLocalDeclaration =", "body": "ControlFlowInformationProviderImpl(<EOL>"}
{"signature": "val acting =", "body": "CActing(<STR_LIT>)<EOL>"}
{"signature": "val mean =", "body": "filteredSamples.sum() / filteredSamples.size<EOL>"}
{"signature": "val tmpValInitializer =", "body": "safeCallTmpVal.initializer<EOL>"}
{"signature": "var dVar =", "body": "d<EOL>"}
{"signature": "fun inlineMe(crossinline c: suspend () -> Unit) {", "body": "c(); c() }"}
{"signature": "val callHandlers =", "body": "listOf(<EOL>"}
{"signature": "if (firClass.origin.fromSource || firClass.origin.generated) {", "body": "<INDENT><INDENT><INDENT>// We anyway can use 'else' branch as fallback, but<INDENT><INDENT><INDENT>// this is an additional check of FIR<NUM_LIT>IR invariants<INDENT><INDENT><INDENT>// (source classes should be already built when we analyze bodies)<INDENT><INDENT><INDENT>classifierStorage.getIrClass(firClass).symbol<INDENT><INDENT>}"}
{"signature": "if (containingClassVisibility == Visibilities.Private || containingClassVisibility == Visibilities.PrivateToThis) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rootSet<NUM_LIT> =", "body": "stat<NUM_LIT>.rootSet<EOL>"}
{"signature": "val preJavaClasspathKey =", "body": "variantData.registerPreJavacGeneratedBytecode(preJavaKotlinOutput)<EOL>"}
{"signature": "fun addMetadataDiff(diff: ListEntryDiff) {", "body": "<EOL><INDENT><INDENT>metadataDiffs.add(diff.toDiffEntry())<EOL><INDENT><INDENT>val missing<NUM_LIT>Defect = DefectType(<STR_LIT>, <STR_LIT>, METADATA_A)<EOL><INDENT><INDENT>val missing<NUM_LIT>Defect = DefectType(<STR_LIT>, <STR_LIT>, METADATA_A)<EOL><INDENT><INDENT>reportMissing(diff, missing<NUM_LIT>Defect, missing<NUM_LIT>Defect, METADATA_A)<EOL><INDENT>}"}
{"signature": "val ObjectFilesPhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, ObjectFilesPhaseInput>(<EOL>"}
{"signature": "val additionalPackages =", "body": "mutableListOf<PackageFragmentProvider>()<EOL>"}
{"signature": "val qS<NUM_LIT> =", "body": "<NUM_LIT>e<NUM_LIT> <EOL>"}
{"signature": "if (size <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (n in <NUM_LIT> * Short.SIZE_BITS..<NUM_LIT> * Short.SIZE_BITS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val rl = value.rotateLeft(n)<EOL><INDENT><INDENT><INDENT><INDENT>val rr = value.rotateRight(-n)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rl, rr)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rl, value.rotateLeft(n % Short.SIZE_BITS))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rr, value.rotateRight((-n) % Short.SIZE_BITS))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, value.rotateLeft(n).rotateLeft(-n))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, value.rotateRight(n).rotateRight(-n))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val withEmail =", "body": "User(name = <STR_LIT>, age = <NUM_LIT>, email = <STR_LIT>)<EOL>"}
{"signature": "var transitivelyMostSpecific =", "body": "overridables.first()<EOL>"}
{"signature": "val finalScope =", "body": "fqName.pathSegments()<EOL>"}
{"signature": "val processedSources =", "body": "HashSet<KtFile>()<EOL>"}
{"signature": "val listOfIntType =", "body": "KotlinTypeFactory.simpleNotNullType(<EOL>"}
{"signature": "fun expectMinMax(min: UShort, max: UShort, elements: UShortArray) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minOrNull())<EOL><INDENT><INDENT>assertEquals(max, elements.maxOrNull())<EOL><INDENT><INDENT>assertEquals(min, elements.min())<EOL><INDENT><INDENT>assertEquals(max, elements.max())<EOL><INDENT>}"}
{"signature": "val treeMakerImportMethod =", "body": "TreeMaker::class.java.declaredMethods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val moduleFolders =", "body": "<EOL><INDENT><INDENT><INDENT>if (filterModules)<EOL>"}
{"signature": "fun visitTypeParameterRef(typeParameterRef: FirTypeParameterRef) {", "body": "<EOL><INDENT><INDENT>visitElement(typeParameterRef)<EOL><INDENT>}"}
{"signature": "val receiverComputable =", "body": "(expression.receiver?.accept(this, data) ?: true)<EOL>"}
{"signature": "else if (it is IrExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.print()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val JAR_COLLECTIONS_LIB_PATHS =", "body": "arrayOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val possibleTypes =", "body": "<EOL><INDENT><INDENT><INDENT>DataFlowAnalyzer.getAllPossibleTypes(subjectType, context, subjectDataFlowValue, context.languageVersionSettings)<EOL>"}
{"signature": "when (val classifier = type.coerceToAny().toSymbol(session)?.fir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirRegularClass -> classifier<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirTypeParameter -> classifier.erasedUpperBound<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (orderRoot.scope != POrderRoot.Scope.COMPILE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>args.add(<NUM_LIT>, <STR_LIT> to orderRoot.scope.toString())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val canonicalName =", "body": "StringBuilder()<EOL>"}
{"signature": "var exceptionOccurred =", "body": "false<EOL>"}
{"signature": "val baseDispatchReceiver =", "body": "qualifiedAccess.findIrDispatchReceiver(explicitReceiverExpression)<EOL>"}
{"signature": "fun afterBody(loopExit: Label) {", "body": "<EOL><INDENT><INDENT>codegen.markStartLineNumber(forExpression)<EOL><INDENT><INDENT>incrementAndCheckPostCondition(loopExit)<EOL><INDENT><INDENT>v.mark(bodyEnd)<EOL><INDENT>}"}
{"signature": "val PARTIAL_LINKAGE_WARNING_REGEX =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val corePackageIndex =", "body": "project.getService(PackageIndex::class.java) as CorePackageIndex<EOL>"}
{"signature": "fun deprecatedIdentityEquals(a: Int, b: Int) {", "body": "<EOL><INDENT><!DEPRECATED_IDENTITY_EQUALS!>a === b<!><EOL>}"}
{"signature": "if (resolvedCall.shouldBeSubstituteWithStubTypes()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolvedCall.setResolvedCallSubstitutor(oldSubstitutor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun boxExternalInterface(i: ExternalInterface) {", "body": "<EOL><INDENT>anyExample(i)<EOL><INDENT>anyOrNullExample(i)<EOL><INDENT>genericExample(i)<EOL><INDENT>genericOrNullExample(i)<EOL><INDENT>dynamicExample(i)<EOL>}"}
{"signature": "if (constantConvertedArgument != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.record(BindingContext.COMPILE_TIME_VALUE, argumentExpression, constantConvertedArgument)<EOL><INDENT><INDENT><INDENT><INDENT>BindingContextUtils.updateRecordedType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>constantConvertedArgument.unknownIntegerType, argumentExpression, context.trace, false<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun returnValue(returnExpression: KtExpression, returnValue: PseudoValue, subroutine: KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT>val exitPoint = getSubroutineExitPoint(subroutine) ?: return<EOL><INDENT><INDENT><INDENT>handleJumpInsideTryFinally(exitPoint)<EOL><INDENT><INDENT><INDENT>add(ReturnValueInstruction(returnExpression, currentScope, exitPoint, returnValue, subroutine))<EOL><INDENT><INDENT>}"}
{"signature": "fun f(x: Throwable) {", "body": "throw x }"}
{"signature": "val argumentToParameterMapping =", "body": "linkedMapOf<FirExpression, FirValueParameter>()<EOL>"}
{"signature": "if (!omitEmptyLines) {", "body": "<EOL><INDENT><INDENT><INDENT>out(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (firSymbol.fir.source?.kind == KtFakeSourceElementKind.ScriptParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>return KtFirScriptParameterSymbolPointer(name, analysisSession.createOwnerPointer(this))<EOL><INDENT><INDENT>}"}
{"signature": "val markerDesc =", "body": "classDescriptor.getKSerializerConstructorMarker()<EOL>"}
{"signature": "val outgoingDependency =", "body": "compressedModules.getValue(outgoingDependencyId)<EOL>"}
{"signature": "val dependencySuffix =", "body": "NativeDistributionTypeProvider(project).getDistributionType().suffix<EOL>"}
{"signature": "if (!isVisible(descriptor, fromToCheck, position, languageVersionSettings)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.INVISIBLE_REFERENCE.on(referenceExpression, descriptor, descriptor.visibility, descriptor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (this in 'a'..'z' || this in 'A'..'Z' || this in '<NUM_LIT>'..'<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val writefds =", "body": "alloc<fd_set>()<EOL>"}
{"signature": "fun testVarargOfNNothing(<!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> v: Nothing?) {", "body": "}<EOL><EOL><INDENT>fun <T : Nothing?> testVarargOfT(<!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> v: T) {}"}
{"signature": "if (constructorDescriptor.containingDeclaration.kind == ClassKind.ENUM_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(EXPECTED_ENUM_CONSTRUCTOR.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "when (val i = dec.decodeElementIndex(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CompositeDecoder.DECODE_DONE -> break@loop<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> iv = dec.decodeIntElement(descriptor, i)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> throw SerializationException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var OPP =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun takeUInt(u: UInt) {", "body": "}<EOL>fun takeULong(u: ULong) {}"}
{"signature": "val iterable =", "body": "deserialize(forInProto.iterable)<EOL>"}
{"signature": "val seqMappedIterable =", "body": "sequenceOf(<NUM_LIT>, <NUM_LIT>).map { <NUM_LIT>.it }.flatten()<EOL>"}
{"signature": "if (!outputDir.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>outputDir.mkdirs()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (nodes.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>actualDrain.edges += nodes[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val plan =", "body": "planner.extractPlanFromConstraints(edits)<EOL>"}
{"signature": "if (kotlinAsJavaSupport.packageExists(fqName, allScope)) {", "body": "<EOL><INDENT><INDENT><INDENT>KtLightPackage(psiManager, fqName, allScope)<EOL><INDENT><INDENT>}"}
{"signature": "if (testRun.testCase.kind == TestKind.STANDALONE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>testReport.checkDisabled()<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return verifyNoSuchTests(testReport.failedTests, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor.modality == Modality.ABSTRACT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.SYNCHRONIZED_ON_ABSTRACT.on(annotationEntry))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var lookAheadTokenIndex =", "body": "<NUM_LIT><INDENT> // Next token index."}
{"signature": "val testCallableRef<NUM_LIT> =", "body": "::`__`<EOL>"}
{"signature": "var nextUnnamedLibraryIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val nativeBacked =", "body": "object : NativeBacked {}<EOL>"}
{"signature": "val isFloatingPoint =", "body": "args[<NUM_LIT>].type.isFloatingPoint()<EOL>"}
{"signature": "while(threadNum <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>if(threadNum < <NUM_LIT> * processors)<EOL><INDENT><INDENT><INDENT>threadNum += <NUM_LIT><EOL><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT>threadNum *= <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (resultingDescriptor.baseDescriptorForSynthetic.isFun) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.FUN_INTERFACE_CONSTRUCTOR_REFERENCE.on(reportOn)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val SaveAdditionalCacheInfoPhase =", "body": "createSimpleNamedCompilerPhase<NativeGenerationState, Unit>(<EOL>"}
{"signature": "fun test(foo: Int.(String) -> Unit) {", "body": "<EOL><INDENT><NUM_LIT>foo(<STR_LIT>)<EOL><INDENT><NUM_LIT>foo(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p<NUM_LIT><!> = <STR_LIT>)<!><EOL><INDENT><NUM_LIT>foo(<!NAMED_ARGUMENTS_NOT_ALLOWED!>p<NUM_LIT><!> = <STR_LIT>)<EOL>}"}
{"signature": "val manifestFingerprints =", "body": "library.serializedIrFileFingerprints?.takeIf { it.size == sourceFiles.size } ?: return null<EOL>"}
{"signature": "if (runInitializer) {", "body": "<EOL><INDENT><INDENT>wasmExports._initialize();<EOL><INDENT>}"}
{"signature": "val iteratorHasNext =", "body": "iteratorClass.getMethodWithoutArguments(<STR_LIT>)<EOL>"}
{"signature": "fun withInlineClassArgumentOut(a: AsList<UInt>) {", "body": "}<EOL><INDENT>fun withInlineClassArgumentIn(a: AsCmp<UInt>) {}"}
{"signature": "val existingBecnhmarks =", "body": "benchmarksDispatcher.getBenchmarksList(currentBuildInfo.buildNumber,<EOL>"}
{"signature": "if (isEndInclusive) {", "body": "<EOL><INDENT><INDENT><INDENT>super.checkPostConditionAndIncrement(loopExit)<EOL><INDENT><INDENT>}"}
{"signature": "val newLabel =", "body": "synthetic(LabelNode(Label()))<EOL>"}
{"signature": "val resolvedKotlinVersion =", "body": "<STR_LIT><EOL>"}
{"signature": "val importBuilder =", "body": "Import.newBuilder()<EOL>"}
{"signature": "val constProp =", "body": "<STR_LIT><EOL>"}
{"signature": "fun gc() {", "body": "<INDENT><INDENT>// An attempt to make sure the GC is fine after detachObjCObject.<INDENT><INDENT>kotlin.native.runtime.GC.collect()<INDENT><INDENT>kotlin.native.runtime.GC.collect()<INDENT>}"}
{"signature": "when (languageVersionSettings.supportsFeature(ProhibitQualifiedAccessToUninitializedEnumEntry)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>true -> expression.getTopmostParentQualifiedExpressionForSelector() ?: expression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>false -> expression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val curNanos =", "body": "System.nanoTime()<EOL>"}
{"signature": "if (namedAccessorCount > <NUM_LIT> && namedAccessorCount < descriptor.accessors.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJs.JS_NAME_IS_NOT_ON_ALL_ACCESSORS.on(declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val importedExpr =", "body": "treeMaker.FqName(importedFqName.asString())<EOL>"}
{"signature": "for (parameter in valueParameters) {", "body": "<EOL><INDENT><INDENT>appendErasedType(parameter.type)<EOL><INDENT>}"}
{"signature": "val createResult =", "body": "symbols.kotlinResult.owner.constructors.single { it.isPrimary }<EOL>"}
{"signature": "if (targetBackend == TargetBackend.WASM) {", "body": "<EOL><INDENT><INDENT><INDENT>specificFeatures[LanguageFeature.JsAllowImplementingFunctionInterface] = LanguageFeature.State.ENABLED<EOL><INDENT><INDENT>}"}
{"signature": "val previousVersionIntArray =", "body": "BinaryVersion.parseVersionArray(previousValue)<EOL>"}
{"signature": "fun addVariableIndex(index: Int) {", "body": "<EOL><INDENT><INDENT>associatedVariables.add(index)<EOL><INDENT>}"}
{"signature": "val mainScope =", "body": "CoroutineScope(<EOL>"}
{"signature": "fun testIgnoredBoxed() {", "body": "<EOL><INDENT>returnBoxed()<EOL>}"}
{"signature": "val boolArray<NUM_LIT> =", "body": "copyBooleanArray(*boolArray)<EOL>"}
{"signature": "val hasDefaultAccessors =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(property.getter == null || property.getter is FirDefaultPropertyAccessor) &&<EOL>"}
{"signature": "var xChar =", "body": "<NUM_LIT>toChar()<EOL>"}
{"signature": "val initFunctionProto =", "body": "kInitFuncType.toProto(<STR_LIT>, null, LLVMLinkage.LLVMPrivateLinkage)<EOL>"}
{"signature": "val isIdeaProjectLevelKey =", "body": "extrasKeyOf<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "if (typeVariableLowerBound.isMarkedNullable()) {", "body": "<INDENT><INDENT><INDENT>// here is important that superType is singleClassifierType<INDENT><INDENT><INDENT>return simplifiedSuperType.anyBound(::isMyTypeVariable) ||<INDENT><INDENT><INDENT><INDENT><INDENT>isSubtypeOfByTypeChecker(nullableNothingType(), simplifiedSuperType)<INDENT><INDENT>}"}
{"signature": "val floatingPointPrimitives =", "body": "setOf(Double, Float)<EOL>"}
{"signature": "val targetNames =", "body": "rawValue.split(',')<EOL>"}
{"signature": "val jvmLibrariesProvidedByDefault =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val KONAN_DISTRIBUTION_COMMON_LIBS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "for (superTypeRef in target.superTypeRefs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkTypeRefIsResolved(superTypeRef, <STR_LIT>, target)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val purgeUserLibs =", "body": "arguments.purgeUserLibs<EOL>"}
{"signature": "val calleeName =", "body": "method.callableName.asString()<EOL>"}
{"signature": "val sequenceWithNulls =", "body": "sequenceOf(<STR_LIT>, null, <STR_LIT>)<EOL>"}
{"signature": "val bitInSlot =", "body": "i % <NUM_LIT><EOL>"}
{"signature": "if (overrideFunctionIsComposable != hasComposableAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ComposeErrors.CONFLICTING_OVERLOADS.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(descriptor, override)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (firCandidate is FirBlock) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>firCandidate.statements.forEach(::addCandidate)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (top.size == <NUM_LIT> && insn.opcode == Opcodes.POP<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>interpreter.processPopInstruction(insn, frame.peek(<NUM_LIT>)!!)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((typeParameter, classTypeParameter) in typeParameters.zip(classTypeParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val typeProjection = substitutor.substitution[typeParameter.defaultType] ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>substitutionMap[classTypeParameter.typeConstructor] = typeProjection<EOL><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expandedDeclaration =", "body": "declaration.expandedConeType?.lookupTag?.toSymbol(session)?.fir ?: return null<EOL>"}
{"signature": "if (type.isValueOrPrimitive()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.FORBIDDEN_SYNCHRONIZED_BY_VALUE_CLASSES_OR_PRIMITIVES.on(reportOn, type))<EOL><INDENT><INDENT>}"}
{"signature": "val fieldsMissingLabel =", "body": "Label()<EOL>"}
{"signature": "val functionTarget =", "body": "FirFunctionTarget(null, isLambda = false)<EOL>"}
{"signature": "val receiversCount =", "body": "listOf(expression.dispatchReceiver, expression.extensionReceiver).count { it != null }<EOL>"}
{"signature": "val scopeStack =", "body": "mutableListOf<ScopeWithIr>()<EOL>"}
{"signature": "if (!function.typeParameters.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if ((resultValue and <NUM_LIT>xF<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>_<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>UL) == <NUM_LIT>UL) {", "body": "resultValue = resultValue shl <NUM_LIT>; exp -= <NUM_LIT> }"}
{"signature": "val conflictingInterfaceMembers =", "body": "linkedSetOf<CallableMemberDescriptor>()<EOL>"}
{"signature": "val intArray =", "body": "uintArray.toIntArray()<EOL>"}
{"signature": "val baseId =", "body": "<STR_LIT><EOL>"}
{"signature": "val hello =", "body": "myRun { x = <NUM_LIT>; <STR_LIT> }<EOL>"}
{"signature": "val lastLineImports =", "body": "lexicalScopeAfterLastLine.parentsWithSelf.firstIsInstance<ImportingScope>()<EOL>"}
{"signature": "val primitiveArrayId =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>StandardClassIds.primitiveArrayTypeByElementType[classId] ?: StandardClassIds.unsignedArrayTypeByElementType[classId]<EOL>"}
{"signature": "val CHAR_NAMED_GROUP<INDENT><INDENT>  =", "body": "<NUM_LIT>x9<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or '('.toInt()<EOL>"}
{"signature": "val typedUsage =", "body": "variant.attributes.getAttribute(Usage.USAGE_ATTRIBUTE)<EOL>"}
{"signature": "if (computationStatus != StatusComputationSession.StatusComputationStatus.Computed) {", "body": "<EOL><INDENT><INDENT><INDENT>transformClassStatus(firClass)<EOL><INDENT><INDENT><INDENT>transformValueClassRepresentation(firClass)<EOL><INDENT><INDENT>}"}
{"signature": "fun rec(i: Int) {", "body": "<EOL><INDENT><INDENT>if (i <= <NUM_LIT>) return<EOL><INDENT><INDENT>O.rec(i - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val ifNonNull =", "body": "insn.next as JumpInsnNode<EOL>"}
{"signature": "if (argRes != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (old.getExtensionCount(BuiltInsProtoBuf.constructorAnnotation) != new.getExtensionCount(BuiltInsProtoBuf.constructorAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "var labels =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val scopeForTypeParameter =", "body": "getScopeForTypeParameter(c, typeParameter)<EOL>"}
{"signature": "fun funWithBlockBody() {", "body": "<EOL>}"}
{"signature": "fun testConstFromThisFile() {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL><INDENT>js(<STR_LIT> + constFromThisFile + <STR_LIT>)<EOL>}"}
{"signature": "val newVtableSlots =", "body": "mutableListOf<OverriddenFunctionInfo>()<EOL>"}
{"signature": "val unsigned<NUM_LIT> =", "body": "t<NUM_LIT>.getUnsignedType()<EOL>"}
{"signature": "var prevVars =", "body": "SmartList<JsVars.JsVar>()<EOL>"}
{"signature": "fun a(body: () -> Unit) {", "body": "<EOL><INDENT>body()<EOL><INDENT>z += <STR_LIT><EOL>}"}
{"signature": "if (mutedTest.isFlaky) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>invocation.proceed()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val qualifierArgumentStartIndex =", "body": "psiTypeArguments.size<EOL>"}
{"signature": "val specificCallSite =", "body": "storage.filterKeys { it != null } as Map<AnnotationUseSiteTarget, List<DeprecationInfoProvider>><EOL>"}
{"signature": "var returnVariableIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val castedClassName =", "body": "state.irClass.fqName<EOL>"}
{"signature": "val enumEntryName =", "body": "declaration.name<EOL>"}
{"signature": "val functionsAndAccessors =", "body": "functions + properties.mapNotNull { it.getter } + properties.mapNotNull { it.setter }<EOL>"}
{"signature": "if (!root.shouldBeSkipped && visitedModuleFragments.add(root)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>root.transformVoid(DeclarationTransformer(startingFile = null))<EOL><INDENT><INDENT><INDENT><INDENT>root.transformVoid(ExpressionTransformer(startingFile = null))<EOL><INDENT><INDENT><INDENT><INDENT>root.transformVoid(NonLocalReturnsPatcher(startingFile = null))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val RemoveRedundantCallsToStaticInitializersPhase =", "body": "createSimpleNamedCompilerPhase<NativeGenerationState, RedundantCallsInput>(<EOL>"}
{"signature": "if (currentHash == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>changedClasses.add(key)<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allBitcodeDependencies =", "body": "mutableMapOf<KonanLibrary, DependenciesTracker.ResolvedDependency>()<EOL>"}
{"signature": "if (this in '<NUM_LIT>'..'<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "fun visitLoopConditionExitNode(node: LoopConditionExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (param.variance != Variance.INVARIANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(param.variance.label)<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(result: Result) {", "body": "<EOL><INDENT><INDENT>saveResult(result)<EOL><INDENT>}"}
{"signature": "if (v === StrictBasicValue.UNINITIALIZED_VALUE || w === StrictBasicValue.UNINITIALIZED_VALUE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return StrictBasicValue.UNINITIALIZED_VALUE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val argumentsListForSpecialCheck =", "body": "listOf(<EOL>"}
{"signature": "val returnArgumentIfItIsKotlinAny =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val testsByType =", "body": "testsByParagraph.getOrCreate<JsonObject>(testType.type)<EOL>"}
{"signature": "fun null<NUM_LIT>ExternRef(x: ExternRef?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "val CONTINUATION_INTERFACE_FQ_NAME =", "body": "COROUTINES_PACKAGE_FQ_NAME.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val ASM_API_VERSION_FOR_CLASS_READING =", "body": "Opcodes.API_VERSION<EOL>"}
{"signature": "val varianceConflictDiagnosticData =", "body": "VarianceConflictDiagnosticData(containingType, classifierDescriptor, position)<EOL>"}
{"signature": "val dump<NUM_LIT> =", "body": "file<NUM_LIT>.readText().trimTrailingWhitespacesAndRemoveRedundantEmptyLinesAtTheEnd()<EOL>"}
{"signature": "package<EOL><INDENT>override fun <T : Any> findClass(<EOL>.", "body": ""}
{"signature": "val EQUALS =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val nextMetadataVersion =", "body": "languageVersion.toMetadataVersion().next()<EOL>"}
{"signature": "if (jsOutputName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>p.setProperty(KLIB_PROPERTY_JS_OUTPUT_NAME, jsOutputName)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinObject =", "body": "KotlinObject()<EOL>"}
{"signature": "val exp =", "body": "if (it is IrSpreadElement) it.expression else (it as IrExpression)<EOL>"}
{"signature": "val localGroup =", "body": "<STR_LIT><EOL>"}
{"signature": "val argumentMappingByOriginal =", "body": "functionCall.argumentMappingByOriginal<EOL>"}
{"signature": "if (includeFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this += file<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val originalB =", "body": "b.asDefinitelyNotNullType()?.original() ?: b<EOL>"}
{"signature": "import $baseTestClassPackage.", "body": "$baseTestClassName;\")<EOL>"}
{"signature": "if (function.valueParameters.size != expectedValueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(EXPECTED_PARAMETERS_NUMBER_MISMATCH.on(function, expectedParameterTypes!!.size, expectedParameterTypes))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allBuiltinTypes =", "body": "primitiveTypes + unsignedTypes + this.String + this.Unit + this.Any + this.Enum<EOL>"}
{"signature": "fun exitBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitBinaryLogicExpression(binaryLogicExpression).mergeBinaryLogicOperatorFlow()<EOL><INDENT>}"}
{"signature": "fun computeAnnotationProperties(name: Name, result: MutableCollection<PropertyDescriptor>) {", "body": "<EOL><INDENT><INDENT>val method = declaredMemberIndex().findMethodsByName(name).singleOrNull() ?: return<EOL><INDENT><INDENT>result.add(createPropertyDescriptorWithDefaultGetter(method, modality = Modality.FINAL))<EOL><INDENT>}"}
{"signature": "val tools =", "body": "analysisSession.extensionTools<EOL>"}
{"signature": "if (declaration.propertySymbol.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, getProperDiagnostic(context), context)<EOL><INDENT><INDENT>}"}
{"signature": "val untilFunctionName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val ERRORS_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val mapSet =", "body": "pluginContext.irBuiltIns.mutableMapClass.owner.functions<EOL>"}
{"signature": "val zOne =", "body": "Z(<NUM_LIT>U, -<NUM_LIT>)<EOL>"}
{"signature": "when (callKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>FakeCallKind.ITERATOR -> Errors.ITERATOR_MISSING.on(reportErrorsOn)<EOL><INDENT><INDENT><INDENT><INDENT>FakeCallKind.COMPONENT -> if (receiver != null) Errors.COMPONENT_FUNCTION_MISSING.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportErrorsOn,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>receiver.type<EOL><INDENT><INDENT><INDENT><INDENT>) else null<EOL><INDENT><INDENT><INDENT><INDENT>FakeCallKind.OTHER -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun G(s: String) {", "body": "}"}
{"signature": "fun internalFun<NUM_LIT>() {", "body": "}   // OK: internal -> internal<INDENT>actual fun protectedFun<NUM_LIT>() {}"}
{"signature": "val overriddenFromInterface =", "body": "findImplementationFromInterface(descriptor) ?: return false<EOL>"}
{"signature": "val hashCodeMethod =", "body": "getMethodOfAny(<STR_LIT>)<EOL>"}
{"signature": "import <!UNRESOLVED_IMPORT!>com<!>.", "body": "unknown<EOL>"}
{"signature": "if (CompilerSystemProperties.JAVA_RMI_SERVER_HOSTNAME.value == null) {", "body": "<EOL><INDENT><INDENT>CompilerSystemProperties.JAVA_RMI_SERVER_HOSTNAME.value = LoopbackNetworkInterface.loopbackInetAddressName<EOL><INDENT>}"}
{"signature": "if (index < <NUM_LIT> || valuesArray!![index] != entry.value) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "val nameToOperator =", "body": "mapOf(<EOL>"}
{"signature": "fun testRepeatableAnnotations(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT>}"}
{"signature": "if (state == State.NAMED_ONLY_ARGUMENTS) {", "body": "<EOL><INDENT><INDENT><INDENT>addDiagnostic(MixingNamedAndPositionArguments(argument))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (compiler) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is K<NUM_LIT>JSCompiler -> compileJsLibrary(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>libraryName,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>additionalOptions = libraryOptions<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>is K<NUM_LIT>JVMCompiler -> compileLibrary(libraryName, additionalOptions = libraryOptions)<EOL><INDENT><INDENT><INDENT><INDENT>else -> throw UnsupportedOperationException(compiler.toString())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (n == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "if (!arguments.noReflect && !arguments.noStdlib) {", "body": "<EOL><INDENT><INDENT>addRoot(<STR_LIT>, PathUtil.KOTLIN_JAVA_REFLECT_JAR, reflectPath, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val RESOURCES_ZIP_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val newLengthHint =", "body": "length - oldValueLength + newValue.length<EOL>"}
{"signature": "fun multipleExitPointsWithOrdinaryInline(b: Boolean) {", "body": "if (b) empty() else ordinaryInline() }"}
{"signature": "val runCount =", "body": "System.getProperty(<STR_LIT>).toInt()<EOL>"}
{"signature": "val functionSig =", "body": "LlvmFunctionSignature(LlvmRetType(codegen.kObjHeaderPtr), listOf(LlvmParamType(llvm.int<NUM_LIT>PtrType), LlvmParamType(codegen.kObjHeaderPtrPtr)))<EOL>"}
{"signature": "for (i in <NUM_LIT>u until <NUM_LIT>u step zero()) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val readManifest =", "body": "LibraryAbiReader.readAbiInfo(libraryFile).manifest<EOL>"}
{"signature": "val targetOutputDirectory =", "body": "CommonizerOutputFileLayout.resolveCommonizedDirectory(rootOutputDirectory, target)<EOL>"}
{"signature": "val pi_o_<NUM_LIT> =", "body": "1.5707963<NUM_LIT>67948965580E+<NUM_LIT> <EOL>"}
{"signature": "val entries<NUM_LIT> =", "body": "arrayOf(impls<Intf>(Component<NUM_LIT>::class), clazz<Component<NUM_LIT>>())<EOL>"}
{"signature": "val arg =", "body": "args[index]<EOL>"}
{"signature": "val arrayOfInt =", "body": "<STR_LIT><EOL>"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, value: V) {", "body": "<EOL><INDENT><INDENT>this.v = value<EOL><INDENT>}"}
{"signature": "fun generateFunctionReference(v: InstructionAdapter, function: IrFunction) {", "body": "<EOL><INDENT><INDENT>generateCallableReference(v, function, function, FUNCTION_REFERENCE_IMPL, true)<EOL><INDENT>}"}
{"signature": "if (!inliningContext.isInliningLambda) {", "body": "<EOL><INDENT><INDENT><INDENT>inliningContext.root.state.globalInlineContext.recordTypeFromInlineFunction(info.oldClassName)<EOL><INDENT><INDENT>}"}
{"signature": "while (currentClass.isArray) {", "body": "<EOL><INDENT><INDENT><INDENT>dimensions++<EOL><INDENT><INDENT><INDENT>currentClass = currentClass.componentType<EOL><INDENT><INDENT>}"}
{"signature": "if (flexibleType is RawType) {", "body": "<EOL><INDENT><INDENT><INDENT>irAnnotations.addIfNotNull(extensions.generateRawTypeAnnotationCall())<EOL><INDENT><INDENT>}"}
{"signature": "if (irWhen.branches.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val irBlock = IrBlockImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.startOffsetSkippingComments,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.endOffset,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.irBuiltIns.unitType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>IrStatementOrigin.WHEN<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>irBlock.statements.add(irSubject)<EOL><INDENT><INDENT><INDENT><INDENT>irBlock<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (property.delegateFieldSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>replacePropertyReferenceTypeInDelegateAccessors(property)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(m: MyMap<String, Int>) {", "body": "<EOL><INDENT><INDENT><expr>++m[<STR_LIT>]</expr><EOL><INDENT>}"}
{"signature": "fun setValue(thisRef: Receiver, property: KProperty<*>, value: T) {", "body": "<EOL><INDENT><INDENT>thisRef.extras[key] = value<EOL><INDENT>}"}
{"signature": "val annotatedKtDeclaration =", "body": "lightModifierListOwner.kotlinOrigin as? KtDeclaration<EOL>"}
{"signature": "val libDirs =", "body": "listOf(<EOL>"}
{"signature": "fun testInversionSpilling(x: Any?) {", "body": "<EOL><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><EOL><INDENT>if (notIsString(x)) else x.length<EOL><EOL><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL>}"}
{"signature": "val otherIterator =", "body": "other.iterator()<EOL>"}
{"signature": "if (!context.session.languageVersionSettings.supportsFeature(LanguageFeature.SuspendFunctionsInFunInterfaces)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (inFunInterface) abstractFunctionSymbol.source else declaration.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FUN_INTERFACE_WITH_SUSPEND_FUNCTION,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (mode is ResolutionMode.LambdaResolution && mode.expectedReturnTypeRef == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>withLambdaBeingAnalyzedInDependentContext(anonymousFunction.symbol, f)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val javaClass =", "body": "value::class.java<EOL>"}
{"signature": "if (allowCompanionInInterface && descriptor.isCompanionObject() && containingDeclarationsIsInterface && descriptor.name != DEFAULT_NAME_FOR_COMPANION_OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJs.NAMED_COMPANION_IN_EXTERNAL_INTERFACE.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "val switchableExtensionDeclarationsSymbolProvider =", "body": "FirSwitchableExtensionDeclarationsSymbolProvider<EOL>"}
{"signature": "val sourceFilesFromCache =", "body": "cacheArtifact.getSourceFiles()<EOL>"}
{"signature": "val changedSnapshot =", "body": "<EOL><INDENT><INDENT><INDENT>ClasspathSnapshot.ClasspathSnapshotFactory.createCurrent(cacheDir, listOf(), listOf(), setOf(dataFile, libraryDataFile))<EOL>"}
{"signature": "fun visitTryExpressionEnterNode(node: TryExpressionEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTryExpressionEnterNode(node)<EOL><INDENT>}"}
{"signature": "val moduleCompilationOutput =", "body": "ModuleCompilationOutput(bitcodeFile, dependencies)<EOL>"}
{"signature": "if (declaration !is IrFunction || declaration.isExternalOrInheritedFromExternal()) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val numberOfTrailingParameters =", "body": "bridge.valueParameters.size - (varargIndex + <NUM_LIT>)<EOL>"}
{"signature": "val recordedCompileTimeConstant =", "body": "ConstantExpressionEvaluator.getPossiblyErrorConstant(expression, trace.bindingContext)<EOL>"}
{"signature": "if (!checkRestrictsSuspension(expression, enclosingSuspendFunction, symbol, context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirErrors.ILLEGAL_RESTRICTED_SUSPENDING_FUNCTION_CALL, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val specializedEqualsCache =", "body": "storageManager.createCacheWithNotNullValues<IrClass, IrSimpleFunction>()<EOL>"}
{"signature": "val baseClassSuite   =", "body": "getKonanTestClass(<STR_LIT>)<EOL>"}
{"signature": "val xmlInput =", "body": "byteBuilder.toString()<EOL>"}
{"signature": "if (!fromConstructor && (decl.hasBackingField || decl.delegateFieldSymbol != null)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(decl.source, FirJvmErrors.FIELD_IN_JVM_RECORD, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (index in <NUM_LIT> until count) {", "body": "<EOL><INDENT><INDENT>res = (<NUM_LIT><NUM_LIT>U * res) + (p[pIndex + index] - '<NUM_LIT>').toUInt()<EOL><INDENT>}"}
{"signature": "fun visitField(field: FirField) {", "body": "<EOL><INDENT><INDENT>visitElement(field)<EOL><INDENT>}"}
{"signature": "fun runBenchmark() {", "body": "<EOL><INDENT><INDENT>main()<EOL><INDENT><INDENT>hello()<EOL><INDENT><INDENT>console.log(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val product =", "body": "Sign.mult.toString()<EOL>"}
{"signature": "val gotDTS =", "body": "dtsFile.readText()<EOL>"}
{"signature": "package = <NUM_LIT>,<EOL>.", "body": ""}
{"signature": "fun testDelegationToInterfaceWithDeprecation() {", "body": "<EOL><INDENT><INDENT>doTestWithDependency(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val buildCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val mainResDir =", "body": "projectPath.resolve(<STR_LIT>).apply { createDirectories() }<EOL>"}
{"signature": "val unescapeRe =", "body": "<STR_LIT><STR_LIT>\\\\,])<STR_LIT>\".toRegex()<EOL>"}
{"signature": "var publicField =", "body": "s<NUM_LIT>;<EOL>"}
{"signature": "for (typeParameterDescriptor in descriptor.typeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.addTypeParameter(local.typeParameter(typeParameterDescriptor))<EOL><INDENT><INDENT>}"}
{"signature": "val updateInductionVarIndex =", "body": "doWhileLoopNext.statements<EOL>"}
{"signature": "val toolsJar =", "body": "it.currentJvmJdkToolsJar.orNull<EOL>"}
{"signature": "if (result.finallyBlock != null) {", "body": "<EOL><INDENT><INDENT><INDENT>dataFlowAnalyzer.enterFinallyBlock()<EOL><INDENT><INDENT><INDENT>result = result.transformFinallyBlock(transformer, ResolutionMode.ContextIndependent)<EOL><INDENT><INDENT><INDENT>dataFlowAnalyzer.exitFinallyBlock()<EOL><INDENT><INDENT>}"}
{"signature": "fun assertPattern(expected: String, pattern: String) {", "body": "<EOL><INDENT><INDENT>assertEquals(expected, namePatternToRegex(pattern).pattern)<EOL><INDENT>}"}
{"signature": "package bar<EOL>.", "body": ""}
{"signature": "when (inlinedClass.classId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>UnsignedType.UBYTE.classId -> return listOf(LlvmParameterAttribute.ZeroExt)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>UnsignedType.USHORT.classId -> return listOf(LlvmParameterAttribute.ZeroExt)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val usefulConstraints =", "body": "SmartList<Constraint>()<EOL>"}
{"signature": "var progression =", "body": "'A'..'Z'<EOL>"}
{"signature": "if (name.imported && name !in importedNames) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.imported = true<EOL><INDENT><INDENT>}"}
{"signature": "val shortRange =", "body": "<NUM_LIT>toShort()..<NUM_LIT>toShort()<EOL>"}
{"signature": "if (shouldCheckSupertypeOnTypealiasWithTypeProjection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkSupertypeOnTypeAliasWithTypeProjection(coneType, fullyExpandedType, superTypeRef, reporter, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(b: B){", "body": "<EOL><INDENT>b.size<EOL><INDENT>b.add(<NUM_LIT>,<NUM_LIT>)<EOL><INDENT>b.add(<NUM_LIT>)<EOL><INDENT>b.get(<NUM_LIT>)<EOL><INDENT>b.remove(<NUM_LIT>)<EOL><INDENT>b.removeAt(<NUM_LIT>)<EOL><INDENT>b.removeFirst()<EOL>}"}
{"signature": "val iAnn =", "body": "Ann(intArrayOf(<NUM_LIT>))<EOL>"}
{"signature": "val imports =", "body": "jsModuleImports<EOL>"}
{"signature": "val stackTraceAttachment =", "body": "XCTAttachment.attachmentWithUniformTypeIdentifier(<EOL>"}
{"signature": "val test_<NUM_LIT> =", "body": "object : TypeToken<<!WRONG_ANNOTATION_TARGET!>@Ann<!> String>() {}<EOL>"}
{"signature": "if (firstOption.descriptor.type.hasParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>saveAsOption(firstOption, option.substring(<NUM_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val PRIMITIVE_TO_WRAPPER =", "body": "PRIMITIVE_CLASSES.map { it.javaPrimitiveType to it.javaObjectType }.toMap()<EOL>"}
{"signature": "val doWhileProto =", "body": "proto.doWhileStatement<EOL>"}
{"signature": "val ARRAY_GET =", "body": "<STR_LIT><EOL>"}
{"signature": "val memberScopeOfKotlinPackage =", "body": "module.getPackage(StandardNames.BUILT_INS_PACKAGE_FQ_NAME).memberScope<EOL>"}
{"signature": "val enhancedActualType =", "body": "substitutor.substituteOrNull(actualType)<EOL>"}
{"signature": "val greatest =", "body": "splayTree.findGreatestLessThan(key)<EOL>"}
{"signature": "val testFileText =", "body": "originalFile.readText()<EOL>"}
{"signature": "val returnArgumentsAnalysisResult =", "body": "resolutionCallbacks.analyzeAndGetLambdaReturnArguments(<EOL>"}
{"signature": "val javaApiUsages =", "body": "setOf(JAVA_API, <STR_LIT>)<EOL>"}
{"signature": "val mainVariant =", "body": "KonanSoftwareComponent(project)<EOL>"}
{"signature": "if (!attributes.contains(attribute)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>attributes.setAttribute(attribute, KotlinNativeBundleArtifactsTypes.DIRECTORY)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val depModuleName =", "body": "dependencyPart.substring(<NUM_LIT>, idx)<EOL>"}
{"signature": "val ignoredPropertyNames =", "body": "setOf(<EOL>"}
{"signature": "fun add(line: CompiledT, value: ResultT) {", "body": "<EOL><INDENT><INDENT>history.add(line to value)<EOL><INDENT>}"}
{"signature": "val isEhxaustive =", "body": "thenExpression != null && elseExpression != null<EOL>"}
{"signature": "val cpuCores =", "body": "Runtime.getRuntime().availableProcessors()<EOL>"}
{"signature": "if (e.message?.startsWith(<STR_LIT>) == true) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val metadataProvider =", "body": "resolution.metadataProvider as? ArtifactMetadataProvider ?: return emptySet()<EOL>"}
{"signature": "val firstBitWidth =", "body": "numbers[first.classifierId] ?: return null<EOL>"}
{"signature": "if (foo<NUM_LIT>x != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val lastSymbolIsNewLine =", "body": "builder.last() == '\\n'<EOL>"}
{"signature": "val testView =", "body": "TestView(activityTestRule.activity)<EOL>"}
{"signature": "var attempt =", "body": "<NUM_LIT><EOL>"}
{"signature": "val headersCanonicalPaths =", "body": "ownHeaders.map { it?.canonicalPath }.toSet()<EOL>"}
{"signature": "val fieldToInitializer =", "body": "calculateFieldToExpression(<EOL>"}
{"signature": "var counter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val srcRoot =", "body": "createTestFiles().cleanupRecursively()<EOL>"}
{"signature": "val inlineFunctionBodyContext =", "body": "context.inlineFunctionBodyContext ?: return<EOL>"}
{"signature": "import Base<EOL>.", "body": ""}
{"signature": "val subjectTypeInfo =", "body": "typeInfo.replaceType(descriptor.type)<EOL>"}
{"signature": "fun foo<NUM_LIT>(c: IntArray) {", "body": "}"}
{"signature": "val trueIfEqual =", "body": "opToken == KtTokens.EQEQ || opToken == KtTokens.EQEQEQ<EOL>"}
{"signature": "val getterName =", "body": "computeMethodName(auxiliaryOrigin, defaultGetterName, MethodType.GETTER)<EOL>"}
{"signature": "package foo;\\n\\n public class TopLevel\\$\\$ {}<STR_LIT>TopLevel\\$\\$\")<EOL>.", "body": ""}
{"signature": "val isInliningLambda =", "body": "nodeRemapper.isInsideInliningLambda<EOL>"}
{"signature": "when (fe<NUM_LIT>Type.kind) {", "body": "<EOL><INDENT><INDENT><INDENT>ErrorTypeKind.UNINFERRED_TYPE_VARIABLE -> fe<NUM_LIT>Type.formatParams.first()<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (valueSetterParameter.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun collectMetrics(incrementalCompilation: Boolean, metricsContainer: StatisticsValuesConsumer) {", "body": "<EOL><INDENT><INDENT>metricsContainer.report(BooleanMetrics.JS_KLIB_INCREMENTAL, incrementalCompilation)<EOL><INDENT>}"}
{"signature": "val javaField =", "body": "f.javaField<EOL>"}
{"signature": "val WriteKlibPhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, KlibWriterInput>(<EOL>"}
{"signature": "if (index < <NUM_LIT> || index > size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw IndexOutOfBoundsException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((symbol, substitution) in collectClassifiers(name)) {", "body": "<EOL><INDENT><INDENT><INDENT>processor(symbol, substitution)<EOL><INDENT><INDENT>}"}
{"signature": "val javaLocation =", "body": "<STR_LIT><EOL>"}
{"signature": "package and relative names to be used in<EOL>.", "body": ""}
{"signature": "var currentIdent =", "body": "<NUM_LIT><EOL>"}
{"signature": "val programOutput =", "body": "TextOutputImpl()<EOL>"}
{"signature": "val primaryImportingScope =", "body": "processReferenceInContextOf(moduleDescriptor)<EOL>"}
{"signature": "if (diagnostic.factory == Errors.ALWAYS_NULL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val moduleIndex =", "body": "result.groupValues[<NUM_LIT>].toInt()<EOL>"}
{"signature": "val JSPECIFY_NON_NULL_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val parsedParameters =", "body": "parseJvmDescriptor(desc, parseReturnType = false).parameters<EOL>"}
{"signature": "val templateParameters =", "body": "allParameters.withIndex().associateBy({ it.value },<EOL>"}
{"signature": "fun testFakeOverrideShouldNotInheritBridgeFromAbstractFakeOverride() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>val d = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(c to a, c to b, d to a, d to c)<EOL><INDENT><INDENT>doTest(c, setOf())<EOL><INDENT><INDENT>doTest(d, setOf(bridge(b, a)))<EOL><INDENT>}"}
{"signature": "package (forward declarations) can always be used in common<EOL>.", "body": ""}
{"signature": "val inlinedNodeLocalVariables =", "body": "inlinedNode.localVariables ?: return<EOL>"}
{"signature": "fun testForwardDeclarations() {", "body": "<EOL><INDENT><INDENT>val testName = <STR_LIT><EOL><INDENT><INDENT>Assumptions.assumeTrue(targets.testTarget.family.isAppleFamily)<EOL><INDENT><INDENT>val interopLibrary = compileCInterop(testName)<EOL><EOL><INDENT><INDENT>val testCase = generateObjCFramework(testName, emptyList(), setOf(TestModule.Given(interopLibrary.klibFile)))<EOL><INDENT><INDENT>compileAndRunSwift(testName, testCase)<EOL><INDENT>}"}
{"signature": "val expanded =", "body": "actualSymbol.expandToRegularClass() ?: return null<EOL>"}
{"signature": "val pName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun testOneVertexAbstract() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>graph()<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT>}"}
{"signature": "val REPLACE_WITH_CONSTRUCTOR_EXPRESSION_FIELD_FQN =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun useNativeMain() {", "body": "<EOL><INDENT><INDENT>nativeMain()<EOL><INDENT>}"}
{"signature": "fun testSourcelessSmartcastSourcefullOriginalExpression() {", "body": "<INDENT><INDENT>// This is a test on the JAVA_MODULE_DOES_NOT_DEPEND_ON_MODULE diagnostic.<INDENT><INDENT>module(<STR_LIT>)<INDENT>}"}
{"signature": "val DEFAULT_A =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!useModuleDetection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ModulesApiHistoryJvm(rootProjectDir, modulesInfo)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val RUN_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (symbol.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>registerFile(symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is IrBlock && origin == IrStatementOrigin.ADAPTED_FUNCTION_REFERENCE) {", "body": "<EOL><INDENT><INDENT><INDENT>return this<EOL><INDENT><INDENT>}"}
{"signature": "val packagePath =", "body": "<EOL><INDENT><INDENT><INDENT>if (packageName.startsWith(<STR_LIT>))<EOL>"}
{"signature": "fun update() {", "body": "x += <NUM_LIT> }"}
{"signature": "if (it != Freezing.Disabled) {", "body": "<INDENT><INDENT><INDENT><INDENT>configuration.report(<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>CompilerMessageSeverity.ERROR,<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><INDENT><INDENT><INDENT><INDENT>)<INDENT><INDENT><INDENT>}"}
{"signature": "val outerCallContext =", "body": "outerCallContext.expandContextForCatchClause(ktExpression)<EOL>"}
{"signature": "var classAppeared =", "body": "false<EOL>"}
{"signature": "val typeAliasName =", "body": "identifier.nameAsSafeName()<EOL>"}
{"signature": "val irAdaptedReceiverParameter =", "body": "irAdapterFun.valueParameters[<NUM_LIT>]<EOL>"}
{"signature": "if (classCodegen.irClass.origin != JvmLoweredDeclarationOrigin.DEFAULT_IMPLS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportJvmSignatureClash(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>diagnosticReporter,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>JvmBackendErrors.CONFLICTING_INHERITED_JVM_DECLARATIONS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(classCodegen.irClass),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>conflictingJvmDeclarationsData<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mavenLocal =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "package name found.", "body": "\")<EOL>"}
{"signature": "val namesBySignature =", "body": "fragment.nameBindings.associateTo(mutableMapOf()) { it.key to it.name }<EOL>"}
{"signature": "val CREATED_CLIENT_FILE_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val fileCheckExecutable =", "body": "settings.configurables.absoluteLlvmHome + File.separator + <STR_LIT> + File.separator +<EOL>"}
{"signature": "val resolvedCalleeName =", "body": "resolvedCalleeSymbol.name<EOL>"}
{"signature": "val boundsSubstitutor =", "body": "TypeSubstitutor.create(type)<EOL>"}
{"signature": "val javaSources =", "body": "projectPath.allJavaSources<EOL>"}
{"signature": "val defaultImplsClassId =", "body": "kotlinBinaryClass.classId.createNestedClassId(Name.identifier(JvmAbi.DEFAULT_IMPLS_CLASS_NAME))<EOL>"}
{"signature": "val rl =", "body": "value.rotateLeft(n)<EOL>"}
{"signature": "val offsets =", "body": "IntArray(parameters.size) { <NUM_LIT> }<EOL>"}
{"signature": "fun foo(x : C, y : D){", "body": "<EOL><INDENT>x.foo(<!NAME_FOR_AMBIGUOUS_PARAMETER!>x<!> = <NUM_LIT>)<EOL><INDENT>x.foo(<!NAME_FOR_AMBIGUOUS_PARAMETER!>y<!> = <NUM_LIT>)<EOL><INDENT>y.foo(<!NAME_FOR_AMBIGUOUS_PARAMETER!>x<!> = <NUM_LIT>)<EOL><INDENT>y.foo(<!NAME_FOR_AMBIGUOUS_PARAMETER!>y<!> = <NUM_LIT>)<EOL>}"}
{"signature": "val functionAnalysisResult =", "body": "intraproceduralAnalysisResults[functionSymbol]!!<EOL>"}
{"signature": "for (char in '\\u<NUM_LIT>D<NUM_LIT>'..'\\u<NUM_LIT>FA') {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(char, char.titlecaseChar())<EOL><INDENT><INDENT><INDENT>assertNotEquals(char, char.uppercaseChar())<EOL><INDENT><INDENT>}"}
{"signature": "if (a === Variance.IN_VARIANCE && b === Variance.OUT_VARIANCE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return STAR<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var serializer =", "body": "property.serializableWith.toClassDescriptor<EOL>"}
{"signature": "for (multiDeclaration in destructuringDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT>modifiersChecker.checkModifiersForDestructuringDeclaration(multiDeclaration)<EOL><INDENT><INDENT><INDENT>identifierChecker.checkDeclaration(multiDeclaration, trace)<EOL><INDENT><INDENT>}"}
{"signature": "val areBothPrimitives =", "body": "l.isNotNullPrimitive && r.isNotNullPrimitive<EOL>"}
{"signature": "val PRESET_OPTION =", "body": "CliOption(<EOL>"}
{"signature": "if (equalsContributedFunction != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.add(equalsContributedFunction)<EOL><INDENT><INDENT><INDENT><INDENT>val equalsFunction = createSyntheticIrFunction(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>EQUALS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>equalsContributedFunction,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c.irBuiltIns.booleanType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>otherParameterNeeded = true,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>isOperator = true<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>declarationStorage.cacheGeneratedFunction(equalsContributedFunction, equalsFunction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (case is JsCase) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>entryBuilder.label = serialize(case.caseExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package ${`package`.", "body": "name}<EOL>"}
{"signature": "import single\")<EOL>.", "body": ""}
{"signature": "val compoundAssignmentInfo =", "body": "CompoundAssignmentInfo()<EOL>"}
{"signature": "package namespace<EOL>.", "body": ""}
{"signature": "val inline =", "body": "declaration.hasModifier(KtTokens.INLINE_KEYWORD)<EOL>"}
{"signature": "val typeParameterScopes =", "body": "ArrayDeque<Map<TypeParameterDescriptor, IrTypeParameterSymbol>>()<EOL>"}
{"signature": "for ((i, ui) in uis.withIndex().reversed()) {", "body": "<EOL><INDENT><INDENT>s += <STR_LIT><EOL><INDENT>}"}
{"signature": "if (codePoint <= Char.MAX_VALUE.code) {", "body": "<EOL><INDENT><INDENT>append(codePoint.toChar())<EOL><INDENT>}"}
{"signature": "val allFriendsDependencies =", "body": "mutableListOf<FirModuleData>()<EOL>"}
{"signature": "if (propertyType.isNonPrimitiveArray && propertyType.typeArguments.first().type?.isTypeParameter == true) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT>FirSerializationErrors.GENERIC_ARRAY_ELEMENT_NOT_SUPPORTED,<EOL><INDENT><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val javaClasspath =", "body": "<EOL><INDENT><INDENT><INDENT>listOf(testServices.compiledClassesManager.getCompiledKotlinDirForModule(module, classFileFactory).path) +<EOL>"}
{"signature": "val kDocCollector =", "body": "KDocQualifiersToShortenCollector(<EOL>"}
{"signature": "else if (name == label) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>found = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val actualInt =", "body": "IntProgression.fromClosedRange(start, end, increment).last<EOL>"}
{"signature": "for (firstIndex in <NUM_LIT> until secondIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkCompatibilityType(modifiers[firstIndex], secondModifier, reporter, reportedNodes, owner, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (bWorkerUnlocker.value < <NUM_LIT>) {", "body": "}"}
{"signature": "val baseKtClass =", "body": "(baseClass as? KtLightClass)?.kotlinOrigin ?: return false<EOL>"}
{"signature": "val encode =", "body": "<STR_LIT><EOL>"}
{"signature": "fun buildStructGet(struct: WasmSymbol<WasmTypeDeclaration>, fieldId: WasmSymbol<Int>, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(<EOL><INDENT><INDENT><INDENT>WasmOp.STRUCT_GET,<EOL><INDENT><INDENT><INDENT>location,<EOL><INDENT><INDENT><INDENT>WasmImmediate.GcType(struct),<EOL><INDENT><INDENT><INDENT>WasmImmediate.StructFieldIdx(fieldId)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "for ((i, _) in arr.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val containingDeclarationName =", "body": "containingDeclaration.fqNameUnsafe.asString()<EOL>"}
{"signature": "fun initValues() {", "body": "<EOL><INDENT><INDENT><INDENT>posValue = computeValue()<EOL><INDENT><INDENT><INDENT>negValue = computeValue().setNegative(true)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinClassifier =", "body": "kotlinClasses[classId] ?: return null<EOL>"}
{"signature": "val rootLightClassForDecompiledFile =", "body": "createLightClassForDecompiledKotlinFile(containingKtFile, project) ?: return null<EOL>"}
{"signature": "val KOTLIN_MPP_ALLOW_LEGACY_DEPENDENCIES =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (companionObjectSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>session.lookupTracker?.recordCompanionLookup(companionObjectSymbol.classId, element.source, file.source)<EOL><INDENT><INDENT><INDENT><INDENT>return companionObjectSymbol.constructType(emptyArray(), false)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (iidImask != null) {", "body": "<EOL><INDENT><INDENT><INDENT>masks.push(iidImask)<EOL><INDENT><INDENT><INDENT>currentSize = JsMath.max(currentSize, iidImask.size)<EOL><INDENT><INDENT>}"}
{"signature": "for ((_, protoData) in protoMap) {", "body": "<EOL><INDENT><INDENT><INDENT>changesCollector.collectProtoChanges(oldData = protoData, newData = null)<EOL><INDENT><INDENT>}"}
{"signature": "fun putLocalClassName(container: IrAttributeContainer, name: String) {", "body": "<EOL><INDENT><INDENT>localClassNames[container.attributeOwnerId] = name<EOL><INDENT>}"}
{"signature": "fun visitVarInsn(opcode: Int, `var`: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.visitVarInsn(opcode, getNewIndex(`var`))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val generateContinuation =", "body": "mainFunction.isLoweredSuspendFunction(backendContext)<EOL>"}
{"signature": "for (checkInsn in dependentChecks) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>nullabilityAssumptions.injectAssumptionsForInsn(varIndex, checkInsn)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val cachedHashCode =", "body": "hashCodeMap.get(value)<EOL>"}
{"signature": "val CORE_SERIALIZER_PREDICATE =", "body": "LookupPredicate.create { annotated(<STR_LIT>.fqn()) }<EOL>"}
{"signature": "var currentBuildInfo =", "body": "buildInfoInstance<EOL>"}
{"signature": "fun registerJavacIfNeeded(environment: KotlinCoreEnvironment) {", "body": "<EOL><INDENT><INDENT>environment.registerJavac()<EOL><INDENT><INDENT>environment.configuration.put(JVMConfigurationKeys.USE_JAVAC, true)<EOL><INDENT>}"}
{"signature": "package FinalExternalClass<EOL>.", "body": ""}
{"signature": "fun visitPropertySetterDescriptor(descriptor: PropertySetterDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>descriptor.correspondingProperty.accept(this, null)<EOL><INDENT><INDENT><INDENT>setHashIdAndDescriptionFor(descriptor, isPropertyAccessor = true)<EOL><INDENT><INDENT><INDENT>classFqnSegments.add(descriptor.name.asString())<EOL><INDENT><INDENT><INDENT>setExpected(descriptor.isExpect)<EOL><INDENT><INDENT><INDENT>platformSpecificSetter(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (headerInfo.isLastInclusive) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builtIns.lessOrEqualFunByOperandType[elementClass.symbol]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val irOperator = getPostfixOperator(ktOperator)) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> throw AssertionError(<STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>in INCREMENT_DECREMENT_OPERATORS -><EOL><INDENT><INDENT><INDENT><INDENT>AssignmentGenerator(statementGenerator).generatePostfixIncrementDecrement(expression, irOperator)<EOL><EOL><INDENT><INDENT><INDENT>IrStatementOrigin.EXCLEXCL -> generateExclExclOperator(expression, irOperator)<EOL><EOL><INDENT><INDENT><INDENT>else -> createErrorExpression(expression, ktOperator.toString())<EOL><INDENT><INDENT>}"}
{"signature": "val globalInitFunction =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (requireGlobalInitializer)<EOL>"}
{"signature": "val handleExceptionContinuationBody =", "body": "<EOL><INDENT><INDENT><STR_LIT>\"<EOL>"}
{"signature": "if (results.add(edge)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>yield(edge)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resolveQueue.add(edge)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun doTest(testServices: TestServices) {", "body": "<EOL><INDENT><INDENT>val (mainFile, mainModule) = findMainFileAndModule(testServices)<EOL><INDENT><INDENT>doTestByMainModuleAndOptionalMainFile(mainFile, mainModule, testServices)<EOL><INDENT>}"}
{"signature": "fun emptyConstant() {", "body": "<EOL><INDENT><INDENT>doTest(IntRange.EMPTY, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, listOf())<EOL><INDENT><INDENT>doTest(LongRange.EMPTY, <NUM_LIT>L, <NUM_LIT>L, <NUM_LIT>L, listOf())<EOL><EOL><INDENT><INDENT>doTest(CharRange.EMPTY, <NUM_LIT>.toChar(), <NUM_LIT>.toChar(), <NUM_LIT>, listOf())<EOL><EOL><INDENT><INDENT>doTest(UIntRange.EMPTY, MaxUI, MinUI, <NUM_LIT>, listOf())<EOL><INDENT><INDENT>doTest(ULongRange.EMPTY, MaxUL, MinUL, <NUM_LIT>L, listOf())<EOL><INDENT>}"}
{"signature": "val BITS_ENOUGH_FOR_STORING_PARAMETERS_COUNT =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun testClassCast() {", "body": "<EOL><INDENT>assertEquals(<STR_LIT>, testClassCastN<NUM_LIT>N())<EOL><INDENT>assertEquals(<STR_LIT>, testClassCastN<NUM_LIT>NN())<EOL><INDENT>assertEquals(<STR_LIT>, testClassCastNN<NUM_LIT>N())<EOL><INDENT>assertEquals(<STR_LIT>, testClassCastNN<NUM_LIT>NN())<EOL>}"}
{"signature": "if (context.platform.isJs()) {", "body": "<EOL><INDENT><INDENT><INDENT>AtomicfuJsIrTransformer(context).transform(irFile)<EOL><INDENT><INDENT>}"}
{"signature": "when (val resolutionResult = resolveToPackageOrClass(context.session.symbolProvider, fqName)) {", "body": "<INDENT><INDENT><INDENT>is PackageResolutionResult.PackageOrClass -> resolutionResult.classSymbol ?: return<INDENT><INDENT><INDENT>// Already an error import, already reported<INDENT><INDENT><INDENT>is PackageResolutionResult.Error -> return<INDENT><INDENT>}"}
{"signature": "val nextToken =", "body": "tokens.firstOrNull() as? Word ?: return null<EOL>"}
{"signature": "fun byteArraySet() {", "body": "<EOL><INDENT><INDENT>val arr = ByteArray(<NUM_LIT>)<EOL><INDENT><INDENT>arr[<NUM_LIT>] = <NUM_LIT><EOL><INDENT><INDENT>arr[<NUM_LIT>] = -<NUM_LIT><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, arr[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(-<NUM_LIT>, arr[<NUM_LIT>])<EOL><INDENT>}"}
{"signature": "val backupDirectory =", "body": "directory.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun replaceTypeRef(newTypeRef: FirTypeRef) {", "body": "<EOL><INDENT><INDENT>typeRef = newTypeRef<EOL><INDENT>}"}
{"signature": "val firAnalyzerFacade =", "body": "FirAnalyzerFacade(<EOL>"}
{"signature": "val expressions =", "body": "ArrayList<KtExpression>()<EOL>"}
{"signature": "if (rightTokenType == KtTokens.GET_KEYWORD || rightTokenType == KtTokens.SET_KEYWORD) {", "body": "<EOL><INDENT><INDENT><INDENT>return MUST_LINE_BREAK<EOL><INDENT><INDENT>}"}
{"signature": "var extraArgs =", "body": "listOf(<EOL>"}
{"signature": "val typeOfPromiseWithArguments =", "body": "typeOf<Promise<Promise<*>>>()<EOL>"}
{"signature": "if (originSource.extension == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classNamesToReprocess.add(isolatingOrigin)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun jsArrayPush(array: ExternalInterfaceType, element: ExternalInterfaceType) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "fun visitFunctionDescriptor(descriptor: FunctionDescriptor, data: Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>extractSignatureFromCallableMember(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "var varPropWithSetter =", "body": "<STR_LIT><EOL>"}
{"signature": "if (code == null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJs.JSCODE_ARGUMENT_SHOULD_BE_CONSTANT.on(argument))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (clazz) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TransformingTestMethodModel.TransformerFunctionsClassPlaceHolder::class.java -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> clazz.canonicalName<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (configurationKind.withReflection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>files.add(provider.reflectJarForTests())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitSyntheticBody(body: IrSyntheticBody, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitSyntheticBody(body)<EOL><INDENT>}"}
{"signature": "val dataClassArrayMemberHashCodeSymbol =", "body": "defineOperator(<STR_LIT>, intType, listOf(anyType))<EOL>"}
{"signature": "val lldbPath =", "body": "projectPath.resolve(<STR_LIT>).resolve(<STR_LIT>)<EOL>"}
{"signature": "val cocoapodsExtension =", "body": "project.objects.newInstance(CocoapodsExtension::class.java, this)<EOL>"}
{"signature": "val myVarSizes =", "body": "Object<NUM_LIT>IntOpenHashMap<T>()<EOL>"}
{"signature": "val test<NUM_LIT>DefaultImpls =", "body": "java.lang.Class.forName(<STR_LIT>)<EOL>"}
{"signature": "fun visitReturnExpression(returnExpression: FirReturnExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(returnExpression)<EOL><INDENT>}"}
{"signature": "val expectedDependency =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "var hasVisibleBackingField =", "body": "false<EOL>"}
{"signature": "if (enableUnsafeIncrementalCompilationForMultiplatform != null) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (name !in varWithoutInitDeclarations || name in varBeforeAssignmentUsages) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun intFun(i: Int) {", "body": "}<EOL>fun byteFun(i: Byte) {}"}
{"signature": "if (rootProject.kotlinNativeToolchainEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>KotlinNativeBundleArtifactFormat.setupAttributesMatchingStrategy(rootProject.dependencies.attributesSchema)<EOL><INDENT><INDENT><INDENT>KotlinNativeBundleArtifactFormat.setupTransform(rootProject)<EOL><INDENT><INDENT><INDENT>addKotlinNativeBundleConfiguration(rootProject)<EOL><INDENT><INDENT><INDENT>KotlinNativeBundleBuildService.registerIfAbsent(rootProject)<EOL><INDENT><INDENT>}"}
{"signature": "val libraryToAddToCacheFile =", "body": "File(it)<EOL>"}
{"signature": "fun testMemberAssignment(d: dynamic) {", "body": "<EOL><INDENT>d.m = <NUM_LIT><EOL>}"}
{"signature": "val workerUnlocker =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "if (compilerAttribute != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return compilerAttribute in attributes<EOL><INDENT><INDENT>}"}
{"signature": "val mergedComponents =", "body": "components + componentsWithExternals<EOL>"}
{"signature": "fun visitArgumentList(argumentList: FirArgumentList, data: T) {", "body": "}<EOL><INDENT>override fun visitAnnotationArgumentMapping(annotationArgumentMapping: FirAnnotationArgumentMapping, data: T) {}"}
{"signature": "if (declarationDescriptor is SimpleFunctionDescriptorImpl) {", "body": "<EOL><INDENT><INDENT><INDENT>atomCompleter.substituteFunctionLiteralDescriptor(resolvedAtom = null, descriptor = declarationDescriptor, substitutor)<EOL><INDENT><INDENT>}"}
{"signature": "fun someMethod() {", "body": "}<STR_LIT>fun someMethod(addedParam: Int = <NUM_LIT>) {}"}
{"signature": "var valueParamShift =", "body": "max(nextLocalIndex, markerShift) + expectedParameters.sumOf { it.size }<EOL>"}
{"signature": "val TEXT =", "body": "ExpectActualScopeDiffsRenderer(MultiplatformDiagnosticRenderingMode())<EOL>"}
{"signature": "if (Registry.`is`(<STR_LIT>, true)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun testExtensionBoth() {", "body": "<EOL><INDENT>use(C::extensionBoth)<EOL>}"}
{"signature": "fun suspendThrowsRuntimeExceptionTypealias() {", "body": "}<EOL><EOL>@Throws(Exception::class)<EOL>suspend fun suspendThrowsException<NUM_LIT>() {}"}
{"signature": "val bConstructor =", "body": "b.constructor<EOL>"}
{"signature": "val psiParameter =", "body": "psi.parameterList.parameters[index + offset]<EOL>"}
{"signature": "val shouldBeVisibleFromRepl =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun markAsUnsafeToRemove() {", "body": "<EOL><INDENT><INDENT>isSafeToRemove = false<EOL><INDENT>}"}
{"signature": "if (<!UNRESOLVED_REFERENCE!>n<!>) {", "body": "<EOL><INDENT><INDENT><INDENT><!UNRESOLVED_REFERENCE!>a<!>.t()<EOL><INDENT><INDENT>}"}
{"signature": "val capTypesSubstitutor =", "body": "TypeConstructorSubstitution.createByConstructorsMap(substitutedCommonCapType).buildSubstitutor()<EOL>"}
{"signature": "val STABLE_TO_STRING =", "body": "<STR_LIT><EOL>"}
{"signature": "val originalTypes =", "body": "resultingDescriptor.typeAliasDescriptor.underlyingType.arguments.map { it.type }<EOL>"}
{"signature": "fun tearDown() {", "body": "<EOL><INDENT><INDENT>workingDir.deleteRecursively()<EOL><INDENT><INDENT>super.tearDown()<EOL><INDENT>}"}
{"signature": "val iteratorIrSymbol =", "body": "it.toIrSymbol()<EOL>"}
{"signature": "if (propertySymbol.isStatic && propertySymbol.modality == Modality.FINAL && propertySymbol.hasConstantInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return ConstantArgumentKind.VALID_CONST<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (shouldVisitField(JvmMemberSignature.Field(name, desc), access.isPrivate(), isConstant)) {", "body": "<EOL><INDENT><INDENT><INDENT>cv.visitField(access, name, desc, signature, value)<EOL><INDENT><INDENT>}"}
{"signature": "if (it is ValueParameterDescriptorImpl.WithDestructuringDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>lambda.body.statements.add(it.translate(functionContext))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (lastInPlaceExit !== enterNode || !isLocalClass) {", "body": "<INDENT><INDENT><INDENT><INDENT>// (init blocks if any, else class entry) -> non-delegating or super-delegating constructor.<INDENT><INDENT><INDENT><INDENT>// For local classes, if there are no init blocks, the CFG edge from the class entry already exists,<INDENT><INDENT><INDENT><INDENT>// as it is also a DFG edge. See `enterClass`.<INDENT><INDENT><INDENT><INDENT>addEdgeToSubGraph(lastInPlaceExit, graph.enterNode)<INDENT><INDENT><INDENT>}"}
{"signature": "if (expression != null && expression.type.isOrHasComposableLambda) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameters.add(expression.type.toScheme(defaultTarget))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isMutable || variable.hasModifier(CONST_KEYWORD) || hasDelegate) {", "body": "<EOL><INDENT><INDENT><INDENT>modifiers.add(PsiModifier.FINAL)<EOL><INDENT><INDENT>}"}
{"signature": "fun create(project: Project, modificationTracker: ModificationTracker): KtLifetimeToken<EOL><EOL><INDENT>public open fun beforeEnteringAnalysisContext(token: KtLifetimeToken) {", "body": "}<EOL><INDENT>public open fun afterLeavingAnalysisContext(token: KtLifetimeToken) {}"}
{"signature": "val bVararg =", "body": "b.valueParameters.any { it.varargElementType != null }<EOL>"}
{"signature": "if (result.isLeft()) {", "body": "<EOL><INDENT><INDENT>val cause = result.leftValue.cause<EOL><INDENT>}"}
{"signature": "if (state.executed) {", "body": "<EOL><INDENT><INDENT>fn()<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "if (useNonSkippingGroupOptimization) {", "body": "<EOL><INDENT><INDENT><INDENT>scope.realizeAllDirectChildren()<EOL><INDENT><INDENT><INDENT>scope.realizeCoalescableGroup()<EOL><INDENT><INDENT>}"}
{"signature": "fun fromBoth(name: Name<String>) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "val javaName =", "body": "javaParameter.name<EOL>"}
{"signature": "if (value.isTransparentScope) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "val availableClassifier =", "body": "shorteningContext.findFirstClassifierInScopesByName(positionScopes, shortClassName) ?: return<EOL>"}
{"signature": "val init_jk =", "body": "intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>) <EOL>"}
{"signature": "var dirtyFiles =", "body": "srcDir.walk().filterTo(HashSet()) { it.isKotlinFile(setOf(<STR_LIT>, <STR_LIT>)) }<EOL>"}
{"signature": "fun argument(typeArgument: FirTypeProjection) {", "body": "<EOL><INDENT><INDENT><INDENT>typeArgumentList.typeArguments += typeArgument<EOL><INDENT><INDENT>}"}
{"signature": "val objectClass =", "body": "callee.parentAsClass<EOL>"}
{"signature": "val descriptions =", "body": "targetDescriptor.loadOptIns(<EOL>"}
{"signature": "val classOrInterface =", "body": "toType.eraseToClassOrInterface<EOL>"}
{"signature": "for (file in bodiesResolveContext.files) {", "body": "<EOL><INDENT><INDENT><INDENT>checkModifiersAndAnnotationsInPackageDirective(file)<EOL><INDENT><INDENT><INDENT>annotationChecker.check(file, trace, null)<EOL><INDENT><INDENT>}"}
{"signature": "val stableName =", "body": "FirJsStableName.createStableNameOrNull(symbol, context.session)<EOL>"}
{"signature": "var primaryConstructorParametersByName =", "body": "mapOf<Name, FirValueParameter>()<EOL>"}
{"signature": "fun compareStructurally(expected: CheckerContext, actual: CheckerContext) {", "body": "<EOL><INDENT><INDENT><INDENT>assertions.assertEquals(expected.implicitReceiverStack.asString(), actual.implicitReceiverStack.asString())<EOL><INDENT><INDENT><INDENT>assertions.assertEquals(expected.containingDeclarations.asString(), actual.containingDeclarations.asString())<EOL><INDENT><INDENT>}"}
{"signature": "val crashedModuleGroups =", "body": "crashedModules.groupBy { it.exceptionMessage.take(<NUM_LIT>) }<EOL>"}
{"signature": "if (needSpecialDispatch(irFunction)) {", "body": "<INDENT><INDENT><INDENT>val handlerDeclaration = newIrFunction.valueParameters.last()<INDENT><INDENT><INDENT>// if $handler != null $handler(a, b, c) else foo(a, b, c)<INDENT><INDENT><INDENT>irIfThenElse(<INDENT><INDENT><INDENT><INDENT>irFunction.returnType,<INDENT><INDENT><INDENT><INDENT>irEqualsNull(irGet(handlerDeclaration)),<INDENT><INDENT><INDENT><INDENT>dispatchCall,<INDENT><INDENT><INDENT><INDENT>generateHandleCall(handlerDeclaration, irFunction, newIrFunction, params)<INDENT><INDENT><INDENT>)<INDENT><INDENT>}"}
{"signature": "val ac<NUM_LIT> =", "body": "longArr[<NUM_LIT>].value<EOL>"}
{"signature": "val _tmp<NUM_LIT> =", "body": "complexExpression<NUM_LIT><EOL>"}
{"signature": "val binaries =", "body": "<INDENT><INDENT>// Use newInstance to allow accessing binaries by their names in Groovy using the extension mechanism."}
{"signature": "val resolutionFacade =", "body": "<EOL><INDENT><INDENT><INDENT>KotlinResolutionFacadeForRepl(environment, container)<EOL>"}
{"signature": "val alloc =", "body": "symbols.interopAllocType<EOL>"}
{"signature": "val largeArray =", "body": "largeFoo.array<EOL>"}
{"signature": "fun checkType(type: ConeKotlinType?, element: FirElement, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>val classSymbol = type?.toRegularClassSymbol(context.session)<EOL><INDENT><INDENT>checkSourceElement(classSymbol?.sourceElement, element, context, reporter)<EOL><INDENT>}"}
{"signature": "val atomicGetFieldIntrinsic =", "body": "<EOL><INDENT><INDENT>context.referenceFunctions(CallableId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))).single()<EOL>"}
{"signature": "val annotationForSetter =", "body": "createAnnotationProto(extension)<EOL>"}
{"signature": "val cleanedClassFqName =", "body": "if (!isTopLevel) internalClassName else internalClassName.substringBefore('$')<EOL>"}
{"signature": "val isOutOfBlockChange =", "body": "element.isNewDirectChildOf(inBlockModificationOwner, modificationType)<EOL>"}
{"signature": "if (currentEatUntil != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (currentEatUntil <= numberOfNestedBlocks) return<EOL><INDENT><INDENT>}"}
{"signature": "if (kaptContext.logger.isVerbose) {", "body": "<EOL><INDENT><INDENT><INDENT>dumpDeclarationOrigins()<EOL><INDENT><INDENT>}"}
{"signature": "fun register(keyQualifiedName: String, value: FirSessionComponent) {", "body": "<EOL><INDENT><INDENT>registerComponent(keyQualifiedName, value)<EOL><INDENT>}"}
{"signature": "if (hasDoubleValue()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + doubleValue.hashCode()<EOL><INDENT>}"}
{"signature": "if (size == sizeBefore) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(descriptor)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val interopForeignObjCObject =", "body": "interopClass(InteropFqNames.foreignObjCObjectName)<EOL>"}
{"signature": "val allocInstanceFunction =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "val duplicatedOwnerListEntries =", "body": "owners.permittedOwners.groupBy { it.name }<EOL>"}
{"signature": "fun bar(o: Number?) {", "body": "}<EOL><EOL><INDENT>override fun bar(o: Int) {}"}
{"signature": "if (!context.compilerConfiguration.languageVersionSettings.languageVersion.usesK<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (someString == combineParams) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setup() {", "body": "<EOL><INDENT><INDENT>project = ProjectBuilder.builder().build() as ProjectInternal<EOL><INDENT>}"}
{"signature": "if (!strongSkippingEnabled && hasAnyUnstableParams && defaultParam != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>shouldExecute = irOrOr(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>defaultParam.irHasAnyProvidedAndUnstable(unstableMask),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>shouldExecute<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kPropertiesField =", "body": "<EOL><INDENT><INDENT><INDENT>context.irFactory.createField(<EOL>"}
{"signature": "val podspecTaskName =", "body": "lowerCamelCaseName(<STR_LIT>, artifact.name, <STR_LIT>)<EOL>"}
{"signature": "fun writeRangeStart(elements: List<Int>, writer: FileWriter) {", "body": "}<EOL><EOL><INDENT>override fun writeRangeLength(elements: List<Int>, writer: FileWriter) {}"}
{"signature": "val elementFactory =", "body": "JavaPsiFacade.getElementFactory(project)<EOL>"}
{"signature": "fun invalidOrUnusedCache(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>chunk: KotlinChunk?,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>target: KotlinModuleBuildTarget<*>?,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>attributesDiff: CacheAttributesDiff<*><EOL><INDENT><INDENT><INDENT><INDENT>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT>override fun addCustomMessage(message: String) {}"}
{"signature": "val obj =", "body": "WithGetter()<EOL>"}
{"signature": "val requestedVersion =", "body": "ResolvedDependencyVersion(tokenResult.groupValues[<NUM_LIT>])<EOL>"}
{"signature": "if (underlying.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>currentIt = transform(underlying.next())<EOL><INDENT><INDENT><INDENT>next()<EOL><INDENT><INDENT>}"}
{"signature": "if (!DescriptorVisibilities.isPrivate(irFunction.visibility) || irFunction !is IrSimpleFunction || !irFunction.isOperator) {", "body": "<EOL><INDENT><INDENT><INDENT>irFunction.valueParameters.forEach(::generateNonNullAssertion)<EOL><INDENT><INDENT>}"}
{"signature": "val perfReport =", "body": "project.registerTask<NativePerformanceReport>(<EOL>"}
{"signature": "fun useRemAssign() {", "body": "a <!ASSIGNMENT_OPERATOR_SHOULD_RETURN_UNIT, PROPERTY_AS_OPERATOR!>%=<!> <NUM_LIT> }"}
{"signature": "if (descriptor.name.asString() == name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(value: Value<Int>?) {", "body": "<EOL><INDENT><INDENT>res = value?.value<EOL><INDENT>}"}
{"signature": "var currPagesUsed =", "body": "(allocatedAddress.address.toInt() + allocationSize + <NUM_LIT>) / pageSize<EOL>"}
{"signature": "val kotlinSourceSetName =", "body": "layout.naming.kotlinSourceSetName(<EOL>"}
{"signature": "if (elementContext != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return elementContext<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var DATA_SIZE =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in uis.indices) {", "body": "<EOL><INDENT><INDENT>s += uis[i]<EOL><INDENT>}"}
{"signature": "val rightVal =", "body": "if (right is IrGetValue) right.symbol.owner else irTemporary(right)<EOL>"}
{"signature": "if (constraintKind == EQUAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>typeCheckingProcedure.equalTypes(subType<NUM_LIT>, superType<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotationInstantiationLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "fun testConcreteType() {", "body": "<EOL><INDENT>val mutableProperty = Klass<Int>::mutableProperty<EOL><INDENT>mutableProperty.set(Klass<Int>(), Generic<Int>())<EOL>}"}
{"signature": "if (box() == <STR_LIT>) {", "body": "<INDENT><INDENT>System.out.println(<STR_LIT>)<INDENT><INDENT>// println(<STR_LIT>)<INDENT><INDENT>throw E(<STR_LIT>)<INDENT>}"}
{"signature": "val Exp =", "body": "<STR_LIT><EOL>"}
{"signature": "val argumentTypeWithInvoke =", "body": "argumentType.findSubtypeOfBasicFunctionType(session, expectedFunctionalType) ?: return null<EOL>"}
{"signature": "fun testAnnotatedDefinition() {", "body": "<INDENT><INDENT>// Discussing<INDENT>}"}
{"signature": "val HIDDEN_NOSOURCES_CHEAP_MODULE_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "val whenSubjectVariableStack =", "body": "mutableListOf<IrVariable>()<EOL>"}
{"signature": "while (A) {", "body": "<INDENT><INDENT><INDENT><INDENT>//<INDENT><INDENT> if (!B)<INDENT><INDENT><INDENT><INDENT>//<INDENT><INDENT><INDENT> if (!C)<INDENT><INDENT><INDENT><INDENT>//<INDENT><INDENT><INDENT><INDENT> break;<INDENT><INDENT><INDENT><INDENT>//<INDENT><INDENT> D()<INDENT><INDENT><INDENT><INDENT>//<INDENT> }"}
{"signature": "for ((index, x) in cs.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val kFunctionClassId =", "body": "ClassId(KOTLIN_REFLECT_FQ_NAME, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val initialConstraint =", "body": "InitialConstraint(typeVariable, equalType, EQUALITY, position).also { c.addInitialConstraint(it) }<EOL>"}
{"signature": "for (i in <NUM_LIT> until newFun.valueParameters.size) {", "body": "<INDENT><INDENT><INDENT><INDENT>val parameter = newFun.valueParameters[i]<INDENT><INDENT><INDENT><INDENT>if (parameter.isVararg) continue // Handled with WasmVarargExpressionLowering<INDENT><INDENT><INDENT><INDENT>if (newCall.getValueArgument(i) != null) continue<INDENT><INDENT><INDENT><INDENT>newCall.putValueArgument(<INDENT><INDENT><INDENT><INDENT><INDENT>i,<INDENT><INDENT><INDENT><INDENT><INDENT>IrConstImpl.defaultValueForType(UNDEFINED_OFFSET, UNDEFINED_OFFSET, parameter.type)<INDENT><INDENT><INDENT><INDENT>)<INDENT><INDENT><INDENT>}"}
{"signature": "val declaredLater =", "body": "mutableSetOf<FirPropertySymbol>()<EOL>"}
{"signature": "val previouslyContainedStep =", "body": "namedStepOfType<InputArtifact, InputArtifactKind>(name)<EOL>"}
{"signature": "val patchedModule =", "body": "KlibTestUtil.deserializeKlibToCommonModule(patchedKlibFile)<EOL>"}
{"signature": "val tmpStringBuilder =", "body": "irTemporary(irCall(constructor))<EOL>"}
{"signature": "fun serialize(encoder: Encoder, value: SerializableObject) {", "body": "<EOL><INDENT><INDENT>encoder.encodeString(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun test(b: B, c: C) {", "body": "<EOL><INDENT>val k: String = b.bar()<EOL><INDENT>b.foo(<STR_LIT>)<EOL><INDENT>b.foo(null)<EOL><INDENT>val k<NUM_LIT>: String = c.bar()<EOL><INDENT>c.foo(<STR_LIT>)<EOL>}"}
{"signature": "var wasStatic =", "body": "false<EOL>"}
{"signature": "var symbolsNeeded =", "body": "groupsNeeded * symbolsPerGroup<EOL>"}
{"signature": "val expectedShort =", "body": "<STR_LIT><EOL>"}
{"signature": "val childNodes =", "body": "source.lighterASTNode.getChildren(source.treeStructure)<EOL>"}
{"signature": "val fallbackRule =", "body": "owners.patterns.first()<EOL>"}
{"signature": "val capitalize<NUM_LIT> =", "body": "identifier.capitalizeFirstWord(asciiOnly = true)<EOL>"}
{"signature": "val leftExpression =", "body": "Translation.translateAsExpression(literal.first, context, startBlock)<EOL>"}
{"signature": "when (C) {", "body": "in ... }"}
{"signature": "val varNumber =", "body": "if (rawParameters != null) parseParameters(rawParameters)[<NUM_LIT>].toInt() else null<EOL>"}
{"signature": "fun getTopLevelFunctionSymbolsTo(<EOL><INDENT><INDENT>destination: MutableList<FirNamedFunctionSymbol>,<EOL><INDENT><INDENT>callableId: CallableId,<EOL><INDENT><INDENT>functions: Collection<KtNamedFunction>,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>destination += functionCache.getValue(callableId, functions)<EOL><INDENT>}"}
{"signature": "val simpleDescriptor =", "body": "getFqName(declaration, file, <STR_LIT>)<EOL>"}
{"signature": "val bBaseDescriptor =", "body": "bDescriptor.baseDescriptorForSynthetic<EOL>"}
{"signature": "val actualValue =", "body": "map.get(key)<EOL>"}
{"signature": "val DEFAULT_MAX_ATTEMPTS =", "body": "<NUM_LIT><EOL>"}
{"signature": "var effectivelyStableClasses =", "body": "<NUM_LIT><EOL>"}
{"signature": "val arrayBuilder =", "body": "JsAstProtoBuf.ArrayLiteral.newBuilder()<EOL>"}
{"signature": "if (inferenceCompatibility) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(LanguageFeature.InferenceCompatibility, LanguageFeature.State.ENABLED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun set() {", "body": "j = <STR_LIT> }"}
{"signature": "fun withAbiDependencies(vararg names: String) {", "body": "<EOL><INDENT><INDENT><INDENT>abiDeps.addAll(names)<EOL><INDENT><INDENT>}"}
{"signature": "val interfaceTableRecord =", "body": "getInterfaceTableRecord(typeInfoPtr, itablePlace.interfaceId)<EOL>"}
{"signature": "if (index <= referredParameterIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(qualifiedAccessExpression.source, FirErrors.UNINITIALIZED_PARAMETER, referredParameter, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun addFallbackErrorIfNecessary() {", "body": "<EOL><INDENT><INDENT>if (reportedErrors.isEmpty())<EOL><INDENT><INDENT><INDENT>reportedErrors += Errors.ERROR_IN_CONTRACT_DESCRIPTION.on(mainCallReportTarget, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val jb =", "body": "J<Byte>(Byte::class)<EOL>"}
{"signature": "fun Boo() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Foo()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun main(fooImpl: FooImpl, fooBarImpl: FooBarImpl) {", "body": "<EOL><INDENT>val a = foo<FooImpl>(<!ARGUMENT_TYPE_MISMATCH!>fooBarImpl<!>)<EOL><INDENT>val b = foo<Foo>(fooImpl)<EOL>}"}
{"signature": "val thisAsReceiverParameter =", "body": "classDescriptor.thisAsReceiverParameter<EOL>"}
{"signature": "fun test(val a: Int var b: Int val c: Int) {", "body": "<EOL><EOL>}"}
{"signature": "val mutableId =", "body": "classId.readOnlyToMutable()<EOL>"}
{"signature": "val classesToLoadByParentFromRegistry =", "body": "<EOL><INDENT><INDENT><INDENT>System.getProperty(<STR_LIT>)?.split(',')?.map { it.trim() } ?: emptyList()<EOL>"}
{"signature": "val fallbackPath =", "body": "listOfNotNull(fallbackFile, fallbackScript) + fallbackClassPath.orEmpty()<EOL>"}
{"signature": "for (i in <NUM_LIT>u.toUByte()..<NUM_LIT>u.toUByte() step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>.add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>.size > <NUM_LIT><NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val excludedClasses =", "body": "registeredDirectives[EXCLUDED_CLASSES]<EOL>"}
{"signature": "val ROOT_PACKAGE =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "val namePlusImpl =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (!removed && it == element) {", "body": "removed = true; false }"}
{"signature": "if (modifierList.hasModifierProperty(PsiModifier.PRIVATE)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>KtTypeNullability.UNKNOWN<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var loopCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun withListOfInlineClassArgument(a: AsList<List<UInt>>) {", "body": "}<EOL><INDENT>fun withComparableOfInlineClassArgument(a: AsCmp<Comparable<UInt>>) {}"}
{"signature": "val receiverClassDescriptor =", "body": "receiver.classDescriptor<EOL>"}
{"signature": "val classFile<NUM_LIT> =", "body": "KotlinClassMetadata.readStrict(classFile.write())<EOL>"}
{"signature": "val argsToExclude =", "body": "args.toSet()<EOL>"}
{"signature": "fun testGroovyDownloadAndImport(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestGit(<EOL><INDENT><INDENT><INDENT>gradleVersion,<EOL><INDENT><INDENT><INDENT>groovyTemplateProjectName,<EOL><INDENT><INDENT><INDENT>tag = <STR_LIT>,<EOL><INDENT><INDENT><INDENT>isGradleBuildScript = true<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "var wp_exp =", "body": "umul<NUM_LIT>e(_exp, exp_pow)<EOL>"}
{"signature": "fun testArgumentInVariableAsFunctionCall(f: (Any) -> Unit) {", "body": "<EOL><INDENT>f<!UNREACHABLE_CODE!>(<!>todo()<!UNREACHABLE_CODE!>)<!><EOL>}"}
{"signature": "val remapTypeMap =", "body": "irConstructor.constructedClass.typeParameters.associateBy { it }<EOL>"}
{"signature": "when (expectedTypeForApproximation) {", "body": "<EOL><INDENT><INDENT><INDENT>null, !in possibleTypes -> possibleTypes.first()<EOL><INDENT><INDENT><INDENT>else -> expectedTypeForApproximation<EOL><INDENT><INDENT>}"}
{"signature": "for (readIndex in <NUM_LIT>.lastIndex) {", "body": "<EOL><INDENT><INDENT>val element = this[readIndex]<EOL><INDENT><INDENT>if (predicate(element) == predicateResultToRemove)<EOL><INDENT><INDENT><INDENT>continue<EOL><EOL><INDENT><INDENT>if (writeIndex != readIndex)<EOL><INDENT><INDENT><INDENT>this[writeIndex] = element<EOL><EOL><INDENT><INDENT>writeIndex++<EOL><INDENT>}"}
{"signature": "fun testMatchWithGroups() {", "body": "<EOL><INDENT><INDENT>var baseString = <STR_LIT><EOL><INDENT><INDENT>var pattern = <STR_LIT><EOL><INDENT><INDENT>assertTrue(Regex(pattern).matches(baseString))<EOL><EOL><INDENT><INDENT>baseString = <STR_LIT><EOL><INDENT><INDENT>pattern = <STR_LIT><EOL><INDENT><INDENT>assertTrue(Regex(pattern).matches(baseString))<EOL><INDENT><INDENT>assertTrue(Regex(pattern).containsMatchIn(baseString))<EOL><INDENT>}"}
{"signature": "if (extTestModule is ExtTestModule && extTestModule.isSupport && supportModule != null) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// Is support module is met across dependencies, then return new (unique) name for it.<INDENT><INDENT><INDENT><INDENT><INDENT>supportModule.name<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val MAX_SIZE =", "body": "Int.MAX_VALUE - <NUM_LIT> // empirically maximal array size that can be allocated without exceeding VM limits"}
{"signature": "else if (declaration.isHiddenToOvercomeSignatureClash == true) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (protocols.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>protocols.joinTo(this, separator = <STR_LIT>, prefix = <STR_LIT>, postfix = <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(x: Base<*>) {", "body": "<EOL><INDENT>x.foo = <!ASSIGNMENT_TYPE_MISMATCH!><!CANNOT_INFER_PARAMETER_TYPE, NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>invOf<!>()<!><EOL><INDENT>x.foo = null<EOL>}"}
{"signature": "val stateLock =", "body": "ReentrantReadWriteLock()<EOL>"}
{"signature": "fun reportParameterError(<INDENT><INDENT><INDENT><INDENT>node: InferenceNode,<INDENT><INDENT><INDENT><INDENT>index: Int,<INDENT><INDENT><INDENT><INDENT>expected: String,<INDENT><INDENT><INDENT><INDENT>received: String<INDENT><INDENT><INDENT>) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Ignored, should be reported by the front-end<INDENT><INDENT><INDENT>}"}
{"signature": "fun move(from: Int, to: Int, count: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitTypeAliasNode(node: CirTypeAliasNode, data: Unit) {", "body": "<INDENT><INDENT>node.commonDeclaration() // commonize type alias<INDENT>}"}
{"signature": "val MULTIPLATFORM_PROJECT_METADATA_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val fakeArgument =", "body": "FakeValueArgumentForLeftCallableReference(ktExpression)<EOL>"}
{"signature": "val returnExpression =", "body": "IrReturnImpl(<NUM_LIT>, <NUM_LIT>, irBuiltIns.nothingType, function.symbol, const)<EOL>"}
{"signature": "val headerKlibSameAbi =", "body": "File(getHeaderPath(<STR_LIT>))<EOL>"}
{"signature": "val testPathFull =", "body": "getAbsoluteFile(testDir)<EOL>"}
{"signature": "val loo =", "body": "<STR_LIT><EOL>"}
{"signature": "val INVALID_OBJC_NAME =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "val hasBadReceiverType =", "body": "symbol.resolvedReceiverTypeRef?.type?.contains(::containsFunctionN) == true<EOL>"}
{"signature": "val parentIsPrivate =", "body": "DescriptorVisibilities.isPrivate(oldParent.visibility)<EOL>"}
{"signature": "fun quickSort(<EOL><INDENT>array: ULongArray, left: Int, right: Int) {", "body": "<EOL><INDENT>val index = partition(array, left, right)<EOL><INDENT>if (left < index - <NUM_LIT>)<EOL><INDENT><INDENT>quickSort(array, left, index - <NUM_LIT>)<EOL><INDENT>if (index < right)<EOL><INDENT><INDENT>quickSort(array, index, right)<EOL>}"}
{"signature": "val kmUnderlyingType =", "body": "underlyingType.map(true)<EOL>"}
{"signature": "val expectedRes =", "body": "expectedIter.next()<EOL>"}
{"signature": "val binaryClassForPackageClass =", "body": "classFinder.findKotlinClass(ClassId.topLevel(facadeFqName), jvmMetadataVersion)<EOL>"}
{"signature": "val ownerFirstStatement =", "body": "target.owner.statements.singleOrNull()<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Inv<out Number>, list: List<Inv<Number>>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL>}"}
{"signature": "val reportRange =", "body": "nodeToReport.textRange<EOL>"}
{"signature": "if (ch > rangeEnd) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun globalDefaults(init: DefaultsProviderBuilder.() -> Unit) {", "body": "<EOL><INDENT><INDENT>globalDefaultsConfigurators += init<EOL><INDENT><INDENT>defaultsProviderBuilder.apply(init)<EOL><INDENT>}"}
{"signature": "if (declaration.isAnonymousObject) {", "body": "<EOL><INDENT><INDENT><INDENT>return objectNamer.getName(parent, declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (!predicate(item)) {", "body": "<EOL><INDENT><INDENT><INDENT>list.add(item)<EOL><INDENT><INDENT><INDENT>yielding = true<EOL><INDENT><INDENT>}"}
{"signature": "val taylor_<NUM_LIT>_bound =", "body": "nativeMath.sqrt(epsilon)<EOL>"}
{"signature": "var wasmEnableArrayRangeChecks =", "body": "false<EOL>"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.enumEntryAnnotation) != new.getExtensionCount(JsProtoBuf.enumEntryAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "package or some other type, and `false` otherwise.", "body": "<EOL>"}
{"signature": "fun f(vararg t : Int, f : ()->Unit) {", "body": "<EOL>}"}
{"signature": "val finallyStart =", "body": "markNewLabel()<EOL>"}
{"signature": "val definitionMatch =", "body": "linkDefinitionRegExp.matchEntire(line)<EOL>"}
{"signature": "val commonizeCInteropTaskName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testInternalFromForeignModuleCommon() {", "body": "<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(compileCommonLibrary(<STR_LIT>)), K<NUM_LIT>MetadataCompiler())<EOL><INDENT>}"}
{"signature": "val selectedVersion =", "body": "ResolvedDependencyVersion(result.groupValues[<NUM_LIT>])<EOL>"}
{"signature": "if (KotlinBuiltIns.isChar(dispatchReceiverType) && resolvedCall.resultingDescriptor.isEqualsDescriptor()) {", "body": "<EOL><INDENT><INDENT><INDENT>dispatchReceiverType = resolvedCall.resultingDescriptor.overriddenDescriptors.single().dispatchReceiverParameter!!.type<EOL><INDENT><INDENT>}"}
{"signature": "fun suspendThrowsNamedEmptyLiteral() {", "body": "}<EOL><EOL><!THROWS_LIST_EMPTY!>@Throws(exceptionClasses = arrayOf())<!><EOL>suspend fun suspendThrowsNamedEmptyArrayOf() {}"}
{"signature": "fun testMapToMutableMapEntriesContainsMapEntry() {", "body": "<EOL><INDENT><INDENT>testMapEntriesContainsMapEntry(mapOfLetterToIndex.toMutableMap(), <STR_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun registerIgnore(testCases: Collection<TestCase>) {", "body": "<EOL><INDENT><INDENT>total += testCases.size<EOL><INDENT><INDENT>_ignoredTests.addAll(testCases)<EOL><INDENT>}"}
{"signature": "val qualifierType =", "body": "correspondingDeclaration.constructType(typeArgumentsWithSourceInfo.toTypedArray(), isNullable = false)<EOL>"}
{"signature": "fun setValue(thisRef: Any, property: KProperty<*>, value: EE?) {", "body": "<EOL><INDENT><INDENT>setNullableValue(thisRef, key ?: property.toKey(), value)<EOL><INDENT>}"}
{"signature": "if (desc != null && desc != metadataDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitAnnotation(desc, visible)<EOL><INDENT><INDENT>}"}
{"signature": "val implicitReceiverStack =", "body": "context.towerDataContext.implicitReceiverStack<EOL>"}
{"signature": "fun use(f: C.(Int) -> Unit) {", "body": "}<EOL><EOL>class C<EOL><EOL>fun C.extensionVararg(i: Int, vararg s: String) {}"}
{"signature": "val ATOMIC_SET_ARRAY_ELEMENT<INDENT>  =", "body": "<STR_LIT><EOL>"}
{"signature": "val k<NUM_LIT>NativeCompilerArgumentsFqName =", "body": "FqName(K<NUM_LIT>NativeCompilerArguments::class.qualifiedName!!)<EOL>"}
{"signature": "fun runIt(r: KRunnable) {", "body": "<EOL><INDENT>r.run()<EOL>}"}
{"signature": "fun checkErrorLevel() {", "body": "<EOL><INDENT><INDENT>checkLogLevel(KotlinCompilerArgumentsLogLevel.ERROR, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val testNameStr =", "body": "testName.toString()<EOL>"}
{"signature": "var max =", "body": "a<EOL>"}
{"signature": "val annotationsResolver =", "body": "project.createAnnotationResolver(firProvider.searchScope)<EOL>"}
{"signature": "fun NoChildren<NUM_LIT>() {", "body": "}<EOL><EOL><INDENT><INDENT><INDENT><INDENT>@Composable<EOL><INDENT><INDENT><INDENT><INDENT>fun MultiChildren(c: @Composable (x: Int) -> Unit = {}"}
{"signature": "if (memberDeclaration.isExpect) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun builder<NUM_LIT>(f: suspend () -> Unit) {", "body": "<EOL><INDENT>f.startCoroutine(EmptyContinuation)<EOL>}"}
{"signature": "if (kind == ComposableFunction || kind == KComposableFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>expression.source,<EOL><INDENT><INDENT><INDENT><INDENT>ComposeErrors.COMPOSABLE_FUNCTION_REFERENCE,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun createSuccessfulInstallationFile(bundleDir: File) {", "body": "<EOL><INDENT><INDENT>bundleDir.resolve(MARKER_FILE).createNewFile()<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.<NUM_LIT> step one() step one()) {", "body": "<EOL><INDENT>}"}
{"signature": "val setPropertiesToThrowableInstanceSymbol =", "body": "<EOL><INDENT><INDENT>symbolTable.descriptorExtension.referenceSimpleFunction(getJsInternalFunction(<STR_LIT>))<EOL>"}
{"signature": "fun setValue(thisRef: Node, property: KProperty<*>, value: E) {", "body": "<EOL><INDENT><INDENT>flags.set(thisRef, flagValues[value.ordinal] + flags.get(thisRef))<EOL><INDENT>}"}
{"signature": "val negativeColor =", "body": "Color(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "if (gradleVersion >= GradleVersion.version(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val IMPLICIT_LAMBDA_PARAMETER_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val actualBounds =", "body": "actualTypeParameterSymbols[i].bounds<EOL>"}
{"signature": "if (hasLazyFirSymbol || other.hasLazyFirSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>val psiClass = psi as? PsiClass ?: return symbolEquals(other)<EOL><INDENT><INDENT><INDENT>val otherPsiClass = other.psi as? PsiClass ?: return symbolEquals(other)<EOL><INDENT><INDENT><INDENT>return PsiEquivalenceUtil.areElementsEquivalent(psiClass, otherPsiClass)<EOL><INDENT><INDENT>}"}
{"signature": "when (baseDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirSimpleFunction -> isOverriddenFunction(overrideCandidate, baseDeclaration)<EOL><INDENT><INDENT><INDENT>is FirProperty -> isOverriddenProperty(overrideCandidate, baseDeclaration)<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "package bug<EOL>.", "body": ""}
{"signature": "if (expression.explicitReceiver == expression.dispatchReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.replaceDispatchReceiver(newReceiverAccess)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val moduleDescriptorToKotlinLibrary =", "body": "dependencyGraph.keys.associateBy { klib -> getModuleDescriptor(klib) }<EOL>"}
{"signature": "if (declaration.getter.isComposableDelegatedAccessor()) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.getter.annotations += createComposableAnnotation()<EOL><INDENT><INDENT>}"}
{"signature": "val COMPLEMENTARY_FILES =", "body": "<STR_LIT><EOL>"}
{"signature": "val string =", "body": "<STR_LIT><EOL>"}
{"signature": "if (debugRuntimeOrNull != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val external = LLVMGetNamedGlobal(debugRuntimeOrNull, <STR_LIT>)!!<EOL><INDENT><INDENT><INDENT>llvm.constInt<NUM_LIT>(LLVMGetArrayLength(LLVMGlobalGetValueType(external)))<EOL><INDENT><INDENT>}"}
{"signature": "val jsonReport =", "body": "artifactoryUrlConnector.sendRequest(RequestMethod.GET, accessFileUrl).await()<EOL>"}
{"signature": "val pathSeparator =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this.isCurrentScriptTopLevelDeclaration(data)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>createThisReceiverParameter(context, IrDeclarationOrigin.SCRIPT_THIS_RECEIVER, scriptClassReceiver.type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val superConeType =", "body": "superTypeRef.coneTypeSafe<ConeClassLikeType>() ?: continue<EOL>"}
{"signature": "val jsLibraryRootPaths =", "body": "compilerConfiguration[JSConfigurationKeys.LIBRARIES].orEmpty()<EOL>"}
{"signature": "fun replaceReceiverParameter(newReceiverParameter: FirReceiverParameter?) {", "body": "}<EOL><EOL><INDENT>override fun replaceDeprecationsProvider(newDeprecationsProvider: DeprecationsProvider) {<EOL><INDENT><INDENT>deprecationsProvider = newDeprecationsProvider<EOL><INDENT>}"}
{"signature": "val filteredOverrides =", "body": "OverridingUtil.filterOutOverridden(overriddenDeclarations)<EOL>"}
{"signature": "fun testExtensionVararg() {", "body": "<EOL><INDENT>use(C::extensionVararg)<EOL>}"}
{"signature": "val args<NUM_LIT> =", "body": "annotation<NUM_LIT>.argumentMapping.mapping<EOL>"}
{"signature": "val support =", "body": "this@SerializationJvmIrIntrinsicSupport<EOL>"}
{"signature": "val calculatingReturnType =", "body": "ThreadLocal<Boolean>()<EOL>"}
{"signature": "var unchangedIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val DEFAULT_DESCRIPTION =", "body": "<STR_LIT><EOL>"}
{"signature": "val klibArtifact =", "body": "KLIB(settings.artifactFileForKlib(sourceModules, freeCompilerArgs))<EOL>"}
{"signature": "when (val result = parseJson(value)) {", "body": "<EOL><INDENT><INDENT>is Success -> result.value<EOL><INDENT><INDENT>is Failure -> throw IllegalArgumentException(result.reason)<EOL><INDENT>}"}
{"signature": "when (cls.getName()) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> <NUM_LIT> as T<EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT> as T<EOL><INDENT><INDENT><INDENT>else -> null!!<EOL><INDENT><INDENT>}"}
{"signature": "val isAbstract =", "body": "descriptor.modality == Modality.ABSTRACT<EOL>"}
{"signature": "if (Flags.IS_SECONDARY.get(secondaryConstructorProto.flags)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createConstructorStub(classBody, secondaryConstructorProto, c, thisAsProtoContainer)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val xcodeMajorVersion =", "body": "Xcode.findCurrent().version.major<EOL>"}
{"signature": "if (type != null && !type.isError && classDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val container = if (classDescriptor.kind == ClassKind.INTERFACE) interfaceEntries else classEntries<EOL><INDENT><INDENT><INDENT><INDENT>container += entry<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun jr<NUM_LIT>() {", "body": "}// Java source-retained annotation@JS@JS.Container()fun js<NUM_LIT>() {}"}
{"signature": "val RETURNS_EFFECT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val SINGLE_MASK_FIELD_MISSING_FUNC_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun testExplicitThis() {", "body": "<EOL><INDENT><INDENT>this += <NUM_LIT><EOL><INDENT>}"}
{"signature": "for (i in length until newLength) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>string += '\\u<NUM_LIT>'<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun fooHidden() {", "body": "}<EOL><EOL>@Deprecated(<STR_LIT>)<EOL><!DEPRECATED_SINCE_KOTLIN_WITH_UNORDERED_VERSIONS!>@DeprecatedSinceKotlin(warningSince = <STR_LIT>, errorSince = <STR_LIT>)<!><EOL>fun fooWarningIsGreater<NUM_LIT>() {}"}
{"signature": "val lowerTypeDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lowerType.constructor.declarationDescriptor as? ClassDescriptor<EOL>"}
{"signature": "if (original.isInline && original.hasBody) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>queue.add(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val conditionIsOver =", "body": "Label()<EOL>"}
{"signature": "val reportOutputFiles =", "body": "kaptContext.generationState.configuration.getBoolean(CommonConfigurationKeys.REPORT_OUTPUT_FILES)<EOL>"}
{"signature": "fun visitErrorTypeRef(errorTypeRef: FirErrorTypeRef, data: T) {", "body": "<EOL><INDENT><INDENT>visitResolvedTypeRef(errorTypeRef, data)<EOL><INDENT>}"}
{"signature": "if (rightContext.currentBlockIsEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>JsBinaryOperation(JsBinaryOperator.OR, leftExpression, rightExpression)<EOL><INDENT><INDENT>}"}
{"signature": "var r<NUM_LIT> =", "body": "maxBySquare(arrayOf(<NUM_LIT>,<NUM_LIT>,<NUM_LIT>,<NUM_LIT>,<NUM_LIT>), Result())<EOL>"}
{"signature": "val annotationsComments =", "body": "annotationsList.translateToObjCComment()<EOL>"}
{"signature": "if ((owner.parent as? PsiDocCommentOwner)?.isDeprecated == true) {", "body": "<EOL><INDENT><INDENT><INDENT>addSimpleAnnotationIfMissing(JvmAnnotationNames.DEPRECATED_ANNOTATION.asString(), currentRawAnnotations, foundQualifiers, owner)<EOL><INDENT><INDENT>}"}
{"signature": "while (steps != null && !validFn(steps)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>steps = alter(start, null, steps)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val selector =", "body": "getSelector(bridge)<EOL>"}
{"signature": "fun wrongNumberOfTypeArguments(typeAlias: TypeAliasDescriptor, numberOfParameters: Int) {", "body": "}<EOL><INDENT><INDENT>override fun conflictingProjection(<EOL><INDENT><INDENT><INDENT>typeAlias: TypeAliasDescriptor,<EOL><INDENT><INDENT><INDENT>typeParameter: TypeParameterDescriptor?,<EOL><INDENT><INDENT><INDENT>substitutedArgument: KotlinType<EOL><INDENT><INDENT>) {<EOL><INDENT><INDENT>}"}
{"signature": "val nonUnitReturnedParameterType =", "body": "createFunctionType(<EOL>"}
{"signature": "val incomingEdges =", "body": "reversedEdges[drain]!!<EOL>"}
{"signature": "val DATA_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val positionedElement =", "body": "debugFactory.getPositionedElement(sourceElement)<EOL>"}
{"signature": "if (stepArg.constLongValue != null && nestedInfo.step.constLongValue?.absoluteValue == stepArg.constLongValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return nestedInfo<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (file in kotlin.target.compilations.main.output.allOutputs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TYPE_ALIAS_MARKER =", "body": "'^'<EOL>"}
{"signature": "if (samClass.isInheritedFromSerializable()) {", "body": "<EOL><INDENT><INDENT><INDENT>shouldBeSerializable = true<EOL><INDENT><INDENT>}"}
{"signature": "val candidate =", "body": "<EOL><INDENT><INDENT><INDENT>allTypeVariables.maxByOrNull { getTypeVariableReadiness(it, dependencyProvider) } ?: return null<EOL>"}
{"signature": "for (insn in value.insns) {", "body": "<EOL><INDENT><INDENT><INDENT>needsToBeCoerced[insn] = type<EOL><INDENT><INDENT>}"}
{"signature": "fun buildKtModuleProviderByCompilerConfiguration(<EOL><INDENT><INDENT>compilerConfiguration: CompilerConfiguration,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>projectStructureProvider = buildKtModuleProviderByCompilerConfiguration(<EOL><INDENT><INDENT><INDENT>kotlinCoreProjectEnvironment,<EOL><INDENT><INDENT><INDENT>compilerConfiguration,<EOL><INDENT><INDENT><INDENT>getPsiFilesFromPaths(kotlinCoreProjectEnvironment, getSourceFilePaths(compilerConfiguration)),<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val platformDirProjectRelative =", "body": "<STR_LIT> + platformDir.toRelativeString(projectDir)<EOL>"}
{"signature": "val composeExtension =", "body": "extensions.getByType<ComposeCompilerGradlePluginExtension>()<EOL>"}
{"signature": "val valueAfter =", "body": "function.getConstantFromExpressionBody() // OK: valueAfter is guarantied to be '<NUM_LIT>'"}
{"signature": "val functionFactory =", "body": "outer.CandidateFactoryImpl(name, context, tracing)<EOL>"}
{"signature": "fun testSmartCastVsSuspendConversion(a: () -> Unit) {", "body": "<EOL><INDENT>a as suspend () -> Unit<EOL><INDENT>useSuspend(a)<EOL>}"}
{"signature": "val fSet =", "body": "NonCapFSet(consumersCount++)<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.constructorAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(JsProtoBuf.constructorAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val typeParameterToArgumentMap =", "body": "descriptor.typeParameters.zip(call.typeArguments).associate { it }<EOL>"}
{"signature": "if (doesJavaOverrideHaveIncompatibleValueParameterKinds(superMember, subMember)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Result.INCOMPATIBLE<EOL><INDENT><INDENT>}"}
{"signature": "if (!expression.isPhysical && !name.isSpecial && name.asString().endsWith(CompletionUtilCore.DUMMY_IDENTIFIER_TRIMMED)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (returnsNothing) {", "body": "<EOL><INDENT><INDENT><INDENT>addNonSuccessfullyTerminatingNode(node)<EOL><INDENT><INDENT>}"}
{"signature": "fun resetSmartCastPosition() {", "body": "<EOL><INDENT><INDENT>resetSmartCastPositionTo(graphBuilder.lastNodeOrNull?.flow)<EOL><INDENT>}"}
{"signature": "val expressionParent =", "body": "this.parent<EOL>"}
{"signature": "val allPropertyMetadataCheckers =", "body": "listOf(<EOL>"}
{"signature": "val reportDateFormat =", "body": "SimpleDateFormat(<STR_LIT>)<EOL>"}
{"signature": "fun testNullableVsNonNull<NUM_LIT>(ns: NStr) {", "body": "}<EOL>fun testNullableVsNonNull<NUM_LIT>(ns: NStr?) {}"}
{"signature": "val KONAN_DISTRIBUTION_PLATFORM_LIBS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "var sLong =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "if (primaryConstructor?.source == null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirErrors.DATA_CLASS_WITHOUT_PARAMETERS, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun clearVersion() {", "body": "<EOL><INDENT>  _builder.clearVersion()<EOL><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>((MaxUB - <NUM_LIT>u).toUInt(), (MaxUB - <NUM_LIT>u).toUInt())) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val DEFAULT_SEVERITY =", "body": "Severity.ERROR<EOL>"}
{"signature": "if (<STR_LIT> != function.name && !hasAnnotationWithExactNumberOfArguments(function, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val functionsAndConstructors =", "body": "memberScope<EOL>"}
{"signature": "val objCDirectFqName =", "body": "NativeStandardInteropNames.objCDirectClassId.asSingleFqName()<EOL>"}
{"signature": "val DAEMON_DEFAULT_STARTUP_TIMEOUT_MS =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "if (<!USELESS_IS_CHECK!>a is Ann<!>) {", "body": "}"}
{"signature": "if (retention != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return annotationRetentionMap[retention]!!<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val declarationProvider =", "body": "project.createDeclarationProvider(<EOL>"}
{"signature": "when (val dependencyProvider = session.symbolProvider) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is LLFirModuleWithDependenciesSymbolProvider -> dependencyProvider.providers<EOL><INDENT><INDENT><INDENT><INDENT>else -> listOf(dependencyProvider)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(a: In<A>, b: In<B>) {", "body": "<EOL><INDENT><!INFERRED_TYPE_VARIABLE_INTO_EMPTY_INTERSECTION_WARNING!>genericIn<!>(select(a, b))<EOL>}"}
{"signature": "val calleeReferenceForExessiveDelegate =", "body": "oldExcessiveDelegate.calleeReference<EOL>"}
{"signature": "val KOTLIN_JVM_INTERNAL_REPEATABLE_CONTAINER =", "body": "<STR_LIT><EOL>"}
{"signature": "val allArguments =", "body": "ArrayList<JsExpression>(<NUM_LIT> + reifiedArguments.size + valueArguments.size)<EOL>"}
{"signature": "if (t.finalProperty is String) {", "body": "<EOL><INDENT><INDENT>t.finalProperty.length<EOL><INDENT>}"}
{"signature": "fun addJavaToKotlin(javaClassId: ClassId, kotlinClassId: ClassId) {", "body": "<EOL><INDENT><INDENT>javaToKotlin[javaClassId.asSingleFqName().toUnsafe()] = kotlinClassId<EOL><INDENT>}"}
{"signature": "fun main<NUM_LIT>(x: A<<!UPPER_BOUND_VIOLATED!>Int?<!>>) {", "body": "}<EOL>fun main<NUM_LIT>(x: A<NUM_LIT><<!UPPER_BOUND_VIOLATED!>Int?<!>>) {}"}
{"signature": "val isGenerated =", "body": "sourceRootTag.getAttributeValue(IS_GENERATED_ATTRIBUTE)?.toBoolean() ?: false<EOL>"}
{"signature": "val dotFile =", "body": "zipRoot.resolve(<STR_LIT>)<EOL>"}
{"signature": "val _in =", "body": "doIn(i)<EOL>"}
{"signature": "val hasBackingFields =", "body": "builder.allFields.any { it.nullable }<EOL>"}
{"signature": "fun coerceAtLeastUnsigned() {", "body": "<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>u.coerceAtLeast(<NUM_LIT>u), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>u.coerceAtLeast(<NUM_LIT>u), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "for ((_, argument) in objCName.annotation.argumentMapping.mapping) {", "body": "<EOL><INDENT><INDENT><INDENT>if (argument is FirLiteralExpression<*>) continue<EOL><INDENT><INDENT><INDENT>reporter.reportOn(argument.source, NON_LITERAL_OBJC_NAME_ARG, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (containingClass != null && ktFunction != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkParcelableClassMethod(descriptor, containingClass, ktFunction, trace)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val SAFE_ENV_VARS =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun visitErrorAnnotationCall(errorAnnotationCall: FirErrorAnnotationCall, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allAnnotationCallCheckers.check(errorAnnotationCall, data)<EOL><INDENT>}"}
{"signature": "val cEnumByValueFunctionGenerator =", "body": "<EOL><INDENT><INDENT><INDENT>CEnumByValueFunctionGenerator(context, symbols)<EOL>"}
{"signature": "fun compareAndSet() {", "body": "<EOL><INDENT><INDENT>val initial = Data(<NUM_LIT>)<EOL><INDENT><INDENT>val new = Data(<NUM_LIT>)<EOL><INDENT><INDENT>val x = AtomicReference<Data>(initial)<EOL><INDENT><INDENT>val successValue = x.compareAndSet(initial, new)<EOL><INDENT><INDENT>assertTrue(successValue)<EOL><INDENT><INDENT>assertEquals(x.value, new)<EOL><INDENT><INDENT>val failValue = x.compareAndSet(initial, Data(<NUM_LIT>))<EOL><INDENT><INDENT>assertFalse(failValue)<EOL><INDENT><INDENT>assertEquals(x.value, new)<EOL><INDENT>}"}
{"signature": "val selectedName =", "body": "resolvedImport.importedName ?: return emptyList()<EOL>"}
{"signature": "val ktLeft =", "body": "ktExpression.left ?: throw AssertionError(<STR_LIT>)<EOL>"}
{"signature": "val localHash =", "body": "if (proto.hasLocalHash()) proto.localHash else null<EOL>"}
{"signature": "val longStrings =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "val dependsOnNames =", "body": "dependsOn.takeIf { it.isNotBlank() }?.split(<STR_LIT>) ?: emptyList()<EOL>"}
{"signature": "fun reportCompileIteration(incremental: Boolean, sourceFiles: Collection<File>, exitCode: ExitCode) {", "body": "<EOL><INDENT>}"}
{"signature": "val v<NUM_LIT>StyleInstrumentedTest =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val callScope =", "body": "Scope.CallScope(expression, this)<EOL>"}
{"signature": "val privateX<NUM_LIT>Ref =", "body": "Z<NUM_LIT>::privateX<NUM_LIT><EOL>"}
{"signature": "val npmResolutionManager =", "body": "project.kotlinNpmResolutionManager<EOL>"}
{"signature": "val invalids =", "body": "listOf(<EOL>"}
{"signature": "when (withAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>true -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>false -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>null -> <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val containingGraph =", "body": "declarations<EOL>"}
{"signature": "fun testNoWarningsInPlatformSpecificSourceSetsOrTests(gradleVersion: GradleVersion, @TempDir tempDir: Path) {", "body": "<EOL><INDENT><INDENT>publishLibrary(<STR_LIT>, gradleVersion, tempDir)<EOL><INDENT><INDENT>checkDiagnostics(gradleVersion, <STR_LIT>, tempDir)<EOL><INDENT>}"}
{"signature": "val ConsistentCopyVisibility =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val kotlinClassDescriptors =", "body": "j<NUM_LIT>kClassMapper.mapPlatformClass(javaAnalogueDescriptor.fqNameSafe, FallbackBuiltIns.Instance)<EOL>"}
{"signature": "val objCObjectClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (edge.label != PostponedPath) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>statementFlows.add(flow)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val cachedKlibCompilations =", "body": "ThreadSafeCache<KlibCacheKey, KlibCompilations>()<EOL>"}
{"signature": "val readOnlyConstraintStorage =", "body": "candidate.system.asReadOnlyStorage()<EOL>"}
{"signature": "val jarCollections =", "body": "JAR_COLLECTIONS_KEY_PATHS.asSequence().flatMap { currentClassLoader.getResources(it).asSequence() }<EOL>"}
{"signature": "val renderConfiguration =", "body": "ParsedCodeMetaInfoRenderConfiguration<EOL>"}
{"signature": "for (lambda in candidate.lambdasAnalyzedWithPCLA) {", "body": "<EOL><INDENT><INDENT><INDENT>lambda.transformSingle(firStubTypeTransformer, null)<EOL><INDENT><INDENT>}"}
{"signature": "val isOpen =", "body": "parameter.modalityModifier()?.node?.elementType == KtTokens.OPEN_KEYWORD<EOL>"}
{"signature": "if (!predicate(this[index])) {", "body": "<EOL><INDENT><INDENT><INDENT>return drop(index + <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val jlcArray =", "body": "symbols.array.typeWith(javaLangClassType)<EOL>"}
{"signature": "package <STR_LIT> first, then for the class <STR_LIT> in the package<EOL>.", "body": ""}
{"signature": "val COMPANION_GETTER_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun registerVersionSpecificProjectExtensionPoints(area: ExtensionsArea) {", "body": "<EOL><INDENT><INDENT>CoreApplicationEnvironment.registerExtensionPoint(area, JvmElementProvider.EP_NAME, JvmElementProvider::class.java)<EOL><INDENT>}"}
{"signature": "val newUserType =", "body": "handler.psiFactory<EOL>"}
{"signature": "val processedMembers =", "body": "FakeOverrideInfo()<EOL>"}
{"signature": "fun randomOrNullInEmptyRange() {", "body": "<EOL><INDENT><INDENT>assertNull(IntRange.EMPTY.randomOrNull())<EOL><INDENT><INDENT>assertNull(LongRange.EMPTY.randomOrNull())<EOL><INDENT><INDENT>assertNull(CharRange.EMPTY.randomOrNull())<EOL><INDENT>}"}
{"signature": "val valuesF =", "body": "this@SerializerForEnumsGenerator.serializableIrClass.functions.single { it.name == StandardNames.ENUM_VALUES }<EOL>"}
{"signature": "if (fromTypeErased.isSubclassOf(toTypeErased)) {", "body": "<EOL><INDENT><INDENT><INDENT>return builder.irTrue()<EOL><INDENT><INDENT>}"}
{"signature": "val useNotContains =", "body": "<NUM_LIT> <!PROPERTY_AS_OPERATOR, RESULT_TYPE_MISMATCH!>!in<!> e<EOL>"}
{"signature": "fun bar(f: Foo) {", "body": "}<EOL><EOL>@JvmName(<STR_LIT>)<EOL>fun baz(r: Result<Int>) {}"}
{"signature": "var unknownStableArguments =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (functionalArgument is LambdaInfo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>capturedLambdas.add(functionalArgument)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testSingleClass() {", "body": "<EOL><INDENT><INDENT>doTest(<EOL><INDENT><INDENT><INDENT>setOf(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT>package test<EOL><EOL><INDENT><INDENT><INDENT><INDENT>class Foo<STR_LIT>\".trimIndent()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (kClass.isSubclassOf(PsiElement::class)) {", "body": "<EOL><INDENT><INDENT><INDENT>return HLIdParameterConversion<EOL><INDENT><INDENT>}"}
{"signature": "import $it\")<EOL>.", "body": ""}
{"signature": "if (s?.check() == true) {", "body": "<INDENT><INDENT>s.length // Should be OK<INDENT>}"}
{"signature": "if (nameRef.qualifier != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!extractImportTagImpl(nameRef.qualifier!!, sb)) return false<EOL><INDENT><INDENT><INDENT><INDENT>sb.append('.')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (!condition()) {", "body": "<EOL><INDENT><INDENT><INDENT>Thread.sleep(<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (context.moduleDescriptor.resolveTopLevelClass(JAVA_LANG_RECORD_FQ_NAME, NoLookupLocation.FOR_DEFAULT_IMPORTS) == null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.JVM_RECORD_REQUIRES_JDK<NUM_LIT>on(reportOn))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (instruction != startInstruction || previousSubGraphInstructions.isEmpty()) {", "body": "<EOL><INDENT><INDENT>return previous<EOL><INDENT>}"}
{"signature": "fun println(message : Any?) {", "body": "throw Exception() }"}
{"signature": "val messageFormat =", "body": "MessageFormat(message)<EOL>"}
{"signature": "val lsSerializer =", "body": "domImplementation.createLSSerializer()<EOL>"}
{"signature": "val compiledClass =", "body": "CompiledClass(output.outputFile, output.sourceFiles, ClassReader(bytes).className, binaryContent)<EOL>"}
{"signature": "val projectionType =", "body": "Variance.INVARIANT<EOL>"}
{"signature": "if (node.prev?.key == key) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>count++<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitResolvedQualifier(resolvedQualifier: FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT>super.visitResolvedQualifier(resolvedQualifier)<EOL><EOL><INDENT><INDENT>collector.processTypeQualifier(resolvedQualifier)<EOL><INDENT>}"}
{"signature": "fun test(param: String) {", "body": "<EOL><INDENT><INDENT><expr>param</expr><EOL><INDENT>}"}
{"signature": "val reversedQualifierParts =", "body": "qualifierParts.asReversed()<EOL>"}
{"signature": "var getterReturnType =", "body": "(getter.returnTypeRef as? FirResolvedTypeRef)?.type<EOL>"}
{"signature": "fun updatePropertiesFromOverriddenField(parentField: Field, haveSameClass: Boolean) {", "body": "}<EOL><EOL><INDENT>override fun toString(): String {<EOL><INDENT><INDENT>return name<EOL><INDENT>}"}
{"signature": "package library<EOL>.", "body": ""}
{"signature": "for (overridden in descriptor.overriddenDescriptors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>collectEffectiveReferencedDescriptors(result, overridden.original)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val constantAllowedTypes =", "body": "primitiveTypes + unsignedTypes + String<EOL>"}
{"signature": "val intStringMapTypeAlias =", "body": "pkg.typeAliases.singleOrNull { it.typeAlias.name.toStrippedString() == <STR_LIT> }<EOL>"}
{"signature": "fun visit(x: JsVars.JsVar) {", "body": "<EOL><INDENT><INDENT><INDENT>currentScope.declaredNames += x.name<EOL><INDENT><INDENT><INDENT>super.visit(x)<EOL><INDENT><INDENT>}"}
{"signature": "if (b is String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>b.length<EOL><INDENT><INDENT><INDENT><INDENT>bar()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (strIntegerPart.length != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val leadingNumber = strIntegerPart.substring(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>return (strIntegerPart.length - <NUM_LIT>) * <NUM_LIT> + countBitsLength(leadingNumber.toLong(HEX_RADIX)) - <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val getterToWrapperInfo =", "body": "this@WrapperGenerationComponentsBuilder.getterToWrapperInfo.toMap()<EOL>"}
{"signature": "val bridgeModuleFile =", "body": "createModuleMap(buildDir, cHeader)<EOL>"}
{"signature": "if (allowAnyScriptsInSourceRoots) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(LanguageFeature.SkipStandaloneScriptsInSourceRoots, LanguageFeature.State.DISABLED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun middle() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val aIsNotLessSpecificThanB =", "body": "ConstraintSystemBuilderImpl.forSpecificity()<EOL>"}
{"signature": "val exportedSymbolFiles =", "body": "HashMap<KotlinSourceFile, KotlinSourceFileExports>(srcFiles.size)<EOL>"}
{"signature": "val objTypeOf =", "body": "jsTypeOf(obj)<EOL>"}
{"signature": "val irConstTypeAnnotationTransformer =", "body": "IrConstTypeAnnotationTransformer(<EOL>"}
{"signature": "fun testIncompleteHierarchyOnlyImport() {", "body": "<EOL><INDENT><INDENT>doTestBrokenLibrary(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (isVolatile) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>, type<Volatile>().render())<EOL><INDENT>}"}
{"signature": "when (val subject = value.toInlineLong) {", "body": "<EOL><INDENT><INDENT><NUM_LIT>toInlineLong -> true<EOL><INDENT><INDENT>else -> false<EOL><INDENT>}"}
{"signature": "if (shouldWrapVarargInArray) {", "body": "<EOL><INDENT><INDENT><INDENT>val concatArguments = prepareConcatArguments(arguments, list, varargElementType)<EOL><INDENT><INDENT><INDENT>val concatExpression = concatArgumentsIfNeeded(concatArguments, varargElementType, false)<EOL><INDENT><INDENT><INDENT>concatExpression<EOL><INDENT><INDENT>}"}
{"signature": "val applicableResolvers =", "body": "registeredAdditionalArtifactResolvers<EOL>"}
{"signature": "fun testMyDemo<NUM_LIT>() {", "body": "<EOL><INDENT>val myDemo = MyDemo<NUM_LIT>()<EOL><EOL><INDENT>assertEquals(testDemoInline(myDemo), <NUM_LIT>)<EOL><INDENT>assertEquals(testDemo(myDemo), <NUM_LIT>)<EOL><INDENT>assertEquals(myDemo.demo(), <NUM_LIT>)<EOL>}"}
{"signature": "val hidesFromObjC =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val dataParameter =", "body": "FunctionParameter(<STR_LIT>, dataTP)<EOL>"}
{"signature": "fun post() {", "body": "}<EOL><EOL><INDENT>interface ResponseSpec {<EOL><INDENT><INDENT>fun <T> bodyToMono(): Mono<T><EOL><INDENT>}"}
{"signature": "val anyEquals =", "body": "irBuiltins.anyClass.owner.simpleFunctions().single { it.name.asString() == <STR_LIT> }<EOL>"}
{"signature": "if (c != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val jumpInstruction =", "body": "it.jumpInstruction<EOL>"}
{"signature": "fun visitThisReference(thisReference: FirThisReference, data: MutableMap<KtElement, FirElement>) {", "body": "}<INDENT>//@formatter:on<INDENT>override fun visitErrorTypeRef(errorTypeRef: FirErrorTypeRef, data: MutableMap<KtElement, FirElement>) {<INDENT><INDENT>super.visitResolvedTypeRef(errorTypeRef, data)<INDENT><INDENT>recordTypeQualifiers(errorTypeRef, data)<INDENT><INDENT>errorTypeRef.delegatedTypeRef?.accept(this, data)<INDENT>}"}
{"signature": "when (type.kindCase) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoType.KindCase.DNN -> return extractIdSignature(type.dnn.underlyingTypeId)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoType.KindCase.SIMPLE -> type.simple.classifier<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoType.KindCase.LEGACYSIMPLE -> type.legacySimple.classifier<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoType.KindCase.DYNAMIC, ProtoType.KindCase.ERROR, ProtoType.KindCase.KIND_NOT_SET, null -> return null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (peek != null) {", "body": "<EOL><INDENT><INDENT><INDENT>next = peek<EOL><INDENT><INDENT><INDENT>peek = next.link<EOL><INDENT><INDENT>}"}
{"signature": "val frontendFlags =", "body": "mapOf(<EOL>"}
{"signature": "val someSpecialValue =", "body": "<STR_LIT><EOL>"}
{"signature": "val yCopy =", "body": "<!LEAKED_IN_PLACE_LAMBDA!>y<!><EOL>"}
{"signature": "if (!AbstractTypeChecker.equalTypes(typeCheckerState, subValueParameters[index].type, superValueParameter.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return incompatible(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val cachedLibraries =", "body": "dependencies.zip(dependencyCaches).associate { it.first.libraryFile.absolutePath to it.second }<EOL>"}
{"signature": "val KOTLIN_MPP_HIERARCHICAL_STRUCTURE_SUPPORT =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "for (index in outputs.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>outputValues.add(outputValuesCArray[index])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeInfoPtrPtr =", "body": "structGep(runtime.typeInfoType, typeInfoOrMeta, <NUM_LIT> )<EOL>"}
{"signature": "if (checkIfToArrayConversionExpected(resolvedArgumentEntry)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getWrappedToArrayNameValuePair(resolvedArgumentEntry)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (param.returnTypeRef is FirResolvedTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>param<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val summaryAction =", "body": "Summary()<EOL>"}
{"signature": "fun TestDifferencesInInternalAndPublicVisibilitiesA() {", "body": "}<EOL><EOL>class TestDifferencesInInternalAndPublicVisibilitiesAReverse {<EOL><INDENT>internal constructor()<EOL>}"}
{"signature": "when (dir) {", "body": "<EOL><INDENT><INDENT>Direction.NORTH -> return <NUM_LIT><EOL><INDENT><INDENT>Direction.SOUTH -> throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT>Direction.WEST  -> return <NUM_LIT><EOL><INDENT><INDENT>Direction.EAST  -> return <NUM_LIT><EOL><INDENT>}"}
{"signature": "for (i in a downTo M) {", "body": "<EOL><INDENT><INDENT>n++<EOL><INDENT>}"}
{"signature": "while (local < method.maxLocals) {", "body": "<EOL><INDENT><INDENT><INDENT>current.setLocal(local, interpreter.newEmptyValue(local))<EOL><INDENT><INDENT><INDENT>local++<EOL><INDENT><INDENT>}"}
{"signature": "val actualContainingClass =", "body": "context.containingDeclarations.lastOrNull()?.symbol as? FirRegularClassSymbol<EOL>"}
{"signature": "val ktValueArgumentList =", "body": "ktValueArgument.parent as? KtValueArgumentList ?: return emptyList()<EOL>"}
{"signature": "fun foo(r: Runnable?) {", "body": "<EOL><INDENT>}"}
{"signature": "fun visitPropertyAccessor(propertyAccessor: PropertyAccessor, data: StubContainer?) {", "body": "<EOL><EOL><INDENT><INDENT>}"}
{"signature": "if (!onlyIrDce) {", "body": "<EOL><INDENT><INDENT><INDENT>result[TranslationMode.FULL_DEV] = allJsFiles<EOL><INDENT><INDENT>}"}
{"signature": "val compileOutputHasEnoughClassFiles =", "body": "checkMinNumberOfClassFiles(compiledSources, totalDeclaredTypes)<EOL>"}
{"signature": "fun visitErrorTypeRef(errorTypeRef: FirErrorTypeRef) {", "body": "<EOL><INDENT><INDENT>visitResolvedTypeRef(errorTypeRef)<EOL><EOL><INDENT><INDENT>errorTypeRef.partiallyResolvedTypeRef?.accept(this)<EOL><INDENT>}"}
{"signature": "if (testString.startsWith(groupValue, startIndex, ignoreCase)) {", "body": "<EOL><INDENT><INDENT><INDENT>matchResult.setConsumed(consCounter, groupValue.length)<EOL><INDENT><INDENT><INDENT>return next.matches(startIndex + groupValue.length, testString, matchResult)<EOL><INDENT><INDENT>}"}
{"signature": "if (a is Int && b is Int) {", "body": "<EOL><INDENT><INDENT>a === b<EOL><INDENT>}"}
{"signature": "val serialDescVar =", "body": "irTemporary(<EOL>"}
{"signature": "if (field.type.isBoolean() && rawPropertyName.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>rawPropertyName.removePrefix(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun setCodeFragmentInfo(codeFragment: KtCodeFragment, info: CodeFragmentCodegenInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>codeFragment.putUserData(INFO_USERDATA_KEY, info)<EOL><INDENT><INDENT>}"}
{"signature": "val builderType =", "body": "builderClass.defaultType<EOL>"}
{"signature": "if (declaration is KtParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>return bindingContext.get(BindingContext.COMPILE_TIME_VALUE, declaration.defaultValue)?.toConstantValue(expectedType)<EOL><INDENT><INDENT>}"}
{"signature": "fun useBuildConfigJava() {", "body": "<EOL><INDENT>if (BuildConfig.APPLICATION_ID != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val builderInferenceSession =", "body": "lambda.builderInferenceSession as BuilderInferenceSession<EOL>"}
{"signature": "val loop =", "body": "JsLabel(jsFun.scope.declareFreshName(<STR_LIT>))<EOL>"}
{"signature": "fun local(data: Data) {", "body": "<EOL><INDENT>data.copy()<EOL>}"}
{"signature": "val UPDATE_SCOPE =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val firFileSession =", "body": "firFile.moduleData.session<EOL>"}
{"signature": "val methodsOfAny =", "body": "symbols.any.owner.declarations.filterIsInstance<IrSimpleFunction>().toSet()<EOL>"}
{"signature": "val assignment =", "body": "JsAstUtils.decomposeAssignmentToVariable(x)<EOL>"}
{"signature": "for (entry in map) {", "body": "<EOL><INDENT><INDENT><INDENT>output.writeObject(entry.key)<EOL><INDENT><INDENT><INDENT>output.writeObject(entry.value)<EOL><INDENT><INDENT>}"}
{"signature": "val leftIsArray =", "body": "KotlinBuiltIns.isArrayOrPrimitiveArray(left)<EOL>"}
{"signature": "val AND =", "body": "OperatorNameConventions.AND<EOL>"}
{"signature": "for (resultOfIntersection in getFunctionsFromSupertypesByName(declaredFunctionSymbol.name)) {", "body": "<EOL><INDENT><INDENT><INDENT>resultOfIntersection.collectDirectOverriddenForDeclared(declaredFunctionSymbol, result, overrideChecker::isOverriddenFunction)<EOL><INDENT><INDENT>}"}
{"signature": "val CHAR_LEFT_SQUARE_BRACKET  =", "body": "<NUM_LIT>xe<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or '['.toInt()<EOL>"}
{"signature": "val eos =", "body": "'\\u<NUM_LIT>'<EOL>"}
{"signature": "fun doWork(noinline job: ()-> Unit) {", "body": "<EOL><INDENT>Executors.callable(job).call()<EOL><INDENT>Executors.callable(job).call()<EOL>}"}
{"signature": "val initializedFilesAtLoopsBreaks =", "body": "mutableMapOf<IrLoop, BitSet>()<EOL>"}
{"signature": "fun testReleaseCompilerAgainstPreReleaseLibraryJsSkipPrereleaseCheck() {", "body": "<EOL><INDENT><INDENT>doTestPreReleaseKotlinLibrary(K<NUM_LIT>JSCompiler(), <STR_LIT>, File(tmpdir, <STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val oldNames =", "body": "oldList.map { compareObject.oldNameResolver.getString(it) }.toSet()<EOL>"}
{"signature": "if (it is KtEnumEntry && it.name == enumEntryName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (scopes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Empty<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val endLocation =", "body": "position?.end<EOL>"}
{"signature": "val isMemoizedLambda =", "body": "expression.origin == ComposeMemoizedLambdaOrigin<EOL>"}
{"signature": "if (value != ourValue) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val enhancedDeeplyArgumentType =", "body": "enhancedArgumentType.getEnhancementDeeplyInternal()<EOL>"}
{"signature": "when (val source = source) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtPsiSourceElement -> source.psi.stringParentChildrenCount()<EOL><INDENT><INDENT><INDENT>is KtLightSourceElement -> source.lighterASTNode.stringParentChildrenCount(source)<EOL><INDENT><INDENT><INDENT>null -> null<EOL><INDENT><INDENT>}"}
{"signature": "var refAExt =", "body": "A::ext<EOL>"}
{"signature": "if (index == descriptors.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (this@getName) {", "body": "<EOL><INDENT><INDENT><INDENT>is ConstructorSymbolMarker -> SpecialNames.INIT<EOL><INDENT><INDENT><INDENT>is ValueParameterSymbolMarker -> parameterName<EOL><INDENT><INDENT><INDENT>is CallableSymbolMarker -> callableId.callableName<EOL><INDENT><INDENT><INDENT>is RegularClassSymbolMarker -> classId.shortClassName<EOL><INDENT><INDENT><INDENT>is TypeAliasSymbolMarker -> classId.shortClassName<EOL><INDENT><INDENT><INDENT>is TypeParameterSymbolMarker -> parameterName<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val numberOfSubmitters =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (visited.add(n)) {", "body": "<EOL><INDENT><INDENT><INDENT>pending.push(n)<EOL><INDENT><INDENT>  }"}
{"signature": "val modulesDir =", "body": "contentDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val LIST_DEPRECATED_PROPERTIES =", "body": "listOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (onStack != merged) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>setStack(i, merged)<EOL><INDENT><INDENT><INDENT><INDENT>changed = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (line in File(file).readLines()) {", "body": "<EOL><INDENT><INDENT><INDENT>val m = pattern.matcher(line)<EOL><INDENT><INDENT><INDENT>if (m.find()) return m.group(<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val lhsTemp =", "body": "irTemporary(lhs)<EOL>"}
{"signature": "val primitiveTypeToCreateTypedArray =", "body": "mapOf(<EOL>"}
{"signature": "if (x is Int) {", "body": "<EOL><INDENT><INDENT>val b = x as? Int<EOL><INDENT>}"}
{"signature": "val shiftRight =", "body": "<!EVALUATED: `<NUM_LIT>`!>shr(<NUM_LIT>L, <NUM_LIT>)<!><EOL>"}
{"signature": "val typeMismatch<NUM_LIT> =", "body": "diagnostics[<NUM_LIT>]<EOL>"}
{"signature": "if (typeParameter.isReified && typeArgument.toRegularClassSymbol(context.session)?.forwardDeclarationKindOrNull() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirNativeErrors.FORWARD_DECLARATION_AS_REIFIED_TYPE_ARGUMENT,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeArgument,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val bytesNeeded =", "body": "length - byteBufferLength<EOL>"}
{"signature": "val mainFqName =", "body": "listOfNotNull(<EOL>"}
{"signature": "val getCall =", "body": "getInitializerOfReferencedLocalVariable(receiverOfOperationCall)<EOL>"}
{"signature": "when (type.arguments.size) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> return false<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> symbols.kMutableProperty<NUM_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> symbols.kMutableProperty<NUM_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> symbols.kMutableProperty<NUM_LIT><EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val typesVirtualCallSites =", "body": "Array(allTypes.size) { mutableListOf<ConstraintGraphVirtualCall>() }<EOL>"}
{"signature": "val oldBackingField =", "body": "oldProperty.backingFieldIfNotDelegate<EOL>"}
{"signature": "val tryGetAssociatedObject =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val unoptimizedAst =", "body": "parse(unoptimizedCode, errorReporter, parserScope, <STR_LIT>)!!<EOL>"}
{"signature": "val generatedReq =", "body": "ConstructorExample<String, Boolean>(<STR_LIT>);<EOL>"}
{"signature": "fun test(x: TNString) {", "body": "<EOL><INDENT>x<!UNSAFE_CALL!>.<!>hashCode()<EOL>}"}
{"signature": "val declaredFields =", "body": "type.rawType.declaredFields<EOL>"}
{"signature": "val concat =", "body": "<STR_LIT><EOL>"}
{"signature": "val typeOperatorCallCheckers =", "body": "setOf(<EOL>"}
{"signature": "if (!isValid) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val errorText = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>throw ServiceLoadingException(file, RuntimeException(errorText))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val arr<NUM_LIT> =", "body": "longArrayOf(<NUM_LIT>,<NUM_LIT>,<NUM_LIT>, <NUM_LIT>4<NUM_LIT><NUM_LIT>90<NUM_LIT>008<NUM_LIT>76640000L)<EOL>"}
{"signature": "val setterInfos =", "body": "classInfo.setterInfos<EOL>"}
{"signature": "val methodClass =", "body": "method.declaringClass<EOL>"}
{"signature": "val isPublicAbi =", "body": "irClass.symbol in context.publicAbiSymbols || irClass.isInlineSamWrapper ||<EOL>"}
{"signature": "var previousScheme =", "body": "toScheme()<EOL>"}
{"signature": "val cacheLock =", "body": "ReentrantReadWriteLock()<EOL>"}
{"signature": "val setUpExternalSource =", "body": "<STR_LIT>main\\<STR_LIT>../external/src\\<STR_LIT><EOL>"}
{"signature": "val minusLongMinValue =", "body": "-Long.MIN_VALUE<EOL>"}
{"signature": "when (regularType) {", "body": "<EOL><INDENT><INDENT><INDENT>in integerLiteralType.possibleTypes -> regularType<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val NATIVE_STANDALONE_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "when (val argument = annotation.argumentMapping.mapping.values.firstOrNull()) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirArrayLiteral -> argument.arguments<EOL><INDENT><INDENT><INDENT>is FirVarargArgumentsExpression -> argument.arguments<EOL><INDENT><INDENT><INDENT>else -> return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val srcArrDescr =", "body": "ArrayDescr(exprVar.type, wasmContext) // will check that exprVar is an array"}
{"signature": "if (descriptor == null || requiresFunctionSignature(descriptor, method.descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.desc = stringTable.getStringIndex(method.descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (node.isAlloc) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (lifetime == Lifetime.GLOBAL)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>++stats.globalAllocsCount<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (lifetime == Lifetime.STACK)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>++stats.stackAllocsCount<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lifetimes[it] = lifetime<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val thenContext =", "body": "context.innerBlock(thenBlock)<EOL>"}
{"signature": "package fragment to FileKt class for top-level callables (K<NUM_LIT> only)\"<EOL>.", "body": ""}
{"signature": "if (project.isIntransitiveMetadataConfigurationEnabled) {", "body": "<EOL><INDENT><INDENT>intransitiveMetadataConfigurationName<EOL><INDENT>}"}
{"signature": "while (predicate(str[i]) && i < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>i++<EOL><INDENT>}"}
{"signature": "val vendoredLibrary =", "body": "<STR_LIT><EOL>"}
{"signature": "if (tags.size == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><INDENT>// We're directly inside the root tag: <MESSAGES><INDENT><INDENT><INDENT><INDENT>return<INDENT><INDENT><INDENT>}"}
{"signature": "val xf =", "body": "x::f<EOL>"}
{"signature": "for ((index, typeArgument) in resultType.arguments.withIndex()) {", "body": "<EOL><INDENT><INDENT>putTypeArgument(index, typeArgument.typeOrNull ?: resultType.erasedUpperBound.typeParameters[index].defaultType)<EOL><INDENT>}"}
{"signature": "fun setFoo(newFoo: Int) {", "body": "<EOL><INDENT>foo_ = newFoo<EOL>}"}
{"signature": "fun logDeclaration(targetIndex: Int, lazyStatsKey: () -> StatsCollector.StatsKey) {", "body": "<EOL><INDENT><INDENT>wrappedCollector.logDeclaration(targetIndex, lazyStatsKey)<EOL><INDENT>}"}
{"signature": "val staticsScope =", "body": "staticsScopeOwnerSymbol?.getStaticsScope()<EOL>"}
{"signature": "fun startBusinessOperation() {", "body": "<EOL><INDENT>log(<NUM_LIT>, <STR_LIT>)<EOL><INDENT>save(Language(<STR_LIT>))<EOL>}"}
{"signature": "fun nullableUInt(vararg us: UInt?) {", "body": "}<EOL><EOL>fun test<NUM_LIT>(nullable: UInt?, ns: Array<UInt>) {<EOL><INDENT>nullableUInt(<NUM_LIT>u, nullable, <NUM_LIT>u, *ns)<EOL>}"}
{"signature": "if (!isStandaloneTest) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>).appendLine(testDataFileSettings.nominalPackageName)<EOL><INDENT><INDENT><INDENT><INDENT>appendLine()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val approximatedExtensionReceiver =", "body": "approximate(extensionReceiverParameter.type.unwrap(), toSuper = false)<EOL>"}
{"signature": "val startResult =", "body": "escapeAnalysisResults[function]!!<EOL>"}
{"signature": "fun markedAsComplementaryFiles(files: Collection<File>) {", "body": "<EOL><INDENT><INDENT><INDENT>logDirtyFiles(ArrayList(files), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(j: J) {", "body": "}<EOL>fun bar(j: J?) {}"}
{"signature": "val equalsDoable<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER, EQUALITY_NOT_APPLICABLE!><NUM_LIT> == <STR_LIT><!><EOL>"}
{"signature": "val jvmTargetMap =", "body": "mutableMapOf(<EOL>"}
{"signature": "fun unrelated() {", "body": "<EOL><INDENT>val y = <NUM_LIT><EOL>}"}
{"signature": "for (postponedCall in candidate.postponedPCLACalls) {", "body": "<EOL><INDENT><INDENT><INDENT>postponedCall.transformSingle(this, null)<EOL><INDENT><INDENT>}"}
{"signature": "val signatureStrings =", "body": "IrArrayMemoryReader(reader.tableItemBytes(<NUM_LIT>))<EOL>"}
{"signature": "fun clearProjectArtifactDependency() {", "body": "<EOL><INDENT>  _builder.clearProjectArtifactDependency()<EOL><INDENT>}"}
{"signature": "if (!callEntry.key.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun returnOperation(insn: AbstractInsnNode?, value: StoredValue?, expected: StoredValue?) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun onSuccess() {", "body": "<EOL><INDENT><INDENT><INDENT>channel.close()<EOL><INDENT><INDENT>}"}
{"signature": "var actualDump =", "body": "irFile.dumpTreesFromLineNumber(lineNumber = <NUM_LIT>, dumpOptions)<EOL>"}
{"signature": "fun visitWhen(expression: IrWhen, data: Boolean) {", "body": "<INDENT><INDENT><INDENT><INDENT>expression.acceptChildren(this, data) // when's are transparent<INDENT><INDENT><INDENT>}"}
{"signature": "val casesFromFile =", "body": "casesFile.readLinesOrNull()?.drop(<NUM_LIT>)<EOL>"}
{"signature": "val SOCKET_ANY_FREE_PORT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val whenMissingCases =", "body": "mutableListOf<WhenMissingCase>()<EOL>"}
{"signature": "val targetArtifactIdAppendices =", "body": "listOf(null, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "package enumValues<EOL>.", "body": ""}
{"signature": "for (seed in listOf(v, -v)) {", "body": "<EOL><INDENT><INDENT><INDENT>testSameSeededRandoms(Random(seed), Random(seed), seed)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(map: Map<Any, Any>) {", "body": "<EOL><INDENT>HashMap(map)<EOL>}"}
{"signature": "if (fqNameAsString != OptInNames.REQUIRES_OPT_IN_FQ_NAME.asString()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkOptInMarkerArgument(context, fqNameAsString, rawReport)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun startTest(name: String) {", "body": "<EOL><INDENT><INDENT>teamcityReport(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun recordMatchStatus(status: ArgumentMatchStatus) {", "body": "<EOL><INDENT><INDENT>_status = status<EOL><INDENT>}"}
{"signature": "fun testKotlinGradleTypesAreUpToDate() {", "body": "<EOL><INDENT><INDENT>generateGradleCompilerTypes(::getPrinterForTests)<EOL><INDENT>}"}
{"signature": "if (orderedProperties.size == properties.size) {", "body": "<EOL><INDENT><INDENT>orderedProperties<EOL><INDENT>}"}
{"signature": "val psiToIrContext =", "body": "PsiToIrContextImpl(config, frontendOutput.moduleDescriptor, frontendOutput.bindingContext)<EOL>"}
{"signature": "if (context.extensions.lowerScriptToClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irScript.earlierScriptsParameter = descriptor.earlierScriptsConstructorParameter?.let(::createValueParameter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (removedFiles.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>removedFilesMetadata[lib] = removedFiles<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentVersionIntArray =", "body": "BinaryVersion.parseVersionArray(currentValue)<EOL>"}
{"signature": "val lessThanMaxDouble =", "body": "maxNsDouble.nextDown()<EOL>"}
{"signature": "fun clearProjectPath() {", "body": "<EOL><INDENT>  _builder.clearProjectPath()<EOL><INDENT>}"}
{"signature": "val copyBuilderVariableName =", "body": "<STR_LIT><EOL>"}
{"signature": "val newGroupIndex =", "body": "(groupIndex * <NUM_LIT>) + (lexemes.lookAhead - '<NUM_LIT>'.code)<EOL>"}
{"signature": "var hasExplicitElseBranch =", "body": "false<EOL>"}
{"signature": "val defaultList =", "body": "parameterDescriptorsWithDefaultValue.filter { it !in allValueArguments }.map { <STR_LIT> }<EOL>"}
{"signature": "val ifNullBranchCondition =", "body": "ifNullBranch.condition<EOL>"}
{"signature": "if (argument.getVariance() == TypeVariance.OUT && argumentConstructor == constructor && argumentType.asArgumentList()[index].isStarProjection()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>createStarProjection(parameter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val resourcesDirectory =", "body": "basePathFromResource(resource)<EOL>"}
{"signature": "val unboxedType =", "body": "value.unboxedTypes.single()<EOL>"}
{"signature": "val throwIllegalStateExceptionWithMessage =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "val benachmarkSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (unresolvedDep.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is DependenciesTracker.DependencyKind.CertainFiles -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>DependenciesTracker.ResolvedDependency.certainFiles(lib, unresolvedDep.kind.files)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> DependenciesTracker.ResolvedDependency.wholeModule(lib)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val delegateExpression =", "body": "property.delegateExpression!!<EOL>"}
{"signature": "val COMPILER_PLUGIN_ARTIFACT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val T_OBJECT_LITERAL =", "body": "targetList(OBJECT_LITERAL, CLASS, EXPRESSION)<EOL>"}
{"signature": "val isMovedFromInterfaceCompanion =", "body": "JvmProtoBufUtil.isMovedFromInterfaceCompanion(proto)<EOL>"}
{"signature": "val stubsForPostponedVariables =", "body": "bindingStubsForPostponedVariables()<EOL>"}
{"signature": "val allDependsOnDependencies =", "body": "useSiteModuleData.allDependsOnDependencies<EOL>"}
{"signature": "package interfaceAssertionsEnabled<EOL>.", "body": ""}
{"signature": "val inlineLambdasSupported =", "body": "context.languageVersionSettings.supportsFeature(LanguageFeature.BreakContinueInInlineLambdas)<EOL>"}
{"signature": "fun testMinusAssign(doMinusAssign: (MutableMap<String, Int>) -> Unit) {", "body": "<EOL><INDENT><INDENT>val original = hashMapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>doMinusAssign(original)<EOL><INDENT><INDENT>assertEquals(<STR_LIT> to <NUM_LIT>, original.entries.single().toPair())<EOL><INDENT>}"}
{"signature": "fun testContains(m: MySet) {", "body": "<EOL><INDENT>m.contains(J.STRING)<EOL><INDENT>m.contains(<STR_LIT>)<EOL>}"}
{"signature": "fun fn<NUM_LIT>(x<NUM_LIT>: Any, x<NUM_LIT>: Any) {", "body": "}<EOL>fun fn<NUM_LIT>(x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any) {}"}
{"signature": "val externalPsiCallArgument =", "body": "kotlinCall?.externalArgument?.psiCallArgument<EOL>"}
{"signature": "if (this[index] == '\\u<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT><INDENT>sb.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "val DECLARATION_SIGNATURE_OR_DEFAULT =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "if (it is ConeKotlinTypeProjection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.type.extractTypeParametersTo(result)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (!isValidJavaFqName(value)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJvm.JVM_PACKAGE_NAME_MUST_BE_VALID_NAME.on(entry))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun enterScope(owner: IrSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>currentScope = SliceScope(owner, currentScope)<EOL><INDENT><INDENT>}"}
{"signature": "val instanceInitializerCall =", "body": "IrInstanceInitializerCallImpl(<EOL>"}
{"signature": "if (!closed) {", "body": "<EOL><INDENT><INDENT><INDENT>this.close()<EOL><INDENT><INDENT>}"}
{"signature": "val notTest<NUM_LIT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (receiverOrImplicitInvoke is FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT><INDENT>getSymbolsForResolvedQualifier(receiverOrImplicitInvoke, expression, session, symbolBuilder)<EOL><INDENT><INDENT>}"}
{"signature": "val enumConstructorOldToNewValueParameters =", "body": "DefaultDelegateFactory.newDeclarationToDeclarationMapping<IrValueDeclaration, IrValueParameter>()<EOL>"}
{"signature": "val SIGNATURER =", "body": "KonanIdSignaturer(KonanManglerDesc)<EOL>"}
{"signature": "val paramIsComposable =", "body": "valueParameter.type.hasComposableAnnotation()<EOL>"}
{"signature": "if (rawArgs.size < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>printUsage()<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "when (embedBitcode) {", "body": "<EOL><INDENT><INDENT>BitcodeEmbeddingMode.MARKER -> add(<STR_LIT>)<EOL><INDENT><INDENT>BitcodeEmbeddingMode.BITCODE -> add(<STR_LIT>)<EOL><INDENT><INDENT>else -> Unit<EOL><INDENT>}"}
{"signature": "if (descriptor.kind != FAKE_OVERRIDE && descriptor.kind != DELEGATION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>OverridingUtil.resolveUnknownVisibilityForMember(descriptor, OverrideResolver.createCannotInferVisibilityReporter(trace))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsonOut =", "body": "StringWriter()<EOL>"}
{"signature": "fun visitBlockBody(body: IrBlockBody, data: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>handleStatementContainer(body, data)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val transformedDeclarations =", "body": "mutableMapOf<IrSymbolOwner, IrDeclaration>()<EOL>"}
{"signature": "val ERROR_TYPE_STUB =", "body": "CommonClassNames.JAVA_LANG_OBJECT<EOL>"}
{"signature": "val emptyResult =", "body": "project.provider { emptyList<SubpluginOption>() }<EOL>"}
{"signature": "val free =", "body": "runtime.freeMemory()<EOL>"}
{"signature": "val metaSerializableAnnotationFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val purelyImplementedSupertype =", "body": "firJavaClass.getPurelyImplementedSupertype()<EOL>"}
{"signature": "if (child is JSCallExpression) {", "body": "<EOL><INDENT><INDENT>val callStub = if (child is StubBasedPsiElement<*>) child.stub else null<EOL><INDENT>}"}
{"signature": "var keyResourcePathDepth =", "body": "<NUM_LIT><EOL>"}
{"signature": "val DOTALL =", "body": "<NUM_LIT> shl <NUM_LIT><EOL>"}
{"signature": "if (lexemes.lookBack == Lexer.CHAR_VERTICAL_BAR) {", "body": "<EOL><INDENT><INDENT><INDENT>children.add(EmptySet(fSet))<EOL><INDENT><INDENT>}"}
{"signature": "if (target is FirAnnotationContainer) {", "body": "<EOL><INDENT><INDENT><INDENT>checkAnnotationTypeIsResolved(target)<EOL><INDENT><INDENT>}"}
{"signature": "val ext =", "body": "klass.memberExtensionProperties.firstOrNull { it.name == <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "if (symbol is IrFieldSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declareJavaFieldStub(symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (verbose && (annotationType.isError || annotationType.constructor.declarationDescriptor is NotFoundClasses.MockClassDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun markControlFlowMerge() {", "body": "<EOL><INDENT><INDENT>controlFlowMerge = true<EOL><INDENT>}"}
{"signature": "val KOTLIN_TEST_JS_PROP =", "body": "<STR_LIT><EOL>"}
{"signature": "var nextMessageId =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (index in <NUM_LIT> until size) {", "body": "<EOL><INDENT><INDENT>accumulator = operation(index, accumulator, this[index])<EOL><INDENT><INDENT>result.add(accumulator)<EOL><INDENT>}"}
{"signature": "package of the field is in never accessed<EOL>.", "body": ""}
{"signature": "when (it) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is String -> JsStringLiteral(it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is Int -> JsIntLiteral(it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is Short -> JsIntLiteral(it.toInt())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is Byte -> JsIntLiteral(it.toInt())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is Char -> JsIntLiteral(it.code)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isNotIn =", "body": "operatorReference.getReferencedNameElementType() == KtTokens.NOT_IN<EOL>"}
{"signature": "val methodSignature =", "body": "JvmMemberSignature.Method(name = methodNode.name, desc = methodNode.desc)<EOL>"}
{"signature": "val firstBinarySymbolGroupValue =", "body": "binarySymbolGroup.values.first()<EOL>"}
{"signature": "package or interface DefaultImpls or something like that<EOL>.", "body": ""}
{"signature": "val wrapperType =", "body": "signature.returnType<EOL>"}
{"signature": "if (sdeAnnotationValue == null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (condition is KtWhenConditionWithExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>condition.expression.toFirExpression(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>DiagnosticKind.ExpressionExpected<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testMultiplatform() {", "body": "<EOL><INDENT><INDENT>taskApi.multiPlatformEnabled.set(true)<EOL><INDENT><INDENT>assertEquals(true, taskImpl.multiPlatformEnabled.get())<EOL><EOL><INDENT><INDENT>taskApi.multiPlatformEnabled.set(false)<EOL><INDENT><INDENT>assertEquals(false, taskImpl.multiPlatformEnabled.get())<EOL><INDENT>}"}
{"signature": "var starProjectionFound =", "body": "false<EOL>"}
{"signature": "val importsWithEffect =", "body": "importWithEffectFrom.map { CrossModuleImportWithEffect(import(it)) }<EOL>"}
{"signature": "val commandLineProcessor =", "body": "ServiceLoaderLite.loadImplementations(CommandLineProcessor::class.java, classLoader)<EOL>"}
{"signature": "val uniqueNames =", "body": "owner.paramsToUniqueNames(original.explicitParameters)<EOL>"}
{"signature": "else if (declaration.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotation.source, FirJvmErrors.SYNCHRONIZED_ON_ABSTRACT, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (thisKind == PrimitiveType.INT) {", "body": "<EOL><INDENT><INDENT><INDENT>implementAsIntrinsic(thisKind, methodName)<EOL><INDENT><INDENT>}"}
{"signature": "package kotlin<STR_LIT>package\")<EOL>.", "body": ""}
{"signature": "fun recordMethod(member: JavaMember, descriptor: SimpleFunctionDescriptor) {", "body": "}<EOL><EOL><INDENT>override fun recordConstructor(element: JavaElement, descriptor: ConstructorDescriptor) {}"}
{"signature": "fun main(a: A, o: Out<String>) {", "body": "<EOL><INDENT>a.foo(o)<EOL><INDENT>a.bar(o)<EOL>}"}
{"signature": "val y_foo =", "body": "ClassStringWithInterface(<STR_LIT>)<EOL>"}
{"signature": "fun symlinkTwoPointingToEachOther() {", "body": "<EOL><INDENT><INDENT>val basedir = createTempDirectory().cleanupRecursively()<EOL><INDENT><INDENT>val link<NUM_LIT> = basedir.resolve(<STR_LIT>)<EOL><INDENT><INDENT>val link<NUM_LIT> = basedir.resolve(<STR_LIT>).tryCreateSymbolicLinkTo(link<NUM_LIT>) ?: return<EOL><INDENT><INDENT>link<NUM_LIT>.tryCreateSymbolicLinkTo(link<NUM_LIT>) ?: return<EOL><EOL><INDENT><INDENT>val walk = basedir.walk(PathWalkOption.FOLLOW_LINKS)<EOL><EOL><INDENT><INDENT>testVisitedFiles(listOf(<STR_LIT>, <STR_LIT>), walk, basedir)<EOL><INDENT>}"}
{"signature": "val typeAliasBytes =", "body": "<EOL><INDENT><INDENT><INDENT>if (c.components.configuration.typeAliasesAllowed)<EOL>"}
{"signature": "val allGroupedParameterTypes =", "body": "parameterTypes.first().indices.map { i -> parameterTypes.map { it.getOrNull(i) } }<EOL>"}
{"signature": "val newFragments =", "body": "translatedSourceFiles.values.map { it.fragment }.toSet()<EOL>"}
{"signature": "val packageFqNameSegments =", "body": "packageFqName.pathSegments().asReversed()<EOL>"}
{"signature": "fun isNotNullAndNullableStringInFoo(x: Foo<String>, y: Foo<String?>) {", "body": "}fun test<NUM_LIT>() {<INDENT>// String in Foo is flexible<INDENT>isNotNullAndNullableStringInFoo(<INDENT><INDENT>Util.getFooOfString(),<INDENT><INDENT>Util.getFooOfString()<INDENT>)}"}
{"signature": "val byteMin =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Byte.MIN_VALUE }()<!><EOL>"}
{"signature": "val F<NUM_LIT>_CEIL =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!descriptor.fqName.isRoot) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SuggestedName(descriptor.fqName.pathSegments().map(Name::asString), true, descriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  descriptor.containingDeclaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val elem =", "body": "Random.nextDouble()<EOL>"}
{"signature": "if (!isBackingFieldAccessible(referencedProperty, context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val diagnostic = chooseDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LATEINIT_INTRINSIC_CALL_ON_NON_ACCESSIBLE_PROPERTY_WARNING,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LATEINIT_INTRINSIC_CALL_ON_NON_ACCESSIBLE_PROPERTY<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(diagnostic.on(reportOn, referencedProperty))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun check(t<NUM_LIT>: KType, t<NUM_LIT>: KType) {", "body": "<EOL><INDENT><INDENT>assertEquals(t<NUM_LIT>, t<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(t<NUM_LIT>.hashCode(), t<NUM_LIT>.hashCode())<EOL><INDENT>}"}
{"signature": "for (jsFile: AdditionalFile in jsFiles) {", "body": "<EOL><INDENT><INDENT><INDENT>val file = File(baseDir, jsFile.name)<EOL><INDENT><INDENT><INDENT>file.writeText(jsFile.content)<EOL><INDENT><INDENT><INDENT>jsFilePaths += file.canonicalPath<EOL><INDENT><INDENT>}"}
{"signature": "for (ch in rangeStart..rangeEnd) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!attempt.fill(ch, categoryIdOf(ch))) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun checkRepeatableAnnotationContainer(<EOL><INDENT><INDENT>annotationClass: ClassDescriptor,<EOL><INDENT><INDENT>containerClass: ClassDescriptor,<EOL><INDENT><INDENT>trace: BindingTrace,<EOL><INDENT><INDENT>reportOn: KtAnnotationEntry,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>checkContainerParameters(containerClass, annotationClass, reportOn)?.let(trace::report)<EOL><INDENT><INDENT>checkContainerRetention(containerClass, annotationClass, reportOn)?.let(trace::report)<EOL><INDENT><INDENT>checkContainerTarget(containerClass, annotationClass, reportOn)?.let(trace::report)<EOL><INDENT>}"}
{"signature": "val stepsLines =", "body": "splitSteps(file.readLines())<EOL>"}
{"signature": "if (resolvedCall.resultingDescriptor.fqNameSafe == stepFunctionName) {", "body": "<EOL><INDENT><INDENT><INDENT>step = resolvedCall.call.valueArguments[<NUM_LIT>].getArgumentExpression() ?: return null<EOL><INDENT><INDENT><INDENT>resolvedCall = (resolvedCall.extensionReceiver as? ExpressionReceiver)?.expression?.getResolvedCall(context.bindingContext()) ?:<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>   return null<EOL><INDENT><INDENT>}"}
{"signature": "val HELPERS_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val importedDescriptors =", "body": "helper.resolveImportReference(file, fqName).map { it.unwrap() }<EOL>"}
{"signature": "val SECTION_SELECTORS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (mode == KotlinJsBinaryMode.DEVELOPMENT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>target.runTask.dependsOn(runTask)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>commonRunTask.dependsOn(runTask)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package names to avoid building duplicate sets.", "body": "<EOL>"}
{"signature": "val oldType =", "body": "oldSmartCasts.type(call)<EOL>"}
{"signature": "val GET_COROUTINE_CONTEXT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (notNullType == originalType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irGetLhsValue()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (parameterlessMainMethod.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>+irRunSuspend(parameterlessMainMethod, null, newMain)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isSpecialBuiltinName) {", "body": "<EOL><INDENT><INDENT><INDENT>result.addAll(additionalOverrides)<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JsProtoBuf.classAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JsProtoBuf.classAnnotation, i), new.getExtension(JsProtoBuf.classAnnotation, i))) result.add(ProtoBufClassKind.JS_EXT_CLASS_ANNOTATION_LIST)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun newLine() {", "body": "<EOL><INDENT><INDENT>mappingConsumer.newLine()<EOL><INDENT>}"}
{"signature": "val arrayPlusArray =", "body": "arrayOfStringArrays + arrayOfStringArrays<EOL>"}
{"signature": "val typeArgumentReference =", "body": "(position.typeArgument as SimpleTypeArgumentImpl).typeProjection.typeReference ?: return<EOL>"}
{"signature": "if (!element.isUsageAsAnnotationOrImport()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.OPTIONAL_DECLARATION_OUTSIDE_OF_ANNOTATION_ENTRY.on(element))<EOL><INDENT><INDENT>}"}
{"signature": "val templatePath =", "body": "Paths.get(<STR_LIT>)<EOL>"}
{"signature": "fun a() {", "body": "<EOL><INDENT>inline.f = <NUM_LIT><EOL>}"}
{"signature": "fun save(output: DataOutput, snapshot: ClasspathEntrySnapshot) {", "body": "<EOL><INDENT><INDENT>LinkedHashMapExternalizer(StringExternalizer, ClassSnapshotExternalizer).save(output, snapshot.classSnapshots)<EOL><INDENT>}"}
{"signature": "fun visitReceiverParameter(receiverParameter: FirReceiverParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>receiverParameter.typeRef.accept(this)<EOL><INDENT><INDENT>}"}
{"signature": "fun addMissingClassName<NUM_LIT>(classInternalName: String) {", "body": "<EOL><INDENT><INDENT>missingClassNames<NUM_LIT>.add(classInternalName)<EOL><INDENT><INDENT>defectReport.report(<EOL><INDENT><INDENT><INDENT>MISSING_CLASS<NUM_LIT>_D,<EOL><INDENT><INDENT><INDENT>jar<NUM_LIT>Location,<EOL><INDENT><INDENT><INDENT>CLASS_A to classInternalName,<EOL><INDENT><INDENT><INDENT>JAR_FILE<NUM_LIT>_A to jarFileName<NUM_LIT><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun setSystemProperties() {", "body": "<EOL><INDENT><INDENT><INDENT>System.setProperty(<STR_LIT>, homeDir)<EOL><INDENT><INDENT><INDENT>System.setProperty(<STR_LIT>, homeDir)<EOL><INDENT><INDENT><INDENT>System.setProperty(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun subSequence() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.subSequence(<NUM_LIT>, <NUM_LIT>).toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.subSequence(<NUM_LIT>, <NUM_LIT>).toString())<EOL><INDENT>}"}
{"signature": "if (codeFragmentKind == CodeFragmentKind.TYPE && codeFragmentImports != null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var hasComposites =", "body": "false<EOL>"}
{"signature": "if (severity != null && predefinedSeverity != null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitIncrementDecrementExpression(incrementDecrementExpression: FirIncrementDecrementExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(incrementDecrementExpression)<EOL><INDENT>}"}
{"signature": "val Nullable =", "body": "<STR_LIT><EOL>"}
{"signature": "var profilePhases =", "body": "false<EOL>"}
{"signature": "val smartCastProviderImpl =", "body": "KtFirSmartcastProvider(this, token)<EOL>"}
{"signature": "if (visitedSymbols.add(overriddenMemberWithScope)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>symbolsToProcess.add(overriddenMemberWithScope)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (connection is HttpURLConnection && tmpFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>resumeDownload(url, connection, tmpFile)<EOL><INDENT><INDENT>}"}
{"signature": "val firSafeCall =", "body": "parentCall.getOrBuildFirOfType<FirSafeCallExpression>(firResolveSession)<EOL>"}
{"signature": "val moduleDependencies =", "body": "dependencies.sure { <STR_LIT> }<EOL>"}
{"signature": "if (it is KotlinKarma) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>body.execute(it.webpackConfig)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var arrayVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "val kotlinSourceSets =", "body": "kotlinExtension.javaClass.getMethod(<STR_LIT>).invoke(kotlinExtension)<EOL>"}
{"signature": "if (target.isUnspecified && function.body == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultTarget<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateSyntheticSecondaryConstructors(<EOL><INDENT><INDENT>thisDescriptor: ClassDescriptor,<EOL><INDENT><INDENT>bindingContext: BindingContext,<EOL><INDENT><INDENT>result: MutableCollection<ClassConstructorDescriptor><EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (parent is KtAnnotationEntry || (parent is KtClass && parent.isAnnotation())) {", "body": "<EOL><INDENT><INDENT><INDENT>AnnotationOrAnnotationClass<EOL><INDENT><INDENT>}"}
{"signature": "val loadMainKtsMessage =", "body": "<STR_LIT><EOL>"}
{"signature": "val numOfSuperArgs =", "body": "<EOL><INDENT><INDENT><INDENT>(if (hasBoundReceiver) <NUM_LIT> else <NUM_LIT>) + (if (useOptimizedSuperClass) <NUM_LIT> else <NUM_LIT>)<EOL>"}
{"signature": "if (File(arg).isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addJavaSourceRoot(JavaRootPath(arg, args.javaPackagePrefix))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun expectsString(s: String) {", "body": "}<EOL>fun expectsInt(i: Int) {}"}
{"signature": "val requiredAnnotationClassId =", "body": "ClassId.topLevel(requiredAnnotationFqName)<EOL>"}
{"signature": "if (file.isFile && file.extension == BasicMapsOwner.CACHE_EXTENSION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.add(file.name)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ptrVar =", "body": "irTemporary(pointer)<EOL>"}
{"signature": "if (expression.isPolymorphicCall()) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.transform(data.coerceToType)<EOL><INDENT><INDENT>}"}
{"signature": "val executableName =", "body": "if (SystemInfo.isWindows) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (customNativeHome == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(kotlinNativeCompilerEmbeddable!!.files)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun java() {", "body": "snapshotAPIAndCompare(testName.methodName) }"}
{"signature": "val handlerDeclaration =", "body": "newIrFunction.valueParameters.last()<EOL>"}
{"signature": "if (visiblePlatformVariantNames.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return SourceSetVisibilityResult(emptySet(), emptyMap())<EOL><INDENT><INDENT>}"}
{"signature": "val lhsRawType =", "body": "if (lhsBinaryType.nullable) irBuiltins.anyNType else irBuiltins.anyType<EOL>"}
{"signature": "if (one && two) {", "body": "<EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "else if (shouldRunCheck && (languageVersionSettings.supportsFeature(ProperCheckAnnotationsTargetInTypeUsePositions) || checkWithoutLanguageFeature)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkAnnotationEntry(entry, actualTargets, trace)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val result = a(a as String)) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT>else -> result<EOL><INDENT>}"}
{"signature": "var high =", "body": "toIndex - <NUM_LIT><EOL>"}
{"signature": "if (symbol.visibility != Visibilities.Public || symbol.isVar || symbol.modality != Modality.FINAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun use(v: Optional<String>) {", "body": "<EOL><INDENT>v.<caret>get()<EOL>}"}
{"signature": "val allScope =", "body": "GlobalSearchScope.allScope(project)<EOL>"}
{"signature": "val POD_GEN_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val typeConstructorDeclaration =", "body": "lhs.type.constructor.declarationDescriptor<EOL>"}
{"signature": "var isFirst =", "body": "true<EOL>"}
{"signature": "fun testWrongInlineTarget() {", "body": "<EOL><INDENT><INDENT>val library = compileLibrary(<STR_LIT>, additionalOptions = listOf(<STR_LIT>, <STR_LIT>))<EOL><EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(library), additionalOptions = listOf(<STR_LIT>, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "fun visitBinaryOrEnterNode(node: BinaryOrEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryOrEnterNode(node)<EOL><INDENT>}"}
{"signature": "val sa<NUM_LIT> =", "body": "sa<NUM_LIT>testString<NUM_LIT>D()<EOL>"}
{"signature": "val rawName =", "body": "declaration.getRawName()<EOL>"}
{"signature": "val thisClassifierLowercase =", "body": "this.classifier.toLowerCase(Locale.ROOT)<EOL>"}
{"signature": "val partsVisitor =", "body": "av.visitArray(JvmAnnotationNames.SERIALIZED_IR_BYTES_FIELD_NAME)<EOL>"}
{"signature": "if (parentMessageCollector is ScriptDiagnosticsMessageCollector) {", "body": "<EOL><INDENT><INDENT><INDENT>parentMessageCollector.report(diagnostic)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (stability.knownStable() && symbols.size < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parameterMask = parameterMask or (<NUM_LIT>b<NUM_LIT> shl symbols.size)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONTENT_METHOD =", "body": "<STR_LIT><EOL>"}
{"signature": "val checkedDescriptors =", "body": "linkedSetOf<ClassDescriptor>()<EOL>"}
{"signature": "val deprecatedSinceKotlinFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "when (declaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrFunction -> declaration.body<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrField -> declaration.initializer<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrVariable -> declaration.initializer<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val specVersion =", "body": "version.substringBefore(<STR_LIT>)<EOL>"}
{"signature": "for (val (a: Int, b) in b) {", "body": "}"}
{"signature": "fun cancelFutureOnCompletion(handlerBase: CompletionHandlerBase) {", "body": "<EOL><INDENT>invokeOnCompletion(handlerBase)<EOL><INDENT>handlerBase.foo()<EOL>}"}
{"signature": "if (useJunit<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>p.println(<STR_LIT> + BlockJUnit<NUM_LIT>ClassRunner::class.java.canonicalName + <STR_LIT>)<EOL><INDENT><INDENT><INDENT>p.println(<STR_LIT> + Test::class.java.canonicalName + <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (typeWithParameters is ConeDefinitelyNotNullType) {", "body": "<EOL><INDENT><INDENT>return doUnify(<EOL><INDENT><INDENT><INDENT>originalTypeProjection,<EOL><INDENT><INDENT><INDENT>typeWithParametersProjection.replaceType(typeWithParameters.original),<EOL><INDENT><INDENT><INDENT>targetTypeParameters, result,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val srcProductionTarget =", "body": "byJpsModuleBuildTarget[ModuleBuildTarget(srcTarget.module, isTests = false)]<EOL>"}
{"signature": "var currentBlock =", "body": "entryState.entryBlock<EOL>"}
{"signature": "if (unmatchedFilesTop.size < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>unmatchedFilesTop.add(file)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val packageId =", "body": "packageTableBuilder.jvmPackageNameList.indexOf(packageFqName)<EOL>"}
{"signature": "if (newList == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newList = this.toMutableList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (expression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>expressions.add(expression)<EOL><INDENT><INDENT><INDENT><INDENT>expression = deparenthesizeOrGetSelector(expression, context.statementFilter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TYPE_PARAMS_SERIALIZERS_GETTER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val wrappedProcessors =", "body": "processors.map { ProcessorWrapper(it) }<EOL>"}
{"signature": "val parentsFqNames =", "body": "hashSetOf<FqName>()<EOL>"}
{"signature": "val variableDeclaration =", "body": "DICreateParameterVariable(<EOL>"}
{"signature": "var engineUsageCnt =", "body": "<NUM_LIT><EOL>"}
{"signature": "var iltConstraintPresent =", "body": "false<EOL>"}
{"signature": "val GRADLE_LOG =", "body": "<STR_LIT><EOL>"}
{"signature": "val subtypeWithVariables =", "body": "descriptor.defaultType<EOL>"}
{"signature": "val DEFAULT_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun baz(x: String){", "body": "<EOL><INDENT>log(<STR_LIT>)<EOL>}"}
{"signature": "val excludedPackageNames =", "body": "excludedPackageNames.toSet()<EOL>"}
{"signature": "fun pushIndent() {", "body": "<EOL><INDENT><INDENT>printer.pushIndent()<EOL><INDENT>}"}
{"signature": "val listOfAny =", "body": "listOf<Any>(<STR_LIT>) + listOf<Any>(<STR_LIT>)<EOL>"}
{"signature": "val selectiveClassVisitor =", "body": "SelectiveClassVisitor(<EOL>"}
{"signature": "package K<EOL>.", "body": ""}
{"signature": "val uploadingFile =", "body": "File(fileName)<EOL>"}
{"signature": "if (humanReadable) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(diagnostic).append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var useKapt<NUM_LIT> =", "body": "false<EOL>"}
{"signature": "val VS_ET =", "body": "VariableControlFlowState(InitState.INITIALIZED_EXHAUSTIVELY, true)<EOL>"}
{"signature": "val publicVal<NUM_LIT> =", "body": "object { override fun toString() = <STR_LIT> }<EOL>"}
{"signature": "when (it.itemType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ItemType.PARAMETER -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>templateBuilder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>ItemType.CONSTANT -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>templateBuilder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>ItemType.INLINED_CONSTANT -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>templateBuilder.append(it.value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val gradleVersionFilterParameter =", "body": "context.getConfigurationParameter(<STR_LIT>)<EOL>"}
{"signature": "val originalBody =", "body": "transformingFunction.body!!<EOL>"}
{"signature": "when (desc[end]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>in <STR_LIT> -> end++<EOL><INDENT><INDENT><INDENT><INDENT>'L' -> end = desc.indexOf(';', begin) + <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> throw KotlinReflectionInternalError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val bbOfFirstConditionCheck =", "body": "functionGenerationContext.currentBlock<EOL>"}
{"signature": "val addLen =", "body": "toIndex - fromIndex<EOL>"}
{"signature": "if (isSuccessful) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>cleanupStash()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val outgoingConfigurations =", "body": "mutableListOf(<EOL>"}
{"signature": "val aHasDefaultValue =", "body": "if (a.defaultValue != null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "if (it.firstChild == null) {", "body": "<EOL><INDENT><INDENT><INDENT>it.delete()<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (fir.isHiddenToOvercomeSignatureClash == true && fir.isFinal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val somethingPublic =", "body": "<STR_LIT><EOL>"}
{"signature": "if (containingDeclaration is ClassDescriptor && isHiddenByDeprecation(containingDeclaration)) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val API =", "body": "Usage.C_PLUS_PLUS_API<EOL>"}
{"signature": "val suiteReports =", "body": "mutableListOf<KonanTestSuiteReport>()<EOL>"}
{"signature": "package dependency<EOL>.", "body": ""}
{"signature": "if (x<NUM_LIT> === x) {", "body": "<INDENT><INDENT>// OK<INDENT><INDENT>x.foo()<INDENT>}"}
{"signature": "for ((i, x) in xs.withIndex()) {", "body": "<EOL><INDENT><INDENT>if (i % <NUM_LIT> == <NUM_LIT>) continue<EOL><INDENT><INDENT>r += <STR_LIT><EOL><INDENT>}"}
{"signature": "if (RUN_CHECKERS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it + FirCheckersResolveProcessor(session, scopeSession, MppCheckerKind.Common)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun configureScriptDestructuringDeclarationEntry(declaration: FirVariable, container: FirVariable) {", "body": "<EOL><INDENT><INDENT><INDENT>(declaration as FirProperty).destructuringDeclarationContainerVariable = container.symbol<EOL><INDENT><INDENT>}"}
{"signature": "package custom.", "body": "pkg<EOL>"}
{"signature": "val varargVariable =", "body": "environment.callStack.loadState(elementsSymbol)<EOL>"}
{"signature": "fun testWrapperEquality() {", "body": "<EOL><INDENT><INDENT>val we<NUM_LIT> = WrapperElement(<STR_LIT>)<EOL><INDENT><INDENT>val we<NUM_LIT> = WrapperElement(<STR_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>, we<NUM_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>, we<NUM_LIT>)<EOL><INDENT><INDENT>val we<NUM_LIT>we<NUM_LIT> = we<NUM_LIT> + we<NUM_LIT><EOL><INDENT><INDENT>checkContents(we<NUM_LIT>we<NUM_LIT>, we<NUM_LIT>, we<NUM_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>we<NUM_LIT>.minusKey(WrapperKey(<STR_LIT>)), we<NUM_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>we<NUM_LIT>.minusKey(WrapperKey(<STR_LIT>)), we<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.propertyAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.propertyAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (size.isInfinite() && from.isFinite() && until.isFinite()) {", "body": "<EOL><INDENT><INDENT><INDENT>val r<NUM_LIT> = nextDouble() * (until / <NUM_LIT> - from / <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>from + r<NUM_LIT> + r<NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (configurationKind.withRuntime) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(testServices.standardLibrariesPathProvider.runtimeJarForTests().path)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val subDst =", "body": "dstFile.resolve(<STR_LIT>)<EOL>"}
{"signature": "val compilationResults =", "body": "GradleCompilationResults(log, config.projectFiles.projectRootFile)<EOL>"}
{"signature": "if (asmElementType.sort == Type.LONG) {", "body": "<EOL><INDENT><INDENT><INDENT>v.lcmp()<EOL><INDENT><INDENT><INDENT>v.ifeq(loopExit)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(k: KRunnable) {", "body": "<EOL><INDENT>k.invoke()<EOL>}"}
{"signature": "if (isUndefined(message)) {", "body": "<EOL><INDENT><INDENT>if (isUndefined(cause)) message else cause?.toString() ?: VOID<EOL><INDENT>}"}
{"signature": "val encodedEmail =", "body": "Json.encodeToString(email)<EOL>"}
{"signature": "val constFromOtherModule =", "body": "<STR_LIT><EOL>"}
{"signature": "val qfoo =", "body": "<NUM_LIT><EOL>"}
{"signature": "val constructorCodegen =", "body": "ConstructorCodegen(<EOL>"}
{"signature": "val stripMetadata =", "body": "options[KaptFlag.STRIP_METADATA]<EOL>"}
{"signature": "val xPrefixesToExclude =", "body": "argsToExclude.filter { it.startsWith(<STR_LIT>) }.map { <STR_LIT> }<EOL>"}
{"signature": "fun invoke<NUM_LIT>(x: T) {", "body": "}<EOL><INDENT>fun invoke<NUM_LIT>(x: Out<T>) {}"}
{"signature": "val mutableListIteratorClass =", "body": "builtIns.mutableListIterator.toIrSymbol()<EOL>"}
{"signature": "if (errorCounter > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>println(differentFiles)<EOL><INDENT><INDENT>}"}
{"signature": "val enclosingThisReceiver =", "body": "function?.dispatchReceiverParameter ?: irClass.thisReceiver!!<EOL>"}
{"signature": "if (existingState != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return existingState<EOL><INDENT><INDENT>}"}
{"signature": "if (old.hasExtension(JsProtoBuf.functionContainingFileId)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(JsProtoBuf.functionContainingFileId) != new.getExtension(JsProtoBuf.functionContainingFileId)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val annotationClassDescriptor =", "body": "it.annotationClass!!<EOL>"}
{"signature": "var vararg =", "body": "false<EOL>"}
{"signature": "val originalModule =", "body": "KlibTestUtil.deserializeKlibToCommonModule(originalKlibFile)<EOL>"}
{"signature": "val request =", "body": "require(<STR_LIT>)<EOL>"}
{"signature": "fun myRun(f: () -> Unit) {", "body": "<EOL><INDENT>f()<EOL>}"}
{"signature": "if (this is IrErrorExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>onWarning(irFile, original, this)<EOL><INDENT><INDENT><INDENT>return original<EOL><INDENT><INDENT>}"}
{"signature": "if (annotationEntry != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkDeclaration(annotationEntry, descriptor, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (useExperimentalFqNames.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collector.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>WARNING, <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (it.toInt() + <NUM_LIT> == <NUM_LIT><NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "when (node.tokenType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>VALUE_PARAMETER -> container += convertValueParameter(node, functionSymbol, valueParameterDeclaration, additionalAnnotations)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val gSignature =", "body": "FlatSignature.createFromCallableDescriptor(g)<EOL>"}
{"signature": "if (className.indexOf('.') < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return if (className == topLevelClass.name) topLevelClass else null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val smapStack =", "body": "mutableListOf<DataForIrInlinedFunction>()<EOL>"}
{"signature": "if (cvtRes is ArgsConverter.Result.Success) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>res[par] = cvtRes.v<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (codePoint <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT>load(descriptorVar, descImplType)<EOL><INDENT><INDENT><INDENT>putstatic(serializerAsmType.internalName, serialDescField, descType.descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val argumentKind =", "body": "argument.accept(this, data)<EOL>"}
{"signature": "if (candidateNames.filterNotNull().toSet() == setOf(KOTLIN_RUNTIME, KOTLIN_API)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>chooseCandidateByName(KOTLIN_RUNTIME)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val insertAfterNonNull =", "body": "if (jumpsIfNull) insn else insn.label<EOL>"}
{"signature": "if (d.x is B) {", "body": "<INDENT><INDENT><INDENT>d.x.abc // Ok<INDENT><INDENT><INDENT>d.x.<!INVISIBLE_MEMBER!>foo<!><INDENT><INDENT><INDENT>d.x.<!INVISIBLE_SETTER!>bar<!> = d.x.bar + <STR_LIT><INDENT><INDENT>}"}
{"signature": "when (calls.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> KtErrorCallInfo(listOf(KtQualifierCall(token, callExpression)), inapplicableCandidateDiagnostic(), token)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> KtErrorCallInfo(calls, inapplicableCandidateDiagnostic(), token)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val filesWithHelpers =", "body": "includeHelpers(wholeFile, files, specTest)<EOL>"}
{"signature": "fun visitResolvedNamedReference(resolvedNamedReference: FirResolvedNamedReference, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedNamedReference(resolvedNamedReference)<EOL><INDENT>}"}
{"signature": "if (compilationErrors) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.info(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>JavaBuilderUtil.registerFilesWithErrors(context, messageCollector.filesWithErrors.map(::File))<EOL><INDENT><INDENT><INDENT>return ABORT<EOL><INDENT><INDENT>}"}
{"signature": "val targetCompilerOptions =", "body": "compilation.target.targetCompilerOptions<EOL>"}
{"signature": "val TYPE_INFO_TYPE_SIMPLE_NAME_ID_OFFSET =", "body": "TYPE_INFO_TYPE_SIMPLE_NAME_LENGTH_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "val allPackagesText =", "body": "textByPackage.values.joinToString(<STR_LIT>)<EOL>"}
{"signature": "val actualValueParameter =", "body": "actualForExpected.valueParameters[index]<EOL>"}
{"signature": "val _disposables =", "body": "mutableListOf<PluginDisposable>()<EOL>"}
{"signature": "for (x in <NUM_LIT> until <NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>result += x<EOL><INDENT>}"}
{"signature": "if (it!!.isFile) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(FileUtil.getRelativePath(dir, it)!!)<EOL><INDENT><INDENT>}"}
{"signature": "val jsFilePath =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val typesToCommonizeWithTargets =", "body": "values.zip(classifiers.classifierIndices.targets)<EOL>"}
{"signature": "if (processConstraintStorageFromExpression(it, processor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>wasAny = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (symbol.callableId != WebCommonStandardClassIds.Callables.Js) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (directory.name.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FileVisitResult.SKIP_SUBTREE<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val transformedLhsCall =", "body": "indexedAccessAugmentedAssignment.lhsGetCall.transformSingle(transformer, ResolutionMode.ContextIndependent)<EOL>"}
{"signature": "val ninthFile =", "body": "Path(<STR_LIT>)<EOL>"}
{"signature": "for (field in fields) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += field.toDouble()<EOL><INDENT><INDENT>}"}
{"signature": "val expectedIndexes =", "body": "Array(parameters.size) { it }.toMutableList()<EOL>"}
{"signature": "val basePointedTypeName =", "body": "typeMirror.pointedType.render(kotlinFile)<EOL>"}
{"signature": "fun saveGlobalState() {", "body": "<EOL><INDENT><INDENT>savedState = getGlobalState().toMap()<EOL><INDENT>}"}
{"signature": "val VOLATILE_LAMBDA_FQ_NAME =", "body": "FqName.fromSegments(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "val metadataSize =", "body": "input.readInt()<EOL>"}
{"signature": "val unsubstitutedType =", "body": "unsubstitutedUnderlyingTypeForInlineClass(session) ?: return null<EOL>"}
{"signature": "val kotlinOnyFiles =", "body": "findAllKotlinFiles(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val expectedResult =", "body": "runCatching { expected() }<EOL>"}
{"signature": "val expectedFields =", "body": "extractAllKeyValPairs(content, <STR_LIT>)<EOL>"}
{"signature": "val prevPev =", "body": "methodInsnNode.previous.previous<EOL>"}
{"signature": "val vId =", "body": "variance.ordinal + <NUM_LIT><EOL>"}
{"signature": "val p<NUM_LIT>Platform =", "body": "createKtModule(<EOL>"}
{"signature": "package foo;\\n\\n public class \\$\\$ {}<STR_LIT>\\$\\$\")<EOL>.", "body": ""}
{"signature": "val IS_REIFIED =", "body": "FlagField.booleanFirst()<EOL>"}
{"signature": "val isEliminationAmbiguitiesWithExternalTypeParametersEnabled =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidate.callComponents.languageVersionSettings.supportsFeature(LanguageFeature.EliminateAmbiguitiesWithExternalTypeParameters)<EOL>"}
{"signature": "package testData<EOL>.", "body": ""}
{"signature": "val curChar =", "body": "if (startIndex >= testString.length) ' ' else testString[startIndex]<EOL>"}
{"signature": "package one<EOL>.", "body": ""}
{"signature": "if (!closestNonLocal.isNativeObject(context)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirJsErrors.JS_MODULE_PROHIBITED_ON_NON_NATIVE, context)<EOL><INDENT><INDENT>}"}
{"signature": "for ((componentIndex, entry) in destructuringDeclaration.entries.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>val componentType = resolveInitializer(entry, receiver, initializer, context, componentIndex)<EOL><INDENT><INDENT><INDENT>val variableDescriptor =<EOL><INDENT><INDENT><INDENT><INDENT>localVariableResolver.resolveLocalVariableDescriptorWithType(scope, entry, componentType, context.trace)<EOL><EOL><INDENT><INDENT><INDENT>result.add(variableDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val rwlock =", "body": "ReentrantReadWriteLock()<EOL>"}
{"signature": "val CONFIG_OPTION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val functionDescriptor =", "body": "scope.ownerDescriptor as? FunctionDescriptor<EOL>"}
{"signature": "fun visit(value: Any?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>elements.addIfNotNull(value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultInvocation =", "body": "JsInvocation(callee, listOf<JsExpression>()).apply { source = psi }<EOL>"}
{"signature": "if (factory != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, factory, symbols, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ASSIGNMENT_NAMES =", "body": "ASSIGNMENTS.map { (k, v) -> v to k }.toMap()<EOL>"}
{"signature": "val rightIsUnboxed =", "body": "right.type.unboxInlineClass() != right.type<EOL>"}
{"signature": "fun testClassIsRemovedIC(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestClassIsRemoved(gradleVersion, defaultBuildOptions.copy(incremental = true))<EOL><INDENT>}"}
{"signature": "val irPropertySymbol =", "body": "symbols.propertySymbol<EOL>"}
{"signature": "import rex<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "if (reportSeverity.code <= mySeverity) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>servicesFacade.report(ReportCategory.COMPILER_MESSAGE, reportSeverity, message, location)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isSubResolvedAtomsNotEmpty =", "body": "!resolvedCall.resolvedCallAtom.subResolvedAtoms.isNullOrEmpty()<EOL>"}
{"signature": "val interopObjCObjectRawValueGetter =", "body": "interopFunction(InteropFqNames.objCObjectRawPtrFunName)<EOL>"}
{"signature": "val filteredByKey =", "body": "map.filterNot { it.key == <STR_LIT> }<EOL>"}
{"signature": "fun testDerivedWithoutKey() {", "body": "<INDENT><INDENT>val derivedWithoutKey = DerivedWithoutKey()<INDENT><INDENT>assertSame(Base.Key, derivedWithoutKey.key)<INDENT><INDENT>testDerivedWithoutKey(EmptyCoroutineContext, derivedWithoutKey) // Single element<INDENT><INDENT>testDerivedWithoutKey(IrrelevantElement, derivedWithoutKey) // Combined context<INDENT>}"}
{"signature": "val signatureToIndexMapping =", "body": "hashMapOf<IdSignature, Int>()<EOL>"}
{"signature": "val conditionEnterNode =", "body": "loopConditionEnterNodes.getValue(loop).also { addNewSimpleNode(it) }<EOL>"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {", "body": "<INDENT><INDENT>// setValue<INDENT>}"}
{"signature": "val thresholdInBytes =", "body": "expectedSize * thresholdPercent / <NUM_LIT><EOL>"}
{"signature": "val lambdaClassOriginName =", "body": "proto.getExtensionOrNull(JvmProtoBuf.lambdaClassOriginName)<EOL>"}
{"signature": "val callableReference =", "body": "argumentExpression.statements.lastOrNull() as? KtCallableReferenceExpression ?: return<EOL>"}
{"signature": "val newRoots =", "body": "classpathRootsResolver.convertClasspathRoots(contentRoots).roots - initialRoots<EOL>"}
{"signature": "val isUninitialized =", "body": "trace.bindingContext.get(IS_UNINITIALIZED, propertyDescriptor) ?: false<EOL>"}
{"signature": "val SETTER_PREFIX =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "var showVar =", "body": "computeIt()<EOL>"}
{"signature": "if (suiteClassPackage != baseTestClassPackage) {", "body": "<EOL><INDENT><INDENT><INDENT>p.println(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val factoryListForDiagnosticsOnExpression =", "body": "listOf(<EOL>"}
{"signature": "var afterVararg =", "body": "false<EOL>"}
{"signature": "val reflectionInfo =", "body": "getReflectionInfo(irClass)<EOL>"}
{"signature": "val linkedJavaScript =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val pi_lo =", "body": "<NUM_LIT>E<NUM_LIT> <EOL>"}
{"signature": "while (readySubmittersCounter.value != numberOfSubmitters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val refinesInSwiftClassId =", "body": "ClassId.topLevel(FqName(<STR_LIT>))<EOL>"}
{"signature": "for (i in seq) {", "body": "<EOL><INDENT><INDENT><INDENT>res += i<EOL><INDENT><INDENT>}"}
{"signature": "val superTypeCallEntry =", "body": "allSuperTypeCallEntries.lastOrNull()<EOL>"}
{"signature": "val javaRepeatable =", "body": "annotationClass.annotations.findAnnotation(JvmAnnotationNames.REPEATABLE_ANNOTATION) ?: return null<EOL>"}
{"signature": "val setterStub =", "body": "property.setter?.let { methodToStub[it] ?: return null }<EOL>"}
{"signature": "if (androidJarPath != null && androidSdkPath != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addOrReplaceOptionValue(<STR_LIT>, <STR_LIT> + androidSdkPath.toRelativeString(projectDir))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addOrReplaceOptionValue(<STR_LIT>, <STR_LIT> + androidJarPath.toRelativeString(projectDir))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (refinedConfiguration != scriptCompilationConfiguration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>onConfigurationUpdated(script, refinedConfiguration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val methodName =", "body": "intrinsicName ?: propertyCall ?: irFunction.name.toString()<EOL>"}
{"signature": "if (b is Byte?) {", "body": "<EOL><INDENT><INDENT>b!!.dec()<EOL><INDENT>}"}
{"signature": "val HLINE =", "body": "<STR_LIT><EOL>"}
{"signature": "val traceWithSize =", "body": "Trace(<NUM_LIT>)<EOL>"}
{"signature": "fun sequenceClassification(vararg sequenceClass: SequenceClass) {", "body": "<EOL><INDENT><INDENT>sequenceClassification += sequenceClass<EOL><INDENT>}"}
{"signature": "fun check(actual: String?, expected: String) {", "body": "<EOL><INDENT>if (actual != expected) error(<STR_LIT>)<EOL>}"}
{"signature": "fun foo(i: Int) {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>i<!>(<NUM_LIT>)<EOL><EOL><INDENT><!FUNCTION_EXPECTED!><NUM_LIT><!>(<NUM_LIT>)<EOL>}"}
{"signature": "if (declaration !is FirMemberDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (get() === null) {", "body": "}"}
{"signature": "val resolvedDependency =", "body": "resolvedDependencies[Triple(dependency.group, dependency.name, dependency.version)]<EOL>"}
{"signature": "val QualifierValue =", "body": "kindOf(TowerGroupKind.QualifierValue)<EOL>"}
{"signature": "val asmMethod =", "body": "jvmSignature.asmMethod<EOL>"}
{"signature": "val IS_NOINLINE =", "body": "FlagField.booleanAfter(HAS_DEFAULT_ARG)<EOL>"}
{"signature": "import lib.", "body": "*<EOL>"}
{"signature": "fun visitCheckedSafeCallSubject(checkedSafeCallSubject: FirCheckedSafeCallSubject) {", "body": "<EOL><INDENT><INDENT>visitElement(checkedSafeCallSubject)<EOL><INDENT>}"}
{"signature": "fun kickOff(block: @Composable () -> Unit) {", "body": "}"}
{"signature": "val reversedPerFileDependencies =", "body": "mutableMapOf<LibraryFile, MutableList<LibraryFile>>()<EOL>"}
{"signature": "val returnTypeWithParameter =", "body": "{ <!COMPONENT_FUNCTION_MISSING!>(b: Int): Int<!> -> <NUM_LIT> }<EOL>"}
{"signature": "val lazyValue =", "body": "lazy(LazyThreadSafetyMode.PUBLICATION, init)<EOL>"}
{"signature": "val bConst =", "body": "aConst + <NUM_LIT><EOL>"}
{"signature": "val trackingTrace =", "body": "TrackingBindingTrace(trace)<EOL>"}
{"signature": "val refValuesByNewInsn =", "body": "LinkedHashMap<TypeInsnNode, CapturedVarDescriptor>()<EOL>"}
{"signature": "val intProp =", "body": "IntPropKey()<EOL>"}
{"signature": "fun foo(defined: Int) {", "body": "}"}
{"signature": "val printerProtocol =", "body": "getPrinterProtocol()!!<EOL>"}
{"signature": "if (index < <NUM_LIT> || pattern == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return description<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (inputModuleKind) {", "body": "<EOL><INDENT><INDENT><INDENT>InputModuleKind.Source -> ErrorTypeStrategy.SpecialType<EOL><INDENT><INDENT><INDENT>InputModuleKind.Binary -> ErrorTypeStrategy.Fail<EOL><INDENT><INDENT>}"}
{"signature": "val sel =", "body": "if (isOptional) EnumAdapter.optionalPosition(newValue) else newValue!!.ordinal<EOL>"}
{"signature": "val unknownDirective =", "body": "parseDirective(line, UNKNOWN_DIRECTIVE)<EOL>"}
{"signature": "val _allClasses =", "body": "mutableListOf<KmClass>()<EOL>"}
{"signature": "package mult_constructors_<NUM_LIT>_bug<EOL>.", "body": ""}
{"signature": "var DemoOpenGetterCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "val syntheticPropertyCache =", "body": "session.syntheticPropertiesStorage.cacheByOwner.getValue(klass, null)<EOL>"}
{"signature": "if (qualifierDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return storeResult(context.trace, expression, qualifierDescriptor, context.scope.ownerDescriptor, QualifierPosition.EXPRESSION)<EOL><INDENT><INDENT>}"}
{"signature": "val initExpr =", "body": "Translation.translateAsExpression(e, context)<EOL>"}
{"signature": "if (throwInternalFinEx<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw Exception<NUM_LIT>(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val architecture = D<NUM_LIT>Platform.architecture) {", "body": "<EOL><INDENT><INDENT><INDENT>ARM<NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>X<NUM_LIT> -> name + X<NUM_LIT><EOL><INDENT><INDENT><INDENT>X<NUM_LIT>6 -> name + X<NUM_LIT>6<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var _counter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val thisApproximated =", "body": "approximateDefinitelyNotNullableTypes(this)<EOL>"}
{"signature": "val languageVersionSettingsByModule =", "body": "HashMap<TestModule?, LanguageVersionSettings>()<EOL>"}
{"signature": "val reportNewLockFile =", "body": "<STR_LIT><EOL>"}
{"signature": "if (checkNotNullCall.hasNothingType) {", "body": "<EOL><INDENT><INDENT><INDENT>addNonSuccessfullyTerminatingNode(node)<EOL><INDENT><INDENT>}"}
{"signature": "if (compare > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>maxVisibility = visibility<EOL><INDENT><INDENT>}"}
{"signature": "val irEquals =", "body": "primitiveOp<NUM_LIT>(<EOL>"}
{"signature": "if (isWasm || moduleKind == JsModuleKind.MODULE_ES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val DOT_DEFAULT_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val doWhileLoopProperties =", "body": "ArrayDeque<Pair<FirLoop, MutableSet<FirPropertySymbol>>>()<EOL>"}
{"signature": "val actualWasmConfigurations =", "body": "targetSpecificConfigurationsToCheck<EOL>"}
{"signature": "if (modality === Modality.ABSTRACT || modality === Modality.SEALED) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Opcodes.ACC_ABSTRACT<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val beforeDeclaration =", "body": "builder.createUnboundLabel(<STR_LIT>)<EOL>"}
{"signature": "for (i in diff.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (i == <NUM_LIT>) start[i] = diff[i]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else start[i] = start[i - <NUM_LIT>] + diff[i]<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val MINIMAL_HELPER_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val classesInPackageCache =", "body": "ConcurrentHashMap<FqName, Collection<PsiClass>>()<EOL>"}
{"signature": "val clashed =", "body": "stableNames.collectNameClashesWith(symbol).takeIf { it.isNotEmpty() } ?: continue<EOL>"}
{"signature": "if (property.returnType.isSubtypeOf(typeOf<Array<*>?>())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>assertContentEquals(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedValue as Array<Any?>?, actualValue as Array<Any?>?,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>message<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (kotlinOrigin != null || other.kotlinOrigin != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return other.kotlinOrigin == kotlinOrigin<EOL><INDENT><INDENT>}"}
{"signature": "if (modifier == PsiModifier.DEFAULT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resultBuffer.append(PsiModifier.ABSTRACT).append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package names.", "body": "<EOL>"}
{"signature": "if (functionTypeExpected) {", "body": "<INDENT><INDENT><INDENT>// all checks were done before<INDENT><INDENT><INDENT>return createTypeInfo(resultType, context)<INDENT><INDENT>}"}
{"signature": "val test_sns =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s === ns<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>ns === s<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s !== ns<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>ns !== s<!><EOL>"}
{"signature": "val formatter =", "body": "SimpleDateFormat(<STR_LIT>)<EOL>"}
{"signature": "val toValidateStateAfter =", "body": "mutableSetOf<AnyNamedPhase>()<EOL>"}
{"signature": "if (tailIndex == removingIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>tailIndex = prevIndex<EOL><INDENT><INDENT>}"}
{"signature": "package extendFunctionClass<EOL>.", "body": ""}
{"signature": "val isNullable<NUM_LIT> =", "body": "serializer<AccessFromCompanion>().descriptor.getElementDescriptor(<NUM_LIT>).isNullable<EOL>"}
{"signature": "fun testLib<NUM_LIT>() {", "body": "<EOL><INDENT>testLib<NUM_LIT>()<EOL><EOL><INDENT>testImportedLongConst()<EOL><INDENT>testImportedLongConstInlinedLocallyFromOtherModule()<EOL><EOL><INDENT>assertEquals(<NUM_LIT>0L, A.b)<EOL>}"}
{"signature": "val audio =", "body": "disposable { SDLAudio(this) }<EOL>"}
{"signature": "val superTypeArguments =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>serializableDescriptor.typeConstructor.supertypes.single { it.toClassDescriptor?.isInternalSerializable == true }.arguments<EOL>"}
{"signature": "val secondLast =", "body": "context.callsOrAssignments.elementAtOrNull(context.callsOrAssignments.size - <NUM_LIT>)<EOL>"}
{"signature": "val simpleUnresolvedBinaryDependency =", "body": "IdeaKotlinUnresolvedBinaryDependency(<EOL>"}
{"signature": "val extensionFun =", "body": "fun Any.() {}<EOL>"}
{"signature": "val jvmAndJs =", "body": "kotlin.sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "fun callSendString(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker) {", "body": "<EOL><INDENT>val string = Any().toString()<EOL><EOL><INDENT>helper.sendString(string)<EOL><INDENT>helper.sendString(string)<EOL><INDENT>tracker.add(string)<EOL>}"}
{"signature": "val reportErrorsOnPreReleaseDependencies =", "body": "<EOL><INDENT><INDENT>!skipPrereleaseCheck && !languageVersionSettings.isPreRelease() && !KotlinCompilerVersion.isPreRelease()<EOL>"}
{"signature": "package (only fir provider can do it),<EOL>.", "body": ""}
{"signature": "val SCRIPTING_LOG_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val primitiveType =", "body": "constructor.getPrimitiveType()<EOL>"}
{"signature": "val allConstructorMetadataCheckers =", "body": "listOf(<EOL>"}
{"signature": "val DOT_METADATA_FILE_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val JSPECIFY_NULLNESS_UNSPECIFIED_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val ulongArray<NUM_LIT> =", "body": "longArray.toULongArray()<EOL>"}
{"signature": "val annotationArrayType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "val parcelableCreator =", "body": "parcelableCreator<PrimitiveTypes>()<EOL>"}
{"signature": "val frameworks =", "body": "groupedFrameworkFiles.values.flatten()<EOL>"}
{"signature": "fun getTopLevelCallableSymbolsTo(destination: MutableList<FirCallableSymbol<*>>, packageFqName: FqName, name: Name) {", "body": "<EOL><INDENT><INDENT>val callableId = CallableId(packageFqName, name)<EOL><INDENT><INDENT>destination += functionCache.getCallablesWithoutContext(callableId)<EOL><INDENT><INDENT>destination += propertyCache.getCallablesWithoutContext(callableId)<EOL><INDENT>}"}
{"signature": "if (functionTypeForSam == null) {", "body": "<EOL><INDENT><INDENT><INDENT>TypeWithConversion(argumentType)<EOL><INDENT><INDENT>}"}
{"signature": "val adhocSrcDir =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val bar<NUM_LIT> =", "body": "<!EXPECTED_PROPERTY_INITIALIZER!><NUM_LIT><!><EOL>"}
{"signature": "if (symbol !is FirConstructorSymbol && symbol.dispatchReceiverType?.classId != classSymbol.classId) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "when (val psi = fir.source.psi) {", "body": "<INDENT><INDENT><INDENT>// for cases like `Foo.Bar()`, where `Foo.Bar` is an object, and `Foo.Bar()` is a call to `invoke` operator<INDENT><INDENT><INDENT>is KtSimpleNameExpression -> psi.getQualifiedElement()<INDENT><INDENT><INDENT>else -> psi<INDENT><INDENT>}"}
{"signature": "val arch =", "body": "hostArch()<EOL>"}
{"signature": "if (left is JsArrayAccess) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>accept(left.arrayExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>accept(left.indexExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (contextReceiverType in withoutLast) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>renderNormalizedType(contextReceiverType)<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val pluginPresenceService =", "body": "project.getService(KtCompilerPluginsProvider::class.java)<EOL>"}
{"signature": "val errorLevel =", "body": "extractDslMarkerFqNames(receiver.type)<EOL>"}
{"signature": "when (val<!SYNTAX!><!> = <!UNRESOLVED_REFERENCE!>x<!>) {", "body": "<EOL><INDENT><INDENT>in <!UNRESOLVED_REFERENCE!>y<!> -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "var rnd =", "body": "<NUM_LIT><EOL>"}
{"signature": "val signatureIterator =", "body": "StringCharacterIterator(typeDescriptor)<EOL>"}
{"signature": "val suffix =", "body": "outputFiles.produce.suffix(target)<EOL>"}
{"signature": "if (proto.hasPostDeclarationBlock()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>postDeclarationBlock.statements += deserializeCompositeBlock(proto.postDeclarationBlock).statements<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val builtInTypeName =", "body": "module.testModule.directives.singleValue(Directives.BUILTIN_TYPE_NAME)<EOL>"}
{"signature": "val privateDeps =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "if (callInfo.dispatchReceiver == null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (callInfo.extensionReceiver == null)<EOL><INDENT><INDENT><INDENT><INDENT>callInfo.noReceivers()<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>callInfo.extensionReceiver()<EOL><INDENT><INDENT>}"}
{"signature": "val nodeDebugInfoVersion =", "body": "node(llvm.llvmContext, llvmTwo, dwarfDebugInfoMetaDataNodeName, llvm.int<NUM_LIT>(DWARF.debugInfoVersion))<EOL>"}
{"signature": "val valueString =", "body": "value.toString()<EOL>"}
{"signature": "val eqeqSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.irBuiltIns.ieee<NUM_LIT>equalsFunByOperandType[kotlinTypeToIrType(comparisonType)?.classifierOrNull] ?: context.irBuiltIns<EOL>"}
{"signature": "val copyFunction =", "body": "expression.calleeReference.symbol as? FirCallableSymbol ?: return<EOL>"}
{"signature": "if (status.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val DECOMPILED_TEST_DATA_K<NUM_LIT>_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!ExpressionTypingUtils.isFunctionLiteral(scopeOwner) && !ExpressionTypingUtils.isFunctionExpression(scopeOwner)) {", "body": "<EOL><INDENT><INDENT><INDENT>scopeOwnerAsCallable()<EOL><INDENT><INDENT>}"}
{"signature": "val substitutedDescriptors =", "body": "Lists.newArrayList<CallableDescriptor>()<EOL>"}
{"signature": "val linkDependencies =", "body": "if (context.config.metadataKlib) emptyList()<EOL>"}
{"signature": "val publicPackageFilter =", "body": "{ className: String -> publicPackagePrefixes.none { className.startsWith(it) } }<EOL>"}
{"signature": "if (parameters.size != arguments.size) {", "body": "<EOL><INDENT><INDENT><INDENT>reportStrategy.wrongNumberOfTypeArguments(descriptor, parameters.size)<EOL><INDENT><INDENT><INDENT>return createErrorTypeForTypeConstructor(c, projectionFromAllQualifierParts, typeConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "fun commonFunction<NUM_LIT>(commonActualization: MyCommonClassWithActualization, common: MyCommonClass) {", "body": "<EOL><EOL>}"}
{"signature": "if (file !in dirtySources) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>put(file, irTranslationResults[file]!!)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package testPackInfix<EOL>.", "body": ""}
{"signature": "val childrenToRemove =", "body": "mutableSetOf<Node>()<EOL>"}
{"signature": "val CHAR_POS_LOOKBEHIND<INDENT>   =", "body": "<NUM_LIT>xf8<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or '('.toInt()<EOL>"}
{"signature": "val linuxMainCinterop =", "body": "consumerProject.locateOrCreateCommonizedCInteropDependencyConfiguration(linuxMain.get())!!<EOL>"}
{"signature": "for (parameter in anonymousFunction.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>process(parameter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.storeVariable(parameter, holder.session)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun fixVariable(<EOL><INDENT><INDENT>c: ConstraintSystemCompletionContext,<EOL><INDENT><INDENT>variableWithConstraints: VariableWithConstraints,<EOL><INDENT><INDENT>topLevelAtoms: List<ResolvedAtom>,<EOL><INDENT><INDENT>diagnosticsHolder: KotlinDiagnosticsHolder<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>fixVariable(c, variableWithConstraints, TypeVariableDirectionCalculator.ResolveDirection.UNKNOWN, topLevelAtoms, diagnosticsHolder)<EOL><INDENT>}"}
{"signature": "val irComponentVar =", "body": "context.symbolTable.descriptorExtension.declareVariable(<EOL>"}
{"signature": "val COMPILE_CONFIGURATION =", "body": "<STR_LIT><EOL>"}
{"signature": "val pathString =", "body": "FileUtil.toSystemIndependentName(path.toAbsolutePath().toString())<EOL>"}
{"signature": "val psiElements =", "body": "mapping[fir.psi as KtElement]<EOL>"}
{"signature": "var useTypeTable =", "body": "false<EOL>"}
{"signature": "val defaultLanguageVersion =", "body": "LanguageVersion.LATEST_STABLE<EOL>"}
{"signature": "val drawableGrid =", "body": "createDrawableGrid()<EOL>"}
{"signature": "var isLeftArgument =", "body": "true<EOL>"}
{"signature": "val levels =", "body": "mutableMapOf(start to <NUM_LIT>)<EOL>"}
{"signature": "val REFLECT =", "body": "FlavorConfig(TargetBackend.ANDROID, <STR_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val deprecatedAnno =", "body": "<EOL><INDENT><INDENT>session.symbolProvider.getClassLikeSymbolByClassId(StandardClassIds.Annotations.Deprecated) as FirRegularClassSymbol<EOL>"}
{"signature": "val _packageParts =", "body": "hashMapOf<File, TranslationResultValue>()<EOL>"}
{"signature": "val typeArgumentProjection =", "body": "typeArguments.elementAt(index)<EOL>"}
{"signature": "import test_visibility.", "body": "*<EOL>"}
{"signature": "val parameterVariance =", "body": "typeParameterDescriptor?.variance ?: Variance.INVARIANT<EOL>"}
{"signature": "if (DescriptorUtils.isEnumClass(constructedClass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(ENUM_CLASS_CONSTRUCTOR_CALL.on(callExpression))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val returnTarget =", "body": "getReturnExpressionTarget(expression)<EOL>"}
{"signature": "val serializableSerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelReadSerializable, symbols.parcelWriteSerializable)<EOL>"}
{"signature": "val integerTypePredicates =", "body": "arrayOf(<EOL>"}
{"signature": "val firLines =", "body": "frontendIRTestDataFile.readLines()<EOL>"}
{"signature": "if (codeContext != null) {", "body": "<EOL><INDENT><INDENT><INDENT>currentCodeContext = codeContext<EOL><INDENT><INDENT><INDENT>codeContext.onEnter()<EOL><INDENT><INDENT>}"}
{"signature": "fun x(p: Int) {", "body": "}\")<EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<STR_LIT>, \"fun x(p: Long) {}"}
{"signature": "val valueSameClassCompanion =", "body": "<NUM_LIT><!><EOL>"}
{"signature": "val ooo =", "body": "foobar<EOL>"}
{"signature": "for (j in expectedRes.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(expectedRes[j], res[j])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val GET_FIRST_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val es<NUM_LIT>ConstructorLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "fun copyWasmArray(source: WasmIntArray, destination: WasmIntArray, sourceIndex: Int, destinationIndex: Int, length: Int) {", "body": "<EOL><INDENT>wasm_array_copy<WasmIntArray>(destination, destinationIndex, source, sourceIndex, length)<EOL>}"}
{"signature": "val testSrc =", "body": "project.kotlinSourcesDir(<STR_LIT>).resolve(<STR_LIT>)<EOL>"}
{"signature": "val matchingAnnotations =", "body": "declaration.annotations<EOL>"}
{"signature": "val invoke<NUM_LIT>Symbol =", "body": "irBuiltIns.functionN(<NUM_LIT>).getSimpleFunction(<STR_LIT>)!!<EOL>"}
{"signature": "val interopCstr =", "body": "findTopLevelPropertyGetter(InteropFqNames.packageName, Name.identifier(InteropFqNames.cstrPropertyName), string)<EOL>"}
{"signature": "when (effectiveVariance) {", "body": "<EOL><INDENT><INDENT><INDENT>Variance.IN_VARIANCE -> genericContravariantArgumentMode ?: this<EOL><INDENT><INDENT><INDENT>Variance.INVARIANT -> genericInvariantArgumentMode ?: this<EOL><INDENT><INDENT><INDENT>else -> genericArgumentMode ?: this<EOL><INDENT><INDENT>}"}
{"signature": "if (type == Library || type == IncludedLibrary) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>staticCacheDependencies.addIfNotNull(klibCompilations.staticCache?.asStaticCacheDependency())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>staticCacheHeaderDependencies.addIfNotNull((klibCompilations.headerCache ?: klibCompilations.staticCache)?.asStaticCacheDependency())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (element is FirExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>consumer.reportExpressionTypeDiagnostic(element)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val excludedBinaryOperations =", "body": "listOf(<STR_LIT>).map { Name.identifier(it) }<EOL>"}
{"signature": "if (convertedTypeAfterSubtyping == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addResolvedKtPrimitive(resolvedAtom)<EOL><INDENT><INDENT><INDENT><INDENT>return@runTransaction true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (rhs == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irNotEqual(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irAnd(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irGet(param),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irConst(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irConst(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BASE_ENUMS_PACKAGE =", "body": "BASE_KOTLIN_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "else if (modality === Modality.ABSTRACT || modality === Modality.SEALED) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Opcodes.ACC_ABSTRACT<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun one() {", "body": "}<EOL><EOL><INDENT>fun usage() {<EOL><INDENT><INDENT><expr>this.one()</expr><EOL><INDENT>}"}
{"signature": "fun testFlagInMapDoesNotAppearsIfPresent() {", "body": "<EOL><INDENT><INDENT>val options = makeExternalDependenciesResolverOptions(emptyMap())<EOL><INDENT><INDENT>assertNull(options.flag(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val testProcessorPhase =", "body": "createFileLoweringPhase(<EOL>"}
{"signature": "if (data[index] == null) {", "body": "<EOL><INDENT><INDENT><INDENT>size++<EOL><INDENT><INDENT>}"}
{"signature": "val psiToIrInput =", "body": "PsiToIrInput(frontendOutput.moduleDescriptor, frontendOutput.environment, isProducingLibrary)<EOL>"}
{"signature": "val __param =", "body": "param<EOL>"}
{"signature": "val intrinsicCache =", "body": "mutableMapOf<FunctionDescriptor, FunctionIntrinsic?>()<EOL>"}
{"signature": "if (x != null)  {", "body": "<EOL><INDENT><INDENT>val u = checkSubtype<Int>(x<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>)<EOL><INDENT><INDENT>val y = checkSubtype<Int>(x)<EOL><INDENT><INDENT>val z : Int = y<EOL><INDENT>}"}
{"signature": "if (KotlinToolingDiagnostics.InternalKotlinGradlePluginPropertiesUsed.id in currentDiagnostic.first()) {", "body": "<EOL><INDENT><INDENT><INDENT>val cleanedDiagnostic = filterKgpUtilityPropertiesFromDiagnostic(currentDiagnostic)<EOL><INDENT><INDENT><INDENT>if (cleanedDiagnostic.isNotEmpty()) appendLine(cleanedDiagnostic.joinToString(separator = <STR_LIT>, postfix = <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(a: Outer<String>.A<Int>) {", "body": "<EOL>   println(<expr>a</expr>)<EOL>}"}
{"signature": "val baseVariable =", "body": "generateTemporaryVariable(<EOL>"}
{"signature": "val retentionPolicy =", "body": "getRetentionPolicy(annotationClass)<EOL>"}
{"signature": "val errorSubstitutor =", "body": "substitutorByMap(errorSubstitution, session)<EOL>"}
{"signature": "val anns<NUM_LIT>Sorted =", "body": "annotations<NUM_LIT>.preprocessAnnotations()<EOL>"}
{"signature": "if (function is FirConstructor && function.isPrimary) {", "body": "<INDENT><INDENT><INDENT>// `val/var` is valid for primary constructors, but not for secondary constructors<INDENT><INDENT><INDENT>return<INDENT><INDENT>}"}
{"signature": "if (insn is VarInsnNode && insn.isStoreOperation()) {", "body": "<EOL><INDENT><INDENT>frame.markDead(insn.`var`)<EOL><INDENT>}"}
{"signature": "if (specificClassId == UInt) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return generalClassId == ULong || generalClassId == UShort || generalClassId == UByte<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun string(foo: Any) {", "body": "<EOL><INDENT>val string = <STR_LIT><EOL><INDENT>if (<STR_LIT> == foo) foo.length<EOL><INDENT>if (string == foo) foo.length<EOL><INDENT>if (foo == <STR_LIT>) foo.<!UNRESOLVED_REFERENCE!>length<!><EOL>}"}
{"signature": "for (scriptDeclaration in declaration.declarations.filterIsInstance<FirRegularClass>()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>registerClassAndNestedClasses(scriptDeclaration, irScript)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeArgument is IrSimpleType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (typeArgument.checkTypeArgumentsHasSelf(itselfClass)) return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val reservedModuleMapSyntax =", "body": "<STR_LIT><EOL>"}
{"signature": "val aggregatingGeneratedTypes =", "body": "aptCache.getAggregatingGeneratedTypes(javaCache::getTypesForFiles)<EOL>"}
{"signature": "fun test(x: UInt?, y: UInt) {", "body": "<INDENT>val a = x ?: y // unbox<INDENT>val b = x ?: x!! // unbox unbox}"}
{"signature": "val IS_SUBTYPE<INDENT><INDENT><INDENT><INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "val fqNameToPackageFragment =", "body": "<EOL><INDENT><INDENT>PackagePartClassUtils.getFilesWithCallables(sourceFiles)<EOL>"}
{"signature": "if (isolatedList != null) {", "body": "<INDENT><INDENT>// Move the current thread to the isolated cpuset<INDENT><INDENT>// Must be called after the updateAffinityOfAllProcesses, otherwise it wouldn't have an effect<INDENT><INDENT>updateCurrentThreadAffinity(isolatedList)<INDENT>}"}
{"signature": "if (!file.exists) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>report(ERROR, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val localInZ =", "body": "<NUM_LIT><EOL>"}
{"signature": "val annotationProto =", "body": "createAnnotationProto(extension)<EOL>"}
{"signature": "if (old.hasVariance()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.variance != new.variance) return false<EOL><INDENT><INDENT>}"}
{"signature": "val buildFilePath =", "body": "configuration.get(JVMConfigurationKeys.MODULE_XML_FILE)<EOL>"}
{"signature": "val defaultContext =", "body": "Context { null }<EOL>"}
{"signature": "fun writeReadSimple() {", "body": "<EOL><INDENT><INDENT>val diffs = BuildDiffsStorage(listOf(getRandomDiff()))<EOL><INDENT><INDENT>BuildDiffsStorage.writeToFile(icContext, storageFile, diffs)<EOL><EOL><INDENT><INDENT>val diffsDeserialized = BuildDiffsStorage.readFromFile(storageFile, reporter = null)<EOL><INDENT><INDENT>Assert.assertEquals(diffs.toString(), diffsDeserialized.toString())<EOL><INDENT>}"}
{"signature": "var callCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in 'f' downTo it) {", "body": "sb.append(i) }"}
{"signature": "when (this._name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> listOf(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> listOf(this, modules[<STR_LIT>]!!)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> listOf(this, modules[<STR_LIT>]!!, modules[<STR_LIT>]!!)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> throw IllegalStateException(_name)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val objectToGetInstanceFunctions =", "body": "context.mapping.wasmExternalObjectToGetInstanceFunction<EOL>"}
{"signature": "fun baz(p: Boolean, s: String?) {", "body": "<EOL><INDENT>res = s!!<EOL>}"}
{"signature": "val sectionTag =", "body": "SectionTag.valueOf(element.tagName().lowercase())<EOL>"}
{"signature": "import paths.", "body": "<EOL>"}
{"signature": "val bitcodeAccess =", "body": "BitcodeLibraryAccess<BitcodeKotlinLibraryLayout>(libraryFile, component, target)<EOL>"}
{"signature": "val nextNode =", "body": "graph.get(nextKey)<EOL>"}
{"signature": "val activeRunner =", "body": "AtomicReference<MemoryTrackerRunner>()<EOL>"}
{"signature": "val nans =", "body": "floatArrayOf(Float.NaN, Float.fromBits(<NUM_LIT>xFFC<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt()))<EOL>"}
{"signature": "fun test<NUM_LIT>(f: (Int) -> Int) {", "body": "<EOL><INDENT><NUM_LIT><!UNRESOLVED_REFERENCE!>f<!>(<NUM_LIT>)<EOL><EOL><INDENT><NUM_LIT>.<!NO_RECEIVER_ALLOWED!>(f)<!>(<NUM_LIT>)<EOL>}"}
{"signature": "package example.", "body": "dependency<EOL>"}
{"signature": "var lastArrayContent =", "body": "mutableListOf<JsExpression>()<EOL>"}
{"signature": "fun testNullableParam() {", "body": "useSuspendNullable(::foo<NUM_LIT>) }"}
{"signature": "val dontTouchInsnIndices =", "body": "BitSet(insns.size)<EOL>"}
{"signature": "if (getter) {", "body": "<EOL><INDENT><INDENT><INDENT>return name.startsWith(<STR_LIT>) || name.startsWith(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val delegatingConstructorCall =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>statements.find { it is IrDelegatingConstructorCall } as IrDelegatingConstructorCall?<EOL>"}
{"signature": "if (!referenceTarget.kind.isSingleton) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.NO_COMPANION_OBJECT.on(qualifier.referenceExpression, referenceTarget))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val symbolToPostpone =", "body": "symbol.symbolToPostponeIfCanBeResolvedOnDemand() ?: return<EOL>"}
{"signature": "if (projection.getVariance() == TypeVariance.IN && type != null && isMyTypeVariable(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>LowerCapturedTypePolicy.CHECK_ONLY_LOWER<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun coerceAtMostUnsigned() {", "body": "<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>u.coerceAtMost(<NUM_LIT>u), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>u.coerceAtMost(<NUM_LIT>u), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val kClassClass =", "body": "builtIns.kClass.toIrSymbol()<EOL>"}
{"signature": "if (owner.containingClassOrObject == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.record(UNUSED_MAIN_PARAMETER, element)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compileServiceSession =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>KotlinCompilerClient.connectAndLease(compilerId, flagFile, daemonJVMOptions, daemonOptions,<EOL>"}
{"signature": "if (rootProjectDir != null && buildDir != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FileLocations(rootProjectDir, buildDir)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val parsedAnnotations =", "body": "parseJvmNameOnFileNoResolve(file)<EOL>"}
{"signature": "fun visitVarDef(tree: JCTree.JCVariableDecl) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Do not visit variable contents, there can be nothing but local declarations which we don't support<INDENT><INDENT><INDENT><INDENT>declarations += tree<INDENT><INDENT><INDENT>}"}
{"signature": "fun visitChildren(descriptor: DeclarationDescriptor) {", "body": "<EOL><INDENT><INDENT>descriptor.accept(this, null)<EOL><INDENT>}"}
{"signature": "if (index == suspendFunctionType.arguments.indices.last) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continuationClassSymbol.typeWith(type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val vendoredKeys =", "body": "listOf(vendoredLibrary, vendoredLibraries, vendoredFrameworks)<EOL>"}
{"signature": "package<EOL><INDENT><INDENT>if (!kindFilter.", "body": "acceptsKinds(DescriptorKindFilter.NON_SINGLETON_CLASSIFIERS_MASK)) return emptySet()<EOL>"}
{"signature": "if (intrinsicRememberEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitRememberCall(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (hx < <NUM_LIT>x<NUM_LIT>c9<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>U) {", "body": "<INDENT><EOL><INDENT><INDENT>t = huge + x<INDENT><EOL><INDENT><INDENT>return x - (t - (huge + x))<EOL><INDENT>}"}
{"signature": "val sourceSnapshotMap =", "body": "registerMap(FileSnapshotMap(SOURCE_SNAPSHOTS.storageFile, icContext))<EOL>"}
{"signature": "fun d<NUM_LIT>(body: KotlinWasmD<NUM_LIT>Dsl.() -> Unit) {", "body": "<EOL><INDENT><INDENT>body(d<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val funBox =", "body": "FunBox { called.value = true }<EOL>"}
{"signature": "val nameRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "fun forReference(ref: Any?) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>forReference(G<Int?>::<!CALLABLE_REFERENCE_RESOLUTION_AMBIGUITY!>foo<!>)<EOL>}"}
{"signature": "fun jumpIfLessThanZero(v: InstructionAdapter, label: Label) {", "body": "<EOL><INDENT><INDENT>v.lconst(<NUM_LIT>L)<EOL><INDENT><INDENT>v.lcmp()<EOL><INDENT><INDENT>v.iflt(label)<EOL><INDENT>}"}
{"signature": "fun withCopy() {", "body": "<EOL><INDENT><INDENT><INDENT>builder.wantsCopy = true<EOL><INDENT><INDENT>}"}
{"signature": "val interfaceTypeParameters =", "body": "classDescriptor.declaredTypeParameters<EOL>"}
{"signature": "val PSEUDO_COMMENT_PREVIOUS_INSTR =", "body": "<STR_LIT><EOL>"}
{"signature": "val actualTypeParameters =", "body": "if (this is FirSimpleFunctionBuilder)<EOL>"}
{"signature": "val cl<NUM_LIT> =", "body": "cache.getForSplitPaths(bottomCp<NUM_LIT>, topCp)<EOL>"}
{"signature": "if (hx < <NUM_LIT>x<NUM_LIT>e<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>U) {", "body": "<INDENT><EOL><INDENT><INDENT>if (huge + x > one) return one + x<EOL><INDENT>}"}
{"signature": "val lastPart =", "body": "path.lastOrNull() ?: return null<EOL>"}
{"signature": "val dependsOnImpl =", "body": "MutableObservableSetImpl<KotlinSourceSet>()<EOL>"}
{"signature": "fun visitClassLiteral(name: Name?, value: ClassLiteralValue) {", "body": "<EOL><INDENT><INDENT>args[nameOrSpecial(name)] = createConstantValue(KClassData(value.classId, value.arrayNestedness))<EOL><INDENT>}"}
{"signature": "val knownStableMask =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (typeParameters.size < <NUM_LIT>) <NUM_LIT>b<NUM_LIT> shl typeParameters.size else <NUM_LIT><EOL>"}
{"signature": "fun testKotlinStdlibJvm() {", "body": "<EOL><INDENT><INDENT>doTestKotlinStdLibResolve(JvmPlatforms.defaultJvmPlatform, PathUtil.kotlinPathsForDistDirectory.stdlibPath.toPath())<EOL><INDENT>}"}
{"signature": "val secondReplaceWith =", "body": "second.getReplaceWith() ?: return@run null<EOL>"}
{"signature": "if (anonymous && !languageVersionSettings.supportsFeature(LanguageFeature.SingleUnderscoreForParameterName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (classAnnotationsTuples.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>aconst(null)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun binaries(configure: Action<@UnsafeVariance R>) {", "body": "<EOL><INDENT><INDENT>configure.execute(binaries)<EOL><INDENT>}"}
{"signature": "val newPaths =", "body": "projectPaths + additionalOutputsForSourceSet.mapNotNull { artifacts[it] }.flatten()<EOL>"}
{"signature": "if (valueParameter.defaultValue is FirLazyExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>valueParameter.replaceDefaultValue(newValueParameter.defaultValue)<EOL><INDENT><INDENT>}"}
{"signature": "var scope =", "body": "context.getResolutionScope(bindingContext, resolutionFacade)<EOL>"}
{"signature": "val LONG =", "body": "CompileTimeType<Long>()<EOL>"}
{"signature": "fun publicLocalFun() {", "body": "}<EOL><INDENT><INDENT>private fun privateLocalFun() {}"}
{"signature": "if (!KotlinBuiltIns.isUnit(returnType)) {", "body": "<EOL><INDENT><INDENT><INDENT>checkDescriptor(returnType.constructor.declarationDescriptor!!, callable)<EOL><INDENT><INDENT>}"}
{"signature": "val SM =", "body": "LockBasedStorageManager(TestModule::class.java.name)<EOL>"}
{"signature": "var bits_ =", "body": "BitSet()<EOL>"}
{"signature": "val throwableMethods =", "body": "throwableClass.methods<EOL>"}
{"signature": "val internedScopeFqName =", "body": "interner.intern(scopeFqName)<EOL>"}
{"signature": "val larg =", "body": "{ <!CANNOT_INFER_PARAMETER_TYPE!>a<!> -> }(<NUM_LIT>)<EOL>"}
{"signature": "for (nestedConstructor in nestedClassConstructors) {", "body": "<EOL><INDENT><INDENT><INDENT>val name = nestedConstructor.containingDeclaration.name<EOL><INDENT><INDENT><INDENT>functionsByName.putValue(name, nestedConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "val setArraySymbol =", "body": "arrayClass.functions.single { it.name == OperatorNameConventions.SET }<EOL>"}
{"signature": "fun inline() {", "body": "snapshotAPIAndCompare(testName.methodName) }"}
{"signature": "val ownerFunction =", "body": "ownerFunction<EOL>"}
{"signature": "val firExpression =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>getAsFirExpression<FirExpression>(it, <STR_LIT>selector<STR_LIT>receiver<STR_LIT>)<EOL>"}
{"signature": "fun testAnnotationEmptyVarArg() {", "body": "<EOL><INDENT><INDENT>val annotations = annotations(<STR_LIT>, TestAnnotation::class)<EOL><INDENT><INDENT><INDENT>.valueOrThrow()<EOL><INDENT><INDENT><INDENT>.filterIsInstance(TestAnnotation::class.java)<EOL><EOL><INDENT><INDENT>assertEquals(annotations.count(), <NUM_LIT>)<EOL><INDENT><INDENT>assert(annotations.first().options.isEmpty())<EOL><INDENT>}"}
{"signature": "val entriesSymbol =", "body": "getStaticMemberScope().getCallableSymbols(Name.identifier(<STR_LIT>)).firstOrNull()<EOL>"}
{"signature": "val targetAnnotation =", "body": "getTargetAnnotation(session)<EOL>"}
{"signature": "val ARRAY_OF_FUNCTIONS =", "body": "(ArrayFqNames.PRIMITIVE_TYPE_TO_ARRAY.values + ArrayFqNames.ARRAY_OF_FUNCTION).toSet()<EOL>"}
{"signature": "val memberValRef =", "body": "B::memberVal<EOL>"}
{"signature": "val libDir =", "body": "File(ANNOTATIONS_JAR_DIR)<EOL>"}
{"signature": "if (ownerSymbol?.fir?.isCompanion == true) {", "body": "<EOL><INDENT><INDENT><INDENT>return outerClassId.toLookupTag()<EOL><INDENT><INDENT>}"}
{"signature": "if (suspendParameterType == null) {", "body": "<EOL><INDENT><INDENT><INDENT>val returnType = typeArgumentList.last().type(c.typeTable)!!<EOL><INDENT><INDENT><INDENT>createTypeReferenceStub(functionType, returnType)<EOL><INDENT><INDENT>}"}
{"signature": "fun take(arg: B) {", "body": "}<EOL><EOL><INDENT>fun test(s: String) {<EOL><INDENT><INDENT>if (s.ext is B)<EOL><INDENT><INDENT><INDENT>take(s.ext)<EOL><INDENT>}"}
{"signature": "val privateSpecName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(a: C<out CharSequence>, y: Out<CharSequence>) {", "body": "<EOL><INDENT>a + <!TYPE_MISMATCH(<STR_LIT>)!>y<!><EOL>}"}
{"signature": "val adder =", "body": "{ a: Int -> sum += a }<EOL>"}
{"signature": "if (kvp.second) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>done = false;<EOL><INDENT><INDENT><INDENT><INDENT>break;<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TASK_EXECUTION_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val typePredicates =", "body": "LinkedHashSet<TypePredicate?>()<EOL>"}
{"signature": "while (daemonHome.exists() && attempts < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>daemonHome.deleteRecursively()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>attempts++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Thread.sleep(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val commandReader =", "body": "ConsoleReplCommandReader()<EOL>"}
{"signature": "if (config.browsers.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val k<NUM_LIT>JsDceArgumentsFqName =", "body": "FqName(K<NUM_LIT>JSDceArguments::class.qualifiedName!!)<EOL>"}
{"signature": "if (typeArgument.cannotBeReified()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.REIFIED_TYPE_FORBIDDEN_SUBSTITUTION, typeArgument, context)<EOL><INDENT><INDENT>}"}
{"signature": "val isCheckCallable =", "body": "patternTranslator.getIsTypeCheckCallable(argumentType)<EOL>"}
{"signature": "val jsToKotlinClosures =", "body": "mutableMapOf<String, IrSimpleFunction>()<EOL>"}
{"signature": "if (needCompatibilityResolveForSAM(candidate, expectedParameterType)) {", "body": "<EOL><INDENT><INDENT><INDENT>candidate.markCandidateForCompatibilityResolve()<EOL><INDENT><INDENT>}"}
{"signature": "fun visitNamedReferenceWithCandidateBase(namedReferenceWithCandidateBase: FirNamedReferenceWithCandidateBase, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitNamedReferenceWithCandidateBase(namedReferenceWithCandidateBase)<EOL><INDENT>}"}
{"signature": "val classDeclarations =", "body": "(containingClass.metadata as? KonanMetadata.Class)?.llvm<EOL>"}
{"signature": "fun exc(flag: Boolean) {", "body": "<EOL><INDENT>if (flag) throw RuntimeException()<EOL>}"}
{"signature": "val shoulNotBeEveluated<NUM_LIT> =", "body": "<STR_LIT>.chars().toList().groupBy { it }.map { it.key to it.value.size }.joinToString().also(::println)<EOL>"}
{"signature": "if (firMemberDeclaration.typeParameters.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>scopes = scopes.add(FirMemberTypeParameterScope(firMemberDeclaration))<EOL><INDENT><INDENT>}"}
{"signature": "val NATIVE_DEPENDENCIES_TO_LINK =", "body": "<STR_LIT><EOL>"}
{"signature": "val declaredSymbols =", "body": "classSymbol.getCombinedDeclaredMemberScope()<EOL>"}
{"signature": "if (restrictedTargets != null && actualTargets.intersect(restrictedTargets).isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val platformCompilerOpts =", "body": "<EOL><INDENT><INDENT><INDENT>if (clang is ClangArgs.Jni)<EOL>"}
{"signature": "if (unmatchedLookupSymbols.isEmpty() && unmatchedFqNames.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return changedProgramSymbols<EOL><INDENT><INDENT>}"}
{"signature": "fun on(t: SomeTrait) {", "body": "<EOL><INDENT><INDENT><INDENT>f = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val contextualOnPropertyFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun visitNullValue(value: NullValue, data: Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nameList =", "body": "fragment.getExtension(KlibMetadataProtoBuf.className).orEmpty()<EOL>"}
{"signature": "if (ref == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in BENCHMARK_SIZE downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val next = a + b<EOL><INDENT><INDENT><INDENT>a = b<EOL><INDENT><INDENT><INDENT>b = next<EOL><INDENT><INDENT>}"}
{"signature": "val scriptInstanceConstructor =", "body": "scriptClass.getConstructor(*constructorParams)<EOL>"}
{"signature": "val normInt =", "body": "<NUM_LIT><EOL>"}
{"signature": "val castInsn =", "body": "castWithType.getFirst()<EOL>"}
{"signature": "for (anonymousInitializer in anonymousInitializers) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(anonymousInitializer.source, FirWebCommonErrors.EXTERNAL_ANONYMOUS_INITIALIZER, context)<EOL><INDENT><INDENT>}"}
{"signature": "val compilerOpts =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "if (isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>println(builder.implementation.render(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar<NUM_LIT>(x : A<*>) {", "body": "}"}
{"signature": "for (i in p) {", "body": "<EOL><INDENT><INDENT>result += i<EOL><INDENT>}"}
{"signature": "val remainingSizeTemporary =", "body": "irTemporary(parcelReadInt(irGet(parcel)), isMutable = true)<EOL>"}
{"signature": "if ((kind != ClassKind.ANNOTATION_CLASS || field?.isStatic == true) && field?.parent == declaration.parent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addIfNotNull(field)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fileWithRequiredPackage =", "body": "<STR_LIT><EOL>"}
{"signature": "fun linux() {", "body": "<EOL><INDENT>common()<EOL><EOL><INDENT>includedLib.linuxMain()<EOL><INDENT>cinterop.a.a()<EOL>}"}
{"signature": "val dataFile =", "body": "generateStructureData(<EOL>"}
{"signature": "package pkg<NUM_LIT><EOL>.", "body": ""}
{"signature": "if (hasConstantValue()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + constantValue.hashCode()<EOL><INDENT>}"}
{"signature": "val arg<NUM_LIT>type =", "body": "ktype.arguments[<NUM_LIT>].type!!<EOL>"}
{"signature": "fun Bar(a: Int) {", "body": "}<EOL><INDENT><INDENT><STR_LIT>\",<EOL><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>public final class TestKt {<EOL><INDENT><INDENT><INDENT>  public final static Foo(Landroidx/compose/runtime/Composer;I)V<EOL><INDENT><INDENT><INDENT>  public final static Bar(ILandroidx/compose/runtime/Composer;I)V<EOL><INDENT><INDENT><INDENT>  final static INNERCLASS TestKt%Bar%<NUM_LIT> null null<EOL><INDENT><INDENT><INDENT>  final static INNERCLASS TestKt%Foo%<NUM_LIT> null null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun report(reportOn: KtExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.DUPLICATE_LABEL_IN_WHEN.on(reportOn))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val baseDumper =", "body": "MultiModuleInfoDumper()<EOL>"}
{"signature": "val tag<NUM_LIT> =", "body": "ConeClassLikeLookupTagImpl()<EOL>"}
{"signature": "val hLocal =", "body": "<STR_LIT><EOL>"}
{"signature": "val minorStart =", "body": "string.indexOf('.')<EOL>"}
{"signature": "val stdlibVersionLineNumber =", "body": "pomLines.indexOfFirst { <STR_LIT> in it } + <NUM_LIT><EOL>"}
{"signature": "val isSuspend =", "body": "Flags.SUSPEND_TYPE.get(type.flags)<EOL>"}
{"signature": "val modelParser =", "body": "ModelParser(modulePrefix, globalExcludedDirectories)<EOL>"}
{"signature": "val embeddedBuildScript =", "body": "gradleBuildScript(embeddedModuleName)<EOL>"}
{"signature": "val I<NUM_LIT>_SHR_U =", "body": "<STR_LIT><EOL>"}
{"signature": "val nameForSpecialFunction =", "body": "getJvmMethodNameIfSpecial(function)<EOL>"}
{"signature": "if (staticFakeOverrideKey == null) {", "body": "<EOL><INDENT><INDENT><INDENT>fieldCache[field] = irField.symbol<EOL><INDENT><INDENT>}"}
{"signature": "fun mapPutAllFromCustomMap() {", "body": "<EOL><INDENT><INDENT>val newMap = emptyMutableMap()<EOL><INDENT><INDENT>newMap.putAll(ConstMap)<EOL><INDENT><INDENT>assertEquals(ConstMap.entries.single().toPair(), newMap.entries.single().toPair())<EOL><INDENT>}"}
{"signature": "val typealiases =", "body": "mutableListOf<TypealiasStub>()<EOL>"}
{"signature": "val conversions =", "body": "mutableMapOf<AbstractKtDiagnosticFactory, KtFirDiagnosticCreator>()<EOL>"}
{"signature": "fun updateDispatchReceiverType(newType: KotlinType) {", "body": "<EOL><INDENT><INDENT>if (dispatchReceiver?.type == newType) return<EOL><INDENT><INDENT>dispatchReceiver = dispatchReceiver?.replaceType(newType)<EOL><INDENT>}"}
{"signature": "val bitcodeExtension =", "body": "project.extensions.getByType<CompileToBitcodeExtension>()<EOL>"}
{"signature": "if (limit < <NUM_LIT> || count <= limit) {", "body": "<EOL><INDENT><INDENT><INDENT>buffer.appendElement(element, transform)<EOL><INDENT><INDENT>}"}
{"signature": "fun writeData(dataOutput: DataOutput)<EOL><EOL><INDENT>fun writeIntoFile(path: String) {", "body": "<EOL><INDENT><INDENT>val fileStream = FileOutputStream(path)<EOL><INDENT><INDENT>val dataOutputStream = DataOutputStream(fileStream)<EOL><EOL><INDENT><INDENT>writeData(dataOutputStream)<EOL><EOL><INDENT><INDENT>dataOutputStream.close()<EOL><INDENT><INDENT>fileStream.close()<EOL><INDENT>}"}
{"signature": "fun registerDeclarationNativeImplementation(file: IrFile, declaration: IrDeclaration) {", "body": "<EOL><INDENT><INDENT>if (!declaration.hasJsPolyfill()) return<EOL><INDENT><INDENT>val declarations = polyfillsPerFile[file] ?: hashSetOf()<EOL><INDENT><INDENT>declarations.add(declaration)<EOL><INDENT><INDENT>polyfillsPerFile[file] = declarations<EOL><INDENT>}"}
{"signature": "if (failedBrowsers.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return super.testFailedMessage(execHandle, exitValue)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classWithStableParameterNames =", "body": "Test::class.java.readMetadataAsClass()<EOL>"}
{"signature": "val dirtyClasspathFqNames =", "body": "HashSet<String>(dirtyClasspathJvmNames.size)<EOL>"}
{"signature": "val oldProto =", "body": "oldData.proto<EOL>"}
{"signature": "if (klass.startOffset != UNDEFINED_OFFSET) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val bodyBuilder =", "body": "DeclarationIrBuilder(context, symbol, startOffset, endOffset)<EOL>"}
{"signature": "val testPath =", "body": "path.replace('\\\\', '/')<EOL>"}
{"signature": "val ifNullLabel =", "body": "ifNull<NUM_LIT>label<EOL>"}
{"signature": "val rawClasspath =", "body": "pluginConfiguration.substringBefore(classpathOptionsDelimiter)<EOL>"}
{"signature": "val originalContainingClass =", "body": "field.parentClassOrNull ?: return null<EOL>"}
{"signature": "if (proto.hasReceiver()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>explicitReceiver = deserializeExpression(proto.receiver)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!lowerBound.attributes.contains(CompilerConeAttributes.RawType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ConeClassLikeTypeImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>lowerBound.lookupTag, lowerBound.typeArguments, lowerBound.isNullable,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>lowerBound.attributes + CompilerConeAttributes.RawType<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val arrays =", "body": "PrimitiveType.values().map { builtIns.getPrimitiveArrayClassDescriptor(it) } + builtIns.array<EOL>"}
{"signature": "when (originalFir) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirQualifiedAccessExpression -> originalFir<EOL><INDENT><INDENT><INDENT>is FirWhenSubjectExpression -> originalFir.whenRef.value.subject as? FirQualifiedAccessExpression<EOL><INDENT><INDENT><INDENT>is FirVariableAssignment -> originalFir.unwrapLValue()<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val verboseReporting =", "body": "CompilerSystemProperties.COMPILE_DAEMON_VERBOSE_REPORT_PROPERTY.value != null<EOL>"}
{"signature": "val diagnosticText =", "body": "RootDiagnosticRendererFactory(diagnostic).render(diagnostic)<EOL>"}
{"signature": "val missingActualMembers =", "body": "FakeOverrideInfo()<EOL>"}
{"signature": "package aa<EOL>.", "body": ""}
{"signature": "if (!classSymbol.hasAnnotation(JsPlainObjectsAnnotations.jsPlainObjectAnnotationClassId, session)) {", "body": "<EOL><INDENT><INDENT><INDENT>emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val errorValues =", "body": "generateSequence<Int>({ (throw IllegalStateException()) }, { null })<EOL>"}
{"signature": "val declIndex =", "body": "argumentWithDeclIndex.declIndex<EOL>"}
{"signature": "fun visitGetClassCall(getClassCall: FirGetClassCall, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allGetClassCallCheckers.check(getClassCall, data)<EOL><INDENT>}"}
{"signature": "val exportObjCClassName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitClassLikeDeclaration(classLikeDeclaration: FirClassLikeDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>action(classLikeDeclaration)<EOL><INDENT><INDENT>}"}
{"signature": "val unsignedConstructor =", "body": "irVarargType.getClass()!!.primaryConstructor!!<EOL>"}
{"signature": "fun visitInaccessibleReceiverExpression(<EOL><INDENT><INDENT>inaccessibleReceiverExpression: FirInaccessibleReceiverExpression,<EOL><INDENT><INDENT>data: CheckerContext,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>checkers.allInaccessibleReceiverCheckers.check(inaccessibleReceiverExpression, data)<EOL><INDENT>}"}
{"signature": "val expectedDescription =", "body": "descriptionFrom(expected)<EOL>"}
{"signature": "val OUTPUT_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!declaration.isExpect && declaration.isKotlinObjCClass()) {", "body": "<EOL><INDENT><INDENT><INDENT>checkKotlinObjCClass(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val superMessenger =", "body": "codegen.llvm.externalNativeRuntimeFunction(<EOL>"}
{"signature": "fun visitFloatValue(value: FloatValue, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinConstantValueKind.FLOAT.ordinal)<EOL><INDENT><INDENT>dataStream.writeFloat(value.value)<EOL><INDENT>}"}
{"signature": "val READ_METHOD_NAMES =", "body": "mapOf(<EOL>"}
{"signature": "val parentHistory =", "body": "getBuildHistoryForDir(parent)<EOL>"}
{"signature": "if (vals?.isNotEmpty() == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data[this] = vals<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (index != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(sep)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(HLINE)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (unwrappedCandidateSymbol === unwrappedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = candidateSymbol<EOL><INDENT><INDENT><INDENT><INDENT>return@processCallables<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dummyContainerDescriptor =", "body": "DummyContainerDescriptor(file, packageFragment)<EOL>"}
{"signature": "val simplifiedMethodName =", "body": "methodName.getOnlyUpperCaseSymbols()<EOL>"}
{"signature": "val newExpression =", "body": "getDispatchReceiverExpression(<EOL>"}
{"signature": "val setterUselessTargets =", "body": "setOf(PROPERTY_SETTER, SETTER_PARAMETER)<EOL>"}
{"signature": "when (val callee = (unwrapArgument() as? FirQualifiedAccessExpression)?.calleeReference) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirResolvedNamedReference -> callee.resolvedSymbol<EOL><INDENT><INDENT><INDENT>is FirThisReference -> callee.boundSymbol<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val bWorkerUnlocker =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "val leafTargets =", "body": "konanTargetsSet.map(::LeafCommonizerTarget)<EOL>"}
{"signature": "val hasInlinableParameters =", "body": "function.valueParameters.any { it.isInlinable(context.session) }<EOL>"}
{"signature": "val _commonDeclarationCheckers =", "body": "ComposedDeclarationCheckers(MppCheckerKind.Common)<EOL>"}
{"signature": "fun visitSubroutineExit(instruction: SubroutineExitInstruction) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Nothing<INDENT><INDENT><INDENT>}"}
{"signature": "if (unique.add(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processor(it)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fileTranslationData =", "body": "serializer.translationData(file)<EOL>"}
{"signature": "val isForLoop =", "body": "whileLoop.source?.elementType == KtNodeTypes.FOR<EOL>"}
{"signature": "val optInsForSourceCode =", "body": "optIns subtract OPT_INS_PURELY_FOR_COMPILER<EOL>"}
{"signature": "fun doWork(job: () -> Unit) {", "body": "<EOL><INDENT><INDENT>Runnable(job)<EOL><INDENT><INDENT>Runnable(job)<EOL><INDENT><INDENT>Runnable(job)<EOL><INDENT>}"}
{"signature": "var isRestored =", "body": "false<EOL>"}
{"signature": "if (reifiedTypeParameters.wereUsedReifiedParameters()) {", "body": "<EOL><INDENT><INDENT><INDENT>putNeedClassReificationMarker(mv)<EOL><INDENT><INDENT><INDENT>propagateChildReifiedTypeParametersUsages(reifiedTypeParameters)<EOL><INDENT><INDENT>}"}
{"signature": "import <!UNRESOLVED_REFERENCE!>p<!>.", "body": "*<EOL>"}
{"signature": "val remotelyMutedTests =", "body": "RemotelyMutedTests()<EOL>"}
{"signature": "val metaGroup =", "body": "ThreadSafeCache<TestCaseGroupId.TestDataDir, TestCaseGroup.MetaGroup?>()<EOL>"}
{"signature": "fun rangeFirst(charCode: Int, categoryId: String) {", "body": "<EOL><INDENT><INDENT>append(charCode, categoryId)<EOL><INDENT>}"}
{"signature": "if (iCanonicalClass == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptInSourceRootWarning =", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL>"}
{"signature": "val allMultifileClassPartMetadataCheckers =", "body": "listOf(<EOL>"}
{"signature": "fun testSuspendPlain() {", "body": "useSuspend(::foo<NUM_LIT>) }"}
{"signature": "if (foo.bar?.buz != null) {", "body": "<INDENT><INDENT>// Here we have unstable smart-cast on foo.bar?.buz<INDENT><INDENT>takesNullable(foo.bar?.buz) // OK<INDENT><INDENT>takesNonNull(<!ARGUMENT_TYPE_MISMATCH!>foo.bar?.buz<!>) // NOT OK<INDENT>}"}
{"signature": "fun visitLoop(loop: FirLoop, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLoop(loop)<EOL><INDENT>}"}
{"signature": "if (matchResult == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw NumberFormatException()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (old.hasContract()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.contract, new.contract)) return false<EOL><INDENT><INDENT>}"}
{"signature": "var SyllIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val accessorFunction =", "body": "JsFunction(context.scope(), JsBlock(), <STR_LIT>)<EOL>"}
{"signature": "val irContainsCall =", "body": "generateCall(containsCall, expression, irOperator)<EOL>"}
{"signature": "if (needCalculatingLazyBodyForProperty(property)) {", "body": "<EOL><INDENT><INDENT><INDENT>val designation = FirDesignation(data, property)<EOL><INDENT><INDENT><INDENT>calculateLazyBodyForProperty(designation)<EOL><INDENT><INDENT>}"}
{"signature": "var obj<NUM_LIT>Init =", "body": "false<EOL>"}
{"signature": "val actualTransformed =", "body": "<EOL><INDENT><INDENT><INDENT>transform(source, extra, validator, dumpTree, truncateTracingInfoMode, additionalPaths)<EOL>"}
{"signature": "if (subjectValue.isStable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newTypeInfoBuilder?.put(subjectValue, targetType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val endExpression =", "body": "rangeCall.getReceiverExpression() ?: return null<EOL>"}
{"signature": "import<INDENT>() : import<EOL>.", "body": ""}
{"signature": "val runnerFileName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (l < r) {", "body": "<EOL><INDENT><INDENT>val q = partition(l, r)<EOL><INDENT><INDENT>quickSort(l, q - <NUM_LIT>)<EOL><INDENT><INDENT>quickSort(q + <NUM_LIT>, r)<EOL><INDENT>}"}
{"signature": "val shortSet =", "body": "HashSet<Short>()<EOL>"}
{"signature": "val goldenCopy =", "body": "NonEmptyEnum.values().toList()<EOL>"}
{"signature": "if (containingClass != null && c.configuration.useFirBasedFakeOverrideGenerator) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@OptIn(FirBasedFakeOverrideGenerator::class)<EOL><INDENT><INDENT><INDENT><INDENT>this.overriddenSymbols = property.generateOverriddenAccessorSymbols(containingClass, isGetter, c)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setInProjectedTypeVariable(value: ITV) {", "body": "buildee.setTypeVariable(value) }"}
{"signature": "val depth<NUM_LIT> =", "body": "mutableListOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (statement is KtConstructorDelegationReferenceExpression && statement.textLength == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT>// PsiElement for constructor delegation reference is always generated, so we shouldn't mark it's line number if it's empty<INDENT><INDENT><INDENT>return null<INDENT><INDENT>}"}
{"signature": "var resultingDataFlowInfo =", "body": "DataFlowInfoFactory.EMPTY<EOL>"}
{"signature": "val dn =", "body": "Double.NaN<EOL>"}
{"signature": "if (strict) {", "body": "<EOL><INDENT><INDENT>PsiTreeUtil.getParentOfType(this, *callExpressionTypes)<EOL><INDENT>}"}
{"signature": "val overwriteReachableNodes =", "body": "java.lang.Boolean.getBoolean(overwriteReachableNodesProperty)<EOL>"}
{"signature": "if ((access and Opcodes.ACC_ABSTRACT) != <NUM_LIT> && methodNode.localVariables == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>methodNode.localVariables = mutableListOf<LocalVariableNode>()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nodejsConfiguredHandlers =", "body": "mutableListOf<KotlinJsNodeDsl.() -> Unit>()<EOL>"}
{"signature": "val stubbedClasses =", "body": "mutableMapOf<ClassDescriptor, IrClassSymbol>()<EOL>"}
{"signature": "fun setSize(p<NUM_LIT>: String?) {", "body": "}"}
{"signature": "val baseExpression =", "body": "expression.baseExpression<EOL>"}
{"signature": "val thisChars =", "body": "this.chars<EOL>"}
{"signature": "val leaveVariableTasks =", "body": "arrayListOf<Runnable>()<EOL>"}
{"signature": "val initializedFilesAtLoopsContinues =", "body": "mutableMapOf<IrLoop, BitSet>()<EOL>"}
{"signature": "val SPARSE_SWITCH_CASES =", "body": "intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>,<EOL>"}
{"signature": "if (maybeDecoy.isDecoy()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>maybeDecoy.getComposableForDecoy() as IrSimpleFunctionSymbol<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val subsetInputTargets =", "body": "inputTargets<EOL>"}
{"signature": "val variantNamePublishedSuffix =", "body": "if (isPublishedLibrary) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun testComparison() {", "body": "<EOL><INDENT><INDENT>assertTrue(mv(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) > mv(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(mv(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) < mv(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(mv(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) < mv(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>))<EOL><INDENT>}"}
{"signature": "for (unboxedType in value.unboxedTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val opcode = unboxedType.getOpcode(if (isStore) Opcodes.ISTORE else Opcodes.ILOAD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val newIndex = (insn as VarInsnNode).`var` + offset<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newInstructions.add(VarInsnNode(opcode, newIndex))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>offset += unboxedType.size<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasExtension(JvmProtoBuf.constructorSignature)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JvmProtoBuf.constructorSignature).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "fun testLegacyAssert() {", "body": "<EOL><INDENT><INDENT>kotlincInProcess(<STR_LIT>, <STR_LIT>, <STR_LIT>, tmpdir.path)<EOL><EOL><INDENT><INDENT>runProcess(<STR_LIT>, <STR_LIT>, <STR_LIT>, workDirectory = tmpdir)<EOL><EOL><INDENT><INDENT>kotlincInProcess(<STR_LIT>, <STR_LIT>, <STR_LIT>, tmpdir.path)<EOL><EOL><INDENT><INDENT>runProcess(<STR_LIT>, <STR_LIT>, <STR_LIT>, workDirectory = tmpdir)<EOL><INDENT>}"}
{"signature": "val customMessages =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "import is `import aaa.", "body": "bbb.ccc.D`, the compiler tries to resolve the package `aaa.bbb.ccc` first.<EOL>"}
{"signature": "val decoyTargetName =", "body": "annotation.getValueArgument(<NUM_LIT>) as IrConst<String><EOL>"}
{"signature": "if (typeParameterProtos.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>emptyMap()<EOL><INDENT><INDENT>}"}
{"signature": "val childProperty =", "body": "child.irProperty<EOL>"}
{"signature": "when (jdkKind) {", "body": "<EOL><INDENT><INDENT><INDENT>TestJdkKind.MOCK_JDK -> KtTestUtil.findMockJdkRtJar()<EOL><INDENT><INDENT><INDENT>TestJdkKind.MODIFIED_MOCK_JDK -> KtTestUtil.findMockJdkRtModified()<EOL><INDENT><INDENT><INDENT>TestJdkKind.ANDROID_API -> KtTestUtil.findAndroidApiJar()<EOL><INDENT><INDENT><INDENT>TestJdkKind.FULL_JDK_<NUM_LIT> -> null<EOL><INDENT><INDENT><INDENT>TestJdkKind.FULL_JDK_<NUM_LIT> -> null<EOL><INDENT><INDENT><INDENT>TestJdkKind.FULL_JDK_<NUM_LIT> -> null<EOL><INDENT><INDENT><INDENT>TestJdkKind.FULL_JDK_<NUM_LIT> -> null<EOL><INDENT><INDENT><INDENT>TestJdkKind.FULL_JDK -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (newInferenceEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>TypeUtils.getPrimitiveNumberType(typeConstructor as IntegerLiteralTypeConstructor, expectedType)<EOL><INDENT><INDENT>}"}
{"signature": "val dsymutil =", "body": "<STR_LIT><EOL>"}
{"signature": "val previousCurrentDeclaration =", "body": "currentDeclaration<EOL>"}
{"signature": "fun applyHierarchyTemplate(template: KotlinHierarchyTemplate, extension: KotlinHierarchyBuilder.Root.() -> Unit) {", "body": "<EOL><INDENT><INDENT>hierarchy.applyHierarchyTemplate(template, extension)<EOL><INDENT>}"}
{"signature": "if (nameFilter(shortName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.addIfNotNull(getPackage(shortName))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (getterDeprecations.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return DeprecationInfo(getterDeprecations, hasInheritedDeprecations = false)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitTypeProjectionWithVariance(typeProjectionWithVariance: FirTypeProjectionWithVariance, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeProjectionWithVariance(typeProjectionWithVariance)<EOL><INDENT>}"}
{"signature": "val arg<NUM_LIT> =", "body": "expr.arg<NUM_LIT><EOL>"}
{"signature": "var hasQuestionMarkAtLHS =", "body": "false<EOL>"}
{"signature": "fun visitResolvedTypeRef(resolvedTypeRef: FirResolvedTypeRef, data: Options) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Visit annotations on type arguments<INDENT><INDENT><INDENT><INDENT>resolvedTypeRef.delegatedTypeRef?.accept(this, data)<INDENT><INDENT><INDENT><INDENT>return super.visitResolvedTypeRef(resolvedTypeRef, data)<INDENT><INDENT><INDENT>}"}
{"signature": "val MESSAGE_FOR_YIELD_BEFORE_LAMBDA =", "body": "<STR_LIT><EOL>"}
{"signature": "val delegatingAnyCall =", "body": "IrDelegatingConstructorCallImpl(<EOL>"}
{"signature": "val proxy =", "body": "TestProxy(Integer.valueOf(BOX_IN_SEPARATE_PROCESS_PORT), clazz.canonicalName, classPath)<EOL>"}
{"signature": "val refArrStatic =", "body": "arrayOfNulls<String?>(<NUM_LIT>)<EOL>"}
{"signature": "for (parameter in function.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>call.putValueArgument(parameter.index, irGet(parameter))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val castInsnsListener =", "body": "MethodNode(Opcodes.API_VERSION)<EOL>"}
{"signature": "val dependencyOnBuiltIns =", "body": "module.dependencyOnBuiltIns()<EOL>"}
{"signature": "if (property.optional) {", "body": "<INDENT><INDENT><INDENT><INDENT>// if (seen)<INDENT><INDENT><INDENT><INDENT>//<INDENT>set<INDENT><INDENT><INDENT><INDENT>ificmpeq(nextLabel)<INDENT><INDENT><INDENT>}"}
{"signature": "if (f(<NUM_LIT>) != 2<NUM_LIT>1) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val ktExpressionToExtractResolvedCall =", "body": "<EOL><INDENT><INDENT>if (ktExpression is KtCallableReferenceExpression) ktExpression.callableReference else ktExpression<EOL>"}
{"signature": "val emptyMatchBeforeT =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "if (isVar) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>setter = FirDefaultPropertySetter(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source = null, session.moduleData, key.origin, returnTypeRef, setterVisibility ?: status.visibility,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>symbol, Modality.FINAL, resolvedStatus.effectiveVisibility,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resolvePhase = FirResolvePhase.BODY_RESOLVE,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (el in (a as Array<Int>)) {", "body": "<EOL><INDENT><INDENT>sum = sum + el<EOL><INDENT>}"}
{"signature": "when (subjectDescriptor!!.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ClassKind.CLASS -> WhenMissingCase.ConditionTypeIsExpect.SealedClass<EOL><INDENT><INDENT><INDENT><INDENT>ClassKind.INTERFACE -> WhenMissingCase.ConditionTypeIsExpect.SealedInterface<EOL><INDENT><INDENT><INDENT><INDENT>ClassKind.ENUM_CLASS -> WhenMissingCase.ConditionTypeIsExpect.Enum<EOL><INDENT><INDENT><INDENT><INDENT>else -> WhenMissingCase.Unknown<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val METHOD_INDEX_FOR_GETTER =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (@Volatile x in z) {", "body": "}"}
{"signature": "for (declaration in topLevelDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tasks.addLast(Task(startingChunks, declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (targetFunction.origin == IrDeclarationOrigin.FUNCTION_FOR_DEFAULT_PARAMETER) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "import AAA.", "body": "BBB<EOL>"}
{"signature": "fun foo<NUM_LIT>(<EOL><INDENT>vararg p<NUM_LIT>: Int,<EOL><INDENT>p<NUM_LIT>: String,<EOL><INDENT>p<NUM_LIT>: Double<EOL>) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(<EOL><INDENT>p<NUM_LIT>: Int,<EOL><INDENT>vararg p<NUM_LIT>: String,<EOL><INDENT>p<NUM_LIT>: Double<EOL>) {}"}
{"signature": "fun reportElement(element: FirDeclaration, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>reporter.reportOn(element.source, FirErrors.REDUNDANT_VISIBILITY_MODIFIER, context)<EOL><INDENT>}"}
{"signature": "if (root!!.set(x, y, z, value, depth - <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>root = Node.Leaf(value)<EOL><INDENT><INDENT>}"}
{"signature": "fun testDerivedWithoutKeyOverridesDerived() {", "body": "<EOL><INDENT><INDENT>val context = DerivedWithKey() + DerivedWithoutKey()<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, context.size)<EOL><INDENT><INDENT>assertTrue(context[Base] is DerivedWithoutKey)<EOL><INDENT><INDENT>assertNull(context[DerivedWithKey])<EOL><INDENT><INDENT>assertEquals(EmptyCoroutineContext, context.minusKey(Base))<EOL><INDENT><INDENT>assertSame(context, context.minusKey(DerivedWithKey))<EOL><INDENT>}"}
{"signature": "fun canCreateALazySchemeWithAnonymousParameters() {", "body": "<EOL><INDENT><INDENT>val scheme = schemeOf(<STR_LIT>)<EOL><INDENT><INDENT>val lazyScheme = LazyScheme(scheme)<EOL><INDENT><INDENT>val schemeCopy = lazyScheme.toScheme()<EOL><INDENT><INDENT>assertEquals(scheme, schemeCopy)<EOL><INDENT>}"}
{"signature": "val isScript =", "body": "dataStream.readBoolean()<EOL>"}
{"signature": "if (declaration.resolvedIsAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>samCandidateNames.add(declaration.name)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun endGcMetric(name: String, value: GcMetric) {", "body": "<EOL><INDENT>}"}
{"signature": "for (defaultParam in defaultParams) {", "body": "<EOL><INDENT><INDENT>val paramName = defaultParam.name<EOL><INDENT><INDENT>val freshName = JsScope.declareTemporaryName(paramName.ident)<EOL><INDENT><INDENT>freshName.copyMetadataFrom(paramName)<EOL><INDENT><INDENT>context.newVar(freshName, source = source)<EOL><EOL><INDENT><INDENT>context.replaceName(paramName, freshName.makeRef())<EOL><INDENT>}"}
{"signature": "fun setMethodImplForUint<NUM_LIT>Array(obj: Uint<NUM_LIT>Array, index: Int, value: Short) {", "body": "js(<STR_LIT>) }"}
{"signature": "fun writeBoolean(boolean: Boolean) {", "body": "<EOL><INDENT><INDENT>output.writeBoolean(boolean)<EOL><INDENT>}"}
{"signature": "val jvmPlatform =", "body": "JvmPlatforms.jvmPlatformByTargetVersion(jvmTarget)<EOL>"}
{"signature": "val targetId =", "body": "TargetId(<EOL>"}
{"signature": "if (%dirty and <NUM_LIT>b1<NUM_LIT>11 != <NUM_LIT>b1<NUM_LIT>1<NUM_LIT> || !$composer.skipping) {", "body": "<EOL> *<INDENT><INDENT>f(x)<EOL> *<INDENT>  }"}
{"signature": "fun consume(i: Int) {", "body": "}<EOL>fun consume(c: Char) {}"}
{"signature": "if (getter.isImplicitDelegateAccessor()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun createValueParameterList() {", "body": "<EOL><INDENT><INDENT>typeStubBuilder.createValueParameterListStub(callableStub, constructorProto, constructorProto.valueParameterList, protoContainer)<EOL><INDENT>}"}
{"signature": "val embeddedDependencies =", "body": "project.configurations.findByName(EMBEDDED_CONFIGURATION_NAME)<EOL>"}
{"signature": "val shouldEncodeFunc =", "body": "ctx.referenceMethod(kOutputClass, CallingConventions.shouldEncodeDefault)<EOL>"}
{"signature": "val resolvedComponents =", "body": "resolvableConfiguration.incoming.resolutionResult.allComponents<EOL>"}
{"signature": "when (state.irTypeParameter.variance) {", "body": "<EOL><INDENT><INDENT><INDENT>Variance.INVARIANT -> KVariance.INVARIANT<EOL><INDENT><INDENT><INDENT>Variance.IN_VARIANCE -> KVariance.IN<EOL><INDENT><INDENT><INDENT>Variance.OUT_VARIANCE -> KVariance.OUT<EOL><INDENT><INDENT>}"}
{"signature": "val exactName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun test(i: Int?, a: Any, l: List<Int>) {", "body": "<EOL><INDENT>l.contains<NUM_LIT>(<!TYPE_MISMATCH!>a<!>)<EOL><INDENT>l.contains<NUM_LIT>(<!TYPE_MISMATCH!><STR_LIT><!>)<EOL><INDENT>l.contains<NUM_LIT>(<!TYPE_MISMATCH!>i<!>)<EOL>}"}
{"signature": "fun block() {", "body": "<EOL><INDENT><!DEPRECATION!>Obsolete<!>()<EOL><INDENT><!DEPRECATION!>Obsolete<!>(<NUM_LIT>)<EOL>}"}
{"signature": "for (x in <NUM_LIT> until <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>result += x<EOL><INDENT>}"}
{"signature": "fun testMissingBooleanField() {", "body": "<EOL><INDENT><INDENT><!SUPER_CANT_BE_EXTENSION_RECEIVER!>super<!>.isMissingBooleanField<EOL><INDENT>}"}
{"signature": "package name ends and class names begin.", "body": "<EOL>"}
{"signature": "val irPropertyType =", "body": "propertyDescriptor.type.toIrType()<EOL>"}
{"signature": "val jsTranslatorEsModulesExcludedDirs =", "body": "listOf(<EOL>"}
{"signature": "val superSubstitutor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(superType as? ConeLookupTagBasedType)?.let { createSubstitutionForSupertype(it, session) } ?: ConeSubstitutor.Empty<EOL>"}
{"signature": "val testInterfaceCompanionObjectVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (platformNN != null) {", "body": "<EOL><INDENT><INDENT>platformNN<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!><EOL><INDENT>}"}
{"signature": "var shouldExecute =", "body": "irOrOr(<EOL>"}
{"signature": "when (propertyKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>AbiPropertyKind.VAL -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>AbiPropertyKind.CONST_VAL -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>AbiPropertyKind.VAR -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val tokens =", "body": "tokenizeIdentityString(identityString)<EOL>"}
{"signature": "val loopInitStatements =", "body": "nestedLoopHeader.loopInitStatements.let { if (ownsIndexVariable) it + indexVariable else it }<EOL>"}
{"signature": "if (instruction.owner != pseudocode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@traverse<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (checkNotNullCall.calleeReference is FirResolvedNamedReference && checkNotNullCall.isResolved) {", "body": "<EOL><INDENT><INDENT><INDENT>return checkNotNullCall<EOL><INDENT><INDENT>}"}
{"signature": "val simplifiedFunction =", "body": "<EOL><INDENT><INDENT><INDENT>transformingFunction.transform(finallyBlockTransformer, null).transform(returnableBlockTransformer, null) as IrFunction<EOL>"}
{"signature": "val parentVar =", "body": "extractIndex(parent.origin)<EOL>"}
{"signature": "package zzz<EOL>.", "body": ""}
{"signature": "var bodyDependent =", "body": "ctor + <NUM_LIT><EOL>"}
{"signature": "if (!followLinks) {", "body": "<INDENT><INDENT><INDENT><INDENT>srcLink.copyToRecursively(dstLink, followLinks = followLinks, overwrite = true) // same file<INDENT><INDENT><INDENT>}"}
{"signature": "val implicitReceiver<NUM_LIT> =", "body": "<NUM_LIT>.0f<EOL>"}
{"signature": "val argument<NUM_LIT> =", "body": "Double.fromBits(x.second.toLong())<EOL>"}
{"signature": "val definingSymbol =", "body": "fullyExpandedType.symbol.getContainingSymbol()<EOL>"}
{"signature": "for(i in <NUM_LIT>.annotationCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getAnnotation(i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "for (p in to until size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(prev[p], array[p])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import<EOL><EOL>import foo.", "body": "<EOL>"}
{"signature": "if (config.timePasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>LLVMPrintAllTimersToStdOut()<EOL><INDENT><INDENT><INDENT><INDENT>LLVMClearAllTimers()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val containingVirtualFile =", "body": "psiElement.containingFile.virtualFile<EOL>"}
{"signature": "if (old.hasDesc()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkStringEquals(old.desc, new.desc)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val expectedManifest =", "body": "rootDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (global != null) {", "body": "<EOL><INDENT><INDENT>request.globalSettingsFile = File(global)<EOL><INDENT>}"}
{"signature": "var baf =", "body": "<NUM_LIT><EOL>"}
{"signature": "val exitValue =", "body": "process.waitFor()<EOL>"}
{"signature": "val resourcesToExclude =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "val jc =", "body": "JavaClass()<EOL>"}
{"signature": "val loggingCounter =", "body": "LoggingCounter()<EOL>"}
{"signature": "val signedResult =", "body": "nextLong(signedFrom, signedUntil) xor Long.MIN_VALUE<EOL>"}
{"signature": "var functionCallExpected =", "body": "false<EOL>"}
{"signature": "if (null == foo(null)) {", "body": "}"}
{"signature": "for ((variable, fixationDirection) in fixationDirectionsForVariables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!hasProperConstraint(variable, fixationDirection))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lambdaBody =", "body": "argument.anonymousFunction.body<EOL>"}
{"signature": "if (a == null || b == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return a == null && b == null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(a: Any) {", "body": "<EOL><INDENT>a as <!WRONG_ANNOTATION_TARGET!>@Ann<!> Int<EOL>}"}
{"signature": "val newImportPath =", "body": "ImportPath(<EOL>"}
{"signature": "val commonClasses =", "body": "Sets.intersection(classesFromK<NUM_LIT>keys, classesFromK<NUM_LIT>keys)<EOL>"}
{"signature": "fun implicitRef() {", "body": "<EOL><INDENT>A.x.hashCode()<EOL>}"}
{"signature": "val INIT_THREAD_LOCAL_GLOBALS =", "body": "<NUM_LIT><EOL>"}
{"signature": "val typeCommonizer =", "body": "TypeCommonizer(classifiers, settings)<EOL>"}
{"signature": "val LEFT_T =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testSafeMemberIncrementDecrement(d: dynamic) {", "body": "<EOL><INDENT>val t<NUM_LIT> = ++d?.prefixIncr<EOL><INDENT>val t<NUM_LIT> = --d?.prefixDecr<EOL><INDENT>val t<NUM_LIT> = d?.postfixIncr++<EOL><INDENT>val t<NUM_LIT> = d?.postfixDecr--<EOL>}"}
{"signature": "val extTestSupportModule =", "body": "filesAndModules.modules[SUPPORT_MODULE_NAME] ?: return null<EOL>"}
{"signature": "val elementData =", "body": "HashMap<IrValueDeclaration, Variable>()<EOL>"}
{"signature": "val toByte =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.toByte()<!><EOL>"}
{"signature": "val hashCodeSymbol =", "body": "file.getClassOrFail(<STR_LIT>).getFunctionOrFail(<STR_LIT>)<EOL>"}
{"signature": "if (y !== Unit) {", "body": "<EOL><INDENT><INDENT>throw Error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val platformComponentsStorage =", "body": "platformFirOutput.createFir<NUM_LIT>IrComponentsStorage()<EOL>"}
{"signature": "val stripped =", "body": "if (endsWithStar) trimmed.substring(<NUM_LIT>, trimmed.length - <NUM_LIT>) else trimmed<EOL>"}
{"signature": "package OpenInheritedMethodClashedWithChildOverload<EOL>.", "body": ""}
{"signature": "val tracingForInvoke =", "body": "TracingStrategyForInvoke(calleeExpression, functionCall, variableReceiver.type)<EOL>"}
{"signature": "val binaryLeft =", "body": "binary.left<EOL>"}
{"signature": "for (timeUnit in TimeUnit.entries) {", "body": "<EOL><INDENT><INDENT><INDENT>val unit = timeUnit.toDurationUnit()<EOL><INDENT><INDENT><INDENT>assertEquals(timeUnit.name, unit.name)<EOL><INDENT><INDENT><INDENT>assertEquals(timeUnit, unit.toTimeUnit())<EOL><INDENT><INDENT>}"}
{"signature": "val notAnalyzedArguments =", "body": "arrayListOf<PostponedResolvedAtom>()<EOL>"}
{"signature": "val comparisonType =", "body": "comparisonInfo.comparisonType<EOL>"}
{"signature": "val legacyDeps =", "body": "delegate.resolve(<EOL>"}
{"signature": "val typeParameterConeType =", "body": "toConeType()<EOL>"}
{"signature": "val SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "val ThreadSanitizerPhase =", "body": "optimizationPipelinePass(<EOL>"}
{"signature": "if (containerClassId != null && isBuiltinFunctionClass(containerClassId)) {", "body": "<EOL><INDENT><INDENT><INDENT>createSynthesizedFunctionWithFirstParameterAsReceiver(invoke)<EOL><INDENT><INDENT>}"}
{"signature": "val CASE_INSENSITIVE =", "body": "<NUM_LIT> shl <NUM_LIT><EOL>"}
{"signature": "val intRangeToFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val compareTo =", "body": "<NUM_LIT><EOL>"}
{"signature": "var charIndex =", "body": "startIndex<EOL>"}
{"signature": "val annotationAndConstantLoader =", "body": "AnnotationAndConstantLoaderImpl(<EOL>"}
{"signature": "val srcArray =", "body": "src.reinterpret<ByteVar>().ptr<EOL>"}
{"signature": "if (mode == KotlinJsBinaryMode.PRODUCTION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assembleTaskProvider.dependsOn(distributionTask)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitInnerClassType(name: String) {", "body": "<EOL><INDENT><INDENT>push(InnerClass, name = name, parent = ClassType)<EOL><INDENT>}"}
{"signature": "val gaps =", "body": "length - size<EOL>"}
{"signature": "val lazySchemeStorage =", "body": "lazySchemeStorage()<EOL>"}
{"signature": "fun suspended() {", "body": "<EOL><INDENT>dummy()<EOL><INDENT>suspendHere()<EOL>}"}
{"signature": "val fileCollectionDependencies =", "body": "mutableSetOf<FileCollectionExternalGradleDependency>()<EOL>"}
{"signature": "fun testBoundReceiverLocalVar() {", "body": "<EOL><INDENT><INDENT>var h = Host()<EOL><INDENT><INDENT>use(h::withVararg)<EOL><INDENT>}"}
{"signature": "val parentInternalName =", "body": "computeClassInternalName(parent)<EOL>"}
{"signature": "val jvmNameEntry =", "body": "JvmFileClassUtil.findAnnotationEntryOnFileNoResolve(file, JVM_NAME_SHORT)<EOL>"}
{"signature": "var depth =", "body": "<NUM_LIT><EOL>"}
{"signature": "val constrainingType =", "body": "newBound.constrainingType<EOL>"}
{"signature": "val unsignedArray =", "body": "primitiveArray.toPrimitiveStateArray(storageProperty.backingField!!.type)<EOL>"}
{"signature": "val builtInsPlatform =", "body": "libraryManifest.platform?.let(BuiltInsPlatform::parseFromString)<EOL>"}
{"signature": "fun addNonLocalTowerDataElement(element: FirTowerDataElement) {", "body": "<EOL><INDENT><INDENT>replaceTowerDataContext(towerDataContext.addNonLocalTowerDataElements(listOf(element)))<EOL><INDENT>}"}
{"signature": "package directive in tests might be rewritten to pass the test.", "body": "<EOL>"}
{"signature": "val timeStatisticsFile =", "body": "outputDirectory.resolve(<STR_LIT>)<EOL>"}
{"signature": "val valueUsages =", "body": "hashMapOf<PseudoValue, MutableList<Instruction>>()<EOL>"}
{"signature": "import objcExceptionMode.", "body": "*<EOL>"}
{"signature": "if (element is FirRegularClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>path.removeLast()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val cursorWithinElement =", "body": "cursor - element.startOffset<EOL>"}
{"signature": "val intrinsicConstClass =", "body": "createIntrinsicConstEvaluationClass()<EOL>"}
{"signature": "val thisI =", "body": "<NUM_LIT><EOL>"}
{"signature": "val platformDependentAnnotation =", "body": "ClassId.fromString(<STR_LIT>)<EOL>"}
{"signature": "var HYP =", "body": "sqrt(<NUM_LIT>)<EOL>"}
{"signature": "if (e instanceof NullPointerException) {", "body": "<EOL><INDENT> *<INDENT><INDENT>  ...<EOL><INDENT> *<INDENT>  }"}
{"signature": "if (this is TypeAliasDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.addAll(expandedType.loadOptIns(context, languageVersionSettings, visited))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val I<NUM_LIT>_GET_S =", "body": "<STR_LIT><EOL>"}
{"signature": "fun loadUnboundSymbols() {", "body": "<EOL><INDENT><INDENT>signatureProvidersImpl.clear()<EOL><INDENT><INDENT>ExternalDependenciesGenerator(linker.symbolTable, listOf(linker)).generateUnboundSymbolsAsDependencies()<EOL><INDENT><INDENT>linker.postProcess(inOrAfterLinkageStep = true)<EOL><INDENT><INDENT>linker.checkNoUnboundSymbols(linker.symbolTable, <STR_LIT>)<EOL><INDENT><INDENT>linker.clear()<EOL><INDENT>}"}
{"signature": "val elementsBuilder =", "body": "FirElementBuilder(this)<EOL>"}
{"signature": "fun test(s: Double) {", "body": "<EOL><EOL>}"}
{"signature": "val typeParametersToArguments =", "body": "HashMap<IrTypeParameterSymbol, IrTypeArgument>(typeParameters.size)<EOL>"}
{"signature": "val recursiveGenericTypeParameter =", "body": "RecursiveGeneric::class.typeParameters.single()<EOL>"}
{"signature": "if (containsAnyClassKind(candidateGroup)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!allowClassTypes) return@forEach<EOL><INDENT><INDENT><INDENT><INDENT>allowClassTypes = false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (companion) {", "body": "}"}
{"signature": "val aDescriptor =", "body": "a.resultingDescriptor<EOL>"}
{"signature": "when (proto.hasExtension(JvmProtoBuf.isRaw)) {", "body": "<EOL><INDENT><INDENT><INDENT>true -> ConeRawType.create(lowerBound, upperBound)<EOL><INDENT><INDENT><INDENT>false -> ConeFlexibleType(lowerBound, upperBound)<EOL><INDENT><INDENT>}"}
{"signature": "val ctxt =", "body": "VariableUseContext(instruction, reportedDiagnosticMap)<EOL>"}
{"signature": "fun bar<NUM_LIT>(b: B<in Any>, i: Inv<*>) {", "body": "<EOL><INDENT>b.foo(<!TYPE_MISMATCH!>i<!>)<EOL>}"}
{"signature": "val qualifiedCallValue =", "body": "evaluate(selectorExpression, expectedType)<EOL>"}
{"signature": "fun privateAccess() {", "body": "<EOL><INDENT><INDENT>listOf(x.x.x)<EOL><INDENT><INDENT>listOf(x.x)<EOL><INDENT><INDENT>listOf(x)<EOL><INDENT>}"}
{"signature": "if (annotatedElement is KtNamedFunction && annotatedElement.modifierList?.hasSuspendModifier() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>return@lazyPub Nullable::class.java.name<EOL><INDENT><INDENT>}"}
{"signature": "if (!isValueParameterTypeNotLessSpecific(specific, general, callbacks, specificityComparator) {", "body": "it?.resultType }"}
{"signature": "val willBeScript =", "body": "name.endsWith(KotlinParserDefinition.STD_SCRIPT_EXT)<EOL>"}
{"signature": "var size_local =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (containingDescriptor !is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val containingClass = getParentOfType(containingDescriptor, ClassDescriptor::class.java, false)<EOL><INDENT><INDENT><INDENT>if (containingClass == container) return false<EOL><INDENT><INDENT>}"}
{"signature": "else if (method.returnType != null && method.returnType != PsiType.VOID) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println(<STR_LIT>, defaultValue(method.returnType!!), <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (beforeOrAfter) {", "body": "<EOL><INDENT><INDENT><INDENT>BeforeOrAfter.BEFORE -> config.shouldDumpStateBefore(phase)<EOL><INDENT><INDENT><INDENT>BeforeOrAfter.AFTER -> config.shouldDumpStateAfter(phase)<EOL><INDENT><INDENT>}"}
{"signature": "var byteBufferStartIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (colorsShouldBeEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun another() {", "body": "}fun foo(x: My?) {<INDENT>// Both elvis parts should be alive<INDENT>// See also KT<NUM_LIT>, KT<NUM_LIT><INDENT>x?.other() ?: another()}"}
{"signature": "var hasImportErrors =", "body": "false<EOL>"}
{"signature": "val smartCastInfo =", "body": "expression.getSmartCastInfo()<EOL>"}
{"signature": "val correspondingVariable =", "body": "expression.symbol.owner as? IrVariable<EOL>"}
{"signature": "val mainSourceSet =", "body": "sourceSets.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "for (i in Short.MIN_VALUE..Short.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT>acc += areSame(i, i).oneIfTrueElseZero()<EOL><INDENT>}"}
{"signature": "if (parameter.type.needsMultiFieldValueClassFlattening) {", "body": "<EOL><INDENT><INDENT><INDENT>val type = (parameter.type as KTypeImpl).type.asSimpleType()<EOL><INDENT><INDENT><INDENT>getMfvcUnboxMethods(type)!!.size<EOL><INDENT><INDENT>}"}
{"signature": "val hostSpecificMetadataJar =", "body": "producer.projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun from(vararg a : Any){", "body": "}<EOL><INDENT>fun from(vararg a : String){}"}
{"signature": "if (forkPointsData == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>forkPointsData = SmartList()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val TRACE_EVENT_START =", "body": "<STR_LIT><EOL>"}
{"signature": "val min =", "body": "<NUM_LIT>UL.toString()<EOL>"}
{"signature": "fun run(block: (T) -> Unit) {", "body": "<EOL><INDENT><INDENT>block(value)<EOL><INDENT>}"}
{"signature": "val markerFile =", "body": "File(snapshotsDir.get().asFile, index.asNotExistsMarkerFile)<EOL>"}
{"signature": "val declarationToCheck =", "body": "targetTypeRef.toRegularClassSymbol(context.session) ?: return<EOL>"}
{"signature": "fun addCommonSourceSetToPlatformSourceSet(commonSourceSet: Named, platformProject: Project) {", "body": "<EOL><INDENT><INDENT>val androidExtension = platformProject.extensions.getByName(<STR_LIT>) as BaseExtension<EOL><INDENT><INDENT>val androidSourceSet = androidExtension.sourceSets.findByName(commonSourceSet.name) ?: return<EOL><INDENT><INDENT>val kotlinSourceSet = androidSourceSet.getExtension<SourceDirectorySet>(KOTLIN_DSL_NAME)<EOL><INDENT><INDENT><INDENT>?: return<EOL><INDENT><INDENT>kotlinSourceSet.source(getKotlinSourceDirectorySetSafe(commonSourceSet)!!)<EOL><INDENT>}"}
{"signature": "var arrayIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val extraOpts =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "if ((fileName.endsWith(<STR_LIT>) || fileName.endsWith(<STR_LIT>)) && kotlinSourceRoot != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>writeSourceFile(fileName, text, kotlinSourceRoot!!)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!check()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>log(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>break@regularLoop<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val propPrivate =", "body": "A()<EOL>"}
{"signature": "if (o >= o) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (hasVersion()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + version<EOL><INDENT>}"}
{"signature": "if (other.isNegative()) {", "body": "<EOL><INDENT><INDENT>return div(other.negate()).negate()<EOL><INDENT>}"}
{"signature": "val commands =", "body": "Commands()<EOL>"}
{"signature": "if (incorrectTransient != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val elementToReport = incorrectTransient.source.getPsi() ?: prop.descriptor.findPsi() ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(SerializationErrors.INCORRECT_TRANSIENT.on(elementToReport))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(y: MyClass?) {", "body": "<INDENT>y?.x!!.length<INDENT>// !! is NOT necessary here, because y?.x != null<INDENT>y<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>.x}"}
{"signature": "if (temp is <!IS_ENUM_ENTRY!>Color.RED<!>) {", "body": "<EOL><INDENT><INDENT>return temp as Color.<!ENUM_ENTRY_AS_TYPE!>RED<!><EOL><INDENT>}"}
{"signature": "fun anotherComposable() {", "body": "}"}
{"signature": "val descriptorToIrParametersMap =", "body": "typeParameters.map { it.descriptor to it }.toMap()<EOL>"}
{"signature": "if (!simpleGeneral.isPrimitiveType() || !flexibility.lowerBound().isPrimitiveType()) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (symbol.getKind() == ElementKind.ANNOTATION_TYPE) {", "body": "<EOL><INDENT><INDENT><INDENT>sourceStructure.addMentionedAnnotations(qualifiedName)<EOL><INDENT><INDENT>}"}
{"signature": "fun testSimple(fn: () -> Unit) {", "body": "<EOL><INDENT>useSuspend(fn)<EOL>}"}
{"signature": "fun processResolvedQualifier(resolvedQualifier: FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val wholeQualifier = TypeQualifier.createFor(resolvedQualifier) ?: return<EOL><EOL><INDENT><INDENT><INDENT><INDENT>processTypeQualifier(wholeQualifier)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitProperty(element: PropertyStub, data: Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>element.annotations.addExperimentalIfNecessary()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nodejs =", "body": "the<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension>()<EOL>"}
{"signature": "val THREAD_STATE_CHECKER_NAMES =", "body": "ThreadStateChecker.entries.map { it.name }<EOL>"}
{"signature": "val vendoredFramework =", "body": "if (publishing.get()) <STR_LIT> else frameworkDir.resolve(<STR_LIT>).invariantSeparatorsPath<EOL>"}
{"signature": "import was printed, `false` if no imports were printed.", "body": "<EOL>"}
{"signature": "val wrongInputSecuence =", "body": "arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>,<EOL>"}
{"signature": "val kTypeStub =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (!Lexer.isLetter(cur)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cur = cur and <NUM_LIT>xFFFF<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentTryScope =", "body": "tryScopes[index]<EOL>"}
{"signature": "for (argument in type.actualType.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>forceResolveTypeContents(argument.type)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val NOARG_ANNOTATIONS =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.typeAnnotation) != new.getExtensionCount(JsProtoBuf.typeAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val referencedAnnotation =", "body": "type.fullyExpandedType(session)<EOL>"}
{"signature": "if (counter > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return <!TAIL_RECURSION_IN_TRY_IS_NOT_SUPPORTED!>test<!>(counter - <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!used[to]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dfs<NUM_LIT>(to)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var maxResult =", "body": "CompileTimeResult(<STR_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val jspecifyReportLevel =", "body": "parseJspecifyReportLevel(jspecifyState, nullabilityAnnotationReportLevels)<EOL>"}
{"signature": "val argumentCompileTimeValue =", "body": "context.trace[BindingContext.COMPILE_TIME_VALUE, deparenthesized]<EOL>"}
{"signature": "val liveLiteralsEnabled =", "body": "configuration.getBoolean(<EOL>"}
{"signature": "val invs =", "body": "invOf(A, B)<EOL>"}
{"signature": "val firClassLikeSymbol =", "body": "firProvider.getSymbolByLookupTag(lookupTag) ?: return null<EOL>"}
{"signature": "val actualPretty =", "body": "data.pointersForPrettyRendering.renderDeclarations()<EOL>"}
{"signature": "if (targetsWithoutOutputDir.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>messageCollector.report(<EOL><INDENT><INDENT><INDENT><INDENT>ERROR,<EOL><INDENT><INDENT><INDENT><INDENT>KotlinJpsBundle.message(<STR_LIT>, targetsWithoutOutputDir.joinToString())<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return ABORT<EOL><INDENT><INDENT>}"}
{"signature": "val propGetter =", "body": "if (returnType.endsWith(<STR_LIT>)) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (fir.isLocal) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// local property cannot be referenced before declaration, so it's safe to take an owner from the symbol<INDENT><INDENT><INDENT><INDENT><INDENT>@OptIn(UnsafeDuringIrConstructionAPI::class)<INDENT><INDENT><INDENT><INDENT><INDENT>val delegatedProperty = localStorage.getDelegatedProperty(fir)?.owner<INDENT><INDENT><INDENT><INDENT><INDENT>return delegatedProperty?.delegate?.symbol ?: getIrVariableSymbol(fir)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if ((expression.operator == CAST || expression.operator == IMPLICIT_CAST) && expression.typeOperand.isAtomicValueType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return expression.argument<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (webpackLocalDelimiterIndex > fileStartIndex) {", "body": "<EOL><INDENT><INDENT>return line<EOL><INDENT>}"}
{"signature": "if (File(gradle.gradleUserHomeDir, DISABLE_STATISTICS_FILE_NAME).exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val charCount =", "body": "substring.length<EOL>"}
{"signature": "val hasFailures =", "body": "failedAssertions.isNotEmpty()<EOL>"}
{"signature": "if (!kind.canRunIncrementally) {", "body": "<EOL><INDENT><INDENT><INDENT>processor.init(processingEnv)<EOL><INDENT><INDENT>}"}
{"signature": "when (statusStr) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> true<EOL><INDENT><INDENT><STR_LIT> -> false<EOL><INDENT><INDENT>else -> throw ParseError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for ((index: Any, x) in xs.withIndex()) {", "body": "<EOL><INDENT><INDENT>useAny(index)<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val rr =", "body": "value.rotateRight(-n)<EOL>"}
{"signature": "val argumentWithTypeVariableAsExpectedType =", "body": "findPostponedArgumentWithRevisableExpectedType(postponedArguments)<EOL>"}
{"signature": "val inEnumEntry =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visit(parameter: Parameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>nodes.add(parameter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun builder<NUM_LIT>(c: suspend Controller<NUM_LIT>.() -> Unit) {", "body": "<EOL><INDENT>c.startCoroutine(Controller<NUM_LIT>(), EmptyContinuation)<EOL>}"}
{"signature": "val unsignedPrimitives =", "body": "setOf(UInt, ULong, UByte, UShort)<EOL>"}
{"signature": "val useOptimizedSuperClass =", "body": "<EOL><INDENT><INDENT>context.config.generateOptimizedCallableReferenceSuperClasses<EOL>"}
{"signature": "val simpleDTO =", "body": "SimpleDTO(<NUM_LIT>)<EOL>"}
{"signature": "if (expected === actual) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "if (a[<NUM_LIT>] == 'a') {", "body": "<EOL><INDENT><INDENT>b = <NUM_LIT><EOL><INDENT>}"}
{"signature": "else if (platformTypeUpperBound != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>).append(platformTypeUpperBound)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var something =", "body": "boolean<EOL>"}
{"signature": "for (element in SPECIAL_NAMES) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFalse(s.contains(element), <STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>s.add(element)<EOL><INDENT><INDENT><INDENT>assertTrue(s.contains(element), <STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>s.remove(element)<EOL><INDENT><INDENT><INDENT>assertFalse(s.contains(element), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (deprecated == null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(deprecatedSinceKotlin.source, FirErrors.DEPRECATED_SINCE_KOTLIN_WITHOUT_DEPRECATED, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (!(context.config.produce.isCache || functionIsCached)) {", "body": "<INDENT><INDENT><INDENT>// Do not extract local classes off of inline functions from cached libraries.<INDENT><INDENT><INDENT>LocalClassesInInlineFunctionsLowering(context).lower(body, function)<INDENT><INDENT><INDENT>LocalClassesExtractionFromInlineFunctionsLowering(context).lower(body, function)<INDENT><INDENT>}"}
{"signature": "val wrappedFunctionSymbol =", "body": "calleeReference.resolvedSymbol as FirNamedFunctionSymbol<EOL>"}
{"signature": "val actualInlinedClass =", "body": "actualType.getInlinedClassNative()<EOL>"}
{"signature": "val newTry =", "body": "aTry.run { IrTryImpl(startOffset, endOffset, unitType, newTryResult, newCatches, finallyExpression) }<EOL>"}
{"signature": "var ctr =", "body": "<NUM_LIT><EOL>"}
{"signature": "val declaredParameter =", "body": "stubFunction.valueParameters[i]<EOL>"}
{"signature": "for ((index, valueParameter) in parameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(index, irGet(valueParameter))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val sink =", "body": "CheckerSinkImpl(candidate, stopOnFirstError = stopOnFirstError)<EOL>"}
{"signature": "for (argument in postponedArguments) {", "body": "<EOL><INDENT><INDENT><INDENT>if (argument !is LambdaWithTypeVariableAsExpectedTypeMarker) continue<EOL><INDENT><INDENT><INDENT>if (argument.parameterTypesFromDeclaration != null) continue<EOL><INDENT><INDENT><INDENT>argument.updateParameterTypesFromDeclaration(extractLambdaParameterTypesFromDeclaration(argument))<EOL><INDENT><INDENT>}"}
{"signature": "val defaultMessage =", "body": "OptInUsageChecker.getDefaultDiagnosticMessage(<EOL>"}
{"signature": "if (!testStringAppend<NUM_LIT>(<STR_LIT>, 'x', <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val traceEventStart =", "body": "topLevelCallableId(KtxNameConventions.TRACE_EVENT_START)<EOL>"}
{"signature": "if (falseWhenString(x) && trueWhenInt(x)) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>x.inc()<EOL><INDENT>}"}
{"signature": "when (fir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirFunctionCall -> fir.arguments.firstOrNull()?.toKtReceiverValue()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirPropertyAccessExpression -> fir.explicitReceiver?.toKtReceiverValue()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val locallyMutedTests =", "body": "LocallyMutedTests()<EOL>"}
{"signature": "val declarationNames =", "body": "DescriptorUtils.getAllDescriptors(moduleDescriptor.getPackage(packageFqName).memberScope)<EOL>"}
{"signature": "when (@foo @bar(<NUM_LIT>) @buzz<T>(<NUM_LIT>) @zoo val a = <NUM_LIT>) {", "body": "<EOL><INDENT><NUM_LIT> -> <NUM_LIT><EOL>  }"}
{"signature": "val ktReturnedValue =", "body": "ktBodyStatements.last()<EOL>"}
{"signature": "val grandCommonMain =", "body": "sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "if (this in 'A'..'Z') {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "fun dif(container: Container<String>, wrapper: Wrapper<Int>) {", "body": "<EOL><INDENT>container.wrapper = <!TYPE_MISMATCH!>wrapper<!><EOL>}"}
{"signature": "for (i$i in <NUM_LIT>.<NUM_LIT>) {", "body": "\")<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val checkingResult =", "body": "checkValueArgumentTypes(context, context.candidateCall, resolveFunctionArgumentBodies)<EOL>"}
{"signature": "if (!type.isSupportedInJsInterop(position)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source ?: fallbackSource,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirWasmErrors.WRONG_JS_INTEROP_TYPE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>position.description,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun noinlineRun(block: () -> Unit) {", "body": "<EOL><INDENT>block()<EOL>}"}
{"signature": "package common.", "body": "pack<EOL>"}
{"signature": "val inlineFunctionReference =", "body": "inlineFunctionReferences[signature]<EOL>"}
{"signature": "for (i: Int in J.arrayOfMaybeNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val cParameters =", "body": "bridgeParameters().joinToString(separator = <STR_LIT>, transform = { <STR_LIT> })<EOL>"}
{"signature": "val bitcodeModeConstants =", "body": "BitcodeEmbeddingMode.values().joinToString(<EOL>"}
{"signature": "val knownFqNames =", "body": "minimalFqNames + stdlibFqNames<EOL>"}
{"signature": "val cPlusPlusClassAnnotation =", "body": "if (context.configuration.library.language == Language.CPP<EOL>"}
{"signature": "val getObjCClassFunName =", "body": "<STR_LIT><EOL>"}
{"signature": "val DATA_CONTAINER_VERSION_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val someConstProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "val irAdapterRefType =", "body": "suspendFunType.toIrType()<EOL>"}
{"signature": "val stdErr =", "body": "process.errorStream.bufferedReader().use { it.readText() }<EOL>"}
{"signature": "val superTypeOfNumberLowerBounds =", "body": "commonSupertypeForNumberTypes(numberLowerBounds)<EOL>"}
{"signature": "val subKtArguments =", "body": "listOfNotNull(buildResolvedKtArgument(argument.lhsResult))<EOL>"}
{"signature": "val TC_URL =", "body": "<STR_LIT>"}
{"signature": "package first.", "body": "second<EOL>"}
{"signature": "if (a<NUM_LIT> != a<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var previousNameIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun test(t : T) {", "body": "<EOL><INDENT><!TYPE_PARAMETER_ON_LHS_OF_DOT!>T<!>.<!UNRESOLVED_REFERENCE!>foo<!>()<EOL><INDENT><!TYPE_PARAMETER_ON_LHS_OF_DOT!>T<!>.<!UNRESOLVED_REFERENCE!>bar<!>()<EOL><INDENT>t.foo()<EOL><INDENT>t.bar()<EOL>  }"}
{"signature": "for (index in <NUM_LIT>.length - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val attrName = getLocalName(index)!!<EOL><INDENT><INDENT>val attrVal = getValue(index)!!<EOL><INDENT><INDENT>res[attrName] = attrVal<EOL><INDENT>}"}
{"signature": "val superClassSymbols =", "body": "mutableListOf<FirNamedFunctionSymbol>()<EOL>"}
{"signature": "val sourcePart =", "body": "ShallowSubSequence(source, offset, source.length)<EOL>"}
{"signature": "fun Bar(content: @Composable Int.() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>content<!NO_VALUE_FOR_PARAMETER!>()<!><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resultingSubstitutor =", "body": "system.buildCurrentSubstitutor()<EOL>"}
{"signature": "val prefixEnd =", "body": "cursor - targetElement.startOffset<EOL>"}
{"signature": "for (label in insnNode.labels) {", "body": "<EOL><INDENT><INDENT><INDENT>jump = label.indexOf<EOL><INDENT><INDENT><INDENT>visitControlFlowEdge(jump)<EOL><INDENT><INDENT>}"}
{"signature": "fun assign(s: S, x<NUM_LIT>: Long, x<NUM_LIT>: B<NUM_LIT>, x<NUM_LIT>: UShort, x<NUM_LIT>: UInt, x<NUM_LIT>: Int, x<NUM_LIT>: Long, x<NUM_LIT>: E, x<NUM_LIT>: Boolean, x<NUM_LIT>: Int) {", "body": "<EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL>}"}
{"signature": "val scriptCompilationDisabledPlugins =", "body": "<EOL><INDENT>listOf(<EOL>"}
{"signature": "val stepFunctionName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val contravariant<NUM_LIT> =", "body": "parcelableCreator<Contravariant<String>>().createFromParcel(parcel)<EOL>"}
{"signature": "else if (checkModifier(FirErrors.DEPRECATED_MODIFIER_FOR_TARGET)) {", "body": "<EOL><INDENT><INDENT><INDENT>checkModifier(FirErrors.REDUNDANT_MODIFIER_FOR_TARGET)<EOL><INDENT><INDENT>}"}
{"signature": "val incrementalDataOutputDir =", "body": "options.incrementalDataOutputDir ?: return<EOL>"}
{"signature": "val disabled =", "body": "if (phase !in enabled) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val directSuperTypeSymbols =", "body": "hashSetOf<IrClassSymbol>()<EOL>"}
{"signature": "for (i in InlineDouble<NUM_LIT>(values)) {", "body": "<EOL><INDENT><INDENT>result += i.toString().substring(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (keepAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT>replacement = replacement.replaceAttributes(<EOL><INDENT><INDENT><INDENT><INDENT>replacement.attributes.add(type.attributes)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val superVtableMap =", "body": "superVtableEntries.groupBy { it.function }<EOL>"}
{"signature": "val classUsage =", "body": "named.classUsage<EOL>"}
{"signature": "fun platformSpecificProperty(descriptor: PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>markInteropDeclaration(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (application.getService(BuiltInsVirtualFileProvider::class.java) == null) {", "body": "<EOL><INDENT><INDENT><INDENT>application.registerService(<EOL><INDENT><INDENT><INDENT><INDENT>BuiltInsVirtualFileProvider::class.java,<EOL><INDENT><INDENT><INDENT><INDENT>BuiltInsVirtualFileProviderCliImpl(applicationEnvironment.jarFileSystem as CoreJarFileSystem)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "var substitutor =", "body": "extensionReceiverType.checkIsSuperTypeOf(it)<EOL>"}
{"signature": "fun mapKeySet() {", "body": "<EOL><INDENT><INDENT>val map = createTestMap()<EOL><INDENT><INDENT>assertEquals(KEYS.toNormalizedList(), map.keys.toNormalizedList())<EOL><INDENT>}"}
{"signature": "if (containingDeclaration.fqName != StandardNames.BUILT_INS_PACKAGE_FQ_NAME) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val rightPrimitiveType =", "body": "rightPrimitiveOrNullableType.makeNotNullable()<EOL>"}
{"signature": "val DECLARATION_MARKER =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this is ObjCClass) {", "body": "includedCategoriesMethods(isClass) }"}
{"signature": "if (upperBound != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>appendFlexibleTypeInfo(builder, upperBound)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val hasImplicitBackingField =", "body": "!hasExplicitBackingField && hasBackingField<EOL>"}
{"signature": "if (anonymousFunction.invocationKind?.canBeRevisited() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>visitRepeatable(anonymousFunction, data)<EOL><INDENT><INDENT>}"}
{"signature": "val LAZY_MODE_FQ =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun f<NUM_LIT>(a: <!ELEMENT!><out *>) {", "body": "}<EOL><EOL>fun f<NUM_LIT>(a: <!ELEMENT!><in List<<!ELEMENT!><*>>>) {}"}
{"signature": "if (typeArgumentProtoList.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var point =", "body": "DPoint(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "fun test(hiddenNestedInner: Hidden.Nested.Inner) {", "body": "}<EOL><INDENT>@Suppress(<STR_LIT>) fun test(hiddenInner: Hidden.Inner) {}"}
{"signature": "val ImplicitlyActualizedByJvmDeclaration =", "body": "<STR_LIT>.jvmId()<EOL>"}
{"signature": "val sourcesOption =", "body": "argParser.option(ArgType.Choice<DataSourceEnum>(),<EOL>"}
{"signature": "package libPackage<EOL>.", "body": ""}
{"signature": "val configs =", "body": "testRunSettings.configurables as AppleConfigurables<EOL>"}
{"signature": "if (declaration.hasStableJsName(context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val signature = jsFunctionSignature(declaration, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.minimizedNameGenerator.reserveName(signature)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (currentModifierList != null) {", "body": "<EOL><INDENT><INDENT>currentModifierList.replace(newModifierList)<EOL><INDENT>}"}
{"signature": "val stubbedSignatures =", "body": "updater.collectStubbedSignatures()<EOL>"}
{"signature": "val hasImplicitDynamicReceiver =", "body": "isExtensionFunctionType && this.typeArguments.firstOrNull()?.type is ConeDynamicType<EOL>"}
{"signature": "val whenExpr =", "body": "this.statements[<NUM_LIT>] as? IrWhen ?: return null<EOL>"}
{"signature": "if (substitution.kind == EXACT_BOUND) {", "body": "<EOL><INDENT><INDENT>addNewBound(type, bound.kind)<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "val systemTmpDir =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val QMOD_RELUCTANT  =", "body": "<NUM_LIT>xc<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt()<EOL>"}
{"signature": "if (x.finallyBlock != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>finallyLevel--<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (insertBefore >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irClass.file.declarations.add(insertBefore, declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (parent != null && parent != state.rootContext) {", "body": "<EOL><INDENT><INDENT><INDENT>if (parent is InlineLambdaContext) return true<EOL><INDENT><INDENT><INDENT>parent = parent.parentContext<EOL><INDENT><INDENT>}"}
{"signature": "fun addOtherSystem(otherSystem: ConstraintStorage) {", "body": "<EOL><INDENT><INDENT>addOtherSystem(otherSystem, isAddingOuter = false)<EOL><INDENT>}"}
{"signature": "val TYPE_ANNOTATIONS_TO_MERGE =", "body": "listOf(<EOL>"}
{"signature": "val thisClassFqName =", "body": "FqName(thisClassName)<EOL>"}
{"signature": "val INVOCATION_KIND_ENUM =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (someCondition()) {", "body": "<EOL><INDENT><INDENT>x = null as String?<EOL><INDENT>}"}
{"signature": "val renderedAnnotation =", "body": "annotation.renderAnnotation()<EOL>"}
{"signature": "val allowSemanticErrors =", "body": "false<EOL>"}
{"signature": "val attributeValue =", "body": "it.value?.renderAnnotationMemberValue() ?: <STR_LIT><EOL>"}
{"signature": "fun B(value: String) {", "body": "}"}
{"signature": "val bodyPtr =", "body": "ptrToInt(stackLocal.stackAllocationPtr, codegen.intPtrType)<EOL>"}
{"signature": "for (valueDeclaration in instance.valueDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>valueDeclaration.origin = JvmLoweredDeclarationOrigin.TEMPORARY_MULTI_FIELD_VALUE_CLASS_VARIABLE<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val delegationName =", "body": "if (isThis) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val singleAnnotation =", "body": "packageFragmentDescriptor.annotations.singleOrNull()<EOL>"}
{"signature": "var finallyBlockTest =", "body": "<STR_LIT><EOL>"}
{"signature": "val getImpl =", "body": "createFakeOpenDescriptor(getFunction, classDescriptor)<EOL>"}
{"signature": "if (lookAhead.isSurrogatePair()) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val streams =", "body": "ProcessStreams(this, process, request.stdin, request.stdout, request.stderr)<EOL>"}
{"signature": "fun visitConstantArray(expression: IrConstantArray, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitConstantArray(expression)<EOL><INDENT>}"}
{"signature": "val actualParameterDescriptor =", "body": "actual.valueParameters.first { it.name == expectedParameterDescriptor.name }<EOL>"}
{"signature": "if (old.hasReturnTypeId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(oldTypeTable.getType(old.returnTypeId), newTypeTable.getType(new.returnTypeId))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (BOX_IN_SEPARATE_PROCESS_PORT != null) {", "body": "<EOL><INDENT><INDENT><INDENT>invokeBoxInSeparateProcess(<EOL><INDENT><INDENT><INDENT><INDENT>module,<EOL><INDENT><INDENT><INDENT><INDENT>classFileFactory,<EOL><INDENT><INDENT><INDENT><INDENT>classLoader,<EOL><INDENT><INDENT><INDENT><INDENT>findClassAndMethodToExecute(fileInfo, classLoader, classFileFactory).first<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (callableDescriptor.extensionReceiverParameter == this) {", "body": "<EOL><INDENT><INDENT>return baseCallableDescriptor.extensionReceiverParameter!!.upcast<CallableDescriptor>().getObjCName()<EOL><INDENT>}"}
{"signature": "fun withLambda(o : Int, block : Int.(String) -> Unit) {", "body": "<EOL>}"}
{"signature": "val jsExportFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (!descriptor.hasStableParameterNames()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addDiagnostic(NamedArgumentNotAllowed(argument, descriptor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun collect(collector: FlowCollector<T>) {", "body": "<EOL><INDENT><INDENT>collector.block()<EOL><INDENT>}"}
{"signature": "val listIteratorClass =", "body": "builtIns.listIterator.toIrSymbol()<EOL>"}
{"signature": "for (x in CharArray(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>if (x != <NUM_LIT>toChar()) return <STR_LIT><EOL><INDENT>}"}
{"signature": "val annotationsResolveTransformer =", "body": "FirSpecificAnnotationForLocalClassesResolveTransformer(<EOL>"}
{"signature": "val invList =", "body": "::arrayOfInvList.returnType.arguments.single().type!!.javaType<EOL>"}
{"signature": "fun visitErrorAnnotationCall(errorAnnotationCall: FirErrorAnnotationCall, data: T) {", "body": "<EOL><INDENT><INDENT>visitAnnotation(errorAnnotationCall, data)<EOL><INDENT>}"}
{"signature": "val zZero =", "body": "Z(<NUM_LIT>U, <NUM_LIT>)<EOL>"}
{"signature": "val mostSpecificCandidates =", "body": "choseMostSpecific(kotlinCall, resolutionCallbacks, candidates)<EOL>"}
{"signature": "val maxParsed =", "body": "sb.toString().toInt()<EOL>"}
{"signature": "val generatedFile =", "body": "File(packageDir, <STR_LIT>)<EOL>"}
{"signature": "val androidVariant =", "body": "androidSourceSetInfoOrNull?.androidVariantType ?: return false<EOL>"}
{"signature": "var skipValidation =", "body": "false<EOL>"}
{"signature": "if (Files.isDirectory(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Files.createDirectories(outputPath.resolve(it.normalizedToBeRelative))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (qualifiers.size <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (shouldSwitchMode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>implicitTypeOnly = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val primaryTypeParameter =", "body": "this.primaryTypeParameter ?: <STR_LIT><EOL>"}
{"signature": "if (isImportOptional) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>moduleHeader.toJsImportedModule()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val valueTypesAll =", "body": "function.valueParameters.joinToString(<STR_LIT>) { it.type.render() + <STR_LIT> }<EOL>"}
{"signature": "val previousClasspathSnapshot =", "body": "testMixedClassSnapshotGranularities_snapshotClasspath(<STR_LIT>, <STR_LIT>, tmpDir)<EOL>"}
{"signature": "val EXTERN_EXTERNALIZE =", "body": "<STR_LIT><EOL>"}
{"signature": "for (field in builder.allFields) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (field.invisibleField) continue<EOL><INDENT><INDENT><INDENT><INDENT>copyField(field, originalParameter.name, copyBuilderVariableName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val areParametersNumberInDeclarationAndConstraintsEqual =", "body": "<EOL><INDENT><INDENT><INDENT>!parametersFromDeclaration.isNullOrEmpty() && !parametersFromConstraints.isNullOrEmpty()<EOL>"}
{"signature": "val dotIndex =", "body": "containerName.indexOf('.')<EOL>"}
{"signature": "val implementation =", "body": "it.implementation<EOL>"}
{"signature": "fun initTag<NUM_LIT>(init: () -> Unit) {", "body": "<EOL><INDENT>val p = <NUM_LIT>;<EOL><INDENT>init()<EOL>}"}
{"signature": "fun testScriptWithXArguments() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedExitCode = <NUM_LIT>,<EOL><INDENT><INDENT><INDENT>expectedStderr = <STR_LIT>\"java.lang.IllegalAccessError: tried to access method kotlin.io.ConsoleKt.println(Ljava/lang/Object;)V from class NoInline<EOL>\tat NoInline.<init>(noInline.kts:<NUM_LIT>)<EOL><STR_LIT>\")<EOL><INDENT><INDENT>runProcess(<STR_LIT>, <STR_LIT>, expectedStdout = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val irFileSourceNames =", "body": "hashMapOf<IrModuleFragment, Map<IrFile, KotlinSourceFile>>()<EOL>"}
{"signature": "val otherSet =", "body": "getResultAfterCall(callee, BitSet())<EOL>"}
{"signature": "val mainSource =", "body": "<STR_LIT><EOL>"}
{"signature": "fun clearClasspath() {", "body": "<EOL><INDENT>  _builder.clearClasspath()<EOL><INDENT>}"}
{"signature": "if (functionSymbol.isSuspend) {", "body": "<INDENT><INDENT><INDENT><INDENT>analysisSession.builtinTypes.NULLABLE_ANY // Any?<INDENT><INDENT><INDENT>}"}
{"signature": "fun visitBackingField(backingField: FirBackingField, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBackingField(backingField)<EOL><INDENT>}"}
{"signature": "if (JsEnvironmentConfigurationDirectives.GENERATE_DTS in module.directives) {", "body": "<EOL><INDENT><INDENT>configuration.put(JSConfigurationKeys.GENERATE_DTS, true)<EOL><INDENT>}"}
{"signature": "val baseResult =", "body": "if (toSuper) approximatedSuperType ?: baseSuperType else approximatedSubType ?: baseSubType<EOL>"}
{"signature": "if (isExternalType(type)) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun bar(atomicfu$getter: () -> T, atomicfu$setter: (T) -> Unit) {", "body": "... }"}
{"signature": "fun source(sourceCode: String) {", "body": "<EOL><INDENT><INDENT><INDENT>sources.add(sourceCode)<EOL><INDENT><INDENT>}"}
{"signature": "if (uri.scheme == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>jarFileSystem.findFileByPath(uri.schemeSpecificPart.substring(<STR_LIT>.length))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val checkDigest =", "body": "nowMs - lastDigestUpdate.get() > digestCheckPeriod<EOL>"}
{"signature": "val memberValues =", "body": "arguments(this)<EOL>"}
{"signature": "val scriptEngine =", "body": "ScriptEngineManager().getEngineByExtension(<STR_LIT>)!!<EOL>"}
{"signature": "fun addClass(clazz: ClassDescriptor) {", "body": "<EOL><INDENT><INDENT>classes += clazz<EOL><INDENT>}"}
{"signature": "val rebuildAfterCacheVersionChanged =", "body": "RebuildAfterCacheVersionChangeMarker(dataManager)<EOL>"}
{"signature": "val defineUpperTaylorNBound =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val inlineClassDeclarationLoweringPhase =", "body": "makeIrModulePhase<WasmBackendContext>(<EOL>"}
{"signature": "if (valueParameter.declaresDefaultValue) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (isObjCMethod) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun visitResolvedQualifierNode(node: ResolvedQualifierNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedQualifierNode(node)<EOL><INDENT>}"}
{"signature": "fun generateStepsTxt() {", "body": "<EOL><INDENT><INDENT><INDENT>File(dir, <STR_LIT>).setFileContent(steps.joinToString(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val optionsForWorker =", "body": "KaptOptionsForWorker(<EOL>"}
{"signature": "val fromSource =", "body": "getSourceElement(from)<EOL>"}
{"signature": "val distribution =", "body": "Distribution(<EOL>"}
{"signature": "fun testBasic() {", "body": "<EOL><INDENT><INDENT>val t = MultiInit()<EOL><INDENT><INDENT>check(t.incA() == <NUM_LIT>)<EOL><INDENT><INDENT>check(t.incA() == <NUM_LIT>)<EOL><INDENT><INDENT>check(t.incB() == <NUM_LIT>)<EOL><INDENT><INDENT>check(t.incB() == <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "when (ec) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>A -> true<EOL><INDENT><INDENT><INDENT><INDENT>B -> false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setContent(block: @Composable () -> Unit) {", "body": "}"}
{"signature": "val paragraphForTestSentences =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>specSentencesForCurrentTest[sectionsPath] ?: throw Exception(<STR_LIT>)<EOL>"}
{"signature": "if (!isIgnoredTarget(wholeFile)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw t<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun lower(irClass: IrClass) {", "body": "<EOL><INDENT><INDENT>irClass.visitTypeAliases()<EOL><INDENT>}"}
{"signature": "val I<NUM_LIT>_LT_U =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testSignedLiteralValues() {", "body": "<EOL><INDENT><INDENT>val values: Map<KmAnnotationArgument, String> = mapOf(<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.ByteValue(<NUM_LIT>) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.ShortValue(<NUM_LIT>) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.IntValue(<NUM_LIT>) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.LongValue(<NUM_LIT>) to <STR_LIT>,<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>doTest(values)<EOL><INDENT>}"}
{"signature": "val incAptCache =", "body": "tmpDir.newFolder()<EOL>"}
{"signature": "if (javac.isForkedJavac) {", "body": "<EOL><INDENT><INDENT><INDENT>javac.log(<STR_LIT>, MSG_ERR)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "for (edge in edges) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val next = edge.node<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (next !in visited)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>findFringe(next, visited, fringe, direction, nodeIds)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val arrayField =", "body": "arrayGetter.getBackingField()<EOL>"}
{"signature": "if (superExtensionReceiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(SUPER_CANT_BE_EXTENSION_RECEIVER.on(superExtensionReceiver, superExtensionReceiver.text))<EOL><INDENT><INDENT><INDENT>candidateCall.addStatus(OTHER_ERROR)<EOL><INDENT><INDENT>}"}
{"signature": "val bridgedType =", "body": "(type.def.baseType.unwrapTypedefs() as PrimitiveType).getBridgedType(declarationMapper)<EOL>"}
{"signature": "val localFS =", "body": "fileManager.getFileSystem(StandardFileSystems.FILE_PROTOCOL) as CoreLocalFileSystem<EOL>"}
{"signature": "val optsCopy =", "body": "daemonJVMOptions.copy()<EOL>"}
{"signature": "fun concat(suffix: String, l: (s: String) -> Unit)  {", "body": "<EOL><INDENT>l(suffix)<EOL>}"}
{"signature": "val LOG =", "body": "Logger.getInstance(VirtualFileKotlinClass::class.java)<EOL>"}
{"signature": "val SIndex =", "body": "ch - SBase<EOL>"}
{"signature": "val sessionFlagWrite =", "body": "sessionFlagFile<EOL>"}
{"signature": "val FU =", "body": "AtomicReferenceFieldUpdater.newUpdater(AtomicRef::class.java, Any::class.java, <STR_LIT>)<EOL>"}
{"signature": "val fileBasedName =", "body": "NameUtils.getScriptNameForFile(script.containingKtFile.name)<EOL>"}
{"signature": "if (clazz.hasEnumEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendLine()<EOL><INDENT><INDENT><INDENT><INDENT>appendCommentedLine(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isIntrinsic =", "body": "irFunction.hasWasmNoOpCastAnnotation() || irFunction.getWasmOpAnnotation() != null<EOL>"}
{"signature": "val nullabilityDiff =", "body": "compare(a.nullability, b.nullability)<EOL>"}
{"signature": "val nopNode =", "body": "tryStartLabel.findNextOrNull { it.hasOpcode() }!!<EOL>"}
{"signature": "package one;<EOL>.", "body": ""}
{"signature": "val tmp<NUM_LIT> =", "body": "if (zoot() == <STR_LIT>) Unit else foo()<EOL>"}
{"signature": "val isSucceed =", "body": "resolveStateFieldUpdater.compareAndSet(this, stateSnapshot, newState)<EOL>"}
{"signature": "val isParamVararg =", "body": "isVararg && i == parameterTypes.lastIndex<EOL>"}
{"signature": "if (value is ObjectReference && value.referenceType().name() != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>LocalReference(value.uniqueID().toString(), value.referenceType().name())<EOL><INDENT><INDENT>}"}
{"signature": "fun useAdditionalSourceProviders(vararg providers: Constructor<AdditionalSourceProvider>) {", "body": "<EOL><INDENT><INDENT>additionalSourceProviders += providers<EOL><INDENT>}"}
{"signature": "val propPublic =", "body": "A()<EOL>"}
{"signature": "for (pair in this) {", "body": "<EOL><INDENT><INDENT>listT.add(pair.first)<EOL><INDENT><INDENT>listR.add(pair.second)<EOL><INDENT>}"}
{"signature": "val ARGUMENTS =", "body": "JsNameRef(<STR_LIT>)<EOL>"}
{"signature": "val areAllParameterTypesSpecified =", "body": "!parametersFromDeclaration.isNullOrEmpty() && parametersFromDeclaration.all { it != null }<EOL>"}
{"signature": "if (expression.symbol == oldThisReceiverParameter.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IrGetFieldImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.startOffset,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.endOffset,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>cachedFields.getPrivateFieldForObjectInstance(irClass).symbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irClass.defaultType<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotationType =", "body": "annotationMarkerClass.defaultType<EOL>"}
{"signature": "val functionType =", "body": "functionTypes[b.readVarUInt<NUM_LIT>AsInt()]<EOL>"}
{"signature": "val allocations =", "body": "mutableListOf<Pointer>()<EOL>"}
{"signature": "var lower =", "body": "Wrapper(<NUM_LIT>)<EOL>"}
{"signature": "if ((!node.reachable || !member.reachable) || settings.printNestedMembers) {", "body": "<EOL><INDENT><INDENT><INDENT>printTree(member, consumer, depth + <NUM_LIT>, settings)<EOL><INDENT><INDENT>}"}
{"signature": "val kSerializerType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "fun publishJvmEnvironmentAttribute(publish: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>project.extraProperties.set(KOTLIN_PUBLISH_JVM_ENVIRONMENT_ATTRIBUTE, publish.toString())<EOL><INDENT><INDENT>}"}
{"signature": "val capturedSymbols =", "body": "capturedData.symbols<EOL>"}
{"signature": "val loopVariableType =", "body": "loopVariable.type<EOL>"}
{"signature": "for (i in a until b step s) {", "body": "<EOL><INDENT><INDENT>sb.append(i)<EOL><INDENT>}"}
{"signature": "if (expressionType.isReflectFunctionType(session) || expressionType.isKProperty(session) || expressionType.isKMutableProperty(session)) {", "body": "<EOL><INDENT><INDENT><INDENT>return qualifiedAccessExpression.dispatchReceiver?.accept(this, data) ?: ConstantArgumentKind.VALID_CONST<EOL><INDENT><INDENT>}"}
{"signature": "fun compilerOptions(configure: Action<KotlinJvmCompilerOptions>) {", "body": "<EOL><INDENT><INDENT>configure.execute(compilerOptions)<EOL><INDENT>}"}
{"signature": "val base<NUM_LIT> =", "body": "Base<NUM_LIT>.getUrlEncoder()<EOL>"}
{"signature": "var assertionsHappened =", "body": "false<EOL>"}
{"signature": "val exportedInnerWithVararg =", "body": "exportedParent.WithVararg(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val expectTopLevelClasses =", "body": "mutableMapOf<ClassId, IrClassSymbol>()<EOL>"}
{"signature": "val digits =", "body": "LinkedList<Int>()<EOL>"}
{"signature": "fun translate(classDeclaration: KtPureClassOrObject, context: TranslationContext) {", "body": "<EOL><INDENT><INDENT><INDENT>ClassTranslator(classDeclaration, context, null, null).translate()<EOL><INDENT><INDENT>}"}
{"signature": "val fnNStr =", "body": "::fooNStr<EOL>"}
{"signature": "val GENERATED_DIR =", "body": "File(TEST_DATA_DIR, <STR_LIT>)<EOL>"}
{"signature": "val libAndroidClassesOnlyUtilKt =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "for (future in bFutures) {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, future.result)<EOL><INDENT>}"}
{"signature": "val collectorProvider =", "body": "kotlinToolingDiagnosticsCollectorProvider<EOL>"}
{"signature": "if (declaration.canHaveDeferredReturnTypeCalculation) {", "body": "<EOL><INDENT><INDENT><INDENT>return CallableCopyTypeCalculator.Forced.computeReturnType(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val primitivesToSpill =", "body": "arrayListOf<PrimitiveToSpill>()<EOL>"}
{"signature": "val US_MAX =", "body": "UShort.MAX_VALUE<EOL>"}
{"signature": "for ((i, v) in (<NUM_LIT>.<NUM_LIT> step <NUM_LIT>).withIndex()) {", "body": "}"}
{"signature": "if (macroName in macrosWithErrorsInSnippetFunctionBody) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// Code snippet is likely unaffected by previous ones but parsed with its own errors,<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// so suppose macro is processed successfully as non-expression:<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null<INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val companions =", "body": "classes.mapNotNull(IrClass::companionObject)<EOL>"}
{"signature": "if (this is ExtensionAware) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>extensions.add(binary.name, binary)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val reachableFromEscapeOrigins =", "body": "mutableSetOf<PointsToGraphNode>()<EOL>"}
{"signature": "val ENABLE_X_FOREIGN_API =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo(a : Any?) {", "body": "}<EOL><EOL>public fun main() {<EOL><INDENT>getT<<!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>>()<EOL><INDENT><!UNRESOLVED_REFERENCE!>ggetT<!><<!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>>()<EOL><INDENT>getTT<<!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>, <!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>>()<EOL><INDENT>getTT<<!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>, Int>()<EOL><INDENT>getTT<Int, <!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>>()<EOL><INDENT>foo(getTTT<Int, <!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>*<!>, Int>(<NUM_LIT>))<EOL>}"}
{"signature": "val firstArg =", "body": "invocation.arguments.first()<EOL>"}
{"signature": "val NOSOURCES_CHEAP_MODULE_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "val namesBottomUp =", "body": "HashSet<String>()<EOL>"}
{"signature": "fun bar(x: Int) {", "body": "<EOL><EOL><INDENT>fun foo() = x<EOL><EOL><INDENT>staticCFunction(::foo)<EOL>}"}
{"signature": "if (remap) {", "body": "<EOL><INDENT><INDENT><INDENT>SourceMapLocationRemapper(sourceMap).remap(parsedProgram)<EOL><INDENT><INDENT><INDENT>val codeWithRemappedLines = parsedProgram.toStringWithLineNumbers()<EOL><INDENT><INDENT><INDENT>testServices.assertions.assertEquals(codeWithLines, codeWithRemappedLines)<EOL><INDENT><INDENT>}"}
{"signature": "val CHECK_STRING_EQUALS_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "var condition =", "body": "true<EOL>"}
{"signature": "if (expression.symbol.owner.origin == LocalDeclarationsLowering.DECLARATION_ORIGIN_FIELD_FOR_CROSSINLINE_CAPTURED_VALUE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>capturesCrossinline = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dumpOutputDir =", "body": "File(outputDirBase, <STR_LIT>)<EOL>"}
{"signature": "val targetFile =", "body": "File(outputDir, newName)<EOL>"}
{"signature": "fun customField(key: String, value: Any?) {", "body": "<EOL><INDENT><INDENT>customFields[key] = value<EOL><INDENT>}"}
{"signature": "val diagnosticsStoringResolvedCalls<NUM_LIT> =", "body": "setOf(<EOL>"}
{"signature": "else if (index == descriptors.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import <!DEPRECATION!>test.", "body": "A<!><EOL>"}
{"signature": "val fileData =", "body": "input.readArray()<EOL>"}
{"signature": "val TYPE_PARCELER_FQNAME =", "body": "FqName(TypeParceler::class.java.name)<EOL>"}
{"signature": "val emptyScriptArgs =", "body": "ScriptArgsWithTypes(arrayOf(emptyArray<String>()), arrayOf(Array<String>::class))<EOL>"}
{"signature": "if (isNormal(token)) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(token)<EOL><INDENT><INDENT>}"}
{"signature": "package private, but for now Kotlin's reflection can't access members of such classes<EOL>.", "body": ""}
{"signature": "if (shouldRealize) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>scope.realizeGroup(makeEnd)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>realizeGroup()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val aliasAnnotation =", "body": "AnnotationStub.CEnumEntryAlias(entry.name)<EOL>"}
{"signature": "package pvar<EOL>.", "body": ""}
{"signature": "fun visitArrayLiteral(arrayLiteral: FirArrayLiteral, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitArrayLiteral(arrayLiteral)<EOL><INDENT>}"}
{"signature": "fun testOneOfFour() {", "body": "<EOL><INDENT><INDENT>sumFour(arg)<EOL><INDENT>}"}
{"signature": "if (radix !in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val BEFORE_CHECKCAST_TO_FUNCTION_OF_ARITY_DESCRIPTOR =", "body": "<EOL><INDENT><INDENT><INDENT>Type.getMethodDescriptor(OBJECT_TYPE, OBJECT_TYPE, Type.INT_TYPE)<EOL>"}
{"signature": "if (controllerName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assignToField(context.controllerFieldName, controllerName.makeRef(), psiElement)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (isAssignment) {", "body": "<EOL><INDENT><INDENT><INDENT>false -> syntheticProperty.getterSymbol?.delegateFunctionSymbol<EOL><INDENT><INDENT><INDENT>true -> syntheticProperty.setterSymbol?.delegateFunctionSymbol<EOL><INDENT><INDENT>}"}
{"signature": "val generatedIrDeclarationsByFileByOffset =", "body": "mutableMapOf<String, MutableMap<Pair<Int, Int>, MutableList<IrConstructorCall>>>()<EOL>"}
{"signature": "val fileDescriptorSerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelReadFileDescriptor, symbols.parcelWriteFileDescriptor)<EOL>"}
{"signature": "val depthUsedBits =", "body": "kindUsedBits + DEPTH_SIZE_BITS<EOL>"}
{"signature": "val newCapturedRemapper =", "body": "InlinedLambdaRemapper(<EOL>"}
{"signature": "val privateSimple =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visitResolvedContractDescription(resolvedContractDescription: FirResolvedContractDescription, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedContractDescription(resolvedContractDescription)<EOL><INDENT>}"}
{"signature": "val nullabilityAnnotationQualifier =", "body": "computeNullabilityQualifier(this@getAnnotationsSequence, psiType)<EOL>"}
{"signature": "for (index in categoryIds.indices) {", "body": "<EOL><INDENT><INDENT>val value = bitmask(categoryIds[index])<EOL><INDENT><INDENT>pattern = pattern or (value shl (<NUM_LIT> * index))<EOL><INDENT>}"}
{"signature": "val oldLastModified =", "body": "file.lastModified()<EOL>"}
{"signature": "val conditionsInfo =", "body": "analyzeWhenEntryConditions(<EOL>"}
{"signature": "val substitutedParameterBoundsNullability =", "body": "typeParameterForArgument?.boundsNullability<EOL>"}
{"signature": "fun setInitializer(value: ConstValue) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMSetInitializer(llvmGlobal, value.llvm)<EOL><INDENT><INDENT>}"}
{"signature": "val isRootPackage =", "body": "callableIdIfNonLocal?.packageName?.isRoot<EOL>"}
{"signature": "val liveVariablesAtSuspensionPoints =", "body": "context.liveVariablesAtSuspensionPoints<EOL>"}
{"signature": "fun test<NUM_LIT>(r: Ref) {", "body": "<EOL><INDENT>r.x = <NUM_LIT><EOL>}"}
{"signature": "val patternStart =", "body": "namePattern.indexOfAny(wildcardChars)<EOL>"}
{"signature": "var ext =", "body": "collectAugments(myClass, PsiMethod::class.java)<EOL>"}
{"signature": "if (it is FirSpreadArgumentExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>callback(it)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dceAllJsFiles =", "body": "additionalFiles + inputJsFilesBefore + dceJsFiles + commonFiles + additionalMainFiles + inputJsFilesAfter<EOL>"}
{"signature": "if (!parameter.isMovedReceiver() && parameter != stubFunction.dispatchReceiverParameter && parameter != stubFunction.extensionReceiverParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>++sourceParameterIndex<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!result) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = predicate(sym)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val classFile =", "body": "KotlinClassMetadata.readStrict(metadata)<EOL>"}
{"signature": "val getValue =", "body": "backingField?.initializer?.expression as? IrGetValue<EOL>"}
{"signature": "if (missingTypes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>reportMissingTypes(<EOL><INDENT><INDENT><INDENT><INDENT>expression.source, missingTypesFromExpression, context, reporter,<EOL><INDENT><INDENT><INDENT><INDENT>missingTypeOrigin = Expression<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (constantInitializer !is NullValue) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(protocol.compileTimeValue, annotationSerializer.valueProto(constantInitializer).build())<EOL><INDENT><INDENT>}"}
{"signature": "if (x is Any) {", "body": "<EOL><INDENT><INDENT>return x.extension()<EOL><INDENT>}"}
{"signature": "val asmValueParameterType =", "body": "codegen.asmType(valueParameterType)<EOL>"}
{"signature": "val yo =", "body": "inA(y)<EOL>"}
{"signature": "if (expandedTypeRef is FirResolvedTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOf(expandedTypeRef)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedKotlinParameters =", "body": "info.invokeMethodParameters<EOL>"}
{"signature": "val newCondition =", "body": "IrCompositeImpl(<EOL>"}
{"signature": "val currentTestMethod =", "body": "this::class.members.firstOrNull { it.name == <STR_LIT> + getTestName(false) }<EOL>"}
{"signature": "val noRuntime =", "body": "JvmEnvironmentConfigurationDirectives.NO_RUNTIME in registeredDirectives<EOL>"}
{"signature": "fun visitErrorAnnotationCall(errorAnnotationCall: FirErrorAnnotationCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitErrorAnnotationCall(errorAnnotationCall)<EOL><INDENT>}"}
{"signature": "val kotlinClosureToJsConverters =", "body": "mutableMapOf<String, IrSimpleFunction>()<EOL>"}
{"signature": "fun enterDelegateExpression() {", "body": "<EOL><INDENT><INDENT>graphBuilder.enterDelegateExpression()<EOL><INDENT>}"}
{"signature": "if (valueClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>result[LanguageFeature.ValueClasses] = LanguageFeature.State.ENABLED<EOL><INDENT><INDENT>}"}
{"signature": "if (statement.finallyPath) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>indexesToUpdate += lastFinallyPathIndex<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val artifactName =", "body": "lazyConfiguration<EOL>"}
{"signature": "val valueArg =", "body": "delegatedCall.valueArgumentsByIndex!![<NUM_LIT>].arguments[<NUM_LIT>].getArgumentExpression()<EOL>"}
{"signature": "if (closestOwnFunction is FirFunction && closestOwnFunction.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.LATEINIT_INTRINSIC_CALL_IN_INLINE_FUNCTION, context)<EOL><INDENT><INDENT>}"}
{"signature": "val ONLY_INPUT_TYPES_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val lineNumberForOffset =", "body": "getLineNumberForOffset(inlinedBlock.inlineCall.startOffset)<EOL>"}
{"signature": "val mainHeaders =", "body": "mutableListOf<JsIrModuleHeader>()<EOL>"}
{"signature": "val declarationBeingCached =", "body": "packageFragment is IrFile && klib != null && libraryBeingCached?.klib == klib<EOL>"}
{"signature": "if (annotation.desc == <STR_LIT>) {", "body": "<INDENT><INDENT><INDENT><INDENT>if (seenOverride) return list  // KT<NUM_LIT>: skip duplicate @Override annotations<INDENT><INDENT><INDENT><INDENT>seenOverride = true<INDENT><INDENT><INDENT>}"}
{"signature": "val isEffectiveSelector =", "body": "isSelector && tokenType != TokenType.ERROR_ELEMENT<EOL>"}
{"signature": "val unaryOperatorCache =", "body": "mutableMapOf<Pair<Name, IrType>, IrSimpleFunctionSymbol>()<EOL>"}
{"signature": "fun charCategoryOtherLetter() {", "body": "<INDENT><INDENT>val twoWithStroke = '\u01bb' // \\u<NUM_LIT>BB<INDENT><INDENT>assertTrue(twoWithStroke.isLetterOrDigit())<INDENT><INDENT>assertTrue(twoWithStroke.isLetter())<INDENT><INDENT>assertEquals(CharCategory.OTHER_LETTER, twoWithStroke.category)<INDENT><INDENT>assertEquals(<STR_LIT>, CharCategory.OTHER_LETTER.code)<INDENT>}"}
{"signature": "val blockProto =", "body": "proto.block<EOL>"}
{"signature": "if (varargElementType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>modifiers.add(KtTokens.VARARG_KEYWORD)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val baseTypeMirror =", "body": "context.mirror(enumDef.baseType)<EOL>"}
{"signature": "while (A && false) {", "body": "<INDENT><INDENT><INDENT><INDENT>//<INDENT><INDENT> B();<INDENT><INDENT><INDENT><INDENT>//<INDENT> }"}
{"signature": "for (x in a downTo <NUM_LIT>u) {", "body": "<EOL><INDENT><INDENT>s += x.toInt()<EOL><INDENT>}"}
{"signature": "val exceptionCollector =", "body": "(project as ProjectInternal).services.get(classPathModeExceptionCollectionClass)<EOL>"}
{"signature": "val copyConfiguration =", "body": "newCopyBuilder(TypeSubstitutor.EMPTY)<EOL>"}
{"signature": "fun parameter(a: (@A C)) {", "body": "}<EOL><EOL>fun parameterArgument(a: B<(@A C)>) {}"}
{"signature": "fun x<NUM_LIT>(x<NUM_LIT>Var: Int) {", "body": "<EOL><INDENT>val y<NUM_LIT> = <NUM_LIT><EOL>}"}
{"signature": "val kotlinGradleBuildServices =", "body": "KotlinGradleBuildServices.registerIfAbsent(project).get()<EOL>"}
{"signature": "val objOffsetsPtr =", "body": "staticData.placeGlobalConstArray(<STR_LIT>, llvm.int<NUM_LIT>Type, objOffsets)<EOL>"}
{"signature": "fun visitCatchClauseEnterNode(node: CatchClauseEnterNode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>catchScopeCount++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((i, v) in (<NUM_LIT>.<NUM_LIT>).reversed().withIndex()) {", "body": "<EOL><INDENT>}"}
{"signature": "val anchorModuleSession =", "body": "LLFirSessionCache.getInstance(project).getSession(anchorModule)<EOL>"}
{"signature": "val swiftName =", "body": "getSwiftName(bridge)<EOL>"}
{"signature": "val expectedDest =", "body": "Array(destSize) { -it - <NUM_LIT> }<EOL>"}
{"signature": "val OUT_DIR_PATH =", "body": "System.getProperty(<STR_LIT>) ?: error(<STR_LIT>)<EOL>"}
{"signature": "fun visitQualifiedAccessExpression(qualifiedAccessExpression: FirQualifiedAccessExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(qualifiedAccessExpression)<EOL><INDENT>}"}
{"signature": "val compilationTarget =", "body": "target<EOL>"}
{"signature": "val needV<NUM_LIT>Signatures =", "body": "AbiSignatureVersions.Supported.V<NUM_LIT> in supportedSignatureVersions<EOL>"}
{"signature": "val cancellationExceptionFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val superBridge =", "body": "SpecialBridge(<EOL>"}
{"signature": "fun markDirty(className: ClassName) {", "body": "<EOL><INDENT><INDENT>dirtyOutputClassesMap.markDirty(className)<EOL><INDENT>}"}
{"signature": "for (@Foo (i: () -> Unit) in y) {", "body": "}"}
{"signature": "for (property in properties.serializableConstructorProperties) {", "body": "<EOL><INDENT><INDENT><INDENT>val propertyType = codegen.typeMapper.mapType(property.type)<EOL><INDENT><INDENT><INDENT>constructorDesc.append(propertyType.descriptor)<EOL><INDENT><INDENT><INDENT>load(propVar, propertyType)<EOL><INDENT><INDENT><INDENT>propVar += propertyType.size<EOL><INDENT><INDENT>}"}
{"signature": "fun lastOrNullInEmptyRange() {", "body": "<EOL><INDENT><INDENT>assertNull(UIntRange.EMPTY.lastOrNull())<EOL><INDENT><INDENT>assertNull(ULongRange.EMPTY.lastOrNull())<EOL><INDENT><INDENT>assertNull(UIntProgression.fromClosedRange(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>).lastOrNull())<EOL><INDENT>}"}
{"signature": "fun visitDiagnosticHolder(diagnosticHolder: FirDiagnosticHolder, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDiagnosticHolder(diagnosticHolder)<EOL><INDENT>}"}
{"signature": "val unsubstitutedUnwrappedDescriptor =", "body": "unwrappedDescriptor.original<EOL>"}
{"signature": "if (annotationList != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>annotationList.add(newFileAnnotationList.annotationEntries.first())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (requireNotNull(effect.kind)) {", "body": "<EOL><INDENT><INDENT><INDENT>ProtoBuf.Effect.InvocationKind.AT_MOST_ONCE -> KmEffectInvocationKind.AT_MOST_ONCE<EOL><INDENT><INDENT><INDENT>ProtoBuf.Effect.InvocationKind.EXACTLY_ONCE -> KmEffectInvocationKind.EXACTLY_ONCE<EOL><INDENT><INDENT><INDENT>ProtoBuf.Effect.InvocationKind.AT_LEAST_ONCE -> KmEffectInvocationKind.AT_LEAST_ONCE<EOL><INDENT><INDENT>}"}
{"signature": "for (key in selector(value)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(key, value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun finishWithFailures(failures: List<Throwable>) {", "body": "<EOL><INDENT><INDENT>assert(failures.isNotEmpty())<EOL><INDENT><INDENT>assert(isStartedImpl.get())<EOL><INDENT><INDENT>assert(!isFinishedWithFailures.getAndSet(true))<EOL><INDENT><INDENT>configurationResult.complete(ProjectConfigurationResult.Failure(failures))<EOL><INDENT>}"}
{"signature": "val functionalType =", "body": "getExpectedType(functionLiteral) as? KtFunctionalType<EOL>"}
{"signature": "package foo;\\n\\n public class Top\\$Lev\\$el\\$ {}<STR_LIT>Top\\$Lev\\$el\\$\")<EOL>.", "body": ""}
{"signature": "val timerListeners =", "body": "mutableMapOf<String, TaskTimerListener>()<EOL>"}
{"signature": "if (x is Derived<*>) {", "body": "<EOL><INDENT><INDENT>val y: Base<Any?> = x.bar()<EOL><INDENT><INDENT>return y.foo() as T<EOL><INDENT>}"}
{"signature": "if (p) {", "body": "<EOL><INDENT><INDENT>Z(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val delegated =", "body": "<STR_LIT><EOL>"}
{"signature": "fun useProjectDep() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>|<INDENT>libFun()<EOL><INDENT><INDENT><INDENT><INDENT>|}"}
{"signature": "val valueParametersForAnnotationConstructor =", "body": "ValueParametersForAnnotationConstructor()<EOL>"}
{"signature": "fun visitConstantDescriptor(constantReference: KtConstantReference<KotlinTypeBean, Nothing?>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinContractEffectType.CONSTANT.ordinal)<EOL><INDENT><INDENT>dataStream.writeName(constantReference.name)<EOL><INDENT>}"}
{"signature": "val canBeInlined =", "body": "checkCanBeInlined(declaration, declaration.effectiveVisibility, context, reporter)<EOL>"}
{"signature": "val commandsList =", "body": "mutableListOf<List<String>>()<EOL>"}
{"signature": "if (value == suspensionPointId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return functionGenerationContext.blockAddress(bbResume)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val pretendReturnType =", "body": "call.getResolvedCall(trace.bindingContext)?.resultingDescriptor?.returnType<EOL>"}
{"signature": "for (className in findImplementations(service, files)) {", "body": "<EOL><INDENT><INDENT><INDENT>val instance = Class.forName(className, false, classLoader).newInstance()<EOL><INDENT><INDENT><INDENT>implementations += service.cast(instance)<EOL><INDENT><INDENT>}"}
{"signature": "val SUBCLASS_OPT_IN_REQUIRED_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (id != filesProto.fileCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fileProto.id = id<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateDeclaration() {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalStateException()<EOL><INDENT><INDENT>}"}
{"signature": "if (instruction.copies.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(diagnostic)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val dir<NUM_LIT> =", "body": "writeDir(<STR_LIT>, processors(<STR_LIT>))<EOL>"}
{"signature": "val _double =", "body": "builtIns.doubleType<EOL>"}
{"signature": "val interopInterpretNullablePointed =", "body": "interopFunction(InteropFqNames.interpretNullablePointedFunName)<EOL>"}
{"signature": "val sharedModules =", "body": "ThreadSafeCache<String, TestModule.Shared?>()<EOL>"}
{"signature": "fun putReifiedOperationMarker(operationKind: OperationKind, argument: ReificationArgument, v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT><INDENT>v.iconst(operationKind.id)<EOL><INDENT><INDENT><INDENT>v.visitLdcInsn(argument.asString())<EOL><INDENT><INDENT><INDENT>v.invokestatic(<EOL><INDENT><INDENT><INDENT><INDENT>IntrinsicMethods.INTRINSICS_CLASS_NAME, REIFIED_OPERATION_MARKER_METHOD_NAME,<EOL><INDENT><INDENT><INDENT><INDENT>Type.getMethodDescriptor(Type.VOID_TYPE, Type.INT_TYPE, AsmTypes.JAVA_STRING_TYPE), false<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!declaration.shouldBeRemapped()) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitConstructor(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val nameStr =", "body": "name?.asString() ?: return false<EOL>"}
{"signature": "val parentName =", "body": "parent.fullNameWithoutRoot<EOL>"}
{"signature": "when (val firstSuper = firstBoundType.toSymbol(session)?.fir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirRegularClass -> firstSuper<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirTypeParameter -> firstSuper.erasedUpperBound<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isConventionCall(outerCall)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val containingDeclarationName = functionDescriptor.containingDeclaration.fqNameUnsafe.asString()<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.PROPERTY_AS_OPERATOR.on(reportOn, functionDescriptor, containingDeclarationName))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nestedConstraintSystem =", "body": "nestedCall.constraintSystem ?: return false<EOL>"}
{"signature": "val taskNameBase =", "body": "<STR_LIT><EOL>"}
{"signature": "fun setValue(thisRef: Any?, desc: KProperty<*>, svalue : Int) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (!testStringAppendInline<NUM_LIT>(<STR_LIT>, 'x', <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (verifySignatures) {", "body": "<EOL><INDENT><INDENT>moduleFragment.acceptVoid(mangleChecker)<EOL><INDENT>}"}
{"signature": "if (variableUseState != READ) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>unusedValueExpressions[expressionInQuestion] = variableDescriptor to ctxt<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (flags != <NUM_LIT> && flags or flagsBitMask != flagsBitMask) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when(A()) {", "body": "<EOL><INDENT><INDENT>is A -> return <STR_LIT><EOL><INDENT><INDENT>else -> return <STR_LIT><EOL><INDENT>}"}
{"signature": "val jName =", "body": "localJClass.simpleName<EOL>"}
{"signature": "fun inlineFun(x: Int, callback: (Int) -> Unit) {", "body": "<EOL><INDENT><INDENT>callback(x)<EOL><INDENT>}"}
{"signature": "val syntheticParameterCount =", "body": "irFunction.valueParameters.count { it.isSkippedInGenericSignature }<EOL>"}
{"signature": "fun visitFunctionExitNode(node: FunctionExitNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionExitNode(node)<EOL><INDENT>}"}
{"signature": "val own =", "body": "myClass.ownInnerClasses<EOL>"}
{"signature": "for ((insn, transformation) in transformations.entries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>transformation(insn)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var position =", "body": "<NUM_LIT><EOL>"}
{"signature": "val FUNCTION_DECL_TOKENS =", "body": "TokenSet.create(KtTokens.FUN_KEYWORD)<EOL>"}
{"signature": "fun testDelegateStr() {", "body": "<EOL><INDENT>var localD by DelegateStr(<STR_LIT>)<EOL><EOL><INDENT>if (localD != <NUM_LIT>) AssertionError()<EOL><EOL><INDENT>localD = <NUM_LIT><EOL><INDENT>if (localD != <NUM_LIT>) throw AssertionError()<EOL><INDENT>if (backing != <NUM_LIT>) throw AssertionError()<EOL>}"}
{"signature": "if (resolveResult.receiverClassReference != null) {", "body": "<EOL><INDENT><INDENT><INDENT>findParentSymbol(resolveResult.receiverClassReference, goBackSteps - <NUM_LIT>, selectedFqName)<EOL><INDENT><INDENT>}"}
{"signature": "val contextDeclarationOrSelf =", "body": "PsiTreeUtil.getContextOfType(contextElement, KtDeclaration::class.java, false)<EOL>"}
{"signature": "val reportCategory =", "body": "ReportCategory.fromCode(category)<EOL>"}
{"signature": "val delegateToLookupTag =", "body": "delegateToSymbol.dispatchReceiverClassLookupTagOrNull() ?: return@processAllProperties<EOL>"}
{"signature": "val correspondingSubType =", "body": "TypeCheckingProcedure.findCorrespondingSupertype(expressionTypeWithSmartCast, lowerBound) ?: return<EOL>"}
{"signature": "val ml =", "body": "arrayListOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (previouslyReportedErrorFactory != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>alreadyReported = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val intermediateKlib =", "body": "intermediateDir.resolve(<STR_LIT>).absolutePath<EOL>"}
{"signature": "if (argIndex < ownerFn.valueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val bits = argumentsMissing<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.toBooleanArray()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.sliceArray(start until end)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.putValueArgument(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>argIndex++,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irConst(bitMask(*bits))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(x: MyFunction<Int, String>) {", "body": "}<EOL>fun foo<NUM_LIT>(x: MyFunction<in Number, out CharSequence>) {}"}
{"signature": "val crc<NUM_LIT> =", "body": "CRC<NUM_LIT>()<EOL>"}
{"signature": "val compatibilityUpperBoundForTypeArg =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if ((ctx.prohibitComparisonOfIncompatibleEnums && typeParameterOwner.classId == StandardClassIds.Enum) ||<EOL>"}
{"signature": "val bodyType =", "body": "llvmDeclarations.bodyType<EOL>"}
{"signature": "val startChar =", "body": "readInt()<EOL>"}
{"signature": "val moduleMetadataReport =", "body": "ModuleMetadataReport(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (callableCandidate.candidate.isSupportedForCallableReference()) {", "body": "<EOL><INDENT><INDENT><INDENT>ComposedSubstitutor(typeParametersSubstitutor, resultSubstitutor)<EOL><INDENT><INDENT>}"}
{"signature": "val expressionInfoProviderImpl =", "body": "KtFirExpressionInfoProvider(this, token)<EOL>"}
{"signature": "if (candidateValues.contains(PUBLIC_VALUE)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>closestMatch(PUBLIC_VALUE)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeSpelling =", "body": "clang_getTypeSpelling(cursorType).convertAndDispose()<EOL>"}
{"signature": "when (val void = context.backendContext.getVoid()) {", "body": "<EOL><INDENT><INDENT>is IrGetField -> context.getNameForField(void.symbol.owner).makeRef()<EOL><INDENT><INDENT>else -> JsNullLiteral()<EOL><INDENT>}"}
{"signature": "fun launch(f : () -> Unit) {", "body": "<EOL><INDENT>f()<EOL>}"}
{"signature": "fun ccc() {", "body": "}// FILE: aaa.kt@file:JvmName(<STR_LIT>)@file:JvmMultifileClasspackage testfun aaa() {}"}
{"signature": "val subProjectHash =", "body": "lineParts[<NUM_LIT>].split('.').getOrNull(<NUM_LIT>)<EOL>"}
{"signature": "val contextWithClass =", "body": "context.withContextOf(clazz.targetDeclarations[index] ?: return)<EOL>"}
{"signature": "fun setValue(thisObj: Any?, property: KProperty<*>, value: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this.value = value<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compatibleExpectedFunctions =", "body": "descriptor.findCompatibleExpectsForActual(onlyFromThisModule(descriptor.module))<EOL>"}
{"signature": "fun visitLabel(x: JsLabel) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>invalidateTemporaries()<EOL><INDENT><INDENT><INDENT><INDENT>super.visitLabel(x)<EOL><INDENT><INDENT><INDENT><INDENT>invalidateTemporaries()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val propertyVisibility =", "body": "calculatedModifiers.getVisibility()<EOL>"}
{"signature": "val passwordRaw =", "body": "options.password<EOL>"}
{"signature": "val rightTypes =", "body": "context.getStableTypesForExpression(rightExpr)<EOL>"}
{"signature": "for (i in <NUM_LIT>.<NUM_LIT>*BENCHMARK_SIZE<NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val next = a + b<EOL><INDENT><INDENT><INDENT>a = b<EOL><INDENT><INDENT><INDENT>b = next<EOL><INDENT><INDENT>}"}
{"signature": "val jvmIntegrationTest<NUM_LIT> =", "body": "sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "val gradleSettingToUpdate =", "body": "if (isKts) settingsGradleKts else settingsGradle<EOL>"}
{"signature": "package part metadata and binary tree for compiled source file */<EOL>.", "body": ""}
{"signature": "val originalTypeNotNullable =", "body": "<EOL><INDENT><INDENT>originalType.makeConeTypeDefinitelyNotNullOrNotNull(session.typeContext)<EOL>"}
{"signature": "val lastEntry =", "body": "members.last()<EOL>"}
{"signature": "if (jClass.isEnum) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(StandardNames.ENUM_ENTRIES)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (reorderIrLambdaParameters) {", "body": "<INDENT><INDENT><INDENT>// In IR lambdas, captured variables come before real parameters, but after the extension receiver.<INDENT><INDENT><INDENT>// Move them to the end of the descriptor instead.<INDENT><INDENT><INDENT>Type.getArgumentTypes(inliningContext.lambdaInfo!!.invokeMethod.descriptor)<INDENT><INDENT>}"}
{"signature": "fun addFriendDir(friendDir: String) {", "body": "<EOL><INDENT><INDENT>friendDirs.add(friendDir)<EOL><INDENT>}"}
{"signature": "val allocArrayFunction =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "val Decoy =", "body": "DecoyClassIds.Decoy.asSingleFqName()<EOL>"}
{"signature": "val JXM_BEAN_BASE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val nullableOptional =", "body": "Optional.ofNullable(nullable)<EOL>"}
{"signature": "if (!expectException) {", "body": "<EOL><INDENT><INDENT>controller.run(c)<EOL><INDENT>}"}
{"signature": "val initCCall =", "body": "generateCCall(initCall)<EOL>"}
{"signature": "fun visitThrowExpression(throwExpression: FirThrowExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitThrowExpression(throwExpression)<EOL><INDENT>}"}
{"signature": "val unwrappedDelegate =", "body": "declaration.delegatedWrapperData?.wrapped<EOL>"}
{"signature": "val loopRef =", "body": "JsNameRef(loop.name)<EOL>"}
{"signature": "if (partialCallContainer != null) {", "body": "<EOL><INDENT><INDENT><INDENT>topLevelTrace.record(BindingContext.ONLY_RESOLVED_CALL, psiCall, PartialCallContainer.empty)<EOL><INDENT><INDENT>}"}
{"signature": "val aspect =", "body": "windowWidth.toDouble() / windowHeight<EOL>"}
{"signature": "else if (!isInsideExpectClass && !hasAbstractModifier && !function.isExternal && !isInsideExternal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.NON_ABSTRACT_FUNCTION_WITH_NO_BODY, functionSymbol, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val deserializedFilesInKlibOrder =", "body": "mutableMapOf<IrModuleFragment, List<IrFile>>()<EOL>"}
{"signature": "if (<!SUPER_IS_NOT_AN_EXPRESSION!>super<!>) {", "body": "}"}
{"signature": "import has no receiver for receiver kdoc declaration:<EOL>.", "body": ""}
{"signature": "fun addKDocQualifierToShorten(kDocName: KDocName) {", "body": "<EOL><INDENT><INDENT>kDocQualifiersToShorten.add(ShortenKDocQualifier(kDocName))<EOL><INDENT>}"}
{"signature": "val comparator =", "body": "compareBy { s: String -> s.reversed() }<EOL>"}
{"signature": "val nonTypeVariables =", "body": "types.filter { !it.isStubTypeForVariableInSubtyping() && !isCapturedStubTypeForVariableInSubtyping(it) }<EOL>"}
{"signature": "if (remapReturn) {", "body": "<EOL><INDENT><INDENT><INDENT>processReturns(resultNode, returnLabels, end)<EOL><INDENT><INDENT>}"}
{"signature": "if (containingDeclaration is FirRegularClass && !containingDeclaration.isLocal && !containingDeclaration.isInner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultArgsInClass =", "body": "Test().funWithDefaultArgsInClass()<EOL>"}
{"signature": "fun testReleaseCompilerAgainstPreReleaseLibrarySkipMetadataVersionCheck() {", "body": "<EOL><INDENT><INDENT>doTestPreReleaseKotlinLibrary(K<NUM_LIT>JVMCompiler(), <STR_LIT>, tmpdir, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (key in stat.sweepStatistics.keys) {", "body": "<EOL><INDENT><INDENT>assertEquals(stat.sweepStatistics[key]!!.sweptCount, <NUM_LIT>L)<EOL><INDENT>}"}
{"signature": "fun addPluginArgument(options: CompilerPluginOptions) {", "body": "<EOL><INDENT><INDENT>copyOptionsFrom(options)<EOL><INDENT>}"}
{"signature": "when (symbol.owner.name) {", "body": "<EOL><INDENT><INDENT><INDENT>Name.identifier(<STR_LIT>) -> if (doNotIntrinsify) call else transformCompareToMethodCall(call)<EOL><INDENT><INDENT><INDENT>Name.identifier(<STR_LIT>) -> transformEqualsMethodCall(call as IrCall)<EOL><INDENT><INDENT><INDENT>else -> call<EOL><INDENT><INDENT>}"}
{"signature": "val buildScanReportSettings =", "body": "buildMetricServiceProvider.get().parameters.reportingSettings.orNull?.buildScanReportSettings<EOL>"}
{"signature": "if (block.high < <NUM_LIT>xFFFF) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(regex.matches((block.high + <NUM_LIT>).toChar().toString()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lookupPredicateMatcher =", "body": "Matcher<LookupPredicate>()<EOL>"}
{"signature": "val fakeApiElementsSourceSets =", "body": "projectStructureMetadata.sourceSetNamesByVariantName[<STR_LIT>]<EOL>"}
{"signature": "fun foo<NUM_LIT>(e<NUM_LIT>: E<NUM_LIT>?, e<NUM_LIT>: E<NUM_LIT>?) {", "body": "<INDENT>e<NUM_LIT> == e<NUM_LIT> // There should be an IDE-inspection for such cases}"}
{"signature": "val fieldSymbol =", "body": "it.backingField?.symbol ?: error(<STR_LIT>)<EOL>"}
{"signature": "var isPrimary =", "body": "false<EOL>"}
{"signature": "val withoutAnnotations =", "body": "annotationsAttribute?.let { this.remove(it) } ?: this<EOL>"}
{"signature": "val nonParsedFiles =", "body": "supportModuleFiles.toMutableList()<EOL>"}
{"signature": "var valueParameterApproximated =", "body": "false<EOL>"}
{"signature": "if (context.memoryModel == MemoryModel.EXPERIMENTAL && !forbidRuntime && needSafePoint) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>call(llvm.Kotlin_mm_safePointFunctionPrologue, emptyList())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val originalParameter =", "body": "ownerWithDefaults.valueParameters[index]<EOL>"}
{"signature": "val withAssertion =", "body": "J().nullString()<EOL>"}
{"signature": "fun klibFiles(collection: FileCollection) {", "body": "klibFiles.add(collection) }"}
{"signature": "val originalFirProperty =", "body": "property.unwrapFakeOverrides()<EOL>"}
{"signature": "val propB =", "body": "B.id.textView<EOL>"}
{"signature": "val reificationResult =", "body": "reifiedTypeInliner.reifyInstructions(node)<EOL>"}
{"signature": "if (newC is String) {", "body": "<EOL><INDENT><INDENT>c = newC<EOL><INDENT>}"}
{"signature": "val hasFirBodyKey =", "body": "Key.create<Boolean?>(<STR_LIT>)<EOL>"}
{"signature": "val hasFinally =", "body": "finallyBlock != null<EOL>"}
{"signature": "val left =", "body": "prevChar == ' ' || isSpace(prevChar, startIndex - <NUM_LIT>, testString)<EOL>"}
{"signature": "val superSource =", "body": "superTypeRef.source ?: continue<EOL>"}
{"signature": "fun visitScript(script: FirScript, data: MutableMap<KtElement, FirElement>) {", "body": "<EOL><INDENT><INDENT><INDENT>cacheElement(script, data)<EOL><INDENT><INDENT><INDENT>visitScriptDependentElements(script, this, data)<EOL><INDENT><INDENT>}"}
{"signature": "for (protoPath in PROTO_PATHS) {", "body": "<EOL><INDENT><INDENT><INDENT>execProtoc(protoPath.file, protoPath.outPath)<EOL><INDENT><INDENT><INDENT>renamePackages(protoPath.file, protoPath.outPath)<EOL><INDENT><INDENT><INDENT>modifyAndExecProtoc(protoPath)<EOL><INDENT><INDENT>}"}
{"signature": "val firstArgumentExpression =", "body": "resolvedCall.firstArgumentAsExpressionOrNull()<EOL>"}
{"signature": "val kClassWithBadArgument =", "body": "type.isKClassWithBadArgument()<EOL>"}
{"signature": "val rhsArgument =", "body": "valueArguments.lastOrNull()<EOL>"}
{"signature": "val KOTLIN_SCRIPTING_COMMON_JAR =", "body": "<STR_LIT><EOL>"}
{"signature": "val KLIB_MANIFEST_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "var numberOfSuspendCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (<expr>(b is Boolean)</expr>) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (TypeUtils.isNullableType(type)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.INAPPLICABLE_LATEINIT_MODIFIER.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ktDeclaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (notRemovedParts.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>multifileFacadeToParts.remove(facade)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package html<EOL>.", "body": ""}
{"signature": "val basicDescriptor =", "body": "constructor.declarationDescriptor<EOL>"}
{"signature": "val reservedMemoryMb =", "body": "<NUM_LIT> // system processes, gradle daemon, kotlin daemon, etc ..."}
{"signature": "val parameterAttributes =", "body": "parameterList.attributes<EOL>"}
{"signature": "val x_null_<NUM_LIT> =", "body": "ClassNothing(null)<EOL>"}
{"signature": "package $fqName part $partName\")<EOL>.", "body": ""}
{"signature": "var property =", "body": "StringProperty(<STR_LIT>)<EOL>"}
{"signature": "if (SimpleClassicTypeSystemContext.hasEnhancedNullability(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tBuilder.appendSignature(MangleConstant.ENHANCED_NULLABILITY_MARK)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val delegateAdapter =", "body": "gson.getDelegateAdapter(this@PackageJsonTypeAdapter, type)<EOL>"}
{"signature": "val binaryVersionAndPackageFragment =", "body": "BinaryVersionAndPackageFragment.createFromStream(stream)<EOL>"}
{"signature": "fun testAnnotatedEnumEntry() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val mockSerializableClass =", "body": "ClassDescriptorImpl(<EOL>"}
{"signature": "if (x is CharSequence) {", "body": "<EOL><INDENT><INDENT>y<NUM_LIT> = x<EOL><INDENT><INDENT>y<NUM_LIT> = <!ASSIGNMENT_TYPE_MISMATCH!>x<!><EOL><EOL><INDENT><INDENT>bar<NUM_LIT>(x)<EOL><INDENT><INDENT>bar<NUM_LIT>(x)<EOL><INDENT><INDENT>bar<NUM_LIT>(<!ARGUMENT_TYPE_MISMATCH!>x<!>)<EOL><INDENT>}"}
{"signature": "val receiverDebugKinds =", "body": "receiverGroup?.debugKinds ?: emptyArray()<EOL>"}
{"signature": "val inputFileExists =", "body": "task.inputFile.getOrNull()?.asFile?.exists() == true<EOL>"}
{"signature": "val USE_OLD_INFERENCE_DIAGNOSTICS_FOR_NI =", "body": "false<EOL>"}
{"signature": "val errorFile =", "body": "task.errorFileProvider.get()<EOL>"}
{"signature": "val isAmongMutableSignatures =", "body": "signature in JvmBuiltInsSignatures.MUTABLE_METHOD_SIGNATURES<EOL>"}
{"signature": "val nodeToVisit =", "body": "nodesToVisit.removeFirst()<EOL>"}
{"signature": "if (options.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptyMap()<EOL><INDENT><INDENT>}"}
{"signature": "val T_TYPEALIAS =", "body": "targetList(TYPEALIAS)<EOL>"}
{"signature": "val listR =", "body": "ArrayList<R>(expectedSize)<EOL>"}
{"signature": "val jvmUtil =", "body": "resolvePath(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun test(tr: Tr<String>?) {", "body": "<INDENT>val v = tr as G?<INDENT>// If v is not nullable, there will be a warning on this line:<INDENT>checkSubtype<G<String>>(v!!)}"}
{"signature": "val temporaryFolder =", "body": "TemporaryFolder()<EOL>"}
{"signature": "var hasEqToken =", "body": "false<EOL>"}
{"signature": "val oj =", "body": "JavaClass.id(o)<EOL>"}
{"signature": "val VISIBILITY_MODIFIER =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "var isOutOfBlock =", "body": "false<EOL>"}
{"signature": "val defaultValueDiff =", "body": "aHasDefaultValue - bHasDefaultValue<EOL>"}
{"signature": "val numberOfNodes =", "body": "intraproceduralAnalysisResults[function]!!.function.body.allScopes.sumOf { it.nodes.size }<EOL>"}
{"signature": "val bn =", "body": "base.normalize()<EOL>"}
{"signature": "val test_jn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>j === n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n === j<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>j !== n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n !== j<!><EOL>"}
{"signature": "val flexibleCollectionName =", "body": "foldedPrefix + lowerWithoutPrefix<EOL>"}
{"signature": "val propDesc =", "body": "generatedSerialDescPropertyDescriptor ?: return<EOL>"}
{"signature": "val enumValue =", "body": "kenum.KEnum.OK<EOL>"}
{"signature": "val libraryOptions =", "body": "listOf(<EOL>"}
{"signature": "package InheritGenericInExternalClassClash<EOL>.", "body": ""}
{"signature": "val artifactConfigs =", "body": "project.objects.domainObjectSet(KotlinArtifactConfig::class.java)<EOL>"}
{"signature": "val childrenProvider =", "body": "SirDeclarationChildrenProviderImpl(sirSession)<EOL>"}
{"signature": "fun r(f: () -> Int) {", "body": "<EOL><INDENT>f()<EOL>}"}
{"signature": "val enumClassId =", "body": "classId.outerClassId ?: error(<STR_LIT>)<EOL>"}
{"signature": "val KSERIALIZER_CLASS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (metadata<NUM_LIT>::class != metadata<NUM_LIT>::class) {", "body": "<EOL><INDENT><INDENT><INDENT>report.addMetadataDiff(ListEntryDiff(metadata<NUM_LIT>::class.simpleName, metadata<NUM_LIT>::class.simpleName))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val firConstructorSymbol =", "body": "firSymbol.unsubstitutedScope(c).getDeclaredConstructors().singleOrNull() ?: return@lazy null<EOL>"}
{"signature": "if (!isCreatingFromScratch) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (current is JetExpression && first) {", "body": "<INDENT><INDENT><INDENT>// Smartcast is possible here<INDENT><INDENT><INDENT>println(current.getText())<INDENT><INDENT>}"}
{"signature": "val variantBDependencies =", "body": "project.locateOrCreateCInteropDependencyConfiguration(<EOL>"}
{"signature": "val descriptorPackage =", "body": "resolvedCall.resultingDescriptor.containingPackage()<EOL>"}
{"signature": "val cfcgTypesClassifiers =", "body": "setOf(<EOL>"}
{"signature": "if (!overrideCandidate.isTypeParameterDependent() && !baseDeclaration.isTypeParameterDependent()) {", "body": "<EOL><INDENT><INDENT><INDENT>return ConeSubstitutor.Empty<EOL><INDENT><INDENT>}"}
{"signature": "val backend =", "body": "valueOfOrNull<TargetBackend>(option)<EOL>"}
{"signature": "val causeMessage =", "body": "cause?.getFullDescription()?.replaceFirst(<STR_LIT>, <STR_LIT>) ?: <STR_LIT><EOL>"}
{"signature": "when (val psiExpression = diagnostic.argument.psiExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtPsiUtil.KtExpressionWrapper -> psiExpression.baseExpression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> psiExpression<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val baseValueType =", "body": "signature.valueParameters.single().asmType<EOL>"}
{"signature": "val ELSE_ENTRY =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val fatTask =", "body": "project.registerAssembleFatForXCFrameworkTask(xcFrameworkName, buildType, fatTarget)<EOL>"}
{"signature": "val EXCEPTIONS_FILE_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val inheritorClassIds =", "body": "classSymbol.firSymbol.fir.getSealedClassInheritors(analysisSession.useSiteSession)<EOL>"}
{"signature": "val minimalSupportedAgpVersion =", "body": "AndroidGradlePluginVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "if (node.isDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DECLARATION_SIGNATURE.mark(node, startOffset, endOffset, tree)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val wholePropertyAccessExpression =", "body": "realPsi as? KtExpression<EOL>"}
{"signature": "if (labelTarget == function || (labelTarget == null && insideActualFunction)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>returns.add(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in (logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>0) step logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT>0 + i<EOL><INDENT>}"}
{"signature": "if (metaAnnotations != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderAnnotationsRecursive(analysisSession, metaAnnotations, currentMetaAnnotations + classId, indent = indent + <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val containingUnaryExpressionForIncOrDec =", "body": "psi.getContainingUnaryIncOrDecExpression()<EOL>"}
{"signature": "fun B(content: @Composable () -> Unit) {", "body": "}<EOL><INDENT><INDENT><STR_LIT>\"<EOL><INDENT>)<EOL><EOL><INDENT>@Test<EOL><INDENT>fun testTopLevelComposableLambdaProperties() = verifyGoldenComposeIrTransform(<EOL><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>import androidx.compose.runtime.Composable<EOL><EOL><INDENT><INDENT><INDENT>val foo = @Composable {}"}
{"signature": "val classContext =", "body": "CodeFragmentContext(state.typeMapper, classDescriptor, parentContext, calculatedInfo)<EOL>"}
{"signature": "fun test_<NUM_LIT>(a: A, in<NUM_LIT>: In<NUM_LIT><A>, in<NUM_LIT>: In<NUM_LIT><<!REDUNDANT_PROJECTION!>in<!> A>, in<NUM_LIT>: In<NUM_LIT><<!CONFLICTING_PROJECTION_IN_TYPEALIAS_EXPANSION!>out<!> A>) {", "body": "<EOL><INDENT>in<NUM_LIT>.take(a)<EOL><INDENT>in<NUM_LIT>.take(a)<EOL><INDENT>in<NUM_LIT>.<!UNRESOLVED_REFERENCE!>take<!>(a)<EOL>}"}
{"signature": "val fileClassInfo =", "body": "JvmFileClassUtil.getFileClassInfoNoResolve(containingFile)<EOL>"}
{"signature": "if ((ix or lx.toInt()) == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><EOL><INDENT><INDENT>x = doubleSetWord(d = x, hi = hy and Int.MIN_VALUE)<INDENT><EOL><INDENT><INDENT>x = doubleSetWord(d = x, lo = <NUM_LIT>)<EOL><INDENT><INDENT>y = x * x<EOL><INDENT><INDENT>if (y == x) return y; else return x<INDENT><EOL><INDENT>}"}
{"signature": "import test<NUM_LIT>A<EOL>.", "body": ""}
{"signature": "val propertyDispatchReceiverType =", "body": "propertySymbol.dispatchReceiverType ?: return receiver<EOL>"}
{"signature": "val propertyTypeRef =", "body": "variable.typeReference<EOL>"}
{"signature": "if (!parameterType.isMarkedNullable || !TypeUtils.isNullableType(newConstrainingType)) {", "body": "<EOL><INDENT><INDENT><INDENT>addBound(typeVariable, newConstrainingType, boundKind, constraintContext)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var loader =", "body": "reflectJarClassLoader.get()<EOL>"}
{"signature": "val throwIllegalArgumentExceptionWithMessage =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "val COMPILE_ALL_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val w<NUM_LIT>b =", "body": "W<NUM_LIT> { i, s: String -> i + s.length } // overload oi- ni-"}
{"signature": "val moduleRootDir =", "body": "repoDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val oldValueParameterSymbol =", "body": "oldPropertySymbol.setterSymbol?.valueParameterSymbols?.first()<EOL>"}
{"signature": "fun f(x: Long) {", "body": "}<EOL><EOL>fun g(x: Byte?) {}"}
{"signature": "fun testExtensions(obj: JsObject, key: Int, oldValue: Any?, newValue: Any) {", "body": "<EOL><INDENT>assertEquals(oldValue, obj[key])<EOL><INDENT>obj[key] = newValue<EOL><INDENT>assertEquals(newValue, obj[key])<EOL><INDENT>obj[key] = null<EOL><INDENT>assertEquals(null, obj[key])<EOL>}"}
{"signature": "import B.", "body": "bar<EOL>"}
{"signature": "fun visitWrappedDelegateExpression(wrappedDelegateExpression: FirWrappedDelegateExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(wrappedDelegateExpression)<EOL><INDENT>}"}
{"signature": "for (path in getBuildFilePaths(buildFile, module.getSourceFiles())) {", "body": "<EOL><INDENT><INDENT><INDENT>addKotlinSourceRoot(<EOL><INDENT><INDENT><INDENT><INDENT>path,<EOL><INDENT><INDENT><INDENT><INDENT>isCommon = hmppCliModuleStructure?.isFromCommonModule(path) ?: (path in commonSources),<EOL><INDENT><INDENT><INDENT><INDENT>hmppCliModuleStructure?.getModuleNameForSource(path)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val includeFrameworkArgs =", "body": "TestCInteropArgs(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val actualVal =", "body": "res.value.result<EOL>"}
{"signature": "val COMPARE_AND_SET_ARRAY_ELEMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "val resolvableTargets =", "body": "listOf(<EOL>"}
{"signature": "fun visitElement(element: FirElement, data: MutableList<MetadataSerializer>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>element.acceptChildren(this, data)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var arrayDimensions =", "body": "<NUM_LIT><EOL>"}
{"signature": "val fakeCalleeReference =", "body": "buildSimpleNamedReference { this.name = name }<EOL>"}
{"signature": "when (visibilityInBaseClass) {", "body": "<EOL><INDENT><INDENT>JavaVisibilities.ProtectedAndPackage, JavaVisibilities.ProtectedStaticVisibility -> true<EOL><INDENT><INDENT>JavaVisibilities.PackageVisibility -> symbolInBaseClass.isInPackage(packageNameOfDerivedClass)<EOL><INDENT><INDENT>else -> true<EOL><INDENT>}"}
{"signature": "val inheritedVtableSlotsSet =", "body": "inheritedVtableSlots.map { it.function to it.bridgeDirections }.toSet()<EOL>"}
{"signature": "val descriptors =", "body": "calls.map { it.resultingDescriptor }<EOL>"}
{"signature": "val capturedSubstitution =", "body": "typeParameters.zip(capturedTypes).toMap()<EOL>"}
{"signature": "val isWithUnifiedNullChecks =", "body": "context.config.unifiedNullChecks<EOL>"}
{"signature": "val levelStr =", "body": "parts.getOrNull(<NUM_LIT>) ?: error(<STR_LIT>$tagLevel\\<STR_LIT>)<EOL>"}
{"signature": "if (diff.isClassAffected) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collectSignature(oldData, diff.areSubclassesAffected)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val withoutArguments =", "body": "missingType.withArguments(emptyArray())<EOL>"}
{"signature": "package lib;<EOL>.", "body": ""}
{"signature": "fun test(s: Super) {", "body": "<EOL><INDENT>s.<!INVISIBLE_MEMBER!>name<!><EOL><INDENT>s.<!INVISIBLE_MEMBER!>getName<!>()<EOL><INDENT>s.<!INVISIBLE_MEMBER!>name<!> = <STR_LIT><EOL><INDENT>s.<!INVISIBLE_MEMBER!>name<!> = s.<!INVISIBLE_MEMBER!>name<!><EOL><INDENT>s.setName(<STR_LIT>)<EOL>}"}
{"signature": "if (multiParameter != null) {", "body": "<INDENT><INDENT><INDENT>// E tmp<e> = tmp<iterator>.next()<INDENT><INDENT><INDENT>loopParameterType = asmElementType<INDENT><INDENT><INDENT>loopParameterKotlinType = elementType<INDENT><INDENT><INDENT>loopParameterVar = createLoopTempVariable(asmElementType)<INDENT><INDENT>}"}
{"signature": "if (illegalRename) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(import.source, FirErrors.OPERATOR_RENAMED_ON_IMPORT, context)<EOL><INDENT><INDENT>}"}
{"signature": "val refinesInSwiftSupportedTargets =", "body": "arrayOf(KotlinTarget.FUNCTION, KotlinTarget.PROPERTY)<EOL>"}
{"signature": "else if (intKind == EXTERNAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return@ext External(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var removeZeros =", "body": "numberFormat.removeLeadingZeros<EOL>"}
{"signature": "var consumed =", "body": "<NUM_LIT><EOL>"}
{"signature": "var paragraphCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val headerFile =", "body": "projectPath.resolve(<STR_LIT>).toFile()<EOL>"}
{"signature": "fun visitValueParameter(declaration: IrValueParameter, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitValueParameter(declaration)<EOL><INDENT>}"}
{"signature": "val sourceMapEmbedContentString =", "body": "arguments.sourceMapEmbedSources<EOL>"}
{"signature": "val funRefB =", "body": "::function<EOL>"}
{"signature": "val functionalArgument =", "body": "sourceValue.functionalArgument<EOL>"}
{"signature": "import m<NUM_LIT>ConfigurationException;<EOL>.", "body": ""}
{"signature": "val nativeDistributionDependencies =", "body": "getNativeDistributionDependencies(commonizerTarget)<EOL>"}
{"signature": "val INTEROP_NATIVE_PTR_TO_LONG<INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "fun setMethodImplForSVGLengthList(obj: SVGLengthList, index: Int, newItem: SVGLength) {", "body": "js(<STR_LIT>) }"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val extractedBranches =", "body": "mutableListOf<ExtractedWhenBranch<Any>>()<EOL>"}
{"signature": "val ff =", "body": "fm.kotlinFunction ?: return <STR_LIT><EOL>"}
{"signature": "val resource =", "body": "platformNull<Resource>()<EOL>"}
{"signature": "val valuez =", "body": "values()<EOL>"}
{"signature": "if (getJVMFunctionName(descriptor) != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val missingInK<NUM_LIT> =", "body": "Sets.difference(classesFromK<NUM_LIT>keys, classesFromK<NUM_LIT>.keys).toMutableSet()<EOL>"}
{"signature": "val callableReferenceResolvedCall =", "body": "kotlinToResolvedCallTransformer.getResolvedCallForArgumentExpression(<EOL>"}
{"signature": "if (it.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return@forEach<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val pathSeparatorPattern =", "body": "if (File.separatorChar == '/') <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val evaluatedVal =", "body": "evaluated.get()<EOL>"}
{"signature": "for (chunk in profile.chunkedSequence(<NUM_LIT> shl <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>out.write(chunk.toByteArray(Charsets.UTF_<NUM_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val currentDispatchReceiverType =", "body": "currentDispatchReceiverType()<EOL>"}
{"signature": "fun incrementalAdd(c: Constraint) {", "body": "<EOL><INDENT>val mark = newMark()<EOL><INDENT>var overridden = c.satisfy(mark, this)<EOL><INDENT>while (overridden != null)<EOL><INDENT>  overridden = overridden.satisfy(mark, this)<EOL>  }"}
{"signature": "val toTypeErased =", "body": "toType.getRuntimeClass(context.irBuiltIns)<EOL>"}
{"signature": "import DOMElementTestClasses.", "body": "cls<NUM_LIT><EOL>"}
{"signature": "val containerSource =", "body": "getContainerSource(propertyFile, propertyStub?.origin)<EOL>"}
{"signature": "val INVALID_OBJC_NAME_CHARS =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement, String>(Severity.ERROR)<EOL>"}
{"signature": "if (translationResult !is TranslationResult.Success) {", "body": "<EOL><INDENT><INDENT><INDENT>return BinaryArtifacts.Js.OldJsArtifact(outputFile, translationResult)<EOL><INDENT><INDENT>}"}
{"signature": "val snapshotFiles =", "body": "ClasspathSnapshotFiles(params.newClasspathSnapshotFiles, params.shrunkClasspathSnapshot.parentFile)<EOL>"}
{"signature": "val incrementOrDecrement =", "body": "isIncrementOrDecrement(operationType)<EOL>"}
{"signature": "val calleeFunction =", "body": "expression.calleeReference.toResolvedCallableSymbol() as? FirFunctionSymbol<*> ?: return<EOL>"}
{"signature": "val F<NUM_LIT>_CONST =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testIdempotent(operation: (Map<String, Int>) -> Map<String, Int>) {", "body": "<EOL><INDENT><INDENT>val original = mapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(original, operation(original))<EOL><INDENT>}"}
{"signature": "fun set(newValue: R) {", "body": "<EOL><INDENT><INDENT>boxed = newValue<EOL><INDENT>}"}
{"signature": "val typeDistanceMeasurement =", "body": "TypeDistanceMeasurement(typeCommonizer.context)<EOL>"}
{"signature": "var areAllDefNotNull =", "body": "true<EOL>"}
{"signature": "var rawChunk =", "body": "rawChunks[rawChunkIndex]<EOL>"}
{"signature": "val kotlinFunctionType =", "body": "kotlinType.render(this.scope)<EOL>"}
{"signature": "val dPoint =", "body": "DPoint(<NUM_LIT>.my, <NUM_LIT>.my)<EOL>"}
{"signature": "val newHashSize =", "body": "computeHashSize(newSize)<EOL>"}
{"signature": "if (expression.arguments.firstOrNull() !is FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun doTest(cwd: File, filePath: String, expectedWithForwardSlash: String) {", "body": "<INDENT><INDENT><INDENT>// We use <STR_LIT> below for simplicity, but the actual paths in compiler messages use the system separator.<INDENT><INDENT><INDENT>val expected = expectedWithForwardSlash.replace(<STR_LIT>, File.separator)<INDENT><INDENT><INDENT>val actual = program.run(cwd, filePath)<INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, expected, actual)<INDENT><INDENT>}"}
{"signature": "var functionDescriptor =", "body": "findSuperDeclaration(descriptor.original, superCall, jvmDefaultMode)<EOL>"}
{"signature": "val UNKNOWN_FIELD_EXC =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test<NUM_LIT>(bar: Any) {", "body": "<EOL><INDENT>val x = bar.isString()<EOL><INDENT>if (x) bar.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>if (bar.isString()) bar.length<EOL>}"}
{"signature": "val fnType =", "body": "functionParameter.type<EOL>"}
{"signature": "val ii =", "body": "o.foo()<EOL>"}
{"signature": "fun handleEvent(event: Event) {", "body": "<EOL><INDENT><INDENT>handler(event)<EOL><INDENT>}"}
{"signature": "if (!Name.isValidIdentifier(value)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(jvmName.source, FirJvmErrors.ILLEGAL_JVM_NAME, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (arity >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KotlinTypeFactory.simpleType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>attributes,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>functionTypeConstructor.builtIns.getSuspendFunction(arity).typeConstructor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>arguments,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>nullable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun useClassB() {", "body": "<EOL><INDENT>b.B()<EOL>}"}
{"signature": "val libraryMap =", "body": "mutableMapOf<String, NativeLibrary>()<EOL>"}
{"signature": "val preventExportOfSyntheticDeclarationsLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "var path =", "body": "cache[file]<EOL>"}
{"signature": "var allowedPlatforms =", "body": "Platform.entries.toSet()<EOL>"}
{"signature": "val registrar =", "body": "TransactionOutputsRegistrar(it, mockCollector)<EOL>"}
{"signature": "fun add(variableName: String) {", "body": "<EOL><INDENT><INDENT><INDENT>variables.add(variableName)<EOL><INDENT><INDENT>}"}
{"signature": "val dummyExpressionFactory =", "body": "DummyExpressionFactory(psiFactory)<EOL>"}
{"signature": "fun plusAssign(other: A) {", "body": "<EOL><INDENT><INDENT>value = suspendThere(A(value + other.value)).value<EOL><INDENT>}"}
{"signature": "val isBaseOrOtherCapturedType =", "body": "otherConstraint.type.isCapturedType() || causeOfIncorporationConstraint.type.isCapturedType()<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.propertySetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.propertySetterAnnotation, i), new.getExtension(KlibMetadataProtoBuf.propertySetterAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val PARENT_NAMES =", "body": "setOf(<EOL>"}
{"signature": "val derivedWithoutKey =", "body": "DerivedWithoutKey()<EOL>"}
{"signature": "when (receiver) {", "body": "<EOL><INDENT><INDENT><INDENT>MethodBridgeReceiver.Static,<EOL><INDENT><INDENT><INDENT>MethodBridgeReceiver.Factory,<EOL><INDENT><INDENT><INDENT>-> false<EOL><EOL><INDENT><INDENT><INDENT>MethodBridgeReceiver.Instance -> true<EOL><INDENT><INDENT>}"}
{"signature": "val encodedObject =", "body": "Json.encodeToString(SerializableObject.serializer(), SerializableObject)<EOL>"}
{"signature": "fun foo<NUM_LIT>(a: Array<out String>?) {", "body": "}"}
{"signature": "for (superInterface in superClasses + superInterfaces) {", "body": "<EOL><INDENT><INDENT><INDENT>t = ExportedType.IntersectionType(t, superInterface)<EOL><INDENT><INDENT>}"}
{"signature": "if (nodeIds[node] != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fringe += node<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val rawText =", "body": "expression.getReferencedNameElement().node.text<EOL>"}
{"signature": "while (!complete) {", "body": "<EOL><INDENT><INDENT>next()<EOL><INDENT><INDENT>log += <STR_LIT><EOL><INDENT>}"}
{"signature": "val builtinContainerDefaultType =", "body": "(specialCallableDescriptor.containingDeclaration as ClassDescriptor).defaultType<EOL>"}
{"signature": "when (@Ann val x<NUM_LIT>a = foo) {", "body": "}"}
{"signature": "if (!declaration.isActual) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val outerStepArg =", "body": "D<EOL>"}
{"signature": "fun compilerOptions(configure: Action<CO>) {", "body": "<EOL><INDENT><INDENT>configure.execute(compilerOptions)<EOL><INDENT>}"}
{"signature": "for (descriptor in classDescriptor.constructors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.addConstructor(constructorProto(descriptor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (visitedProperty.add(property)) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitProperty(property)<EOL><INDENT><INDENT>}"}
{"signature": "val REFINER_CAPABILITY =", "body": "ModuleCapability<Ref<TypeRefinementSupport>>(<STR_LIT>)<EOL>"}
{"signature": "fun visitAnnotationCall(annotationCall: FirAnnotationCall, data: Any?) {", "body": "<EOL><INDENT><INDENT>annotationCall.acceptChildren(this, null)<EOL><INDENT>}"}
{"signature": "val test_ini =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i === ni<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>ni === i<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i !== ni<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>ni !== i<!><EOL>"}
{"signature": "val jsCheckIsNullOrUndefinedAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val tentativeMaxProbeDistance =", "body": "(maxProbeDistance * <NUM_LIT>).coerceAtMost(hashSize / <NUM_LIT>)<EOL>"}
{"signature": "for ((typeParameter, typeBounds) in allTypeParameterBounds) {", "body": "<EOL><INDENT><INDENT><INDENT>result.allTypeParameterBounds.put(typeParameter, typeBounds.filter(filterConstraintPosition))<EOL><INDENT><INDENT>}"}
{"signature": "package scopes (see<EOL>.", "body": ""}
{"signature": "if (!it.definitionFile.isPresent && it.packageName.isNullOrBlank()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>project.reportDiagnostic(KotlinToolingDiagnostics.CInteropRequiredParametersNotSpecifiedError())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val thisElements =", "body": "if (this is CompositePostConfigure) this.elements else listOf(this)<EOL>"}
{"signature": "val patternClassesApt =", "body": "<STR_LIT><EOL>"}
{"signature": "val compiledClassesLoader =", "body": "classLoader(platformFiles, allCommonSources)<EOL>"}
{"signature": "var remainingSources =", "body": "initialSources<EOL>"}
{"signature": "fun testRestoreFlagsAfterGroup() {", "body": "<EOL><INDENT><INDENT>val baseString = <STR_LIT><EOL><INDENT><INDENT>val testString = <STR_LIT><EOL><INDENT><INDENT>val regex = Regex(baseString)<EOL><INDENT><INDENT>assertTrue(regex.matches(testString))<EOL><INDENT>}"}
{"signature": "if (arguments.classpath != null) {", "body": "<EOL><INDENT><INDENT><INDENT>configuration.addJvmClasspathRoots(arguments.classpath!!.split(File.pathSeparatorChar).map(::File))<EOL><INDENT><INDENT>}"}
{"signature": "fun fromInner() {", "body": "<INDENT><INDENT><INDENT>foo() // Ok<INDENT><INDENT><INDENT>bar() // Ok<INDENT><INDENT><INDENT>gav() // Ok<INDENT><INDENT><INDENT>baz() // Ok<INDENT><INDENT>}"}
{"signature": "if (signature.id != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (isConstructorName(current)) addAll(classDescriptor.constructors)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(memberScope.getContributedFunctions(current, NoLookupLocation.FROM_BACKEND))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(memberScope.getContributedVariables(current, NoLookupLocation.FROM_BACKEND))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val markerClass =", "body": "module.findClassAcrossModuleDependencies(<EOL>"}
{"signature": "val testFileName =", "body": "testFileNameFromMappedLocation(sourceFile, sourceLine) ?: return<EOL>"}
{"signature": "val originalReturnTarget =", "body": "(returnTarget as? IrAttributeContainer)?.attributeOwnerId ?: returnTarget<EOL>"}
{"signature": "val floatMinExponent =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Float.MIN_EXPONENT }()<!><EOL>"}
{"signature": "for (i in it downTo <NUM_LIT>) {", "body": "sb.append(i) }"}
{"signature": "if (isFuncIndices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>b.writeByte(<NUM_LIT>x<NUM_LIT><NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun printByte(v: Byte) {", "body": "<EOL><INDENT>println(v)<EOL>}"}
{"signature": "val checkNotNullSubstituted =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkNotNull.substitute(<EOL>"}
{"signature": "if (isOutput) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.popIndent()<EOL><INDENT><INDENT><INDENT><INDENT>p.println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (get<ForcedNoopTestRunner>().value) {", "body": "<EOL><INDENT><INDENT><INDENT>NoopTestRunner<EOL><INDENT><INDENT>}"}
{"signature": "var serializerClass =", "body": "serializerClassOriginal<EOL>"}
{"signature": "val EVAL_CHEAP_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "while (iteratorVar.hasNext()) {", "body": "<INDENT><INDENT>//<INDENT>   val loopVar = iteratorVar.next()<INDENT><INDENT>//<INDENT>   // Loop body<INDENT><INDENT>//   }"}
{"signature": "for (extensionClass in FirExtensionRegistrar.AVAILABLE_EXTENSIONS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(extensionClass, extensions.getValue(extensionClass) + other.extensions.getValue(extensionClass))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (url == null) {", "body": "<EOL><INDENT><INDENT>url = ClassLoader.getSystemResource(path.substring(<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "if (project.rootProject !== project) {", "body": "<EOL><INDENT><INDENT>doHandleHierarchicalStructureFlagsMigration(project)<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(value: Any?) {", "body": "<EOL><INDENT>val result = (value as? Map<*, *>)?.get(<STR_LIT>)<EOL>}"}
{"signature": "val javac =", "body": "javac<EOL>"}
{"signature": "else if (<STR_LIT> == text) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val pos_patterns =", "body": "arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val superTarget =", "body": "overriddenFromClass.takeIf { !it.isFakeOverride || !specialBridge.isOverriding }<EOL>"}
{"signature": "for (superType in superTypes) {", "body": "<EOL><INDENT><INDENT><INDENT>addTypeToTypeList(<EOL><INDENT><INDENT><INDENT><INDENT>listBuilder = listBuilder,<EOL><INDENT><INDENT><INDENT><INDENT>superType = superType<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val resultAfterSuspend =", "body": "emptyContinuationClass.getField(<STR_LIT>).get(emptyContinuation)<EOL>"}
{"signature": "val RESOURCE_NAME_TO_ALLOW_READING_FROM_ENVIRONMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "val elementText =", "body": "render(element)<EOL>"}
{"signature": "if (original.type is IrDynamicType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IrTypeOperator.IMPLICIT_DYNAMIC_CAST<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedMainClasses =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classesWithoutJava + setOf(<EOL>"}
{"signature": "if (scope.isInlinedLambda && scope.inComposableCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>leavingInlinedLambda = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>scope.hasInlineEarlyReturn = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (requested.id.id.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>useModule(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val preVisit =", "body": "hashSetOf<Path>()<EOL>"}
{"signature": "val deprecatedMessage =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (capturedValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>localContext.capturedValueToParameter[capturedValue.owner] = it<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val varUsedIn =", "body": "localVariables.associate { it to mutableSetOf<Int>() }<EOL>"}
{"signature": "for (i in (intLow() until intHigh()).reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val capturedTypeCache =", "body": "mutableMapOf<ConeCapturedType, IrType>()<EOL>"}
{"signature": "val followVisitOption =", "body": "setOf(FileVisitOption.FOLLOW_LINKS)<EOL>"}
{"signature": "val originalIrClass =", "body": "objectSymbol.owner<EOL>"}
{"signature": "val matchingTypeConstructors =", "body": "firstTypeParameterConstructors<EOL>"}
{"signature": "var trivialPredecessor =", "body": "label.previous<EOL>"}
{"signature": "for (target in targets) {", "body": "<EOL><INDENT><INDENT><INDENT>put(target, this@toMap[target])<EOL><INDENT><INDENT>}"}
{"signature": "val errorArgument =", "body": "arguments[<NUM_LIT>]<EOL>"}
{"signature": "val dontRecordToTraceAsIs =", "body": "diagnostic is ResolutionDiagnostic && diagnostic !is VisibilityError<EOL>"}
{"signature": "val registrarsNames =", "body": "HashSet<String>()<EOL>"}
{"signature": "var ancestor =", "body": "parent<EOL>"}
{"signature": "val functionRef =", "body": "ReferenceTranslator.translateAsValueReference(getAccessDescriptorIfNeeded(), context)<EOL>"}
{"signature": "fun foo(string: String) {", "body": "<EOL><INDENT>println()<EOL><INDENT><expr>string.length</expr><EOL>}"}
{"signature": "val actualManifest =", "body": "klibRoot.klibFile.resolve(<STR_LIT>)<EOL>"}
{"signature": "var global =", "body": "<STR_LIT><EOL>"}
{"signature": "fun target(target: String, builder: TargetBuilder.() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>return target(parseCommonizerTarget(target), builder)<EOL><INDENT><INDENT>}"}
{"signature": "if (!isKotlinBuilderInDumbMode && !kotlinContext.rebuildingAllKotlin && kotlinChunk.isEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>markAdditionalFilesForInitialRound(kotlinChunk, chunk, kotlinContext)<EOL><INDENT><INDENT>}"}
{"signature": "fun onUseAsTainted() {", "body": "<EOL><INDENT><INDENT><INDENT>hazard = true<EOL><INDENT><INDENT>}"}
{"signature": "when (constraint) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> true<EOL><INDENT><INDENT><INDENT>TypeAdaptationConstraint.FORCE_BOXING -> irType.isNullable()<EOL><INDENT><INDENT><INDENT>TypeAdaptationConstraint.KEEP_UNBOXED -> !irType.isNullable()<EOL><INDENT><INDENT><INDENT>TypeAdaptationConstraint.BOX_PRIMITIVE -> irType.getPrimitiveType() != null<EOL><INDENT><INDENT><INDENT>TypeAdaptationConstraint.CONFLICT -> false<EOL><INDENT><INDENT>}"}
{"signature": "val ctx<NUM_LIT> =", "body": "CtxA(<NUM_LIT>) + CtxB(<NUM_LIT>) + CtxC(<NUM_LIT>) // different"}
{"signature": "val ktCondition =", "body": "entry.conditions.first()<EOL>"}
{"signature": "var initOrder =", "body": "<STR_LIT><EOL>"}
{"signature": "val substitutedAttribute =", "body": "attr.transformOrNull(transform) ?: continue<EOL>"}
{"signature": "val equalsContextInfo =", "body": "InfoCollector(ESReturns(ESConstants.trueValue), builtIns).collectFromSchema(effects)<EOL>"}
{"signature": "if (!exhaustive) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.discard()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeParametersById =", "body": "typeParameterProtos.map { Pair(it.id, nameResolver.getName(it.name)) }.toMap()<EOL>"}
{"signature": "fun doSmth(<!UNUSED_PARAMETER!>s<!>: String) {", "body": "}<EOL><INDENT>fun doSmth(<!UNUSED_PARAMETER!>a<!>: Any) {}"}
{"signature": "val jdk<NUM_LIT> =", "body": "mapOf(<STR_LIT> to KtTestUtil.getJdk<NUM_LIT>Home().absolutePath)<EOL>"}
{"signature": "val delegateToIrFunctionSymbol =", "body": "declarationStorage.getIrFunctionSymbol(<EOL>"}
{"signature": "val sizeField =", "body": "structGep(runtime.arrayHeaderType, arrayHeaderSlot, <NUM_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val stackTransformations =", "body": "mutableSetOf<AbstractInsnNode>()<EOL>"}
{"signature": "for (i in <NUM_LIT>.lastIndex) {", "body": "<EOL><INDENT><INDENT>val e = this[i]<EOL><INDENT><INDENT>if (comparator.compare(min, e) > <NUM_LIT>) min = e<EOL><INDENT>}"}
{"signature": "for ((index, declaration) in designation.path.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>withFirEntry(<STR_LIT>, declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val COROUTINES_METADATA_METHOD_NAME_JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!isContainsOnlyUnsignedTypes()) {", "body": "<EOL><INDENT><INDENT><INDENT>result += builtIns.numberType<EOL><INDENT><INDENT>}"}
{"signature": "val seq =", "body": "sequenceOf(<NUM_LIT> to 'a', <NUM_LIT> to 'b', <NUM_LIT> to 'c')<EOL>"}
{"signature": "val SETUP_JSON_URL =", "body": "<STR_LIT>"}
{"signature": "fun testReplaceAnnotationClassWithInterface() {", "body": "<EOL><INDENT><INDENT>val library<NUM_LIT> = compileLibrary(<STR_LIT>)<EOL><INDENT><INDENT>val usage = compileLibrary(<STR_LIT>, extraClassPath = listOf(library<NUM_LIT>))<EOL><INDENT><INDENT>val library<NUM_LIT> = compileLibrary(<STR_LIT>)<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(usage, library<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "package prefix when the kotlin.", "body": "AutoCloseable typealias is introduced and KT<NUM_LIT> is fixed.<EOL>"}
{"signature": "fun foo(t: VertLikeTable) {", "body": "<EOL><INDENT>t.foo()<EOL>}"}
{"signature": "fun apply(target: Project) {", "body": "<EOL><INDENT><INDENT>target.extensions.create(<STR_LIT>, SamWithReceiverExtension::class.java)<EOL><INDENT><INDENT>registry.register(SamWithReceiverModelBuilder())<EOL><INDENT>}"}
{"signature": "if (DescriptorVisibilities.isPrivate(visibility)) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Remove all private fields.<INDENT><INDENT><INDENT><INDENT>return field<INDENT><INDENT><INDENT>}"}
{"signature": "val typeSubstitution =", "body": "(overriddenType.classifierOrFail.owner as IrClass).typeParameters<EOL>"}
{"signature": "val configurationFlags =", "body": "parseAnalysisFlags(flags)<EOL>"}
{"signature": "if (whenEntryExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>generateInstructions(whenEntryExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>branches.add(whenEntryExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classesField =", "body": "ClassLoader::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "val PLUGIN_OPTION_FORMAT =", "body": "<STR_LIT><EOL>"}
{"signature": "val contractSerializer =", "body": "FirContractSerializer()<EOL>"}
{"signature": "if (parceler != null && !parceler.isError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return parceler<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val substitutionArguments =", "body": "mutableListOf<TypeProjection>()<EOL>"}
{"signature": "val psiAnnotation =", "body": "modifierList.findAnnotation(qualifier)<EOL>"}
{"signature": "val fst =", "body": "p.getFst()<EOL>"}
{"signature": "val isInlineFunction =", "body": "false<EOL>"}
{"signature": "fun visitLiteralExpressionNode(node: LiteralExpressionNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLiteralExpressionNode(node)<EOL><INDENT>}"}
{"signature": "val constructClassTypeImport =", "body": "ArbitraryImportable(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val indexedDeclarations =", "body": "arrayOfNulls<DeclarationIrTableMemoryReader>(icData.size)<EOL>"}
{"signature": "val doubleColonLhs =", "body": "(context.callPosition as? CallPosition.CallableReferenceRhs)?.lhs<EOL>"}
{"signature": "val useBuilderInferenceWithoutAnnotation =", "body": "<EOL><INDENT><INDENT><INDENT>languageVersionSettings.supportsFeature(LanguageFeature.UseBuilderInferenceWithoutAnnotation)<EOL>"}
{"signature": "while (e != null) {", "body": "<INDENT><INDENT>// Smart cast due to the loop condition<INDENT><INDENT>if (!e.doSomething())<INDENT><INDENT><INDENT>break<INDENT><INDENT>// We still have smart cast here despite of a break<INDENT><INDENT>e = e.next()<INDENT>}"}
{"signature": "val test_valWithAccessors =", "body": "::valWithAccessors<EOL>"}
{"signature": "fun generateStubsForObjCClass(objCClass: ObjCClass) {", "body": "<EOL><INDENT><INDENT>addStubs(ObjCClassStubBuilder(buildingContext, objCClass).build())<EOL><INDENT>}"}
{"signature": "val effectiveSet =", "body": "own?.let { (this + own).toSet() } ?: this<EOL>"}
{"signature": "if (!areCompatibleClassVisibilities(expectClassSymbol, actualClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Incompatible.Visibility<EOL><INDENT><INDENT>}"}
{"signature": "val outerThisAccessors =", "body": "mapping.outerThisCacheAccessors<EOL>"}
{"signature": "val FORMAT_VERSION_NODE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val pre =", "body": "arg<NUM_LIT>(<STR_LIT>)<EOL>"}
{"signature": "val threadsCount =", "body": "context.config.threadsCount<EOL>"}
{"signature": "val pseudoInsn =", "body": "parsePseudoInsnOrNull(marker)<EOL>"}
{"signature": "fun syncOptionsAsConvention(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformCommonCompilerOptions,<EOL><INDENT><INDENT>into: org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformCommonCompilerOptions,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerOptionsHelper.syncOptionsAsConvention(from, into)<EOL><INDENT>}"}
{"signature": "val defaults =", "body": "KtxNameConventions.DEFAULT_PARAMETER.identifier<EOL>"}
{"signature": "val sourceClassesFQNs =", "body": "HashSet<FqName>()<EOL>"}
{"signature": "if (mainModule.testModule.directives.contains(COPY_RESOLUTION_MODE)) {", "body": "<EOL><INDENT><INDENT><INDENT>fakeKtFile.originalFile = mainFile<EOL><INDENT><INDENT>}"}
{"signature": "val spilledVariables =", "body": "mutableSetOf<Pair<String, String>>()<EOL>"}
{"signature": "val framework =", "body": "it.binaries.getFramework(POD_FRAMEWORK_PREFIX, requestedBuildType)<EOL>"}
{"signature": "var holdCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val mutableSetSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>mutableSetOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).size<!><EOL>"}
{"signature": "val expandedNothing =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declaration.returnTypeRef.coneType.fullyExpandedType(context.session).isNothing<EOL>"}
{"signature": "val extraSize =", "body": "<EOL><INDENT><INDENT>getUnsignedShort(zipEntryDescription.offsetInFile + LOCAL_FILE_HEADER_EXTRA_OFFSET)<EOL>"}
{"signature": "var currentlyMissing =", "body": "required<EOL>"}
{"signature": "fun visitConstructorDescriptor(constructorDescriptor: ConstructorDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>collectParents(constructorDescriptor)<EOL><INDENT><INDENT><INDENT>setHashIdAndDescriptionFor(constructorDescriptor, isPropertyAccessor = false)<EOL><INDENT><INDENT><INDENT>platformSpecificConstructor(constructorDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val jvmCallbacksDisposeHelper =", "body": "ThreadSafeDisposableHelper(<EOL>"}
{"signature": "val visitedElements =", "body": "mutableSetOf<FirElement>()<EOL>"}
{"signature": "val expectedReturnType =", "body": "expectedFun.returnType<EOL>"}
{"signature": "for (topLevelClass in generateSequence(fqName) {", "body": "it.parentOrNull() }"}
{"signature": "val kFunctionDescriptionSymbol =", "body": "symbols.kFunctionDescription<EOL>"}
{"signature": "val perModuleOutputDir =", "body": "getOutputDir(originalFile, testGroupOutputDirForPerModuleCompilation, stopFile)<EOL>"}
{"signature": "val getterOverridesExternal =", "body": "property.getter?.overridesExternal() == true<EOL>"}
{"signature": "val classFileStructure =", "body": "ClassFileStructure(classFile.toURI(), type)<EOL>"}
{"signature": "val deprecationAnnotationByUseSite =", "body": "extractDeprecationAnnotationInfoPerUseSite(fromJava, session, versionRequirements)<EOL>"}
{"signature": "val deserializedDescriptorResolver =", "body": "DeserializedDescriptorResolver()<EOL>"}
{"signature": "val remover =", "body": "ExpectDeclarationRemover(context.ir.symbols.externalSymbolTable, true)<EOL>"}
{"signature": "val shortType =", "body": "short.toIrType()<EOL>"}
{"signature": "val useBSourceFile =", "body": "javaSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "if (callee.extensionReceiverParameter != null && funRef.extensionReceiver == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irCall.extensionReceiver = getValue(valueParameters[i++])<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val conflictedTypeParameters =", "body": "interfaceTypeParameters.filter { it.name.asString() in functionTypeParameterNames }<EOL>"}
{"signature": "val additionalInnerClasses =", "body": "mutableListOf<ClassDescriptor>()<EOL>"}
{"signature": "if (PackagePartClassUtils.getFilePartShortName(file.name) == name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>jvmNameEntry?.delete()<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (classId == StandardClassIds.Array) {", "body": "<EOL><INDENT><INDENT>return type.typeArguments.first()<EOL><INDENT>}"}
{"signature": "val parcel =", "body": "Parcel.obtain()<EOL>"}
{"signature": "fun visitThrow(expression: IrThrow, data: IrDeclaration?) {", "body": "<EOL><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT>expression.value.accept(this, data)<EOL><INDENT>}"}
{"signature": "val substitutedOuterClassType =", "body": "knownSubstitutor?.substitute(outerClassType, Variance.INVARIANT) ?: outerClassType<EOL>"}
{"signature": "val plainName =", "body": "name.name<EOL>"}
{"signature": "val predefinedTypes =", "body": "listOf(<EOL>"}
{"signature": "if (this@foo.i != null) {", "body": "<EOL><INDENT><INDENT>useInt(this.i)<EOL><INDENT><INDENT>useInt(i)<EOL><INDENT>}"}
{"signature": "val usedCaptureFields =", "body": "createFieldsForCapturedValues(localClassContext)<EOL>"}
{"signature": "val isolatedList =", "body": "System.getenv(<STR_LIT>)<EOL>"}
{"signature": "fun kotlinOptions(fn: KotlinCommonToolOptions.() -> Unit) {", "body": "<EOL><INDENT><INDENT>kotlinOptions.fn()<EOL><INDENT>}"}
{"signature": "val areTypeVariablesRelated =", "body": "dependencyProvider.areVariablesDependentShallowly(<EOL>"}
{"signature": "val hasDelegateExpressionOrInitializer =", "body": "ktDeclaration is KtProperty && ktDeclaration.hasDelegateExpressionOrInitializer()<EOL>"}
{"signature": "if (outerClassName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>constructorInitializer.parameters.add(<NUM_LIT>, JsParameter(outerClassName))<EOL><INDENT><INDENT><INDENT>leadingArgs += outerClassName.makeRef()<EOL><INDENT><INDENT>}"}
{"signature": "val _boolean =", "body": "getPublicSignature(StandardNames.BUILT_INS_PACKAGE_FQ_NAME, <STR_LIT>)<EOL>"}
{"signature": "for (approx in listOf(<NUM_LIT>F)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertAlmostEquals(approx, atanh(tanh(approx)))<EOL><INDENT><INDENT>}"}
{"signature": "var entryBlock =", "body": "BasicBlock()<EOL>"}
{"signature": "val sss =", "body": "<!NO_COMPANION_OBJECT!>X<!><EOL>"}
{"signature": "fun resumeContinuationWithException(continuation: Continuation<Any?>, exception: Throwable) {", "body": "<EOL><INDENT>continuation.resumeWithException(exception)<EOL>}"}
{"signature": "val actualPathSelf =", "body": "(value as Array<*>)[<NUM_LIT>].toString().replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "package parts which have a different JVM package from the Kotlin package (with the help of @JvmPackageName)<EOL>.", "body": ""}
{"signature": "val callCandidateResolutionContext =", "body": "CallCandidateResolutionContext.create(<EOL>"}
{"signature": "fun printStackTrace(printStream: PrintStream) {", "body": "<EOL><INDENT><INDENT>val writer = PrintWriter(printStream)<EOL><INDENT><INDENT>this.printStackTrace(writer)<EOL><INDENT><INDENT>writer.flush()<EOL><INDENT>}"}
{"signature": "fun testMissingDependencySimple() {", "body": "<EOL><INDENT><INDENT>doTestBrokenLibrary(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val difference =", "body": "Visibilities.compare(current, it.visibility)<EOL>"}
{"signature": "val segments =", "body": "fqName.asString()<EOL>"}
{"signature": "var varFromThisFunction =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!super<ArrayList>.add(el)) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Exception()<EOL><INDENT><INDENT>}"}
{"signature": "val cacheField =", "body": "declaration.getCacheField()<EOL>"}
{"signature": "val NEXT_CHAR =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val rootPackageName =", "body": "program.scope.findName(Namer.getRootPackageName())<EOL>"}
{"signature": "package from sources or included libs.", "body": "<EOL>"}
{"signature": "for (var i = <NUM_LIT>; i < this.length; i++) {", "body": "<EOL><INDENT><INDENT>this[i] = value;<EOL><INDENT>}"}
{"signature": "for (annotation in resolvedAnnotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val annotationElement = annotation.source.getPsi() ?: continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.UNSUPPORTED.on(annotationElement, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val inlineCallInfos =", "body": "LinkedList<JsCallInfo>()<EOL>"}
{"signature": "val distributionTask =", "body": "registerSubTargetTask<Copy>(<EOL>"}
{"signature": "val UNRESOLVED_WITH_TARGET =", "body": "DebugInfoDiagnosticFactory<NUM_LIT>(<STR_LIT>)<EOL>"}
{"signature": "val currentModifierList =", "body": "modifierList<EOL>"}
{"signature": "when (content.kind) {", "body": "<EOL><INDENT><INDENT><INDENT>null, JsProtoBuf.Library.Kind.PLAIN -> ModuleKind.PLAIN<EOL><INDENT><INDENT><INDENT>JsProtoBuf.Library.Kind.AMD -> ModuleKind.AMD<EOL><INDENT><INDENT><INDENT>JsProtoBuf.Library.Kind.COMMON_JS -> ModuleKind.COMMON_JS<EOL><INDENT><INDENT><INDENT>JsProtoBuf.Library.Kind.UMD -> ModuleKind.UMD<EOL><INDENT><INDENT>}"}
{"signature": "val enterFrameFunction =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "fun test<NUM_LIT>(ab_c: a.b.c) {", "body": "<EOL><INDENT>ab_c.ab_c()<EOL>}"}
{"signature": "val argumentWithKotlinRetention =", "body": "originalLightAnnotation.annotationApplicationWithArgumentsInfo<EOL>"}
{"signature": "val KOTLIN_SUPPRESS_GRADLE_PLUGIN_WARNINGS_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!skipReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>generateReceiver(qualifiedAccessExpression)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinBinaryCanonicalFile =", "body": "newFile(<STR_LIT>)<EOL>"}
{"signature": "fun testCompareAll() {", "body": "<EOL><INDENT><INDENT>compareAll()<EOL><INDENT>}"}
{"signature": "if (upperBounds.size > <NUM_LIT> || lowerBounds.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!checkParcelableType(type, customParcelerTypes, session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(property.returnTypeRef.source, KtErrorsParcelize.PARCELABLE_TYPE_NOT_SUPPORTED, context)<EOL><INDENT><INDENT>}"}
{"signature": "val leftIsBoxed =", "body": "!AsmUtil.isPrimitive(leftType)<EOL>"}
{"signature": "var endIndex =", "body": "startIndex + notExpectedSubString.length<EOL>"}
{"signature": "val wxx<NUM_LIT> =", "body": "<STR_LIT> + <!NO_ELSE_IN_WHEN!>when<!> { true -> <NUM_LIT> }<EOL>"}
{"signature": "for (i in <NUM_LIT>.decompHangulIndex - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.append(Char.toChars(decompHangul[i]))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val testCallableRefLHSObject<NUM_LIT> =", "body": "`___`::toString<EOL>"}
{"signature": "import <!ELEMENT!><EOL>.", "body": ""}
{"signature": "val dirNames =", "body": "listOf(null, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val functionTypeInterfacePackageFiles =", "body": "hashSetOf<IrFile>()<EOL>"}
{"signature": "val latestVersionNode =", "body": "XPathFactory.newInstance().newXPath()<EOL>"}
{"signature": "val STRING_INTEROP_MEM_BUFFER_SIZE =", "body": "<NUM_LIT>_<NUM_LIT> // <NUM_LIT> page <NUM_LIT>KiB"}
{"signature": "val linkDefinitionRegExp =", "body": "Regex(pattern = <STR_LIT>)<EOL>"}
{"signature": "val SUSPEND_FUNCTION_MARK =", "body": "<STR_LIT><EOL>"}
{"signature": "val pckg<NUM_LIT> =", "body": "Reflection.getOrCreateKotlinPackage(A::class.java)<EOL>"}
{"signature": "for (privateType in sourceInfo.getPrivateTypes()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val dependants = nonTransitiveCache[privateType] ?: mutableSetOf()<EOL><INDENT><INDENT><INDENT><INDENT>dependants.add(sourceInfo.sourceFile)<EOL><INDENT><INDENT><INDENT><INDENT>nonTransitiveCache[privateType] = dependants<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val RESULT =", "body": "AtomicReferenceFieldUpdater.newUpdater<SafeContinuation<*>, Any?>(<EOL>"}
{"signature": "val PACKAGE_TYPE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (descriptor.isCleanDescriptor()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>stubGenerator.generateMemberStub(descriptor)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFiltersNegativeGlob() {", "body": "<EOL><INDENT><INDENT>doTestFilters(Filter(listOf(), listOf(<STR_LIT>, <STR_LIT>), listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)))<EOL><INDENT>}"}
{"signature": "val insnOpcode =", "body": "insnNode.opcode<EOL>"}
{"signature": "val sanitizer =", "body": "computeSanitizer(enforcedProperties)<EOL>"}
{"signature": "val byVarDecoded =", "body": "Json.decodeFromString<DelegatedByObjectProperty>(byVarJsonStr)<EOL>"}
{"signature": "if (this is ConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (this.constructedClass.isArray && !forSwift) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun test(str: String, id: Id<String>) {", "body": "<EOL><INDENT>if (id.id != <STR_LIT> && str != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val kInitFuncType =", "body": "LlvmFunctionSignature(LlvmRetType(llvm.voidType), listOf(LlvmParamType(llvm.int<NUM_LIT>Type), LlvmParamType(pointerType(kMemoryStateType))))<EOL>"}
{"signature": "while (semaphore.value < <NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun dSet(s: String) {", "body": "d = s }"}
{"signature": "val classCallable =", "body": "current.overriddenDescriptors.firstOrNull { !isInterface(it.containingDeclaration) }<EOL>"}
{"signature": "var successfulBuildCacheFiles =", "body": "emptyMap<String, Int>()<EOL>"}
{"signature": "fun doTest(fileName: String) {", "body": "<EOL><INDENT><INDENT>doTestCompiledKotlinWithTypeTable(fileName)<EOL><INDENT>}"}
{"signature": "val ourAnnotations =", "body": "attributes?.memoryOptimizedFilterIsInstance<IrConstructorCall>()<EOL>"}
{"signature": "fun reportInvalidResolver() {", "body": "<EOL><INDENT><INDENT>throw InvalidResolverException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val sirType =", "body": "parameter.returnType.translateType(<EOL>"}
{"signature": "val myParam =", "body": "name<EOL>"}
{"signature": "val availableDiagnostics =", "body": "diagnosedRangesToDiagnosticNames[positionedElement.startOffset..positionedElement.endOffset]<EOL>"}
{"signature": "fun testFileSystemAcceptsLinuxPath() {", "body": "<EOL><INDENT><INDENT>val resolver = FileSystemDependenciesResolver()<EOL><INDENT><INDENT>resolver.assertAcceptsArtifact(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val changesElement =", "body": "data.getOptionalField(<STR_LIT>)<EOL>"}
{"signature": "val shouldBeTypeVariableFlexible =", "body": "<EOL><INDENT><INDENT><INDENT>if (useRefinedBoundsForTypeVariableInFlexiblePosition())<EOL>"}
{"signature": "fun visitLoopJump(loopJump: FirLoopJump) {", "body": "<EOL><INDENT><INDENT>visitElement(loopJump)<EOL><INDENT>}"}
{"signature": "fun mkdirs() {", "body": "<EOL><INDENT><INDENT>binaryDir.mkdirs()<EOL><INDENT>}"}
{"signature": "val isOnTeamcity =", "body": "System.getenv(<STR_LIT>) != null<EOL>"}
{"signature": "val label =", "body": "Label()<EOL>"}
{"signature": "package suspendFunctionAssertionDisabled<EOL>.", "body": ""}
{"signature": "val binaryLibraryName =", "body": "binaryLibrary.libraryFile.nameWithoutExtension.substringAfter(<STR_LIT>)<EOL>"}
{"signature": "if (lhs.type.isInlinedNative() && rhs.type.isInlinedNative()) {", "body": "<INDENT><INDENT><INDENT>// Achieve the same behavior as with JVM BE: if both sides of `===` are values, then compare by value:<INDENT><INDENT><INDENT>lowerEqeq(expression)<INDENT><INDENT><INDENT>// Note: such comparisons are deprecated.<INDENT><INDENT>}"}
{"signature": "if (compare == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CANNOT_CHANGE_ACCESS_PRIVILEGE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor.visibility,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor.containingDeclaration<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!needsRegistration) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun register(asmNode: Any, fqName: String) {", "body": "<EOL><INDENT><INDENT>val psiElement = kaptContext.origins[asmNode]?.element ?: return<EOL><INDENT><INDENT>register(fqName, psiElement)<EOL><INDENT>}"}
{"signature": "val multiplatformCommonImplFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val npmCachesSetupTask =", "body": "nodeJsTaskProviders.npmCachesSetupTaskProvider<EOL>"}
{"signature": "if (symbols.interopCEnumVar in parent.superClasses && isPropertyAccessor) {", "body": "<EOL><INDENT><INDENT>(propertyIfAccessor as IrProperty).name.asString() == <STR_LIT><EOL><INDENT>}"}
{"signature": "val tmp_x =", "body": "x<EOL>"}
{"signature": "val SKIP_MUTED_TESTS =", "body": "java.lang.Boolean.getBoolean(<STR_LIT>)<EOL>"}
{"signature": "val calleePackageName =", "body": "calleeOn.getPackage()<EOL>"}
{"signature": "fun str() {", "body": "}<EOL>@Synchronized fun sync() {}"}
{"signature": "fun mangleExtensionReceiverParameter(vpBuilder: StringBuilder, param: ReceiverParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>mangleType(vpBuilder, param.type, null)<EOL><INDENT>}"}
{"signature": "val typeDeserializer =", "body": "context.typeDeserializer<EOL>"}
{"signature": "val nextCall =", "body": "get(BindingContext.LOOP_RANGE_NEXT_RESOLVED_CALL, loopRange)<EOL>"}
{"signature": "val MAIN_COMPILATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun appendRange(source: String, fromIndex: Int, toIndex: Int) {", "body": "<EOL><INDENT><INDENT>val addLen = toIndex - fromIndex<EOL><INDENT><INDENT>val oldLen = length<EOL><INDENT><INDENT>val newLen = oldLen + addLen<EOL><INDENT><INDENT>if (newLen > buf.size) buf = buf.copyOf(newLen.coerceAtLeast(<NUM_LIT> * buf.size))<EOL><INDENT><INDENT>for (i in <NUM_LIT> until addLen) buf[oldLen + i] = source[fromIndex + i]<EOL><INDENT><INDENT>length += addLen<EOL><INDENT>}"}
{"signature": "import User.", "body": "UserInfo<EOL>"}
{"signature": "fun visitFunctionCallNode(node: FunctionCallNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionCallNode(node)<EOL><INDENT>}"}
{"signature": "val delegationConstructor =", "body": "resolvedCall.resultingDescriptor<EOL>"}
{"signature": "if (!fqName.isRoot) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(fqName)<EOL><INDENT><INDENT>}"}
{"signature": "val returnArguments =", "body": "returnArgumentsInfo.nonErrorArguments<EOL>"}
{"signature": "val unboundFunctionParameters =", "body": "functionParameters - boundFunctionParameters<EOL>"}
{"signature": "when (someBoolean) {", "body": "<INDENT><INDENT> *<INDENT><INDENT>   myT -> <NUM_LIT><INDENT><INDENT> *<INDENT><INDENT>   myF -> <NUM_LIT><INDENT><INDENT> *<INDENT><INDENT>   true -> <NUM_LIT><INDENT>// DUPLICATE_LABEL_IN_WHEN<INDENT><INDENT> *<INDENT><INDENT>   false -> <NUM_LIT>   // DUPLICATE_LABEL_IN_WHEN<INDENT><INDENT> *<INDENT>   }"}
{"signature": "val lambdaTarget =", "body": "parameter.target<EOL>"}
{"signature": "val referenceFilenames =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun visitConstantValue(name: Name?, value: ConstantValue<*>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultValue = value<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val convertedTypeByCandidate =", "body": "<EOL><INDENT><INDENT><INDENT>callComponents.samConversionResolver.getFunctionTypeForPossibleSamType(<EOL>"}
{"signature": "fun check(expression: FirLoop, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>if (expression is FirErrorLoop) return<EOL><INDENT><INDENT>val condition = expression.condition<EOL><INDENT><INDENT>checkCondition(condition, context, reporter)<EOL><INDENT>}"}
{"signature": "val implicitReceivers =", "body": "towerContextProvider.getClosestAvailableParentContext(psi)?.implicitReceiverStack ?: return false<EOL>"}
{"signature": "val makeDefinitionsProvider =", "body": "definitionProvider?.let { { it } }<EOL>"}
{"signature": "val isError =", "body": "this is IrErrorExpression<EOL>"}
{"signature": "while (x != <NUM_LIT>) {", "body": "}"}
{"signature": "var parsingStartTimeStamp =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun main(a: A, ml: MutableList<String>, l: List<String>) {", "body": "<EOL><INDENT>a.foo(ml)<EOL><INDENT>a.foo(<!TYPE_MISMATCH!>l<!>)<EOL><EOL><INDENT>a.bar(<!TYPE_MISMATCH!>ml<!>)<EOL><INDENT>a.bar(<!TYPE_MISMATCH!>l<!>)<EOL>}"}
{"signature": "if (completionMode != ConstraintSystemCompletionMode.PARTIAL) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Stage <NUM_LIT>: report <STR_LIT> for uninferred type variables<INDENT><INDENT><INDENT><INDENT>reportNotEnoughTypeInformation(<INDENT><INDENT><INDENT><INDENT><INDENT>completionMode, topLevelAtoms, topLevelType, postponedArguments<INDENT><INDENT><INDENT><INDENT>)<INDENT><INDENT><INDENT>}"}
{"signature": "val pre<NUM_LIT>Key =", "body": "ProjectPathWithBuildPath(moduleId.projectPath, moduleId.build.buildNameCompat)<EOL>"}
{"signature": "val newReturnTarget =", "body": "oldReturnTarget.transformed ?: return expression<EOL>"}
{"signature": "val resourcesSourceSetWalk =", "body": "SourceSetWalk(<EOL>"}
{"signature": "val streamBuilder =", "body": "{ Stream.of(*data) }<EOL>"}
{"signature": "fun accept(a: A<String>) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>val b = B<String?>()<EOL><INDENT>accept(b)<EOL>}"}
{"signature": "fun reportForTypeAliasExpansion(callElement: KtElement, substitutedBound: KotlinType) {", "body": "<EOL><INDENT><INDENT>trace.reportDiagnosticOnce(diagnosticForTypeAliases.on(callElement, substitutedBound, argumentType, typeParameterDescriptor))<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until rnum) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>list.removeAt(list.size - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testKt<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>val res = evalFile(File(<STR_LIT>))<EOL><INDENT><INDENT>assertSucceeded(res)<EOL><INDENT>}"}
{"signature": "val currentClassProperty =", "body": "context.classDescriptor!!.unsubstitutedMemberScope<EOL>"}
{"signature": "val asd =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun fromInterface(id: Id) {", "body": "<EOL><INDENT><INDENT>if (id.id != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "fun printJson(replacer: () -> Any?)// MODULE: platform()()(common)// FILE: platform.ktactual fun printJson(replacer: () -> Any?) {", "body": "}actual fun printJson(pretty: Boolean) {}"}
{"signature": "if (value.type.isUnit()) {", "body": "<EOL><INDENT><INDENT><INDENT>codegen.theUnitInstanceRef.llvm<EOL><INDENT><INDENT>}"}
{"signature": "val variableResult =", "body": "PartialCallResolutionResult(variable.resolvedCall, listOf(), variable.getSystem())<EOL>"}
{"signature": "val jsModuleImports =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val writer =", "body": "ClassWriter(JvmStringTable())<EOL>"}
{"signature": "val baseClassCtor =", "body": "irScript.baseClass?.classOrNull?.owner?.constructors?.firstOrNull()<EOL>"}
{"signature": "val llvmAttributeKindIdCache =", "body": "mutableMapOf<LlvmFunctionAttribute, LLVMAttributeKindId>()<EOL>"}
{"signature": "fun testKotlinStdLibJs() {", "body": "<EOL><INDENT><INDENT>doTestKotlinStdLibResolve(JsPlatforms.defaultJsPlatform, PathUtil.kotlinPathsForDistDirectory.jsStdLibKlibPath.toPath())<EOL><INDENT>}"}
{"signature": "fun afterExecute(task: Task, taskState: TaskState) {", "body": "<EOL><INDENT><INDENT> tasksTimes[task.name] = (System.nanoTime() - startTime) / <NUM_LIT><EOL><INDENT> }"}
{"signature": "val firCodeFragment =", "body": "firFile.codeFragment<EOL>"}
{"signature": "val dceOutputDir =", "body": "JsEnvironmentConfigurator.getJsArtifactsOutputDir(testServices, TranslationMode.FULL_PROD_MINIMIZED_NAMES)<EOL>"}
{"signature": "if (expandedClass.classKind == ClassKind.OBJECT || expandedClass.classKind == ClassKind.ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val p<NUM_LIT>NativeMain =", "body": "createKtModule(<STR_LIT>, directDependsOnDependencies = listOf(p<NUM_LIT>CommonMain))<EOL>"}
{"signature": "when(jsons.size) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><NUM_LIT> -> jsons[<NUM_LIT>]<EOL><INDENT><INDENT>else -> jsons.joinToString(prefix = <STR_LIT>, postfix = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val sourceCompiler =", "body": "IrSourceCompilerForInline(codegen.state, expression, expression.symbol.owner, codegen, data)<EOL>"}
{"signature": "val jsClassOrThis =", "body": "expression.getValueArgument(<NUM_LIT>)<EOL>"}
{"signature": "val baseBenchmark =", "body": "BenchmarkResult.create(data)<EOL>"}
{"signature": "fun compilerFlags(): List<String><EOL><EOL><INDENT>object DefaultPath : Msvc() {", "body": "<EOL><INDENT><INDENT>override fun compilerFlags(): List<String> = emptyList()<EOL><INDENT>}"}
{"signature": "if (y is B.C<!WRONG_NUMBER_OF_TYPE_ARGUMENTS!><*><!>) {", "body": "}"}
{"signature": "if (refValue.localVar == null || refValue.valueType.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>refValue.localVarIndex = methodNode.maxLocals<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>methodNode.maxLocals += refValue.valueType.size<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val rnum =", "body": "list.size - <NUM_LIT> - index<EOL>"}
{"signature": "val thenEmpty =", "body": "isEmpty(x.thenStatement)<EOL>"}
{"signature": "fun main(a: A?) {", "body": "<EOL><INDENT>val lb = a?.b<EOL><INDENT>if (lb !is C) return<EOL><EOL><INDENT>a.foo().length<EOL>}"}
{"signature": "if (values == null) {", "body": "<EOL><INDENT><INDENT><INDENT>versionManager.writeVersion(null)<EOL><INDENT><INDENT><INDENT>Files.deleteIfExists(actualComponentsFile)<EOL><INDENT><INDENT>}"}
{"signature": "var alternateFlows =", "body": "_alternateFlows<EOL>"}
{"signature": "import cstdio.", "body": "*<EOL>"}
{"signature": "val SUBCLASS_OPT_IN_REQUIRED_CLASS_ID =", "body": "ClassId.topLevel(SUBCLASS_OPT_IN_REQUIRED_FQ_NAME)<EOL>"}
{"signature": "fun testNoConcreteDependencyVersionsInManifestsOfRegularKlibs(gradleVersion: GradleVersion, @TempDir tempDir: Path) {", "body": "<EOL><INDENT><INDENT>buildProjectsForKT<NUM_LIT>(<EOL><INDENT><INDENT><INDENT>baseDir = <STR_LIT>,<EOL><INDENT><INDENT><INDENT>tempDir, gradleVersion<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (!blockBody) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(RETURN_IN_FUNCTION_WITH_EXPRESSION_BODY.on(expression))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val groupsNeeded =", "body": "(bytesNeeded + bytesPerGroup - <NUM_LIT>) / bytesPerGroup<EOL>"}
{"signature": "if (a is String) {", "body": "<EOL><INDENT><INDENT><expr>a</expr><EOL><INDENT>}"}
{"signature": "if (isAtBufferEnd) {", "body": "<EOL><INDENT><INDENT><INDENT>isXmlIncomplete = true<EOL><INDENT><INDENT><INDENT>byteBuilder = ByteArrayOutputStream()<EOL><INDENT><INDENT><INDENT>curBytePos = <NUM_LIT><EOL><INDENT><INDENT><INDENT>isLastByteProcessed = true<EOL><INDENT><INDENT>}"}
{"signature": "fun test_distribution_commonization_throughput() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val resultRef =", "body": "AtomicReference<Any?>(null)<EOL>"}
{"signature": "if (properties.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>error(<EOL><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>properties.joinToString(<STR_LIT>, transform = IrProperty::render)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "var  i =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun unzip() {", "body": "<EOL><INDENT><INDENT>val seq = sequenceOf(<NUM_LIT> to 'a', <NUM_LIT> to 'b', <NUM_LIT> to 'c')<EOL><INDENT><INDENT>val (ints, chars) = seq.unzip()<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), ints)<EOL><INDENT><INDENT>assertEquals(listOf('a', 'b', 'c'), chars)<EOL><INDENT>}"}
{"signature": "when (index) {", "body": "<EOL><INDENT><INDENT>in <NUM_LIT>L..<NUM_LIT>L -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "fun visitLongValue(value: LongValue, data: Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>type = Type.LONG<EOL><INDENT><INDENT><INDENT><INDENT>intValue = value.value<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun dispose() {", "body": "<EOL><INDENT><INDENT>c<NUM_LIT>value = null<EOL><INDENT>}"}
{"signature": "fun destroyConstraint(planner: Planner) {", "body": "<EOL><INDENT>if (isSatisfied()) planner.incrementalRemove(this)<EOL><INDENT>else removeFromGraph()<EOL>  }"}
{"signature": "val typeVar =", "body": "<STR_LIT><EOL>"}
{"signature": "val hashMapEntry =", "body": "hashMap.entries.first()<EOL>"}
{"signature": "val delegateToSetterSymbol =", "body": "declarationStorage.findSetterOfProperty(delegateToIrPropertySymbol)!!<EOL>"}
{"signature": "val enumCompanionDescriptor =", "body": "(enumEntryDescriptor.containingDeclaration as? ClassDescriptor)?.companionObjectDescriptor<EOL>"}
{"signature": "for (i in (M .. M).reversed()) {", "body": "<EOL><INDENT><INDENT>++step<EOL><INDENT><INDENT>if (step > <NUM_LIT>) throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val accessorPsi =", "body": "accessor.psi ?: return null<EOL>"}
{"signature": "fun writeFile(fileName: String, newContent: String) {", "body": "<EOL><INDENT><INDENT>val file = module.sourcesDirectory.resolve(fileName)<EOL><INDENT><INDENT>file.writeText(newContent)<EOL><INDENT><INDENT>addToModifiedFiles(file)<EOL><INDENT>}"}
{"signature": "val importsProvider =", "body": "ScriptDependenciesProvider.getInstance(project)<EOL>"}
{"signature": "fun visitStatement(statement: FirStatement, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitStatement(statement)<EOL><INDENT>}"}
{"signature": "for (insn in castInsnsListener.instructions.toArray()) {", "body": "<EOL><INDENT><INDENT><INDENT>node.instructions.insertBefore(castInsn, insn)<EOL><INDENT><INDENT>}"}
{"signature": "val hardLinks =", "body": "HashMap<Path, Path>()<EOL>"}
{"signature": "if (previousValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>System.setProperty(isIdeaSyncActiveKey, previousValue)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun createUsingPairs() {", "body": "<EOL><INDENT><INDENT>val map = mapOf(Pair(<STR_LIT>, <NUM_LIT>), Pair(<STR_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map.size)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map.get(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map.get(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val pair =", "body": "data.partition { it.isAsciiDigit() }<EOL>"}
{"signature": "val virtualAdapters =", "body": "type.kotlinMethods<EOL>"}
{"signature": "val varargSize =", "body": "argument.arguments.size<EOL>"}
{"signature": "val konanHomePropertyKey =", "body": "<STR_LIT><EOL>"}
{"signature": "if (multiDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addDestructuringStatements(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>statements,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>baseModuleData,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>multiDeclaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>firLoopParameter,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>tmpVariable = true,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>forceLocal = true,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (REQUIRES_SEPARATE_PROCESS !in module.directives && module.directives.singleOrZeroValue(JDK_KIND)?.requiresSeparateProcess != true) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "fun testKotlincSimple() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir.path<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun encodeByteBufferIntoOutput() {", "body": "<EOL><INDENT><INDENT>val symbolsEncoded = encodeIntoOutput(byteBuffer, <NUM_LIT>, byteBufferLength)<EOL><INDENT><INDENT>check(symbolsEncoded == symbolsPerGroup)<EOL><INDENT><INDENT>byteBufferLength = <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (irClass.isNonCompanionObject) {", "body": "<EOL><INDENT><INDENT><INDENT>irClass.handle()<EOL><INDENT><INDENT>}"}
{"signature": "val testInternal<NUM_LIT> =", "body": "createBox(<STR_LIT>)<EOL>"}
{"signature": "val resourceDirectoriesFromSourceSet =", "body": "sourceSet.resources.sourceDirectories.files<EOL>"}
{"signature": "var call =", "body": "Z(<STR_LIT>).test(b = {res += <STR_LIT>; <STR_LIT>}(), a = {res+=<STR_LIT>; <STR_LIT>}(), c = {res += <STR_LIT>; <STR_LIT>})<EOL>"}
{"signature": "for (function in data.values) {", "body": "<EOL><INDENT><INDENT>walkChildren(function, RecursiveVisitor(visitor))<EOL><INDENT>}"}
{"signature": "if (kotlinSourceSet.name == androidSourceSet.name) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (entities.size > STAR_COLLAPSE_THRESHOLD) {", "body": "<EOL><INDENT><INDENT><INDENT>imports[packageName] = STAR<EOL><INDENT><INDENT>}"}
{"signature": "val extensionFunRef =", "body": "B::<!EXTENSION_IN_CLASS_REFERENCE_NOT_ALLOWED!>extensionFun<!><EOL>"}
{"signature": "fun doRawFirTest(filePath: String) {", "body": "<EOL><INDENT><INDENT>val file = createKtFile(filePath)<EOL><INDENT><INDENT>val firFile = file.toFirFile(BodyBuildingMode.NORMAL)<EOL><INDENT><INDENT>val firFileDump = FirRenderer.withDeclarationAttributes().renderElementAsString(firFile)<EOL><INDENT><INDENT>val expectedPath = expectedPath(filePath, <STR_LIT>)<EOL><INDENT><INDENT>KotlinTestUtils.assertEqualsToFile(File(expectedPath), firFileDump)<EOL><INDENT><INDENT>checkAnnotationOwners(filePath, firFile)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>u.toUByte()..MinUB step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>.add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>.size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "fun visitClass(klass: FirClass, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allClassCheckers.check(klass, data)<EOL><INDENT>}"}
{"signature": "when (variantType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>AndroidVariantType.Main -> target.mainVariant.sourceSetTree.awaitFinalValue()<EOL><INDENT><INDENT><INDENT><INDENT>AndroidVariantType.UnitTest -> target.unitTestVariant.sourceSetTree.awaitFinalValue()<EOL><INDENT><INDENT><INDENT><INDENT>AndroidVariantType.InstrumentedTest -> target.instrumentedTestVariant.sourceSetTree.awaitFinalValue()<EOL><INDENT><INDENT><INDENT><INDENT>AndroidVariantType.Unknown -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addOuterSystem(outerSystem: ConstraintStorage) {", "body": "<EOL><INDENT><INDENT>require(!storage.usesOuterCs)<EOL><EOL><INDENT><INDENT>storage.usesOuterCs = true<EOL><INDENT><INDENT>storage.outerSystemVariablesPrefixSize = outerSystem.allTypeVariables.size<EOL><INDENT><INDENT>@OptIn(AssertionsOnly::class)<EOL><INDENT><INDENT>storage.outerCS = outerSystem<EOL><EOL><INDENT><INDENT>addOtherSystem(outerSystem, isAddingOuter = true)<EOL><INDENT>}"}
{"signature": "val systemWithoutWeakConstraints =", "body": "constraintSystem.filterConstraintsOut(TYPE_BOUND_POSITION)<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JsProtoBuf.propertyAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JsProtoBuf.propertyAnnotation, i), new.getExtension(JsProtoBuf.propertyAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val potentialActualAliasId =", "body": "classDescriptor.classId ?: return false<EOL>"}
{"signature": "val IS_SUSPEND =", "body": "FlagField.booleanAfter(IS_INLINE)<EOL>"}
{"signature": "for ((jumpInsn, originalLabel) in originalLabels) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>jumpInsn.label = originalLabel<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (arr !is Array<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>typed[i] = js(<STR_LIT>).slice.call(arr)<EOL><INDENT><INDENT>}"}
{"signature": "if (expression.symbol is IrValueParameterSymbol && expression.symbol.owner in function.explicitParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>usedParams += expression.symbol.owner<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (outputFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertions.assertEqualsToFile(outputFile, result)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resultPhi =", "body": "phi(interfaceTableRecordPtrType)<EOL>"}
{"signature": "val QMOD_POSSESSIVE =", "body": "<NUM_LIT>x8<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt()<EOL>"}
{"signature": "val extractor =", "body": "ModuleStructureExtractorWorker(listOf(testDataFile), directivesContainer)<EOL>"}
{"signature": "fun setter() {", "body": "<EOL><INDENT><INDENT>val x = AtomicReference<Data>(Data(<NUM_LIT>))<EOL><INDENT><INDENT>x.value = Data(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(x.value, Data(<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "val functionValueParameterCount =", "body": "function.valueParameters.size<EOL>"}
{"signature": "val protoMap =", "body": "registerMap(ProtoMap(PROTO_MAP.storageFile, icContext))<EOL>"}
{"signature": "when (val selectedStrategy = strategyConfig.selectedStrategy) {", "body": "<EOL><INDENT><INDENT><INDENT>is CompilerExecutionStrategy.InProcess -> compileInProcess(loggerAdapter, compilationConfig, sources, arguments)<EOL><INDENT><INDENT><INDENT>is CompilerExecutionStrategy.Daemon -> compileWithinDaemon(<EOL><INDENT><INDENT><INDENT><INDENT>projectId,<EOL><INDENT><INDENT><INDENT><INDENT>loggerAdapter,<EOL><INDENT><INDENT><INDENT><INDENT>selectedStrategy,<EOL><INDENT><INDENT><INDENT><INDENT>compilationConfig,<EOL><INDENT><INDENT><INDENT><INDENT>sources,<EOL><INDENT><INDENT><INDENT><INDENT>arguments<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (it.origin == IrDeclarationOrigin.SHARED_VARIABLE_IN_EVALUATOR_FRAGMENT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val newParameter =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.copyTo(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>type = context.sharedVariablesManager.getIrType(it.type),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>origin = IrDeclarationOrigin.DEFINED<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>promotedParameters[it.symbol] = newParameter.symbol<EOL><INDENT><INDENT><INDENT><INDENT>newParameter<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val JsNativeSetter =", "body": "<STR_LIT>.jsId()<EOL>"}
{"signature": "val COMPILE_BENCHMARK_EXTENSION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (bounds.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val boundDecl = otherBounds.firstOrNull() ?: boundWithParam.last()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (constraintBounds.contains(boundDecl)) boundDecl.source<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else declaration.source<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(p: @Composable ()->Unit) {", "body": "}<EOL><EOL>@Composable fun foo() {}"}
{"signature": "val targetClassNode =", "body": "classNodeIndex[typeAliasNode.id] ?: packageNode.createArtificialClassNode(typeAliasNode)<EOL>"}
{"signature": "if (list.parent == ktFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>structureElements += getStructureElementFor(list)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JvmProtoBuf.packageLocalVariable) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JvmProtoBuf.packageLocalVariable, i), new.getExtension(JvmProtoBuf.packageLocalVariable, i))) result.add(ProtoBufPackageKind.JVM_EXT_PACKAGE_LOCAL_VARIABLE_LIST)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val argvPtr =", "body": "allocator.allocate(argumentNumber * Int.SIZE_BYTES)<EOL>"}
{"signature": "val elementVar =", "body": "extractIndex(element)<EOL>"}
{"signature": "if (declaration.isVisibleInLVT) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.markLineNumber(startOffset = true)<EOL><INDENT><INDENT><INDENT>pushDefaultValueOnStack(varType, mv)<EOL><INDENT><INDENT><INDENT>mv.store(index, varType)<EOL><INDENT><INDENT>}"}
{"signature": "val mkdirs =", "body": "outDir.mkdirs()<EOL>"}
{"signature": "var disambiguatedName =", "body": "baseName<EOL>"}
{"signature": "package FinalClass<EOL>.", "body": ""}
{"signature": "for (fqName in library.includedForwardDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val classId = ClassId.topLevel(FqName(fqName))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (classId.packageFqName in validPackages) add(classId)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(h: HashMap<*, *>) {", "body": "<EOL><INDENT>val a = h[<STR_LIT>]<EOL><INDENT>val b = h[<NUM_LIT>]<EOL><INDENT>val c = h[<STR_LIT>] as? Double<EOL>}"}
{"signature": "val maxMemMegabytes =", "body": "maxMemBytes / (<NUM_LIT> * <NUM_LIT>) + if (maxMemBytes % (<NUM_LIT> * <NUM_LIT>) == <NUM_LIT>L) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val unwrap =", "body": "generateSequence(type, Class<*>::getComponentType)<EOL>"}
{"signature": "val elseNode =", "body": "context.extractNode(expression.elseExpression) ?: return null<EOL>"}
{"signature": "if (inputType is ConeIntersectionType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(inputType.intersectedTypes)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (argValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameterValues = parameterValues.plus(argValue, parameterDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val actualAnnotationTargetSourceElement =", "body": "(incompatibility.actualAnnotationTargetElement as FirSourceElement).element<EOL>"}
{"signature": "val newLoopVariable =", "body": "IrVariableImpl(<EOL>"}
{"signature": "val firstStatement =", "body": "body.firstStatement ?: return false<EOL>"}
{"signature": "val memberFromSupertype =", "body": "symbolFromSupertype.owner as IrDeclaration<EOL>"}
{"signature": "val nonIrFile =", "body": "File(wholeFile.parentFile, wholeFile.nameWithoutExtension + <STR_LIT>)<EOL>"}
{"signature": "if (declarationDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>target = declarationDescriptor.toString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportIfDynamic(expression, declarationDescriptor, debugInfoReporter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mainWorker =", "body": "Worker.current<EOL>"}
{"signature": "val statusExtensions =", "body": "session.extensionService.statusTransformerExtensions<EOL>"}
{"signature": "val roundTripAdapter =", "body": "wrapAdapter(adapter.externalize()).internalize()<EOL>"}
{"signature": "if (!context.languageVersionSettings.supportsFeature(LanguageFeature.JsEnableExtensionFunctionInExternals)) {", "body": "<EOL><INDENT><INDENT><INDENT>reportOnParametersAndReturnTypesIf(ErrorsJs.EXTENSION_FUNCTION_IN_EXTERNAL_DECLARATION, KotlinType::isExtensionFunctionType)<EOL><INDENT><INDENT>}"}
{"signature": "if (file.extension != JavaClassFileType.INSTANCE!!.defaultExtension) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val daemonJVMOptions<NUM_LIT> =", "body": "makeTestDaemonJvmOptions(logFile<NUM_LIT>)<EOL>"}
{"signature": "if (d<NUM_LIT>LazyDelegate.isInitialized()) {", "body": "<EOL><INDENT><INDENT><INDENT>d<NUM_LIT>(body)<EOL><INDENT><INDENT>}"}
{"signature": "val replacedPath =", "body": "mapping(sourcePath.value)<EOL>"}
{"signature": "val useClasspathSnapshot =", "body": "propertiesProvider.useClasspathSnapshot<EOL>"}
{"signature": "var exception =", "body": "false<EOL>"}
{"signature": "val isNativeDistributionKey =", "body": "extrasKeyOf<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "if (fileName.isBlank()) {", "body": "<EOL><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var noKotlinNothingValueException =", "body": "false<EOL>"}
{"signature": "val declaredIn =", "body": "blockScopeVariableInfo.declaredIn[variable]<EOL>"}
{"signature": "fun notifyAnalysisStarted() {", "body": "<EOL><INDENT><INDENT>analysisStart = PerformanceCounter.currentTime()<EOL><INDENT>}"}
{"signature": "val UNREACHABLE =", "body": "<STR_LIT><EOL>"}
{"signature": "val smapFile =", "body": "expectedFile.withExtension(SMAP_EXT)<EOL>"}
{"signature": "val anotherKonanDataDir =", "body": "tempDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val reportedDiagnostics =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val fileLowerState =", "body": "generationState.fileLowerState<EOL>"}
{"signature": "fun cleanOutputsAndLocalState(reason: String?) {", "body": "<EOL><INDENT><INDENT>cleanOutputsAndLocalStateUtil(reason)<EOL><INDENT>}"}
{"signature": "if (a.method != null) {", "body": "<EOL><INDENT><INDENT>a.method!!()<EOL><INDENT>}"}
{"signature": "var numberOfBrackets =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun incompatibleIdentityRegardlessNullabilityWithNull(a: Int?) {", "body": "<EOL><INDENT>a == null<EOL><INDENT>a === null<EOL>}"}
{"signature": "if (field.isAccessible()) {", "body": "<EOL><INDENT><INDENT><INDENT>expression<EOL><INDENT><INDENT>}"}
{"signature": "val wordTokenizer =", "body": "<EOL><INDENT>RegexIdentityStringTokenizer(Regex(<STR_LIT>), IdentityStringToken::Word)<EOL>"}
{"signature": "val addedFiles =", "body": "mutableListOf<LibraryFile>()<EOL>"}
{"signature": "val indexedStrings =", "body": "arrayOfNulls<IrArrayMemoryReader>(icData.size)<EOL>"}
{"signature": "fun f(x: RuntimeException) {", "body": "throw x }"}
{"signature": "when (outerVariance) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariance.INV -> TypeVariance.INV<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariance.OUT -> effectiveArgumentVariance<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariance.IN -> effectiveArgumentVariance.reversed()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun translateClass(classId: ClassId) {", "body": "<EOL><INDENT><INDENT>val classOrObjectSymbol = getClassOrObjectSymbolByClassId(classId) ?: return<EOL><INDENT><INDENT>translateClassOrObjectSymbol(classOrObjectSymbol)<EOL><INDENT>}"}
{"signature": "fun boxExternalClass(c: ExternalClass) {", "body": "<EOL><INDENT>anyExample(c)<EOL><INDENT>anyOrNullExample(c)<EOL><INDENT>genericExample(c)<EOL><INDENT>genericOrNullExample(c)<EOL><INDENT>dynamicExample(c)<EOL>}"}
{"signature": "val otherOriginal =", "body": "(other.symbol as FirCallableSymbol).unwrapSubstitutionOverrides()<EOL>"}
{"signature": "fun throwingCallback() {", "body": "<EOL><INDENT>throw IllegalStateException(<STR_LIT>)<EOL>}"}
{"signature": "if (!override) {", "body": "<EOL><INDENT><INDENT>printKDoc(transformChildrenMethodKDoc(transformerParameter, dataParameter, returnType))<EOL><INDENT>}"}
{"signature": "for (typeConstraint in typeConstraints) {", "body": "<EOL><INDENT><INDENT><INDENT>noError = noError and typeConstraint.boundTypeReference?.checkTypePosition(trace, typePosition)<EOL><INDENT><INDENT>}"}
{"signature": "val test_bnb =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b === nb<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nb === b<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b !== nb<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nb !== b<!><EOL>"}
{"signature": "else if (passedTime > frameDuration * <NUM_LIT>){", "body": "<INDENT><INDENT><INDENT>lastFrameTime = now // we fell behind more than half frame, reset time<INDENT><INDENT>}"}
{"signature": "fun usages() {", "body": "<EOL><INDENT>val p = P()<EOL><INDENT>assertEquals(<NUM_LIT>, p.simpleProp)<EOL><INDENT>assertEquals(<STR_LIT>, p.anotherProp)<EOL><INDENT>assertEquals(true, p.propWithGetter)<EOL><EOL><INDENT>val pd = PD()<EOL><INDENT>assertEquals(<NUM_LIT>, pd.simpleProp)<EOL><INDENT>assertEquals(<STR_LIT>, pd.anotherProp)<EOL><INDENT>assertEquals(true, pd.propWithGetter)<EOL>}"}
{"signature": "if (CallToDeprecatedOverrideOfHidden in calleeReference.candidate.diagnostics) {", "body": "<EOL><INDENT><INDENT><INDENT>addNonFatalDiagnostic(ConeCallToDeprecatedOverrideOfHidden)<EOL><INDENT><INDENT>}"}
{"signature": "val test_sa =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s === a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a === s<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s !== a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a !== s<!><EOL>"}
{"signature": "if (x !is B<NUM_LIT> || <!USELESS_IS_CHECK!>x is B<NUM_LIT><!>) {", "body": "<EOL><INDENT><INDENT>var k: A<NUM_LIT>? = x<EOL><INDENT>}"}
{"signature": "if (boundReceiver != null && !useOptimizedSuperClass) {", "body": "<INDENT><INDENT><INDENT>// Pre<NUM_LIT> reflected property reference constructors do not allow bound receivers.<INDENT><INDENT><INDENT>return createSpecializedKProperty(expression)<INDENT><INDENT>}"}
{"signature": "if (this is IrFileImpl && isInsideModule) {", "body": "<EOL><INDENT><INDENT>module.descriptor<EOL><INDENT>}"}
{"signature": "val frameMap =", "body": "FrameMap()<EOL>"}
{"signature": "val fileKey =", "body": "resolved.library.libraryFile.fileKey<EOL>"}
{"signature": "val gav =", "body": "<NUM_LIT><EOL>"}
{"signature": "val nonSerializable =", "body": "object {}  // Deliberately non-serializable"}
{"signature": "val minY =", "body": "<NUM_LIT>f<EOL>"}
{"signature": "else if (entry.isLink) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>hardLinks.put(outputFile.toPath(), targetDir.resolve(entry.linkName).toPath())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testNullableA(foo: A?, bar: Any?) {", "body": "<EOL><INDENT>if (foo != null && foo == bar) bar.a()<EOL>}"}
{"signature": "val srcAddrEndOffset =", "body": "srcAddr + dstLength * CHAR_SIZE_BYTES<EOL>"}
{"signature": "val elementTypeProjection =", "body": "type.arguments.singleOrNull()<EOL>"}
{"signature": "package jvm<EOL>.", "body": ""}
{"signature": "fun process(b: B) {", "body": "<EOL><INDENT><INDENT>b.output(Inv(b.element()))<EOL><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.contextReceiverTypeIdCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(oldTypeTable.getType(old.getContextReceiverTypeId(i)), newTypeTable.getType(new.getContextReceiverTypeId(i)))) return false<EOL><INDENT><INDENT>}"}
{"signature": "val modifierListNode =", "body": "lighterASTNode.getChildren(treeStructure).find { it?.tokenType == TokenType.MODIFIER_LIST }<EOL>"}
{"signature": "val preservedContainer =", "body": "container!!<EOL>"}
{"signature": "val cHeader =", "body": "testDirectory.walk().find { it.extension == <STR_LIT> }<EOL>"}
{"signature": "val importTransformer =", "body": "FirPartialImportResolveTransformer(session, computationSession)<EOL>"}
{"signature": "val test_dd =", "body": "<!DEPRECATED_IDENTITY_EQUALS!>d === d<!> || <!DEPRECATED_IDENTITY_EQUALS!>d !== d<!><EOL>"}
{"signature": "if (!boundTypeArguments.isCompatible) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val snippet =", "body": "linkedSnippet.get()<EOL>"}
{"signature": "when (context.isWasmJsTarget) {", "body": "<EOL><INDENT><INDENT>true -> context.wasmSymbols.jsRelatedSymbols.jsExportConstructor<EOL><INDENT><INDENT>else -> context.wasmSymbols.wasmExportConstructor<EOL><INDENT>}"}
{"signature": "val scopeProviderImpl =", "body": "KtFirScopeProvider(this, firSymbolBuilder, firResolveSession)<EOL>"}
{"signature": "val addresses =", "body": "readKlibDeclarationAddresses(providedTestProjectKlib) ?: fail(<STR_LIT>)<EOL>"}
{"signature": "fun testGIICmp(x: GIICmp<Any>) {", "body": "<EOL><INDENT>if (x.iic.compareTo(II(<NUM_LIT>)) != <NUM_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val ARRAY_NEW_DEFAULT =", "body": "<STR_LIT><EOL>"}
{"signature": "val deseialized =", "body": "ObjectInputStream(bais).readObject()<EOL>"}
{"signature": "fun invalidateUnstableDanglingFileSessions() {", "body": "<INDENT><INDENT>ApplicationManager.getApplication().assertWriteAccessAllowed()<INDENT><INDENT>// We don't need to publish any session invalidation events for unstable dangling file modules.<INDENT><INDENT>sessionCache.removeUnstableDanglingFileSessions()<INDENT>}"}
{"signature": "val bridgeRequests =", "body": "buildBridgeRequests(swiftModule)<EOL>"}
{"signature": "for (fileFacade in kmPackageParts.fileFacades) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>appendLine(fileFacade)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val seenConditions =", "body": "mutableSetOf<Any>() //to filter out equal conditions"}
{"signature": "val unsubstitutedKtSignature =", "body": "targetSymbol.toKtSignature()<EOL>"}
{"signature": "var sCnt =", "body": "<NUM_LIT><EOL>"}
{"signature": "val fileReadOutputFile =", "body": "File.createTempFile(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (kind !is KtFakeSourceElementKind.DesugaredAugmentedAssign && kind !is KtFakeSourceElementKind.DesugaredIncrementOrDecrement) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun visitTypeOperatorCallNode(node: TypeOperatorCallNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val clashedOverrides =", "body": "clashedFakeOverrides[override]<EOL>"}
{"signature": "fun checkKotlinIn(element: T, action: KotlinAction<in T>) {", "body": "<INDENT><INDENT>action.execute(element) // OK in K<NUM_LIT>, type mismatch in K<NUM_LIT><INDENT>}"}
{"signature": "fun h<NUM_LIT>() {", "body": "<EOL><INDENT>f<NUM_LIT>()<EOL>}"}
{"signature": "val approximatedAllSuperTypes =", "body": "expectedType.getAllSuperTypes(shouldApproximate = true)<EOL>"}
{"signature": "val otherLowerChars =", "body": "listOf<IntRange>(<EOL>"}
{"signature": "val KOTLIN_PUBLISH_JVM_ENVIRONMENT_ATTRIBUTE =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val valuesFunctionSymbol =", "body": "getStaticMemberScope().getCallableSymbols(Name.identifier(<STR_LIT>)).firstOrNull()<EOL>"}
{"signature": "if (result < <NUM_LIT> || testString.isLowSurrogate(startIndex + <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return -<NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "when (sign) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Sign.Positive -> Positive<EOL><INDENT><INDENT><INDENT><INDENT>Sign.Negative -> Negative<EOL><INDENT><INDENT><INDENT><INDENT>null -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isVoidReturned && !isConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (defaultVisibility != null && defaultVisibility != Visibilities.Unknown) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultVisibility<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (isReceiverNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.yieldDiagnostic(UnsafeCall(dispatchReceiverValueType))<EOL><INDENT><INDENT>}"}
{"signature": "fun plusAssign(set: Collection<S>) {", "body": "<EOL><INDENT><INDENT>children += set<EOL><INDENT>}"}
{"signature": "val resolvedOrder =", "body": "resolvedCall.valueArgumentsByIndex.orEmpty()<EOL>"}
{"signature": "val filesToLookups =", "body": "arrayListOf<Map<File, List<LookupInfo>>>()<EOL>"}
{"signature": "for (i in <NUM_LIT> downTo <NUM_LIT>L step it) {", "body": "sb.append(i) }"}
{"signature": "val jumpsIfNull =", "body": "insn.opcode == Opcodes.IFNULL<EOL>"}
{"signature": "val testConfig =", "body": "scriptCompilationConfiguration(includedFragments)<EOL>"}
{"signature": "fun contains(filePath: String): Boolean<EOL><INDENT>abstract fun contains(fqName: FqName, fileName: String): Boolean<EOL><EOL><INDENT>object Nothing : CacheDeserializationStrategy() {", "body": "<EOL><INDENT><INDENT>override fun contains(filePath: String) = false<EOL><INDENT><INDENT>override fun contains(fqName: FqName, fileName: String) = false<EOL><INDENT>}"}
{"signature": "val remoteExecutable =", "body": "this@RunKotlinNativeTask.executable.split(<STR_LIT>).last()<EOL>"}
{"signature": "val minGradleVersion =", "body": "GradleVersion.version(versionsAnnotation.minVersion)<EOL>"}
{"signature": "val atomicSymbols =", "body": "NativeAtomicSymbols(pluginContext, moduleFragment)<EOL>"}
{"signature": "val MAX_DECOMPOSITION_LENGTH =", "body": "<NUM_LIT><EOL>"}
{"signature": "for ((fqName, fn) in inlineFnsFromFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>functionsHashes[fqName] = fn.md<NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BASE_COROUTINES_PACKAGE =", "body": "BASE_KOTLIN_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val errorsFiles =", "body": "taskProvider.errorsFiles.get()<EOL>"}
{"signature": "val testSuite =", "body": "state.testSuite<EOL>"}
{"signature": "for (i in Counter()) {", "body": "<EOL><INDENT><INDENT><INDENT>result += i<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(list: List<String>) {", "body": "<INDENT> *<INDENT>  list // get KtTypeScope for it<INDENT> * }"}
{"signature": "when (val sourceSetBaseName = sourceSet.baseName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>SourceSet.MAIN_SOURCE_SET_NAME -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> sourceSetBaseName + <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val base =", "body": "File(basePath).absoluteFile.normalize()<EOL>"}
{"signature": "val interfaceListPtr =", "body": "obj.typeInfo + TYPE_INFO_ITABLE_OFFSET<EOL>"}
{"signature": "val genSourceNameField =", "body": "JavacFiler::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "val htmlVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val suppressedExceptions =", "body": "this.deleteRecursivelyImpl()<EOL>"}
{"signature": "val usedTypeParameterSymbol =", "body": "theType.findUsedTypeParameterSymbol(typeParameterSymbols, delegate, context)<EOL>"}
{"signature": "val current =", "body": "currentInternal()<EOL>"}
{"signature": "if (!languageVersionSettings.supportsFeature(LanguageFeature.ContextReceivers)) {", "body": "<EOL><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT>Errors.UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT>contextReceiverList,<EOL><INDENT><INDENT><INDENT><INDENT>LanguageFeature.ContextReceivers to languageVersionSettings<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun takeByte(ilt: Byte) {", "body": "}<EOL>fun takeShort(ilt: Short) {}"}
{"signature": "if (reference is KtSimpleNameExpression) {", "body": "<EOL><INDENT><INDENT>return reference.getReferencedName()<EOL><INDENT>}"}
{"signature": "fun writeByteArray(byteArray: ByteArray) {", "body": "<EOL><INDENT><INDENT>output.writeInt(byteArray.size)<EOL><INDENT><INDENT>output.write(byteArray)<EOL><INDENT>}"}
{"signature": "fun remove(className: JvmClassName, changesCollector: ChangesCollector) {", "body": "<EOL><INDENT><INDENT><INDENT>val key = className.internalName<EOL><INDENT><INDENT><INDENT>val oldValue = storage[key] ?: return<EOL><INDENT><INDENT><INDENT>storage.remove(key)<EOL><EOL><INDENT><INDENT><INDENT>changesCollector.collectProtoChanges(oldValue.toProtoData(), newData = null)<EOL><INDENT><INDENT>}"}
{"signature": "fun fromClass(name: Name) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "var last =", "body": "iterator.next()<EOL>"}
{"signature": "if (id(<STR_LIT>) == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>doubleResult += <NUM_LIT><EOL><INDENT><INDENT>log += <STR_LIT><EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "var suppressMissingBuiltinsError =", "body": "false<EOL>"}
{"signature": "package OpenInheritedMethodClashedWithChildPropertyJsName<EOL>.", "body": ""}
{"signature": "val baseTypeClassId =", "body": "baseType.fullyExpandedType(session).lookupTag.classId.let { it.readOnlyToMutable() ?: it }<EOL>"}
{"signature": "val boundMirror =", "body": "typeMirror.extendsBound ?: typeMirror.superBound<EOL>"}
{"signature": "val otherInstance =", "body": "Foo()<EOL>"}
{"signature": "val firstIsExpect =", "body": "first.resolvedStatus?.isExpect == true<EOL>"}
{"signature": "var dontWarnOnErrorSuppression =", "body": "false<EOL>"}
{"signature": "val fm =", "body": "f.javaMethod ?: return <STR_LIT><EOL>"}
{"signature": "val objectTypeForState =", "body": "Type.getObjectType(classBuilderForCoroutineState.thisName)<EOL>"}
{"signature": "fun visitJumpNode(node: JumpNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitJumpNode(node)<EOL><INDENT>}"}
{"signature": "var remainingCount =", "body": "functionDescriptor.countDefaultParameters() - substituteCount<EOL>"}
{"signature": "val kTypeGenerator =", "body": "createKTypeGenerator()<EOL>"}
{"signature": "val deprecatedKmpModifierMap =", "body": "mapOf(<EOL>"}
{"signature": "val leftNullCheck =", "body": "left.type.isNullable()<EOL>"}
{"signature": "val ARRAY_GET_U =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!random()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>message += root<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val generatorCoroutineImpl =", "body": "continuation.unsafeCast<GeneratorCoroutineImpl>()<EOL>"}
{"signature": "val originalMethodDeprecationInfo =", "body": "deprecations(originalMethod)<EOL>"}
{"signature": "val allKeys =", "body": "this.keys.intersect(that.keys)<EOL>"}
{"signature": "if (!classSymbol.isInterface) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(classSymbol.source, FirJsPlainObjectsErrors.ONLY_INTERFACES_ARE_SUPPORTED, classKind, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val dirtyFileToRoot =", "body": "HashMap<File, JavaSourceRootDescriptor>()<EOL>"}
{"signature": "val abiVersion =", "body": "KotlinAbiVersion.CURRENT<EOL>"}
{"signature": "val KOTLIN_ARTIFACTS_EXTENSION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val runnerFileText =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val test_sn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s === n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n === s<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s !== n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n !== s<!><EOL>"}
{"signature": "if (match != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val (number) = match.destructured<EOL><INDENT><INDENT><INDENT>return getLocalProperty(number.toInt())<EOL><INDENT><INDENT><INDENT><INDENT>?: throw KotlinReflectionInternalError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val compilationUnit =", "body": "e.compilationUnit<EOL>"}
{"signature": "val unspecifiedError =", "body": "<NUM_LIT><EOL>"}
{"signature": "val classBody =", "body": "KotlinPlaceHolderStubImpl<KtClassBody>(classOrObjectStub, KtStubElementTypes.CLASS_BODY)<EOL>"}
{"signature": "val dataClassConstructor =", "body": "dataClass.primaryConstructorSymbol(context.session) ?: return<EOL>"}
{"signature": "fun assignReversed(s: S, x<NUM_LIT>: Long, x<NUM_LIT>: B<NUM_LIT>, x<NUM_LIT>: UShort, x<NUM_LIT>: UInt, x<NUM_LIT>: Int, x<NUM_LIT>: Long, x<NUM_LIT>: E, x<NUM_LIT>: Boolean, x<NUM_LIT>: Int) {", "body": "<EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL><INDENT>s.x<NUM_LIT> = x<NUM_LIT><EOL>}"}
{"signature": "val substitutedTypeArguments =", "body": "typeAliasParametersSubstitutor.safeSubstitute(unsubstitutedType, Variance.INVARIANT).arguments<EOL>"}
{"signature": "val multiMap =", "body": "SubstitutionUtils.buildDeepSubstitutionMultimap(classifier.defaultType)<EOL>"}
{"signature": "val a =", "body": "A()<EOL>"}
{"signature": "if (handlerFirstInsn != null && handlerFirstInsn.opcode == Opcodes.ASTORE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>potentiallyTemporaryStores.remove(handlerFirstInsn)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package name for reflection information.", "body": "<EOL>"}
{"signature": "if (descriptor == null || descriptorName?.asString() != method.name) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.name = stringTable.getStringIndex(method.name)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in Int.MIN_VALUE   until Int.MIN_VALUE)   {", "body": "sb.append(i); sb.append(' ') }"}
{"signature": "if (initialReturnTypeRef == null) {", "body": "<EOL><INDENT><INDENT><INDENT>lambda.replaceReturnTypeRef(lambda.computeReturnTypeRef(expectedReturnTypeRef))<EOL><INDENT><INDENT><INDENT>session.lookupTracker?.recordTypeResolveAsLookup(lambda.returnTypeRef, lambda.source, context.file.source)<EOL><INDENT><INDENT>}"}
{"signature": "if (selfNode != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return selfNode<EOL><INDENT><INDENT>}"}
{"signature": "val flowFromLeft =", "body": "leftOperandNode.getFlow(path)<EOL>"}
{"signature": "if (callbackIfNotSet) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticsCallback = callback<EOL><INDENT><INDENT>}"}
{"signature": "val actualArgument =", "body": "expression.getValueArgument(i)<EOL>"}
{"signature": "val REPORTS_DESTINATION_KEY =", "body": "<EOL><INDENT><INDENT>CompilerConfigurationKey<String>(<STR_LIT>)<EOL>"}
{"signature": "if (hasInline) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>scope = container<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>name = liftedName<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val jvm<NUM_LIT>builtInReplacements =", "body": "mapOf(<EOL>"}
{"signature": "val VIEW_FQNAME =", "body": "<STR_LIT><EOL>"}
{"signature": "var operationCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val kotlinMarkerInterfaces =", "body": "LinkedHashSet<String>()<EOL>"}
{"signature": "val fieldOrigin =", "body": "(kaptContext.origins[field]?.element as? KtCallableDeclaration)<EOL>"}
{"signature": "val annotationProcessorClasspathEntries =", "body": "cacheDir.resolve(ANNOTATION_PROCESSOR_CLASSPATH_ENTRIES_FILE)<EOL>"}
{"signature": "while (x) {", "body": "continue }"}
{"signature": "val deprecatedSinceAnnotationPsi =", "body": "deprecatedSinceAnnotation.source.getPsi() as? KtAnnotationEntry ?: return<EOL>"}
{"signature": "import $pkg.", "body": "${name.asSimpleName()}\"<EOL>"}
{"signature": "fun regExpTest() {", "body": "<EOL><INDENT><INDENT>val pattern = <STR_LIT><EOL><INDENT><INDENT>val re = RegExp(pattern, <STR_LIT>)<EOL><EOL><INDENT><INDENT>assertTrue(re.test(<STR_LIT>))<EOL><INDENT><INDENT>assertFalse(re.test(<STR_LIT>))<EOL><EOL><INDENT><INDENT>assertFalse(RegExp(<STR_LIT>).test(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val qualifier =", "body": "it.qualifier<EOL>"}
{"signature": "if (this in kotlinKeywords || this.contains(<STR_LIT>)) {", "body": "<EOL><INDENT><STR_LIT><EOL>}"}
{"signature": "val iae =", "body": "assertFailsWith<IllegalArgumentException> { KotlinClassMetadata.readStrict(md) }<EOL>"}
{"signature": "if (ignoreCase) {", "body": "<EOL><INDENT><INDENT><INDENT>return chars.contains(char.uppercaseChar()) || chars.contains(char.lowercaseChar())<EOL><INDENT><INDENT>}"}
{"signature": "if (entry.value != oldValue) {", "body": "<EOL><INDENT><INDENT><INDENT>valuesArray[-index - <NUM_LIT>] = entry.value<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val baseVisitor =", "body": "super.newMethod(JvmDeclarationOrigin.NO_ORIGIN, ACC_STATIC, <STR_LIT>, <STR_LIT>, null, null)<EOL>"}
{"signature": "val customFieldsField =", "body": "declaredFields<EOL>"}
{"signature": "val T_PROPERTY_SETTER =", "body": "targetList(PROPERTY_SETTER)<EOL>"}
{"signature": "if (this@A.i != null) {", "body": "<EOL><INDENT><INDENT><INDENT>useInt(this.i)<EOL><INDENT><INDENT><INDENT>useInt(i)<EOL><INDENT><INDENT>}"}
{"signature": "if (!receiverCanBeNull) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportUnnecessarySafeCall(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>receiver.type,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>element.qualified,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>callOperationNode,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>receiver,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (subproject != null) {", "body": "<EOL><INDENT><INDENT>subProject(subproject).buildGradleKts.appendText(taskSourceCode)<EOL><INDENT>}"}
{"signature": "if (arg is FirNamedArgumentExpression) arg.expression else arg) {", "body": "<EOL><INDENT><INDENT>is FirNamedArgumentExpression -> setOf()<EOL><INDENT><INDENT>else -> setOf()<EOL><INDENT>}"}
{"signature": "var testVarWithExplicitDefaultSet =", "body": "<NUM_LIT><EOL>"}
{"signature": "package foo;\\n\\n<STR_LIT>public class One {}\\n<STR_LIT>class Two {}\\n<STR_LIT>class Three {}<STR_LIT>One\")<EOL>.", "body": ""}
{"signature": "val compareToCall =", "body": "createConventionCall(<EOL>"}
{"signature": "val doubleUintArray =", "body": "<!EVALUATED: `<NUM_LIT>, <NUM_LIT>, <NUM_LIT>; <NUM_LIT>, <NUM_LIT>; <NUM_LIT>`!>arrayOf(<EOL>"}
{"signature": "val isFakeOverridden =", "body": "(this as? FunctionDescriptor)?.kind == CallableMemberDescriptor.Kind.FAKE_OVERRIDE<EOL>"}
{"signature": "if (precedence < currentPrecedence) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentCandidate = candidate<EOL><INDENT><INDENT><INDENT><INDENT>currentPrecedence = precedence<EOL><INDENT><INDENT><INDENT><INDENT>currentKtModule = ktModule<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val BENCHMARKING_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (nextStart == range.start) {", "body": "<EOL><INDENT><INDENT><INDENT>nextStart++<EOL><INDENT><INDENT>}"}
{"signature": "if (dumper.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertions.assertFileDoesntExist(expectedFile, DUMP_SMAP)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val deprecatedLevel =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "for (i in intRange().reversed().reversed().reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val leftIsNullConst =", "body": "leftConst?.kind == ConstantValueKind.Null<EOL>"}
{"signature": "var dataForNode =", "body": "visitNode(node, data)<EOL>"}
{"signature": "val threeArgsFun =", "body": "create(p<NUM_LIT> = p<NUM_LIT>)<EOL>"}
{"signature": "val sameFramesCount =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.asList().asReversed().asSequence()<EOL>"}
{"signature": "val PROVIDE_DELEGATE =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val sourceSetsInAssociatedCompilations =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getSourceSetsFromAssociatedCompilations(compilation)<EOL>"}
{"signature": "val HIDDEN_INSTANCE_FIELD =", "body": "<STR_LIT><EOL>"}
{"signature": "import of module `:kotlin-native:backend.", "body": "native` here to `:native:native.tests`<EOL>"}
{"signature": "if (notNullWhenNotNull(x) == null) {", "body": "<EOL><INDENT><INDENT><!SENSELESS_COMPARISON!>x == null<!><EOL><INDENT>}"}
{"signature": "if (!oldForcedLocalContext) {", "body": "<EOL><INDENT><INDENT><INDENT>context.classNameBeforeLocalContext = context.className<EOL><INDENT><INDENT>}"}
{"signature": "fun accept(visitor: KmPackageExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibPackageExtensionVisitor)<EOL><INDENT><INDENT>fqName?.let(visitor::visitFqName)<EOL><INDENT>}"}
{"signature": "if (PsiTreeUtil.isAncestor(root, diagnostic.psiElement, false)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>diagnostics.add(ActualDiagnostic(diagnostic, configuration.platform, configuration.withNewInference))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitPackageViewDescriptor(descriptor: PackageViewDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>packageFqn = descriptor.fqName<EOL><INDENT><INDENT>}"}
{"signature": "val isExported =", "body": "irClass.isExported()<EOL>"}
{"signature": "if (s.isNullOrEmpty()) {", "body": "<INDENT><INDENT>s<!UNSAFE_CALL!>.<!>length // Should be bad<INDENT>}"}
{"signature": "val classFromSources =", "body": "kaptContext.compiledClasses.firstOrNull { it.name == internalName }<EOL>"}
{"signature": "for (preset in noArgExtension.myPresets) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>options += SubpluginOption(PRESET_ARG_NAME, preset)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expSign =", "body": "signum(exponent)<EOL>"}
{"signature": "var dNegativeInfinity =", "body": "<NUM_LIT> / <NUM_LIT><EOL>"}
{"signature": "val inlineClassesUtils =", "body": "WasmInlineClassesUtils(wasmSymbols)<EOL>"}
{"signature": "val deserializedModuleFragmentsToLib =", "body": "deserializeDependencies(allSortedDependencies, irLinker, null, null, mapping)<EOL>"}
{"signature": "if (!compileOutputHasEnoughClassFiles) {", "body": "<EOL><INDENT><INDENT><INDENT>return SourcesToReprocess.FullRebuild<EOL><INDENT><INDENT>}"}
{"signature": "when (topLevelClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtLightClassForFacade -> topLevelClass.files<EOL><INDENT><INDENT><INDENT><INDENT>else -> listOfNotNull(topLevelClass.kotlinOrigin?.containingKtFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (target is FirProperty && target.isConst) {", "body": "<EOL><INDENT><INDENT><INDENT>checkInitializerIsResolved(target)<EOL><INDENT><INDENT>}"}
{"signature": "val KAPT_KOTLIN_GENERATED_OPTION =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitStringConcatenationCallNode(node: StringConcatenationCallNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "fun noParams() {", "body": "<EOL>}"}
{"signature": "if (owner?.isTopLevelContainer == true) {", "body": "<EOL><INDENT><INDENT><INDENT>getTopLevelPropertyDeclarationName(kotlinFile, element).asSimpleName()<EOL><INDENT><INDENT>}"}
{"signature": "fun testFun(@TestAnn(<STR_LIT>) x: Int) {", "body": "}<EOL><EOL>class TestClassConstructor<NUM_LIT>(@TestAnn(<STR_LIT>)x: Int) {<EOL><INDENT>val xx = x<EOL>}"}
{"signature": "while (itR.hasNext()) {", "body": "<EOL><INDENT><INDENT>result.add(defaultT to itR.next())<EOL><INDENT>}"}
{"signature": "val lookupInterfaceTableRecord =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "if (declaration !is FirConstructor && declaration.body != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirJvmErrors.EXTERNAL_DECLARATION_CANNOT_HAVE_BODY, context)<EOL><INDENT><INDENT>}"}
{"signature": "var addReflect =", "body": "false<EOL>"}
{"signature": "val interfaceCompanionFieldDeclarations =", "body": "ConcurrentHashMap<IrSymbolOwner, IrField>()<EOL>"}
{"signature": "if (addSymbol(decl)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addNestedDeclarations(decl)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val artifactsRendered =", "body": "problemDependencies.joinToString { <STR_LIT> }<EOL>"}
{"signature": "val sourceInfoType =", "body": "args.first()<EOL>"}
{"signature": "val services =", "body": "BasicCompilerServicesWithResultsFacadeServer(messageCollector, null, port)<EOL>"}
{"signature": "val loopedClassLikeDecls =", "body": "mutableSetOf<FirClassLikeDeclaration>()<EOL>"}
{"signature": "val ktPropertyName =", "body": "(symbol.psi as? KtProperty)?.takeIf { it.isVar }?.name ?: return SpecialNames.NO_NAME_PROVIDED<EOL>"}
{"signature": "if (old.hasInlineClassUnderlyingType()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.inlineClassUnderlyingType, new.inlineClassUnderlyingType)) result.add(ProtoBufClassKind.INLINE_CLASS_UNDERLYING_TYPE)<EOL><INDENT><INDENT>}"}
{"signature": "val thisVar =", "body": "irTemporary(irType = replacement.returnType, nameHint = <STR_LIT>)<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.classAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(JsProtoBuf.classAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val valueDirectivesMap =", "body": "mutableMapOf<ValueDirective<*>, CompilerConfigurationKey<*>>()<EOL>"}
{"signature": "if (overridables.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return overridables.first()<EOL><INDENT><INDENT>}"}
{"signature": "val MAIN =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun visitSource(name: String, debug: String?) {", "body": "<EOL><INDENT><INDENT>generator.visitSource(name, debug)<EOL><INDENT>}"}
{"signature": "val modifierKeywordToken =", "body": "projectionKind.token as? KtModifierKeywordToken<EOL>"}
{"signature": "val nextLevelExits =", "body": "postponedLambdaExits.topOrNull()?.exits.takeIf { !callCompleted }<EOL>"}
{"signature": "fun saveFileToCache(generatedClass: GeneratedJvmClass, changesCollector: ChangesCollector) {", "body": "<EOL><INDENT><INDENT>saveClassToCache(KotlinClassInfo.createFrom(generatedClass.outputClass), generatedClass.sourceFiles, changesCollector)<EOL><INDENT>}"}
{"signature": "fun takeUByte(@ImplicitIntegerCoercion u: UByte) {", "body": "}<EOL>fun takeUShort(@ImplicitIntegerCoercion u: UShort) {}"}
{"signature": "var enableDebugMode =", "body": "false<EOL>"}
{"signature": "fun foldingBuiltinBinary(int<NUM_LIT>: Int?, int<NUM_LIT>: Int?) {", "body": "<EOL><INDENT>int<NUM_LIT>!!<EOL><INDENT>int<NUM_LIT>!!<EOL><INDENT>int<NUM_LIT> < int<NUM_LIT><EOL>}"}
{"signature": "else if (fir.isNotNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return DefiniteNullability.DEFINITELY_NOT_NULL<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentSuperclass =", "body": "nextSuperclass<EOL>"}
{"signature": "val profiler =", "body": "AsyncProfilerHelper.getInstance(profilerPath)<EOL>"}
{"signature": "fun foo(t: Number?) {", "body": "}"}
{"signature": "val actualCallee =", "body": "inlineFunctionResolver.getFunctionDeclaration(calleeSymbol)<EOL>"}
{"signature": "if (value is BoxedBasicValue && insn.opcode == Opcodes.ASTORE) {", "body": "<EOL><INDENT><INDENT><INDENT>value.descriptor.addVariableIndex((insn as VarInsnNode).`var`)<EOL><INDENT><INDENT>}"}
{"signature": "val otherJar =", "body": "findJarByClass(otherClass)!!<EOL>"}
{"signature": "if (existingValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(existingValue + pluginOptions).toMutableList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import<INDENT>: t,<EOL>.", "body": ""}
{"signature": "val namesToMembers =", "body": "members.associateBy { it.name }<EOL>"}
{"signature": "fun putSelector(type: Type, kotlinType: KotlinType?, v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT>lambda(v)<EOL><INDENT><INDENT>coerceTo(type, kotlinType, v)<EOL><INDENT>}"}
{"signature": "val storageProperty =", "body": "owner.declarations.filterIsInstance<IrProperty>().first { it.name.asString() == <STR_LIT> }<EOL>"}
{"signature": "if (recursively) {", "body": "<EOL><INDENT><INDENT><INDENT>FSOperations.markDirtyRecursively(compileContext, CompilationRound.NEXT, chunk, ::shouldMark)<EOL><INDENT><INDENT>}"}
{"signature": "val noneApplicable =", "body": "diagnostics[<NUM_LIT>]<EOL>"}
{"signature": "val companionContainingClassSymbol =", "body": "<EOL><INDENT><INDENT><INDENT>dispatchClassSymbol.getContainingDeclaration(context.session) as? FirRegularClassSymbol ?: return<EOL>"}
{"signature": "val testCaseKlib =", "body": "generateTestCaseWithSingleModule(srcDir.resolve(<STR_LIT>), freeCompilerArgs)<EOL>"}
{"signature": "val sourceCompatibility =", "body": "<STR_LIT><EOL>"}
{"signature": "val expectedLinesCount =", "body": "sourceMapConfig.lines().count()<EOL>"}
{"signature": "val modifiedSource =", "body": "javaSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val parametertoString =", "body": "typeParameter.annotations.toList().toString()<EOL>"}
{"signature": "var zzz =", "body": "l;<EOL>"}
{"signature": "fun foo(x: Promise<String?>) {", "body": "<EOL><INDENT>bar(x as CancellablePromise)<EOL>}"}
{"signature": "if (candidateDescriptor.modality == Modality.ABSTRACT) {", "body": "<EOL><INDENT><INDENT><INDENT>addDiagnostic(AbstractSuperCall(resolvedCall.dispatchReceiverArgument!!))<EOL><INDENT><INDENT>}"}
{"signature": "val thatMemberOrigin =", "body": "(that as? KtLightMember<*>)?.lightMemberOrigin ?: return false<EOL>"}
{"signature": "if (next.matches(index + charCount, testString, matchResult) >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return index<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stringKeys =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "else if (pathLength == prefixLength) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "fun renderName(<EOL><INDENT><INDENT><INDENT>analysisSession: KtAnalysisSession,<EOL><INDENT><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT><INDENT>owner: KtType,<EOL><INDENT><INDENT><INDENT>typeRenderer: KtTypeRenderer,<EOL><INDENT><INDENT><INDENT>printer: PrettyPrinter,<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT>printer.append(name.asString())<EOL><INDENT><INDENT>}"}
{"signature": "var expressionStubs =", "body": "<NUM_LIT><EOL>"}
{"signature": "val allowedTargets =", "body": "AnnotationChecker.loadAnnotationTargets(descriptor!!) ?: return<EOL>"}
{"signature": "for (deprecation in getDeprecationByVersionRequirement(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(deprecation)<EOL><INDENT><INDENT>}"}
{"signature": "val TARGET_ATTRIBUTE =", "body": "Attribute.of(<STR_LIT>, TargetWithSanitizer::class.java)<EOL>"}
{"signature": "val floatNanBase =", "body": "Float.NaN.toRawBits()<EOL>"}
{"signature": "val scopesBeforeSnapshot =", "body": "scopes<EOL>"}
{"signature": "fun clearResolvedBinaryDependency() {", "body": "<EOL><INDENT>  _builder.clearResolvedBinaryDependency()<EOL><INDENT>}"}
{"signature": "if (type == KDocTokens.CODE_BLOCK_TEXT) {", "body": "<INDENT><INDENT><INDENT><INDENT>//If first line of code block<INDENT><INDENT><INDENT><INDENT>if (!isCodeBlock())<INDENT><INDENT><INDENT><INDENT><INDENT>indentedCodeBlock = indentedCodeBlock || node.text.startsWith(indentationWhiteSpaces) || node.text.startsWith(<STR_LIT>)<INDENT><INDENT><INDENT><INDENT>startCodeBlock()<INDENT><INDENT><INDENT>}"}
{"signature": "val directoryFile =", "body": "<EOL><INDENT><INDENT><INDENT>File(directoryPath +<EOL>"}
{"signature": "val field =", "body": "Data()<EOL>"}
{"signature": "fun visitThrowExceptionNode(node: ThrowExceptionNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitThrowExceptionNode(node)<EOL><INDENT>}"}
{"signature": "val negativeRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "fun a<NUM_LIT>() {", "body": "<EOL><EOL><INDENT><INDENT>}"}
{"signature": "if (fieldKeyword != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return markElement(fieldKeyword, startOffset, endOffset, tree, node)<EOL><INDENT><INDENT>}"}
{"signature": "if (function in rootSet) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>initializedFiles.beforeCallGlobal[function] = BitSet()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>initializedFiles.beforeCallThreadLocal[function] = BitSet()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BuildDFGPhase =", "body": "createSimpleNamedCompilerPhase<NativeGenerationState, IrModuleFragment, ModuleDFG>(<EOL>"}
{"signature": "val samWithReceiverAnnotations =", "body": "baseScriptCompilationConfiguration[ScriptCompilationConfiguration.annotationsForSamWithReceivers]<EOL>"}
{"signature": "if (candidate != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return candidate<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val aByte =", "body": "arrayListOf<Byte>(<NUM_LIT>)<EOL>"}
{"signature": "val coroutineBody =", "body": "generateCoroutineBody(context, coroutineBlocks)<EOL>"}
{"signature": "fun f()<!><EOL><INDENT>fun g() {", "body": "}<EOL><INDENT>abstract fun h()<EOL><INDENT><!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun j() {}"}
{"signature": "val isLocaleAgnosticCondition =", "body": "line.conditionList.all { it.length > <NUM_LIT> }<EOL>"}
{"signature": "if (!withJdk && !isJava<NUM_LIT>OrLater()) {", "body": "<INDENT><INDENT><INDENT><INDENT>// No boot classpath for JDK <NUM_LIT> and below. When running on JDK<NUM_LIT>+ and specifying source level <NUM_LIT> and below,<INDENT><INDENT><INDENT><INDENT>// boot classpath is not set to empty. This is to allow types to be resolved using boot classpath which defaults to<INDENT><INDENT><INDENT><INDENT>// classes defined in java.base module. See https://youtrack.jetbrains.com/issue/KT-3302<NUM_LIT> for details.<INDENT><INDENT><INDENT><INDENT>put(Option.valueOf(<STR_LIT>), <STR_LIT>)<INDENT><INDENT><INDENT>}"}
{"signature": "val derivedElementWithOldKey =", "body": "DerivedElementWithOldKey()<EOL>"}
{"signature": "for (j in <NUM_LIT> until length/<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val first = sequence[i + j]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val second = sequence[i + j + length/<NUM_LIT>].mul(value)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sequence[i + j] = first.add(second) as Complex<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sequence[i + j + length/<NUM_LIT>] = first.sub(second) as Complex<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>value = value.mul(base)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (constant != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>constants.add(constant)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun writeIr(serializedIrModule: SerializedIrModule) {", "body": "<EOL><INDENT><INDENT>library.addIr(serializedIrModule)<EOL><INDENT>}"}
{"signature": "val getResultsMethod =", "body": "instanceClass.getMethod(<STR_LIT>)<EOL>"}
{"signature": "if (resultReceiverType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>receiverParameter.replaceTypeRef(receiverParameter.typeRef.resolvedTypeFromPrototype(resultReceiverType))<EOL><INDENT><INDENT><INDENT>needUpdateLambdaType = true<EOL><INDENT><INDENT>}"}
{"signature": "val mk =", "body": "if (b) md<NUM_LIT> else md<NUM_LIT><EOL>"}
{"signature": "if (type.isArrayOrNullableArray()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return mapArrayType(type, sw, context, mode, materialized)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val valueOfMethodCache =", "body": "cache { KotlinEnumSyntheticMethod(myClass, KotlinEnumSyntheticMethod.Kind.VALUE_OF) }<EOL>"}
{"signature": "if (extensions.enhancedNullability.hasEnhancedNullability(kotlinType)) {", "body": "<EOL><INDENT><INDENT><INDENT>irAnnotations.addIfNotNull(extensions.generateEnhancedNullabilityAnnotationCall())<EOL><INDENT><INDENT>}"}
{"signature": "fun visitVariable(declaration: IrVariable, data: IrDeclaration?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.acceptChildren(this, data)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val integerOperatorType =", "body": "ConeIntegerConstantOperatorTypeImpl(<EOL>"}
{"signature": "val goldenFilePath =", "body": "getGoldenFilePath(description.className, description.methodName)<EOL>"}
{"signature": "val reassigned =", "body": "mutableSetOf<FirPropertySymbol>()<EOL>"}
{"signature": "if (exceptionClass.java.isInstance(e)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return e as T<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useAndroidJar(task: Task) {", "body": "<EOL><INDENT><INDENT>task.useAndroidConfiguration(systemPropertyName = <STR_LIT>, configName = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val lazyArtifactPath =", "body": "GStringImpl(arrayOf(artifactPathClosure), arrayOf(<STR_LIT>))<EOL>"}
{"signature": "fun buildBrIf(absoluteBlockLevel: Int, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildBrInstr(WasmOp.BR_IF, absoluteBlockLevel, location)<EOL><INDENT>}"}
{"signature": "val samConvertedType =", "body": "performConversionAfterSubtyping(<EOL>"}
{"signature": "fun sourceFriendsDependencies(modules: Collection<FirModuleData>) {", "body": "<EOL><INDENT><INDENT><INDENT>allFriendsDependencies += modules<EOL><INDENT><INDENT>}"}
{"signature": "val resultE =", "body": "testAnyBuiltins(E(), E())<EOL>"}
{"signature": "val expectedKind =", "body": "expectedType.toConstantValueKind() ?: return NotEvaluated<EOL>"}
{"signature": "val additionalAnnotation =", "body": "configuration.get(ParcelizeConfigurationKeys.ADDITIONAL_ANNOTATION) ?: emptyList()<EOL>"}
{"signature": "val jvmOptions =", "body": "gradleOptions<K<NUM_LIT>JVMCompilerArguments>()<EOL>"}
{"signature": "fun visitBinaryOrEnterNode(node: BinaryOrEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "fun report(message: () -> String, severity: ICReporter.ReportSeverity) {", "body": "}<EOL><INDENT>override fun reportCompileIteration(incremental: Boolean, sourceFiles: Collection<File>, exitCode: ExitCode) {}"}
{"signature": "if (name !in mockJdkEntries) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visit(version, access, name, signature, superName, interfaces)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var iterations =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (IrFlags.VISIBILITY.get(flags.toInt())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoBuf.Visibility.PUBLIC,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoBuf.Visibility.PROTECTED,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoBuf.Visibility.INTERNAL -> false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoBuf.Visibility.PRIVATE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoBuf.Visibility.PRIVATE_TO_THIS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProtoBuf.Visibility.LOCAL,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>null -> true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedExtensionReceiverType =", "body": "(declaration as? FirCallableDeclaration)?.receiverParameter?.typeRef?.coneType<EOL>"}
{"signature": "val currentClassSnapshotsExcludingMembers =", "body": "currentClassSnapshots<EOL>"}
{"signature": "val newExpr =", "body": "expression<EOL>"}
{"signature": "fun foo(a: A, any: Any) {", "body": "}<EOL><EOL>fun bar() {<EOL><INDENT><caret>foo(A(), <STR_LIT>)<EOL>}"}
{"signature": "if (descriptor.isDynamic()) {", "body": "<EOL><INDENT><INDENT><INDENT>return SuggestedName(listOf(descriptor.name.asString()), true, descriptor, descriptor.containingDeclaration!!)<EOL><INDENT><INDENT>}"}
{"signature": "val testMethods =", "body": "testClassModel.methods<EOL>"}
{"signature": "for (resultOfIntersection in getFunctionsFromSupertypesByName(name)) {", "body": "<EOL><INDENT><INDENT><INDENT>resultOfIntersection.collectNonOverriddenDeclarations(explicitlyDeclaredFunctions, destination)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedPattern =", "body": "<STR_LIT><EOL>"}
{"signature": "val marker =", "body": "previous as? MethodInsnNode ?: return false<EOL>"}
{"signature": "val dependentCache =", "body": "dataManager.getKotlinCache(it)<EOL>"}
{"signature": "if (skipMethods.contains(name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (withGroups) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>hasComposableCallsWithGroups = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!testInlineEquals<NUM_LIT>('c', 'c')) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val composableLambda =", "body": "ComposeCallableIds.composableLambda.asSingleFqName()<EOL>"}
{"signature": "val fromDescriptor =", "body": "bridge.from<EOL>"}
{"signature": "if (name != null && nameRef.qualifier == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>references.add(name)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val internalCompositeDependencies =", "body": "mutableSetOf<CompositeDependency>()<EOL>"}
{"signature": "val platformOverloadsSpecificityComparator =", "body": "componentProvider.get<PlatformOverloadsSpecificityComparator>()<EOL>"}
{"signature": "fun clearBinaryType() {", "body": "<EOL><INDENT>  _builder.clearBinaryType()<EOL><INDENT>}"}
{"signature": "var classDependencies =", "body": "mutableMapOf<String, ClassDependencies>()<EOL>"}
{"signature": "val system =", "body": "NewConstraintSystemImpl(<EOL>"}
{"signature": "val commonCapTypes =", "body": "extractCommonCapturedTypes(lowerType, upperType)<EOL>"}
{"signature": "val zShort =", "body": "<NUM_LIT>toShort()<EOL>"}
{"signature": "fun afterVisitDirectory(dir: File) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(stack.last(), dir)<EOL><INDENT><INDENT><INDENT><INDENT>stack.removeAt(stack.lastIndex)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun Square() {", "body": "Vector() }"}
{"signature": "fun boo(b: String) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun visitNamedReference(namedReference: FirNamedReference, data: MutableMap<KtElement, FirElement>) {", "body": "}<EOL><INDENT>override fun visitDelegateFieldReference(delegateFieldReference: FirDelegateFieldReference, data: MutableMap<KtElement, FirElement>) {}"}
{"signature": "val optionFullFormPrefix =", "body": "if (prefixStyle == OptionPrefixStyle.JVM) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun storeSelector(topOfStackType: Type, topOfStackKotlinType: KotlinType?, v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT>value.storeSelector(topOfStackType, topOfStackKotlinType, v)<EOL><INDENT>}"}
{"signature": "fun setValue(thisRef: Nothing?, property: KProperty<*>, value: Array<String>) {", "body": "<EOL><INDENT><INDENT>holder = value<EOL><INDENT>}"}
{"signature": "val a_x_UInt =", "body": "AUInt().x as Any as UIntArray<EOL>"}
{"signature": "val virtualFunctionTrampolines =", "body": "mutableMapOf<IrSimpleFunction, LlvmCallable>()<EOL>"}
{"signature": "val kotlin =", "body": "project.applyMultiplatformPlugin()<EOL>"}
{"signature": "val rhsRawType =", "body": "if (rhsBinaryType.nullable) irBuiltins.anyNType else irBuiltins.anyType<EOL>"}
{"signature": "val aS =", "body": "ShortArray(<NUM_LIT>)<EOL>"}
{"signature": "val longMaxValue =", "body": "Long.MAX_VALUE<EOL>"}
{"signature": "val HidesMembers =", "body": "<STR_LIT>.internalId()<EOL>"}
{"signature": "for (i in <NUM_LIT>u.toUShort()..<MinUS step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>0.add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>0.size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val constraintSystemBuilder =", "body": "c.getBuilder()<EOL>"}
{"signature": "fun test(array: Array<(Int)->Unit>) {", "body": "<EOL><INDENT>array[<NUM_LIT>](<NUM_LIT>)<EOL>}"}
{"signature": "for (i in <NUM_LIT>uL..<<NUM_LIT>uL) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "var callSitesCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val lambdaType =", "body": "<EOL><INDENT><INDENT><INDENT>createSingletonLambda(<EOL>"}
{"signature": "fun exitCatchClause(catch: FirCatch) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitCatchClause(catch).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val unix =", "body": "unixHelper()<EOL>"}
{"signature": "val mapWithBooleanKeys =", "body": "HashMap<Boolean, Int>()<EOL>"}
{"signature": "val packageSourceAnnotations =", "body": "compilationUnits<EOL>"}
{"signature": "val ReadOnlyComposable =", "body": "ComposeClassIds.ReadOnlyComposable.asSingleFqName()<EOL>"}
{"signature": "if (header.packageName.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>visit(METADATA_PACKAGE_NAME_FIELD_NAME, header.packageName)<EOL><INDENT>}"}
{"signature": "for ((index, x) in sequence.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (isString(x) == true) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "fun test(list: List<Ref<*>>, arg: Boolean) {", "body": "<EOL><INDENT>val data: String by if (arg) list.getElement(<NUM_LIT>) else list.getElement(<NUM_LIT>)<EOL>}"}
{"signature": "val suspensionPointIdParameters =", "body": "BitSet()<EOL>"}
{"signature": "val nestedAccess =", "body": "safeCallNonAssignment.selector as FirQualifiedAccessExpression<EOL>"}
{"signature": "val doesNotWork =", "body": "<STR_LIT>\"=== EREIGNISLISTE ======<EOL>"}
{"signature": "fun arrayAccessLHS(a: Int?, b: Array<Int>) {", "body": "<EOL><INDENT>b[a!!] = a<EOL><INDENT>checkSubtype<Int>(a)<EOL>}"}
{"signature": "val objCReferenceArgsToRelease =", "body": "mutableListOf<LLVMValueRef>()<EOL>"}
{"signature": "fun tripleEquals() {", "body": "<EOL><INDENT><INDENT>assertEquals(Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), t)<EOL><INDENT><INDENT>assertNotEquals(Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), t)<EOL><INDENT><INDENT>assertNotEquals(Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), t)<EOL><INDENT><INDENT>assertNotEquals(Triple(<NUM_LIT>, <STR_LIT>, 0.<NUM_LIT>), t)<EOL><INDENT><INDENT>assertTrue(!t.equals(null))<EOL><INDENT><INDENT>assertNotEquals(<STR_LIT>, (t as Any))<EOL><INDENT>}"}
{"signature": "fun write(v: ByteWriter)<EOL><INDENT>abstract fun writeByte(v: Byte)<EOL><INDENT>abstract fun writeBytes(v: ByteArray)<EOL><INDENT>abstract fun createTemp(): ByteWriter<EOL><EOL><INDENT>fun writeUByte(v: UByte) {", "body": "<EOL><INDENT><INDENT>writeByte(v.toByte())<EOL><INDENT>}"}
{"signature": "if (completionText[position + <NUM_LIT>] == ')') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>position++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import pagind.", "body": "QueryPagingSource<EOL>"}
{"signature": "fun register(project: Project, extension: T) {", "body": "<EOL><INDENT><INDENT>project.registeredExtensions.add(extension)<EOL><INDENT>}"}
{"signature": "fun toStringDecimals() {", "body": "<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>minutes.toString(DurationUnit.DAYS, <NUM_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>minutes.toString(DurationUnit.HOURS, <NUM_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>minutes.toString(DurationUnit.MINUTES), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>minutes.toString(DurationUnit.SECONDS), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun checkInstanceClass(instance: Any, clazz: KClass<*>) {", "body": "<EOL><INDENT>assertEquals(clazz, instance::class)<EOL>}"}
{"signature": "var foo<NUM_LIT> =", "body": "bar<EOL>"}
{"signature": "val delegateToSymbol =", "body": "findDelegateToSymbol(<EOL>"}
{"signature": "if (n.toInt() > <NUM_LIT> && when (n) {", "body": "<EOL><INDENT><INDENT><INDENT>is Float -> true<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "val localClassesExtractionFromInlineFunctionsPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "fun handleParameter(parameter: IrValueParameter, argument: IrExpression, asmType: Type) {", "body": "<EOL><INDENT><INDENT><INDENT>callGenerator.genValueAndPut(parameter, argument, asmType, this, data)<EOL><INDENT><INDENT>}"}
{"signature": "if (packageView != null && !packageView.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>packageView<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val signaturesMismatch =", "body": "cumulativeSignaturesComparison(platformLibsDiff)<EOL>"}
{"signature": "for (p in <!NON_PUBLIC_CALL_FROM_PUBLIC_INLINE, NON_PUBLIC_CALL_FROM_PUBLIC_INLINE!>P<!>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (expressionToMatch == null) {", "body": "<EOL><INDENT><INDENT><INDENT>patternTranslator.translateExpressionForExpressionPattern(patternExpression)<EOL><INDENT><INDENT>}"}
{"signature": "val timeouts =", "body": "settings.get<Timeouts>()<EOL>"}
{"signature": "val outputPrefixFile =", "body": "JsEnvironmentConfigurator.getPrefixFile(module)<EOL>"}
{"signature": "while (match != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val startCaretPosition = match.range.first<EOL><INDENT><INDENT><INDENT>val tag = match.groups[<NUM_LIT>]?.value<EOL><INDENT><INDENT><INDENT>testServices.expressionMarkerProvider.addCaret(file, tag, startCaretPosition)<EOL><INDENT><INDENT><INDENT>result = result.removeRange(match.range)<EOL><INDENT><INDENT><INDENT>match = TAGS.CARET_REGEXP.find(result)<EOL><INDENT><INDENT>}"}
{"signature": "if (resolvedType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type = resolvedType<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (tagName.startsWith('@')) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tagName.subSequence(<NUM_LIT>, tagName.length)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((i, vp) in factoryFunction.valueParameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>newCtorCall.putValueArgument(i, IrGetValueImpl(startOffset, endOffset, vp.type, vp.symbol))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val shouldCollect =", "body": "collectedExceptions.size < limit<EOL>"}
{"signature": "fun addSyntheticSupertypes(thisDescriptor: ClassDescriptor, supertypes: MutableList<KotlinType>) {", "body": "}<EOL><EOL><INDENT>fun generateSyntheticClasses(<EOL><INDENT><INDENT>thisDescriptor: ClassDescriptor,<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>ctx: LazyClassContext,<EOL><INDENT><INDENT>declarationProvider: ClassMemberDeclarationProvider,<EOL><INDENT><INDENT>result: MutableSet<ClassDescriptor><EOL><INDENT>) {<EOL><INDENT>}"}
{"signature": "val lBraceTokenSet =", "body": "TokenSet.create(KtTokens.LBRACE)<EOL>"}
{"signature": "fun appendImportedFunction(function: WasmFunction.Imported) {", "body": "<INDENT><INDENT>b.writeString(function.importPair.moduleName)<INDENT><INDENT>b.writeString(function.importPair.declarationName)<INDENT><INDENT>b.writeByte(<NUM_LIT>)  // Function external kind.<INDENT><INDENT>b.writeVarUInt<NUM_LIT>(function.type.owner.index)<INDENT>}"}
{"signature": "val stmtTransformer =", "body": "IrElementToJsStatementTransformer()<EOL>"}
{"signature": "fun restoreGlobalState() {", "body": "<EOL><INDENT><INDENT>eval(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun testBarLinuxAndJs() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "for (int elem: arr) {", "body": "<EOL><INDENT><INDENT><INDENT>result[i++] = elem;<EOL><INDENT><INDENT>}"}
{"signature": "if (!argumentType.canBeNull(context.session) && context.languageVersionSettings.supportsFeature(LanguageFeature.EnableDfaWarningsInK<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirErrors.UNNECESSARY_NOT_NULL_ASSERTION, argumentType, context)<EOL><INDENT><INDENT>}"}
{"signature": "for (name in superTypesCallableNames) {", "body": "<EOL><INDENT><INDENT><INDENT>generateFakeOverridesForName(irClass, useSiteMemberScope, name, firClass, result, realDeclarationSymbols)<EOL><INDENT><INDENT>}"}
{"signature": "val filteredArguments =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "fun testUnitIncDec() {", "body": "<EOL><INDENT>var x = UnitIncDec()<EOL><INDENT>x = <warning>x<error>++</error></warning><EOL>}"}
{"signature": "while (t.isArray()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>t = t.getArrayElementType(context.irBuiltIns)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val MINUS<NUM_LIT>D =", "body": "-<NUM_LIT>.<NUM_LIT><EOL>"}
{"signature": "if (!result && it != this && it in set) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isWithNewInference) {", "body": "<EOL><INDENT><INDENT><INDENT>if (ktType.constructor.isDenotable && ktType.arguments.isEmpty())<EOL><INDENT><INDENT><INDENT><INDENT>ktType<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>approximateType(ktType)<EOL><INDENT><INDENT>}"}
{"signature": "val CARET_REGEXP =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val newPrevious =", "body": "removeLast(previous)<EOL>"}
{"signature": "if (addedLookupSymbols.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ShrinkMode.UnchangedLookupsChangedClasspath(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>currentClasspathSnapshot!!,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>shrunkCurrentClasspathAgainstPreviousLookups!!<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (node) {", "body": "<EOL><INDENT><INDENT><INDENT>is Function -> node.type<EOL><INDENT><INDENT><INDENT>is Lambda -> node.type<EOL><INDENT><INDENT><INDENT>is ResolvedParameter -> node.type as? FunctionType<EOL><INDENT><INDENT><INDENT>is ResolvedExpression -> node.type as? FunctionType<EOL><INDENT><INDENT><INDENT>is ResolvedVariable -> node.type as? FunctionType<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val candidateModule =", "body": "candidateDeclaration.llFirModuleData.ktModule<EOL>"}
{"signature": "val locker_ =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "when (lookupTag.classId) {", "body": "<EOL><INDENT><INDENT>StandardClassIds.Byte, StandardClassIds.Short -> StandardTypes.Int<EOL><INDENT><INDENT>StandardClassIds.Long, StandardClassIds.Int, StandardClassIds.Float, StandardClassIds.Double, StandardClassIds.Char -> this<EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var regex =", "body": "Regex(patString)<EOL>"}
{"signature": "val filteredExtras =", "body": "extras<EOL>"}
{"signature": "val nonTransitiveDeps =", "body": "HashMap<String, MutableList<String>>()<EOL>"}
{"signature": "if (property.visibility != KVisibility.PRIVATE) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "var argumentsDepth =", "body": "<NUM_LIT><EOL>"}
{"signature": "val annotationEntries =", "body": "annotated?.annotationEntries<EOL>"}
{"signature": "val a_x_UShort =", "body": "AUShort().x as Any as UShortArray<EOL>"}
{"signature": "package ttest //package name should be more than imported one.", "body": ""}
{"signature": "if (old.hasExtension(JsProtoBuf.compileTimeValue)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JsProtoBuf.compileTimeValue), new.getExtension(JsProtoBuf.compileTimeValue))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (source?.kind == KtFakeSourceElementKind.ArrayAccessNameReference) {", "body": "<EOL><INDENT><INDENT>FirErrors.UNSAFE_CALL.createOn(source, rootCause.actualType, receiverExpression)<EOL><INDENT>}"}
{"signature": "if (sourceFile.multifile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>writer.appendLine(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val staticallyKnownSubtype =", "body": "findStaticallyKnownSubtype(supertype, regularClassSymbol, context)<EOL>"}
{"signature": "val argumentClassifier =", "body": "argument.type.classifierOrFail<EOL>"}
{"signature": "val artifactoryBuildsDirectory =", "body": "<STR_LIT><EOL>"}
{"signature": "val compositeMin =", "body": "<NUM_LIT>_<NUM_LIT><EOL>"}
{"signature": "val bs<NUM_LIT> =", "body": "B() as B<EOL>"}
{"signature": "var shouldStop =", "body": "false<EOL>"}
{"signature": "val diagnosticsHolder =", "body": "KotlinDiagnosticsHolder.SimpleHolder()<EOL>"}
{"signature": "val rawPtrVar =", "body": "scope.createTemporaryVariable(receiver.rawPtr)<EOL>"}
{"signature": "fun foo(mr: MyRecord) {", "body": "<EOL><INDENT>MyRecord(<STR_LIT>, <NUM_LIT>)<EOL><INDENT>MyRecord(<NUM_LIT>L, <STR_LIT>)<EOL>}"}
{"signature": "val functionClassesByArity =", "body": "mappedFunctionNClasses.associateBy { it.arity }<EOL>"}
{"signature": "fun optionalAsSequence() {", "body": "<INDENT><INDENT>assertEquals(listOf(<STR_LIT>), Optional.of(<STR_LIT>).asSequence().toList())<INDENT><INDENT>assertEquals(emptyList(), Optional.empty<String>().asSequence().toList())<INDENT><INDENT>// List element type can be a supertype<INDENT><INDENT>assertEquals(listOf<CharSequence>(<STR_LIT>), Optional.of(<STR_LIT>).asSequence<CharSequence>().toList())<INDENT>}"}
{"signature": "fun record(filePath: String, position: Position, scopeFqName: String, scopeKind: ScopeKind, name: String) {", "body": "<EOL><INDENT><INDENT>val internedFilePath = interner.intern(filePath)<EOL><INDENT><INDENT>val internedScopeFqName = interner.intern(scopeFqName)<EOL><INDENT><INDENT>val internedName = interner.intern(name)<EOL><EOL><INDENT><INDENT>lookups.add(LookupInfo(internedFilePath, position, internedScopeFqName, scopeKind, internedName))<EOL><INDENT>}"}
{"signature": "fun usageFoo(flag: Boolean, foo: Foo) {", "body": "<EOL><INDENT>if (flag) <expr>foo[<NUM_LIT>] = <STR_LIT></expr><EOL>}"}
{"signature": "if (extKind == GLOBAL || extKind == EXTERNAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return Global(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val transitiveDepends =", "body": "hashSetOf(this)<EOL>"}
{"signature": "val packet =", "body": "alloc<AVPacket>()<EOL>"}
{"signature": "val buildObject =", "body": "objectClass.hasAnnotation(compileTimeAnnotation) || environment.configuration.createNonCompileTimeObjects<EOL>"}
{"signature": "val KLIB_ROOTS_STUB =", "body": "<STR_LIT><EOL>"}
{"signature": "if (isFunctionType) {", "body": "<EOL><INDENT><INDENT><INDENT>typeArguments.last().type?.isExportableReturn(session, currentlyProcessed)<EOL><INDENT><INDENT>}"}
{"signature": "fun testSamConversion() {", "body": "<EOL><INDENT>use(::foo<NUM_LIT>)<EOL>}"}
{"signature": "val elseValue =", "body": "elseStatement.expression<EOL>"}
{"signature": "val bare =", "body": "Array::class<EOL>"}
{"signature": "val lazyDeclarationResolver =", "body": "session.moduleComponents.firModuleLazyDeclarationResolver<EOL>"}
{"signature": "val thisFlags =", "body": "getCollectedNullability(key)<EOL>"}
{"signature": "val automaticModuleName =", "body": "manifest.value?.getValue(AUTOMATIC_MODULE_NAME)<EOL>"}
{"signature": "fun local<NUM_LIT>(p<NUM_LIT>: P<NUM_LIT>?) {", "body": "consume(p<NUM_LIT>) }"}
{"signature": "val currentFunctionName =", "body": "context.defaultMethodSignatureMapper.mapFunctionName(declaration)<EOL>"}
{"signature": "val methodItself =", "body": "signatureByDescriptor(function)<EOL>"}
{"signature": "val floatMaxExponent =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Float.MAX_EXPONENT }()<!><EOL>"}
{"signature": "val splitted =", "body": "splitStringConstant(value)<EOL>"}
{"signature": "var nonAbstractCountInClass =", "body": "<NUM_LIT><EOL>"}
{"signature": "val BEFORE_PREFIX =", "body": "BeforeOrAfter.BEFORE.name<EOL>"}
{"signature": "val replaceSuspendIntrinsicLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "fun testJavaNestedClass(alignment: <expr>issue.pack.RowIcon.RClass</expr>) {", "body": "<EOL>}"}
{"signature": "val isSingletonObject =", "body": "declaration is ClassDescriptor && DescriptorUtils.isObject(declaration)<EOL>"}
{"signature": "fun assertSyntheticResolvableReferenceIsNotResolved(resolvable: FirResolvable) {", "body": "<INDENT><INDENT>// All synthetic calls (FirWhenExpression, FirTryExpression, FirElvisExpression, FirCheckNotNullCall)<INDENT><INDENT>// contains FirStubReference on creation.<INDENT><INDENT>// generateCallee... functions below replace these references with resolved references.<INDENT><INDENT>// This check ensures that we don't enter their resolve twice.<INDENT><INDENT>assert(resolvable.calleeReference is FirStubReference)<INDENT>}"}
{"signature": "val singleCheckExpr =", "body": "irNotEquals(<EOL>"}
{"signature": "if (protoPath.generateDebug) {", "body": "<EOL><INDENT><INDENT>val debugProtoFile = File(protoPath.file.replace(<STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>debugProtoFile.writeText(modifyForDebug(protoPath))<EOL><INDENT><INDENT>debugProtoFile.deleteOnExit()<EOL><EOL><INDENT><INDENT>val outPath = <STR_LIT><EOL><INDENT><INDENT>execProtoc(debugProtoFile.path, outPath)<EOL><INDENT><INDENT>renamePackages(debugProtoFile.path, outPath)<EOL><INDENT>}"}
{"signature": "val commonizerMainMethod =", "body": "commonizerMainClass.methods.singleOrNull { it.name == commonizerMainFunction }<EOL>"}
{"signature": "val factoryName =", "body": "adapter.scope.declareName(<STR_LIT>)<EOL>"}
{"signature": "var boxMethodFound =", "body": "false<EOL>"}
{"signature": "if (f.isSuspendFunctionNotSuspensionView()) {", "body": "<EOL><INDENT><INDENT><INDENT>return mapSignature(getOrCreateJvmSuspendFunctionView(f), kind, skipGenericSignature)<EOL><INDENT><INDENT>}"}
{"signature": "if (dataFlowInfo != DataFlowInfo.EMPTY) {", "body": "<INDENT><INDENT>// Don't store anything in BindingTrace if it's simply an empty DataFlowInfo<INDENT><INDENT>trace.record(EXPRESSION_TYPE_INFO, expression, noTypeInfo(dataFlowInfo))<INDENT>}"}
{"signature": "val commonReturnType =", "body": "NewCommonSuperTypeCalculator.commonSuperType(substitutedTypes)<EOL>"}
{"signature": "val unbounded<NUM_LIT> =", "body": "Outer.DefaultImpls::f<EOL>"}
{"signature": "val taskPathToMetricsReporter =", "body": "ConcurrentHashMap<String, BuildMetricsReporter<GradleBuildTime, GradleBuildPerformanceMetric>>()<EOL>"}
{"signature": "val objCDocumentedAnnotation =", "body": "objCDocumentedAnnotations.single()<EOL>"}
{"signature": "when (mavenScope) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>MavenScope.COMPILE -> compilation.compileDependencyConfigurationName<EOL><INDENT><INDENT><INDENT><INDENT>MavenScope.RUNTIME -> compilation.runtimeDependencyConfigurationName ?: return emptyMap()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fsOperations =", "body": "FSOperationsHelper(context, chunk, kotlinDirtyFilesHolder, LOG)<EOL>"}
{"signature": "if (statements.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ctx.replaceMe(statements[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newMethodNode =", "body": "MethodNode(Opcodes.API_VERSION)<EOL>"}
{"signature": "fun test(i: Int) {", "body": "<EOL><INDENT><expr>i</expr>()()()<EOL>}"}
{"signature": "if (rebuiltFileFragment != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>srcFileAction.commitBinaryAst(rebuiltFileFragment)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.<NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun process(jvmClassName: JvmClassName, newData: SerializedJavaClass, changesCollector: ChangesCollector) {", "body": "<EOL><INDENT><INDENT><INDENT>val key = jvmClassName.internalName<EOL><INDENT><INDENT><INDENT>val oldData = storage[key]<EOL><INDENT><INDENT><INDENT>storage[key] = newData<EOL><EOL><INDENT><INDENT><INDENT>changesCollector.collectProtoChanges(<EOL><INDENT><INDENT><INDENT><INDENT>oldData?.toProtoData(), newData.toProtoData(),<EOL><INDENT><INDENT><INDENT><INDENT>collectAllMembersForNewClass = true<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val parametersNames =", "body": "descriptor.valueParameters.map { it.name }<EOL>"}
{"signature": "while (analyzedCallee.isFakeOverride) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>analyzedCallee = analyzedCallee.resolveFakeOverride() ?: return expression<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val extensionsByCallableName =", "body": "groupExtensionsByName(classSymbol) { getCallableNamesForClass(it, generationContext) }<EOL>"}
{"signature": "fun loadFunctionInterfacesIntoStdlib(stdlibModule: IrModuleFragment) {", "body": "<EOL><INDENT><INDENT><INDENT>irBuiltIns.functionFactory = IrDescriptorBasedFunctionFactory(<EOL><INDENT><INDENT><INDENT><INDENT>irBuiltIns,<EOL><INDENT><INDENT><INDENT><INDENT>symbolTable,<EOL><INDENT><INDENT><INDENT><INDENT>typeTranslator,<EOL><INDENT><INDENT><INDENT><INDENT>functionTypeInterfacePackages.makePackageAccessor(stdlibModule),<EOL><INDENT><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun testKotlinJvmFieldChangedUsedInJava() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (useStringTable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.add(K<NUM_LIT>JVMCompilerArguments::useTypeTable.cliArgument)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val shiftLeft =", "body": "<!EVALUATED: `<NUM_LIT>`!>shl(<NUM_LIT>L, <NUM_LIT>)<!><EOL>"}
{"signature": "fun check(expression: FirResolvedQualifier, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>checkClassLikeSymbol(expression.symbol ?: return, expression, expression.isStandalone(context), context, reporter)<EOL><INDENT>}"}
{"signature": "val methodType =", "body": "MethodType.methodType(jvmEnumClass, String::class.java)<EOL>"}
{"signature": "if (savedToVariable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.instructions.insertBefore(insn, VarInsnNode(unboxedType.getOpcode(Opcodes.ILOAD), node.maxLocals))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val raw =", "body": "instance.raw<EOL>"}
{"signature": "val expectedConfigurations =", "body": "setOf(<EOL>"}
{"signature": "val blockPointerVar =", "body": "blockPointerVarSymbol.owner<EOL>"}
{"signature": "val ownerClassId =", "body": "if (publicFacade)<EOL>"}
{"signature": "if (isDirect) {", "body": "<INDENT><INDENT>// This declares a function<INDENT><INDENT>val targetFunctionVariable = CVariable(callBuilder.cFunctionBuilder.getType(), targetFunctionName)<INDENT><INDENT>callBuilder.cBridgeBodyLines.add(<NUM_LIT>, <STR_LIT>$directSymbolName\\<STR_LIT>)<INDENT>}"}
{"signature": "val jsCacheFile =", "body": "File(cachesRootDir, <STR_LIT>).apply { mkdirs() }<EOL>"}
{"signature": "val lcaBlock =", "body": "calculateLCA(usedInBlocks + assignedInBlocks)<EOL>"}
{"signature": "val providedDeclarationsService =", "body": "session.providedDeclarationsForMetadataService<EOL>"}
{"signature": "fun unfoldBranch(branch: IrBranch, callStack: CallStack) {", "body": "<EOL><INDENT>callStack.pushSimpleInstruction(branch)<EOL><INDENT>callStack.pushCompoundInstruction(branch.condition)<EOL>}"}
{"signature": "if (old.hasExtension(JavaClassProtoBuf.isPackagePrivateClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(JavaClassProtoBuf.isPackagePrivateClass) != new.getExtension(JavaClassProtoBuf.isPackagePrivateClass)) result.add(ProtoBufClassKind.JAVA_EXT_IS_PACKAGE_PRIVATE_CLASS)<EOL><INDENT><INDENT>}"}
{"signature": "val classifierChainLastIndex =", "body": "min(classifierDescriptorChain.size, reversedQualifierParts.size) - <NUM_LIT><EOL>"}
{"signature": "val unboundValues =", "body": "pseudocode.instructions<EOL>"}
{"signature": "val readMemory =", "body": "readValueFromMemory(nativePtr, symbols.nativePtrType)<EOL>"}
{"signature": "for (error in parentSystem.errors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidate.addDiagnostic(InferenceError(error))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptObj =", "body": "evalRes.returnValue.scriptInstance!!<EOL>"}
{"signature": "val joiner =", "body": "Joiner.on(<STR_LIT>).skipNulls();<EOL>"}
{"signature": "if (classEntries.size > <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT>// Error in user code, several entries were resolved to classes<INDENT><INDENT><INDENT>return null<INDENT><INDENT>}"}
{"signature": "var ancestorFqName =", "body": "packageFqName<EOL>"}
{"signature": "for (o in operations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val result = array.arrayTransform()<EOL><INDENT><INDENT><INDENT><INDENT>result.fill(o.element.elementTransform(), o.fromIndex, o.toIndex)<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(o.expectedResult.arrayTransform().contentEquals(result))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (minor != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>if (patch != <NUM_LIT>) append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val insideAnnotationClass =", "body": "expectContainingClass?.classKind == ClassKind.ANNOTATION_CLASS<EOL>"}
{"signature": "if (declaration.isSyntheticSingleton) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.kind = ClassKind.OBJECT<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (variance == Variance.IN_VARIANCE) {", "body": "<EOL><INDENT><INDENT><INDENT>arrayElementType = AsmTypes.OBJECT_TYPE<EOL><INDENT><INDENT><INDENT>sw?.writeClass(arrayElementType)<EOL><INDENT><INDENT>}"}
{"signature": "fun resumeWith(result: Result<R>) {", "body": "<EOL><INDENT><INDENT>this.cont = null<EOL><INDENT><INDENT>this.result = result<EOL><INDENT>}"}
{"signature": "val currentVisibility =", "body": "descriptorWithRelation.effectiveVisibility()<EOL>"}
{"signature": "val scriptSymbolOwner =", "body": "scriptSymbol.owner<EOL>"}
{"signature": "fun assign(v: String) {", "body": "<EOL><INDENT><INDENT>this.v = v<EOL><INDENT>}"}
{"signature": "fun forceResolveImport(importDirective: KtImportDirective) {", "body": "<EOL><INDENT><INDENT>forceResolveImportDirective(importDirective)<EOL><INDENT>}"}
{"signature": "fun myrun(s: () -> Unit) {", "body": "<EOL><INDENT>val z = <STR_LIT><EOL><INDENT>s()<EOL>}"}
{"signature": "if (b is C && b is D) {", "body": "<EOL><INDENT><INDENT>b<!UNNECESSARY_SAFE_CALL!>?.<!>getParent()<EOL><INDENT>}"}
{"signature": "val rootFile =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val aliasedName =", "body": "importDirectiveForReferencedSymbol.alias?.name<EOL>"}
{"signature": "if (result == null || checkExpectAndNotLessSpecificShape(candidate, result)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = candidate<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val signatureWriter =", "body": "BothSignatureWriter(BothSignatureWriter.Mode.SKIP_CHECKS)<EOL>"}
{"signature": "if (element != null) {", "body": "<EOL><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>set(i, element.transform(transformer, data) as T)<EOL><INDENT><INDENT>}"}
{"signature": "if (parentExpression is KtDotQualifiedExpression && parentExpression.selectorExpression == ktExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return getExpectedType(parentExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val filteredMetadata =", "body": "if (ignoreExperimentalForeignApi)<EOL>"}
{"signature": "import classes.", "body": "foo.*<EOL>"}
{"signature": "when (frontendKind) {", "body": "<EOL><INDENT><INDENT><INDENT>FrontendKinds.ClassicFrontend -> <STR_LIT> to <STR_LIT><EOL><INDENT><INDENT><INDENT>FrontendKinds.FIR -> <STR_LIT> to <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> shouldNotBeCalled()<EOL><INDENT><INDENT>}"}
{"signature": "val apiElementsName =", "body": "compilation.target.apiElementsConfigurationName<EOL>"}
{"signature": "for (branch in element.branches) {", "body": "<EOL><INDENT><INDENT><INDENT>if (branch.condition is FirElseIfTrueCondition) continue<EOL><INDENT><INDENT><INDENT>checkCommaInBranchCondition(branch, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "package stdlib<EOL>.", "body": ""}
{"signature": "val archiveFile =", "body": "task.archiveFile.get().asFile<EOL>"}
{"signature": "val previousClass =", "body": "previousClasses[classId]<EOL>"}
{"signature": "val withoutLast =", "body": "contextReceiversTypes.subList(<NUM_LIT>, contextReceiversTypes.lastIndex)<EOL>"}
{"signature": "if (position == TypeComponentPosition.FLEXIBLE_LOWER && readOnlyId != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return readOnlyId.toLookupTag()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitCheckNotNullCallNode(node: CheckNotNullCallNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (declaration == defaultConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>context.mapping.classToItsDefaultConstructor[irClass] = constructorReplacement<EOL><INDENT><INDENT>}"}
{"signature": "val isNotNullTypeParameter =", "body": "with(typeSystem) { isDefinitelyNotNullType() } || isNotNullTypeParameterCompat<EOL>"}
{"signature": "package constants<EOL>.", "body": ""}
{"signature": "fun g(body: () -> Unit) {", "body": "<EOL><INDENT>println(<STR_LIT>)<EOL><INDENT>body()<EOL>}"}
{"signature": "fun tripleHashSet() {", "body": "<EOL><INDENT><INDENT>val s = hashSetOf(Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, s.size)<EOL><INDENT><INDENT>assertTrue(s.contains(t))<EOL><INDENT>}"}
{"signature": "val compilationsIncompatibleWithCompileOnly =", "body": "target.compilations<EOL>"}
{"signature": "when (length) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> emptySet()<EOL><INDENT><INDENT><NUM_LIT> -> setOf(this[<NUM_LIT>])<EOL><INDENT><INDENT>else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(<NUM_LIT>28))))<EOL><INDENT>}"}
{"signature": "fun registerProjectServicesForCLI(@Suppress(<STR_LIT>) projectEnvironment: JavaCoreProjectEnvironment) {", "body": "<EOL><INDENT><INDENT><INDENT><EOL><INDENT><INDENT>}"}
{"signature": "fun withVararg(vararg s: String) {", "body": "}<EOL>fun foo() {}"}
{"signature": "val bam =", "body": "remember { Foo() }<EOL>"}
{"signature": "val compiledScriptClassRes =", "body": "runBlocking { compiledScript!!.getClass(null) }<EOL>"}
{"signature": "fun Column(content: @Composable () -> Unit) {", "body": "}<EOL><INDENT><INDENT><INDENT>inline fun NonComposable(content: () -> Unit) {}"}
{"signature": "val klibFactory =", "body": "KlibMetadataFactories(::KonanBuiltIns, DynamicTypeDeserializer)<EOL>"}
{"signature": "fun onCompareTo(insn: AbstractInsnNode, value<NUM_LIT>: BoxedBasicValue, value<NUM_LIT>: BoxedBasicValue) {", "body": "<EOL><INDENT><INDENT>val descriptor<NUM_LIT> = value<NUM_LIT>.descriptor<EOL><INDENT><INDENT>val descriptor<NUM_LIT> = value<NUM_LIT>.descriptor<EOL><INDENT><INDENT>candidatesBoxedValues.merge(descriptor<NUM_LIT>, descriptor<NUM_LIT>)<EOL><INDENT><INDENT>descriptor<NUM_LIT>.addInsn(insn)<EOL><INDENT>}"}
{"signature": "val implicitType =", "body": "implicitReceiver?.originalType<EOL>"}
{"signature": "val typeInfoPtr =", "body": "codegen.typeInfoValue(classReference.symbol.owner as IrClass)<EOL>"}
{"signature": "val defaultPair =", "body": "MutablePairImpl()<EOL>"}
{"signature": "val commonSupertype =", "body": "commonSupertype(typeConstructor.supertypes)<EOL>"}
{"signature": "val pathSet =", "body": "mutableSetOf<FirClassLikeDeclaration>()<EOL>"}
{"signature": "if (arg<NUM_LIT> == null || arg<NUM_LIT> == null) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.benachmarkSize) {", "body": "<EOL><INDENT><INDENT><INDENT>list_push_front_int(ints, i)<EOL><INDENT><INDENT>}"}
{"signature": "val allJsFiles =", "body": "additionalFiles + inputJsFilesBefore + artifactsPaths + commonFiles + additionalMainFiles + inputJsFilesAfter<EOL>"}
{"signature": "when (variant.features.serializer) {", "body": "<EOL><INDENT><INDENT>CUSTOM_CLASS, CUSTOM_OBJECT, CLASS_USE_SERIALIZER, CONTEXTUAL, USE_CONTEXTUAL -> name + <STR_LIT><EOL><INDENT><INDENT>BY_DEFAULT -> throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>GENERATED -> throw IllegalStateException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val firstParameterIndex =", "body": "frame.stackSize - paramCount<EOL>"}
{"signature": "val containerHasCache =", "body": "(containerOptions.cache ?: extension.getGlobalCacheImpl(receiverClass.owner)).hasCache<EOL>"}
{"signature": "if (DescriptorUtils.isAnonymousFunction(unwrapped)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KtFe<NUM_LIT>DescAnonymousFunctionSymbol(unwrapped, analysisContext)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONSTANT =", "body": "<STR_LIT><EOL>"}
{"signature": "val validChars =", "body": "validFirstChars + ('<NUM_LIT>'..'<NUM_LIT>').toSet()<EOL>"}
{"signature": "import <!UNRESOLVED_IMPORT!>foo<!>.", "body": "bar.baz<EOL>"}
{"signature": "if (result.dts != null) {", "body": "<EOL><INDENT><INDENT>File(dir, <STR_LIT>).writeText(result.dts)<EOL><INDENT>}"}
{"signature": "if (!isExternalObjCCompanion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processFunction(generationState.context.getObjectClassInstanceFunction(singleton))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val extendsList =", "body": "<EOL><INDENT><INDENT><INDENT>super.getExtendsList() ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (parent != null) {", "body": "<INDENT><INDENT><INDENT>// Check entries other than the starting path of traversal<INDENT><INDENT><INDENT>entry.checkFileName()<INDENT><INDENT><INDENT>entry.checkNotSameAs(parent)<INDENT><INDENT>}"}
{"signature": "if (storage.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return EmptyDeprecationsProvider<EOL><INDENT><INDENT>}"}
{"signature": "val scopeArg =", "body": "<STR_LIT><EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(BuiltInsProtoBuf.classAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(BuiltInsProtoBuf.classAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "if (!target.isRegularDeclarationWithAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throwUnexpectedFirElementError(target)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (nameReferenceExpression.getReferencedNameElementType() != KtTokens.IDENTIFIER) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return@registerMultiProvider PsiReference.EMPTY_ARRAY<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val supplementaryGenerator =", "body": "SupplementaryGenerator(outputRoot)<EOL>"}
{"signature": "if (type !is IrSimpleType) {", "body": "<INDENT><INDENT><INDENT>// Represent as non-denotable type:<INDENT><INDENT><INDENT>return irKTypeImpl(<INDENT><INDENT><INDENT><INDENT>kClassifier = irConstantPrimitive(irNull()),<INDENT><INDENT><INDENT><INDENT>irTypeArguments = emptyList(),<INDENT><INDENT><INDENT><INDENT>isMarkedNullable = false,<INDENT><INDENT><INDENT><INDENT>leaveReifiedForLater = leaveReifiedForLater,<INDENT><INDENT><INDENT><INDENT>seenTypeParameters = seenTypeParameters,<INDENT><INDENT><INDENT><INDENT>type = type,<INDENT><INDENT><INDENT>)<INDENT><INDENT>}"}
{"signature": "fun onMergeFail(value: BoxedBasicValue) {", "body": "<EOL><INDENT><INDENT>markValueAsDirty(value)<EOL><INDENT>}"}
{"signature": "val ANNOTATIONS_FOR_TESTS =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun test(s<NUM_LIT>: String?, s<NUM_LIT>: String) {", "body": "<INDENT> *   s<NUM_LIT>?.length // explicit receiver `s<NUM_LIT>` has `isSafeNavigation = true`<INDENT> *   s<NUM_LIT>.length // explicit receiver `s<NUM_LIT>` has `isSafeNavigation = false`<INDENT> * }"}
{"signature": "if (ownData.unreadWrites.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>ownData.writesByNode = data.graph.traverseToFixedPoint(FindVisibleWrites(data.properties))<EOL><INDENT><INDENT>}"}
{"signature": "for (prop in parameterDescsAsProps) {", "body": "<EOL><INDENT><INDENT><INDENT>consParams.add(<EOL><INDENT><INDENT><INDENT><INDENT>ValueParameterDescriptorImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>functionDescriptor, null, i++, prop.annotations, prop.name, prop.type.makeNullableIfNotPrimitive(), false, false,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>false, null, functionDescriptor.source<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val descriptorToLibrary =", "body": "mutableMapOf<ModuleDescriptor, KotlinLibrary>()<EOL>"}
{"signature": "val varargModifier =", "body": "element.modifierList!!.getModifier(KtTokens.VARARG_KEYWORD)!!<EOL>"}
{"signature": "val pkgTestFun =", "body": "JsFunction(emptyScope, JsBlock(), <STR_LIT>)<EOL>"}
{"signature": "val konanDataDir =", "body": "konanDataDirProperty?.toRealPath()?.toFile() ?: System.getenv(<STR_LIT>)?.let(::File)<EOL>"}
{"signature": "for (i in <NUM_LIT> until passedTypeParametersSize) {", "body": "<EOL><INDENT><INDENT><INDENT>putTypeArgument(i + targetOffset, forCommonTypeParameters(i + sourceOffset))<EOL><INDENT><INDENT>}"}
{"signature": "val UTRECHT =", "body": "City(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun computeNonDeclaredProperties(name: Name, descriptors: MutableList<PropertyDescriptor>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (structure.declaredTypes.size == <NUM_LIT> && structure.declaredTypes.single() == <STR_LIT>) {", "body": "<INDENT><INDENT><INDENT><INDENT>// never report package for error.NonExistentClass, as it is never compiled by javac/kotlinc<INDENT><INDENT><INDENT><INDENT>return@sumOf <NUM_LIT><INDENT><INDENT><INDENT>}"}
{"signature": "if (ignoreTest(filePath, configuration)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val objCStubsByClassName =", "body": "hashMapOf<String, ObjCClass>()<EOL>"}
{"signature": "if (CastDiagnosticsUtil.isCastErased(subjectType, targetType, KotlinTypeChecker.DEFAULT)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(CANNOT_CHECK_FOR_ERASED.on(typeReferenceAfterIs, targetType))<EOL><INDENT><INDENT>}"}
{"signature": "fun testDeepTreeDepth() {", "body": "<EOL><INDENT><INDENT>val n = <NUM_LIT>_<NUM_LIT><EOL><INDENT><INDENT>assertEquals(n, depth(deepTree(n)))<EOL><INDENT>}"}
{"signature": "fun overrideConflict(fromSuper: CallableMemberDescriptor, fromCurrent: CallableMemberDescriptor) {", "body": "<EOL><INDENT><INDENT>conflict(fromSuper, fromCurrent)<EOL><INDENT>}"}
{"signature": "val nonSkippingGroupOptimizationEnabled =", "body": "configuration.get(<EOL>"}
{"signature": "package _<NUM_LIT>_collections;<EOL>.", "body": ""}
{"signature": "val scopeVariables =", "body": "HashMap<BlockScope, MutableCollection<VariableDescriptor>>()<EOL>"}
{"signature": "val warning =", "body": "result.getMessages(BuildMessage.Kind.WARNING).single()<EOL>"}
{"signature": "val castToRightType =", "body": "if (rightType.typeName == <STR_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun throwException(exception: Throwable) {", "body": "<EOL><INDENT>throw exception<EOL>}"}
{"signature": "if (start != null) {", "body": "<INDENT><INDENT><INDENT>// Include one instruction before the start marker (that's the id) and one after the end marker (that's a pop).<INDENT><INDENT><INDENT>InsnSequence(start.previous, end?.next?.next).forEach(instructions::remove)<INDENT><INDENT>}"}
{"signature": "val annDiff =", "body": "compareAnnotations(anns<NUM_LIT>, anns<NUM_LIT>) ?: continue<EOL>"}
{"signature": "fun testBuildMetricsForMppJs(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testBuildReportInFile(<STR_LIT>, <STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "val virtualFileSource =", "body": "(it as? VirtualFileScriptSource)<EOL>"}
{"signature": "val addedInitialConstraints =", "body": "storage.initialConstraints.subList(<EOL>"}
{"signature": "val fooref =", "body": "c::foo<EOL>"}
{"signature": "fun runInInverseOrder(x: Any?, a: () -> Unit, b: () -> Unit) {", "body": "<EOL><INDENT>b()<EOL><INDENT>a()<EOL>}"}
{"signature": "package fragment that contains top-level functions, properties, and type aliases.", "body": "<EOL>"}
{"signature": "package abc.", "body": "foo<EOL>"}
{"signature": "fun renderModifier(modifier: String) {", "body": "<EOL><INDENT><INDENT>printer.print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "when (val type = type) {", "body": "<EOL><INDENT><INDENT><INDENT>is CirProvided.ClassOrTypeAliasType -> type.toCirClassOrTypeAliasTypeOrNull(classifiers) ?: return null<EOL><INDENT><INDENT><INDENT>is CirProvided.TypeParameterType -> CirTypeParameterType.createInterned(type.index, type.isMarkedNullable)<EOL><INDENT><INDENT>}"}
{"signature": "val TOP_LEVEL_DECLARATION_COUNT_PER_FILE =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (statement.targetExceptionBlock) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>indexesToUpdate += lastTargetExceptionBlockIndex<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (callImplicitReceiver in originalReceivers) {", "body": "<EOL><INDENT><INDENT><INDENT>checkCallImplicitReceiver(callImplicitReceiver, resolvedCall, reportOn, context)<EOL><INDENT><INDENT>}"}
{"signature": "val decrementedHead =", "body": "decremented(head)<EOL>"}
{"signature": "when (val declaration = constructor.declarationDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>is ClassifierDescriptorWithTypeParameters -> declaration.declaredTypeParameters.isNotEmpty() && arguments.isEmpty()<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "if (irStatement == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irStatement = this[index].toIrStatement()<EOL><INDENT><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val verificationMetadata =", "body": "mapper.readValue<VerificationMetadata>(File(<STR_LIT>))<EOL>"}
{"signature": "val loopScope =", "body": "LoopScope(loop)<EOL>"}
{"signature": "if (unsatisfied != null) {", "body": "<EOL><INDENT><INDENT>throw UnresolvedDependenciesException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (contextReceiverParameter in f.contextReceiverParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeParameter(sw, JvmMethodParameterKind.CONTEXT_RECEIVER, contextReceiverParameter.type, f)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val autoCacheDirectory =", "body": "autoCacheRootDirectory.child(userCacheFlavorString).also { it.mkdirs() }<EOL>"}
{"signature": "val signBit =", "body": "<NUM_LIT> shl 3<NUM_LIT><EOL>"}
{"signature": "val builtinSpecialFromSuperTypes =", "body": "<EOL><INDENT><INDENT><INDENT>getFunctionsFromSupertypes(builtinName).filter { it.doesOverrideBuiltinWithDifferentJvmName() }<EOL>"}
{"signature": "val sortedStates =", "body": "DFS.topologicalOrder(listOf(entryState), { it.successors }, { visited.add(it) })<EOL>"}
{"signature": "val exportModel =", "body": "ExportModelGenerator(context).generateExport(allModules)<EOL>"}
{"signature": "val originalRoot =", "body": "workingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun setE(e: E) {", "body": "}<EOL><INDENT>fun setInner(inner: Inner<Int>) {}"}
{"signature": "if (pkgName.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(pkgName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append('.')<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val filler =", "body": "if (index >= <NUM_LIT>) <STR_LIT>.repeat(index) else <STR_LIT><EOL>"}
{"signature": "if (declaration !is KtNamedFunction || descriptor !is FunctionDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (info in defectsByInfo.keys.sorted()) {", "body": "<EOL><INDENT><INDENT><INDENT>val locations = defectsByInfo[info]!!<EOL><INDENT><INDENT><INDENT>writeDefectInfo(info)<EOL><INDENT><INDENT><INDENT>writeLocations(locations.toList().sorted())<EOL><INDENT><INDENT>}"}
{"signature": "fun visitFieldAccess(expression: IrFieldAccessExpression) {", "body": "<EOL><INDENT><INDENT>visitDeclarationReference(expression)<EOL><INDENT>}"}
{"signature": "val buildTypeWithConversions =", "body": "kotlinCall is CallableReferenceKotlinCallArgument<EOL>"}
{"signature": "when (val y = x.data) {", "body": "<INDENT><INDENT>is String -> x.data.length // should be ok<INDENT>}"}
{"signature": "if (subCandidate.explicitReceiverKind == ExplicitReceiverKind.DISPATCH_RECEIVER && subCandidate.isSuccessful) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>replaceExplicitReceiver(dispatchReceiver)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val thirtyFour =", "body": "<NUM_LIT><EOL>"}
{"signature": "val IS_FUNCTON_OF_ARITY_METHOD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun TestDifferencesInPrivateAndInternalVisibilitiesAReverse() {", "body": "}<EOL><EOL>class TestDifferencesInPrivateAndInternalVisibilitiesB {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) internal constructor()<EOL>}"}
{"signature": "if (shouldCheckImplicitInvoke) {", "body": "<EOL><INDENT><INDENT><INDENT>checkUnsafeImplicitInvokeAfterSafeCall(receiverArgument)<EOL><INDENT><INDENT>}"}
{"signature": "val SAFE_ENV_VAR_SUFFIXES =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val ulongs =", "body": "ulongArrayOf(<NUM_LIT>uL, <NUM_LIT>uL, <NUM_LIT>uL)<EOL>"}
{"signature": "val valueState =", "body": "A.create()<EOL>"}
{"signature": "else if (resolvedArgument.callArgument.isSpread) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addDiagnostic(NonVarargSpread(resolvedArgument.callArgument))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BITCODE_DEPENDENCIES_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "import three.", "body": "SecondModuleClass<EOL>"}
{"signature": "val typeData =", "body": "WasmData(<EOL>"}
{"signature": "if (invokeBuiltinExtensionMode && !isExtensionFunctionType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((i, thisTypeParameter) in typeParameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val otherTypeParameter = declaration.typeParameters[i]<EOL><INDENT><INDENT><INDENT><INDENT>thisTypeParameter.superTypes = otherTypeParameter.superTypes.map(typeRemapper::remapType)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DISABLE_INTRINSIC_OPTION =", "body": "CliOption(<EOL>"}
{"signature": "val potentiallyConflictingOverloads =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (otherClass is ClassDescriptor)<EOL>"}
{"signature": "val xcodeConfiguration =", "body": "project.findProperty(CONFIGURATION_PROPERTY)?.toString() ?: return@whenEvaluated<EOL>"}
{"signature": "fun testC() {", "body": "<EOL><INDENT><INDENT>testA()<EOL><INDENT>}"}
{"signature": "val backendWithDirectives =", "body": "BackendWithDirectives(backend)<EOL>"}
{"signature": "if (old.hasConstantValue()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.constantValue != new.constantValue) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (sourceFile.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addJavaSourceRoot(sourceFile, javaPackagePrefix)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val MODULE_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "val resolverForProject =", "body": "object : AbstractResolverForProject<TestModule>(<EOL>"}
{"signature": "for (j in (<NUM_LIT> until matrixSize)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(resultMatrix!![i]!![j])<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val firSpecificExt =", "body": "if (settings.get<PipelineType>() == PipelineType.K<NUM_LIT> && !firIdentical) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val OVERWRITE_EXPECTED_OUTPUT =", "body": "System.getProperty(<STR_LIT>)?.toBoolean() ?: false<EOL>"}
{"signature": "fun copyWasmArray(source: WasmFloatArray, destination: WasmFloatArray, sourceIndex: Int, destinationIndex: Int, length: Int) {", "body": "<EOL><INDENT>wasm_array_copy<WasmFloatArray>(destination, destinationIndex, source, sourceIndex, length)<EOL>}"}
{"signature": "when (parentCache) {", "body": "<EOL><INDENT><INDENT><INDENT>is ResolutionResultsCacheImpl -> parentCache.addData(innerCache)<EOL><INDENT><INDENT><INDENT>is TemporaryResolutionResultsCache -> parentCache.innerCache.addData(innerCache)<EOL><INDENT><INDENT>}"}
{"signature": "val dotDirTarget =", "body": "root.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (executionThrowable != null) {", "body": "<EOL><INDENT><INDENT><INDENT>isSuccessful = false<EOL><INDENT><INDENT>}"}
{"signature": "fun preregisterTreeMaker(context: Context) {", "body": "<EOL><INDENT><INDENT>KaptTreeMaker.preRegister(context, this)<EOL><INDENT>}"}
{"signature": "val interfaceEntries =", "body": "mutableListOf<KtSuperTypeListEntry>()<EOL>"}
{"signature": "val IMPLEMENT_DEPRECATION_WARNING =", "body": "<STR_LIT> +<EOL>"}
{"signature": "val clashes =", "body": "collectClashes(declarations)<EOL>"}
{"signature": "for ((index, x) in charSequence.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val relevantParams =", "body": "argsParams.asSequence()<EOL>"}
{"signature": "if (descriptor.isJvmFieldPropertyInInterfaceCompanion() && versionRequirementTable != null) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(JvmProtoBuf.flags, JvmFlags.getPropertyFlags(true))<EOL><INDENT><INDENT>}"}
{"signature": "val ctorDecl =", "body": "ctor.owner<EOL>"}
{"signature": "val OBJC_GET_OBJC_CLASS<INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "fun afterTypealias(<EOL><INDENT><INDENT>descriptor: TypeAliasDescriptor,<EOL><INDENT><INDENT>proto: ProtoBuf.TypeAlias.Builder,<EOL><INDENT><INDENT>versionRequirementTable: MutableVersionRequirementTable?,<EOL><INDENT><INDENT>childSerializer: DescriptorSerializer,<EOL><INDENT><INDENT>extension: SerializerExtension<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun expectMinMaxWith(min: Byte, max: Byte, elements: ByteArray, comparator: Comparator<Byte>) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(min, elements.minWith(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWith(comparator))<EOL><INDENT>}"}
{"signature": "val subBounds =", "body": "subTypeParameter.superTypes.toMutableList()<EOL>"}
{"signature": "for (i in a..<M) {", "body": "<EOL><INDENT><INDENT>n++<EOL><INDENT>}"}
{"signature": "fun runTest(@TestDataFile testPath: String) {", "body": "<EOL><INDENT><INDENT>Assumptions.assumeFalse(isIgnoredTest(testPath))<EOL><INDENT><INDENT>AbstractKlibBinaryCompatibilityTest.doTest(<EOL><INDENT><INDENT><INDENT>filePath = testPath,<EOL><INDENT><INDENT><INDENT>expectedResult = <STR_LIT>,<EOL><INDENT><INDENT><INDENT>produceKlib = ::buildKlib,<EOL><INDENT><INDENT><INDENT>produceAndRunProgram = ::buildAndExecuteBinary<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "var thereAreChanges =", "body": "false<EOL>"}
{"signature": "if (indent > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>delete(length - indent, length)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val intArraySerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelCreateIntArray, symbols.parcelWriteIntArray)<EOL>"}
{"signature": "for (property in properties.drop(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val shiftedResult = shiftResultOfHashCode(irResultVar)<EOL><INDENT><INDENT><INDENT><INDENT>val irRhs = irCallOp(context.irBuiltIns.intPlusSymbol, irIntType, shiftedResult, getHashCodeOfProperty(property))<EOL><INDENT><INDENT><INDENT><INDENT>+irSet(irResultVar.symbol, irRhs)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (arraySize <= allowedToAlloc) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>stackArrayCandidates += ArrayStaticAllocation(ptgNode, irClass, arraySize.toInt())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package set computation may also depend on the contextual module, as the declaration provider may require<EOL>.", "body": ""}
{"signature": "val outer<NUM_LIT> =", "body": "Outer(<STR_LIT>)<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.constructorAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.constructorAnnotation, i), new.getExtension(KlibMetadataProtoBuf.constructorAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val combined =", "body": "range<NUM_LIT> + range<NUM_LIT><EOL>"}
{"signature": "val compiledExcludedPattern =", "body": "excludedPattern?.let { Pattern.compile(it) }<EOL>"}
{"signature": "val annotationClassType =", "body": "callee.returnType<EOL>"}
{"signature": "package kapt<EOL>.", "body": ""}
{"signature": "fun clearStack() {", "body": "<EOL><INDENT><INDENT><INDENT>extraStack.clear()<EOL><INDENT><INDENT><INDENT>super.clearStack()<EOL><INDENT><INDENT>}"}
{"signature": "import m<NUM_LIT>J;<EOL>.", "body": ""}
{"signature": "var unused =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (type == AsmTypes.OBJECT_TYPE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>initialSpilledVariablesCount = count<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (<NUM_LIT>toString().equals(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun reportSuspensionPointInsideMonitor(stackTraceElement: String) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.codegen.coroutines.reportSuspensionPointInsideMonitor(callElement, state, stackTraceElement)<EOL><INDENT>}"}
{"signature": "val expectedClassName =", "body": "compileResult.mainClassName<EOL>"}
{"signature": "fun foo<NUM_LIT>(vararg x: Any) {", "body": "}<EOL>fun foo<NUM_LIT>(x: (Any, Any) -> Unit) {}"}
{"signature": "when (sj) {", "body": "<EOL><INDENT>is SubSealedAJava -> <STR_LIT><EOL><INDENT>is SubSealedBJava -> <STR_LIT><EOL>}"}
{"signature": "if (!existingAnnotation.hasSameArguments(superAnnotation, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>existingAnnotation.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FirSerializationErrors.INCONSISTENT_INHERITABLE_SERIALINFO,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>existingAnnotation.annotationTypeRef.coneType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classSymbol.defaultType(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun addMethodExpectation(className: String, memberName: String, jvmSignature: String?, genericSignature: String) {", "body": "<EOL><INDENT><INDENT><INDENT>methodExpectations.add(SignatureExpectation(<STR_LIT>, memberName, jvmSignature, genericSignature))<EOL><INDENT><INDENT>}"}
{"signature": "val typeCheckerForBaseTypes =", "body": "NewKotlinTypeCheckerImpl(KotlinTypeRefiner.Default)<EOL>"}
{"signature": "if (t != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return t!!<EOL><INDENT><INDENT>}"}
{"signature": "if (false.and(false)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val constLimitAsULong =", "body": "progressionType.maxValueAsLong.toULong()<EOL>"}
{"signature": "if (i is I<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>foo(i as I<NUM_LIT>)<EOL><INDENT><INDENT>foo(i as I<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (parent is KtExpression && parent.textRange in textRange && parent.startOffset == candidate.startOffset) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidate = parent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val applicationArea =", "body": "applicationEnvironment.application.extensionArea<EOL>"}
{"signature": "fun test(b: B, c: C, d: D, e: E){", "body": "<EOL><INDENT>b.a = <NUM_LIT><EOL><INDENT>b.foo(<NUM_LIT>)<EOL><INDENT>c.a = <STR_LIT><EOL><INDENT>c.foo(<NUM_LIT>)<EOL><INDENT>d.foo(<STR_LIT>)<EOL><INDENT>e.foo(<STR_LIT>)<EOL>}"}
{"signature": "val backwardsSubstitutionAllowed =", "body": "typeCommonizer.context.enableBackwardsTypeAliasSubstitution<EOL>"}
{"signature": "val james =", "body": "Foo(<STR_LIT>)<EOL>"}
{"signature": "fun generateComponentFunction(function: FunctionDescriptor, parameter: ValueParameterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addFunction(function, DescriptorToSourceUtils.descriptorToDeclaration(parameter) as? KtDeclaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (expression.canBeInterpreted()) {", "body": "<EOL><INDENT><INDENT><INDENT>return expression.interpret(failAsError = data.inConstantExpression)<EOL><INDENT><INDENT>}"}
{"signature": "fun save(output: DataOutput, value: ICClassesAttributes) {", "body": "<EOL><INDENT><INDENT>output.writeBoolean(value.isSealed)<EOL><INDENT>}"}
{"signature": "fun setFirstPauseEndTime(value: Long) {", "body": "<EOL><INDENT><INDENT>firstPauseEndTimeNs = value<EOL><INDENT>}"}
{"signature": "val byteMax =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Byte.MAX_VALUE }()<!><EOL>"}
{"signature": "if (descriptor.isSuspendLambdaOrLocalFunction()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(functionType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_MPP_FILTER_RESOURCES_BY_EXTENSION =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "fun visitTypeOperatorCall(typeOperatorCall: FirTypeOperatorCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeOperatorCall(typeOperatorCall)<EOL><INDENT>}"}
{"signature": "if (this is FirQualifiedAccessExpression) {", "body": "<EOL><INDENT><INDENT>val calleeReference = calleeReference<EOL><INDENT><INDENT>calleeReference is FirSuperReference<EOL><INDENT>}"}
{"signature": "if (type === KtTokens.LBRACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>balance++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val locationWithLineAndOffset =", "body": "location<EOL>"}
{"signature": "fun addHandlerTask(id: Int, priority: Int, queue: Packet?) {", "body": "<EOL><INDENT><INDENT>this.addTask(id, priority, queue, HandlerTask(this))<EOL><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(x: <!INVISIBLE_REFERENCE!>Private<!>.<!INVISIBLE_REFERENCE!>Public<!>, y: <!INVISIBLE_REFERENCE!>Public<!>) {", "body": "<EOL><EOL>}"}
{"signature": "val digitCount =", "body": "fragmentParts.size.toString().length<EOL>"}
{"signature": "val HAS_MARGIN =", "body": "<STR_LIT>\"Hello,<EOL>"}
{"signature": "if (collectedTypes.isNotEmpty() && c.languageVersionSettings.supportsFeature(LanguageFeature.NewInference)) {", "body": "<INDENT><INDENT><INDENT>// Sometime expected type may be inferred to be an intersection of all of the smart-cast types<INDENT><INDENT><INDENT>val typeToIntersect = collectedTypes + dataFlowValue.type<INDENT><INDENT><INDENT>collectedTypes.addIfNotNull(intersectWrappedTypes(typeToIntersect))<INDENT><INDENT>}"}
{"signature": "val Yplus<NUM_LIT> =", "body": "<!NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION!>Y + <NUM_LIT><!><EOL>"}
{"signature": "val debuggerFacade =", "body": "NodeJsDebuggerFacade(jsFilePath, localVariables)<EOL>"}
{"signature": "fun callJava(derived: Test.Derived, derivedRaw: Test.DerivedRaw, v: Test.I<NUM_LIT>) {", "body": "<EOL><INDENT>derived.foo(v)<EOL><INDENT>derivedRaw.foo(v)<EOL>}"}
{"signature": "if (k === key) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return valuesArray!![index]<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val sizeIsEqual =", "body": "psiTypeArguments.size == type.arguments.size<EOL>"}
{"signature": "val isImplicitInvokeCallWithExplicitReceiver =", "body": "callSite.isCallWithExplicitReceiver<EOL>"}
{"signature": "import<EOL><EOL><INDENT><INDENT>if (!fqName.", "body": "isAcceptable) return import<EOL>"}
{"signature": "val currentlyEditing =", "body": "TodoItem()<EOL>"}
{"signature": "val Vector<NUM_LIT> =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val typeArgumentSizeDiff =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>aQualifier.typeArgumentList.typeArguments.size - bQualifier.typeArgumentList.typeArguments.size<EOL>"}
{"signature": "val extensionStorage =", "body": "CompilerPluginRegistrar.ExtensionStorage()<EOL>"}
{"signature": "val inductionVariableIndex =", "body": "loopInitialization.statements.indexOfFirst { it.isInductionVariable(context) }<EOL>"}
{"signature": "val serializableArrayType =", "body": "Type.getType(<STR_LIT>)<EOL>"}
{"signature": "val jvmScript =", "body": "(compiledScript as? KJvmCompiledScript)<EOL>"}
{"signature": "val watGenerator =", "body": "WasmIrToText(sourceMapGeneratorForText)<EOL>"}
{"signature": "if (priorityDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return priorityDiff<EOL><INDENT><INDENT>}"}
{"signature": "val jsExportIgnore =", "body": "session.symbolProvider.getClassLikeSymbolByClassId(SerializationJsDependenciesClassIds.jsExportIgnore)<EOL>"}
{"signature": "val containingScript =", "body": "containingBlock?.parent as? KtScript<EOL>"}
{"signature": "val sourceArray =", "body": "source.reinterpret<ShortVar>().ptr<EOL>"}
{"signature": "fun invForInt() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, (<NUM_LIT>).inv())<EOL><INDENT>}"}
{"signature": "val trimPredicate =", "body": "{ it: Char -> !it.isAsciiDigit() }<EOL>"}
{"signature": "val decomposerTransformer =", "body": "BlockDecomposerTransformer(context, ::unreachableExpression)<EOL>"}
{"signature": "if (insn is LineNumberNode) {", "body": "<EOL><INDENT><INDENT><INDENT>currentLineNumber = insn.line<EOL><INDENT><INDENT>}"}
{"signature": "val _b =", "body": "atomic(false)<EOL>"}
{"signature": "val _platformDeclarationCheckers =", "body": "ComposedDeclarationCheckers(MppCheckerKind.Platform)<EOL>"}
{"signature": "val errorInfo =", "body": "calculateErrorInfo(JsObject.getPrototypeOf(this_))<EOL>"}
{"signature": "val resultBits =", "body": "magnitude.withSign(sign).toBits()<EOL>"}
{"signature": "fun visitDiagnosticHolder(diagnosticHolder: FirDiagnosticHolder) {", "body": "<EOL><INDENT><INDENT>visitElement(diagnosticHolder)<EOL><INDENT>}"}
{"signature": "val destructComposites =", "body": "mutableMapOf<FirVariableSymbol<*>, IrComposite>()<EOL>"}
{"signature": "val jsIterator =", "body": "current.getLastIterator()<EOL>"}
{"signature": "if (ktDeclaration.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>specialSetter != null && specialGetter != null<EOL><INDENT><INDENT>}"}
{"signature": "for (i in (logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT>0 + i<EOL><INDENT>}"}
{"signature": "for (i in intArray) {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, i)<EOL><INDENT>}"}
{"signature": "val containingDeclarationSymbol =", "body": "firSymbol.containingDeclarationSymbol<EOL>"}
{"signature": "fun visitImplicitTypeRef(implicitTypeRef: FirImplicitTypeRef, data: FirElement) {", "body": "<EOL><INDENT><INDENT><INDENT>detectedImplicitTypesParents += data<EOL><INDENT><INDENT>}"}
{"signature": "val myCustomCommonMain =", "body": "create(<STR_LIT>)<EOL>"}
{"signature": "val Suppress =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "if (project.findProperty(KOTLIN_<NUM_LIT>X_MPP_DEPRECATION_SUPPRESS_FLAG) != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>project.reportDiagnosticOncePerBuild(KotlinToolingDiagnostics.Kotlin<NUM_LIT>XMppDeprecation())<EOL><INDENT>}"}
{"signature": "val cachedMiddle =", "body": "middle.diagnostics<EOL>"}
{"signature": "val k<NUM_LIT> =", "body": "Test<NUM_LIT>(<STR_LIT>)<EOL>"}
{"signature": "fun noReceiverAllowed(trace: BindingTrace) {", "body": "<EOL><INDENT><INDENT>unexpectedError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val modeMap =", "body": "EnumMap<FirTowerDataMode, FirTowerDataContext>(FirTowerDataMode::class.java)<EOL>"}
{"signature": "val tempDirectoryForRemoval =", "body": "File(outputFiles.mainFileName + <STR_LIT>)<EOL>"}
{"signature": "val importedDescriptor =", "body": "traceForImportResolve.bindingContext.get(BindingContext.REFERENCE_TARGET, importedReference) ?: return<EOL>"}
{"signature": "fun render(builder : StringBuilder, indent : String) {", "body": "<EOL><INDENT>builder.append(<STR_LIT>)<EOL>  }"}
{"signature": "fun unsupportedEx() {", "body": "<EOL><INDENT>if (true) throw UnsupportedOperationException()<EOL>}"}
{"signature": "else if (operationType === EQ) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>visitAssignment(left, getDeferredValue(right), expression)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val constructorId =", "body": "CallableId(classId, classId.shortClassName)<EOL>"}
{"signature": "val ktFunctionalType =", "body": "getTypeInferredByFrontendOrFail(ktCallableReference)<EOL>"}
{"signature": "val useSeparateHolder =", "body": "bridge.returnsVoid<EOL>"}
{"signature": "for (case in x.cases) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processStatements(case.statements)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lambdaAnalyzer =", "body": "LambdaAnalyzerImpl()<EOL>"}
{"signature": "val resultingSize =", "body": "result.size + extra.size()<EOL>"}
{"signature": "for (e in gg.sourceIterator()) {", "body": "<EOL><INDENT><INDENT><INDENT>val key = gg.keyOf(e)<EOL><INDENT><INDENT><INDENT>res += key<EOL><INDENT><INDENT>}"}
{"signature": "fun null<NUM_LIT>Short(x: Short?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "if (qualifier != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(qualifier)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitPropertyNode(node: CirPropertyNode, data: Unit) {", "body": "<INDENT><INDENT>node.commonDeclaration() // commonize property<INDENT>}"}
{"signature": "if (config.showProgress) {", "body": "<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun record(<EOL><INDENT><INDENT>call: Call,<EOL><INDENT><INDENT>results: OverloadResolutionResultsImpl<out CallableDescriptor?>,<EOL><INDENT><INDENT>deferredComputation: BasicCallResolutionContext,<EOL><INDENT><INDENT>tracing: TracingStrategy,<EOL><INDENT><INDENT>resolutionTrace: DelegatingBindingTrace<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>innerCache.record(call, results, deferredComputation, tracing, resolutionTrace)<EOL><INDENT>}"}
{"signature": "val delegateInitExpr =", "body": "Translation.translateAsExpression(expression, context)<EOL>"}
{"signature": "if (descriptor.correspondingVariable !is LocalVariableDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>newDeclaration(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val jsonElement =", "body": "json.parseToJsonElement(message)<EOL>"}
{"signature": "val I<NUM_LIT>_STORE<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "for (x in when (i) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> <!BREAK_OR_CONTINUE_OUTSIDE_A_LOOP!>break<!><EOL><INDENT><INDENT><NUM_LIT> -> <!BREAK_OR_CONTINUE_OUTSIDE_A_LOOP!>continue<!><EOL><INDENT><INDENT>else -> xs<EOL><INDENT>}"}
{"signature": "val Lp<NUM_LIT> =", "body": "1.4<NUM_LIT>9819860511658591e<NUM_LIT>  <EOL>"}
{"signature": "val filerField =", "body": "JavacProcessingEnvironment::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "val aConstructor =", "body": "a.constructor<EOL>"}
{"signature": "val annotationsRawMap =", "body": "(NULLABILITY_ANNOTATION_SETTINGS as NullabilityAnnotationStatesImpl).states<EOL>"}
{"signature": "val delegateName =", "body": "context.getScopeForDescriptor(classDescriptor).declareFreshName(<STR_LIT>)<EOL>"}
{"signature": "val overridableGroup =", "body": "<EOL><INDENT><INDENT><INDENT>OverridingUtil.extractMembersOverridableInBothWays(nextHandle, queue, descriptorByHandle) { conflictedHandles.add(it) }<EOL>"}
{"signature": "if (dumpFirFile) {", "body": "<INDENT><INDENT>// we should resolve the entire file instead of the declaration to be sure that this declaration will be<INDENT><INDENT>// resolved by file resolution as well<INDENT><INDENT>declarationToRender.lazyResolveToPhaseRecursively(FirResolvePhase.BODY_RESOLVE)<INDENT><INDENT>declarationToRender.render()<INDENT>}"}
{"signature": "for (i in <NUM_LIT> until BuiltInFunctionArity.BIG_ARITY - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val kSuspendFunction = FunctionTypeKind.KSuspendFunction<EOL><INDENT><INDENT><INDENT>val kSuspendFun = kSuspendFunction.packageFqName.toString() + <STR_LIT> + kSuspendFunction.classNamePrefix<EOL><INDENT><INDENT><INDENT>addKotlinToJava(FqName(kSuspendFun + i), K_FUNCTION_CLASS_ID)<EOL><INDENT><INDENT>}"}
{"signature": "if (destination.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT>destination.deleteRecursively()<EOL><INDENT><INDENT>}"}
{"signature": "val decrement =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.dec()<!><EOL>"}
{"signature": "val scenario =", "body": "Scenario()<EOL>"}
{"signature": "val destDir =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val sourceSetsByTarget =", "body": "multiplatformExtension.sourceSets.groupBy { sourceSet -> sourceSet.commonizerTarget.getOrThrow() }<EOL>"}
{"signature": "val wrapperIrFunction =", "body": "context.irFactory.generateWrapperHeader(target, numDefaultParametersToExpect)<EOL>"}
{"signature": "val initialConstraints =", "body": "ArrayList<Constraint>()<EOL>"}
{"signature": "val customKotlinCompilation =", "body": "project.kotlinJvmExtension.target.compilations.getByName(<STR_LIT>)<EOL>"}
{"signature": "if (stderr.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(stderr)<EOL><INDENT>}"}
{"signature": "val irSamConvertedVarInitializer =", "body": "createSamConvertedVarInitializer(irIndexVar, mostSpecificSamConversion)<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JvmProtoBuf.typeAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JvmProtoBuf.typeAnnotation, i), new.getExtension(JvmProtoBuf.typeAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasVarargElementType()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + varargElementType.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val pattern =", "body": "filter.toRegex()<EOL>"}
{"signature": "if (!isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>, experimentalContractsAnnotation.render(), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (generatedArtifact.hasExport) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>hasFileWithExportedDeclaration = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val MAX_LENGTH =", "body": "<NUM_LIT><EOL>"}
{"signature": "val noEndorsedLibs =", "body": "arguments.noendorsedlibs<EOL>"}
{"signature": "val trueBoxNull =", "body": "TrueBox(null)<EOL>"}
{"signature": "val subDerivedWithKey =", "body": "SubDerivedWithKey()<EOL>"}
{"signature": "if (afn is Float) {", "body": "<EOL><INDENT><INDENT>assertFalse(afn == afn, <STR_LIT>)<EOL><INDENT><INDENT>assertTrue(afn != afn, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val aCompanion =", "body": "A.Companion<EOL>"}
{"signature": "val JFConsumer =", "body": "javaFunction(<STR_LIT>)<EOL>"}
{"signature": "fun usage(a: SamePackage) {", "body": "<EOL><INDENT>samePackage()<EOL>}"}
{"signature": "val MINIMAL_VERSION_FOR_INLINE_CLASSES =", "body": "ApiVersion.parse(<STR_LIT>)!!<EOL>"}
{"signature": "fun err<NUM_LIT>() {", "body": "<EOL><INDENT>::x()()<EOL>}"}
{"signature": "val typeSizeAnnotation =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val scopeForDeclaration =", "body": "getMemberScopeDeclaredIn(typeAlias, location)<EOL>"}
{"signature": "if (visibility == Visibilities.Local) {", "body": "<EOL><INDENT><INDENT><INDENT>return created<EOL><INDENT><INDENT>}"}
{"signature": "if (strIndex >= rightBound) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (filteredExceptions.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>listOf(<EOL><INDENT><INDENT><INDENT><INDENT>AssertionError(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT>).wrap()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val halF =", "body": "doubleArrayOf(<NUM_LIT>, -<NUM_LIT>)<EOL>"}
{"signature": "val serializedIrParts =", "body": "BitEncoding.encodeBytes(serializedIr)<EOL>"}
{"signature": "val relevantVals =", "body": "HashSet<IrVariable>()<EOL>"}
{"signature": "fun append(ignore: String, x: String) {", "body": "<EOL><INDENT>result += x<EOL>}"}
{"signature": "val exportAnnotationFqName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun clearModuleByClassLoaderCache() {", "body": "<EOL><INDENT>moduleByClassLoader.clear()<EOL>}"}
{"signature": "if (this is IrEnumConstructorCall && (function.parent as? IrClass)?.symbol == builtIns.enumClass) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// This is a special case. IrEnumConstructorCall don't contain arguments.<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val actualSize =", "body": "maxOf(buffer.size * <NUM_LIT> / <NUM_LIT> + <NUM_LIT>, newSize)<EOL>"}
{"signature": "val nextIndexAfterPrefix =", "body": "resolveToPackageOrClassPrefix(<EOL>"}
{"signature": "val librariesMismatch =", "body": "platformLibsDiff.missingLibs.isNotEmpty() || platformLibsDiff.newLibs.isNotEmpty()<EOL>"}
{"signature": "if (ly == <NUM_LIT>U) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>j = iy shr (<NUM_LIT><NUM_LIT> - k)<EOL><INDENT><INDENT><INDENT><INDENT>if ((j shl (<NUM_LIT><NUM_LIT> - k)) == iy) yisint = <NUM_LIT> - (j and <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (i < strDecimalPart.length && strDecimalPart[i] == '<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT>}"}
{"signature": "val ctorFunctionSignature =", "body": "LlvmFunctionSignature(LlvmRetType(llvm.voidType))<EOL>"}
{"signature": "if (intrinsicType == IntrinsicType.COMPARE_AND_EXCHANGE_FIELD || intrinsicType == IntrinsicType.GET_AND_SET_FIELD) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.irByteToBool(it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (elseBranch != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>branches.add(elseBranch)<EOL><INDENT><INDENT><INDENT><INDENT>generateInstructions(elseBranch)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lazyInitializers =", "body": "mutableListOf<Lazy<*>>()<EOL>"}
{"signature": "if (this is FirPropertyAccessExpression) {", "body": "<EOL><INDENT><INDENT>val originalCall = this.candidate()?.callInfo?.callSite as? FirFunctionCall ?: return false<EOL><INDENT><INDENT>return originalCall.isAnyOfDelegateOperators()<EOL><INDENT>}"}
{"signature": "val usedLabels =", "body": "HashSet<LabelNode>()<EOL>"}
{"signature": "val newReceiverType =", "body": "newReceiver.type<EOL>"}
{"signature": "fun xorForInt() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT> xor <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitWhileLoop(loop: IrWhileLoop) {", "body": "<EOL><INDENT><INDENT>visitLoop(loop)<EOL><INDENT>}"}
{"signature": "val alsoA =", "body": "lambda()<EOL>"}
{"signature": "val BigChunksSizeAlignment =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun report(filePath: String, owner: String, name: String, constType: String) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val jsArrayLike<NUM_LIT>Array =", "body": "context.intrinsics.jsArrayLike<NUM_LIT>Array<EOL>"}
{"signature": "val KOTLIN_SCRIPT_ENGINE_BINDINGS_KEY =", "body": "<STR_LIT><EOL>"}
{"signature": "val profile =", "body": "profiler.execute(<STR_LIT>)<EOL>"}
{"signature": "for (descriptor in optionalAnnotationClassDescriptors) {", "body": "<EOL><INDENT><INDENT>addOptionalAnnotationClass(serializer.classProto(descriptor))<EOL><INDENT>}"}
{"signature": "val methodVar =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createTmpVariable(<EOL>"}
{"signature": "import okio.", "body": "FileSystem<EOL>"}
{"signature": "for (expectNestedClass in expectClass.nestedClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val actualNestedClass = actualNestedClassesByName[expectNestedClass.name] ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>actualClasses[expectNestedClass.classIdOrFail] = actualNestedClass.symbol<EOL><INDENT><INDENT><INDENT><INDENT>recordRecursively(expectNestedClass, actualNestedClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val failed =", "body": "ArrayList<T>()<EOL>"}
{"signature": "fun generic(list: List<String>) {", "body": "<EOL><INDENT>}"}
{"signature": "val unwrappedDescriptor =", "body": "descriptor.unwrapInitialDescriptorForSuspendFunction()<EOL>"}
{"signature": "val r<NUM_LIT> =", "body": "Foo ? ? :: bar<EOL>"}
{"signature": "when (typeArgument) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrTypeProjection -> makeTypeProjection(this.remapType(typeArgument.type), typeArgument.variance)<EOL><INDENT><INDENT><INDENT>is IrStarProjection -> typeArgument<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(x: K & Any) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "if (x !is Bar && y != x) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Still error<INDENT><INDENT><INDENT><INDENT>y.<!UNRESOLVED_REFERENCE!>bar<!>()<INDENT><INDENT><INDENT>}"}
{"signature": "val data<NUM_LIT> =", "body": "parcelableCreator<Wrapper>().createFromParcel(parcel)<EOL>"}
{"signature": "val dummyInstrumentSrcDir =", "body": "task.project.layout.buildDirectory.dir(<STR_LIT>).get().asFile<EOL>"}
{"signature": "val staticReference =", "body": "JavaClass::staticField<EOL>"}
{"signature": "if (condition is FirElseIfTrueCondition) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun typeMismatchOnInheritance(descriptor<NUM_LIT>: CallableMemberDescriptor, descriptor<NUM_LIT>: CallableMemberDescriptor) {", "body": "<INDENT><INDENT><INDENT>// don't care<INDENT><INDENT>}"}
{"signature": "val importedWithEffectInModuleWithName =", "body": "ifTrue { readString() }<EOL>"}
{"signature": "val breakName =", "body": "JsScope.declareTemporaryName(getBreakLabel())<EOL>"}
{"signature": "val apOptionsActions =", "body": "<EOL><INDENT><INDENT>mutableListOf<(KaptArguments) -> Unit>()<EOL>"}
{"signature": "fun visitReceiverParameterDescriptor(descriptor: ReceiverParameterDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>reportUnexpectedDescriptor(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (old.hasTypeAliasName()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkClassIdEquals(old.typeAliasName, new.typeAliasName)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val klibLib =", "body": "compileToLibrary(testCaseLib)<EOL>"}
{"signature": "val suiteTestClassName =", "body": "<STR_LIT><EOL>"}
{"signature": "val existingFileDirs =", "body": "if (complete) fileDirs else fileDirs.filter { it.exists }<EOL>"}
{"signature": "import Foo.", "body": "foo as bar<EOL>"}
{"signature": "val staticMembersLoweringPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "val activityDescriptor =", "body": "find(AndroidConst.ACTIVITY_FQNAME) ?: return SyntheticElementResolveContext.ERROR_CONTEXT<EOL>"}
{"signature": "val objCOutletName =", "body": "<STR_LIT><EOL>"}
{"signature": "var allErrorsAtEof =", "body": "true<EOL>"}
{"signature": "if (!done) {", "body": "<EOL><INDENT><INDENT><INDENT>closeTag(p, MODULES)<EOL><INDENT><INDENT><INDENT>done = true<EOL><INDENT><INDENT>}"}
{"signature": "if (!(regularClass.isLocal && regularClass.classId.parentClassId == null)) {", "body": "<EOL><INDENT><INDENT><INDENT>addDeclarationToParent(irClass, parent)<EOL><INDENT><INDENT>}"}
{"signature": "val creatorClassId =", "body": "ClassId(FqName(<STR_LIT>), FqName(<STR_LIT>), isLocal = false)<EOL>"}
{"signature": "fun suspending() {", "body": "<EOL><INDENT>log += <STR_LIT><EOL><INDENT>suspendHere()<EOL><INDENT>log += <STR_LIT><EOL>}"}
{"signature": "val constructorCallSites =", "body": "callSiteMap[constructor.descriptor].orEmpty()<EOL>"}
{"signature": "fun functionStarted() {", "body": "<EOL><INDENT><INDENT>functionsStarted++<EOL><INDENT>}"}
{"signature": "val NON_LITERAL_OBJC_NAME_ARG =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "val mutex =", "body": "SessionMutex<Int>()<EOL>"}
{"signature": "fun print(obj: Any) {", "body": "}<EOL><EOL><EOL>fun String.prt(action : (String) -> Unit){<EOL><INDENT>action(this)<EOL>}"}
{"signature": "if (data.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotatedAncestors[element] = data.peek()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resolvedVersion =", "body": "mutableMapOf<String, ResolvedNpmDependency>()<EOL>"}
{"signature": "val test_varWithProtectedSet =", "body": "C::varWithProtectedSet<EOL>"}
{"signature": "if (!entryDescription.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createFile(entryDescription, filesByRelativePath)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val exportedTags =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun bar(p: KMutableProperty<NUM_LIT><Int>) {", "body": "<EOL><INDENT>p.set(1<NUM_LIT><NUM_LIT>)<EOL>}"}
{"signature": "if (!isGetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>valueParameters += firValueParameters<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val alreadyIndexed =", "body": "indexedRoots.toHashSet()<EOL>"}
{"signature": "if (isIR) {", "body": "<EOL><INDENT><INDENT><INDENT>analyzeGreenFileIr(bh)<EOL><INDENT><INDENT>}"}
{"signature": "if (<!SENSELESS_COMPARISON!>ind == null<!>) {", "body": "}"}
{"signature": "val firTargetSymbol =", "body": "fir.target.labeledElement<EOL>"}
{"signature": "var isReportDeprecatedSinceKotlinWithUnorderedVersions =", "body": "false<EOL>"}
{"signature": "val dstRefHolder =", "body": "structGep(blockLiteralType, dstBlockPtr, <NUM_LIT>)<EOL>"}
{"signature": "val jvmModulePathRoots =", "body": "mutableListOf<VirtualFile>()<EOL>"}
{"signature": "val expectedTypeWithEstimatedReturnType =", "body": "replaceReturnTypeForCallable(expectedType, estimatedReturnType)<EOL>"}
{"signature": "if (predicate(this[index])) {", "body": "<EOL><INDENT><INDENT><INDENT>return index<EOL><INDENT><INDENT>}"}
{"signature": "val dynamicCallDescriptors =", "body": "mutableListOf<DeclarationDescriptor>()<EOL>"}
{"signature": "val publishedAarPath =", "body": "<STR_LIT><EOL>"}
{"signature": "val javaSourcesScope =", "body": "projectEnvironment.getSearchScopeForProjectJavaSources()<EOL>"}
{"signature": "val jar =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "fun bar(y: Int) {", "body": "<EOL><INDENT><INDENT>bar(y)<EOL><INDENT>}"}
{"signature": "else if (split.size >= <NUM_LIT> && split[<NUM_LIT>] == <STR_LIT> && split[<NUM_LIT>] == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>replInterpreter.dumpClasses(PrintWriter(System.out))<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "package not accessible by the short name<EOL>.", "body": ""}
{"signature": "fun testIncompleteHierarchyOfEnclosingClass() {", "body": "<EOL><INDENT><INDENT>doTestBrokenLibrary(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun test(jc: JavaClass) {", "body": "<EOL><INDENT>jc.field<EOL>}"}
{"signature": "val resultMatrix =", "body": "multiplyMatrix(matrixSize, matrixSize,<EOL>"}
{"signature": "val builderExtension =", "body": "JvmAbiClassBuilderInterceptor(<EOL>"}
{"signature": "fun registerField(clazz: ClassNode, field: FieldNode) {", "body": "<EOL><INDENT><INDENT>register(field, clazz.name + <STR_LIT> + field.name)<EOL><INDENT>}"}
{"signature": "val classAnnotationsConstructors =", "body": "copyAnnotationsFrom(enumDescriptor.owner.annotations)<EOL>"}
{"signature": "val KOTLIN_COMPILER_SETTINGS_FILE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testFindBoundaryCases<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>val regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>val result = regex.find(<STR_LIT>)<EOL><EOL><INDENT><INDENT>assertNotNull(result)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, result!!.value)<EOL><EOL><INDENT>}"}
{"signature": "val argumentContext =", "body": "argumentContexts[arg]!!<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>(null) != x<!>) {", "body": "}"}
{"signature": "val fileVar =", "body": "alloc<CXFileVar>()<EOL>"}
{"signature": "val gradleNodeModules =", "body": "GradleNodeModulesCache.registerIfAbsent(project, null, null)<EOL>"}
{"signature": "fun genThrow(functionGenerationContext: FunctionGenerationContext, kotlinException: LLVMValueRef) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// Super class implementation would do too, so this is just an optimization:<INDENT><INDENT><INDENT><INDENT><INDENT>// use local jump instead of wrapping to C++ exception, throwing, catching and unwrapping it:<INDENT><INDENT><INDENT><INDENT><INDENT>functionGenerationContext.jumpToHandler(kotlinException)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (e in intArray) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += e<EOL><INDENT><INDENT>}"}
{"signature": "val newInferenceEnabled =", "body": "components.languageVersionSettings.supportsFeature(LanguageFeature.NewInference)<EOL>"}
{"signature": "val F<NUM_LIT>_FLOOR =", "body": "<STR_LIT><EOL>"}
{"signature": "val DIAGNOSTICS_PACKAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (a is A && b is B) {", "body": "<EOL><INDENT><INDENT>a.foo()<EOL><INDENT><INDENT>b.foo()<EOL><INDENT>}"}
{"signature": "if (classifier is IrTypeParameterSymbol && classifier.owner.isReified) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>consumeReifiedOperationMarker(classifier)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val RUNS =", "body": "<NUM_LIT>_<NUM_LIT>_<NUM_LIT><EOL>"}
{"signature": "val scriptDependenciesFromClassLoader =", "body": "scriptDependencies.filterIsInstance<JvmDependencyFromClassLoader>().takeIf { it.isNotEmpty() }<EOL>"}
{"signature": "fun visit(arg: Wrapper) {", "body": "<EOL><INDENT><INDENT><INDENT>add(arg.tag)<EOL><INDENT><INDENT>}"}
{"signature": "if (propertyAccessor == null && isSetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declareDefaultSetterParameter(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.returnTypeRef.toIrType(c, ConversionTypeOrigin.SETTER),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>firValueParameter = null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val parameterNamedValueJavaType =", "body": "methodNamedValue.returnType<EOL>"}
{"signature": "fun foo(x: Inv<String>) {", "body": "}<EOL>fun foo(x: Inv<Int>) {}"}
{"signature": "if (functionTypeInterfacePackages.isFunctionTypeInterfacePackageFile(irFile)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>providers += FileSignatureProvider.GeneratedFunctionTypeInterface(irFile, sourceFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun disposeEnvironment() {", "body": "<INDENT><INDENT>// The test is run with `Lifecycle.PER_METHOD` (as it's the default), so the disposable needs to be disposed after each test.<INDENT><INDENT>Disposer.dispose(rootDisposable)<INDENT>}"}
{"signature": "val re<NUM_LIT> =", "body": "RegExp(<STR_LIT>)<EOL>"}
{"signature": "val catchTranslator =", "body": "CatchTranslator(expression.catchClauses, expression, context())<EOL>"}
{"signature": "val hasSetter =", "body": "setter != null<EOL>"}
{"signature": "if (items.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>numObjects = items[<NUM_LIT>].toInt()<EOL><EOL><INDENT><INDENT><INDENT><INDENT>return input<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun generate(<EOL><INDENT><INDENT><INDENT>moduleFragment: IrModuleFragment,<EOL><INDENT><INDENT><INDENT>pluginContext: IrPluginContext<EOL><INDENT>) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val debugResult =", "body": "debugCompareTo(other)<EOL>"}
{"signature": "val parameterForAnnotationConstructor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>convertJavaAnnotationMethodToValueParameter(javaMethod, firJavaMethod, moduleData)<EOL>"}
{"signature": "for (e in map.entries) {", "body": "<EOL><INDENT><INDENT><INDENT>actualKeys.add(e.key)<EOL><INDENT><INDENT><INDENT>actualValues.add(e.value)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitFunctionAccess(expression: IrFunctionAccessExpression) {", "body": "<EOL><INDENT><INDENT>super.visitFunctionAccess(expression)<EOL><INDENT>}"}
{"signature": "fun test(<!REDECLARATION, REDECLARATION!>a<!>: Int, <!REDECLARATION, REDECLARATION!>a<!>: String) {", "body": "}<EOL><EOL>fun test<NUM_LIT>(block: (Int, String) -> Unit) { }"}
{"signature": "val knownBuiltIns =", "body": "irBuiltIns.knownBuiltins.map { (it as IrSymbolOwner).symbol }.toSet()<EOL>"}
{"signature": "val reifiedArguments =", "body": "mutableListOf<IrType>()<EOL>"}
{"signature": "fun setOSName(name: String?) {", "body": "<EOL><INDENT><INDENT>systemProperties.setProperty(<STR_LIT>, name)<EOL><INDENT>}"}
{"signature": "fun fromInterface(id: Id<String>)<EOL><INDENT>fun fromInterface(name: Name<String>)<EOL><EOL><INDENT>fun fromBoth(id: Id<String>)<EOL><INDENT>fun fromBoth(name: Name<String>)<EOL><INDENT><EOL><INDENT>fun withDefaultImpl(id: Id<String>) {", "body": "<EOL><INDENT><INDENT>if (id.id != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "val javaLangCloneable =", "body": "FqNameUnsafe(<STR_LIT>)<EOL>"}
{"signature": "val groupDisambiguation =", "body": "group.targets.joinToString { it.identityString } +<EOL>"}
{"signature": "if (setParent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.parent = currentParent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val pointsToGraphs =", "body": "mutableMapOf<DataFlowIR.FunctionSymbol.Declared, PointsToGraph>()<EOL>"}
{"signature": "val symlinkToOtherJava =", "body": "Files.createSymbolicLink(File(tempDir, <STR_LIT>).toPath(), otherJava.toPath()).toFile()<EOL>"}
{"signature": "val buildLogSteps =", "body": "parseTestBuildLog(buildLogFile)<EOL>"}
{"signature": "fun test(a<NUM_LIT>: Any, a<NUM_LIT>: UInt?, a<NUM_LIT>: Any?, a<NUM_LIT>: Any?) {", "body": "<INDENT>val b<NUM_LIT> = a<NUM_LIT> as UInt // checkcast, unbox<INDENT>val b<NUM_LIT> = a<NUM_LIT> as UInt // unbox<INDENT>val b<NUM_LIT> = a<NUM_LIT> as UInt? // checkcast<INDENT>val b<NUM_LIT> = a<NUM_LIT> as? UInt // instanceof, checkcast}"}
{"signature": "val projectVersion =", "body": "project.version.toString()<EOL>"}
{"signature": "val lexer =", "body": "NodeSemverExpressionLexer(ANTLRInputStream(version))<EOL>"}
{"signature": "val severityString =", "body": "AnalyzerWithCompilerReport.convertSeverity(severity).toString().toLowerCaseAsciiOnly()<EOL>"}
{"signature": "when (filtered.size) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> filtered<EOL><INDENT><INDENT><INDENT><NUM_LIT>, candidates.size -> null<EOL><INDENT><INDENT><INDENT>else -> chooseMaximallySpecificCandidates(filtered, newFlags())<EOL><INDENT><INDENT>}"}
{"signature": "val disposeHelper =", "body": "generateFunction(<EOL>"}
{"signature": "val ctorParams =", "body": "arrayListOf<Any?>()<EOL>"}
{"signature": "val commonOptions =", "body": "gradleOptions<CommonToolArguments>()<EOL>"}
{"signature": "val classMetadata =", "body": "declarationGenerator.context.getClassMetadata(declaration.symbol)<EOL>"}
{"signature": "val objCDocumentedAnnotations =", "body": "foo.getObjCDocumentedAnnotations()<EOL>"}
{"signature": "if (!isReachable()) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(this)<EOL><INDENT><INDENT><INDENT>queue.addLast(this)<EOL><EOL><INDENT><INDENT><INDENT>addToUsefulPolyfilledDeclarations()<EOL><INDENT><INDENT>}"}
{"signature": "while (suspendWithResult(x) <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>result += x++<EOL><INDENT><INDENT>}"}
{"signature": "if (serializerClassOriginal.owner.classId == referenceArraySerializerId) {", "body": "<EOL><INDENT><INDENT><INDENT>args = listOf(wrapperClassReference(typeArgumentsAsTypes.single())) + args<EOL><INDENT><INDENT><INDENT>typeArgs = listOf(typeArgs[<NUM_LIT>].makeNotNull()) + typeArgs<EOL><INDENT><INDENT>}"}
{"signature": "val ifBlock =", "body": "currentBlock<EOL>"}
{"signature": "val isAdded =", "body": "project.kotlinArtifactsExtension.artifacts.add(artifact)<EOL>"}
{"signature": "val entriesNames =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>enumEntries.map { it.annotations.serialNameValue?.let { n -> JsStringLiteral(n) } ?: JsNullLiteral() }<EOL>"}
{"signature": "package smoke<EOL>.", "body": ""}
{"signature": "fun reportException(throwable: Throwable) {", "body": "<EOL><INDENT><INDENT>throw throwable<EOL><INDENT>}"}
{"signature": "package local<EOL>.", "body": ""}
{"signature": "val body =", "body": "irFunction.body ?: return<EOL>"}
{"signature": "val arrayClassIdToUnsignedClassId =", "body": "hashMapOf<ClassId, ClassId>()<EOL>"}
{"signature": "val locations =", "body": "defectsByInfo[info]!!<EOL>"}
{"signature": "val javaCompiler =", "body": "ToolProvider.getSystemJavaCompiler()<EOL>"}
{"signature": "fun exitWhenSubjectExpression(expression: FirWhenSubjectExpression) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitWhenSubjectExpression(expression).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val filesToAdd =", "body": "if (reverseFiles) files.reversedSet() else files<EOL>"}
{"signature": "val actualPlatformTypes =", "body": "mutableMapOf<String, RenderedType>()<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Inv<out Number>, list: List<Inv<Any>>) {", "body": "<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(x)<EOL>}"}
{"signature": "val kotlinCompilerJars =", "body": "listOf(<EOL>"}
{"signature": "val klibMetadataPackageFragmentProvider =", "body": "<EOL><INDENT><INDENT><INDENT>platformParameters.klibMetadataPackageFragmentProviderFactory?.createPackageFragmentProvider(<EOL>"}
{"signature": "val stateGetValue =", "body": "stateInterface.getPropertyGetter(<STR_LIT>)!!<EOL>"}
{"signature": "val optInAnnotations =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val NON_LOCAL_RETURN =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!requireGlobalInitializer && !requireThreadLocalInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun testEmpty(ss: List<String>) {", "body": "<EOL><INDENT>for (s in ss);<EOL>}"}
{"signature": "val CHAR_RIGHT_SQUARE_BRACKET =", "body": "<NUM_LIT>xe<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or ']'.toInt()<EOL>"}
{"signature": "val cBar =", "body": "C()::bar<EOL>"}
{"signature": "if (calleeDescriptor.getUserData(INITIAL_DESCRIPTOR_FOR_SUSPEND_FUNCTION) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>userDataMap = LinkedHashMap<CallableDescriptor.UserDataKey<*>, Any>()<EOL><INDENT><INDENT><INDENT>userDataMap[INITIAL_DESCRIPTOR_FOR_SUSPEND_FUNCTION] =<EOL><INDENT><INDENT><INDENT><INDENT>calleeDescriptor.getUserData(INITIAL_DESCRIPTOR_FOR_SUSPEND_FUNCTION)<EOL><INDENT><INDENT>}"}
{"signature": "val isolatedClassLoadersService =", "body": "KonanCliRunnerIsolatedClassLoadersService.attachingToTask(this)<EOL>"}
{"signature": "fun enumWhenTracker_report(whenUsageClassPath: String, enumClassFqName: String) {", "body": "<EOL><INDENT><INDENT>enumWhenTracker?.report(whenUsageClassPath, enumClassFqName) ?: throw NullPointerException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun parameterType(t: T) {", "body": "}<EOL><INDENT>context(T)<EOL><INDENT>open fun contextReceiverType() {}"}
{"signature": "val entryState =", "body": "SuspendState(unit)<EOL>"}
{"signature": "fun TestIdenticalValueParameters(arg: UserKlass) {", "body": "}<EOL><EOL>class TestIdenticalValueParametersReverse {<EOL><INDENT>constructor(arg: UserKlass)<EOL>}"}
{"signature": "if (!it) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.report(CompilerMessageSeverity.STRONG_WARNING, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val processedSymbol =", "body": "typeAliasExpandedSymbol ?: symbol<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Inv<in Number>, list: List<Inv<Any>>) {", "body": "<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(x)<EOL>}"}
{"signature": "val isModuleImport =", "body": "info.isImplicit == <NUM_LIT><EOL>"}
{"signature": "fun dataClass() {", "body": "<EOL><INDENT>val unbounded = DC::f<EOL><INDENT>assertEquals(<NUM_LIT>, unbounded.callBy(mapOf(unbounded.instanceParameter!! to DC(<NUM_LIT>, <NUM_LIT>0))))<EOL><EOL><INDENT>val bounded = DC(<NUM_LIT>, <NUM_LIT>0)::f<EOL><INDENT>assertEquals(<NUM_LIT>, bounded.callBy(mapOf()))<EOL>}"}
{"signature": "val JAVA_LANG_ANNOTATION_REPEATABLE =", "body": "ClassId.topLevel(JvmAnnotationNames.REPEATABLE_ANNOTATION)<EOL>"}
{"signature": "val containingProperty =", "body": "(declaration as? KtPropertyAccessor)?.property ?: return false<EOL>"}
{"signature": "when (tp.variance) {", "body": "<EOL><INDENT><INDENT><INDENT>Variance.INVARIANT -> reflectionSymbols.createInvariantKTypeProjection!!<EOL><INDENT><INDENT><INDENT>Variance.IN_VARIANCE -> reflectionSymbols.createContravariantKTypeProjection!!<EOL><INDENT><INDENT><INDENT>Variance.OUT_VARIANCE -> reflectionSymbols.createCovariantKTypeProjection!!<EOL><INDENT><INDENT>}"}
{"signature": "val NAME_ATTR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (primaryCause.message != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(primaryCause.message)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val problematicBound =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>allBounds.firstOrNull { bound -> bound.second?.constructor != boundsWhichAreTypeParameters.first() }<EOL>"}
{"signature": "if (index == expression.statements.lastIndex) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// The last statement defines the result of the container expression, so it has the same kind.<INDENT><INDENT><INDENT><INDENT><INDENT>// Note: this is even true for returnable blocks: if it is a Unit-returning block, this is exactly<INDENT><INDENT><INDENT><INDENT><INDENT>// like a usual block; if it is a non-Unit block, then it must end with an explicit return statement.<INDENT><INDENT><INDENT><INDENT><INDENT>data.isTailExpression<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(pa<caret>ram: String) {", "body": "<EOL><INDENT>}"}
{"signature": "if (Flags.DECLARES_DEFAULT_VALUE.get(flags)) {", "body": "<EOL><INDENT><INDENT><INDENT>return buildExpressionStub()<EOL><INDENT><INDENT>}"}
{"signature": "val isConstructorCall =", "body": "superList.findEntry(qualifierName) is KtSuperTypeCallEntry<EOL>"}
{"signature": "for (signature in syntheticStubsToGenerate) {", "body": "<EOL><INDENT><INDENT><INDENT>generateMethodStub(v, signature, synthetic = true)<EOL><INDENT><INDENT>}"}
{"signature": "fun takeNLong(nL: Long?) {", "body": "}<EOL><EOL>fun <T> checkArray(array: T, copy: T.() -> T, toList: T.() -> List<*>, check: (T, T) -> Boolean, modify: T.() -> Unit) {}"}
{"signature": "for (@Volatile x in <NUM_LIT>.<NUM_LIT>) {", "body": "}"}
{"signature": "val errors =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "if (!(id in aliveObjectIds)) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "fun test(id: Id<String>?) {", "body": "<EOL><INDENT>if (id != null) throw AssertionError()<EOL>}"}
{"signature": "fun setTimeCounterEnabled(enable: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>enabled = enable<EOL><INDENT><INDENT>}"}
{"signature": "val requiresUnsignedOperand =", "body": "isUnsigned && name !in binaryOperatorsWithSignedArgument<EOL>"}
{"signature": "val otherDescriptor =", "body": "scope.getContributedClassifier(name, location)<EOL>"}
{"signature": "if (context.languageVersionSettings.doesDataClassCopyRespectConstructorVisibility()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val moduleId =", "body": "getUserVisibleModuleId(deserializer)<EOL>"}
{"signature": "if (jvmClassName.packageFqName != kotlinPackageFqName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.classNameOverride[this] = jvmClassName<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testParserAcceptsValuesWithSpaces() {", "body": "<EOL><INDENT><INDENT>val parser = SimpleExternalDependenciesResolverOptionsParser<EOL><INDENT><INDENT>val options = parser(<STR_LIT>).valueOrThrow()<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val JS_ANNOTATIONS_KLIB_FILTER =", "body": "createFilter(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (layoutBuilder == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>InterfaceTableRecord(llvm.constInt<NUM_LIT>(<NUM_LIT>), llvm.constInt<NUM_LIT>(<NUM_LIT>), null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val regexPattern = regexPatternBuilder.toString()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>singleWildcardSuffix.pattern -> singleWildcardSuffix<EOL><INDENT><INDENT><INDENT><INDENT>multiWildcardSuffix.pattern -> multiWildcardSuffix<EOL><INDENT><INDENT><INDENT><INDENT>else -> Regex(regexPattern)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val additionalResFile =", "body": "additionalResDir.resolve(<STR_LIT>).apply { writeText(<STR_LIT>) }<EOL>"}
{"signature": "if (!isValidJavaFqName(value)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJvm.JVM_PACKAGE_NAME_MUST_BE_VALID_NAME.on(entry))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun place() {", "body": "content() }"}
{"signature": "val stubVariablesSubstitutor =", "body": "builderInferenceSession.getNotFixedToInferredTypesSubstitutor()<EOL>"}
{"signature": "if (hasAbbreviatedType()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + abbreviatedType.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "while(x.fd<caret>fd){", "body": "<EOL>}"}
{"signature": "fun testPlus(doPlus: (Set<String>) -> Set<String>) {", "body": "<EOL><INDENT><INDENT>val set = setOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val set<NUM_LIT>: Set<String> = doPlus(set)<EOL><INDENT><INDENT>assertEquals(setOf(<STR_LIT>, <STR_LIT>), set)<EOL><INDENT><INDENT>assertEquals(setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>), set<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun processFile(file: FirFile) {", "body": "<EOL><INDENT><INDENT>file.transform<FirFile, Nothing?>(transformer, null)<EOL><INDENT>}"}
{"signature": "val F<NUM_LIT>_LOAD =", "body": "<STR_LIT><EOL>"}
{"signature": "fun renderTypeParameterType(descriptor: TypeParameterDescriptor, printer: PrettyPrinter) {", "body": "<EOL><INDENT><INDENT>printer.append(descriptor.name.render())<EOL><INDENT>}"}
{"signature": "fun infinite() {", "body": "<INDENT><INDENT>assertTrue(Duration.INFINITE.isInfinite())<INDENT><INDENT>assertTrue((-Duration.INFINITE).isInfinite())<INDENT><INDENT>assertTrue(Double.POSITIVE_INFINITY.nanoseconds.isInfinite())<INDENT><INDENT>// seconds converted to nanoseconds overflow to infinite<INDENT><INDENT>assertTrue(Double.MAX_VALUE.seconds.isInfinite())<INDENT><INDENT>assertTrue((-Double.MAX_VALUE).seconds.isInfinite())<INDENT>}"}
{"signature": "val elementList =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "if (openingStartOffset < closingStartOffset) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>requireNotNull(opening)<EOL><INDENT><INDENT><INDENT><INDENT>val openingMatch = Opening(counter++, opening.groups[<NUM_LIT>]!!.value, opening.range.first)<EOL><INDENT><INDENT><INDENT><INDENT>openings.addLast(openingMatch)<EOL><INDENT><INDENT><INDENT><INDENT>stackOfOpenings.addLast(openingMatch)<EOL><INDENT><INDENT><INDENT><INDENT>text.removeRange(openingStartOffset, opening.range.last + <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (platformType == KotlinPlatformType.wasm) {", "body": "<EOL><INDENT><INDENT><INDENT>config.experiments += listOf(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val reverseAdapters =", "body": "allReverseAdapters.getValue(it).adapters<EOL>"}
{"signature": "val latestVersion =", "body": "moduleVersions[dependency] ?: return null<EOL>"}
{"signature": "if (profilerProcess.exitValue() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw BenchmarkFailedException(profilerProcess.exitValue())<EOL><INDENT><INDENT>}"}
{"signature": "val syntheticTokenTypes =", "body": "TokenSet.create(KtTokens.ELVIS, KtTokens.EXCLEXCL)<EOL>"}
{"signature": "fun bar(x: () -> Int) {", "body": "}<EOL>fun bam(x: A.() -> Int) {}"}
{"signature": "val actualEnclosingClass =", "body": "javaClass.getEnclosingClass()!!.getName()<EOL>"}
{"signature": "import pack.", "body": "*<EOL>"}
{"signature": "var beenInTestBuilderImpl =", "body": "false<EOL>"}
{"signature": "if (followFunctionReference(expression)) {", "body": "<INDENT><INDENT><INDENT><INDENT>// If control reaches end of lambda, it will *not* end the current function by default,<INDENT><INDENT><INDENT><INDENT>// so the lambda's body itself is not a tail statement.<INDENT><INDENT><INDENT><INDENT>expression.symbol.owner.body?.accept(this, VisitorState(isTailExpression = false, inOtherFunction = true))<INDENT><INDENT><INDENT>}"}
{"signature": "if (hasSeen(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>target.append(<STR_LIT>).append(shortInfo).append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val exceptionsSupportNativeLibrary =", "body": "listOf(config.exceptionsSupportNativeLibrary)<EOL>"}
{"signature": "if (isMuted) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>$directive\\<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val typeParam =", "body": "A::class.members.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "if (!project.useCustomDist) {", "body": "<EOL><INDENT><INDENT><INDENT>project.setProperty(ProjectProperty.KONAN_HOME, project.konanCompilerDownloadDir())<EOL><INDENT><INDENT><INDENT>project.setProperty(ProjectProperty.DOWNLOAD_COMPILER, true)<EOL><INDENT><INDENT>}"}
{"signature": "val typeText =", "body": "TypeInfo.createTypeText(typeInfo) ?: return PsiType.NULL<EOL>"}
{"signature": "val jsonFile =", "body": "File(specTestsDir, jsonFileName)<EOL>"}
{"signature": "val envTypeArgument =", "body": "envMapping[envTypeParameter]<EOL>"}
{"signature": "fun testDerived(base: Base, derived: Derived) {", "body": "<EOL><INDENT>val test<NUM_LIT>: String = base.foo(<STR_LIT>)<EOL><INDENT>val test<NUM_LIT>: String = derived.foo(<STR_LIT>)<EOL>}"}
{"signature": "if (mapInfoToWarning) {", "body": "<EOL><INDENT><INDENT><INDENT>ICReporter.ReportSeverity.WARNING<EOL><INDENT><INDENT>}"}
{"signature": "val whenReturnType =", "body": "inferTypeForWhenExpression(<EOL>"}
{"signature": "package samples.", "body": "system<EOL>"}
{"signature": "fun take() {", "body": "<EOL><INDENT><expr>Foo</expr>(<NUM_LIT>)<EOL>}"}
{"signature": "fun useInteropBindingFrom(podName: String) {", "body": "<EOL><INDENT><INDENT><INDENT>interopBindingDependencies.add(podName)<EOL><INDENT><INDENT>}"}
{"signature": "if (!jvmSourcesJar.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val zTwo =", "body": "Z(<NUM_LIT>U, -<NUM_LIT>)<EOL>"}
{"signature": "fun testRepeatedAnalysisKlib() {", "body": "<EOL><INDENT><INDENT>if (jsirStdlib != null)<EOL><INDENT><INDENT><INDENT>runTest(K<NUM_LIT>JSCompiler(), repeatedAnalysis, jsirStdlib!!, outklib, listOf(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "if (backingField.isLateInit && backingField.isNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(backingField.source, FirErrors.LATEINIT_NULLABLE_BACKING_FIELD, context)<EOL><INDENT><INDENT>}"}
{"signature": "val unusedChangesCollector =", "body": "ChangesCollector()<EOL>"}
{"signature": "if (contextReceivers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(LanguageFeature.ContextReceivers, LanguageFeature.State.ENABLED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsonWithObject =", "body": "Json.encodeToString(DataWithObject(SerializableObject))<EOL>"}
{"signature": "var MyDemoGetterCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun useHandlers(vararg constructor: Constructor<AnalysisHandler<InputArtifact>>) {", "body": "<EOL><INDENT><INDENT>handlers += constructor<EOL><INDENT>}"}
{"signature": "fun testByteDotCall(c<NUM_LIT>: C<Byte>) {", "body": "<EOL><INDENT>c<NUM_LIT>.takeT(<!INTEGER_OPERATOR_RESOLVE_WILL_CHANGE!><NUM_LIT>plus(<NUM_LIT>)<!>)<EOL><INDENT>c<NUM_LIT>.takeT(<!TYPE_MISMATCH!><NUM_LIT>inc()<!>)<EOL><INDENT>c<NUM_LIT>.takeT(<!TYPE_MISMATCH!><NUM_LIT>dec()<!>)<EOL><INDENT>c<NUM_LIT>.takeT(<!INTEGER_OPERATOR_RESOLVE_WILL_CHANGE!><NUM_LIT>shr(<NUM_LIT>)<!>)<EOL><INDENT>c<NUM_LIT>.takeT(<!INTEGER_OPERATOR_RESOLVE_WILL_CHANGE!><NUM_LIT>inv()<!>)<EOL>}"}
{"signature": "val appEnv =", "body": "createApplicationEnvironment(<EOL>"}
{"signature": "val exitInitState =", "body": "initialize(variableDescriptor, blockScopeVariableInfo, out)<EOL>"}
{"signature": "for (i in remapping.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>remapping[i] = i<EOL><INDENT><INDENT>}"}
{"signature": "fun syncMutedTests(<EOL><INDENT>remotelyMutedTests: Map<String, MuteTestJson>,<EOL><INDENT>locallyMutedTests: Map<String, MuteTestJson>,<EOL>) {", "body": "<EOL><INDENT>val deleteList = remotelyMutedTests - locallyMutedTests.keys<EOL><INDENT>val uploadList = locallyMutedTests - remotelyMutedTests.keys<EOL><INDENT>deleteMutedTests(deleteList)<EOL><INDENT>uploadMutedTests(uploadList)<EOL>}"}
{"signature": "while (current != null && current !is IrFunction && current !is IrClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>current = current.parent as? IrDeclaration<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (modelClass.isAssignableFrom(B::class.java)) {", "body": "<EOL><INDENT><INDENT>createViewModel()<EOL><INDENT>}"}
{"signature": "val objectAssignCall =", "body": "<STR_LIT><EOL>"}
{"signature": "val mainModuleKind =", "body": "configuration[JSConfigurationKeys.MODULE_KIND]<EOL>"}
{"signature": "val MB =", "body": "M + <NUM_LIT>UL<EOL>"}
{"signature": "val symbolKlibSourceFileName =", "body": "symbol.getKlibSourceFileName()<EOL>"}
{"signature": "fun testLines() {", "body": "<EOL><INDENT><INDENT>handler.write(<STR_LIT>.toByteArray())<EOL><INDENT><INDENT>handler.write(<STR_LIT>.toByteArray())<EOL><INDENT><INDENT>handler.close()<EOL><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>clientCalls<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, logString)<EOL><INDENT>}"}
{"signature": "var number =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (!mockJdkRuntimeJar.exists()) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val importedShortNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val osRegex =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "if (declaration.isComposableSingletonClass()) {", "body": "<EOL><INDENT><INDENT><INDENT>return declaration<EOL><INDENT><INDENT>}"}
{"signature": "if (tN != null) {", "body": "<EOL><INDENT><INDENT><INDENT>t = tN<EOL><INDENT><INDENT>}"}
{"signature": "val currentXcodeVersion =", "body": "xcode.version<EOL>"}
{"signature": "if (isConventionOperator) {", "body": "<EOL><INDENT><INDENT><INDENT>checkModConvention(functionDescriptor, context.languageVersionSettings, context.trace, reportOn)<EOL><INDENT><INDENT>}"}
{"signature": "val prevImport =", "body": "importedSources.put(keyPath, file to sourceName)<EOL>"}
{"signature": "fun toByteArrayEncodings() {", "body": "<EOL><INDENT><INDENT>val s = <STR_LIT><EOL><INDENT><INDENT>assertEquals(String(s.toByteArray()), String(s.toByteArray(Charsets.UTF_<NUM_LIT>)))<EOL><INDENT>}"}
{"signature": "val compileTimeConst =", "body": "propertyDescriptor.compileTimeInitializer<EOL>"}
{"signature": "var hasMain =", "body": "false<EOL>"}
{"signature": "val byteIterator =", "body": "getPrimitiveIterator(PrimitiveType.BYTE)<EOL>"}
{"signature": "val fails =", "body": "mutableListOf<FailureInfo>()<EOL>"}
{"signature": "val requestCaches =", "body": "CopyOnWriteArrayList<WeakReference<RequestCache>>()<EOL>"}
{"signature": "val badEdges =", "body": "mutableListOf<Pair<Node, Node.CastEdge>>()<EOL>"}
{"signature": "if (DescriptorUtils.getParentOfType(descriptor, PackageFragmentDescriptor::class.java) != this) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val specs =", "body": "this@Module.onlyIf<EOL>"}
{"signature": "if (checkForPrimitiveOrPattern(condition, orConstants)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>caseCount += orConstants.size<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cases += SwitchBranchData.SwitchCaseData(orConstants, branch.result)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun streamToList() {", "body": "<EOL><INDENT><INDENT>val stringStream: Stream<String> = Stream.of(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val stringList: List<String> = stringStream.toList()<EOL><INDENT><INDENT>assertPrints(stringList, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val firstName =", "body": "rangeKotlinType.getPropertyGetterName(<STR_LIT>)<EOL>"}
{"signature": "if (next.name == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>rewriteAssertionsDisabledFieldInitialization(next, inliningContext.root.callSiteInfo.ownerClassName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (actualAnnotationsWithSameClassId.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>IncompatibilityType.DifferentOnActual(expectAnnotation, actualAnnotationsWithSameClassId.single())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val removedKeys =", "body": "if (trackChanges) mutableSetOf<LookupSymbolKey>() else null<EOL>"}
{"signature": "fun registerUserDefinedAnnotation(metaAnnotation: AnnotationFqn, annotationClasses: Collection<FirRegularClass>) {", "body": "<EOL><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val setFunctionDescriptor =", "body": "context[BindingContext.INDEXED_LVALUE_SET, expression]?.candidateDescriptor<EOL>"}
{"signature": "if (dir.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>touchExisting(dir)<EOL><INDENT><INDENT>}"}
{"signature": "fun testFunctionCallSmartcast(fn: (() -> Unit)?) {", "body": "<EOL><INDENT>if (fn == null) return<EOL><EOL><INDENT>fn()<EOL>}"}
{"signature": "if (isInlineLambdaCodegen) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.addParentsToInnerClassesIfNeeded(innerClasses)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val apiElementsDependencies =", "body": "project.configurations<EOL>"}
{"signature": "val STACK_TRACE_DELIMITER =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!icContext.useCompilerMapsOnly) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>constantsMap.remove(it)<EOL><INDENT><INDENT><INDENT><INDENT>inlineFunctionsMap.remove(it)<EOL><INDENT><INDENT><INDENT><INDENT>internalNameToSource.remove(it.internalName)<EOL><INDENT><INDENT><INDENT><INDENT>javaSourcesProtoMap.remove(it, changesCollector)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allValueArguments =", "body": "oldCall.valueArguments<EOL>"}
{"signature": "for (d in digits) {", "body": "//<INDENT><INDENT><INDENT>sum += if (i % <NUM_LIT> == size % <NUM_LIT>) double(d) else d//<INDENT><INDENT><INDENT>i++//<INDENT><INDENT>}"}
{"signature": "if (currentOffset > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>add(<NUM_LIT> until currentOffset)<EOL><INDENT><INDENT>}"}
{"signature": "val inflater =", "body": "Inflater(true)<EOL>"}
{"signature": "val typeVariables =", "body": "subIntersectionTypes.filter(::isMyTypeVariable).takeIf { it.isNotEmpty() } ?: return null<EOL>"}
{"signature": "val calculatedModifiers =", "body": "modifiers ?: Modifier()<EOL>"}
{"signature": "val KAPT_KOTLIN_GENERATED =", "body": "<STR_LIT><EOL>"}
{"signature": "val numberHolder =", "body": "cache.javaCache.getStructure(MY_TEST_DIR.resolve(<STR_LIT>))!! as SourceFileStructure<EOL>"}
{"signature": "for (callableDescriptor in candidateDescriptor.overriddenTreeUniqueAsSequence(useOriginal = false)) {", "body": "<EOL><INDENT><INDENT><INDENT>val containingClass = callableDescriptor.containingDeclaration as? ClassDescriptor ?: continue<EOL><INDENT><INDENT><INDENT>if (containingClass.fqNameOrNull() != CONCURRENT_HASH_MAP_FQ_NAME) continue<EOL><EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.CONCURRENT_HASH_MAP_CONTAINS_OPERATOR.on(context.languageVersionSettings, reportOn))<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "fun localFunction(msg: String) {", "body": "obj.status = msg }"}
{"signature": "val subTypeRefAndSource =", "body": "typeRefAndSourcesForArguments?.getOrNull(index)<EOL>"}
{"signature": "val return<NUM_LIT> =", "body": "arg<NUM_LIT>(<STR_LIT>).mapTo(result<NUM_LIT>, { it.code })<EOL>"}
{"signature": "if (configurationName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>extendsFrom(project.configurations.maybeCreateDependencyScope(configurationName))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (annotation == null && declaration.isInline && !declaration.isExpect) {", "body": "<INDENT><INDENT><INDENT>// only report if value keyword exists, this ignores the deprecated inline class syntax<INDENT><INDENT><INDENT>val keyword = declaration.getModifier(KtTokens.VALUE_KEYWORD)?.source ?: return<INDENT><INDENT><INDENT>reporter.reportOn(keyword, FirJvmErrors.VALUE_CLASS_WITHOUT_JVM_INLINE_ANNOTATION, context)<INDENT><INDENT>}"}
{"signature": "val N =", "body": "((n + <NUM_LIT>) * ln(<NUM_LIT>) / ln(<NUM_LIT>)).toInt()<EOL>"}
{"signature": "fun run(setup: (Run).() -> Unit) {", "body": "<EOL><INDENT><INDENT>val r = Run()<EOL><INDENT><INDENT>r.setup()<EOL><INDENT><INDENT>runs.add(r)<EOL><INDENT>}"}
{"signature": "val dstWalk =", "body": "dstRoot.walk(PathWalkOption.INCLUDE_DIRECTORIES)<EOL>"}
{"signature": "val removeClassFromAbi =", "body": "shouldRemoveFromAbi(irClass, removePrivateClasses, treatInternalAsPrivate)<EOL>"}
{"signature": "if (psiCall is CallTransformer.CallForImplicitInvoke) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>psiCall.outerCall.calleeExpression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.source?.kind !is KtFakeSourceElementKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkForLocalRedeclarations(declaration.typeParameters, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fileDataHash =", "body": "cityHash<NUM_LIT>(lib.file(fileIndex))<EOL>"}
{"signature": "if (index > <NUM_LIT> && separateFieldsWithBlankLine) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val serializerGetterFunction =", "body": "<EOL><INDENT><INDENT><INDENT>getSerializerGetterFunction(serializableIrClass)?.takeIf { it.isFromPlugin(compilerContext.afterK<NUM_LIT>) }<EOL>"}
{"signature": "val GET_CONTEXT_METHOD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for(i in <NUM_LIT>.contextReceiverTypeIdCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + typeById(getContextReceiverTypeId(i)).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val isSinglePlatformType =", "body": "SourceSetConstraint { isSinglePlatformTypeSourceSet(it) }<EOL>"}
{"signature": "fun configure(configuration: Action<@UnsafeVariance CO>) {", "body": "<EOL><INDENT><INDENT>configuration.execute(options)<EOL><INDENT>}"}
{"signature": "val obsoleteMultifileClasses =", "body": "linkedSetOf<String>()<EOL>"}
{"signature": "val image =", "body": "createUniversal(imageType = includedImageType)<EOL>"}
{"signature": "val jar<NUM_LIT> =", "body": "writeJar(<STR_LIT>, processors(<STR_LIT>))<EOL>"}
{"signature": "val MULTILINE_COMMENT_REGEX =", "body": "<STR_LIT>\"\\/\\*\\s+?%s\\s+\\*\\/(?:\\n)*<STR_LIT>\"<EOL>"}
{"signature": "val mutableAttachments =", "body": "mutableListOf<Attachment>()<EOL>"}
{"signature": "val previousSnapshot =", "body": "loadPreviousSnapshot(incAptCacheDir, allDataFiles, changedFiles)<EOL>"}
{"signature": "val apiFiles =", "body": "project<EOL>"}
{"signature": "fun ifun(s: () -> Unit) {", "body": "<EOL><INDENT>s()<EOL>}"}
{"signature": "for (i in <NUM_LIT>toUShort()..<NUM_LIT>toUShort()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val test_znz =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>z === nz<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nz === z<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>z !== nz<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nz !== z<!><EOL>"}
{"signature": "if (value === currentValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@compute currentRef<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (rhs in suspendCalls && lhs.isStateMachineResult()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>suspendCalls -= rhs<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setSyntheticJavaProperty(f: Boolean) {", "body": "<EOL><INDENT><INDENT>mask = mask or IdSignature.Flags.IS_SYNTHETIC_JAVA_PROPERTY.encode(f)<EOL><INDENT>}"}
{"signature": "for (directive in imports) {", "body": "<INDENT><INDENT><INDENT>val importedName = directive.importedName ?: continue // parse error<INDENT><INDENT><INDENT>builder.put(importedName, directive)<INDENT><INDENT>}"}
{"signature": "val genericSignatureMatch =", "body": "genericSignatureRegex.matchExact(lines[lineNo + <NUM_LIT>])<EOL>"}
{"signature": "fun visitScript(script: FirScript, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitScript(script)<EOL><INDENT>}"}
{"signature": "if (!isArrayElementGetter()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val field = getBackingField()<EOL><INDENT><INDENT><INDENT><INDENT>listOf(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.buildFieldAccessor(field, dispatchReceiver, false),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.buildFieldAccessor(field, dispatchReceiver, true)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (KotlinBuiltIns.isUnit(returnType) || KotlinBuiltIns.isNothing(returnType)) {", "body": "<EOL><INDENT><INDENT><INDENT>irBlockBody.statements.add(irCall)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitWhenEnterNode(node: WhenEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.numberOfSuspensions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (counter != i) error(<STR_LIT> + i + <STR_LIT> + counter)<EOL><INDENT><INDENT><INDENT><INDENT>proceed()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val COMPILE_SOURCES =", "body": "<STR_LIT><EOL>"}
{"signature": "val MAX_REQUEST_ATTEMPTS =", "body": "<NUM_LIT><EOL>"}
{"signature": "val aFunctionSymbols =", "body": "aFunctionAddress.getFunctionSymbols().toList()<EOL>"}
{"signature": "val CINTEROP_KLIB =", "body": "<STR_LIT><EOL>"}
{"signature": "if (function is FirAnonymousFunction) {", "body": "<INDENT><INDENT><INDENT>val (functionExitNode, postponedLambdaExitNode, graph) = graphBuilder.exitAnonymousFunction(function)<INDENT><INDENT><INDENT>functionExitNode.mergeIncomingFlow()<INDENT><INDENT><INDENT>postponedLambdaExitNode?.mergeIncomingFlow()<INDENT><INDENT><INDENT>resetSmartCastPosition() // roll back to state before function<INDENT><INDENT><INDENT>return FirControlFlowGraphReferenceImpl(graph)<INDENT><INDENT>}"}
{"signature": "val LEVELS =", "body": "<STR_LIT><EOL>"}
{"signature": "val testQualifier<NUM_LIT> =", "body": "Host.`__`.bar<EOL>"}
{"signature": "if (myClass.isEnum && !myClass.isAnonymous && !isClassNameSealed()) {", "body": "<EOL><INDENT><INDENT><INDENT>return valuesMethodCache.value<EOL><INDENT><INDENT>}"}
{"signature": "if (element is KtLabelReferenceExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return super.mark(element.getReferencedNameElement())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val customCompilation =", "body": "jvm().compilations.create(<STR_LIT>)<EOL>"}
{"signature": "fun visitSmartCastExpression(smartCastExpression: FirSmartCastExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitSmartCastExpression(smartCastExpression)<EOL><INDENT>}"}
{"signature": "fun foo(x: String, y: Int) {", "body": "<EOL><INDENT><INDENT>s += x<EOL><INDENT>}"}
{"signature": "val referenceExpression =", "body": "type.referenceExpression ?: return<EOL>"}
{"signature": "val fileIds =", "body": "lookupMap[lookup]!!<EOL>"}
{"signature": "fun visitFunctionCall(functionCall: FirFunctionCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionCall(functionCall)<EOL><INDENT>}"}
{"signature": "val loopBlockEnterNode =", "body": "createLoopBlockEnterNode(loop)<EOL>"}
{"signature": "val moduleExpressions =", "body": "proto.moduleExpressionList.map { deserialize(it) }<EOL>"}
{"signature": "fun basicTypesWithErrors() {", "body": "<EOL><INDENT>val a: IntArray = [<!CONSTANT_EXPECTED_TYPE_MISMATCH!><NUM_LIT><!>]<EOL><INDENT>val b: ShortArray = [<!CONSTANT_EXPECTED_TYPE_MISMATCH!><NUM_LIT><!>]<EOL><INDENT>val c: CharArray = [<!TYPE_MISMATCH!><STR_LIT><!>]<EOL>}"}
{"signature": "val simpleTypeName =", "body": "qname.substringAfterLast('.')<EOL>"}
{"signature": "if (checkExternalCalls) {", "body": "<EOL><INDENT><INDENT>runPhase(RewriteExternalCallsCheckerGlobals)<EOL><INDENT>}"}
{"signature": "val upperBound =", "body": "flexible.upperBound<EOL>"}
{"signature": "val sourceMapSourceRootList =", "body": "StringUtil.split(sourceMapSourceRoots, File.pathSeparator)<EOL>"}
{"signature": "if (!initializerIsAlreadyResolved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val resolutionMode = withExpectedType(returnTypeRefBeforeResolve)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.transformReturnTypeRef(transformer, resolutionMode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.transformInitializer(transformer, resolutionMode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.replaceBodyResolveState(FirPropertyBodyResolveState.INITIALIZER_RESOLVED)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val K_SUSPEND_FUNCTION_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val intFloorByte =", "body": "byte.floorDiv(byte)<EOL>"}
{"signature": "val allParts =", "body": "multifileFacadeToParts[facade] ?: continue<EOL>"}
{"signature": "val PART_CLASS_NAME_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val randomFlags =", "body": "generateSequence { Random.nextBoolean() }.take(flagProperties.size).toList()<EOL>"}
{"signature": "val directory =", "body": "file.parent<EOL>"}
{"signature": "val nonFakeOverrideClashes =", "body": "stableNames.collectNonFakeOverrideClashes { it in fakeOverrideStableNames }<EOL>"}
{"signature": "val predefinedKlibHasIcCache =", "body": "mutableMapOf<String, TestArtifactCache?>(<EOL>"}
{"signature": "val psi<NUM_LIT>Ir =", "body": "Psi<NUM_LIT>IrTranslator(languageVersionSettings, configuration, messageLogger::checkNoUnboundSymbols)<EOL>"}
{"signature": "val expandedTypeFir =", "body": "expandedConeType.toSymbol(session)?.fir<EOL>"}
{"signature": "val pushClassFunc =", "body": "serialDescImplClass.getFuncDesc(CallingConventions.addClassAnnotation).single()<EOL>"}
{"signature": "if (diagnosticsService.shouldRenderDiagnostic(module, it.factoryName, it.severity)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val metaInfos = it.toMetaInfos(module, testFile, globalMetadataInfoHandler, lightTreeEnabled, lightTreeComparingModeEnabled)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>globalMetadataInfoHandler.addMetadataInfosForFile(testFile, metaInfos)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val jsScope =", "body": "JsRootScope(JsProgram())<EOL>"}
{"signature": "val wholeClassQualifier =", "body": "resolvedQualifier.classId ?: return<EOL>"}
{"signature": "val dependencyId =", "body": "dependency.selected.id as ModuleComponentIdentifier<EOL>"}
{"signature": "val compiledIrFiles =", "body": "serializedIrFiles<EOL>"}
{"signature": "fun _assert(condition: Boolean) {", "body": "<EOL><INDENT>if (!condition) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "val equalIgnoringCase =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val passedTypeParametersSize =", "body": "minOf(target.typeParameters.size, source.typeParameters.size)<EOL>"}
{"signature": "val SETUP_KOTLIN_OUTPUT =", "body": "<STR_LIT><EOL>"}
{"signature": "val KLIB_PROPERTY_ABI_VERSION =", "body": "<STR_LIT><EOL>"}
{"signature": "if (superName == null || <STR_LIT> == superName || this.isEnum && <STR_LIT> == superName) {", "body": "<EOL><INDENT><INDENT><INDENT>newReferenceList(JavaStubElementTypes.EXTENDS_LIST, this, ArrayUtil.EMPTY_STRING_ARRAY)<EOL><INDENT><INDENT>}"}
{"signature": "if (compilation is KotlinSharedNativeCompilation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>project.includeCommonizedCInteropMetadata(metadataJar, compilation)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isAnnotation =", "body": "constructedClass.isAnnotationClass<EOL>"}
{"signature": "fun setValue(that: Any?, desc: KProperty<*>, newValue: Int) {", "body": "value = newValue }"}
{"signature": "val unitsToProcess =", "body": "(ownTranslationUnits + setOf(translationUnit)).toList()<EOL>"}
{"signature": "val delegateToGetterSymbol =", "body": "declarationStorage.findGetterOfProperty(delegateToIrPropertySymbol)!!<EOL>"}
{"signature": "val staticCallableReferenceLoweringPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "val originalVisibleAnnotations =", "body": "classNode.visibleAnnotations<EOL>"}
{"signature": "var someListOfLongs =", "body": "mutableListOf<Long>(<NUM_LIT>L)<EOL>"}
{"signature": "val selectorPart =", "body": "this.selector.takeWhile { it != ':' }.trimStart('_')<EOL>"}
{"signature": "else if (typeArgument is ConeKotlinType && typeArgument.typeArguments.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportActualTypeAliasWithComplexSubstitution = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitAnnotation(annotation: FirAnnotation, data: Any?) {", "body": "<EOL><INDENT><INDENT>annotation.acceptChildren(this, null)<EOL><INDENT>}"}
{"signature": "val actualSuperClass =", "body": "actualSuperClassSymbol.owner<EOL>"}
{"signature": "val actualElement =", "body": "actual.get(index)<EOL>"}
{"signature": "val f<NUM_LIT>IrType =", "body": "f<NUM_LIT>Type.defaultType.substitute(mapOf(f<NUM_LIT>ParamSymbol to type))<EOL>"}
{"signature": "val test_cna =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>c === na<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>na === c<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>c !== na<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>na !== c<!><EOL>"}
{"signature": "val barName =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!>SomeClassWithName::bar.name<!><EOL>"}
{"signature": "if (verbose || descriptor.name != SpecialNames.DEFAULT_NAME_FOR_COMPANION_OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!startFromName) renderSpaceIfNeeded(builder)<EOL><INDENT><INDENT><INDENT>builder.append(renderName(descriptor.name, true))<EOL><INDENT><INDENT>}"}
{"signature": "val statementsOrigin =", "body": "getStatementsOrigin(index)<EOL>"}
{"signature": "val frontendDiagnosticsPerFile =", "body": "testServices.firDiagnosticCollectorService.getFrontendDiagnosticsForModule(info)<EOL>"}
{"signature": "if (!type.canBeNull(context.session) && context.languageVersionSettings.supportsFeature(LanguageFeature.EnableDfaWarningsInK<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirErrors.UNNECESSARY_NOT_NULL_ASSERTION, type, context)<EOL><INDENT><INDENT>}"}
{"signature": "val wasm<NUM_LIT> =", "body": "Unit<EOL>"}
{"signature": "if (charCode < gap.start + gap.length) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return unassignedCategoryId<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val importKindFromOption =", "body": "ImportKind.fromShortenOption(option)<EOL>"}
{"signature": "val throwUninitializedPropertyAccessException =", "body": "<EOL><INDENT><INDENT>getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val nativeUtil =", "body": "resolvePath(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (parent == irScript) {", "body": "<EOL><INDENT><INDENT><INDENT>parent = irScriptClass<EOL><INDENT><INDENT>}"}
{"signature": "val enumSerializer =", "body": "Name.identifier(SpecialBuiltins.enumSerializer)<EOL>"}
{"signature": "if (functionLiteral != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val functionalType = getExpectedType(functionLiteral) as? KtFunctionalType<EOL><INDENT><INDENT><INDENT>functionalType?.returnType<EOL><INDENT><INDENT>}"}
{"signature": "val storedResolvedCall =", "body": "completedSimpleAtom.atom.psiKotlinCall.getResolvedPsiKotlinCall<D>(trace)<EOL>"}
{"signature": "val classifiersById =", "body": "CommonizerMap<CirEntityId, CirClassifier>(initialCapacity)<EOL>"}
{"signature": "fun setSection(name: String) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMSetSection(llvmGlobal, name)<EOL><INDENT><INDENT>}"}
{"signature": "while (result != null && !result.isMeaningful) {", "body": "<EOL><INDENT><INDENT>result = result.next<EOL><INDENT>}"}
{"signature": "val builtInsModule =", "body": "builtIns.builtInsModule<EOL>"}
{"signature": "if (type.isFunctionType) {", "body": "<EOL><INDENT><INDENT>return bridgeFunctionType(type)<EOL><INDENT>}"}
{"signature": "val extensionRegistrars =", "body": "(projectEnvironment as? VfsBasedProjectEnvironment)<EOL>"}
{"signature": "val instanceCreatedGuard =", "body": "JsIf(instanceCreatedCondition, instanceCreationBlock).withDefaultLocation()<EOL>"}
{"signature": "val irLambdaFunction =", "body": "FunctionGenerator(context).generateLambdaFunctionDeclaration(ktFun, loopResolver)<EOL>"}
{"signature": "val platformKtFiles =", "body": "platformFiles.map { it.toKtFile(project) }<EOL>"}
{"signature": "if (selectedFqName == fullFqName) return fullSymbolsResolved.mapTo(mutableSetOf()) {", "body": "it.symbol }"}
{"signature": "val numberManager =", "body": "cache.javaCache.getStructure(MY_TEST_DIR.resolve(<STR_LIT>))!! as SourceFileStructure<EOL>"}
{"signature": "val subDescriptorToCheck =", "body": "if (superDescriptor.isRemoveAtByIndex) subDescriptor.original else subDescriptor<EOL>"}
{"signature": "fun testX() {", "body": "<EOL><INDENT>val interface_as_fun = X.<!RESOLUTION_TO_CLASSIFIER!>A<!>()<EOL><INDENT>val interface_as_val = X.<!NO_COMPANION_OBJECT!>A<!><EOL><EOL><INDENT>val object_as_fun = X.<!FUNCTION_EXPECTED!>B<!>()<EOL><INDENT>val class_as_val = X.<!NO_COMPANION_OBJECT!>C<!><EOL>}"}
{"signature": "val firForElement =", "body": "element.getOrBuildFir(firResolveSession) as? FirQualifiedAccessExpression<EOL>"}
{"signature": "val sibling =", "body": "PsiTreeUtil.skipSiblingsForward(this, PsiWhiteSpace::class.java, PsiComment::class.java)<EOL>"}
{"signature": "fun visitElement(element: FirElement, data: FirElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>element.acceptChildren(this, element)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!(d<NUM_LIT> == d || (d<NUM_LIT> - d).absoluteValue <= (<NUM_LIT> * <NUM_LIT>0.0.pow(-decimals)).toDuration(unit))) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val signedIntegers =", "body": "SubstitutableNumbers(<EOL>"}
{"signature": "if (isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>matchers.findFirstMatching(path, isDirectory = true, parentMatch)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun hello() {", "body": "<INDENT>var enumElemFirst = <!VARIABLE_WITH_REDUNDANT_INITIALIZER!>inferenceTest(TestEnum.FIRST)<!><INDENT>enumElemFirst = TestEnum.SECOND // Type mismatch: inferred type is testDebug.TestEnum.<class-object-for-TestEnum>.SECOND but testDebug.TestEnum.<class-object-for-TestEnum>.FIRST was expected<INDENT>var enumElemSecond : TestEnum = <!VARIABLE_WITH_REDUNDANT_INITIALIZER!>inferenceTest(TestEnum.FIRST)<!><INDENT>enumElemSecond = TestEnum.SECOND // Ok<INDENT>use(enumElemFirst, enumElemSecond)}"}
{"signature": "val dmap =", "body": "DMap(mutableMapOf(Wrapper(<NUM_LIT>) to <STR_LIT>))<EOL>"}
{"signature": "if (packageName == null || packageName.toString() == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return clazz.name.toString() + <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "while (i <= r) {", "body": "<EOL><INDENT><INDENT>if (n % i == <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>i += <NUM_LIT><EOL><INDENT>}"}
{"signature": "val internalize =", "body": "closedWorld<EOL>"}
{"signature": "val notNullConstrainingType =", "body": "TypeUtils.makeNotNullable(newConstrainingType)<EOL>"}
{"signature": "import edu.", "body": "umd.cs.findbugs.annotations.*;<EOL>"}
{"signature": "val ctype =", "body": "maxByDomainCapacity(type, otherType)<EOL>"}
{"signature": "val reversedCoefficient =", "body": "<NUM_LIT> - coefficient<EOL>"}
{"signature": "val subjectVar =", "body": "statements[<NUM_LIT>] as? IrVariable ?: return null<EOL>"}
{"signature": "val paramCount =", "body": "argTypes.size + <NUM_LIT>//non static"}
{"signature": "if (c is B && e is E) {", "body": "<EOL><INDENT><INDENT>c == e<EOL><INDENT>}"}
{"signature": "val nullCheckedValueAdapter =", "body": "valueAdapter?.let(::CheckNotNullAndAdapter)<EOL>"}
{"signature": "var noMoreFrames =", "body": "false<EOL>"}
{"signature": "val numberOfTasks =", "body": "<NUM_LIT><EOL>"}
{"signature": "val abiHashesSize =", "body": "input.readInt()<EOL>"}
{"signature": "fun startCodeBlock() {", "body": "<EOL><INDENT><INDENT><INDENT>targetBuilder = codeBlockBuilder<EOL><INDENT><INDENT>}"}
{"signature": "val METADATA_VERSION =", "body": "<NUM_LIT><EOL>"}
{"signature": "import foo as sdfsdf<EOL>.", "body": ""}
{"signature": "val IR_TRANSLATION_RESULT_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "fun addFakeContinuationConstructorCallMarker(v: InstructionAdapter, isStartNotEnd: Boolean) {", "body": "<EOL><INDENT>v.emitInlineMarker(if (isStartNotEnd) INLINE_MARKER_BEFORE_FAKE_CONTINUATION_CONSTRUCTOR_CALL else INLINE_MARKER_AFTER_FAKE_CONTINUATION_CONSTRUCTOR_CALL)<EOL>}"}
{"signature": "import kt<NUM_LIT>bar<EOL>.", "body": ""}
{"signature": "val outerInstance =", "body": "referenceToOuter?.get(lambda)<EOL>"}
{"signature": "var mult =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (builder.length != l) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.appendName(MangleConstant.FQN_SEPARATOR)<EOL><INDENT><INDENT>}"}
{"signature": "val loadedIr =", "body": "LoadedJsIr(irModules, linkerContext.linker, linkerContext.functionTypeInterfacePackages)<EOL>"}
{"signature": "val developer =", "body": "elementToString(data.getRequiredField(<STR_LIT>), <STR_LIT>)<EOL>"}
{"signature": "val resolvedNodes =", "body": "mutableMapOf<Node, ResolvedType>()<EOL>"}
{"signature": "fun collectSignature(fqName: FqName, areSubclassesAffected: Boolean) {", "body": "<EOL><INDENT><INDENT>val prevValue = this.areSubclassesAffected[fqName] ?: false<EOL><INDENT><INDENT>this.areSubclassesAffected[fqName] = prevValue || areSubclassesAffected<EOL><INDENT>}"}
{"signature": "val wasmTargetAttribute =", "body": "Attribute.of(<EOL>"}
{"signature": "val matchers =", "body": "<EOL><INDENT><INDENT><INDENT>owners.patterns<EOL>"}
{"signature": "val linuxBTest =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val nestedClassifierScope =", "body": "getNestedClassifierScope(klass, useSiteSession, scopeSession)<EOL>"}
{"signature": "val atExistingPath =", "body": "if (existingFile == null) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val ix =", "body": "extension.stringTable.getStringIndex(<STR_LIT>)<EOL>"}
{"signature": "val runtimeDelegate =", "body": "lazy { Runtime(llvmContext, config.distribution.compilerInterface(config.target)) }<EOL>"}
{"signature": "val KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (propertyValue != expectedValue) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val isEnclosedInConstructor =", "body": "ConcurrentHashMap.newKeySet<IrAttributeContainer>()<EOL>"}
{"signature": "val visitedAndToVisitNodes =", "body": "nodes.toMutableSet()<EOL>"}
{"signature": "when (val unwrappedType = type.unwrapTypedefs()) {", "body": "<EOL><INDENT><INDENT><INDENT>is IntegerType -> unwrappedType<EOL><INDENT><INDENT><INDENT>CharType -> IntegerType(<NUM_LIT>, true, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> return null<EOL><INDENT><INDENT>}"}
{"signature": "val varargParameterIndex =", "body": "function.realOverrideTarget.varargParameterIndex()<EOL>"}
{"signature": "if (descriptor is VariableDescriptor && descriptor !is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>captureIfNeed(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (classDescriptor.defaultType.isObjCObjectType()) {", "body": "<EOL><INDENT><INDENT><INDENT>return mapObjCObjectReferenceTypeIgnoringNullability(classDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "package $newPackagePrefix;\\n\"<EOL>.", "body": ""}
{"signature": "val existingTargetsForAnnotation =", "body": "entryTypesWithAnnotations.getOrPut(fqName) { arrayListOf() }<EOL>"}
{"signature": "val interopTask =", "body": "project.tasks.named<CInteropProcess>(interop.interopProcessingTaskName).get()<EOL>"}
{"signature": "var sumInner =", "body": "<NUM_LIT><EOL>"}
{"signature": "val containingDeclaration<NUM_LIT> =", "body": "d<NUM_LIT>.containingDeclaration<EOL>"}
{"signature": "fun visitMemberDeclaration(memberDeclaration: FirMemberDeclaration, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitMemberDeclaration(memberDeclaration)<EOL><INDENT>}"}
{"signature": "val linesMatcher =", "body": "module.files<EOL>"}
{"signature": "val userHomeDir =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val JsFactories =", "body": "KlibMetadataFactories(::createBuiltIns, DynamicTypeDeserializer)<EOL>"}
{"signature": "fun test_<NUM_LIT>(map: Map<String, String>) {", "body": "<INDENT>val x = <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>map[<NUM_LIT>]<!> // OK}"}
{"signature": "val previousMappings =", "body": "localContext.projectDescriptor.dataManager.mappings<EOL>"}
{"signature": "fun testNonIncremental() {", "body": "<EOL><INDENT><INDENT>runProcessor(SimpleProcessor().toNonIncremental())<EOL><EOL><INDENT><INDENT>val dirtyFiles = cache.invalidateAndGetDirtyFiles(listOf(TEST_DATA_DIR.resolve(<STR_LIT>).absoluteFile), emptyList(), compiledSources)<EOL><INDENT><INDENT>assertTrue(dirtyFiles is SourcesToReprocess.FullRebuild)<EOL><INDENT>}"}
{"signature": "if (declaration is KtClass && (declaration.isAnnotation() || declaration.isInterface() && !declaration.isSealed())) {", "body": "<EOL><INDENT><INDENT><INDENT>val reportElement = declaration.nameIdentifier ?: declaration<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(ErrorsParcelize.PARCELABLE_SHOULD_BE_CLASS.on(reportElement))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_COMPILER_JAR_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (overridden.modality === Modality.ABSTRACT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overridesAbstractInBaseClass = overridden<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dimension =", "body": "<STR_LIT><EOL>"}
{"signature": "val hasSpecialSignatureInfo =", "body": "methodDescriptor.getSpecialSignatureInfo()<EOL>"}
{"signature": "val charMin =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Character.MIN_VALUE }().toInt()<!><EOL>"}
{"signature": "if (metDefinitelyNotNullType) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.addVersionRequirement(<EOL><INDENT><INDENT><INDENT><INDENT>writeLanguageVersionRequirement(LanguageFeature.DefinitelyNonNullableTypes, versionRequirementTable)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (languageVersionSettings.supportsFeature(LanguageFeature.ProhibitComparisonOfIncompatibleClasses)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>isCompatible = isCompatible && typeParameterOwner.classId != StandardClassIds.KClass<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun writeInt(int: Int) {", "body": "<EOL><INDENT><INDENT>output.writeInt(int)<EOL><INDENT>}"}
{"signature": "val tagPostfix =", "body": "<STR_LIT><EOL>"}
{"signature": "else if (currentChar == '*' && nextChar() == '/') {", "body": "<EOL><INDENT><INDENT><INDENT>commentLevel = maxOf(<NUM_LIT>, commentLevel - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>result.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (initValue is IrConst<*>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (initValue.kind is IrConstKind.Null) return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (initValue.type == declaration.type && initValue.kind !is IrConstKind.String) return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun enterScope() {", "body": "scopeDepth++ }"}
{"signature": "if (superClass.origin is FirDeclarationOrigin.Java) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(superTypeRef.source, FirErrors.CLASS_INHERITS_JAVA_SEALED_CLASS, context)<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resultTypeInfo =", "body": "components.dataFlowAnalyzer.checkType(<EOL>"}
{"signature": "var isValue =", "body": "false<EOL>"}
{"signature": "if (assignmentTarget == name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assignmentTarget.staticRef = assignmentExpr<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (member.isReal && !toSkip(member)) {", "body": "<EOL><INDENT><INDENT><INDENT>realOverrides[member.toKey()] = member<EOL><INDENT><INDENT>}"}
{"signature": "if (project.kotlinPropertiesProvider.swiftExportEnabled && XcodeEnvironment.targets.contains(framework.target.konanTarget)) {", "body": "<EOL><INDENT><INDENT><INDENT>registerSwiftExportTask(framework)<EOL><INDENT><INDENT>}"}
{"signature": "val enabledLanguageFeaturesField =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "if (declaration.isLocal && declaration.isExtension) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.receiverParameter?.source, FirErrors.LOCAL_EXTENSION_PROPERTY, context)<EOL><INDENT><INDENT>}"}
{"signature": "val scriptArgs =", "body": "<EOL><INDENT><INDENT><INDENT>if (arguments.script) arguments.freeArgs.subList(<NUM_LIT>, arguments.freeArgs.size)<EOL>"}
{"signature": "if (containingClassOrPackage is BuiltInsPackageFragment && containingClassOrPackage.isFallback) {", "body": "<EOL><INDENT><INDENT><INDENT>return Errors.MISSING_BUILT_IN_DECLARATION.on(reportOn, descriptor.fqNameSafe)<EOL><INDENT><INDENT>}"}
{"signature": "if (it.declaration.symbol !in referencedValues) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.explicitEndLabel = continueLabel<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (array.size < length) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return java.util.Arrays.copyOfRange(backing, offset, offset + length, array.javaClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val changesInfo =", "body": "ChangesCollector().apply { collectProtoChanges(oldData, newData) }.changes()<EOL>"}
{"signature": "val jsIrLoader =", "body": "JsIrLinkerLoader(configuration, dependencyGraph, emptyList(), irFactory, emptySet())<EOL>"}
{"signature": "val newContextReceiverTypes =", "body": "contextReceivers.map { substitutor.substituteOrNull(it.typeRef.coneType)?.also { isEnhanced = true } }<EOL>"}
{"signature": "if (arrayElementType != null) {", "body": "<EOL><INDENT><INDENT>return typeFactory.createFromString(<STR_LIT> + JvmPrimitiveType.get(arrayElementType).desc)<EOL><INDENT>}"}
{"signature": "val objcNullableAttribute =", "body": "<STR_LIT><EOL>"}
{"signature": "var matchedIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val constFromOtherFile =", "body": "<STR_LIT><EOL>"}
{"signature": "if (entry.conditions.size == <NUM_LIT> && ktCondition is KtWhenConditionWithExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(ktCondition.expression ?: ktCondition).toFirExpression(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>DiagnosticKind.ExpressionExpected,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val _ignoredTests =", "body": "mutableListOf<TestCase>()<EOL>"}
{"signature": "val jvmToolchain =", "body": "taskProvider.flatMap { it.defaultKotlinJavaToolchain }<EOL>"}
{"signature": "if (!fragment.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>serializedFragments[fqName] = fragment.toByteArray()<EOL><INDENT><INDENT>}"}
{"signature": "fun all(a: Int) {", "body": "}<EOL>fun all(a: String) {}"}
{"signature": "val lineNumbers =", "body": "CodegenUtil.getLineNumberForElement(element!!.containingFile, true)<EOL>"}
{"signature": "val callableSymbol =", "body": "symbol as? FirCallableSymbol<*> ?: return null<EOL>"}
{"signature": "val jcInterfaces =", "body": "mapJList(interfaces) { parseType(it.children.single()) }<EOL>"}
{"signature": "val enumMap =", "body": "EnumMap(<EOL>"}
{"signature": "if (f.toDouble() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (argumentType is ConeClassLikeType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkUpperBoundViolated(argumentTypeRef, argumentType, context, reporter, isIgnoreTypeParameters)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(x: A, vararg strings: String) {", "body": "}<EOL>fun takeFunWithA(func: (A) -> Unit) {}"}
{"signature": "val rightArgs =", "body": "oldFields.map { irGetField(irGet(other), it) }<EOL>"}
{"signature": "val javaRoot =", "body": "get(JVMConfigurationKeys.JDK_HOME) ?: File(System.getProperty(<STR_LIT>))<EOL>"}
{"signature": "val outJar<NUM_LIT> =", "body": "File(depDir, <STR_LIT>)<EOL>"}
{"signature": "val correspondingInit =", "body": "irClass.companionObject()!!<EOL>"}
{"signature": "fun Something() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val x = unstable::method<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DOT_BY_QUALIFIED =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "fun notifyIRGenerationFinished() {", "body": "<EOL><INDENT><INDENT>val time = deltaTime(irGenerationStart)<EOL><INDENT><INDENT>measurements += IRMeasurement(<EOL><INDENT><INDENT><INDENT>lines,<EOL><INDENT><INDENT><INDENT>TimeUnit.NANOSECONDS.toMillis(time),<EOL><INDENT><INDENT><INDENT>IRMeasurement.Kind.GENERATION<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun extraCheck(<EOL><INDENT><INDENT>declaration: KtDeclaration,<EOL><INDENT><INDENT>annotation: AnnotationDescriptor,<EOL><INDENT><INDENT>version: String,<EOL><INDENT><INDENT>diagnosticHolder: DiagnosticSink,<EOL><INDENT><INDENT>languageVersionSettings: LanguageVersionSettings<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (value is TrackedReferenceValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processRefValueUsage(value, insn, pos)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val verbose =", "body": "if (phase in verbose) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val KOTLIN_PACKAGE_FQN =", "body": "FqName.fromSegments(listOf(<STR_LIT>))<EOL>"}
{"signature": "val mutableMapEntryClass =", "body": "builtIns.mutableMapEntry.toIrSymbol()<EOL>"}
{"signature": "fun handleClick(clickHandler: ClickHandler) {", "body": "<EOL><INDENT>clickHandler(Button(), ClickEvent())<EOL>}"}
{"signature": "fun store(value: LLVMValueRef, index: Int) {", "body": "<EOL><INDENT><INDENT>variables[index].store(value)<EOL><INDENT>}"}
{"signature": "val reconstructed =", "body": "Json.decodeFromString(Test<NUM_LIT>serializer(), string)<EOL>"}
{"signature": "val otherParents =", "body": "mutableListOf<ClassRef<*>>()<EOL>"}
{"signature": "val kGoldenRatio =", "body": "<NUM_LIT>x<NUM_LIT>e3<NUM_LIT><NUM_LIT><NUM_LIT>b<NUM_LIT><NUM_LIT>f<NUM_LIT>a<NUM_LIT>c<NUM_LIT>UL<EOL>"}
{"signature": "if (bar(true) {", "body": "log += <STR_LIT>; false }"}
{"signature": "val binaryRoot =", "body": "module.getBinaryRoots().singleOrNull() ?: return null<EOL>"}
{"signature": "if (backingField.returnTypeRef.coneType == declaration.returnTypeRef.coneType) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(backingField.source, FirErrors.REDUNDANT_EXPLICIT_BACKING_FIELD, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val pluginOption =", "body": "argumentsIterator.next() // expected plugin:<pluginId>:<optionName>=<value>"}
{"signature": "val asRegularClass =", "body": "this.toRegularClassSymbol(session)?.takeIf { it.isInlineOrValueClass() } ?: return false<EOL>"}
{"signature": "if (reference.symbol.owner.visibility == DescriptorVisibilities.LOCAL) {", "body": "<EOL><INDENT><INDENT><INDENT>declarationContextStack.recordLocalCapture(reference.symbol.owner)<EOL><INDENT><INDENT>}"}
{"signature": "val unstableMask =", "body": "bitMask(*unstable.sliceArray(start until end))<EOL>"}
{"signature": "val commonRunTask =", "body": "registerSubTargetTask<Task>(disambiguateCamelCased(RUN_TASK_NAME)) {}<EOL>"}
{"signature": "val valFromThisFileCompanion =", "body": "<STR_LIT><EOL>"}
{"signature": "val newUpperBound =", "body": "substitutedUpperBound?.upperBoundIfFlexible() ?: type.upperBound<EOL>"}
{"signature": "val substitutedArgument =", "body": "ConeSubstitutorByMap.create(substitution, session)<EOL>"}
{"signature": "val mergedFunctionFromSuperTypes =", "body": "resolveOverridesForNonStaticMembers(<EOL>"}
{"signature": "val directories =", "body": "Directories(systemProperties, environment)<EOL>"}
{"signature": "fun visitTypeProjection(typeProjection: FirTypeProjection, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeProjection(typeProjection)<EOL><INDENT>}"}
{"signature": "val superAnnotations =", "body": "annotationsFilter(superSymbol.resolvedAnnotationsWithClassIds)<EOL>"}
{"signature": "fun readObject(input: ObjectInputStream) {", "body": "<EOL><INDENT><INDENT>input.defaultReadObject()<EOL><INDENT><INDENT>lock = NativeDistributionCommonizerLock(outputDirectory, ::logInfo)<EOL><INDENT>}"}
{"signature": "val candidateHasExtensionReceiver =", "body": "fir.receiverParameter != null<EOL>"}
{"signature": "val samePackage =", "body": "ownerClass.getPackageFragment().packageFqName == scopeClassOrPackage.getPackageFragment()?.packageFqName<EOL>"}
{"signature": "val useSiteElement =", "body": "testServices.expressionMarkerProvider.getElementOfTypeAtCaretOrNull<KtExpression>(mainFile)<EOL>"}
{"signature": "val suggestedNameLastIdx =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "when (declaration.classKind) {", "body": "<EOL><INDENT><INDENT><INDENT>ClassKind.ENUM_CLASS -> declaration as FirRegularClass<EOL><INDENT><INDENT><INDENT>ClassKind.ENUM_ENTRY -> context.containingDeclarations.lastIsInstanceOrNull()<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val onWhenEvaluatedCalled =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "val bodyPreamble =", "body": "mutableStatementContainer()<EOL>"}
{"signature": "var methodsFound =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val commonOutputDirectory =", "body": "temporaryOutputDirectory.root<EOL>"}
{"signature": "if (expression is IrInlinedFunctionBlock) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return super.visitBlock(expression)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testNativeBinaryKotlinDSL(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testNativeBinaryDsl(<STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "val elseAssignment =", "body": "JsAstUtils.decomposeAssignment(elseStatement.expression)<EOL>"}
{"signature": "val objCNamesClassesPackage =", "body": "objCNamesPackage.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val memAfter =", "body": "daemon.getUsedMemory().get() / <NUM_LIT><EOL>"}
{"signature": "val existingConfiguration =", "body": "project.configurations.findByName(sourcesElementsConfigurationName)<EOL>"}
{"signature": "if (memberElement != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return ConflictingDeclarationError.AccidentalOverride(memberElement, data)<EOL><INDENT><INDENT>}"}
{"signature": "val perFileCacheFileName =", "body": "File(outputName).absoluteFile.name<EOL>"}
{"signature": "if(twoThirty.equals(nine.toByte())) {", "body": "<EOL><INDENT>   return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun visitDeclaration(declaration: FirDeclaration) {", "body": "<EOL><INDENT><INDENT>visitElement(declaration)<EOL><INDENT>}"}
{"signature": "if (superClassSymbol != null && superClassSymbol.isInternalSerializable(session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(getSerializablePropertiesForClass(superClassSymbol).serializableProperties)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var zeroSlot =", "body": "<STR_LIT>;<EOL>"}
{"signature": "if (it.name.contains(currentKotlinVersion)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it.name.substringBefore(currentKotlinVersion) + currentKotlinVersion<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in (<NUM_LIT>u.toUShort() downTo <NUM_LIT>u.toUShort() step <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>.add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>.size > <NUM_LIT><NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(x: Inv<NUM_LIT><in Number, out Number>, list: List<Inv<NUM_LIT><Any, Int>>) {", "body": "<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>foo<!>(x)<EOL>}"}
{"signature": "val effectExtractor =", "body": "ConeEffectExtractor(session, owner, valueParameters)<EOL>"}
{"signature": "for (i in a .. b step <NUM_LIT>) {", "body": "}"}
{"signature": "if (a is B) {", "body": "<EOL><INDENT><INDENT><INDENT>a.foo<EOL><INDENT><INDENT><INDENT>a.bar = a.bar + <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val convertedConstant =", "body": "resolutionCallbacks.convertSignedConstantToUnsigned(argument)<EOL>"}
{"signature": "val firstRealOverridden =", "body": "setterDescriptor.firstOverridden { it.kind.isReal } ?: return<EOL>"}
{"signature": "val functionPtrType =", "body": "pointerType(functionType)<EOL>"}
{"signature": "for ((calleeSymbol, source) in calleeSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT>checkJsModuleUsage(calleeSymbol, context, reporter, source ?: expression.source)<EOL><INDENT><INDENT>}"}
{"signature": "if (x == y) {", "body": "<EOL><INDENT><INDENT>return x <!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>+<!> y<EOL><INDENT>}"}
{"signature": "var nodeCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val sanitizedCollector =", "body": "FilteringMessageCollector(messageCollector, VERBOSE::contains)<EOL>"}
{"signature": "val k<NUM_LIT>JSDceCompilerArgumentsStringProperties =", "body": "listOf(<EOL>"}
{"signature": "fun visitScript(script: KtScript) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c.scripts.put(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>script,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lazyDeclarationResolver.getScriptDescriptor(script, KotlinLookupLocation(script))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>registerDeclarations(script.declarations)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(vararg ii: Int) {", "body": "}<EOL>fun foo(vararg ss: String) {}"}
{"signature": "val linuxMainSourceSet =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val renderParameters =", "body": "renderer.renderParameters(diagnostic)<EOL>"}
{"signature": "fun markDead(varIndex: Int) {", "body": "<EOL><INDENT><INDENT>bitSet.set(varIndex, false)<EOL><INDENT>}"}
{"signature": "if (((value xor result) and (durationInUnit xor result)) < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return if (value < <NUM_LIT>) Long.MIN_VALUE else Long.MAX_VALUE<EOL><INDENT>}"}
{"signature": "fun createTempDirectoryDefaultDir() {", "body": "<EOL><INDENT><INDENT>val dir<NUM_LIT> = createTempDirectory().cleanup()<EOL><INDENT><INDENT>val dir<NUM_LIT> = createTempDirectory(directory = null).cleanupRecursively()<EOL><INDENT><INDENT>val dir<NUM_LIT> = createTempDirectory(dir<NUM_LIT>)<EOL><EOL><INDENT><INDENT>assertEquals(dir<NUM_LIT>.parent, dir<NUM_LIT>.parent)<EOL><INDENT><INDENT>assertNotEquals(dir<NUM_LIT>.parent, dir<NUM_LIT>.parent)<EOL><INDENT>}"}
{"signature": "val escapedIdentifiersLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "val QUESTION_MARK_BY_TYPE =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "if (typeRef !is FirFunctionTypeRef || typeRef.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>suspendModifier.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirErrors.WRONG_MODIFIER_TARGET,<EOL><INDENT><INDENT><INDENT><INDENT>suspendModifier.token,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val TestExportObjCClass<NUM_LIT>Name =", "body": "<STR_LIT><EOL>"}
{"signature": "while (leftIterator.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>add(leftIterator.next() to rightDefault())<EOL><INDENT><INDENT>}"}
{"signature": "fun checkExpectedOptimizedOutputSize(debugMode: DebugMode, testFileContent: String, testDir: File) {", "body": "<INDENT>val expectedOptimizeSizes = InTextDirectivesUtils<INDENT><INDENT>.findListWithPrefixes(testFileContent, <STR_LIT>)<INDENT><INDENT>.lastOrNull()<INDENT><INDENT>?.filter(Char::isDigit)<INDENT><INDENT>?.toInt() ?: return<INDENT>assertExpectedSizesMatchActual(debugMode, testDir, listOf(<STR_LIT> to expectedOptimizeSizes))}"}
{"signature": "if (key in otherTypeInfo.keySet()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newTypeInfoBuilder.putAll(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>key,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>myTypeInfo[key].getOrNull().intersectConsideringNothing(otherTypeInfo[key].getOrNull())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: ImmutableLinkedHashSet.empty()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun yield(t: T) {", "body": "}<EOL><INDENT>suspend fun yieldSet(t: Set<T>) {}"}
{"signature": "fun typeParameter(variance: Variance, name: String) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(TypeParameterDescriptorImpl.createWithDefaultBound(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this@FunctionClassDescriptor, Annotations.EMPTY, false, variance, Name.identifier(name), result.size, storageManager<EOL><INDENT><INDENT><INDENT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (testRun.testCase in separateTestCases) {", "body": "<EOL><INDENT><INDENT><INDENT>return RunnerWithExecutor(executor, testRun)<EOL><INDENT><INDENT>}"}
{"signature": "val structureElements =", "body": "mutableSetOf(getStructureElementFor(ktFile))<EOL>"}
{"signature": "fun testFileSystemNotAcceptsMavenPath() {", "body": "<EOL><INDENT><INDENT>val resolver = FileSystemDependenciesResolver()<EOL><INDENT><INDENT>resolver.assertNotAcceptsArtifact(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val fileReportSettings =", "body": "initFileReportSettings()<EOL>"}
{"signature": "val JVM_SYNTHETIC_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val compilerInfoElement =", "body": "element.getOptionBody(<STR_LIT>)<EOL>"}
{"signature": "fun useList(list: List<Any?>) {", "body": "}"}
{"signature": "val mergedScriptText =", "body": "getMergedScriptText(script, testConfig)<EOL>"}
{"signature": "val generic =", "body": "Generic.create() // has a type of Generic<(raw) Any..Any?>"}
{"signature": "val groupedByInternalName =", "body": "hiddenSignatures.groupBy({ it.split(<STR_LIT>)[<NUM_LIT>] }) { it.split(<STR_LIT>)[<NUM_LIT>] }<EOL>"}
{"signature": "val withTypesHash =", "body": "cityHash<NUM_LIT>WithSeed(fileDataHash, lib.types(fileIndex))<EOL>"}
{"signature": "val inProgressLock =", "body": "atomic(false)<EOL>"}
{"signature": "package part $partName of $this\",<EOL>.", "body": ""}
{"signature": "if (descriptor is PropertyDescriptor && descriptor.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJs.JS_MODULE_PROHIBITED_ON_VAR.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "if (whenResultValue != null && entryType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val entryValue =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>facade.components.dataFlowValueFactory.createDataFlowValue(entryExpression, entryType, contextAfterSubject)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>entryTypeInfo.dataFlowInfo.assign(whenResultValue, entryValue, components.languageVersionSettings)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentBlock =", "body": "worklist.removeAt(<NUM_LIT>)<EOL>"}
{"signature": "val ktBodyExpression =", "body": "ktAccessor?.bodyExpression<EOL>"}
{"signature": "while (currentLine != null && currentLine != headerString) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>advance()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var hasWarnings =", "body": "false<EOL>"}
{"signature": "for ((_, _) in xs.withIndex()) {", "body": "<EOL><INDENT><INDENT>count++<EOL><INDENT>}"}
{"signature": "val cinteropDefFile =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val SOURCE_CODE_MODULE_REGEX =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "if (a is Nothing?) {", "body": "<EOL><INDENT><INDENT>val b = a?.length<EOL><INDENT>}"}
{"signature": "val expectedRepoPath =", "body": "Paths.get(<STR_LIT>)<EOL>"}
{"signature": "fun checkState(a: State, b: State, c: State, d: State) {", "body": "<EOL><INDENT><INDENT>if (!AbstractTypeChecker.RUN_SLOW_ASSERTIONS) return<EOL><INDENT><INDENT>checkState(*arrayOf(a, b, c, d))<EOL><INDENT>}"}
{"signature": "if ($LIB_DOUBLE > <NUM_LIT>) {", "body": "return <STR_LIT>; }"}
{"signature": "if (isLocked) {", "body": "<EOL><INDENT><INDENT>isLocked = false<EOL><INDENT>}"}
{"signature": "val secondMessage =", "body": "second.getDeprecationMessage() ?: return@run null<EOL>"}
{"signature": "val parentElement =", "body": "chameleon.treeParent.psi<EOL>"}
{"signature": "val copyIntoSymbol =", "body": "symbols.copyInto[arraySymbol]!!<EOL>"}
{"signature": "val unresolvedSimpleNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val expectedDiagnostics =", "body": "diagnostics.toSet()<EOL>"}
{"signature": "if (Utils.compare(parentVisibility, visibility) ?: <NUM_LIT> < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun addPartialCallInfo(callInfo: PartialCallInfo) {", "body": "}<EOL><INDENT><INDENT><INDENT>override fun addErrorCallInfo(callInfo: ErrorCallInfo) {}"}
{"signature": "fun register(predicates: Collection<AbstractPredicate<*>>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.predicates += predicates<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (startIndex >= size) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (lookFor) <NUM_LIT> else startIndex<EOL><INDENT><INDENT>}"}
{"signature": "val specialAnnotationClassId =", "body": "specialAnnotationsList[qualifiedName]<EOL>"}
{"signature": "if (jvmArgumentsElement == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.useProjectSettings = false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (ktBody is KtBlockExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>statementGenerator.generateStatements(ktBody.statements, irBlockBody)<EOL><INDENT><INDENT>}"}
{"signature": "var availableAddress =", "body": "startAddress<EOL>"}
{"signature": "val jsTest =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "when (versionString) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> LanguageVersion.LATEST_STABLE<EOL><INDENT><INDENT>else -> LanguageVersion.fromVersionString(versionString) ?: error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (returnType != StandardTypes.unit) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val psiToIrOutput =", "body": "engine.runPsiToIr(frontendOutput, isProducingLibrary = false)<EOL>"}
{"signature": "val registrationMap =", "body": "hashMapOf<Type, Any>()<EOL>"}
{"signature": "val inputTypeConstructor =", "body": "inputType.typeConstructor()<EOL>"}
{"signature": "val kniBlockPtr =", "body": "<STR_LIT><EOL>"}
{"signature": "val inlineClassParameterSymbol =", "body": "declaredMemberScope.getConstructors()<EOL>"}
{"signature": "var sealed =", "body": "false<EOL>"}
{"signature": "if (!fileBoundaryReached and !whiteSpaceAfter.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>parent.addAfter(KtPsiFactory(project).createWhiteSpace(<STR_LIT>), this)<EOL><INDENT>}"}
{"signature": "val originalInstruction =", "body": "originalPseudocode.mutableInstructionList[index]<EOL>"}
{"signature": "val jvmPackageNameAnnotation =", "body": "findAnnotationEntryOnFileNoResolve(file, JVM_PACKAGE_NAME_SHORT)<EOL>"}
{"signature": "val previousClassSnapshotExcludingMembers =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>previousClassSnapshot.classMemberLevelSnapshot!!.extraInfo.classSnapshotExcludingMembers<EOL>"}
{"signature": "val destPath =", "body": "destination.javaPath<EOL>"}
{"signature": "when (processor) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirTransformerBasedResolveProcessor -> runStage(processor, firFileSequence)<EOL><INDENT><INDENT><INDENT>is FirGlobalResolveProcessor -> runStage(processor, firFileSequence.toList())<EOL><INDENT><INDENT>}"}
{"signature": "if (valueParameterList?.stub == null) {", "body": "<EOL><INDENT><INDENT><INDENT>TrailingCommaChecker.check(<EOL><INDENT><INDENT><INDENT><INDENT>valueParameterList?.trailingComma,<EOL><INDENT><INDENT><INDENT><INDENT>context.trace,<EOL><INDENT><INDENT><INDENT><INDENT>context.languageVersionSettings<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinSourceFilePaths =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val metadataList =", "body": "arrayListOf<KotlinJavascriptMetadata>()<EOL>"}
{"signature": "val currentClassOptimizationDecision =", "body": "currentClass.possibilityToOptimizeForEsClass<EOL>"}
{"signature": "fun callFoo_FakeOverrideInInterface(obj: Bar_FakeOverrideInInterface) {", "body": "<EOL><INDENT>obj.foo(null)<EOL>}"}
{"signature": "val stringPoolFqName =", "body": "context.kotlinWasmInternalPackageFqn.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "fun register(version: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (version == runnerGradleVersion) return<EOL><EOL><INDENT><INDENT><INDENT><INDENT>daemonRunCount[version] = (daemonRunCount[version] ?: <NUM_LIT>) + <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firstParentVar =", "body": "extractIndex(element.parents[i].origin)<EOL>"}
{"signature": "fun update(data: String) {", "body": "<EOL><INDENT><INDENT>update(data.length)<EOL><INDENT><INDENT>update(data.toByteArray())<EOL><INDENT>}"}
{"signature": "val previousValue =", "body": "edgesMap[instruction]<EOL>"}
{"signature": "val BYTE =", "body": "CompileTimeType<Byte>()<EOL>"}
{"signature": "val test_za =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>z === a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a === z<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>z !== a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a !== z<!><EOL>"}
{"signature": "val kotlinCompileTaskNames =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val fileContentsAfterFirstBuild =", "body": "stubFilesAfterFirstBuild[file]<EOL>"}
{"signature": "val cacheMock =", "body": "CacheMock(true)<EOL>"}
{"signature": "fun renderContextReceivers(<EOL><INDENT><INDENT>analysisSession: KtAnalysisSession,<EOL><INDENT><INDENT>owner: KtContextReceiversOwner,<EOL><INDENT><INDENT>typeRenderer: KtTypeRenderer,<EOL><INDENT><INDENT>printer: PrettyPrinter,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>contextReceiverListRenderer.renderContextReceivers(analysisSession, owner, this, typeRenderer, printer)<EOL><INDENT>}"}
{"signature": "var newDataFlowInfo =", "body": "noChange(context)<EOL>"}
{"signature": "fun testClassPropPrefix() {", "body": "<EOL><INDENT>val p<NUM_LIT> = ++C().p<EOL><INDENT>val p<NUM_LIT> = --C().p<EOL>}"}
{"signature": "val backingMap =", "body": "ConcurrentHashMap<K, SoftReferenceWithCleanup<K, V>>()<EOL>"}
{"signature": "val expectedProcessResourceTaskNames =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "import to have properly imported project.", "body": "<EOL>"}
{"signature": "val snipetsLimited =", "body": "if (limit == <NUM_LIT>) snippets else snippets.take(limit)<EOL>"}
{"signature": "if (superClassSymbol.modality == Modality.SEALED) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val declarationType = if (declaration is FirAnonymousObject) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.SEALED_SUPERTYPE_IN_LOCAL_CLASS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declarationType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>superClassSymbol.classKind,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val filterWithoutExtensions =", "body": "kindFilter exclude DescriptorKindExclude.Extensions<EOL>"}
{"signature": "val cliOptions =", "body": "KaptCliOption.values().mapNotNull { Option(it.cliToolOption ?: return@mapNotNull null, it) }<EOL>"}
{"signature": "val compiledModule =", "body": "snippetValue.getCompiledModule() as KJvmCompiledModuleInMemoryImpl<EOL>"}
{"signature": "if (path.startsWith(base)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return file.toRelativeString(File(base))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun add(name: String, block: CombinationContext.() -> Unit) {", "body": "<EOL><INDENT><INDENT>testCases[name] = block<EOL><INDENT>}"}
{"signature": "while (inputLine != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>response.append(inputLine)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>inputLine = it.readLine()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fakeVarIndex =", "body": "originNode.maxLocals<EOL>"}
{"signature": "val THROWABLE_INTERNAL_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "var forceStepInto =", "body": "false<EOL>"}
{"signature": "import te.", "body": "st.a.`Test$`.`Inner$` as MyInner<NUM_LIT><EOL>"}
{"signature": "package illegal_modifiers<EOL>.", "body": ""}
{"signature": "if (fqName in ParcelizeNames.RAW_VALUE_ANNOTATION_FQ_NAMES || fqName in ParcelizeNames.WRITE_WITH_FQ_NAMES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isUnnamed && isExported) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var tmp_a =", "body": "a // removing this temporary variable changes function behaviour"}
{"signature": "if (x.initExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>varDefinedIn[x.name]?.add(blockIndex)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val kSerializerSupertype =", "body": "supertypes.find { isGeneratedKSerializer(it) }<EOL>"}
{"signature": "fun done() {", "body": "<EOL><INDENT><INDENT>computedNext = true<EOL><INDENT><INDENT>nextStep = null<EOL><INDENT>}"}
{"signature": "val visitedProperty =", "body": "mutableSetOf<FirProperty>()<EOL>"}
{"signature": "val staticOrUnbound =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (static != null)<EOL>"}
{"signature": "val scopeState =", "body": "llvm.initializersGenerationState.scopeState<EOL>"}
{"signature": "val lastPartExpression =", "body": "lastPart.expression ?: return<EOL>"}
{"signature": "when (val companionReceiver = towerElementsForClass.companionReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> statics<EOL><INDENT><INDENT><INDENT>else -> base<EOL><INDENT><INDENT><INDENT><INDENT>.addReceiver(null, companionReceiver)<EOL><INDENT><INDENT><INDENT><INDENT>.addNonLocalScopesIfNotNull(towerElementsForClass.companionStaticScope, towerElementsForClass.staticScope)<EOL><INDENT><INDENT>}"}
{"signature": "val JsPackage =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "when (configurables) {", "body": "<INDENT><INDENT>is AppleConfigurables -> arrayOf(<INDENT><INDENT><INDENT><INDENT><STR_LIT>,<INDENT><INDENT><INDENT><INDENT>// KT<NUM_LIT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>,<INDENT><INDENT>)<INDENT><INDENT>else -> emptyArray()<INDENT>}"}
{"signature": "when (val owner = classifier.owner) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrClass -> stabilityOf(owner, substitutions, currentlyAnalyzing)<EOL><INDENT><INDENT><INDENT>is IrTypeParameter -> Stability.Unstable<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val typeSpecificityComparator =", "body": "componentProvider.get<TypeSpecificityComparator>()<EOL>"}
{"signature": "val loopHeadState =", "body": "currentState<EOL>"}
{"signature": "val allReasons =", "body": "failure.failures.withClosure<Throwable> { listOfNotNull(it.cause) }<EOL>"}
{"signature": "val rValueResolvedSymbol =", "body": "rValue.toResolvedCallableSymbol() ?: return<EOL>"}
{"signature": "package noReflect<EOL>.", "body": ""}
{"signature": "val rebuildCacheDir =", "body": "File(workingDir, <STR_LIT>).apply { mkdirs() }<EOL>"}
{"signature": "if (boundsSizeDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return boundsSizeDiff<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!(d >= <NUM_LIT> && d < bound)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((key, value) in kinds) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>println(<STR_LIT>$value\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (oldDependencySrcFile in newDirectDependencyFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ktSymbol =", "body": "this@sirVisibility<EOL>"}
{"signature": "if (symbolApplicability == applicability) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidates.add(TypeCandidate(symbol, substitutor, diagnostic, symbolApplicability))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedFail =", "body": "assertFails(expected)<EOL>"}
{"signature": "if (binary.mode == KotlinJsBinaryMode.DEVELOPMENT) {", "body": "<EOL><INDENT><INDENT><INDENT>val runName = disambiguateCamelCased(RUN_TASK_NAME)<EOL><INDENT><INDENT><INDENT>locateOrRegisterRunTask(binary, runName)<EOL><INDENT><INDENT>}"}
{"signature": "fun add(metric: String, value: GcMetric) {", "body": "<EOL><INDENT><INDENT>myGcMetrics[metric] = value<EOL><INDENT>}"}
{"signature": "package foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT><EOL>.", "body": ""}
{"signature": "val fileRelocationRegistry =", "body": "hashMapOf<Path, Path?>()<EOL>"}
{"signature": "if (referenceExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.add(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ExpressionQualifierPart(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>referenceExpression.getReferencedNameAsName(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>referenceExpression,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>userType.typeArgumentList<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var nextIndex =", "body": "next.matches(index, testString, matchResult)<EOL>"}
{"signature": "fun dropCurrentSmap() {", "body": "<EOL><INDENT><INDENT>smapStack.removeFirst()<EOL><INDENT>}"}
{"signature": "val md<NUM_LIT>Digest =", "body": "MessageDigest.getInstance(<STR_LIT>)<EOL>"}
{"signature": "val emptyObjectExpr =", "body": "object {}<EOL>"}
{"signature": "val files<NUM_LIT> =", "body": "subdir<NUM_LIT>.listFiles() ?: return<EOL>"}
{"signature": "val continuationLabelAfterLoadedResult =", "body": "LabelNode()<EOL>"}
{"signature": "if (wereTypeArgumentsInvolved && isSubtypingCurrentlyInvolved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>path.removeAt(path.size - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>pathSet.remove(classLikeDeclaration)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFindDollar() {", "body": "<EOL><INDENT><INDENT>val regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>val result = regex.find(<STR_LIT>)<EOL><INDENT><INDENT>assertTrue(result != null)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, result!!.groupValues[<NUM_LIT>])<EOL><INDENT>}"}
{"signature": "fun invokeOnExportedFunctionExit() {", "body": "<EOL><INDENT>@OptIn(InternalWasmApi::class)<EOL><INDENT>onExportedFunctionExit?.invoke()<EOL>}"}
{"signature": "when (unusableClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ExploredClassifier.Unusable.CanBeRootCause -> UnusableClassifier(unusableClass)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ExploredClassifier.Unusable.DueToOtherClassifier -> DeclarationWithUnusableClassifier(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.symbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>unusableClass.rootCause<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!declaration.isSyntheticPrimaryConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.addBoxParameter()<EOL><INDENT><INDENT>}"}
{"signature": "val inputJar =", "body": "tmp.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun visitIntersectionTypeRef(intersectionTypeRef: FirIntersectionTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitIntersectionTypeRef(intersectionTypeRef)<EOL><INDENT>}"}
{"signature": "val commonToolImplOptions =", "body": "generateKotlinCommonToolOptionsImpl(<EOL>"}
{"signature": "val flexibleType =", "body": "baseType.asFlexibleType()!!<EOL>"}
{"signature": "val changedMembers =", "body": "hashMapOf<FqName, MutableSet<String>>()<EOL>"}
{"signature": "if (rhsResolvedType is ConeFlexibleType && !rhsResolvedType.lowerBound.isNullableType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.replaceConeTypeOrNull(result.resultType.makeConeFlexibleTypeWithNotNullableLowerBound(session.typeContext))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (argProperty.get(arguments) != argProperty.get(reportingState.currentArguments)) {", "body": "<EOL><INDENT><INDENT><INDENT>argProperty.javaField?.getAnnotation(Argument::class.java)?.value<EOL><INDENT><INDENT><INDENT><INDENT>?: throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val jvmSpecialTest =", "body": "kotlin.sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "val returnTypePosition =", "body": "if (descriptor is VariableDescriptor && descriptor.isVar) INVARIANT else OUT_VARIANCE<EOL>"}
{"signature": "val partInternalNamesSet =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "val actualTextDiagnostic =", "body": "TextDiagnostic.asTextDiagnostic(diagnostic)<EOL>"}
{"signature": "val functionsFromSupertypesToSaveInCache =", "body": "mutableListOf<ResultOfIntersection<FirNamedFunctionSymbol>>()<EOL>"}
{"signature": "val SINGLE_NATIVE_TARGET_PLACEHOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "import demoPackage.", "body": "*<EOL>"}
{"signature": "if (compareWithTxt) {", "body": "<EOL><INDENT><INDENT>val defaultTxtFile = File(file.path.replace(<STR_LIT>.toRegex(), <STR_LIT>))<EOL><INDENT><INDENT>val firTxtFile = File(file.path.replace(<STR_LIT>.toRegex(), <STR_LIT>))<EOL><INDENT><INDENT>val txtFile = if (useK<NUM_LIT> && firTxtFile.exists()) firTxtFile else defaultTxtFile<EOL><INDENT><INDENT>KotlinTestUtils.assertEqualsToFile(txtFile, main.toString())<EOL><INDENT>}"}
{"signature": "val typeAliasNames =", "body": "typeAliasesNamesByPackage.getValue(packageFqName)<EOL>"}
{"signature": "if (shouldPreprocessApiVersionCalls) {", "body": "<EOL><INDENT><INDENT><INDENT>val targetApiVersion = inliningContext.state.languageVersionSettings.apiVersion<EOL><INDENT><INDENT><INDENT>ApiVersionCallsPreprocessingMethodTransformer(targetApiVersion).transform(<STR_LIT>, node)<EOL><INDENT><INDENT>}"}
{"signature": "if (arg<NUM_LIT> is IrConstImpl<*> && arg<NUM_LIT>.kind == IrConstKind.Null) {", "body": "<EOL><INDENT><INDENT><INDENT>conventionMethodCall.irValueArgumentsByIndex[<NUM_LIT>] =<EOL><INDENT><INDENT><INDENT><INDENT>IrConstImpl.constNull(UNDEFINED_OFFSET, UNDEFINED_OFFSET, context.irBuiltIns.nothingNType)<EOL><INDENT><INDENT>}"}
{"signature": "val relativeNameSegments =", "body": "splitComplexNameToArray(classifierId.relativeClassName.asString(), <STR_LIT>, CirName::create)<EOL>"}
{"signature": "val isAllowedAssigningSingleElementsToVarargsInNamedForm =", "body": "<EOL><INDENT><INDENT>!languageVersionSettings.supportsFeature(LanguageFeature.ProhibitAssigningSingleElementsToVarargsInNamedForm)<EOL>"}
{"signature": "val elementsSymbol =", "body": "irFunction.valueParameters.single().symbol<EOL>"}
{"signature": "val firstChar =", "body": "this[<NUM_LIT>]<EOL>"}
{"signature": "val intrinsics =", "body": "context.intrinsics<EOL>"}
{"signature": "val wast<NUM_LIT>jsonTool =", "body": "ExternalTool(<STR_LIT>)<EOL>"}
{"signature": "if (receiverExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val qualifier = bindingContext[BindingContext.QUALIFIER, receiverExpression] ?: return emptyList()<EOL><INDENT><INDENT><INDENT>return qualifier.staticScope.collectStaticMembers(resolutionFacade, kindFilter, nameFilter)<EOL><INDENT><INDENT>}"}
{"signature": "val adapterBody =", "body": "JsBlock()<EOL>"}
{"signature": "if (signedType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val unsignedClass = expression.type.classOrNull!!<EOL><INDENT><INDENT><INDENT>val constructor = unsignedClass.constructors.single().owner<EOL><INDENT><INDENT><INDENT>val constructorCall = IrConstructorCallImpl.fromSymbolOwner(constructor.returnType, constructor.symbol)<EOL><INDENT><INDENT><INDENT>constructorCall.putValueArgument(<NUM_LIT>, expression.value.toIrConst(signedType))<EOL><EOL><INDENT><INDENT><INDENT>return callStack.pushCompoundInstruction(constructorCall)<EOL><INDENT><INDENT>}"}
{"signature": "val two<NUM_LIT> =", "body": "<NUM_LIT>e+<NUM_LIT> <EOL>"}
{"signature": "if (significand.length == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT>significand = <STR_LIT> //$NON-NLS<NUM_LIT>$<INDENT><INDENT>}"}
{"signature": "val allUnderImportResolver =", "body": "createImportResolver(<EOL>"}
{"signature": "val castResult =", "body": "facade.components.dataFlowAnalyzer.checkPossibleCast(<EOL>"}
{"signature": "val fileRegistry =", "body": "KotlinFileRegistry()<EOL>"}
{"signature": "val specialGetterName =", "body": "overriddenBuiltinProperty?.getBuiltinSpecialPropertyGetterName()<EOL>"}
{"signature": "if (!signaturesFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>signaturesFile.writeText(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val binary =", "body": "getBinaryRoots().singleOrNull() ?: return null<EOL>"}
{"signature": "fun test<NUM_LIT>(f: String.() -> Unit) {", "body": "<EOL><INDENT>(f)<!NO_VALUE_FOR_PARAMETER!>()<!><EOL><EOL><INDENT>f<!NO_VALUE_FOR_PARAMETER!>()<!><EOL>}"}
{"signature": "val staticPaths =", "body": "listOf(<EOL>"}
{"signature": "fun testLambdaInNoInlineFun() {", "body": "<EOL><INDENT>}"}
{"signature": "if (expectClassSymbol.isFun && !actualClass.isFun && actualClass.isNotSamInterface()) {", "body": "<EOL><INDENT><INDENT><INDENT>return Incompatible.FunInterfaceModifier<EOL><INDENT><INDENT>}"}
{"signature": "val functionContainer =", "body": "container.takeIf { it is IrConstructor && it.isPrimary }<EOL>"}
{"signature": "if (jump.label != null) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>print(jump.label)<EOL><INDENT><INDENT>}"}
{"signature": "val SOURCE_SET_CINTEROP_METADATA_NODE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val specificCapturedType =", "body": "AbstractTypeChecker.prepareType(context, specificType)<EOL>"}
{"signature": "for (i in A..B step C step D) {", "body": "// Loop body }"}
{"signature": "val isPostponed =", "body": "variable != null && variable in storage.postponedTypeVariables<EOL>"}
{"signature": "val COLLECTION_LITERAL_CALL_NAMES =", "body": "ArrayFqNames.PRIMITIVE_TYPE_TO_ARRAY.values + ArrayFqNames.ARRAY_OF_FUNCTION<EOL>"}
{"signature": "val jsPhases =", "body": "SameTypeNamedCompilerPhase(<EOL>"}
{"signature": "val countdowns =", "body": "IntArray(nodeCount)<EOL>"}
{"signature": "val useSiteModuleData =", "body": "session.moduleData<EOL>"}
{"signature": "val containingPropertyModality =", "body": "containingProperty?.modality<EOL>"}
{"signature": "if (!substituteWithAny) {", "body": "<EOL><INDENT><INDENT><INDENT>bindTypeArguments(userTypeStub, level)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(obj: JsObject, key: String, oldValue: Any?, newValue: Any) {", "body": "<EOL><INDENT>assertEquals(oldValue, obj[key])<EOL><INDENT>obj[key] = newValue<EOL><INDENT>assertEquals(newValue, obj[key])<EOL><INDENT>obj[key] = null<EOL><INDENT>assertEquals(null, obj[key])<EOL>}"}
{"signature": "var entries =", "body": "ArrayDeque<PathNode>()<EOL>"}
{"signature": "val extension =", "body": "it.substring(<NUM_LIT>, i)<EOL>"}
{"signature": "when (x<NUM_LIT>() + x<NUM_LIT>()) {", "body": "<EOL><INDENT><INDENT>x<NUM_LIT>().rid() -> nop()<EOL><INDENT><INDENT>id(x<NUM_LIT>()) -> nop()<EOL><INDENT><INDENT>else -> nop()<EOL><INDENT>}"}
{"signature": "var normalReferences =", "body": "<NUM_LIT><EOL>"}
{"signature": "val serializedTargetsFile =", "body": "serializedTargetsDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "var hazard =", "body": "false<EOL>"}
{"signature": "if (KotlinCompilerArgumentsProducer.ArgumentType.Primitive in includedArgumentTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>applyContribution(contribution)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addSomeElementsToMap(map: MutableMap<String, Int>) {", "body": "<EOL><INDENT>map.put(key = <STR_LIT>, value = <NUM_LIT>)<EOL><INDENT>map.put(key = <STR_LIT>, value = <NUM_LIT>)<EOL>}"}
{"signature": "fun useFooG() {", "body": "<EOL><INDENT>g(<NUM_LIT>)<EOL>}"}
{"signature": "val jvmStaticClass =", "body": "thisClass.module.findClassAcrossModuleDependencies(JvmStandardClassIds.Annotations.JvmStatic)!!<EOL>"}
{"signature": "fun privateFun() {", "body": "}<EOL><EOL>private var privateVar = <NUM_LIT><EOL><INDENT>get() = field<EOL><INDENT>set(value) { field = value }"}
{"signature": "fun test_<NUM_LIT>(some: Some) {", "body": "<EOL><INDENT>some.<!VAL_REASSIGNMENT!>x<!> = <STR_LIT><EOL><INDENT>some.<!VAL_REASSIGNMENT!>y<!> = <STR_LIT><EOL><INDENT><!VAL_REASSIGNMENT!>z<!> = <STR_LIT><EOL>}"}
{"signature": "val scopeA =", "body": "Scope(<STR_LIT>)<EOL>"}
{"signature": "val transientPsi =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(descriptor.annotations.findAnnotation(SerializationAnnotations.serialTransientFqName) as? LazyAnnotationDescriptor)?.annotationEntry<EOL>"}
{"signature": "fun testExportApiOnlyToFrameworks(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testExportApi(<EOL><INDENT><INDENT><INDENT>nativeProject(<STR_LIT>, gradleVersion),<EOL><INDENT><INDENT><INDENT>listOf(<EOL><INDENT><INDENT><INDENT><INDENT>ExportApiTestData(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (descriptor.extensionReceiverParameter?.value?.type?.isDynamic() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.DYNAMIC_RECEIVER_NOT_ALLOWED.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "fun check(value: Any?) {", "body": "<EOL><INDENT>if (value != Unit) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "if (type.isBuiltinExtensionFunctionalType && type.arguments.size <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val initGuardName =", "body": "function.name.orEmpty() + <STR_LIT><EOL>"}
{"signature": "var rawOffset =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun foo()<INDENT>// error<INDENT><!PRIVATE_FUNCTION_WITH_NO_BODY!>private<!> <!WRONG_MODIFIER_CONTAINING_DECLARATION!>final<!> fun bar()<INDENT><!REDUNDANT_MODALITY_MODIFIER, REDUNDANT_OPEN_IN_INTERFACE!>open<!> fun loo()<INDENT><!REDUNDANT_MODALITY_MODIFIER!>open<!> fun goo() {", "body": "}<INDENT><!REDUNDANT_MODALITY_MODIFIER!>abstract<!> fun tar()<INDENT>// error<INDENT><!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun too() {}"}
{"signature": "val dependencyPod =", "body": "cocoapodsExtension.pods.findByName(dependencyName)<EOL>"}
{"signature": "fun complete(value: T) {", "body": "<EOL><INDENT><INDENT>completeWith(Result.success(value))<EOL><INDENT>}"}
{"signature": "val cont =", "body": "this.cont<EOL>"}
{"signature": "for (firFile in allFirFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>bindFakeOverridesInFile(firFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ISSUE_TRACKER =", "body": "<STR_LIT>"}
{"signature": "val C_CHAR =", "body": "'c'<EOL>"}
{"signature": "val auxRange =", "body": "CharClass(hasFlag(Pattern.CASE_INSENSITIVE))<EOL>"}
{"signature": "val nofollowVisitOption =", "body": "emptySet<FileVisitOption>()<EOL>"}
{"signature": "val functionsWithoutBoundCheck =", "body": "createSimpleNamedCompilerPhase<Context, Unit>(<EOL>"}
{"signature": "val SCRIPT_DEFINITIONS =", "body": "CompilerConfigurationKey.create<List<ScriptDefinition>>(<STR_LIT>)<EOL>"}
{"signature": "val canExtractGlobalInitializerCall =", "body": "isNotOptimizedAwayGlobalInitializerCall<EOL>"}
{"signature": "val defaultMethod =", "body": "typeMapper.mapDefaultMethod(delegateFunctionDescriptor, contextKind)<EOL>"}
{"signature": "for (i in <NUM_LIT>.objectArray.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>sum += objectArray[i].value<EOL><INDENT>}"}
{"signature": "if (jvm<NUM_LIT>Replacement != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return expression.replaceWithCallTo(jvm<NUM_LIT>Replacement)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val FLOAT_EXPONENT_WIDTH =", "body": "<NUM_LIT><EOL>"}
{"signature": "val APPEND =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this.isConstructor) {", "body": "<EOL><INDENT><INDENT>if (isArrayConstructor && !forSwift) <STR_LIT> else <STR_LIT><EOL><INDENT>}"}
{"signature": "fun testMismatchingArities() {", "body": "<EOL><INDENT>++MismatchingArities<NUM_LIT><!NO_SET_METHOD!>[<NUM_LIT>]<!><EOL><INDENT>MismatchingArities<NUM_LIT><!NO_SET_METHOD!>[<NUM_LIT>]<!>++<EOL><INDENT>MismatchingArities<NUM_LIT><!NO_SET_METHOD!>[<NUM_LIT>]<!> += <NUM_LIT><EOL><EOL><INDENT>++<!NO_VALUE_FOR_PARAMETER!>MismatchingArities<NUM_LIT>[<NUM_LIT>]<!><EOL><INDENT><!NO_VALUE_FOR_PARAMETER!>MismatchingArities<NUM_LIT>[<NUM_LIT>]<!>++<EOL><INDENT><!NO_VALUE_FOR_PARAMETER!>MismatchingArities<NUM_LIT>[<NUM_LIT>]<!> += <NUM_LIT><EOL>}"}
{"signature": "val providedCallables =", "body": "providedDeclarationsService<EOL>"}
{"signature": "val standaloneExpressions =", "body": "mutableListOf<IrExpression>()<EOL>"}
{"signature": "fun addMetadataPart(shortName: String) {", "body": "<EOL><INDENT><INDENT>(metadataParts as MutableSet ).add(shortName)<EOL><INDENT>}"}
{"signature": "val otherFile =", "body": "expectedFile.withExtension(otherExtension)<EOL>"}
{"signature": "val declarationToCompare =", "body": "if (this is IrFunction) this.propertyIfAccessor else this<EOL>"}
{"signature": "fun longGlobal_setField() {", "body": "longGlobal = <NUM_LIT> }"}
{"signature": "if (current.overriddenDescriptors.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(current as D)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isBlockBody =", "body": "expression.parent is KtDeclarationWithBody && expression.parent !is KtFunctionLiteral<EOL>"}
{"signature": "val topLevelMethod =", "body": "TreeMaker::class.java.declaredMethods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val stringMetricsMap =", "body": "StringMetrics.values().associateBy(StringMetrics::name)<EOL>"}
{"signature": "var offsets =", "body": "persistentListOf<Box>()<EOL>"}
{"signature": "if (assignedVar in namesWithSideEffects) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>candidateFinder.sideEffectOccurred = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classFileForObject =", "body": "generateClassesInFile().asList().firstOrNull { it.relativePath.endsWith(<STR_LIT>) }<EOL>"}
{"signature": "val overridenVtableSlots =", "body": "mutableMapOf<IrSimpleFunction, OverriddenFunctionInfo>()<EOL>"}
{"signature": "val constInitializer<NUM_LIT> =", "body": "constInitializer<NUM_LIT> + <NUM_LIT><EOL>"}
{"signature": "if (hasLBracket) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.advanceLexer()<EOL><INDENT><INDENT>}"}
{"signature": "fun hashCodeOfAny() {", "body": "<EOL><INDENT><INDENT>assertNotEquals(Any().hashCode(), Any().hashCode())<EOL><INDENT>}"}
{"signature": "val linuxX<NUM_LIT>MainDependencies =", "body": "targetsDependencies[<STR_LIT>]?.asSourceSetDependenciesBlock(<STR_LIT>)<EOL>"}
{"signature": "val candidateGroups =", "body": "ArrayList<Collection<C>>(<NUM_LIT>)<EOL>"}
{"signature": "import lib<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "val defaultResolutionKinds =", "body": "setOf(<EOL>"}
{"signature": "val monitorDepthMap =", "body": "hashMapOf<AbstractInsnNode, Int>()<EOL>"}
{"signature": "var isOptimisticallyCommonizableNumberType =", "body": "false<EOL>"}
{"signature": "val fromPrimaryConstructor =", "body": "declaration.fromPrimaryConstructor ?: false<EOL>"}
{"signature": "if (newExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return super.visitExpression(newExpression, data)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFiltersPositiveGlob() {", "body": "<EOL><INDENT><INDENT>doTestFilters(Filter(listOf(<STR_LIT>, <STR_LIT>), listOf(), listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)))<EOL><INDENT>}"}
{"signature": "if (actualAnnotationsWithSameClassId.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Incompatibility(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectSymbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>actualSymbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>actualSymbol.getSourceElement(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>IncompatibilityType.MissingOnActual(expectAnnotation)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var cacheMisses =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val invalidType =", "body": "if (kotlinClass != null) { it -> it == kotlinClass } else BooCase<NUM_LIT>FILTER<EOL>"}
{"signature": "val refinedType =", "body": "callData.type<EOL>"}
{"signature": "val infiniteSeq =", "body": "generateSequence(<NUM_LIT>) { it + <NUM_LIT> }<EOL>"}
{"signature": "val wasBuiltNewExpectedTypeForSomeArgument =", "body": "postponedArgumentsInputTypesResolver.collectParameterTypesAndBuildNewExpectedTypes(<EOL>"}
{"signature": "val innerClassesClassVisitor =", "body": "InnerClassesClassVisitor(kotlinClassHeaderClassVisitor)<EOL>"}
{"signature": "val actualSetter =", "body": "actual.setter ?: return true<EOL>"}
{"signature": "val allFromCurrentByName =", "body": "allFromCurrent.groupBy { it.name }<EOL>"}
{"signature": "if (typeArgument == targetType || (areBothTypesCaptured && typeArgument.typeConstructor() == targetType.typeConstructor())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return baseType.typeConstructor().getParameter(i)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (classPath.isNotEmpty()) {", "body": "<EOL><EOL><INDENT><INDENT><INDENT>val actualClasspath = environment.configuration.jvmClasspathRoots<EOL><EOL><INDENT><INDENT><INDENT>TestCase.assertTrue(<STR_LIT>, actualClasspath.containsAll(classPath))<EOL><INDENT><INDENT>}"}
{"signature": "val specSentences =", "body": "specSentencesStorage.getLatest() ?: return<EOL>"}
{"signature": "if (symbol is FirClassSymbol<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>FirJvmModuleAccessibilityQualifiedAccessChecker.checkClassAccess(context, symbol, expression, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "var propertyName =", "body": "field.name<EOL>"}
{"signature": "for (logLevel in LogLevel.entries) {", "body": "<EOL><INDENT><INDENT><INDENT>put(logLevel, ConcurrentLinkedQueue())<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinCompilation =", "body": "compilationInfo.tcs.compilation<EOL>"}
{"signature": "val scriptClassRef =", "body": "IrClassReferenceImpl(<EOL>"}
{"signature": "val errRes =", "body": "evalFile(File(<STR_LIT>))<EOL>"}
{"signature": "val usedInAppPlatform =", "body": "resolvePath(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun resetDirectivesBuilder() {", "body": "<EOL><INDENT><INDENT><INDENT>directivesBuilder = RegisteredDirectivesParser(directivesContainer, assertions)<EOL><INDENT><INDENT>}"}
{"signature": "val ef =", "body": "Any::extFun as Any<EOL>"}
{"signature": "val allExportedSignatures =", "body": "hashSetOf<IdSignature>()<EOL>"}
{"signature": "if (u.value != <NUM_LIT>) {", "body": "}"}
{"signature": "var currentSlot =", "body": "node.maxLocals<EOL>"}
{"signature": "val isDsymUtil =", "body": "(command[<NUM_LIT>] == dsymutil)<EOL>"}
{"signature": "val lvar =", "body": "localVals[varIndex]<EOL>"}
{"signature": "val publicPackageJsonAttribute =", "body": "Attribute.of(<EOL>"}
{"signature": "val expectPartTypeArguments =", "body": "expectPart.typeArgumentList.typeArguments<EOL>"}
{"signature": "val PRE_RELEASE =", "body": "<NUM_LIT>x<NUM_LIT><EOL>"}
{"signature": "val L =", "body": "LBase + SIndex / NCount<EOL>"}
{"signature": "var oldFront =", "body": "mutableSetOf<T>(start)<EOL>"}
{"signature": "val byteFloorInt =", "body": "byte.floorDiv(int)<EOL>"}
{"signature": "fun exec() {", "body": "<EOL><INDENT><INDENT>val expirationDate = Instant.now().minus(Duration.ofDays(timeToLiveInDays))<EOL><EOL><INDENT><INDENT>cleanableStoreProvider.get().cleanDir(expirationDate)<EOL><EOL><INDENT>}"}
{"signature": "val RAW_VALUE_ANNOTATION_FQ_NAMES =", "body": "RAW_VALUE_ANNOTATION_CLASS_IDS.fqNames()<EOL>"}
{"signature": "val kFunctionImplConstructorSymbol =", "body": "kFunctionImplSymbol.constructors.single()<EOL>"}
{"signature": "val instanceReturnedFromGet =", "body": "compilations.getByName(<STR_LIT>)<EOL>"}
{"signature": "fun foo(j: Int) {", "body": "<EOL><INDENT><INDENT>super<<expr>foo.bar.A</expr>>.foo()<EOL><INDENT>}"}
{"signature": "val actualSentence =", "body": "paragraphSentences[sentenceNumber - <NUM_LIT>]<EOL>"}
{"signature": "fun arrayListFromCollection() {", "body": "<EOL><INDENT><INDENT>var c: Collection<String>  = arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>).toList()<EOL><INDENT><INDENT>var a = ArrayList(c)<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, a.size)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, a[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, a[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, a[<NUM_LIT>])<EOL><INDENT>}"}
{"signature": "val httpReportSettings =", "body": "initHttpReportSettings()<EOL>"}
{"signature": "val booleanArray =", "body": "builtIns.getPrimitiveArrayClassDescriptor(PrimitiveType.BOOLEAN).toIrSymbol()<EOL>"}
{"signature": "package fragments from there */<EOL>.", "body": ""}
{"signature": "val sourceModules =", "body": "modules.filterIsInstance<JavaModule.Explicit>().filter(JavaModule::isSourceModule)<EOL>"}
{"signature": "val addend =", "body": "(seed shl <NUM_LIT>) xor (seed ushr <NUM_LIT>)<EOL>"}
{"signature": "fun visitCheckNotNullCall(checkNotNullCall: FirCheckNotNullCall, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allCheckNotNullCallCheckers.check(checkNotNullCall, data)<EOL><INDENT>}"}
{"signature": "var eNext =", "body": "IntArray(eCap)<EOL>"}
{"signature": "import objcnames.", "body": "protocols.BarProtocol<EOL>"}
{"signature": "val nativeMemUtilsClass =", "body": "symbols.nativeMemUtils.owner<EOL>"}
{"signature": "val scriptsParamIndex =", "body": "frameMap.enterTemp(AsmUtil.getArrayType(OBJECT_TYPE))<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JsProtoBuf.parameterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JsProtoBuf.parameterAnnotation, i), new.getExtension(JsProtoBuf.parameterAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isDefinitelyInitialized && variableDescriptor is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>isDefinitelyInitialized = variableDescriptor.isDefinitelyInitialized()<EOL><INDENT><INDENT>}"}
{"signature": "val builderClassId =", "body": "classId.createNestedClassId(Name.identifier(builderClassName))<EOL>"}
{"signature": "val nextDirective =", "body": "matcher.group(<STR_LIT>) ?: matcher.group(<STR_LIT>)<EOL>"}
{"signature": "if (name.isInline != null && name.descriptor is PropertySetterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val dummyInvocation = JsInvocation(name, x.arg<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>copyInlineMetadata(name, dummyInvocation)<EOL><INDENT><INDENT><INDENT>return dummyInvocation<EOL><INDENT><INDENT>}"}
{"signature": "val twiceLongValue =", "body": "<NUM_LIT> * longValue<EOL>"}
{"signature": "fun watch(p: String, f: (String) -> Int) {", "body": "<EOL><INDENT>f(p)<EOL>}"}
{"signature": "val serializerIrClass =", "body": "irClass.classSerializer(compilerContext)!!.owner<EOL>"}
{"signature": "val testParameters =", "body": "ParametersBuilder(this).also(builder).build()<EOL>"}
{"signature": "val finishTimeNanos =", "body": "System.nanoTime()<EOL>"}
{"signature": "val propTranslator =", "body": "DefaultPropertyTranslator(<EOL>"}
{"signature": "for (module in sourceModules) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>report(ERROR, <STR_LIT>, module.moduleInfoFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun reportOn(task: AbstractTestTask) {", "body": "<EOL><INDENT><INDENT>testReportCompatibilityHelper.get().addTestResultsFrom(this, task)<EOL><INDENT>}"}
{"signature": "fun addGcMetric(metric: String, value: GcMetric) {", "body": "<EOL><INDENT>}"}
{"signature": "val addedClasses =", "body": "currentClasses.keys - previousClasses.keys<EOL>"}
{"signature": "if (classSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>firRegularClassesSet.add(classSymbol)<EOL><INDENT><INDENT><INDENT><INDENT>firTypeRefClasses.add(Pair(bound, classSymbol))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val wholeModule =", "body": "wholeBackendInput.irModuleFragment<EOL>"}
{"signature": "val substituteMap =", "body": "mutableMapOf<IrValueParameter, IrExpression>()<EOL>"}
{"signature": "val cmdArgs =", "body": "mutableListOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "when (child) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ObjCMethod -> child.returnType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ObjCParameter -> child.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ObjCProperty -> child.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ObjCTopLevel -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val sourceFragments =", "body": "configuration?.get(ScriptCompilationConfiguration.sourceFragments)<EOL>"}
{"signature": "val superDescriptor =", "body": "superType.constructor.declarationDescriptor<EOL>"}
{"signature": "if (i == v) {", "body": "<EOL><INDENT><INDENT><INDENT>val baz = f() + v<EOL><INDENT><INDENT><INDENT>return baz<EOL><INDENT><INDENT>}"}
{"signature": "val localVariablesManager =", "body": "LocalVariablesManager(context, methodNode)<EOL>"}
{"signature": "fun append(key: KEY, elements: Collection<E>) {", "body": "<EOL><INDENT><INDENT>appendableStorage.append(key, elements)<EOL><INDENT>}"}
{"signature": "fun test(topLevelHiddenNestedInner: TopLevelHidden.Nested.Inner) {", "body": "}<EOL><INDENT>@Suppress(<STR_LIT>) fun test(topLevelHiddenInner: TopLevelHidden.Inner) {}"}
{"signature": "if (expression.symbol !is IrValueParameterSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.markLineNumber(startOffset = true)<EOL><INDENT><INDENT>}"}
{"signature": "val _registeredExtensions =", "body": "mutableMapOf<ProjectExtensionDescriptor<*>, MutableList<Any>>()<EOL>"}
{"signature": "for (redirectInstruction in instruction.previousInstructions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>redirectInstruction.accept(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fromNoIs =", "body": "<!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>foo<!>() !is String<EOL>"}
{"signature": "val fakeOverriddenMethod =", "body": "findFakeMethodOverridingExternalWithOptionalParams(descriptor)<EOL>"}
{"signature": "val arrayOfEnum =", "body": "<STR_LIT><EOL>"}
{"signature": "val isIgnored =", "body": "testServices.codegenSuppressionChecker.failuresInModuleAreIgnored(module)<EOL>"}
{"signature": "if (x is A<NUM_LIT> || x is B<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>var k: B<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: A<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: C<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: Any? = x<EOL><INDENT>}"}
{"signature": "var point<NUM_LIT> =", "body": "Point(2.<NUM_LIT>, 2.<NUM_LIT>)<EOL>"}
{"signature": "if (overriddenDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>this.overriddenDescriptors = listOf(overriddenDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val arguments =", "body": "args<EOL>"}
{"signature": "val fixedDescriptor =", "body": "current<EOL>"}
{"signature": "if (x is StringSet) {", "body": "<EOL><INDENT><INDENT>x.add(<STR_LIT>)<EOL><INDENT><INDENT>x.add(<NUM_LIT>)<EOL><INDENT><INDENT>x.add(null)<EOL><INDENT><INDENT>x.iterator().next().length<EOL><INDENT>}"}
{"signature": "var inlineLambdaInfo =", "body": "ComposeInlineLambdaLocator(context)<EOL>"}
{"signature": "val PRESETS_API_IS_DEPRECATED_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (resultingDescriptor is JavaClassConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT>val psiClass = resultingDescriptor.constructedClass.source.getPsi() as? PsiClass<EOL><INDENT><INDENT>if (psiClass?.isAnnotationType == true) return psiClass.qualifiedName<EOL><INDENT>}"}
{"signature": "fun visitCodeFragment(codeFragment: FirCodeFragment, data: Any?) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "fun takePositive(x: @Positive Number) {", "body": "}<EOL>fun takeNegative(x: @Negative Number) {}"}
{"signature": "val prompt =", "body": "nodeProcess.errorStream.bufferedReader().readLine()<EOL>"}
{"signature": "val toLong =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.toLong()<!><EOL>"}
{"signature": "fun exploreClassifiersInInlineLazyIrFunction(function: IrFunction) {", "body": "<EOL><INDENT><INDENT>classifierExplorer.exploreIrElement(function)<EOL><INDENT>}"}
{"signature": "fun reportDiagnostic(diagnostic: ToolingDiagnostic) {", "body": "<EOL><INDENT><INDENT>parameters.toolingDiagnosticsCollector.get().report(parameters, logger, diagnostic)<EOL><INDENT>}"}
{"signature": "import TestDemo<NUM_LIT>Class<EOL>.", "body": ""}
{"signature": "if (boundReceiverType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irAdapterFun.extensionReceiverParameter =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>createAdapterParameter(startOffset, endOffset, Name.identifier(<STR_LIT>), <NUM_LIT>, boundReceiverType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (fqName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fqn(fqName)<EOL><INDENT><INDENT><INDENT><INDENT>if (import.isAllUnder)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>+<STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (this.javaClass !== other?.javaClass) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun throws(exceptionType: String, reason: String) {", "body": "throwsExceptions += ThrowsException(exceptionType, reason) }"}
{"signature": "val numTokens =", "body": "numTokensVar.value<EOL>"}
{"signature": "val thingVal =", "body": "ThingVal(template)<EOL>"}
{"signature": "val gResult =", "body": "(ForTest::g.annotations.first() as Anno).u<EOL>"}
{"signature": "if (top is UninitializedNewValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>uninitializedValuesToRemovableUsages[top.newInsn]!!.add(insn)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val psiFacade =", "body": "JavaPsiFacade.getInstance(ref.element.project)<EOL>"}
{"signature": "val fullyExpandedType =", "body": "fullyExpandedType<EOL>"}
{"signature": "val DELEGATED_SUPERTYPE_BY_KEYWORD =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "val diagnosticContext =", "body": "JsKlibDiagnosticContext(configuration)<EOL>"}
{"signature": "val shouldBeCoroutineImpl =", "body": "isLambda && function.isSuspend && !context.compileSuspendAsJsGenerator<EOL>"}
{"signature": "val originalSymbols =", "body": "getIrPropertySymbols(originalFirProperty.symbol)<EOL>"}
{"signature": "if (from is IrConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>isPrimary = from.isPrimary<EOL><INDENT><INDENT>}"}
{"signature": "fun visitConstructor(constructorStub: ConstructorStub, data: Unit) {", "body": "}<INDENT><INDENT><INDENT>// Property accessors inherit opt-in requirements from the property.<INDENT><INDENT><INDENT>override fun visitPropertyAccessor(propertyAccessor: PropertyAccessor, data: Unit) {}"}
{"signature": "val requestsByTaskName =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tasksBySubproject.values.flatMap { it.entries }.associate { (request, task) -> task.taskName to request }<EOL>"}
{"signature": "var receiverIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (isFull()) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val captureReceiverType =", "body": "closure?.capturedReceiverFromOuterContext<EOL>"}
{"signature": "else if (other is Composite) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return Composite(listOf(this) + other.relationships)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun afterReceiverGeneration(v: InstructionAdapter, frameMap: FrameMap, state: GenerationState) {", "body": "<EOL><INDENT>}"}
{"signature": "if (value.arguments.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>renderNamedConstantValueList(value.arguments)<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(a: A?, b: B) {", "body": "<EOL><INDENT>val c = a ?: b<EOL>}"}
{"signature": "for (i in (<NUM_LIT>u.toUShort()..<NUM_LIT>u.toUShort()).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "var hasImproperConstants =", "body": "false<EOL>"}
{"signature": "val P<NUM_LIT> =", "body": "4.1381367970<NUM_LIT>723846039e<NUM_LIT> <EOL>"}
{"signature": "if (fragments.isComputed(fqName)) {", "body": "<EOL><INDENT><INDENT><INDENT>fragments.invoke(fqName)<EOL><INDENT><INDENT>}"}
{"signature": "if (extensionReceiver is CallableReceiver.UnboundReference) {", "body": "<EOL><INDENT><INDENT><INDENT>argumentsAndReceivers.add(extensionReceiver.receiver.stableType)<EOL><INDENT><INDENT>}"}
{"signature": "var xLong =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val sarr<NUM_LIT> =", "body": "copyArray(*sarr)<EOL>"}
{"signature": "val joined =", "body": "nameParts.joinToString(<STR_LIT>) { it.asStringStripSpecialMarkers() }<EOL>"}
{"signature": "val cTypeDefinitionsFileName =", "body": "<STR_LIT><EOL>"}
{"signature": "val headerReader =", "body": "ReadKotlinClassHeaderAnnotationVisitor()<EOL>"}
{"signature": "val Normal_CfgBackward =", "body": "Edge(NormalPath, EdgeKind.CfgBackward)<EOL>"}
{"signature": "val successReturnValueBridge =", "body": "MethodBridge.ReturnValue.Mapped(returnTypeBridge)<EOL>"}
{"signature": "val cfield =", "body": "<STR_LIT>;<EOL>"}
{"signature": "else if (psi is LeafPsiElement && psi.elementType == KtTokens.IDENTIFIER) {", "body": "<EOL><INDENT><INDENT><INDENT>psi.chars<EOL><INDENT><INDENT>}"}
{"signature": "when (hmppMode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Mode.OPT_OUT_HMPP, Mode.DISABLE_HMPP_BY_DEFAULT -> false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Mode.HMPP_BY_DEFAULT -> true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (declaration.source?.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KtFakeSourceElementKind.PropertyFromParameter -> reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source, FirErrors.INLINE_PROPERTY_WITH_BACKING_FIELD_DEPRECATION, context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>else -> reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source, FirErrors.INLINE_PROPERTY_WITH_BACKING_FIELD, context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val bBindings =", "body": "Bindings()<EOL>"}
{"signature": "val ownerBar =", "body": "take<Unit>(Owner.Bar(<STR_LIT>))<EOL>"}
{"signature": "val CLASS_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "val isLeftToRight =", "body": "fName.contains(<STR_LIT>).not()<EOL>"}
{"signature": "if (c.languageVersionSettings.supportsFeature(LanguageFeature.DataClassInheritance)) {", "body": "<EOL><INDENT><INDENT><INDENT>FunctionsFromAny.addFunctionFromAnyIfNeeded(thisDescriptor, result, name, fromSupertypes)<EOL><INDENT><INDENT>}"}
{"signature": "val dependentLibrary =", "body": "uniqueNameToLibrary[dependency.libName]<EOL>"}
{"signature": "var testPassed =", "body": "false<EOL>"}
{"signature": "val fDouble =", "body": "FooDouble(<NUM_LIT>)<EOL>"}
{"signature": "val outerTypeVariables =", "body": "outerTypeVariables ?: return false<EOL>"}
{"signature": "val multiFieldValueClassRepresentation =", "body": "parentAsClass.multiFieldValueClassRepresentation<EOL>"}
{"signature": "package provider precomputes its packages, while the IDE package provider<EOL>.", "body": ""}
{"signature": "var dispatchReceiver =", "body": "resolvedCallAtom.dispatchReceiverArgument?.receiver?.receiverValue<EOL>"}
{"signature": "val testAreaRegex =", "body": "<STR_LIT>\"(?<testArea>${TestArea.joinedValues})<STR_LIT>\"<EOL>"}
{"signature": "val rm<NUM_LIT> =", "body": "a.withSign(-<NUM_LIT>.<NUM_LIT>F)<EOL>"}
{"signature": "val resultType =", "body": "expandedConeType(typeAlias)<EOL>"}
{"signature": "val suspendFunctionTypeArity =", "body": "getSuspendFunctionTypeArity(kotlinType)<EOL>"}
{"signature": "fun onNonLateinit() {", "body": "<EOL><INDENT>Foo()::nonLateInit.<!LATEINIT_INTRINSIC_CALL_ON_NON_LATEINIT!>isInitialized<!><EOL>}"}
{"signature": "val firstReplaceWithImports =", "body": "firstReplaceWith.getReplaceWithImports().orEmpty()<EOL>"}
{"signature": "val properForInArraySemantics =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>state.languageVersionSettings.supportsFeature(LanguageFeature.ProperForInArrayLoopRangeVariableAssignmentSemantic)<EOL>"}
{"signature": "val projectHash =", "body": "getProjectHash(metric.perProject, subprojectName)<EOL>"}
{"signature": "if (name in myGcPerformance) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val metaInfo =", "body": "IrInterpreterCodeMetaInfo(startOffset, this.endOffset, message, isError)<EOL>"}
{"signature": "fun callTopLevelDifferentPsi() {", "body": "<EOL><INDENT>contract(<NUM_LIT>)<EOL>}"}
{"signature": "val analyzerWithCompilerReport =", "body": "AnalyzerWithCompilerReport(<EOL>"}
{"signature": "val allNames =", "body": "first + nonDeclaredNames<EOL>"}
{"signature": "if (context.config.memoryModel == MemoryModel.EXPERIMENTAL) {", "body": "<EOL><INDENT><INDENT>runPhase(RemoveRedundantSafepointsPhase)<EOL><INDENT>}"}
{"signature": "val scriptUrls =", "body": "mutableMapOf<Runtime.ScriptId, String>()<EOL>"}
{"signature": "fun renderMemberModifiers(descriptor: MemberDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT>renderModifier(builder, descriptor.isExternal, <STR_LIT>)<EOL><INDENT><INDENT>renderModifier(builder, DescriptorRendererModifier.EXPECT in modifiers && descriptor.isExpect, <STR_LIT>)<EOL><INDENT><INDENT>renderModifier(builder, DescriptorRendererModifier.ACTUAL in modifiers && descriptor.isActual, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val versionIntArray =", "body": "BinaryVersion.parseVersionArray(versionString) ?: return null<EOL>"}
{"signature": "if (!allowForking) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return super.runForkingPoint(block)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val contextualOnFileClassId =", "body": "ClassId.topLevel(contextualOnFileFqName)<EOL>"}
{"signature": "val compatibleAndroidGradlePluginVersionRange =", "body": "AndroidGradlePluginVersionRange(<EOL>"}
{"signature": "fun setupScriptConfiguration(configuration: CompilerConfiguration) {", "body": "<EOL><INDENT><INDENT>configuration.put(JVMConfigurationKeys.RETAIN_OUTPUT_IN_MEMORY, true)<EOL><INDENT>}"}
{"signature": "if (buildMode == XcodeBuildMode.TEST) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package \" + EXPLICIT_FLEXIBLE_PACKAGE +<EOL>.", "body": ""}
{"signature": "for (radix in radixes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(Character.digit(c, radix), c.digitToInt(radix), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeGetter =", "body": "<STR_LIT>C\\<STR_LIT><EOL>"}
{"signature": "fun incrementState(inc: Int) {", "body": "<EOL><INDENT><INDENT>state += inc<EOL><INDENT>}"}
{"signature": "package<EOL><INDENT> *<EOL>.", "body": ""}
{"signature": "fun SomeThing(content: @Composable() () -> Unit) {", "body": "content() }"}
{"signature": "if (platformNN) {", "body": "}"}
{"signature": "val pathsString =", "body": "outputFiles.joinToString { it.relativePath }<EOL>"}
{"signature": "if (annotated is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT>checkSuperTypeAnnotations(annotated, trace)<EOL><INDENT><INDENT>}"}
{"signature": "for (freeVar in freeVars) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>wrapperFunction.parameters += JsParameter(nameMap[freeVar]!!)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>wrapperInvocation.arguments += JsNameRef(context.getFieldName(freeVar), JsThisRef())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var partIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "else if (ic != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.backendContext.inlineClassesUtils.getInlineClassUnderlyingType(ic).toWasmValueType()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (containingClassSymbol?.deprecationStatus?.deprecationLevel == DeprecationLevelValue.HIDDEN) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "when (klass.classKind) {", "body": "<EOL><INDENT><INDENT><INDENT>ClassKind.ENUM_CLASS -> FirNameAwareOnlyCallablesScope(<EOL><INDENT><INDENT><INDENT><INDENT>FirStaticScope(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>useSiteSession.declaredMemberScope(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>klass,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>memberRequiredPhase = null,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "fun visitResolvedReifiedParameterReference(<EOL><INDENT><INDENT>resolvedReifiedParameterReference: FirResolvedReifiedParameterReference,<EOL><INDENT><INDENT>data: CheckerContext<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicExpressionCheckers.check(resolvedReifiedParameterReference, data)<EOL><INDENT>}"}
{"signature": "val samConversionTransformers =", "body": "session.extensionService.samConversionTransformers<EOL>"}
{"signature": "fun generateSyntheticFunctionParameterDeclarations(irFunction: IrFunction) {", "body": "<INDENT><INDENT>// no-op \u2014 irFunction from lowering should already have necessary parameters<INDENT>}"}
{"signature": "for (parameter in irFunction.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.putValueArgument(i++, irGet(parameter))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun takeAny(x: Number) {", "body": "}fun test_<NUM_LIT>(<INDENT>positiveInt: @Positive Int,<INDENT>negativeInt: @Negative Int,<INDENT>someInt: Int) {<INDENT>consumePositiveInt(positiveInt)<INDENT>consumePositiveInt(<!ILLEGAL_NUMBER_SIGN!>negativeInt<!>) // should be error<INDENT>consumePositiveInt(<!ILLEGAL_NUMBER_SIGN!>someInt<!>) // should be error}"}
{"signature": "val isFakeOverride =", "body": "declaration.isFakeOverride<EOL>"}
{"signature": "val singleTargetAndroidSourceSetLayout =", "body": "KotlinAndroidSourceSetLayout(<EOL>"}
{"signature": "val exportForCppRuntimeClassId =", "body": "ClassId(kotlinNativeInternalPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val substitutor =", "body": "createTypeSubstitutorByTypeConstructor(<EOL>"}
{"signature": "for (annotationEntry in modifierList.getAnnotationEntries()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>annotations += annotationEntry.convert<FirAnnotation>()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val typeForNonExistentClass =", "body": "NON_EXISTENT_ID.toLookupTag().constructClassType(ConeTypeProjection.EMPTY_ARRAY, isNullable = false)<EOL>"}
{"signature": "val COMPILE_DAEMON_IS_READY_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (other.isZero()) {", "body": "<EOL><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val xmlText =", "body": "<!UNRESOLVED_REFERENCE!>getText<!>()<EOL>"}
{"signature": "if (cn.toDouble() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun nullable<NUM_LIT>(foo: Foo?) {", "body": "<EOL><INDENT>val <!UNUSED_VARIABLE!>s<!>: String = foo?.name.toString()<EOL>}"}
{"signature": "val bytesWritten =", "body": "decodeImpl(source, destination, <NUM_LIT>, startIndex, endIndex)<EOL>"}
{"signature": "val USAGE_DIAGNOSTICS =", "body": "OptInReporterMultiplexer(<EOL>"}
{"signature": "val scopeBuilder =", "body": "CompileScopeTestBuilder.make().allModules()<EOL>"}
{"signature": "val UNIT =", "body": "TypeId(ClassOrTypeAliasId(<STR_LIT>), emptyList())<EOL>"}
{"signature": "fun visitReturnExpression(returnExpression: KtReturnExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitReturnExpression(returnExpression)<EOL><INDENT><INDENT><INDENT>block(returnExpression)<EOL><INDENT><INDENT>}"}
{"signature": "val jsonStringProvider =", "body": "this as? Function<NUM_LIT><*> ?: return null<EOL>"}
{"signature": "val targetProperty =", "body": "correspondingPropertySymbol?.owner<EOL>"}
{"signature": "if (otherConstraint.kind != ConstraintKind.UPPER) {", "body": "<EOL><INDENT><INDENT><INDENT>addNewConstraint(<EOL><INDENT><INDENT><INDENT><INDENT>causeOfIncorporationVariable,<EOL><INDENT><INDENT><INDENT><INDENT>causeOfIncorporationConstraint,<EOL><INDENT><INDENT><INDENT><INDENT>targetVariable,<EOL><INDENT><INDENT><INDENT><INDENT>otherConstraint,<EOL><INDENT><INDENT><INDENT><INDENT>prepareType(false),<EOL><INDENT><INDENT><INDENT><INDENT>isSubtype = true<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun toJSON() {", "body": "<EOL><INDENT><INDENT>val list = arrayListOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>assertContentEquals(arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), list.asDynamic().toJSON() as Array<String>)<EOL><EOL><INDENT><INDENT>val set = linkedSetOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>assertContentEquals(arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), (set as AbstractMutableCollection<String>).asDynamic().toJSON() as Array<String>)<EOL><INDENT>}"}
{"signature": "val valFromOtherModule<NUM_LIT> =", "body": "valFromOtherModule + <STR_LIT><EOL>"}
{"signature": "fun visitNode(node: CFGNode<*>) {", "body": "}<EOL><EOL><INDENT><INDENT><INDENT>override fun visitTryMainBlockEnterNode(node: TryMainBlockEnterNode) {<EOL><INDENT><INDENT><INDENT><INDENT>tryScopeCount++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun printIndented(print: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>indentation += <NUM_LIT><EOL><INDENT><INDENT><INDENT>print()<EOL><INDENT><INDENT><INDENT>indentation -= <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (context.platform == KotlinPlatform.NATIVE) {", "body": "<EOL><INDENT><INDENT><INDENT>out(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>out(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (descriptor.number == null || descriptor.number > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>failAssertion(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (facadeName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(facadeName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val annotatedGetter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val irResultType =", "body": "callGenerator.translateType(resultType)<EOL>"}
{"signature": "val linuxTestDependencies =", "body": "dependencies[<STR_LIT>].filterNativePlatformDependencies()<EOL>"}
{"signature": "fun test_<NUM_LIT>(inv: Inv<NUM_LIT>) {", "body": "<EOL><INDENT>inv.k().foo()<EOL><INDENT>inv.t().bar()<EOL>}"}
{"signature": "if (instruction is ReadValueInstruction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>enterResult.put(variableDescriptor, VariableUseState.READ)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val kaptStubs =", "body": "converter.convert()<EOL>"}
{"signature": "val zObj =", "body": "Obj::objProp<EOL>"}
{"signature": "if (excludePredicate(directory)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>FileVisitResult.SKIP_SUBTREE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val okHttpClient =", "body": "OkHttpClient()<EOL>"}
{"signature": "val specialMethodNameLength =", "body": "specialMethodNameString.length<EOL>"}
{"signature": "val finderFactory =", "body": "CliVirtualFileFinderFactory(rootsIndex, false)<EOL>"}
{"signature": "val restored =", "body": "pointer.restoreSymbol() ?: error(<STR_LIT>)<EOL>"}
{"signature": "val annotationFilter =", "body": "annotationFilter<EOL>"}
{"signature": "if (lhs is DoubleColonLHS.Expression && !lhs.isObjectQualifier) {", "body": "<EOL><INDENT><INDENT><INDENT>IrGetClassImpl(<EOL><INDENT><INDENT><INDENT><INDENT>ktClassLiteral.startOffsetSkippingComments, ktClassLiteral.endOffset, resultType,<EOL><INDENT><INDENT><INDENT><INDENT>ktArgument.genExpr()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (typeAlias in typeAliases) {", "body": "<EOL><INDENT><INDENT><INDENT>val descriptor = lazyDeclarationResolver.resolveToDescriptor(typeAlias) as TypeAliasDescriptor<EOL><EOL><INDENT><INDENT><INDENT>c.typeAliases[typeAlias] = descriptor<EOL><INDENT><INDENT><INDENT>ForceResolveUtil.forceResolveAllContents(descriptor.annotations)<EOL><INDENT><INDENT><INDENT>registerTopLevelFqName(topLevelFqNames, typeAlias, descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val daemonRunCount =", "body": "hashMapOf<String, Int>()<EOL>"}
{"signature": "val iteratorCall =", "body": "statementGenerator.pregenerateCall(iteratorResolvedCall)<EOL>"}
{"signature": "val baseTestClassPackage =", "body": "<STR_LIT><EOL>"}
{"signature": "val scriptingEvaluator =", "body": "ScriptEvaluationExtension.getInstances(projectEnvironment.project).find { it.isAccepted(arguments) }<EOL>"}
{"signature": "val runTaskName =", "body": "disambiguateCamelCased(<STR_LIT>)<EOL>"}
{"signature": "val xBool =", "body": "true<EOL>"}
{"signature": "if (isMyTypeVariable(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addConstraintEdgeForDeepDependency(from, it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitLoop(loop: IrLoop, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLoop(loop)<EOL><INDENT>}"}
{"signature": "val pivot =", "body": "array[(left + right) / <NUM_LIT>]<EOL>"}
{"signature": "val localSerialDesc =", "body": "irTemporary(irGet(descriptorGetterSymbol.owner.returnType, irThis(), descriptorGetterSymbol), <STR_LIT>)<EOL>"}
{"signature": "fun resolveScriptTypes(firScript: FirScript) {", "body": "<EOL><INDENT><INDENT>firScript.transformAnnotations(transformer, null)<EOL><INDENT><INDENT>firScript.transformContextReceivers(transformer, null)<EOL><INDENT>}"}
{"signature": "if (decomp.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>decompHangul[decompHangulIndex++] = decomp[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (checker.parameterHasCycle(annotation, valueParameter)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(valueParameter.source, CYCLE_IN_ANNOTATION_PARAMETER, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val accessorContext =", "body": "context.innerBlock(accessorFunction.body)<EOL>"}
{"signature": "if (firstEntry != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SerializationErrors.DUPLICATE_SERIAL_NAME_ENUM.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serialNameAnnotation?.findAnnotationEntry() ?: firstEntry.annotations.serialNameAnnotation?.findAnnotationEntry()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: declaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor.defaultType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serialName,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>entryDescriptor.name.asString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun shlForULong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>UL, <NUM_LIT>UL shl <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>UL, <NUM_LIT>UL shl <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val bu<NUM_LIT> =", "body": "<NUM_LIT>u<EOL>"}
{"signature": "val targetClangCmd<EOL><INDENT><INDENT><INDENT>=", "body": "listOf(<STR_LIT>) + clangArgs<EOL>"}
{"signature": "when (kmVisibility) {", "body": "<EOL><INDENT><INDENT><INDENT>KmVisibility.PUBLIC -> Visibilities.Public<EOL><INDENT><INDENT><INDENT>KmVisibility.PROTECTED -> Visibilities.Protected<EOL><INDENT><INDENT><INDENT>KmVisibility.INTERNAL -> Visibilities.Internal<EOL><INDENT><INDENT><INDENT>KmVisibility.PRIVATE -> Visibilities.Private<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val newMD<NUM_LIT> =", "body": "dependencyFile.readBytes().md<NUM_LIT>()<EOL>"}
{"signature": "val vTableGcTypes =", "body": "<EOL><INDENT><INDENT>ReferencableAndDefinable<IrClassSymbol, WasmTypeDeclaration>()<EOL>"}
{"signature": "val subpluginId =", "body": "subplugin.getCompilerPluginId()<EOL>"}
{"signature": "for (declaration in ownerInfo.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT>index.putToIndex(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinDir =", "body": "compiledClassesManager.getCompiledKotlinDirForModule(module)<EOL>"}
{"signature": "val kTypeImplForTypeParametersWithRecursiveBounds =", "body": "internalClass(<STR_LIT>)<EOL>"}
{"signature": "if (!alreadyDumped) {", "body": "<EOL><INDENT><INDENT><INDENT>assertions.assertFileDoesntExist(expectedFile, DUMP_CFG)<EOL><INDENT><INDENT>}"}
{"signature": "if (irValue !is IrVariable || !irValue.isLateinit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fullFileText =", "body": "FileUtil.loadFile(file, true)<EOL>"}
{"signature": "val importStatements =", "body": "mutableMapOf<JsVars, String>()<EOL>"}
{"signature": "var candidateGroups =", "body": "arrayListOf<Collection<C>>()<EOL>"}
{"signature": "val INTERESTING =", "body": "intArrayOf(MIN, MIN / <NUM_LIT>, -<NUM_LIT>39, -<NUM_LIT>3, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, 4<NUM_LIT>, <NUM_LIT>39, MAX / <NUM_LIT>, MAX)<EOL>"}
{"signature": "val INFO_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "else<INDENT><INDENT><INDENT><INDENT>{", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// approximation by laurent series in <NUM_LIT>/x at <NUM_LIT>+ order from -<NUM_LIT> to <NUM_LIT><INDENT><INDENT><INDENT><INDENT><INDENT>return Math.log(x * <NUM_LIT> + (<NUM_LIT> / (x * <NUM_LIT>)));<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun useICString(x: ICI) {", "body": "}<EOL>fun useI(x: I) {}"}
{"signature": "when (val y = bar(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>is A -> <STR_LIT><EOL><INDENT><INDENT>is Z -> baz(y.x)<EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "val knownSubstitutor =", "body": "<EOL><INDENT><INDENT>if (useKnownTypeSubstitutor)<EOL>"}
{"signature": "while (result > <NUM_LIT> && Character.isJavaIdentifierPart(text[result - <NUM_LIT>])) {", "body": "<EOL><INDENT><INDENT><INDENT>--result<EOL><INDENT><INDENT>}"}
{"signature": "val SETTER_ID =", "body": "ClassId.topLevel(SETTER)<EOL>"}
{"signature": "val subTypeSubstituted =", "body": "substituteDontCare.substitute(subType, Variance.INVARIANT) ?: return true<EOL>"}
{"signature": "val serializedDependencyFiles =", "body": "sourceSetDirectory.listFiles().orEmpty()<EOL>"}
{"signature": "for (repo in remotes) {", "body": "<EOL><INDENT><INDENT><INDENT>request.addRepository(repo)<EOL><INDENT><INDENT>}"}
{"signature": "if (project.isCompatibilityMetadataVariantEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val mainCompilation = target.compilations.getByName(KotlinCompilation.MAIN_COMPILATION_NAME)<EOL><INDENT><INDENT><INDENT><INDENT>configureMetadataDependenciesForCompilation(mainCompilation)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dependencyTransformationTaskOutputs =", "body": "project.files(dependencyTransformationTask.map { it.outputLibraryFiles })<EOL>"}
{"signature": "val analyzer =", "body": "FastMethodAnalyzer<BasicValue>(<EOL>"}
{"signature": "val associatedObjectsLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "if (config.produce.isCache) {", "body": "<EOL><INDENT><INDENT><INDENT>val containsStdlib = config.libraryToCache!!.klib == context.stdlibModule.konanLibrary<EOL><INDENT><INDENT><INDENT>CacheLlvmModuleSpecification(config.cachedLibraries, context.config.libraryToCache!!, containsStdlib = containsStdlib)<EOL><INDENT><INDENT>}"}
{"signature": "val linux<NUM_LIT>Main =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "if (libFile != stdlibFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>icError(<STR_LIT>, libFile, srcFile)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun button(onAction: () -> Unit) {", "body": "<EOL><INDENT>onAction()<EOL>}"}
{"signature": "val interopPhase =", "body": "createFileLoweringPhase(<EOL>"}
{"signature": "fun test<NUM_LIT>(x: C<in Any?>) {", "body": "<EOL><INDENT>val y = x.data<EOL><INDENT>require(y is String)<EOL><INDENT>x.data.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>y.length<EOL>}"}
{"signature": "val otherChar =", "body": "other[index]<EOL>"}
{"signature": "val replacementCopy =", "body": "replacement.deepCopy()<EOL>"}
{"signature": "package as the class using it<EOL>.", "body": ""}
{"signature": "for (annotationModel in testClassModel.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotationModel.generate(p)<EOL><INDENT><INDENT><INDENT><INDENT>p.println()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (tracked) {", "body": "<EOL><INDENT><INDENT><INDENT>trackedEnvironmentVariablesKeys.add(name)<EOL><INDENT><INDENT>}"}
{"signature": "var irDumpEnabled =", "body": "false<EOL>"}
{"signature": "val includeGitBranch =", "body": "System.getProperty(<STR_LIT>, <STR_LIT>).toBoolean()<EOL>"}
{"signature": "if (x !is A || x is B) {", "body": "<EOL><INDENT><INDENT>var k: B = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: A = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: Any? = x<EOL><INDENT>}"}
{"signature": "val fct =", "body": "list.first()<EOL>"}
{"signature": "val finallyDescriptor =", "body": "DescriptorUtils.getFunctionByName(promiseClass.unsubstitutedMemberScope, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val strIntegerPart =", "body": "strings[<NUM_LIT>]<EOL>"}
{"signature": "if (klass is FirRegularClass) {", "body": "<EOL><INDENT><INDENT><INDENT>val fieldsForContextReceiversOfCurrentClass = classifierStorage.getFieldsWithContextReceiversForClass(this, klass)<EOL><INDENT><INDENT><INDENT>declarations.addAll(fieldsForContextReceiversOfCurrentClass)<EOL><INDENT><INDENT>}"}
{"signature": "val useExperimentalFqNames =", "body": "useExperimental?.toList().orEmpty()<EOL>"}
{"signature": "while (!end() && !atClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>advance()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val DEFAULT_REQUIRES_TO_BUILDER =", "body": "false<EOL>"}
{"signature": "val sourcePathToContent =", "body": "sources.zip(sourcesContent).associate { it }<EOL>"}
{"signature": "fun useListOfA(a: List<A>) {", "body": "}<EOL>fun useListOfB(b: List<B>) {}"}
{"signature": "when (irGetter?.origin) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>JsLoweredDeclarationOrigin.OBJECT_GET_INSTANCE_FUNCTION -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val KAPT<NUM_LIT>_STUBS_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "if (isForbiddenReturnType(returnType, declaration, descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>val typeReferenceOrDeclarationName = declaration.typeReference ?: declaration.nameIdentifier ?: return<EOL><INDENT><INDENT><INDENT>context.trace.reportDiagnosticOnce(Errors.RESULT_CLASS_IN_RETURN_TYPE.on(typeReferenceOrDeclarationName))<EOL><INDENT><INDENT>}"}
{"signature": "if (i >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue outer;<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val loopMap =", "body": "hashMapOf<IrLoop, LoopBounds>()<EOL>"}
{"signature": "when (field.visibility) {", "body": "<EOL><INDENT><INDENT>Visibilities.PrivateToThis,<EOL><INDENT><INDENT>Visibilities.Private,<EOL><INDENT><INDENT>Visibilities.Internal -> field<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val KOTLIN_DOM_API_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val targetBackend =", "body": "testServices.defaultsProvider.defaultTargetBackend ?: TargetBackend.JS<EOL>"}
{"signature": "fun forbiddenIdentityEquals(c: C, d: D) {", "body": "<EOL><INDENT><!EQUALITY_NOT_APPLICABLE, FORBIDDEN_IDENTITY_EQUALS!>c === d<!><EOL>}"}
{"signature": "if (hasWildcard) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>regexPatternBuilder.append(c)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!filesWithResolvedImports.add(file)) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val longCommonizerTargetFile =", "body": "temporaryFolder.root.resolve(longCommonizerTarget.fileName)<EOL>"}
{"signature": "val actualFunctionDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT>if (descriptor.isSuspend)<EOL>"}
{"signature": "fun setConstant(value: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMSetGlobalConstant(llvmGlobal, if (value) <NUM_LIT> else <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val byCompileTask =", "body": "project.kotlinIdeCompilerArgumentsResolver.resolveCompilerArguments(compileTask)<EOL>"}
{"signature": "val Q<NUM_LIT> =", "body": "<NUM_LIT>e<NUM_LIT> <EOL>"}
{"signature": "val podFramework =", "body": "binary is Framework && binary.name.startsWith(POD_FRAMEWORK_PREFIX)<EOL>"}
{"signature": "val sha =", "body": "MessageDigest.getInstance(<STR_LIT>)<EOL>"}
{"signature": "val constructorsCallingSuper =", "body": "constructorsByDelegationKinds[ConstructorDelegationKind.CALLS_SUPER].orEmpty()<EOL>"}
{"signature": "fun recordJitCompilationTime() {", "body": "<EOL><INDENT><INDENT>if (!isEnabled) return<EOL><EOL><INDENT><INDENT>val bean = ManagementFactory.getCompilationMXBean() ?: return<EOL><INDENT><INDENT>measurements += JitCompilationMeasurement(bean.totalCompilationTime)<EOL><INDENT>}"}
{"signature": "val platformSourceSets =", "body": "listOfNotNull(<EOL>"}
{"signature": "fun assertDurableChange(before: String, after: String) {", "body": "<EOL><INDENT><INDENT>val beforeKeys = computeKeys(listOf(SourceFile(<STR_LIT>, before)))<EOL><INDENT><INDENT>val afterKeys = computeKeys(listOf(SourceFile(<STR_LIT>, after)))<EOL><EOL><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT>beforeKeys.toList().sorted().joinToString(separator = <STR_LIT>),<EOL><INDENT><INDENT><INDENT>afterKeys.toList().sorted().joinToString(separator = <STR_LIT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val INTEGER_BINARY_OPERATION_LONG =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "fun replaceAll(operator: UnaryOperator<Int>) {", "body": "}"}
{"signature": "if (containingFile is KtCodeFragment) {", "body": "<INDENT><INDENT>// Avoid building light classes for code fragments<INDENT><INDENT>return true<INDENT>}"}
{"signature": "val splits =", "body": "regex.splitToSequence(input).iterator()<EOL>"}
{"signature": "if (allModules.isEmpty()) {", "body": "<EOL><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "fun scoped<NUM_LIT>(block: Scope<Int, String>.() -> Unit) {", "body": "}<EOL>fun scoped<NUM_LIT>(block: Scope<*, String>.() -> Unit) {}"}
{"signature": "fun testVarSet(d: Demo, v: Int) {", "body": "d.demoVarSetGet = v }"}
{"signature": "val INTERNAL_COMPANIONS =", "body": "<EOL><INDENT><INDENT><INDENT>listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val replacement<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "if (traceEventMarkersEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>transformed.wrapWithTraceEvents(irFunctionSourceKey(), scope)<EOL><INDENT><INDENT>}"}
{"signature": "val CONTINUATION_CONTEXT_GETTER_NAME =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "if (node.tokenType == KtNodeTypes.PROPERTY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return markModifier(tree.getter(node), startOffset, endOffset, tree, node)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: markModifier(tree.setter(node), startOffset, endOffset, tree, node)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: super.mark(node, startOffset, endOffset, tree)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val systemClassLoader =", "body": "ClassLoader.getSystemClassLoader()<EOL>"}
{"signature": "for (i in (<NUM_LIT>u..<NUM_LIT>u).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > 2<NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val aT =", "body": "doubleArrayOf(<EOL>"}
{"signature": "fun module(builder: InlineSourceBuilder.ModuleBuilder.() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>modules = modules + inlineSourceBuilder.createModule(builder)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedLastIndexOf =", "body": "listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "fun visitClassConstructorNode(node: CirClassConstructorNode, data: Unit) {", "body": "<INDENT><INDENT>node.commonDeclaration() // commonize constructor<INDENT>}"}
{"signature": "if (returnableBlock != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>returnableBlockValues[returnableBlock]!!.add(expression.value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testSimpleString() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, str(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "var hasDifference =", "body": "false<EOL>"}
{"signature": "val DEFAULT_LAMBDA_FAKE_CALL =", "body": "<STR_LIT><EOL>"}
{"signature": "fun assertFailEquals(expected: () -> Unit, actual: () -> Unit) {", "body": "<INDENT><INDENT>val expectedFail = assertFails(expected)<INDENT><INDENT>val actualFail = assertFails(actual)<INDENT><INDENT>//assertEquals(expectedFail != null, actualFail != null)<INDENT><INDENT>assertTypeEquals(expectedFail, actualFail)<INDENT>}"}
{"signature": "val warningMessage =", "body": "project.getWarningMessage()<EOL>"}
{"signature": "fun visitAnonymousInitializer(expression: KtAnonymousInitializer, context: TranslationContext) {", "body": "<INDENT><INDENT>// parsed it in initializer visitor => no additional actions are needed<INDENT>}"}
{"signature": "if (ErrorUtils.isError(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return createErrorTypeForTypeConstructor(c, projectionFromAllQualifierParts, typeConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "if (cause is UnsupportedOperationException) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "if (ch in '<NUM_LIT>'..'<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = result * 1<NUM_LIT> + (ch - '<NUM_LIT>')<EOL><INDENT><INDENT><INDENT><INDENT>current++<EOL><INDENT><INDENT><INDENT><INDENT>numberSeen = true<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isReturnWithValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>insnList.insertBefore(insertBeforeInsn, VarInsnNode(topValue.loadOpcode, returnVariableIndex))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_MPP_IMPORT_ENABLE_SLOW_SOURCES_JAR_RESOLVER =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "fun reportCallableReferenceConstraintError(<EOL><INDENT><INDENT>error: NewConstraintMismatch,<EOL><INDENT><INDENT>rhsExpression: KtSimpleNameExpression<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>trace.report(TYPE_MISMATCH.on(rhsExpression, error.lowerKotlinType, error.upperKotlinType))<EOL><INDENT>}"}
{"signature": "if (newHashSize != hashSize) {", "body": "<EOL><INDENT><INDENT><INDENT>hashArray = IntArray(newHashSize)<EOL><INDENT><INDENT><INDENT>hashShift = computeShift(newHashSize)<EOL><INDENT><INDENT>}"}
{"signature": "val xcodeVersionTask =", "body": "XcodeVersionTask.locateOrRegister(this@KotlinProjectSetupAction)<EOL>"}
{"signature": "fun testPublicBooleanField() {", "body": "<EOL><INDENT><INDENT><!SUPER_CANT_BE_EXTENSION_RECEIVER!>super<!>.isPublicBooleanField<EOL><INDENT>}"}
{"signature": "val baseDefinition =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "if (possibleCallees.size > maxUnfoldFactor) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// Callsite too complicated to devirtualize.<INDENT><INDENT><INDENT><INDENT><INDENT>return expression<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var myChildrenArray =", "body": "EMPTY_ARRAY<EOL>"}
{"signature": "val suspendState =", "body": "JsIrBuilder.buildVar(coroutineImplLabelPropertyGetter.returnType, stateMachineFunction, <STR_LIT>, true)<EOL>"}
{"signature": "fun visitTypeAlias(typeAlias: FirTypeAlias, data: Any?) {", "body": "<EOL><INDENT><INDENT>parentForClass[typeAlias] = currentPath.lastOrNull()<EOL><INDENT>}"}
{"signature": "var mainKtCacheModified =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val SECOND =", "body": "this<EOL>"}
{"signature": "var nextLineNumberNode =", "body": "nextDefinitelyHitLineNumber(suspension)<EOL>"}
{"signature": "val linePsi =", "body": "lineInfo.linePsi<EOL>"}
{"signature": "fun fromClass(name: Name<String>) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "if (b in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>bytesInBuffer++<EOL><INDENT><INDENT>}"}
{"signature": "if (this is KtPropertyAccessor) {", "body": "<EOL><INDENT><INDENT><INDENT>return KtSymbolKind.ACCESSOR<EOL><INDENT><INDENT>}"}
{"signature": "if ((a ?: b)!!.implementsEquality) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if ((a == null) != (b == null)) return true<EOL><INDENT><INDENT><INDENT><INDENT>if (a != b) return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val coroutineAExecuted =", "body": "AtomicBoolean()<EOL>"}
{"signature": "val thisPtrArgType =", "body": "constructor.allParameters[<NUM_LIT>].type.toLLVMType(llvm)<EOL>"}
{"signature": "val alignment =", "body": "guessAlignment(offset, immediateOffset, defaultAlignment) ?: return null<EOL>"}
{"signature": "val apiElementsConfigurationName =", "body": "lowerCamelCaseName(variantName, <STR_LIT>)<EOL>"}
{"signature": "val supportedConstKinds =", "body": "setOf<ConstantValueKind<*>>(<EOL>"}
{"signature": "val hierarchy =", "body": "assertNotNull(template.buildHierarchy(kotlin.linuxX<NUM_LIT>().compilations.main))<EOL>"}
{"signature": "fun testOneVertexConcrete() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>graph()<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT>}"}
{"signature": "val usedInBounds =", "body": "HashMap<TypeVariable, MutableList<TypeBounds.Bound>>()<EOL>"}
{"signature": "val decompositionValues =", "body": "intArrayOf(<EOL>"}
{"signature": "val rootExceptionTrap =", "body": "buildExceptionTrapState()<EOL>"}
{"signature": "fun foldingBinary(foo<NUM_LIT>: Foo?, foo<NUM_LIT>: Foo?) {", "body": "<EOL><INDENT>foo<NUM_LIT>!!<EOL><INDENT>foo<NUM_LIT>!!<EOL><INDENT>foo<NUM_LIT>.foo(foo<NUM_LIT>)<EOL>}"}
{"signature": "import foo.", "body": "*<EOL>"}
{"signature": "val INTEROP_READ_BITS<INDENT><INDENT><INDENT> =", "body": "<STR_LIT><EOL>"}
{"signature": "fun myMethod() {", "body": "}<EOL><EOL><INDENT>class NestedClass {<EOL><INDENT><INDENT>class NestedNestedClass<EOL><INDENT>}"}
{"signature": "val isInsideExternal =", "body": "isInsideExternalClass(containingDeclaration, context)<EOL>"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.classAnnotation) != new.getExtensionCount(JsProtoBuf.classAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(ProtoBufClassKind.JS_EXT_CLASS_ANNOTATION_LIST)<EOL><INDENT><INDENT>}"}
{"signature": "val headers =", "body": "mutableListOf<Pair<String, String>>()<EOL>"}
{"signature": "val encodingPackageFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (possiblyInnerType == null) {", "body": "<EOL><INDENT><INDENT><INDENT>append(renderTypeConstructor(typeConstructor))<EOL><INDENT><INDENT><INDENT>append(renderTypeArguments(type.arguments))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (directory != basedir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertFalse(directory.parent in postVisit)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (newCell in maze.neighbors(cell.first, cell.second)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (newCell in visited) continue<EOL><INDENT><INDENT><INDENT>previous[newCell] = cell<EOL><INDENT><INDENT><INDENT>queue.offer(newCell)<EOL><INDENT><INDENT><INDENT>visited.add(cell)<EOL><INDENT><INDENT>}"}
{"signature": "for ((index, enumEntry) in enumEntries.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newlineExceptFirst()<EOL><INDENT><INDENT><INDENT><INDENT>builder.append(subindent)<EOL><INDENT><INDENT><INDENT><INDENT>appendDescriptor(enumEntry, subindent, index == enumEntries.lastIndex)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isSam =", "body": "FirSamResolver(actualSession, actualScopeSession).isSamType(type)<EOL>"}
{"signature": "val getterDesc =", "body": "propDesc.getter!!<EOL>"}
{"signature": "if (numberOfNestedBlocks < eatLevel) {", "body": "<EOL><INDENT><INDENT><INDENT>eatEverythingUntilLevel = null<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "for (j in <NUM_LIT>.groupResults[i].size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(groupResults[i][j], result.groupValues[j + <NUM_LIT>], <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (classSymbol.typeParameterSymbols.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result += SerialEntityNames.TYPE_PARAMS_SERIALIZERS_GETTER<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitNestedElements(element: FirElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>element.acceptChildren(this, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ownerHasReceiver =", "body": "callableOwner?.receiverParameter != null<EOL>"}
{"signature": "for (i in size - <NUM_LIT> downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val call = (state.invokeSymbol.owner as IrSimpleFunction).createCall()<EOL><INDENT><INDENT><INDENT>call.dispatchReceiver = initSymbol.owner.createGetValue()<EOL><INDENT><INDENT><INDENT>call.putValueArgument(<NUM_LIT>, i.toIrConst(environment.irBuiltIns.intType))<EOL><INDENT><INDENT><INDENT>instructions += CompoundInstruction(call)<EOL><INDENT><INDENT>}"}
{"signature": "fun useIC(x: IC<NUM_LIT>) {", "body": "}<EOL>fun useAny(x: Any) {}"}
{"signature": "for (item in list) {", "body": "<EOL><INDENT><INDENT>if (!isFirst) append(separator)<EOL><INDENT><INDENT>renderItem(item)<EOL><INDENT><INDENT>isFirst = false<EOL><INDENT>}"}
{"signature": "for (useSiteSession in computationSession.useSiteSessions.asReversed()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type.toSymbol(useSiteSession)?.let(::add)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val simpleNameMapping =", "body": "mapOf(<EOL>"}
{"signature": "val firstVarargIndex =", "body": "parameters.withIndex().firstOrNull { it.value.varargElementType != null }?.index<EOL>"}
{"signature": "fun testKT<NUM_LIT>LoadWeak() {", "body": "<EOL><INDENT>testKT<NUM_LIT>LoadWeak(ObjCWeakReference())<EOL>}"}
{"signature": "val ALLOWED_DEPTH_DELTA_FOR_INCORPORATION =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun foo<NUM_LIT>(a: MutableList<in Number>?) {", "body": "}"}
{"signature": "if (function.isFakeOverride) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (logger.isVerbose || showProcessorStats) {", "body": "<EOL><INDENT><INDENT><INDENT>val loggerFun = if (showProcessorStats) logger::warn else logger::info<EOL><INDENT><INDENT><INDENT>showProcessorStats(wrappedProcessors, loggerFun)<EOL><INDENT><INDENT>}"}
{"signature": "val dummyGenerator =", "body": "js(<STR_LIT>\"<EOL>"}
{"signature": "val cStringLiterals =", "body": "mutableMapOf<String, ConstPointer>()<EOL>"}
{"signature": "for (l in r) {", "body": "<EOL><INDENT>s += l<EOL>  }"}
{"signature": "val testBuildDir =", "body": "File(EnvironmentVariable.PROJECT_BUILD_DIR.readValue()).resolve(<STR_LIT>)<EOL>"}
{"signature": "when (proto.kind!!) {", "body": "<EOL><INDENT><INDENT>QualifiedName.Kind.CLASS,<EOL><INDENT><INDENT>QualifiedName.Kind.LOCAL -><EOL><INDENT><INDENT><INDENT>return module.findClassAcrossModuleDependencies(this.getClassId(fqNameIndex))!!<EOL><INDENT><INDENT>QualifiedName.Kind.PACKAGE -><EOL><INDENT><INDENT><INDENT>return module.getPackage(FqName(packageName))<EOL><INDENT>}"}
{"signature": "for (item in iterable) {", "body": "<EOL><INDENT><INDENT>if (!isFirst) append(separator)<EOL><INDENT><INDENT>renderItem(item)<EOL><INDENT><INDENT>isFirst = false<EOL><INDENT>}"}
{"signature": "val coroutineImplExceptionPropertySetter =", "body": "coroutineSymbols.coroutineImplExceptionPropertySetter<EOL>"}
{"signature": "fun assumeCachesAreEnabled() {", "body": "<EOL><INDENT><INDENT>Assumptions.assumeFalse(testRunSettings.get<CacheMode>() == CacheMode.WithoutCache)<EOL><INDENT>}"}
{"signature": "if (it.startOffset <= cursor && cursor <= it.endOffset) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val s = cursor - it.startOffset<EOL><INDENT><INDENT><INDENT><INDENT>val e = s + INSERTED_STRING.length<EOL><INDENT><INDENT><INDENT><INDENT>t.substring(<NUM_LIT>, s) + t.substring(e)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rendersOption =", "body": "argParser.option(ArgType.Choice<Renders>(),<EOL>"}
{"signature": "if (platformLibsAreReady) {", "body": "<EOL><INDENT><INDENT><INDENT>alreadyProcessed.setGenerated(platformLibsDirectory)<EOL><INDENT><INDENT>}"}
{"signature": "val oldExternalValue =", "body": "isEffectivelyExternal<EOL>"}
{"signature": "val negative =", "body": "lookAheadChar == 'P'<EOL>"}
{"signature": "var cResult =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (visibility != Visibility.PUBLIC) {", "body": "<EOL><INDENT><INDENT>print(visibility.name.toLowerCaseAsciiOnly(), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val Shared =", "body": "<STR_LIT><EOL>"}
{"signature": "val stringAndList =", "body": "<STR_LIT> + emptyList<Boolean>()<EOL>"}
{"signature": "val repoDir =", "body": "repositoryCoordinates.toFilePath()<EOL>"}
{"signature": "var localVars =", "body": "mutableSetOf<JsName>()<EOL>"}
{"signature": "if (delegatedCall != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return generateDelegatedGetterFunction(getterDescriptor, delegatedCall, function)<EOL><INDENT><INDENT>}"}
{"signature": "val protoFileContents =", "body": "File(protoPath).readLines()<EOL>"}
{"signature": "if (variants.isEmpty() || applicationPackage.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val needParentheses =", "body": "typeRef != null && typeRef.typeElement is KtFunctionType && !typeRef.hasParentheses()<EOL>"}
{"signature": "if (typeOperatorCall.conversionTypeRef.coneType.isNullable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.containsNull = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun toArray(a : List<String>){", "body": "<EOL><INDENT>a.toTypedArray()<EOL>}"}
{"signature": "val KOTLIN_LANGUAGE_VERSION_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val classpathSnapshot =", "body": "snapshotClasspath(File(<STR_LIT>), tmpDir)<EOL>"}
{"signature": "val firstCatch =", "body": "catches.first()<EOL>"}
{"signature": "val aFileTarget =", "body": "root.resolve(<STR_LIT>)<EOL>"}
{"signature": "val generatedWords =", "body": "generatedCommentLine.trim().split(<STR_LIT>).map { it.trim() }<EOL>"}
{"signature": "val optionType =", "body": "optionTypes[optionAlias] ?: printUsageAndExit(<STR_LIT>)<EOL>"}
{"signature": "val prevIgnore =", "body": "ignoredSuite<EOL>"}
{"signature": "if (symbol is IrDelegatingSymbol<*, *, *>) {", "body": "<EOL><INDENT><INDENT><INDENT>delegatedSymbolMap.remove(symbol)<EOL><INDENT><INDENT>}"}
{"signature": "if (a is DoubleArray) {", "body": "<EOL><INDENT><INDENT>a.get(<NUM_LIT>)<EOL><INDENT><INDENT>a.set(<NUM_LIT>, 1.<NUM_LIT>)<EOL><INDENT><INDENT>a.iterator()<EOL><INDENT><INDENT>return a.size<EOL><INDENT>}"}
{"signature": "val incrementComparisonGenerator =", "body": "<EOL><INDENT><INDENT>getComparisonGeneratorForKotlinType(incrementKotlinType) as? SignedIntegerComparisonGenerator<EOL>"}
{"signature": "val fromCurrent =", "body": "computeDeclaredFunctions()<EOL>"}
{"signature": "if (memberDeclaration.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val jsNameClass =", "body": "getIrClass(FqName(<STR_LIT>))<EOL>"}
{"signature": "fun assertTypeEquals(expected: Any?, actual: Any?) {", "body": "<EOL><INDENT>assertEquals(expected?.javaClass, actual?.javaClass)<EOL>}"}
{"signature": "var nis =", "body": "<STR_LIT> <EOL>"}
{"signature": "fun visitFunction(declaration: IrFunction, data: IrDeclaration?) {", "body": "<EOL><INDENT><INDENT>super.visitFunction(declaration, data)<EOL><INDENT><INDENT>declaration.addFakeLocalVariableForFun(declaration)<EOL><INDENT>}"}
{"signature": "val resolvedExplicitReceiver =", "body": "resolveReceiver(<EOL>"}
{"signature": "val initEntryInstancesFun =", "body": "declaration.parent.safeAs<IrClass>()?.initEntryInstancesFun<EOL>"}
{"signature": "if (nextPackageOrClassDescriptor == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Pair(currentDescriptor, qualifierPartIndex)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is BlockExitNode) {", "body": "<EOL><INDENT><INDENT><INDENT>nodes += previousCfgNodes<EOL><INDENT><INDENT>}"}
{"signature": "val icEnv =", "body": "config.incrementalCompilationEnvironment ?: error(<STR_LIT>)<EOL>"}
{"signature": "fun handleOptionJavac<NUM_LIT>(option: Option, value: String) {", "body": "<EOL><INDENT><INDENT>val handleOptionMethod = JavacFileManager::class.java<EOL><INDENT><INDENT><INDENT>.getMethod(<STR_LIT>, Option::class.java, String::class.java)<EOL><EOL><INDENT><INDENT>handleOptionMethod.invoke(this, option, value)<EOL><INDENT>}"}
{"signature": "fun putAll(m: Map<out K, V>) {", "body": "}<EOL><INDENT>public fun clear() {}"}
{"signature": "val testTraceKey =", "body": "extrasKeyOf<String>(<STR_LIT>)<EOL>"}
{"signature": "package collections<EOL>.", "body": ""}
{"signature": "package this file belongs to.", "body": "<EOL>"}
{"signature": "if (!DescriptorUtils.isTopLevelDeclaration(function) && irFunction.isOverridable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>codegen.getVirtualFunctionTrampoline(irFunction as IrSimpleFunction)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val closedRange =", "body": "<NUM_LIT>uL..<NUM_LIT>uL<EOL>"}
{"signature": "val clickOrPressRegex =", "body": "<STR_LIT>.toRegex() // We have different hotkeys on different platforms"}
{"signature": "if (startIndex >= rightBound) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val irInCall =", "body": "CallGenerator(statementGenerator).generateCall(ktCondition, inCall, inOperator)<EOL>"}
{"signature": "fun assertEnabled() {", "body": "<EOL><INDENT>@OptIn(kotlin.experimental.ExperimentalNativeApi::class)<EOL><INDENT>assert(false)<EOL>}"}
{"signature": "val sourceDirs =", "body": "module.files.map { it.originalFile.parent }.distinct()<EOL>"}
{"signature": "val DEFAULT_PARAMETER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val ts =", "body": "System.currentTimeMillis()<EOL>"}
{"signature": "fun foo(f: () -> Unit) {", "body": "<EOL><INDENT>f()<EOL>}"}
{"signature": "val mayBeRenamedBuiltIn =", "body": "name in namesPossibleForRenamedBuiltin<EOL>"}
{"signature": "val maxFibonacciNumber =", "body": "context<EOL>"}
{"signature": "fun foo(s: String, x: Int) {", "body": "}<EOL><INDENT>fun bar(x: Int) {}"}
{"signature": "val cachedListForDerived =", "body": "cachedDerived.contents()<EOL>"}
{"signature": "val charValue =", "body": "IrConstKind.Char.valueOf(irConst)<EOL>"}
{"signature": "fun testCommonWatchos(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doCommonNativeTest(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>libTargets = listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT>appTargets = listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT>gradleVersion<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val synth =", "body": "<STR_LIT><EOL>"}
{"signature": "for (isoString in isoStrings) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parseIsoString(isoString), isoString)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parse(isoString), isoString)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parseIsoStringOrNull(isoString), isoString)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parseOrNull(isoString), isoString)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (element.elementType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtTokens.QUEST -> return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtTokens.COLONCOLON -> return false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (event is TaskFinishEvent) {", "body": "<EOL><INDENT><INDENT><INDENT>val buildOperation = updateBuildOperationRecord(event)<EOL><INDENT><INDENT><INDENT>val buildParameters = parameters.toBuildReportParameters()<EOL><INDENT><INDENT><INDENT>buildReportService.onFinish(event, buildOperation, buildParameters)<EOL><INDENT><INDENT>}"}
{"signature": "val DEFAULT_CLASSPATH_DIGEST_WATCH_PERIOD_MS =", "body": "<NUM_LIT>L // <NUM_LIT> min"}
{"signature": "val merged =", "body": "mergeCirTree(<STR_LIT> to aTree, <STR_LIT> to bTree)<EOL>"}
{"signature": "val kotlinBuildScripts =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val expectedFilteredOutput =", "body": "testPathFull.resolve(<STR_LIT>).readText()<EOL>"}
{"signature": "for (mask in toInts) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>callGenerator.putValueIfNeeded(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JvmKotlinType(Type.INT_TYPE), StackValue.constant(mask, Type.INT_TYPE), ValueKind.DEFAULT_MASK<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(array: Array<Int>) {", "body": "<EOL><INDENT>bar(array[foo(emptyList())])<EOL><EOL><INDENT>bar(foo(emptyList()) + foo(a.emptyList()))<EOL><EOL><INDENT>bar(makeNullable(foo(emptyList())) ?: <NUM_LIT>)<EOL>}"}
{"signature": "fun t<NUM_LIT> () {", "body": "<INDENT>val b<NUM_LIT> = StrangeArray<Int>(<NUM_LIT>, <NUM_LIT>)<INDENT>b<NUM_LIT>.set(<NUM_LIT>, <NUM_LIT>) //ok<INDENT>b<NUM_LIT>[<NUM_LIT>] = <NUM_LIT> //verify error<INDENT>var i = b<NUM_LIT>.get(<NUM_LIT>) //ok<INDENT>i = b<NUM_LIT>[<NUM_LIT>] //verify error}"}
{"signature": "fun App() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val a = A()<EOL><INDENT><INDENT><INDENT><INDENT>a.bam<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val currentCount =", "body": "globalCount.value<EOL>"}
{"signature": "fun save(output: DataOutput, snapshot: JavaClassSnapshot) {", "body": "<EOL><INDENT><INDENT>ClassIdExternalizer.save(output, snapshot.classId)<EOL><INDENT><INDENT>LongExternalizer.save(output, snapshot.classAbiHash)<EOL><INDENT><INDENT>NullableValueExternalizer(JavaClassMemberLevelSnapshotExternalizer).save(output, snapshot.classMemberLevelSnapshot)<EOL><INDENT><INDENT>ListExternalizer(JvmClassNameExternalizer).save(output, snapshot.supertypes)<EOL><INDENT>}"}
{"signature": "fun testAnon() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>s.<!INVISIBLE_MEMBER!>name<!><EOL><INDENT><INDENT><INDENT><INDENT>s.<!INVISIBLE_MEMBER!>getName<!>()<EOL><INDENT><INDENT><INDENT><INDENT>s.<!INVISIBLE_MEMBER!>name<!> = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>s.<!INVISIBLE_MEMBER!>name<!> = s.<!INVISIBLE_MEMBER!>name<!><EOL><INDENT><INDENT><INDENT><INDENT>s.setName(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package callingCommonized<EOL>.", "body": ""}
{"signature": "val typeC =", "body": "mockTAType(<STR_LIT>) { typeA }<EOL>"}
{"signature": "val API_VERSION_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "val lazyVararg =", "body": "codegen.genVarargs(argument, valueParameters[i].type.upperIfFlexible())<EOL>"}
{"signature": "val functionsFromSupertypes =", "body": "getStaticFunctionsFromJavaSuperClasses(name, ownerDescriptor)<EOL>"}
{"signature": "val funInterfaceConstructorsScopes =", "body": "<EOL><INDENT><INDENT><INDENT>FunInterfaceConstructorsSyntheticScope(storageManager, lookupTracker, samConventionResolver, samConversionOracle)<EOL>"}
{"signature": "fun include(f: Family, primitives: Collection<Pair<PrimitiveType, PrimitiveType>>) {", "body": "<EOL><INDENT><INDENT>familyPrimitives[f] = primitives.toSet()<EOL><INDENT>}"}
{"signature": "if (lhsResult.qualifier?.classValueReceiver?.type == receiver.receiverValue.type) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CallableReceiver.BoundValueReference(receiver)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nonLinebreaks =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (breakExpression.target.labeledElement !in firLoopStatements) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>firBreakExpressions.add(breakExpression)<EOL><INDENT><INDENT><INDENT><INDENT>firLoopJumpTargets.add(breakExpression.target.labeledElement)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isSave =", "body": "name == SerialEntityNames.SAVE_NAME &&<EOL>"}
{"signature": "fun dependency(vararg path: Path) {", "body": "<EOL><INDENT><INDENT><INDENT>filtersMap.getValue(binaryModuleData.regular) += path<EOL><INDENT><INDENT>}"}
{"signature": "import protectedPack.", "body": "A<EOL>"}
{"signature": "if (startIndex < <NUM_LIT> || startIndex > length) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IndexOutOfBoundsException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val STRUCT_NEW =", "body": "<STR_LIT><EOL>"}
{"signature": "val isGlob =", "body": "'*' in path.name<EOL>"}
{"signature": "val sourceSetNameC =", "body": "sourceSetName.capitalize()<EOL>"}
{"signature": "when (val obj = field.get(continuation)) {", "body": "<EOL><INDENT><INDENT><INDENT>is Array<*> -> obj.joinToString(prefix = <STR_LIT>, postfix = <STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> obj<EOL><INDENT><INDENT>}"}
{"signature": "fun reportMarkDirtyMember(affectedFiles: Iterable<File>, scope: String, name: String) {", "body": "<EOL><INDENT><INDENT>reportMarkDirty(affectedFiles, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(x: (@L<NUM_LIT> @L<NUM_LIT> A).() -> Unit) {", "body": "}<EOL><EOL>fun bar<NUM_LIT>(x: (@L<NUM_LIT> B).() -> Unit) {}"}
{"signature": "if (isJsNonModule()) {", "body": "<EOL><INDENT><INDENT><INDENT>getJsNameOrKotlinName().asString()<EOL><INDENT><INDENT>}"}
{"signature": "val compatible =", "body": "receiverCandidates.mapNotNull { getReceiverArgumentWithConstraintIfCompatible(it, extensionReceiverParameter) }<EOL>"}
{"signature": "val cinteropProjectNameForKt<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "fun dispatchResume(block: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>val id = controller.resumeIndex++<EOL><INDENT><INDENT><INDENT>controller.log += <STR_LIT><EOL><INDENT><INDENT><INDENT>block()<EOL><INDENT><INDENT><INDENT>controller.log += <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val outputTargets =", "body": "getMandatory<Set<SharedCommonizerTarget>, OutputCommonizerTargetsOptionType>()<EOL>"}
{"signature": "if (!TypeUtils.noExpectedType(expectedType) && !expectedType.isMarkedNullable && !expectedType.isFlexible()) {", "body": "<EOL><INDENT><INDENT><INDENT>report(UNSAFE_CALL_ON_PARTIALLY_DEFINED_RESOURCE.on(calleeExpression))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun report(task: UsesKotlinToolingDiagnostics, diagnostic: ToolingDiagnostic) {", "body": "<EOL><INDENT><INDENT>report(task, task.logger, diagnostic)<EOL><INDENT>}"}
{"signature": "val initialBoundRender =", "body": "arrow + typeRendered.renderType(bound.constrainingType) + if (!bound.isProper) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (it.condition.operation != Operation.EqNull) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>flow.addImplication(it)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((type, index) in parameterTypesAndIndices) {", "body": "<EOL><INDENT><INDENT>load(index, type)<EOL><INDENT>}"}
{"signature": "fun classLiteral() {", "body": "<EOL><INDENT>A::class<EOL>}"}
{"signature": "val nameAsList =", "body": "listOf(getNameText())<EOL>"}
{"signature": "val tryBlockEnd =", "body": "markNewLabel()<EOL>"}
{"signature": "fun withContainingRegularClass(firClass: FirRegularClass, action: () -> Unit) {", "body": "<EOL><INDENT><INDENT>action()<EOL><INDENT>}"}
{"signature": "val gLong =", "body": "FooLong(<NUM_LIT>)<EOL>"}
{"signature": "val constructorForCurrentlyGeneratedDelegatedConstructor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>conversionScope.getConstructorForCurrentlyGeneratedDelegatedConstructor(irClass.symbol)<EOL>"}
{"signature": "val childrenRef =", "body": "Ref<Array<LighterASTNode?>>()<EOL>"}
{"signature": "val literal =", "body": "(annotated?.unwrapParenthesesLabelsAndAnnotations() as? KtLambdaExpression)?.functionLiteral ?: return<EOL>"}
{"signature": "val setterParameters =", "body": "Foo::delegate.setter.parameters<EOL>"}
{"signature": "val useSerializer =", "body": "stackValueSerializerInstanceFromSerializer(expressionCodegen, codegen, sti, this@SerializerCodegenImpl)<EOL>"}
{"signature": "val specialBuiltinsFromSuperTypes =", "body": "SmartSet.create<SimpleFunctionDescriptor>()<EOL>"}
{"signature": "when(obj) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> println(<STR_LIT>)<EOL><INDENT><INDENT><STR_LIT> -> println(<STR_LIT>)<EOL><INDENT><INDENT>!is String -> println(<STR_LIT>)<EOL><INDENT><INDENT>else -> println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val additionalUpperBound =", "body": "additionalUpperBoundsProvider?.getAdditionalUpperBound(upperBound)<EOL>"}
{"signature": "if (function.valueParameters[numNonDefaultParamters + it].isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (nativeMath.abs(x) >= taylor_<NUM_LIT>_bound) {", "body": "<INDENT><INDENT><INDENT><INDENT>// approximation by taylor series in x at <NUM_LIT> up to order <NUM_LIT><INDENT><INDENT><INDENT><INDENT>result -= (x * x * x) / <NUM_LIT><INDENT><INDENT><INDENT>}"}
{"signature": "val allTaskPaths =", "body": "taskPaths.joinToString(prefix = <STR_LIT>, postfix = <STR_LIT>)<EOL>"}
{"signature": "val newThrowableSymbol =", "body": "symbolTable.descriptorExtension.referenceSimpleFunction(getJsInternalFunction(<STR_LIT>))<EOL>"}
{"signature": "fun exitTryFinally() {", "body": "<EOL><INDENT><INDENT><INDENT>val pop = allBlocks.pop()<EOL><INDENT><INDENT><INDENT>assert(pop is TryFinallyBlockInfo)<EOL><INDENT><INDENT>}"}
{"signature": "val METADATA_TARGET_NAME =", "body": "KotlinMetadataTarget.METADATA_TARGET_NAME<EOL>"}
{"signature": "val lhsExitNode =", "body": "equalityOperatorCallLhsExitNodes.pop()<EOL>"}
{"signature": "val disableDirectives =", "body": "listOf(<EOL>"}
{"signature": "val FOO =", "body": "<STR_LIT><EOL>"}
{"signature": "val convertedOperationReceiver =", "body": "callGenerator.convertToIrCall(<EOL>"}
{"signature": "val globalLong =", "body": "GenericWrapper(<NUM_LIT>L)<EOL>"}
{"signature": "val importedProjectWorkspaces =", "body": "<EOL><INDENT><INDENT><INDENT>NpmImportedPackagesVersionResolver(npmProjects, nodeJsWorldDir).resolveAndUpdatePackages()<EOL>"}
{"signature": "val spliterator =", "body": "iterable.spliterator()<EOL>"}
{"signature": "else if (notForInline != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val (originalNode, smap) = classCodegen.generateMethodNode(notForInline)<EOL><INDENT><INDENT><INDENT>originalNode.accept(MethodBodyVisitor(methodVisitor))<EOL><INDENT><INDENT><INDENT>smap<EOL><INDENT><INDENT>}"}
{"signature": "val jsFun =", "body": "descriptor.annotations.findAnnotation(jsFunFqName) ?: return<EOL>"}
{"signature": "val subProject =", "body": "subProject(it)<EOL>"}
{"signature": "if (topLevel) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(renderKeyword(<STR_LIT>)).append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun callSendBlock(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker) {", "body": "<EOL><INDENT>val block = createLambda()<EOL><EOL><INDENT>helper.sendBlock(block)<EOL><INDENT>helper.sendBlock(block)<EOL><INDENT>tracker.add(block)<EOL>}"}
{"signature": "val platformPrefixProperty =", "body": "System.setProperty(PlatformUtils.PLATFORM_PREFIX_KEY, <STR_LIT>)<EOL>"}
{"signature": "if (orderRoot.isExported) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>args += (<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (additionalPluginExtension != null) {", "body": "<EOL><INDENT><INDENT><INDENT>IrGenerationExtension.registerExtension(project, additionalPluginExtension)<EOL><INDENT><INDENT>}"}
{"signature": "val fromEntry =", "body": "processSingleClasspathEntry(entry)<EOL>"}
{"signature": "val getElementFn =", "body": "symbols.arrayGet.getValue(arrayClass)<EOL>"}
{"signature": "val constructorMap =", "body": "mutableMapOf<CallableId, List<FirConstructorSymbol>>()<EOL>"}
{"signature": "val privateX<NUM_LIT>BoundRef =", "body": "Z<NUM_LIT>(4<NUM_LIT>U, -4<NUM_LIT>)::privateX<NUM_LIT><EOL>"}
{"signature": "val weakRefToTrashCycle =", "body": "createLoop()<EOL>"}
{"signature": "val kOutputClass =", "body": "serializerDescriptor.getClassFromSerializationPackage(SerialEntityNames.STRUCTURE_ENCODER_CLASS)<EOL>"}
{"signature": "import kotlinx.", "body": "serialization.json.Json<EOL>"}
{"signature": "fun replaceBoundSymbol(newBoundSymbol: FirBasedSymbol<*>?) {", "body": "}<EOL><EOL><INDENT>override fun replaceContextReceiverNumber(newContextReceiverNumber: Int) {<EOL><INDENT><INDENT>contextReceiverNumber = newContextReceiverNumber<EOL><INDENT>}"}
{"signature": "val producers =", "body": "scenarios.map { it.producer }.toSet()<EOL>"}
{"signature": "val fRef =", "body": "FooRef(<STR_LIT>)<EOL>"}
{"signature": "val inlinedLocalDeclarations =", "body": "mutableMapOf<String, JsCompositeBlock>()<EOL>"}
{"signature": "val libDecamelizeVersion =", "body": "moduleVersion(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val externalManager =", "body": "services[CommonCompilerPerformanceManager::class.java]<EOL>"}
{"signature": "val capacity =", "body": "mapCapacity(length).coerceAtLeast(<NUM_LIT>)<EOL>"}
{"signature": "val inlineInlineType =", "body": "inlinedType.getInlineTargetTypeOrNull()<EOL>"}
{"signature": "for (var (a) in b) {", "body": "}"}
{"signature": "import test<NUM_LIT>Test<NUM_LIT>;<EOL>.", "body": ""}
{"signature": "val prev =", "body": "holder.get(slice.key)<EOL>"}
{"signature": "fun find(clz:Class<*>){", "body": "}"}
{"signature": "val functionPlaceholderTypeConstructor =", "body": "functionPlaceholder.constructor as FunctionPlaceholderTypeConstructor<EOL>"}
{"signature": "fun exitWhenBranchResult(whenBranch: FirWhenBranch) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitWhenBranchResult(whenBranch).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (!ktFiles.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>LoadDescriptorUtil.compileKotlinToDirAndGetModule(ktFiles, outDir, environment)<EOL><INDENT><INDENT>}"}
{"signature": "if (inlineCall.usesDefaultArguments()) {", "body": "<INDENT><INDENT><INDENT><INDENT>// we must reset LN because at this point in original inliner we will inline non default call<INDENT><INDENT><INDENT><INDENT>lineNumberMapper.resetLineNumber()<INDENT><INDENT><INDENT>}"}
{"signature": "if (key in result) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val superClassMetadata =", "body": "superClass?.let { getClassMetadata(it.symbol) }<EOL>"}
{"signature": "val parserDefinition =", "body": "KotlinParserDefinition()<EOL>"}
{"signature": "val topString =", "body": "<STR_LIT><EOL>"}
{"signature": "val isJvmInterface =", "body": "classKind == KtClassKind.INTERFACE || classKind == KtClassKind.ANNOTATION_CLASS<EOL>"}
{"signature": "val previousIsExpect =", "body": "context.containerIsExpect<EOL>"}
{"signature": "val commonizerOutput =", "body": "<STR_LIT><EOL>"}
{"signature": "for (info in localVarsMetaInfo.getMeaningfulIntervals()) {", "body": "<EOL><INDENT><INDENT><INDENT>node.localVariables.add(info.node)<EOL><INDENT><INDENT>}"}
{"signature": "val psiMethod =", "body": "propertyMethods.getter<EOL>"}
{"signature": "val actualFileModule =", "body": "projectStructureProvider.getModule(ktFile, contextualModule)<EOL>"}
{"signature": "val contextForVariable =", "body": "BasicCallResolutionContext.create(<EOL>"}
{"signature": "val lowBytes =", "body": "input.readFixed<NUM_LIT>().toULong()<EOL>"}
{"signature": "val numArgs =", "body": "clang_getNumArgTypes(type)<EOL>"}
{"signature": "fun setMethodImplForHTMLSelectElement(obj: HTMLSelectElement, index: Int, option: HTMLOptionElement?) {", "body": "js(<STR_LIT>) }"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.propertyBackingFieldAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.propertyBackingFieldAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val implFunSymbol =", "body": "implFunRef.symbol<EOL>"}
{"signature": "if (containingDeclaration is FunctionDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return !containingDeclaration.hasValidJsCodeBody(bindingContext)<EOL><INDENT><INDENT>}"}
{"signature": "val connectionFailedErr =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (this != another) {", "body": "evaluationDependsOn(another.path) }"}
{"signature": "fun downloadFile(fromUrl: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val fileName = File(fromUrl).name<EOL><INDENT><INDENT><INDENT><INDENT>val dest = baseDir.resolve(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>dest.writeText(readLines(fromUrl).joinToString(separator = <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val inFunInterface =", "body": "abstractFunctionSymbol.getContainingClassSymbol(context.session) === classSymbol<EOL>"}
{"signature": "val actualPackageFragment =", "body": "packageFragment<EOL>"}
{"signature": "if (hash >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>hashArray[hash] = <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>presenceArray[i] = TOMBSTONE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (property.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>data.variableDeclarations.last()[property.name] = property<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val eventKlass =", "body": "TEvent::class<EOL>"}
{"signature": "val JAVA_IO_SERIALIZABLE =", "body": "ClassId.topLevel(FqName(<STR_LIT>))<EOL>"}
{"signature": "val fileSource =", "body": "components.file.source<EOL>"}
{"signature": "var sourcesWereUpdated =", "body": "false<EOL>"}
{"signature": "val boundUsedIn =", "body": "boundsUsedIn[index]<EOL>"}
{"signature": "for (argument in arguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>yieldAll(argument.type.getAnnotationsSequence())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var obj =", "body": "<STR_LIT> as java.lang.Object<EOL>"}
{"signature": "val supertypeParameterCount =", "body": "classDescriptor.typeConstructor.parameters.size<EOL>"}
{"signature": "if (descriptor.declaresDefaultValue()) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(DEFAULT_VALUE_NOT_ALLOWED_IN_OVERRIDE.on(parameter))<EOL><INDENT><INDENT>}"}
{"signature": "fun testPodDownloadGitNoTagNorCommit(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestGit(gradleVersion)<EOL><INDENT>}"}
{"signature": "if (patterns.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>patterns.add(createPattern(charCode, line.categoryCode, mapping))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val nativeExtras =", "body": "assertNotNull(nativeTarget.extras.native)<EOL>"}
{"signature": "val fromConstructor =", "body": "decl.source?.kind == KtFakeSourceElementKind.PropertyFromParameter<EOL>"}
{"signature": "val valuesFunc =", "body": "DescriptorUtils.getFunctionByName(serializableDescriptor.staticScope, StandardNames.ENUM_VALUES)<EOL>"}
{"signature": "if (v !is A) {", "body": "<EOL><INDENT><INDENT>foo(v)<EOL><INDENT>}"}
{"signature": "for (removedFqName in removedFqNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parentsFqNames.addAll(cache.supertypesMap[removedFqName].orEmpty())<EOL><INDENT><INDENT><INDENT><INDENT>childrenFqNames.addAll(cache.subtypesMap[removedFqName].orEmpty())<EOL><EOL><INDENT><INDENT><INDENT><INDENT>cache.supertypesMap.remove(removedFqName)<EOL><INDENT><INDENT><INDENT><INDENT>cache.subtypesMap.remove(removedFqName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (name in configuration.strictEnums) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val sameObj =", "body": "obj.sameObject() // Same object, different wrapper"}
{"signature": "when (this.getParentOfType<KtDeclaration>(strict = true)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>null -> KtSymbolKind.TOP_LEVEL<EOL><INDENT><INDENT><INDENT><INDENT>is KtCallableDeclaration, is KtPropertyAccessor -> KtSymbolKind.LOCAL<EOL><INDENT><INDENT><INDENT><INDENT>else -> KtSymbolKind.CLASS_MEMBER<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testKeyIsOverridden() {", "body": "<INDENT><INDENT>val derivedElementWithPolyKey = DerivedElementWithPolyKey()<INDENT><INDENT>testKeyIsOverridden(derivedElementWithPolyKey, derivedElementWithPolyKey)<INDENT><INDENT>testKeyIsOverridden(IrrelevantElement + derivedElementWithPolyKey, derivedElementWithPolyKey) // test for CombinedContext<INDENT>}"}
{"signature": "val expectDefaultValue =", "body": "expectParam.defaultValue?.expression ?: continue<EOL>"}
{"signature": "val candidateKCallableType =", "body": "DoubleColonExpressionResolver.createKCallableTypeForReference(<EOL>"}
{"signature": "val entryBySerialName =", "body": "mutableMapOf<String, ClassDescriptor?>()<EOL>"}
{"signature": "val backup =", "body": "System.getProperty(property)<EOL>"}
{"signature": "fun visitCheckedSafeCallSubject(checkedSafeCallSubject: FirCheckedSafeCallSubject, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicExpressionCheckers.check(checkedSafeCallSubject, data)<EOL><INDENT>}"}
{"signature": "val descriptorFakeOverrides =", "body": "classDescriptor.unsubstitutedMemberScope<EOL>"}
{"signature": "val infoWriter =", "body": "makeWriter(if (isInfoAsWarnings) WARNING else INFO)<EOL>"}
{"signature": "val DOMAIN_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val classesWithMaxAllowedFields =", "body": "linkedMapOf(<EOL>"}
{"signature": "if (klass.owner.packageFqName == FqName(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return klass.owner.name.identifier<EOL><INDENT><INDENT>}"}
{"signature": "else if (!predicate(item)) {", "body": "<EOL><INDENT><INDENT><INDENT>list.add(item)<EOL><INDENT><INDENT><INDENT>yielding = true<EOL><INDENT><INDENT>}"}
{"signature": "val mergedWith =", "body": "HashSet<BoxedValueDescriptor>()<EOL>"}
{"signature": "if (property.isVal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fakeElementImport =", "body": "ArbitraryImportable(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (path != outputDir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classpath += path<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is FirFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>checkWasmInteropSignature(declaration, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "val currentTime =", "body": "Date()<EOL>"}
{"signature": "else if (line.contains(JVM_IR_TEMPLATES)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentBackend = TargetBackend.JVM_IR<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (original != current) {", "body": "<EOL><INDENT><INDENT>current = current.original<EOL><INDENT>}"}
{"signature": "val useCache =", "body": "!project.hasProperty(<STR_LIT>)<EOL>"}
{"signature": "val reportLevel =", "body": "ReportLevel.findByDescription(jspecifyState)<EOL>"}
{"signature": "fun suite(name: String, code: String, f: CaseBuilder.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val builder = CaseBuilder()<EOL><INDENT><INDENT>builder.f()<EOL><EOL><INDENT><INDENT>suites.add(Suite(name, PREAMBLE + code, builder.cases))<EOL><INDENT>}"}
{"signature": "val tab =", "body": "<STR_LIT><EOL>"}
{"signature": "val forbidden =", "body": "mutableListOf<MutableList<Int>>()<EOL>"}
{"signature": "if (qualifiedName == null && renderedAttributesString.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun testNullsAsNullable(x: NX<String?>?, y: NY<Number?>?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (!xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] != ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] !== ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "val memberType =", "body": "memberParameterList.getParameter(memberParametersCount - <NUM_LIT>)?.type ?: return false<EOL>"}
{"signature": "val existingFir =", "body": "cache[psi]<EOL>"}
{"signature": "if (RESULT.compareAndSet(this, COROUTINE_SUSPENDED, RESUMED)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>delegate.resumeWith(result)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val iteratorDescriptor =", "body": "getFunctionByName(rangeOwner.unsubstitutedMemberScope, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "while (iq[jk - k] == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT> //--<INDENT><INDENT><INDENT><INDENT><INDENT>k++<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val actionsOnClose =", "body": "mutableListOf<() -> Unit>()<EOL>"}
{"signature": "if (lookAheadChar == '\\\\') {", "body": "<EOL><INDENT><INDENT><INDENT>return processEscapedChar()<EOL><INDENT><INDENT>}"}
{"signature": "if (was) {", "body": "<EOL><INDENT><INDENT>yield(<NUM_LIT>)<EOL><INDENT><INDENT>return@generate<EOL><INDENT>}"}
{"signature": "val markGray =", "body": "mutableSetOf<DefFile>()<EOL>"}
{"signature": "val outerThisIndex =", "body": "fields.indexOfFirst { it.irField?.origin == IrDeclarationOrigin.FIELD_FOR_OUTER_THIS }<EOL>"}
{"signature": "val EmptyDeprecationsPerUseSite =", "body": "DeprecationsPerUseSite(null, null)<EOL>"}
{"signature": "val bTree =", "body": "createCirTreeFromSourceCode(<STR_LIT>)<EOL>"}
{"signature": "val atomicArrayField =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>requireNotNull(atomicProperty.backingField) { <STR_LIT> + CONSTRAINTS_MESSAGE }<EOL>"}
{"signature": "if (x is (@Foo () -> Unit)?) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun testSimple() {", "body": "<EOL><INDENT><INDENT>a = <STR_LIT><EOL><EOL><INDENT><INDENT>var <!ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE!>i<!> = <NUM_LIT>;<EOL><INDENT><INDENT><!UNUSED_VALUE!>i =<!> <NUM_LIT>;<EOL><INDENT><INDENT><!UNUSED_VALUE!>i =<!> <NUM_LIT>;<EOL><INDENT>}"}
{"signature": "var xInt =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in (MaxUB - <NUM_LIT>u).toUByte()..MaxUB step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>.add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>.size > <NUM_LIT>3) break<EOL><INDENT>}"}
{"signature": "while (semaphore.value != <NUM_LIT>) {", "body": "}"}
{"signature": "val inlineMethodGenerationLock =", "body": "Any()<EOL>"}
{"signature": "val isolationMode =", "body": "getWorkerIsolationMode()<EOL>"}
{"signature": "fun charCategorySpaceSeparator() {", "body": "<INDENT><INDENT>val superscriptTwo = ' ' // \\u<NUM_LIT><INDENT><INDENT>assertTrue(superscriptTwo.isWhitespace())<INDENT><INDENT>assertEquals(CharCategory.SPACE_SEPARATOR, superscriptTwo.category)<INDENT><INDENT>assertEquals(<STR_LIT>, CharCategory.SPACE_SEPARATOR.code)<INDENT>}"}
{"signature": "val realFiles =", "body": "module.files.filterNot { it.isAdditional }<EOL>"}
{"signature": "val INC =", "body": "OperatorNameConventions.INC<EOL>"}
{"signature": "val ignoreDirective =", "body": "testServices.tryRetrieveIgnoredInliner(directive)<EOL>"}
{"signature": "val number =", "body": "Random.nextULong()<EOL>"}
{"signature": "if (calleeArguments.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getReplacementForAndPredicate(argument, calleeArguments[<NUM_LIT>], calleeArguments[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(t: T) {", "body": "<INDENT>t.<!UNSAFE_IMPLICIT_INVOKE_CALL!>f<!>(<NUM_LIT>) //unsafe call error<INDENT>t.f?.invoke(<NUM_LIT>)}"}
{"signature": "val invokeDescriptor =", "body": "type.memberScope.getContributedFunctions(OperatorNameConventions.INVOKE, location).single()<EOL>"}
{"signature": "while (reference is KtDotQualifiedExpression) {", "body": "<EOL><INDENT><INDENT>reference = reference.selectorExpression<EOL><INDENT>}"}
{"signature": "val rttiInformation =", "body": "RttiExpressionInformation(<EOL>"}
{"signature": "val KAPT_SUBPLUGIN_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "fun build(builder: MyBuilder) {", "body": "<EOL>}"}
{"signature": "val isDynamicFramework =", "body": "project.provider { binary is Framework && !binary.isStatic }<EOL>"}
{"signature": "else if (originSource.extension == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classNamesToReprocess.add(isolatingOrigin)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun removeAndSave(dependency: String) {", "body": "<EOL><INDENT><INDENT><INDENT>remove(dependency)<EOL><INDENT><INDENT><INDENT>save()<EOL><INDENT><INDENT>}"}
{"signature": "val private_in_class_b =", "body": "TestPrivate().b<EOL>"}
{"signature": "val startingIndex =", "body": "it.lastIndexOf(pluginApplyString)<EOL>"}
{"signature": "val fps =", "body": "<NUM_LIT><EOL>"}
{"signature": "val thereIsNotInv =", "body": "arguments.any { it.getVariance() != TypeVariance.INV }<EOL>"}
{"signature": "val deprecatedSinceKotlinHiddenSince =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (markedAsIdentical()) {", "body": "<EOL><INDENT><INDENT><INDENT>simpleChecker.deleteFirFile(testDataFile)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun bar(value: Value<String?>?) {", "body": "<EOL><INDENT><INDENT>res = value?.value<EOL><INDENT>}"}
{"signature": "val CONCURRENT_HASH_MAP_CALLABLE_ID =", "body": "CallableId(<EOL>"}
{"signature": "fun testPropertyInInterfaceImpl() {", "body": "<EOL><INDENT><INDENT>propVal<NUM_LIT><EOL><INDENT><INDENT>propVar<NUM_LIT><EOL><INDENT><INDENT>propVar<NUM_LIT> = <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun foo(x: Outer<*>.Inner<*, *>.Inner<NUM_LIT>Base) {", "body": "<EOL><INDENT><INDENT>if (x is Inner.Inner<NUM_LIT>) return<EOL><INDENT>}"}
{"signature": "if (!isThereConstantEntriesButNulls(expression)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val jsDispatchReceiver =", "body": "expression.dispatchReceiver?.accept(transformer, context)<EOL>"}
{"signature": "val prev<NUM_LIT> =", "body": "prev.previousMeaningful() ?: continue<EOL>"}
{"signature": "else if (!isInterface(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.JVM_DEFAULT_WITH_COMPATIBILITY_NOT_ON_INTERFACE.on(reportOn))<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (boo()) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> baz()<EOL><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun deleteDirectory() {", "body": "<INDENT><INDENT>val dir = createTestFiles()<INDENT><INDENT>assertTrue(dir.exists())<INDENT><INDENT>dir.deleteRecursively()<INDENT><INDENT>assertFalse(dir.exists())<INDENT><INDENT>dir.deleteRecursively() // successfully deletes recursively a non-existent directory<INDENT>}"}
{"signature": "val annotationNoCompatibility =", "body": "declaration.getAnnotationByClassId(JVM_DEFAULT_NO_COMPATIBILITY_CLASS_ID, session)<EOL>"}
{"signature": "val kType =", "body": "createKType(tp.type)<EOL>"}
{"signature": "fun set(index: Int, value: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>data[index] = value<EOL><INDENT><INDENT>}"}
{"signature": "if (entity == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>imports[packageName] = STAR<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var multiNodeStart =", "body": "<NUM_LIT><EOL>"}
{"signature": "val elementClass =", "body": "(classifier as? KClass<*>) ?: return null<EOL>"}
{"signature": "val enumTypeWithoutAnnotation =", "body": "elementFactory.createType(enumClass)<EOL>"}
{"signature": "if (this.isVariadic) {", "body": "<EOL><INDENT><INDENT>result += FunctionParameterStub(<EOL><INDENT><INDENT><INDENT><INDENT>names.last(),<EOL><INDENT><INDENT><INDENT><INDENT>KotlinTypes.any.makeNullable().toStubIrType(),<EOL><INDENT><INDENT><INDENT><INDENT>isVararg = true,<EOL><INDENT><INDENT><INDENT><INDENT>annotations = emptyList()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val jsExportPsi =", "body": "jsExport.source.getPsi() ?: declaration<EOL>"}
{"signature": "fun adaptJavaLangComparableCompareToForLong(node: MethodNode, insn: AbstractInsnNode) {", "body": "<EOL><INDENT><INDENT>node.instructions.set(insn, InsnNode(Opcodes.LCMP))<EOL><INDENT>}"}
{"signature": "fun processNormalNumber() {", "body": "<EOL><INDENT><INDENT>val desiredWidth = MANTISSA_WIDTH + <NUM_LIT><EOL><INDENT><INDENT>fitMantissaInDesiredWidth(desiredWidth)<EOL><INDENT><INDENT>round()<EOL><INDENT><INDENT>mantissa = mantissa and MANTISSA_MASK<EOL><INDENT>}"}
{"signature": "if (parcelType.isBoolean()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irIfThenElse(context.irBuiltIns.intType, value, irInt(<NUM_LIT>), irInt(<NUM_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val irAnnotations =", "body": "ArrayList<IrConstructorCall>()<EOL>"}
{"signature": "val bootstrapMethodArgs =", "body": "expression.getValueArgument(<NUM_LIT>) as? IrVararg<EOL>"}
{"signature": "fun visitConst(expression: IrConst<*>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitConst(expression)<EOL><INDENT>}"}
{"signature": "var a<NUM_LIT> =", "body": "this.lib.ClassA.createFromInt(<NUM_LIT>);<EOL>"}
{"signature": "if (value is IloadedValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>coerce(value, Type.SHORT_TYPE)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val enumPrimitiveType =", "body": "enumType.getCEnumPrimitiveType()<EOL>"}
{"signature": "val pomLines =", "body": "projectPath.resolve(<STR_LIT>).readLines()<EOL>"}
{"signature": "var variableValue =", "body": "this[<STR_LIT>][<STR_LIT>]<EOL>"}
{"signature": "val test =", "body": "Holder(Holder(<NUM_LIT>))<EOL>"}
{"signature": "if (sessionFlagRead != null && sessionFlagRead.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return sessionFlagRead.sessionFileFlagExists(log)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isBrowser()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  |   konan.moduleEntry([]);<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  |}"}
{"signature": "if (message in generateDifference) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateDiffForMessage(message, p)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (items.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val item = items.removeAt(items.size - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>P(item)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (fieldAnnotation != null && !descriptor.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>val annotationEntry = DescriptorToSourceUtils.getSourceFromAnnotation(fieldAnnotation) ?: return<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.VOLATILE_ON_VALUE.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val secondRun =", "body": "context.defineTemporary(JsBooleanLiteral(false).source(expression))<EOL>"}
{"signature": "for (i in uintProgression step one()) {", "body": "<EOL><INDENT>}"}
{"signature": "val moduleExistsCond =", "body": "JsAstUtils.typeOfIs(moduleRef, JsStringLiteral(<STR_LIT>))<EOL>"}
{"signature": "if (i == <NUM_LIT>L) {", "body": "<EOL><INDENT><INDENT>log += <STR_LIT><EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "fun submit(action: Function<NUM_LIT><Int, Int>) {", "body": "<EOL><INDENT><!USAGE_IS_NOT_INLINABLE!>action<!>?.invoke(<NUM_LIT>0)<EOL><INDENT><!USAGE_IS_NOT_INLINABLE!>action<!>!!.invoke(<NUM_LIT>0)<EOL>}"}
{"signature": "if (nextLeaf.elementType == TokenType.ERROR_ELEMENT || nextLeaf.treePrev?.elementType == TokenType.ERROR_ELEMENT) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (newDir.exists) {", "body": "<EOL><INDENT><INDENT>if (newDir.isDirectory)<EOL><INDENT><INDENT><INDENT>newDir.deleteRecursively()<EOL><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT>newDir.delete()<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(a: A<X, Y>) {", "body": "<INDENT><INDENT>B(a)<INDENT><INDENT>val b: B<X, Y> = B(a)<INDENT><INDENT>// crash here<INDENT>}"}
{"signature": "if (property is FirSyntheticProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>transformSimpleFunction(property.getter.delegate, data)<EOL><INDENT><INDENT><INDENT><INDENT>return property<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val addFuncS =", "body": "serialDescImplClass.functionByName(CallingConventions.addElement)<EOL>"}
{"signature": "if (!isTransformingAnonymousObject) {", "body": "<INDENT><INDENT><INDENT>//don't remove assertion in transformed anonymous object<INDENT><INDENT><INDENT>removeClosureAssertions(transformedNode)<INDENT><INDENT>}"}
{"signature": "if (declaration is IrClass) {", "body": "<EOL><INDENT><INDENT><INDENT>context.localClassNames[declaration] = localClassName<EOL><INDENT><INDENT>}"}
{"signature": "val jsStaticLowering =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "for ((i, _) in a.withIndex()) {", "body": "<EOL><INDENT><INDENT>s += <STR_LIT><EOL><INDENT>}"}
{"signature": "val absValue =", "body": "if (isNegative) -this else this<EOL>"}
{"signature": "val jreVersion =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val noEnumEntries =", "body": "compileToLibrary(<EOL>"}
{"signature": "val gravity =", "body": "<NUM_LIT>f<EOL>"}
{"signature": "fun plusAssign(tk: String?) {", "body": "<EOL><INDENT><INDENT>str += tk<EOL><INDENT>}"}
{"signature": "val OBJECT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val propValue =", "body": "project.kotlinPropertiesProvider.jsKarmaBrowsers(compilation.target)<EOL>"}
{"signature": "val basePrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "val unboxedReturnType =", "body": "function.originalReturnTypeOfSuspendFunctionReturningUnboxedInlineClass()<EOL>"}
{"signature": "val CHAR_PREVIOUS_MATCH<INDENT>   =", "body": "<NUM_LIT>x8<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or 'G'.toInt()<EOL>"}
{"signature": "val candidateFunctionName =", "body": "candidateFunctionSymbol?.name<EOL>"}
{"signature": "if (declaration.defaultValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val backupJvmOptions =", "body": "System.getProperty(CompilerSystemProperties.COMPILE_DAEMON_JVM_OPTIONS_PROPERTY.property)<EOL>"}
{"signature": "val jsObject =", "body": "<STR_LIT>, <STR_LIT>${it.name.identifier}:${it.name.identifier}<STR_LIT><EOL>"}
{"signature": "val newValues =", "body": "get(this)?.let { it + values } ?: values.toMap()<EOL>"}
{"signature": "while (visitedNodes.size != graph.size) {", "body": "<EOL><INDENT><INDENT><INDENT>val closest = getClosest(previousNode)!!<EOL><INDENT><INDENT><INDENT>visitedNodes.add(closest.node)<EOL><INDENT><INDENT><INDENT>cost += closest.distance<EOL><INDENT><INDENT><INDENT>previousNode = closest.node<EOL><INDENT><INDENT>}"}
{"signature": "for (root in environment.configuration.getList(CLIConfigurationKeys.CONTENT_ROOTS)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LOG.info(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (enumInitializerName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>instanceFun.body.statements += JsInvocation(pureFqn(enumInitializerName, null)).withDefaultLocation().makeStmt()<EOL><INDENT><INDENT>}"}
{"signature": "var nextCtr =", "body": "<NUM_LIT><EOL>"}
{"signature": "val replacedFunctionCall =", "body": "<EOL><INDENT><INDENT><INDENT>functionCall.replaceSuspensionFunctionWithRealDescriptor(project, bindingContext)<EOL>"}
{"signature": "val subArray =", "body": "bytes.copyOfRange(startIndex, endIndex)<EOL>"}
{"signature": "val typesByDslScopes =", "body": "mutableMapOf<FqName, MutableList<ReceiverParameterDescriptor>>()<EOL>"}
{"signature": "fun bar(bindingContext: BindingContext) {", "body": "<EOL><INDENT>bindingContext[Slices.X, bindingContext[Slices.Y, <NUM_LIT>]]<EOL>}"}
{"signature": "val callbackBuilder =", "body": "CCallbackBuilder(stubs, location, isObjCMethod = false)<EOL>"}
{"signature": "val interfaceBound =", "body": "Kotlin::class.java.methods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val currentContext =", "body": "LLVMContextGetDiagnosticContext(llvmContext)<EOL>"}
{"signature": "val superClassId =", "body": "ClassId.topLevel(superClassFqName)<EOL>"}
{"signature": "val K =", "body": "<STR_LIT><EOL>"}
{"signature": "val discoveryMarkers =", "body": "File(dep, SCRIPT_DEFINITION_MARKERS_PATH).listFiles()<EOL>"}
{"signature": "fun Row(content: @Composable () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>Layout(content)<EOL><INDENT><INDENT>}"}
{"signature": "val argumentsEntrySet =", "body": "resolvedCall.valueArguments.entries<EOL>"}
{"signature": "val optionsAwareCacheName =", "body": "<STR_LIT>-g<STR_LIT><STR_LIT><EOL>"}
{"signature": "val ATOMIC_ARRAY_TYPES =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun test<NUM_LIT>(efn: String.() -> String) {", "body": "<EOL><INDENT>H.bar(efn)<EOL>}"}
{"signature": "for (annotationEntry in it.annotationEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>annotations += annotationEntry.convert<FirAnnotation>()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val invocableFunctionClass =", "body": "<EOL><INDENT><INDENT><INDENT>if (superMethod.isSuspend)<EOL>"}
{"signature": "if (info.isImplicitInvoke) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>invokeResolveTowerExtension.enqueueResolveTasksForImplicitInvokeCall(info, receiver)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val elementProperty =", "body": "refClass.owner.declarations.filterIsInstance<IrProperty>().single()<EOL>"}
{"signature": "val excluded =", "body": "exclude.get().takeIf(List<*>::isNotEmpty)<EOL>"}
{"signature": "if (top?.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>top.getCapturedVarOrNull()?.hazard = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>frame.peek(<NUM_LIT>)?.getCapturedVarOrNull()?.hazard = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun recordInfoAboutTypeVariableUsagesAsInvariantOrContravariantParameter() {", "body": "<EOL><INDENT><INDENT>isContainedInInvariantOrContravariantPositions = true<EOL><INDENT>}"}
{"signature": "val suspendArity =", "body": "obj?.constructor.unsafeCast<Ctor?>()?.`$metadata$`?.suspendArity ?: return false<EOL>"}
{"signature": "val builtProductsDir =", "body": "XcodeEnvironment.builtProductsDir<EOL>"}
{"signature": "val curMem =", "body": "memoryMXBean.getHeapMemoryUsage().getUsed()<EOL>"}
{"signature": "var currentLoopIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val K<NUM_LIT> =", "body": "B.FOO<EOL>"}
{"signature": "fun visitClass(declaration: IrClass, data: VisitorState) {", "body": "<INDENT><INDENT><INDENT>// Ignore local classes.<INDENT><INDENT>}"}
{"signature": "fun baz(x: Int) {", "body": "<EOL><INDENT><INDENT>return super.baz<!NO_VALUE_FOR_PARAMETER!>()<!><EOL><INDENT>}"}
{"signature": "val ignoreTracker =", "body": "GitIgnoreTracker()<EOL>"}
{"signature": "val localCommonFile =", "body": "File(localCommonFilePath).takeIf { it.exists() } ?: return globalCommonFiles<EOL>"}
{"signature": "val FATAL_REPLACEMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "val HMPP_MODULE_STRUCTURE =", "body": "CompilerConfigurationKey.create<HmppCliModuleStructure>(<STR_LIT>)<EOL>"}
{"signature": "val objPropDecoded =", "body": "Json.decodeFromString<DelegatedByObjectProperty>(objPropJsonStr)<EOL>"}
{"signature": "fun clearGroup() {", "body": "<EOL><INDENT>  _builder.clearGroup()<EOL><INDENT>}"}
{"signature": "val bc =", "body": "b % c<EOL>"}
{"signature": "var lastGroupIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "var publishedProp =", "body": "<STR_LIT><EOL>"}
{"signature": "val element<NUM_LIT> =", "body": "<NUM_LIT>uL<EOL>"}
{"signature": "val inlinedUInts =", "body": "inlinedUInt(<NUM_LIT>u, <NUM_LIT>u)<EOL>"}
{"signature": "if (hasFloatValue()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + floatValue.hashCode()<EOL><INDENT>}"}
{"signature": "var jarPath =", "body": "url.substring(<NUM_LIT>, pivot)<EOL>"}
{"signature": "val resolvedVariantRequest =", "body": "ResolvedVariantRequest(<STR_LIT>, <STR_LIT>, dependencyInsightModuleName)<EOL>"}
{"signature": "if (arguments.arguments.size < functionSymbol.valueParameterSymbols.size) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>expression.calleeReference.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirErrors.SUPER_CALL_WITH_DEFAULT_PARAMETERS,<EOL><INDENT><INDENT><INDENT><INDENT>functionSymbol.name.asString(),<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (applicability == null || symbolApplicability > applicability!!) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>applicability = symbolApplicability<EOL><INDENT><INDENT><INDENT><INDENT>candidates.clear()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testInline<NUM_LIT>() {", "body": "<EOL><INDENT>val a : (cnames.structs.FwdStruct) -> Unit = ::inlineF<EOL><INDENT>val b : (objcnames.classes.FwdObjcClass) -> Unit = ::inlineF<EOL><INDENT>val c : (objcnames.protocols.FwdProtocol) -> Unit = ::inlineF<EOL>}"}
{"signature": "val byDirectPropertyJsonStr =", "body": "Json.encodeToString(byDirectPropertyExp)<EOL>"}
{"signature": "val sectionsMapFile =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "if (byteBufferLength >= length) {", "body": "<EOL><INDENT><INDENT><INDENT>copyByteBufferInto(destination, offset, length)<EOL><INDENT><INDENT><INDENT>return length<EOL><INDENT><INDENT>}"}
{"signature": "else if (!classesOnly && kindFilter.accepts(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.add(descriptor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val supertypeResolverVisitor =", "body": "FirSupertypeResolverVisitor(<EOL>"}
{"signature": "val test_cnc =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>c === nc<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nc === c<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>c !== nc<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nc !== c<!><EOL>"}
{"signature": "val ret =", "body": "wasiRawClockTimeGet(<EOL>"}
{"signature": "val testFrameworks =", "body": "listOf(<EOL>"}
{"signature": "for (envVarIndex in scriptDescriptor.scriptProvidedProperties.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>classBuilder.newField(<EOL><INDENT><INDENT><INDENT><INDENT>NO_ORIGIN,<EOL><INDENT><INDENT><INDENT><INDENT>ACC_PUBLIC or ACC_FINAL,<EOL><INDENT><INDENT><INDENT><INDENT>scriptContext.getProvidedPropertyName(envVarIndex),<EOL><INDENT><INDENT><INDENT><INDENT>scriptContext.getProvidedPropertyType(envVarIndex).descriptor,<EOL><INDENT><INDENT><INDENT><INDENT>null,<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val serializationPlugin =", "body": "paths.jar(KotlinPaths.Jar.SerializationPlugin)<EOL>"}
{"signature": "if (!superType.isAny && superTypes.add(superType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(superType.toSymbol(session) as? FirClassSymbol<*>)?.let(::collect)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!(p!! < z!!)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val firPluginAnnotationsPath =", "body": "System.getProperty(<STR_LIT>) ?: return null<EOL>"}
{"signature": "fun addNode(symbol: DataFlowIR.FunctionSymbol.Declared) {", "body": "<EOL><INDENT><INDENT>directEdges[symbol] = CallGraphNode(callGraph, symbol)<EOL><INDENT><INDENT>reversedEdges[symbol] = mutableListOf()<EOL><INDENT>}"}
{"signature": "if (wrappingException == null || trace.size < wrappingTrace!!.size) {", "body": "<EOL><INDENT><INDENT>error.printStackTrace(stream)<EOL><INDENT>}"}
{"signature": "val buildStep =", "body": "BuildStep()<EOL>"}
{"signature": "for (dirtyType in currentDirtyTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>allDirtyTypes.add(dirtyType)<EOL><INDENT><INDENT><INDENT><INDENT>findImpactedTypes(dirtyType, nextRound, allDirtyTypes)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val podDeclaration =", "body": "<STR_LIT><STR_LIT>Base<NUM_LIT><STR_LIT><NUM_LIT>.<NUM_LIT>\")<STR_LIT>\"<EOL>"}
{"signature": "val toolsJarPath =", "body": "CompilerRunnerUtil.jdkToolsJar<EOL>"}
{"signature": "val functionsRequiringThreadLocalInitializerCall =", "body": "collectFunctionsRequiringInitializerCall(<EOL>"}
{"signature": "val metadata<NUM_LIT> =", "body": "metadata<NUM_LIT>Bytes.toKmModule()<EOL>"}
{"signature": "val futureSet =", "body": "futures.toSet()<EOL>"}
{"signature": "fun visitWrappedExpression(wrappedExpression: FirWrappedExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicExpressionCheckers.check(wrappedExpression, data)<EOL><INDENT>}"}
{"signature": "val newShift =", "body": "maxOf(shift - <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "if (enumEntryId !in regularClassIds) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>groupedByParentClassId.getValue(enumEntry.enumClassId) += enumEntry<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (it != MemoryModel.EXPERIMENTAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.report(CompilerMessageSeverity.ERROR, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (getter.name.asString() == GETTER) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(getter.type as IrSimpleType).arguments.first().typeOrNull<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (currentVersion < minimalVersion) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val platformModuleData =", "body": "FirModuleDataImpl(<EOL>"}
{"signature": "val oldPackageDirective =", "body": "file.packageDirective<EOL>"}
{"signature": "val MIN =", "body": "Int.MIN_VALUE<EOL>"}
{"signature": "if (currentActual == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>missingDiagnostics(callbacks, currentExpected)<EOL><INDENT><INDENT><INDENT><INDENT>currentExpected = safeAdvance(expectedDiagnostics)<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (dataPathRoot != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.println(<STR_LIT><STR_LIT>\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val _modulesByTargets =", "body": "LinkedHashMap<CommonizerTarget, ModuleResults>() // use linked hash map to preserve order"}
{"signature": "val generatedSources =", "body": "settings.get<GeneratedSources>()<EOL>"}
{"signature": "val colorPrimary =", "body": "resources.getColor(R.color.app_primary_<NUM_LIT>)<EOL>"}
{"signature": "import this symbol.", "body": "<EOL>"}
{"signature": "fun shortVararg(vararg xs: Short) {", "body": "}<EOL>fun intVararg(vararg xs: Int) {}"}
{"signature": "fun setSrcRef(ref: Reference) {", "body": "<EOL><INDENT><INDENT>createSrc().refid = ref<EOL><INDENT>}"}
{"signature": "val shr =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.shr(<NUM_LIT>)<!><EOL>"}
{"signature": "if (evalResult is ReplEvalResult.ValueResult) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>writer.outputCommandResult(tryInterpretResultAsValueClass(evalResult) ?: evalResult.toString())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val newThisVariable =", "body": "constructorReplacement.generateThisVariable(irClass, newThisValue)<EOL>"}
{"signature": "val WARN =", "body": "<STR_LIT><EOL>"}
{"signature": "val variablesMapping =", "body": "spilledToLocalMapping.flatten()<EOL>"}
{"signature": "fun check(a: T?, b: T) {", "body": "<EOL><INDENT>}"}
{"signature": "fun field(name: String) {", "body": "<EOL><INDENT><INDENT>string += <STR_LIT><EOL><INDENT>}"}
{"signature": "if (parent is KtCallExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (checkCall(context, parent, child, insideLambda, reportOn, resolvedCall)) break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import outer.", "body": "<!INVISIBLE_REFERENCE!>a<!><EOL>"}
{"signature": "fun addUnsignedPossibleTypes() {", "body": "<EOL><INDENT><INDENT><INDENT>checkBoundsAndAddPossibleType(value, module.uIntType)<EOL><INDENT><INDENT><INDENT>possibleTypes.add(module.uLongType)<EOL><INDENT><INDENT><INDENT>checkBoundsAndAddPossibleType(value, module.uByteType)<EOL><INDENT><INDENT><INDENT>checkBoundsAndAddPossibleType(value, module.uShortType)<EOL><INDENT><INDENT>}"}
{"signature": "var adapterParameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (type is CapturedType) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.badDescription(<STR_LIT>, typeReference)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (<!SENSELESS_COMPARISON!>platformNN !== null<!>) {", "body": "}"}
{"signature": "val OR =", "body": "OperatorNameConventions.OR<EOL>"}
{"signature": "val rootModuleSources =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "val generationStates =", "body": "fragmentsList.map { fragment -> createGenerationStateAndRunLowerings(fragment) }<EOL>"}
{"signature": "fun x(p: X) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias B = Long<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias X = B<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x(p: X) {}"}
{"signature": "val commonizerTaskProvider =", "body": "commonizeNativeDistributionTask ?: return project.files()<EOL>"}
{"signature": "val processedValue =", "body": "processValue(value, type)<EOL>"}
{"signature": "fun entryPoint(point: String?) {", "body": "<EOL><INDENT><INDENT>entryPoint = point<EOL><INDENT>}"}
{"signature": "val test<NUM_LIT>d =", "body": "Outer().Inner()<EOL>"}
{"signature": "val serialDescField =", "body": "<STR_LIT><EOL>"}
{"signature": "val explicitlyDeclaredFunctions =", "body": "declaredScope?.collectAllFunctions()?.associateBy { it.name }.orEmpty()<EOL>"}
{"signature": "val interopObjCRelease =", "body": "interopFunction(<STR_LIT>)<EOL>"}
{"signature": "import libPackageCase<NUM_LIT>Explicit.", "body": "listOf<EOL>"}
{"signature": "fun testPrimitiveArrayAsVararg() {", "body": "usePrimitiveArray(::sum) }"}
{"signature": "if (range.start > range.endInclusive) {", "body": "// Empty range.<INDENT><INDENT><INDENT>return<INDENT><INDENT>}"}
{"signature": "fun testCustomSerializerAndMetaAnnotation() {", "body": "<EOL><INDENT>val string = Json.encodeToString(Project<NUM_LIT>serializer(), Project<NUM_LIT>(<STR_LIT>, <STR_LIT>))<EOL><INDENT>assertEquals(<STR_LIT>\"name:lang<STR_LIT>\", string)<EOL><EOL><INDENT>val reconstructed = Json.decodeFromString(Project<NUM_LIT>serializer(), string)<EOL><INDENT>assertEquals(<STR_LIT>, reconstructed.name)<EOL><INDENT>assertEquals(<STR_LIT>, reconstructed.language)<EOL>}"}
{"signature": "if (<NUM_LIT>.n..<n..n) {", "body": "}"}
{"signature": "if (aOwner is CallableMemberDescriptor || bOwner is CallableMemberDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>equivalentCallables(aOwner, bOwner)<EOL><INDENT><INDENT>}"}
{"signature": "val lastThenStmt =", "body": "flattenStatement(thenStmt).last()<EOL>"}
{"signature": "if (irConst.kind == IrConstKind.String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add((irConst.value as String).lowercase())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testMutableReversedSubList() {", "body": "<EOL><INDENT><INDENT>val reversed = (<NUM_LIT>.<NUM_LIT>).toMutableList().asReversed()<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), reversed.subList(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT>}"}
{"signature": "if (valueParameterNameDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return valueParameterNameDiff<EOL><INDENT><INDENT>}"}
{"signature": "fun testBamboo() {", "body": "<EOL><INDENT><INDENT>checkGraph(<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>A; B; C<EOL><INDENT><INDENT><INDENT>C > B; B > A<EOL><INDENT><INDENT><STR_LIT>\".trimIndent(),<EOL><INDENT><INDENT><INDENT>listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val ARGS_ATTR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val extensionReceiverTypeDescriptor =", "body": "it.constructor.declarationDescriptor as? TypeParameterDescriptor ?: return false<EOL>"}
{"signature": "val texture =", "body": "sdlDisposable(<STR_LIT>,<EOL>"}
{"signature": "val typeOrigin =", "body": "if (forSetter) ConversionTypeOrigin.SETTER else ConversionTypeOrigin.DEFAULT<EOL>"}
{"signature": "val INLINE_SCOPES_DUMP_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "if (initialSignatureAttr != null) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>print(FirRenderer.noAnnotationBodiesAccessorAndArguments().renderElementAsString(initialSignatureAttr).trim())<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (files.isEmpty() && !arguments.version) {", "body": "<EOL><INDENT><INDENT><INDENT>messageCollector.report(CompilerMessageSeverity.ERROR, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>return ExitCode.COMPILATION_ERROR<EOL><INDENT><INDENT>}"}
{"signature": "val settingsFile =", "body": "if (Files.exists(settingsGradle)) settingsGradle else settingsGradleKts<EOL>"}
{"signature": "if (fooJarDependency !is IdeaKotlinResolvedBinaryDependency) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "package koo.", "body": "bar<EOL>"}
{"signature": "val conditionBooleanValue =", "body": "loop.condition.booleanLiteralValue<EOL>"}
{"signature": "val analyzeResult =", "body": "analyze(e.original)<EOL>"}
{"signature": "if (other is Nested) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>other.a.length<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitCall(call: FirCall) {", "body": "<EOL><INDENT><INDENT>visitElement(call)<EOL><INDENT>}"}
{"signature": "val shl =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.shl(<NUM_LIT>)<!><EOL>"}
{"signature": "val passBuilder =", "body": "LLVMPassManagerBuilderCreate()!!<EOL>"}
{"signature": "val film<NUM_LIT> =", "body": "parcelableCreator<Film>().createFromParcel(parcel)<EOL>"}
{"signature": "val F<NUM_LIT>_GE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun get() {", "body": "<EOL><INDENT><NUM_LIT> + <NUM_LIT> <!SYNTAX!><NUM_LIT> <NUM_LIT> <NUM_LIT><!><EOL>}"}
{"signature": "val classIdSig =", "body": "getPublicSignature(classId.packageFqName, classId.relativeClassName.asString())<EOL>"}
{"signature": "val containingClassStub =", "body": "parentStub.parentStub as? KotlinClassifierStub<EOL>"}
{"signature": "val NESTED_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val expectedReturnTypeRef =", "body": "initialReturnTypeRef<EOL>"}
{"signature": "fun testDestinationDirectory() {", "body": "<EOL><INDENT><INDENT>val destinationDir = tmpDir.newFolder()<EOL><INDENT><INDENT>taskApi.destinationDirectory.fileValue(destinationDir)<EOL><INDENT><INDENT>assertEquals(destinationDir, taskImpl.destinationDirectory.get().asFile)<EOL><INDENT>}"}
{"signature": "val commonExpressions =", "body": "arrayListOf<KtExpression>()<EOL>"}
{"signature": "fun test(ls: List<String>) {", "body": "<EOL><INDENT>ls.takeIf(Collection<*>::isNotEmpty)<EOL>}"}
{"signature": "val dec =", "body": "context.irBuiltIns.intClass.getSimpleFunction(<STR_LIT>)!!<EOL>"}
{"signature": "var isPublic =", "body": "false<EOL>"}
{"signature": "if (p == x) {", "body": "<EOL><INDENT>  return x;<EOL><INDENT>}"}
{"signature": "val writeableTypeInfoGlobal =", "body": "generationState.llvmDeclarations.forClass(irClass).writableTypeInfoGlobal!!<EOL>"}
{"signature": "val expectByModuleInfos =", "body": "mutableListOf<ModuleInfo>()<EOL>"}
{"signature": "if (tryExpression.finallyBlock != null) {", "body": "<EOL><INDENT><INDENT><INDENT>addEdge(enterTryExpressionNode, finallyEnterNodes.top(), label = UncaughtExceptionPath)<EOL><INDENT><INDENT>}"}
{"signature": "val UNARY =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "var errorSegmentIndexFromLast =", "body": "if (import.isAllUnder) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val receiverDescriptor =", "body": "classDescriptor.thisAsReceiverParameter<EOL>"}
{"signature": "val OPEN_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "val stringTableBuilder =", "body": "JsAstProtoBuf.StringTable.newBuilder()<EOL>"}
{"signature": "if (separator < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun registerSignature(javacSignature: String, method: PsiMethod) {", "body": "<EOL><INDENT><INDENT>signatureInfo[javacSignature] = method.name + method.signature<EOL><INDENT>}"}
{"signature": "fun addChangedType(oldClassInternalName: String, newClassInternalName: String) {", "body": "<EOL><INDENT><INDENT>changedTypes.put(oldClassInternalName, newClassInternalName)<EOL><INDENT>}"}
{"signature": "fun test(a : Any) {", "body": "<EOL><INDENT>a.foo<NUM_LIT>()<!NO_VALUE_FOR_PARAMETER!>()<!><EOL>}"}
{"signature": "val postponedExpression =", "body": "if (expression is KtFunctionLiteral) expression.getParentOfType<KtLambdaExpression>(true) else expression<EOL>"}
{"signature": "val fakeFile =", "body": "IrFileImpl(<EOL>"}
{"signature": "fun useFunInterface(fn: KRunnable) {", "body": "<EOL><INDENT>fn.invoke()<EOL>}"}
{"signature": "val firstNode =", "body": "referencingNodes[i]<EOL>"}
{"signature": "val rev =", "body": "data.reversed()<EOL>"}
{"signature": "val typeKind =", "body": "entityKind as TypeKind<EOL>"}
{"signature": "fun setResolvedTarget(label: Label, resolvedTarget: Instruction) {", "body": "<EOL><INDENT><INDENT>_resolvedTargets[label] = outgoingEdgeTo(resolvedTarget)!!<EOL><INDENT>}"}
{"signature": "val unstableType =", "body": "expressionArgument.receiver.unstableType<EOL>"}
{"signature": "val testModuleDir =", "body": "File(testDir, module)<EOL>"}
{"signature": "val cleanedDiagnostic =", "body": "filterKgpUtilityPropertiesFromDiagnostic(currentDiagnostic)<EOL>"}
{"signature": "var startArgumentOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "val par<NUM_LIT> =", "body": "( @bar() (foo())) as String<EOL>"}
{"signature": "fun invokeTest(goodArgs: Array<String>) {", "body": "<EOL><INDENT>J.staticFun(*goodArgs)<EOL><INDENT>J.staticFun(<!SPREAD_OF_NULLABLE!>*<!>args)<EOL><INDENT>J.staticFun(<!SPREAD_OF_NULLABLE!>*<!>args <!USELESS_ELVIS_RIGHT_IS_NULL!>?: null<!>)<EOL>}"}
{"signature": "if (convertedArgumentType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.SIGNED_CONSTANT_CONVERTED_TO_UNSIGNED.on(deparenthesized))<EOL><INDENT><INDENT>}"}
{"signature": "val simpleBinaryCoordinates =", "body": "IdeaKotlinBinaryCoordinates(<EOL>"}
{"signature": "val invokes =", "body": "clazz.getDeclaredMethods().single() { !it.isBridge() }<EOL>"}
{"signature": "fun collectPackageFragments(fqName: FqName, packageFragments: MutableCollection<PackageFragmentDescriptor>) {", "body": "<EOL><INDENT><INDENT><INDENT>packageFragments.add(createDummyPackageFragment(fqName))<EOL><INDENT><INDENT>}"}
{"signature": "if (runtimeDelegate.isInitialized()) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMDisposeTargetData(runtime.targetData)<EOL><INDENT><INDENT><INDENT>LLVMDisposeModule(runtime.llvmModule)<EOL><INDENT><INDENT>}"}
{"signature": "val moduleOverPolymorphicName =", "body": "<STR_LIT><EOL>"}
{"signature": "var numberOfChars =", "body": "stringLength.toLong()<EOL>"}
{"signature": "val sourceDirsInBothSourceSets =", "body": "sourceSetA.java.srcDirs.intersect(sourceSetB.java.srcDirs)<EOL>"}
{"signature": "if (other != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw InvalidObjectException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (addPrefix != null) {", "body": "<EOL><INDENT><INDENT>assert(removePrefix)<EOL><INDENT><INDENT>return Name.identifier(addPrefix + identifier.removePrefix(prefix))<EOL><INDENT>}"}
{"signature": "val assignmentType =", "body": "assignment.lValue.resolvedType<EOL>"}
{"signature": "fun visitEnumEntry(enumEntry: FirEnumEntry, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allEnumEntryCheckers.check(enumEntry, data)<EOL><INDENT>}"}
{"signature": "fun test(x: X<Number>) {", "body": "<EOL><INDENT>val y = x.foo() as Int<EOL>}"}
{"signature": "if (syntheticProperty.noJavaOrigin) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>expression.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirJvmErrors.SYNTHETIC_PROPERTY_WITHOUT_JAVA_ORIGIN,<EOL><INDENT><INDENT><INDENT><INDENT>originalFunction, originalFunction.name,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun useAfooWithImplicitReceiver() {", "body": "<EOL><INDENT>getACompanion().foo()<EOL>}"}
{"signature": "if (cur != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (index == UNDEFINED_PARAMETER_INDEX) {", "body": "<EOL><INDENT><INDENT><INDENT>index = typeParameters.size<EOL><INDENT><INDENT>}"}
{"signature": "val kjsmFiles =", "body": "outputDir.walk().filter { it.isFile && it.extension.equals(<STR_LIT>, ignoreCase = true) }<EOL>"}
{"signature": "val allReportedInfos =", "body": "globalMetadataInfoHandler.getReportedMetaInfosForFile(file)<EOL>"}
{"signature": "fun testMissingDependencyJavaConflictingLibraries() {", "body": "<EOL><INDENT><INDENT>val library<NUM_LIT> = copyJarFileWithoutEntry(compileLibrary(<STR_LIT>), <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val library<NUM_LIT> = copyJarFileWithoutEntry(compileLibrary(<STR_LIT>), <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(library<NUM_LIT>, library<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "fun noGeneric() {", "body": "}<EOL><INDENT><EOL><INDENT>fun withOuterGeneric(t: T) {}"}
{"signature": "var containsWasmWasi =", "body": "false<EOL>"}
{"signature": "fun testJvmDefaultNonDefaultInheritanceSuperCall() {", "body": "<EOL><INDENT><INDENT>val library = compileLibrary(<STR_LIT>, additionalOptions = listOf(<STR_LIT>))<EOL><INDENT><INDENT>compileKotlin(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>tmpdir,<EOL><INDENT><INDENT><INDENT>listOf(library),<EOL><INDENT><INDENT><INDENT>additionalOptions = listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (superBridge.signature == superTarget.jvmMethod) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// If the resulting bridge to a super member matches the signature of the bridge callee,<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// bridge is not needed.<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irFunction<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val receiverExpression =", "body": "expressionReceiverValue.expression<EOL>"}
{"signature": "val namesPtr =", "body": "staticData.placeGlobalConstArray(<STR_LIT>, llvm.int<NUM_LIT>PtrType,<EOL>"}
{"signature": "if (lineCount == position.line && offsetInLine == position.offset) {", "body": "<EOL><INDENT><INDENT><INDENT>return i<EOL><INDENT><INDENT>}"}
{"signature": "when (symbol.classKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.ENUM_ENTRY -> KtFirEnumEntryInitializerSymbol(symbol, analysisSession)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> KtFirAnonymousObjectSymbol(symbol, analysisSession)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val DOUBLE_QUOTE =", "body": "'\"'<EOL>"}
{"signature": "if (calleeExpression !is KtSimpleNameExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (symbol.receiverParameter?.typeRef?.coneType?.contradictsWith(Variance.IN_VARIANCE, session) == true) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "fun testNull<NUM_LIT>() {", "body": "<EOL><INDENT>if (eqDI(null, <NUM_LIT>)) throw Exception()<EOL><INDENT>if (eqDL(null, <NUM_LIT>L)) throw Exception()<EOL><INDENT>if (eqID(null, <NUM_LIT>.<NUM_LIT>)) throw Exception()<EOL><INDENT>if (eqLD(null, <NUM_LIT>.<NUM_LIT>)) throw Exception()<EOL><INDENT>if (eqFI(null, <NUM_LIT>)) throw Exception()<EOL><INDENT>if (eqFL(null, <NUM_LIT>L)) throw Exception()<EOL><INDENT>if (eqIF(null, <NUM_LIT>.<NUM_LIT>F)) throw Exception()<EOL><INDENT>if (eqLF(null, <NUM_LIT>.<NUM_LIT>F)) throw Exception()<EOL>}"}
{"signature": "val visitorType =", "body": "this.visitorType<EOL>"}
{"signature": "val bytesPerLine =", "body": "bytesFormat.bytesPerLine<EOL>"}
{"signature": "for (param in capturedBuilder.listCaptured()) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.addCapturedParamCopy(param)<EOL><INDENT><INDENT>}"}
{"signature": "var _storedScripts =", "body": "<NUM_LIT><EOL>"}
{"signature": "val argumentMode =", "body": "mode.updateArgumentModeFromAnnotations(argument.getType(), this)<EOL>"}
{"signature": "for (output in classFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val bytes = output.outputFile.readBytes()<EOL><INDENT><INDENT><INDENT><INDENT>val binaryContent = BinaryContent(bytes)<EOL><INDENT><INDENT><INDENT><INDENT>val compiledClass = CompiledClass(output.outputFile, output.sourceFiles, ClassReader(bytes).className, binaryContent)<EOL><INDENT><INDENT><INDENT><INDENT>outputConsumer.registerCompiledClass(jpsModuleBuildTarget, compiledClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var size_ =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ROOT_NODE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun onTypeArgument(typeArgument: TypeArgument, diagnostic: KotlinCallDiagnostic) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (OptInDescription.DEFAULT_SEVERITY == OptInDescription.Severity.ERROR && useFutureError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>OptInDescription.Severity.FUTURE_ERROR<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (line.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>actual.add(line)<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "if (value is FromSuspensionPointValue && insn.opcode == Opcodes.CHECKCAST) {", "body": "<EOL><INDENT><INDENT><INDENT>return value<EOL><INDENT><INDENT>}"}
{"signature": "val functionNClass =", "body": "context.ir.symbols.getJvmFunctionClass(arity + <NUM_LIT>)<EOL>"}
{"signature": "val defaultResult =", "body": "super.naryOperation(insn, values)<EOL>"}
{"signature": "val foreignObjCObjectName =", "body": "<STR_LIT><EOL>"}
{"signature": "val opts =", "body": "configureDaemonOptions(DaemonOptions(shutdownDelayMilliseconds = <NUM_LIT>))<EOL>"}
{"signature": "val hm =", "body": "java.util.concurrent.ConcurrentHashMap<String, Int>()<EOL>"}
{"signature": "val propertyState =", "body": "KPropertyState(propertyReference, receiver)<EOL>"}
{"signature": "if (hasExtension(KlibMetadataProtoBuf.compileTimeValue)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.compileTimeValue).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val acyclicCache =", "body": "mutableMapOf<IrType, Boolean>()<EOL>"}
{"signature": "val inheritedOverrides =", "body": "bridge.overriddenSymbols<EOL>"}
{"signature": "val kotlinc =", "body": "Kotlin<NUM_LIT>JvmTask()<EOL>"}
{"signature": "val webpackLocalDelimiterIndex =", "body": "line.indexOf(WEBPACK_LOCAL_DELIMITER)<EOL>"}
{"signature": "while (p == null) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val CONTEXT_RECEIVER_PREFIX =", "body": "'!'<EOL>"}
{"signature": "if (referenceTarget is TypeParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>context.trace.report(Errors.TYPE_PARAMETER_ON_LHS_OF_DOT.on(qualifier.referenceExpression, referenceTarget))<EOL><INDENT>}"}
{"signature": "when (res) {", "body": "<EOL><INDENT><INDENT><INDENT>is ResultValue.Value -> assertEquals(expectedResult, res.value)<EOL><INDENT><INDENT><INDENT>is ResultValue.Error -> throw res.error<EOL><INDENT><INDENT><INDENT>else -> throw Exception(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val isTodo =", "body": "testMethod?.isAnnotationPresent(TodoAnalysisApi::class.java) ?: false && tag == <STR_LIT><EOL>"}
{"signature": "fun add(index: Int, element: Int) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException()<EOL><INDENT>}"}
{"signature": "val cinteropMetadataDirectoryPath =", "body": "ensureValidZipDirectoryPath(cinteropMetadataDirectory)<EOL>"}
{"signature": "val dependenciesToCompile =", "body": "findDependenciesToCompile()<EOL>"}
{"signature": "fun test(a_b: a.b) {", "body": "<EOL><INDENT>a_b.a_b()<EOL><EOL><INDENT>val a_b<NUM_LIT> = a.b()<EOL><INDENT>a_b<NUM_LIT>.a_b()<EOL>}"}
{"signature": "fun testSimpleFakeOverrideSameSignature() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a)<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT>}"}
{"signature": "fun addElement(builder: ProtoBuf.TypeTable.Builder, element: ProtoBuf.Type.Builder) {", "body": "<EOL><INDENT><INDENT>builder.addType(element)<EOL><INDENT>}"}
{"signature": "val objCMethodFqName =", "body": "NativeStandardInteropNames.objCMethodClassId.asSingleFqName()<EOL>"}
{"signature": "val localClassesNavigationInfo =", "body": "collectLocalClassesNavigationInfo()<EOL>"}
{"signature": "var concat =", "body": "<STR_LIT><EOL>"}
{"signature": "fun destinationDir(dir: Any) {", "body": "<EOL><INDENT><INDENT>destinationDir = project.file(dir)<EOL><INDENT>}"}
{"signature": "val loopConditionStartOffset =", "body": "loopCondition.startOffset<EOL>"}
{"signature": "val badJarFile =", "body": "File(tmpDir, <STR_LIT>)<EOL>"}
{"signature": "if (consentDetailsLink != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertContainsExactTimes(output, USER_CONSENT_DETAILS_LINK_TEMPLATE.formatWithLink(consentDetailsLink), <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val b_x_ULong =", "body": "BULong().x as Any as ULongArray<EOL>"}
{"signature": "val macrosWithErrorsInSnippetFunctionBody =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "if (failedAssertions.size == filteredAssertions.size && ignoreDiff) {", "body": "<EOL><INDENT><INDENT><INDENT>failedAssertions + AssertionError(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>).wrap()<EOL><INDENT><INDENT>}"}
{"signature": "val projectId =", "body": "ProjectId.ProjectUUID(UUID.randomUUID())<EOL>"}
{"signature": "for (i in (MinUL + <NUM_LIT>u) downTo MinUL step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>3) break<EOL><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(d: JavaOverride, s: String) {", "body": "<EOL><INDENT>d.foo = s<EOL>}"}
{"signature": "val single =", "body": "iterator.next()<EOL>"}
{"signature": "val declaredArguments =", "body": "mutableListOf<CLIEntityWrapper>()<EOL>"}
{"signature": "fun TestTailrecFunctionVsConstructor() {", "body": "}<EOL><EOL>class TestTailrecFunctionVsConstructorReverse {<EOL><INDENT>constructor()<EOL>}"}
{"signature": "fun visitImport(import: FirImport) {", "body": "<EOL><INDENT><INDENT>visitElement(import)<EOL><INDENT>}"}
{"signature": "val REFLECT_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "var metIncorrectMember =", "body": "false<EOL>"}
{"signature": "fun useKCallableStar(fn: KCallable<*>) {", "body": "}<EOL><EOL><EOL>fun testDefaultsOnlyStar() { useKCallableStar(::defaultsOnly) }"}
{"signature": "if (partiallyResolvedCall != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val receiver = ReceiverValueWithSmartCastInfo(oldReceiver, emptySet(), isStable = true)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return SubKotlinCallArgumentImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>CallMaker.makeExternalValueArgument(oldReceiver.expression),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.dataFlowInfo, context.dataFlowInfo, receiver, partiallyResolvedCall<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (getFirstOrLastReplacement != null) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (expression is KtNameReferenceExpression && expression.getReferencedNameElementType() == KtTokens.SUPER_KEYWORD) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Do not run checkers here because super expressions is not a proper expression. For example,<INDENT><INDENT><INDENT><INDENT>// it doesn't make sense to report deprecation on <STR_LIT> in <STR_LIT> if the super class is deprecated.<INDENT><INDENT><INDENT><INDENT>return<INDENT><INDENT><INDENT>}"}
{"signature": "val coroutineImplResultSymbolGetter =", "body": "coroutineSymbols.coroutineImplResultSymbolGetter<EOL>"}
{"signature": "if (n.toInt() < <NUM_LIT> || when (n) {", "body": "<EOL><INDENT><INDENT><INDENT>is Float -> false<EOL><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT>}"}
{"signature": "val MISCONFIGURATION_MESSAGE_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val ranges =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (specialProjectionSubstitution != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newArguments[index] = specialProjectionSubstitution<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (irClass.isClass) {", "body": "<EOL><INDENT><INDENT><INDENT>context.findDefaultConstructorFor(irClass)?.enqueue(irClass, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val propAsmType =", "body": "classCodegen.typeMapper.mapType(property.type)<EOL>"}
{"signature": "val maximallySpecificGenericsDiscriminated =", "body": "findMaximallySpecific(noOverrides, checkArgumentsMode, true)<EOL>"}
{"signature": "val annotationOwner =", "body": "annotationEntry.getStrictParentOfType<KtModifierListOwner>() ?: return<EOL>"}
{"signature": "fun validate(irModule: IrModuleFragment) {", "body": "<EOL><INDENT><INDENT>validationCallback(context, irModule, checkProperties = true)<EOL><INDENT>}"}
{"signature": "val boxedType =", "body": "handleSpecialBoxingCases(v) ?: return<EOL>"}
{"signature": "fun minMaxWith() {", "body": "<EOL><INDENT><INDENT>expectMinMaxWith(<NUM_LIT>U, <NUM_LIT>U, ushortArrayOf(<NUM_LIT>U), naturalOrder())<EOL><INDENT><INDENT>expectMinMaxWith(<NUM_LIT>U, <NUM_LIT>U, ushortArrayOf(<NUM_LIT>U, <NUM_LIT>U), naturalOrder())<EOL><INDENT><INDENT>expectMinMaxWith(<NUM_LIT>U, UShort.MAX_VALUE, ushortArrayOf(<NUM_LIT>U, <NUM_LIT>U, UShort.MAX_VALUE), naturalOrder())<EOL><EOL><INDENT>}"}
{"signature": "val newDrain =", "body": "newDrain().also { createdDrains += it }<EOL>"}
{"signature": "val adapteeDescriptor =", "body": "callBuilder.descriptor<EOL>"}
{"signature": "val controlCancel =", "body": "'\\u<NUM_LIT>'<EOL>"}
{"signature": "if (options[KaptFlag.VERBOSE]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>logger.info(options.logString())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val predecessors =", "body": "cfg.getAllPredecessors(ifNullLabel)<EOL>"}
{"signature": "val SERIALIZABLE_PREDICATE =", "body": "LookupPredicate.create { annotated(<STR_LIT>.fqn()) }<EOL>"}
{"signature": "val LiveLiteralInfo =", "body": "internalClassIdFor(<STR_LIT>)<EOL>"}
{"signature": "if (argType.contradictsWith(requiredVarianceForArgument, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (iq[jz] == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>jz--; q<NUM_LIT> -= <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun testConcreteDeclarationOverridesAbstractAndConcreteDeclarations() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(c to a, c to b)<EOL><INDENT><INDENT>doTest(c, setOf(bridge(a, c), bridge(b, c)))<EOL><INDENT>}"}
{"signature": "if (Files.isDirectory(newPath)) {", "body": "<EOL><INDENT><INDENT><INDENT>Files.createDirectories(newPath)<EOL><INDENT><INDENT>}"}
{"signature": "fun interpretBody(body: IrBody) {", "body": "<INDENT><INDENT>if (body.statements.isEmpty()) callStack.pushState(getUnitState()) // implicit Unit result<INDENT>}"}
{"signature": "for (field in irClass.fields) {", "body": "<EOL><INDENT><INDENT><INDENT>generateField(field)<EOL><INDENT><INDENT>}"}
{"signature": "fun testEvalWithError() {", "body": "<EOL><INDENT><INDENT>checkEvaluateInRepl(<EOL><INDENT><INDENT><INDENT>sequenceOf(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>abc\\<STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>),<EOL><INDENT><INDENT><INDENT>sequenceOf(RuntimeException(<STR_LIT>), null, <NUM_LIT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun setParam(a: A) {", "body": "<EOL><INDENT><INDENT>a.param = this.value<EOL><INDENT>}"}
{"signature": "val baseClassSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>session.dependenciesSymbolProvider.getClassLikeSymbolByClassId(ClassId(baseClassFqn.parent(), baseClassFqn.shortName()))<EOL>"}
{"signature": "val prevCacheDir =", "body": "System.getProperty(name)<EOL>"}
{"signature": "val platformTasks =", "body": "platformProject.tasks<EOL>"}
{"signature": "val dirtyClasses =", "body": "dirtyOutputClassesMap.getDirtyOutputClasses()<EOL>"}
{"signature": "fun fooInt(x: Int) {", "body": "}<EOL>fun foo<NUM_LIT>(vararg xs: Int) {}"}
{"signature": "fun visit(uniform: Uniform) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>out.add(uniform)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (expression.returnTargetSymbol == copiedCallee.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val expr = expression.value.doImplicitCastIfNeededTo(callSite.type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return irBuilder.at(expression).irReturn(expr)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (scope.isScopeForClass() && base.isScopeForClass()) {", "body": "<EOL><INDENT><INDENT><INDENT>val classContainingFrom = from.findClassOrObjectParent() ?: return@any false<EOL><INDENT><INDENT><INDENT>return@any scope.isScopeForClassCloserThanAnotherScopeForClass(base, classContainingFrom)<EOL><INDENT><INDENT>}"}
{"signature": "val xPointLam =", "body": "{ xPoint }<EOL>"}
{"signature": "if (isUpperInclusive) {", "body": "<EOL><INDENT><INDENT><INDENT>builtIns.lessOrEqualFunByOperandType<EOL><INDENT><INDENT>}"}
{"signature": "if (javaField.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>containingClassForStaticMemberAttr = classId.toLookupTag()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(t: T) {", "body": "<EOL><INDENT><INDENT>sb.appendLine(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun generateToStringMethod(function: FunctionDescriptor, properties: List<PropertyDescriptor>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addFunction(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firProperty =", "body": "candidates.findDeclarationWithSignatureBySymbols<FirProperty>(signature) ?: return null<EOL>"}
{"signature": "val SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in <NUM_LIT> until Int.MIN_VALUE)   {", "body": "sb.append(i); sb.append(' ') }"}
{"signature": "val isEnum =", "body": "isEnum<EOL>"}
{"signature": "if (asmType == Type.VOID_TYPE) {", "body": "<EOL><INDENT><INDENT><INDENT>v.pop()<EOL><INDENT><INDENT><INDENT>v.aconst(null)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (symbol.callableId != WebCommonStandardClassIds.Callables.JsDefinedExternally) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun getOrNull() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Optional.of(<STR_LIT>).getOrNull())<EOL><INDENT><INDENT>assertNull(Optional.empty<String>().getOrNull())<EOL><INDENT>}"}
{"signature": "when (this.receiver) {", "body": "<EOL><INDENT><INDENT>MethodBridgeReceiver.Static -> false<EOL><INDENT><INDENT>MethodBridgeReceiver.Factory, MethodBridgeReceiver.Instance -> true<EOL><INDENT>}"}
{"signature": "val cStructCompanionGenerator =", "body": "<EOL><INDENT><INDENT><INDENT>CStructVarCompanionGenerator(context, symbols)<EOL>"}
{"signature": "for (i: UInt? in uIntRange) {", "body": "<EOL><INDENT><INDENT>result = sum(result, i)<EOL><INDENT>}"}
{"signature": "val numNonDefaultParamters =", "body": "numValueParameters - numDefaultParameters<EOL>"}
{"signature": "val inputVar =", "body": "JsNameRef(jsFun.scope.declareFreshName(<STR_LIT>))<EOL>"}
{"signature": "val directlyOverriddenSymbols =", "body": "symbol.getDirectlyOverriddenSymbols().map { renderSignature(it) }<EOL>"}
{"signature": "val platformDirs =", "body": "moduleSourceDir.listFiles() ?: arrayOf()<EOL>"}
{"signature": "if (types.isEmpty()) {", "body": "<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "fun test_powDD() {", "body": "<INDENT><INDENT>// Test for method double java.lang.Math.pow(double, double)<INDENT><INDENT>assertTrue(<STR_LIT>,<INDENT><INDENT><INDENT><INDENT><NUM_LIT>.pow(<NUM_LIT>).toLong() == <NUM_LIT>L)<INDENT><INDENT>assertTrue(<STR_LIT>,<INDENT><INDENT><INDENT><INDENT><NUM_LIT>.pow(-<NUM_LIT>) == <NUM_LIT>)<INDENT><INDENT>assertEquals(<STR_LIT>,<INDENT><INDENT><INDENT><INDENT><NUM_LIT>, sqrt(sqrt(<NUM_LIT>).pow(<NUM_LIT>)), <NUM_LIT>)<INDENT>}"}
{"signature": "if (phase != null) {", "body": "<EOL><INDENT><INDENT><INDENT>session.lazyDeclarationResolver.finishResolvingPhase(phase)<EOL><INDENT><INDENT>}"}
{"signature": "val propertyDeclaration =", "body": "DescriptorToSourceUtils.descriptorToDeclaration(property) as KtProperty<EOL>"}
{"signature": "val conversion =", "body": "if (isConversionDeprecated) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val symbolMap =", "body": "mutableMapOf<IrSimpleFunctionSymbol, IrSimpleFunctionSymbol>()<EOL>"}
{"signature": "if (method.isInstanceMethod) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append('-')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val markerShift =", "body": "calcMarkerShift(parameters, node)<EOL>"}
{"signature": "val kStr =", "body": "k.toString()<EOL>"}
{"signature": "val isDisabled =", "body": "globalLevel == ReportLevel.IGNORE<EOL>"}
{"signature": "val hasFactory =", "body": "session.symbolProvider.getTopLevelCallableSymbols(<EOL>"}
{"signature": "val propertyTypeRefToUse =", "body": "propertyTypeRef.copyWithNewSourceKind(KtFakeSourceElementKind.ImplicitTypeRef)<EOL>"}
{"signature": "if (isAnonymousFunction || function.isLocal && function.parent !is KtBlockExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.createLambda(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val scriptContext =", "body": "parentContext.intoScript(<EOL>"}
{"signature": "val groupedByLinesSteppingTestLoggedData =", "body": "debuggerSteps<EOL>"}
{"signature": "fun assertArrayNotEquals(first: ByteArray, second: ByteArray) {", "body": "<EOL><INDENT><INDENT>Assert.assertFalse(Arrays.equals(first, second))<EOL><INDENT>}"}
{"signature": "val evalScriptWithResult =", "body": "evalScriptWithResult(<STR_LIT>)<EOL>"}
{"signature": "if (allowCompanionInInterface && descriptor.isCompanionObject && descriptor.isInsideInterface && descriptor.name != DEFAULT_NAME_FOR_COMPANION_OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJs.NAMED_COMPANION_IN_EXPORTED_INTERFACE.on(declaration))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun plusRanges() {", "body": "<EOL><INDENT><INDENT>val range<NUM_LIT> = <NUM_LIT>..<NUM_LIT><EOL><INDENT><INDENT>val range<NUM_LIT> = <NUM_LIT>.<NUM_LIT><EOL><INDENT><INDENT>val combined = range<NUM_LIT> + range<NUM_LIT><EOL><INDENT><INDENT>assertEquals((<NUM_LIT>..<NUM_LIT>).toList(), combined)<EOL><INDENT>}"}
{"signature": "if (provideDelegateResults.isSingleResult) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.record(DELEGATE_EXPRESSION_TO_PROVIDE_DELEGATE_CALL, delegateExpression, provideDelegateCall)<EOL><INDENT><INDENT>}"}
{"signature": "val arrayClass =", "body": "parameter.type.classOrNull!!.owner<EOL>"}
{"signature": "if (!AbstractTypeChecker.RUN_SLOW_ASSERTIONS) {", "body": "<EOL><INDENT><INDENT><INDENT>@OptIn(UnsafeDuringIrConstructionAPI::class)<EOL><INDENT><INDENT><INDENT>return symbol.owner as D<EOL><INDENT><INDENT>}"}
{"signature": "val resolver<NUM_LIT> =", "body": "TestDependenciesResolver(acceptsArt = { a -> prefix?.let { a.startsWith(it) } ?: false },<EOL>"}
{"signature": "while (proceed != null) {", "body": "<EOL><INDENT><INDENT>result += <STR_LIT><EOL><INDENT><INDENT>proceed!!()<EOL><INDENT>}"}
{"signature": "val LONG_EQUALS_ANY =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "val nameSuffixForOverloadSimulation =", "body": "bridgeParameters.joinToString(separator = <STR_LIT>, transform = { it.bridge.cType.repr })<EOL>"}
{"signature": "val thisArgument =", "body": "this.arguments.single().typeOrNull ?: return false<EOL>"}
{"signature": "val outputLines =", "body": "runScript(<STR_LIT>)<EOL>"}
{"signature": "package name and supertypes as they are commonly shared<EOL>.", "body": ""}
{"signature": "val IMPLICIT_INT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val scriptPath =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitValueParameterDescriptor(descriptor: ValueParameterDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT>renderValueParameter(descriptor, true, builder, true)<EOL><INDENT><INDENT>}"}
{"signature": "val additionalJsFiles =", "body": "mutableListOf<File>()<EOL>"}
{"signature": "val anotherArgumentExpectedTypeConstructor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>anotherArgument.expectedType?.typeConstructor() ?: return@mapNotNull null<EOL>"}
{"signature": "package '$packageFQN'\"),<EOL>.", "body": ""}
{"signature": "if (hasExtension(JvmProtoBuf.anonymousObjectOriginName)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(getExtension(JvmProtoBuf.anonymousObjectOriginName))<EOL><INDENT>}"}
{"signature": "while (!(a > <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val fieldsWithWith =", "body": "computeFieldsWithWithAnnotation(classSymbol) ?: return null<EOL>"}
{"signature": "if (declaration.isCompanion && classToAdd.isObjCClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.irGetObjCClassCompanion(declaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val globalState =", "body": "getGlobalState()<EOL>"}
{"signature": "for (i in opcodes.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>if (insn.opcode != opcodes[i]) return false<EOL><INDENT><INDENT><INDENT>insn = insn.next ?: return false<EOL><INDENT><INDENT>}"}
{"signature": "if (x.operator == JsBinaryOperator.AND || x.operator == JsBinaryOperator.OR) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>accept(x.arg<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>sideEffectOccurred = true<EOL><INDENT><INDENT><INDENT><INDENT>accept(x.arg<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(x: (String) -> Int) {", "body": "}<EOL><EOL>fun bar(x: String): Int {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}"}
{"signature": "val deparenthesizedExpression =", "body": "<EOL><INDENT><INDENT><INDENT>KtPsiUtil.getLastElementDeparenthesized(resolvedSubCallArgument.atom.psiExpression, topLevelCallContext.statementFilter)<EOL>"}
{"signature": "if (o is FqName || o is Name || o is String || o is Number || o is Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>sb.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (old.getExtensionCount(BuiltInsProtoBuf.typeParameterAnnotation) != new.getExtensionCount(BuiltInsProtoBuf.typeParameterAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val targetParent =", "body": "root.resolve(<STR_LIT>).createDirectory()<EOL>"}
{"signature": "val outStream =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "val sourcesFiles =", "body": "environmentForJS.getSourceFiles()<EOL>"}
{"signature": "val exnType =", "body": "Type.getObjectType(tcb.type ?: <STR_LIT>)<EOL>"}
{"signature": "val deepInnerType =", "body": "javaTypeOf<T<NUM_LIT><Any, Int>.Inner<Char>.NonGeneric.DeepInner<Byte, Short>>()<EOL>"}
{"signature": "val MPP_TEST_FIXTURES_PROJECT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in -array.size until array.size step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>array[i] = '<NUM_LIT>'<EOL><INDENT><INDENT>}"}
{"signature": "if (typeRef.receiverTypeRef != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(CompilerConeAttributes.ExtensionFunctionType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dependenciesTrackingResult =", "body": "generationState.dependenciesTracker.collectResult()<EOL>"}
{"signature": "fun visitPropertyGetterDescriptor(descriptor: PropertyGetterDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>descriptor.correspondingProperty.accept(this, null)<EOL><INDENT><INDENT><INDENT>setHashIdAndDescriptionFor(descriptor, isPropertyAccessor = true)<EOL><INDENT><INDENT><INDENT>classFqnSegments.add(descriptor.name.asString())<EOL><INDENT><INDENT><INDENT>setExpected(descriptor.isExpect)<EOL><INDENT><INDENT><INDENT>platformSpecificGetter(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val arrayAccessBuilder =", "body": "JsAstProtoBuf.ArrayAccess.newBuilder()<EOL>"}
{"signature": "val testRenamedByName =", "body": "testRenamed()<EOL>"}
{"signature": "if (hasInapplicableCallForBuilderInference) {", "body": "<EOL><INDENT><INDENT><INDENT>inferenceSession?.initializeLambda(lambda)<EOL><INDENT><INDENT><INDENT>c.getBuilder().markCouldBeResolvedWithUnrestrictedBuilderInference()<EOL><INDENT><INDENT><INDENT>c.getBuilder().removePostponedVariables()<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun testRunnerExpressionLanguageVersion<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedStdout = <STR_LIT>,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val stringConcat =", "body": "arguments.stringConcat<EOL>"}
{"signature": "for (declaration in irFile.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val signature = declaration.symbol.signature ?: continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>put(signature, declaration.symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val labelField =", "body": "coroutineClass.addField(Name.identifier(<STR_LIT>), symbols.nativePtrType, true)<EOL>"}
{"signature": "val overridden =", "body": "copyFunction.overriddenDescriptors.firstOrNull()<EOL>"}
{"signature": "val descriptionElement =", "body": "entries[dataStream.readInt()].deserialize(dataStream)<EOL>"}
{"signature": "package represented by packagesPath in a given root represented by index<EOL>.", "body": ""}
{"signature": "val Array =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "package external<EOL>.", "body": ""}
{"signature": "val _platformTypeCheckers =", "body": "ComposedTypeCheckers(MppCheckerKind.Platform)<EOL>"}
{"signature": "val VOLATILE_ANNOTATION_CLASS_ID =", "body": "ClassId.topLevel(VOLATILE_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "for (element in groupPatterns) {", "body": "<EOL><INDENT><INDENT><INDENT>val regex = Regex(element)<EOL><INDENT><INDENT><INDENT>val result = regex.matchEntire(negativeTestString)<EOL><INDENT><INDENT><INDENT>assertEquals(result, null)<EOL><INDENT><INDENT>}"}
{"signature": "val exceptionPtr =", "body": "catchKotlinException()<EOL>"}
{"signature": "val actualSign =", "body": "argument.resolvedType.attributes.numberSign<EOL>"}
{"signature": "val platformName =", "body": "function.getJvmNameFromAnnotation()<EOL>"}
{"signature": "val rangeUntil<NUM_LIT> =", "body": "a..<b<EOL>"}
{"signature": "val myDirtyFiles =", "body": "HashSet<File>()<EOL>"}
{"signature": "if (a == null && platformN == a) {", "body": "}"}
{"signature": "for ((old, new) in MAPPED_LIBRARIES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result[old] = result[new] ?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val regularBase =", "body": "hiddenFir.initialSignatureAttr as? FirSimpleFunction ?: return@processFunctionsByName<EOL>"}
{"signature": "fun testTrue(f: () -> Boolean) {", "body": "<EOL><INDENT>assertTrue(f(), f.toString())<EOL>}"}
{"signature": "if (file(<STR_LIT>) !in task.classpath.files) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (c.isDigit()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>digits.pop()<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (i<<NUM_LIT>) {", "body": "i++; continue@labelA}"}
{"signature": "fun loadFunctionExtensions(packagePart: PackagePartsCacheData, proto: ProtoBuf.Function, fir: FirFunction) {", "body": "<EOL><INDENT><INDENT>fir.klibSourceFile = loadKlibSourceFileExtensionOrNull(packagePart, proto, KlibMetadataProtoBuf.functionFile) ?: return<EOL><INDENT>}"}
{"signature": "fun beforeLoop() {", "body": "<INDENT><INDENT>super.beforeLoop()<INDENT><INDENT>// Iterator<E> tmp<iterator> = c.iterator()<INDENT><INDENT>iteratorVarIndex = createLoopTempVariable(asmTypeForIterator)<INDENT><INDENT>StackValue<INDENT><INDENT><INDENT>.local(iteratorVarIndex, asmTypeForIterator, iteratorType)<INDENT><INDENT><INDENT>.store(codegen.invokeFunction(iteratorCall, StackValue.none()), v)<INDENT>}"}
{"signature": "val textOutput =", "body": "TextOutputImpl()<EOL>"}
{"signature": "package callables<EOL>.", "body": ""}
{"signature": "if (setter != null && setter.hasBody()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ABSTRACT_PROPERTY_WITH_SETTER.on(setter))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mappedClassId =", "body": "ClassId.topLevel(mappedClassFqName)<EOL>"}
{"signature": "val PLUS<NUM_LIT>F =", "body": "<NUM_LIT>.<NUM_LIT>F<EOL>"}
{"signature": "package forJsJvmOnly<EOL>.", "body": ""}
{"signature": "val decodeSize =", "body": "decodeSize(source, startIndex, endIndex)<EOL>"}
{"signature": "val emptyIterator =", "body": "mapOf<Nothing, Nothing>().iterator()<EOL>"}
{"signature": "val _long =", "body": "builtIns.longType<EOL>"}
{"signature": "if (loader == null) {", "body": "<EOL><INDENT><INDENT><INDENT>loader = createClassLoader(<EOL><INDENT><INDENT><INDENT><INDENT>runtimeJarForTests(),<EOL><INDENT><INDENT><INDENT><INDENT>reflectJarForTests(),<EOL><INDENT><INDENT><INDENT><INDENT>scriptRuntimeJarForTests(),<EOL><INDENT><INDENT><INDENT><INDENT>kotlinTestJarForTests())<EOL><INDENT><INDENT><INDENT>reflectJarClassLoader = SoftReference(loader)<EOL><INDENT><INDENT>}"}
{"signature": "if (state == State.VARARG_POSITION && isIndexedSetOperator && isLastArgument) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// The last argument of an indexed set operator should be reserved for the last argument (the assigned value).<INDENT><INDENT><INDENT><INDENT><INDENT>// That's why if vararg presented, they should be completed<INDENT><INDENT><INDENT><INDENT><INDENT>completeVarargPositionArguments()<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val jsInitializer =", "body": "value?.accept(IrElementToJsExpressionTransformer(), context)<EOL>"}
{"signature": "val cacheKindString =", "body": "project.findProperty(<STR_LIT>) as String? ?: return null<EOL>"}
{"signature": "fun visitEnum(enumClassId: ClassId, enumEntryName: Name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>elements.add(EnumData(enumClassId, enumEntryName))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isIf =", "body": "expression.origin == IrStatementOrigin.IF || expression is IrIfThenElseImpl<EOL>"}
{"signature": "val conditionInterpreter =", "body": "ConditionInterpreter(this)<EOL>"}
{"signature": "if (lookupAttributesSaved.compareAndSet(false, true)) {", "body": "<EOL><INDENT><INDENT><INDENT>initialLookupsCacheStateDiff.manager.writeVersion()<EOL><INDENT><INDENT>}"}
{"signature": "val listToRetain =", "body": "(head..tail).filter { Random.nextBoolean() }<EOL>"}
{"signature": "val TF_SUSPEND_FUNCTION =", "body": "<NUM_LIT><EOL>"}
{"signature": "val bootedSimulatorsBefore =", "body": "getBootedSimulators()<EOL>"}
{"signature": "val fieldExpectations =", "body": "ArrayList<SignatureExpectation>()<EOL>"}
{"signature": "if (function.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processLocalFunction(name, function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testExns() {", "body": "<EOL><INDENT><INDENT>Id(<STR_LIT>).testExn()<EOL><INDENT><INDENT>Name(<STR_LIT>).testExn()<EOL><INDENT><INDENT>testExn(Password(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val transformedOption =", "body": "option.cliToolOption.transform(arg)<EOL>"}
{"signature": "fun visitTypeRef(typeRef: FirTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeRef(typeRef)<EOL><INDENT>}"}
{"signature": "if (file.canHaveAdditionalFilesInFacade()) {", "body": "<EOL><INDENT><INDENT><INDENT>findFilesForFacade(facadeFqName, module.contentSearchScope).filter(KtFile::isJvmMultifileClassFile)<EOL><INDENT><INDENT>}"}
{"signature": "val generatedObjCCategoriesMembers =", "body": "mutableMapOf<ObjCClass, GeneratedObjCCategoriesMembers>()<EOL>"}
{"signature": "val IMPORT_LAST_NAME =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "var suppressWarnings =", "body": "false<EOL>"}
{"signature": "val SBase =", "body": "<NUM_LIT>xAC<NUM_LIT><NUM_LIT><EOL>"}
{"signature": "val matchedWithSubstring =", "body": "diagnosticMessages.find { withSubstring in it }<EOL>"}
{"signature": "var byteStart =", "body": "-bitsPerByte<EOL>"}
{"signature": "val injectedProperty =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun missingReceiver(trace: BindingTrace, expectedReceiver: ReceiverParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>unexpectedError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val invokeKindPriority =", "body": "invokeResolvePriority.compareTo(other.invokeResolvePriority)<EOL>"}
{"signature": "fun foo()  {", "body": "<EOL><INDENT><INDENT>result = property<EOL><INDENT>}"}
{"signature": "val interestingDrains =", "body": "findInterestingDrains(parameters)<EOL>"}
{"signature": "val MIDDLE_BOX_METHOD_REGEX =", "body": "<STR_LIT>\"\\nfun box\\(\\)<STR_LIT>\".toRegex()<EOL>"}
{"signature": "val subjectVariable_ =", "body": "subjectVariable<EOL>"}
{"signature": "if (removeOuterTypeParameterScope(regularClass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.scopes = staticScopes<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val tempReifiedTypeParametersUsages =", "body": "ReifiedTypeParametersUsages()<EOL>"}
{"signature": "fun html<NUM_LIT>() {", "body": "<EOL><INDENT><html></html>html<EOL>}"}
{"signature": "val snippetVal =", "body": "snippet.get()<EOL>"}
{"signature": "val pzjk =", "body": "pzj!!.kotlinFunction<EOL>"}
{"signature": "val valShouldBeVisibleFromScript =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (classifierDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>PlatformClassesMappedToKotlinChecker.reportPlatformClassMappedToKotlin(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>platformToKotlinClassMapper, trace, userType, classifierDescriptor<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateCopyFunction(function: FunctionDescriptor, constructorParameters: List<KtParameter>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addFunction(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var kaptContext =", "body": "DisposableReference(kaptContext)<EOL>"}
{"signature": "val irTypeParameter =", "body": "(it.value as IrBasedTypeParameterDescriptor).owner<EOL>"}
{"signature": "if (fqn < result.first) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>resultPair = Pair(fqn, it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val sealedOrAbstract =", "body": "<EOL><INDENT><INDENT><INDENT>declaration.modifierList?.let { it.getModifier(KtTokens.ABSTRACT_KEYWORD) ?: it.getModifier(KtTokens.SEALED_KEYWORD) }<EOL>"}
{"signature": "val ioFragmentFile =", "body": "File(ioFile.parent, <STR_LIT>)<EOL>"}
{"signature": "val moduleKind =", "body": "configuration.get(JSConfigurationKeys.MODULE_KIND, ModuleKind.PLAIN)<EOL>"}
{"signature": "fun foo<NUM_LIT>(c : IntArray) {", "body": "}<EOL><INDENT>open fun bar<NUM_LIT>(): IntArray { return c }"}
{"signature": "if (!attributes.get().containsKey(specVersionKey) && specVersion.isPresent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(specVersionKey, specVersion.get())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(c: C, b: B, bn: B?) {", "body": "<EOL><INDENT>val x = A(c)<EOL><INDENT>val y = A(b)<EOL><INDENT>val z = A(bn)<EOL>}"}
{"signature": "val toCopy =", "body": "minOf(length - outPosition, frame.size - frame.position)<EOL>"}
{"signature": "fun checkArguments(args: Array<*>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.checkArguments(args)<EOL><INDENT><INDENT><INDENT><INDENT>checkObjectInstance(args.firstOrNull())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firstIndex =", "body": "ORDERED_VISIBILITIES[first]<EOL>"}
{"signature": "fun throwsUnresolved() {", "body": "}<EOL><EOL>class Orphan : <!UNRESOLVED_REFERENCE!>MyUnresolvedParent<!><EOL>@Throws(<!ARGUMENT_TYPE_MISMATCH!>Orphan::class<!>)<EOL>fun throwsClassWithUnresolvedParent() {}"}
{"signature": "fun foo<NUM_LIT>(x: MutableList<Int>) {", "body": "<EOL>}"}
{"signature": "if (options.bodyPrintingStrategy != BodyPrintingStrategy.NO_BODIES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.printlnWithNoIndent()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val COMMON_FILES_DIR_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "var size =", "body": "<NUM_LIT><EOL>"}
{"signature": "val declaredSubclass =", "body": "B::class.declaredFunctions.map { it.name }.sorted()<EOL>"}
{"signature": "if (initializer.kind == ConstantValueKind.Long) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (!type.isSame(StandardClassIds.Long)) return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var raw =", "body": "false<EOL>"}
{"signature": "fun tryParseRegularDirective(rawDirective: RegisteredDirectivesParser.RawDirective?) {", "body": "<EOL><INDENT><INDENT><INDENT>if (rawDirective == null) return<EOL><INDENT><INDENT><INDENT>val parsedDirective = directivesBuilder.convertToRegisteredDirective(rawDirective) ?: return<EOL><INDENT><INDENT><INDENT>directivesBuilder.addParsedDirective(parsedDirective)<EOL><INDENT><INDENT>}"}
{"signature": "val projectVariant =", "body": "scenarioProject.variant<EOL>"}
{"signature": "val artifactsLink =", "body": "(buildInfo.rootElement.children.find { it.name == <STR_LIT> })!!.getAttribute(<STR_LIT>).value<EOL>"}
{"signature": "val errorRef =", "body": "allocPointerTo<ByteVar>()<EOL>"}
{"signature": "val relative =", "body": "sourcePath.relativize(oldPath)<EOL>"}
{"signature": "package part came from) to<EOL>.", "body": ""}
{"signature": "val vx<NUM_LIT> =", "body": "y.vfoo<NUM_LIT><EOL>"}
{"signature": "val resolvedGetCall =", "body": "context[BindingContext.INDEXED_LVALUE_GET, arrayAccessExpression] ?: return null<EOL>"}
{"signature": "if (parent is KtCallableReferenceExpression && expression == parent.callableReference) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return CALLABLE_REFERENCE(parent.receiverExpression)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val classifiers =", "body": "CirKnownClassifiers(<EOL>"}
{"signature": "var finallyScopeCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visitArgumentList(argumentList: FirArgumentList, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitArgumentList(argumentList)<EOL><INDENT>}"}
{"signature": "if (system != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>setConstraintSystem(system)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var typeParameterSymbols =", "body": "correspondingDeclaration.typeParameterSymbols.filter { it.containingDeclarationSymbol is FirClassLikeSymbol }<EOL>"}
{"signature": "if (nonNullChildren.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nodeList += node<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import <GameController/GCDevice.", "body": "h><EOL>"}
{"signature": "val functionLiteralArguments =", "body": "expression.lambdaArguments<EOL>"}
{"signature": "val tempBitSet =", "body": "BitSet()<EOL>"}
{"signature": "val internalRoot =", "body": "<STR_LIT><EOL>"}
{"signature": "val CONTEXT_FUNCTION_TYPE_PARAMETER_COUNT_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (!areEq) {", "body": "<EOL><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val jcImportQualidField =", "body": "JCImport::class.java.declaredFields.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val unprocessedType =", "body": "iterator.next()<EOL>"}
{"signature": "val returnStatement =", "body": "IrReturnImpl(<NUM_LIT>, <NUM_LIT>, irBuiltIns.nothingType, function.symbol, const)<EOL>"}
{"signature": "for (i in hiddenParameters.indices.reversed()) {", "body": "<EOL><INDENT><INDENT><INDENT>val (param, offset) = hiddenParameters[i]<EOL><INDENT><INDENT><INDENT>StackValue.local(offset, param.type).store(StackValue.onStack(param.typeOnStack), codegen.visitor)<EOL><INDENT><INDENT>}"}
{"signature": "val jsExceptionType =", "body": "context.wasmSymbols.jsRelatedSymbols.jsException.defaultType<EOL>"}
{"signature": "val TEST_SOURCE_SET_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "import <!UNRESOLVED_IMPORT!>d<!>.", "body": "Test<EOL>"}
{"signature": "if (declaration.isLocalMember && context.containingDeclarations.lastOrNull() !is FirScript) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirErrors.NOT_YET_SUPPORTED_IN_INLINE, <STR_LIT>, context)<EOL><INDENT><INDENT><INDENT>false<EOL><INDENT><INDENT>}"}
{"signature": "val BBD =", "body": "<NUM_LIT><EOL>"}
{"signature": "var hd =", "body": "Holder(Dat(<STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "if (targetDescriptor is PropertySetterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>deprecations -= deprecationResolver.getDeprecations(targetDescriptor.correspondingProperty)<EOL><INDENT><INDENT>}"}
{"signature": "val isFieldInitializer =", "body": "expression.origin == IrStatementOrigin.INITIALIZE_FIELD<EOL>"}
{"signature": "val oldMode =", "body": "this.isInsideAssignmentRhs<EOL>"}
{"signature": "val HAS_NEXT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "for (indexVar in indexVariables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>arguments += generateResolvedAccessExpression(indexVar.source, indexVar)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val booleanArray<NUM_LIT> =", "body": "<!EVALUATED: `true`!>BooleanArray(<NUM_LIT>) { it -> it != <NUM_LIT> }[<NUM_LIT>]<!><EOL>"}
{"signature": "else if (character > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>character = Char.toLowerCase(Char.toUpperCase(character))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor is NotFoundClasses.MockClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return MISSING_DEPENDENCY_CLASS.on(reportOn, descriptor.fqNameSafe)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinStdlibDependencies =", "body": "binaryCoordinates(Regex(<STR_LIT>))<EOL>"}
{"signature": "if (Random.nextDouble() <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "package FQ name, fragmentShortName is right-most part of package FQ name<EOL>.", "body": ""}
{"signature": "val engineBindings =", "body": "jsr<NUM_LIT>context.getBindings(ScriptContext.ENGINE_SCOPE)<EOL>"}
{"signature": "val facadeName =", "body": "kotlinClass?.classHeader?.multifileClassName<EOL>"}
{"signature": "fun visitGetValue(expression: IrGetValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (expression.symbol.owner in targetValues)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result += expression<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (OperatingSystem.current().isMacOsX) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// Check that producer has resources in its metadata<INDENT><INDENT><INDENT><INDENT><INDENT>val hostSpecificMetadataJar = producer.projectPath.resolve(<STR_LIT>)<INDENT><INDENT><INDENT><INDENT><INDENT>hostSpecificMetadataJar.assertZipFileContains(listOf(<STR_LIT>))<INDENT><INDENT><INDENT><INDENT><INDENT>assertTasksExecuted(<STR_LIT>)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val chain =", "body": "annotation?.getBooleanArgument(CHAIN, session)<EOL>"}
{"signature": "val compilerResult =", "body": "compileWasm(<EOL>"}
{"signature": "if (firstLines) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>message.appendLine(it)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val klibCompilations =", "body": "modulesToKlib(setOf(dependencyModule), freeCompilerArgs, produceStaticCache, settings)<EOL>"}
{"signature": "if (endIndex != path.size) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val toParams =", "body": "toDeclaration.typeParameterSymbols<EOL>"}
{"signature": "val expectedExceptionMessage =", "body": "<STR_LIT><EOL>"}
{"signature": "val benchmarkProject =", "body": "context.collectedData<EOL>"}
{"signature": "fun visitIntegerLiteralOperatorCall(integerLiteralOperatorCall: FirIntegerLiteralOperatorCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitIntegerLiteralOperatorCall(integerLiteralOperatorCall)<EOL><INDENT>}"}
{"signature": "var aaR =", "body": "<NUM_LIT><EOL>"}
{"signature": "import kotlinBuildProperties<EOL>.", "body": ""}
{"signature": "var prevSibling =", "body": "lambdaArgument.prevSibling<EOL>"}
{"signature": "val threadStateChecker =", "body": "computeThreadStateChecker(enforcedProperties)<EOL>"}
{"signature": "val propertiesContent =", "body": "gradleProperties.readText()<EOL>"}
{"signature": "val irTranslationResults =", "body": "registerMap(IrTranslationResultMap(IR_TRANSLATION_RESULT_MAP.storageFile, icContext))<EOL>"}
{"signature": "val typeResolver =", "body": "CirTypeResolver.create(<EOL>"}
{"signature": "fun visitLoopEnterNode(node: LoopEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (ex.value == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw RuntimeExceptionWithValue(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testWasmMemorySizeGrow() {", "body": "<EOL><INDENT><INDENT>val s<NUM_LIT> = wasmMemorySize()<EOL><INDENT><INDENT>val grow_res = wasmMemoryGrow(<NUM_LIT>0)<EOL><INDENT><INDENT>val s<NUM_LIT> = wasmMemorySize()<EOL><INDENT><INDENT>assertNotEquals(grow_res, -<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(grow_res, s<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(s<NUM_LIT> - s<NUM_LIT>, <NUM_LIT>0)<EOL><INDENT>}"}
{"signature": "if (declaration is IrSimpleFunction && declaration.getJsNameOrKotlinName().asString() == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.enqueue(declaration, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val mainModuleName =", "body": "getMainModuleName(testServices)<EOL>"}
{"signature": "var y<NUM_LIT> =", "body": "y * y * y;<EOL>"}
{"signature": "val PLATFORM_PACKAGE_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val previouslyCompiledCallables =", "body": "<EOL><INDENT><INDENT>if (compiledPackageFragment == null)<EOL>"}
{"signature": "fun foo(list: L<CharSequence>, b: B) {", "body": "<EOL><INDENT>list.foo(b::remove)<EOL><INDENT>list.foo<CharSequence>(b::remove)<EOL>}"}
{"signature": "for (el in arrayOf(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u)) {", "body": "<EOL><INDENT><INDENT>sum += el<EOL><INDENT>}"}
{"signature": "when (notEmptyContainers.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> Empty<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> notEmptyContainers.single()<EOL><INDENT><INDENT><INDENT><INDENT>else -> ComposedRegisteredDirectives(notEmptyContainers)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(body: Ctx.() -> Unit) {", "body": "<EOL><INDENT>foo()<EOL><INDENT>body<!NO_VALUE_FOR_PARAMETER!>()<!><EOL>}"}
{"signature": "fun add(c: Constraint) {", "body": "<EOL><INDENT>c.addToGraph()<EOL><INDENT>incrementalAdd(c)<EOL>  }"}
{"signature": "var ID_HANDLER_B  =", "body": "<NUM_LIT><EOL>"}
{"signature": "val moreSuitableGroup =", "body": "candidateGroups.maxByOrNull { it.groupApplicability } ?: return emptyList()<EOL>"}
{"signature": "val commonCompilerOptions =", "body": "gradleOptions<CommonCompilerArguments>()<EOL>"}
{"signature": "val requiresForwardDeclarationKey =", "body": "extrasKeyOf<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "fun add(o: Int) {", "body": "<EOL><INDENT><INDENT>ensureCapacity(size + <NUM_LIT>)<EOL><INDENT><INDENT>data[size++] = o<EOL><INDENT>}"}
{"signature": "for (element in sideEffect(intArray)) {", "body": "<EOL><INDENT><INDENT>sb.append(element.toString())<EOL><INDENT>}"}
{"signature": "while (index <= string.lastIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>val ch = string[index]<EOL><INDENT><INDENT><INDENT>if (ch !in '<NUM_LIT>'..'<NUM_LIT>') break<EOL><INDENT><INDENT><INDENT>sb.append(string[index])<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT>}"}
{"signature": "val newSourceRoot =", "body": "sourceRoot.replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (TypeUtils.noExpectedType(inferenceErrorData.expectedType)) {", "body": "<EOL><INDENT><INDENT><INDENT>append(inferenceErrorData.expectedType)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitThrow(expression: IrThrow) {", "body": "<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>expression.value.print()<EOL><INDENT>}"}
{"signature": "fun writeResultPrefix() {", "body": "builder.append(':') }"}
{"signature": "val TWO =", "body": "<NUM_LIT><EOL>"}
{"signature": "val yield =", "body": "<NUM_LIT><EOL>"}
{"signature": "val frameworkSearchPaths =", "body": "podBuildSettings.frameworkSearchPaths<EOL>"}
{"signature": "var isStatic =", "body": "false<EOL>"}
{"signature": "if (context.isBoxedLocalCapturedInClosure(callableDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>getCapturedVarAccessor(functionRef)<EOL><INDENT><INDENT>}"}
{"signature": "if (trivialConstraintTypeInferenceOracle.isSuitableResultedType(constraint.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>properConstraintPresent = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>nonNothingProperConstraintPresent = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val destArray =", "body": "dest.reinterpret<ByteVar>().ptr<EOL>"}
{"signature": "val boundsSizeDiff =", "body": "a.bounds.size - b.bounds.size<EOL>"}
{"signature": "val rootContext =", "body": "StubBasedFirDeserializationContext<EOL>"}
{"signature": "for (char<NUM_LIT> in equalGroup) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assertCompareResult(EQ, char<NUM_LIT>toString(), char<NUM_LIT>.toString(), ignoreCase = true)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isFunctionalType && defaultValue != null && !isInlinableDefaultValue(defaultValue)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>defaultValue.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.INVALID_DEFAULT_FUNCTIONAL_PARAMETER_FOR_INLINE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>param.symbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DevirtualizationAnalysisPhase =", "body": "createSimpleNamedCompilerPhase<NativeGenerationState, DevirtualizationAnalysisInput, DevirtualizationAnalysis.AnalysisResult>(<EOL>"}
{"signature": "var meetCapturing =", "body": "false<EOL>"}
{"signature": "fun testCompare() {", "body": "<EOL><INDENT><INDENT>assert(ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>) == ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assert(ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>) > ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assert(ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>) > ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assert(ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>) < ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assert(ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>) > ParsedGradleVersion(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT>}"}
{"signature": "val resultPartial =", "body": "data.windowed(<NUM_LIT>, <NUM_LIT>, partialWindows = true)<EOL>"}
{"signature": "if (Flags.DEFINITELY_NOT_NULL_TYPE.get(type.flags)) {", "body": "<EOL><INDENT><INDENT><INDENT>createDefinitelyNotNullTypeStub(parent, typeParameterClassId, upperBoundType)<EOL><INDENT><INDENT>}"}
{"signature": "val warningCount =", "body": "log.nwarnings<EOL>"}
{"signature": "val preambleSize =", "body": "library.preambleLines.size<EOL>"}
{"signature": "fun setComponents(components: DeserializationComponentsForJava) {", "body": "<EOL><INDENT><INDENT>this.components = components.components<EOL><INDENT>}"}
{"signature": "val positiveString =", "body": "positive.asDynamic().toPrecision(ceil(log<NUM_LIT>(positive)) + decimals).unsafeCast<String>()<EOL>"}
{"signature": "val calledFunEffectiveVisibility =", "body": "if (isDefinedInInlineFunction(calledDescriptor))<EOL>"}
{"signature": "if (hasMissingClass && !hasError) {", "body": "<EOL><INDENT><INDENT><INDENT>val reportedType = type.withNullability(ConeNullability.NOT_NULL, context.session.typeContext)<EOL><INDENT><INDENT><INDENT>missingTypes.add(reportedType)<EOL><INDENT><INDENT>}"}
{"signature": "val leftVariable =", "body": "getVariableIfStable(flowFromLeft, fir.leftOperand)<EOL>"}
{"signature": "val floatValue =", "body": "value.toFloat()<EOL>"}
{"signature": "when (HostManager.host.family) {", "body": "<EOL><INDENT><INDENT><INDENT>Family.MINGW -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun defineClassITableGcType(irClass: IrClassSymbol, wasmType: WasmTypeDeclaration) {", "body": "<EOL><INDENT><INDENT>wasmFragment.classITableGcType.define(irClass, wasmType)<EOL><INDENT>}"}
{"signature": "val jumpTarget =", "body": "getJumpTarget(instruction.targetLabel)<EOL>"}
{"signature": "val castedObj =", "body": "multiCast(roundTrippedObj)<EOL>"}
{"signature": "fun libWithCustomLayout() {", "body": "<EOL><EOL>}"}
{"signature": "if (irClass.isObjCMetaClass() && (irClass.isCompanion && !irClass.parentAsClass.isKotlinObjCClass() || irClass.kind.isClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>reportError(irClass, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val isMainSourceSet =", "body": "sourceSet<EOL>"}
{"signature": "val isApplicable =", "body": "argumentTypeResolver.isSubtypeOfForArgumentType(notNullableArgumentType, parameterType)<EOL>"}
{"signature": "val irIdentityEquals =", "body": "primitiveOp<NUM_LIT>(<EOL>"}
{"signature": "if (node.parent.right == node) {", "body": "<EOL><INDENT><INDENT>node.parent.right = replace<EOL><INDENT>  }"}
{"signature": "val systemIndependentName =", "body": "FileUtilRt.toSystemIndependentName(location)<EOL>"}
{"signature": "val maybeDispatchReceiver =", "body": "<EOL><INDENT><INDENT><INDENT>if (targetField.isStatic) null<EOL>"}
{"signature": "if (isInlineOnlyMethod) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>currentLineNumber<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val iosSimulatorArm<NUM_LIT> =", "body": "KonanTarget.IOS_SIMULATOR_ARM<NUM_LIT><EOL>"}
{"signature": "val nameProvider =", "body": "this.baseNameProvider<EOL>"}
{"signature": "val ia =", "body": "IArray(<NUM_LIT>) { <NUM_LIT> }<EOL>"}
{"signature": "val unwrappedSamIndex =", "body": "(index as? FirSamConversionExpression)?.expression ?: index<EOL>"}
{"signature": "if (constructor.constructedClass.isInlined()) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.lowerConstructorCallToValue(expression, constructor)<EOL><INDENT><INDENT>}"}
{"signature": "val thisClasspath =", "body": "listOf(PathUtil.getResourcePathForClass(ScriptCliCompilationTest::class.java))<EOL>"}
{"signature": "val invokeCall =", "body": "currentInvokes.remove()<EOL>"}
{"signature": "if (commandLineProcessor.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw PluginProcessingException(multiplePluginsErrorMessage(commandLineProcessor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val clientsLock =", "body": "ReentrantReadWriteLock()<EOL>"}
{"signature": "if (jsPrimitiveType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val destinationEndIndex =", "body": "destinationOffset + capacityNeeded<EOL>"}
{"signature": "fun magnifyWithEvent(event: NSEvent) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (isPrimitiveTypeOrNullablePrimitiveType(leftType) && isPrimitiveTypeOrNullablePrimitiveType(rightType)) {", "body": "<EOL><INDENT><INDENT><INDENT>binaryIntrinsic(coerceTo(leftType), coerceTo(rightType))<EOL><INDENT><INDENT>}"}
{"signature": "else if (name == wireSourceSet.sourcesJarTaskName) {", "body": "<EOL><INDENT><INDENT><INDENT>from(wireSourceSet.allSource, commonSourceSet.allSource)<EOL><INDENT><INDENT>}"}
{"signature": "val hint<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val classDescriptors =", "body": "scope.filterIsInstance<ClassDescriptor>().sortedBy { it.fqNameSafe.asString() }<EOL>"}
{"signature": "if (symbol is KtNamedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declarationRenderer.nameRenderer.renderName(analysisSession, symbol, declarationRenderer, printer)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val stats = this[srcFile]) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> this[srcFile] = EnumSet.of(state)<EOL><INDENT><INDENT><INDENT>else -> stats.add(state)<EOL><INDENT><INDENT>}"}
{"signature": "val referencedSymbolName =", "body": "referencedCallableSymbol?.name ?: return null<EOL>"}
{"signature": "val argumentTypeEnhancement =", "body": "argumentType.getEnhancementDeeply() ?: argumentType<EOL>"}
{"signature": "val classLoader =", "body": "URLClassLoader(arrayOf(file.toURI().toURL()), parentClassLoader)<EOL>"}
{"signature": "fun withOverloads(i: Int) {", "body": "}<EOL>fun withOverloads(i: String) {}"}
{"signature": "if (classpath.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>configurationDependencies.append(JvmDependency(classpath))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val renderedClass =", "body": "LibraryAbiRenderer.render(mockLibraryAbi, AbiRenderingSettings(signatureVersion))<EOL>"}
{"signature": "if (value != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(value.toString())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun warn(msg: String) {", "body": "<EOL><INDENT><INDENT>saveLogEntry(LogLevel.WARN, msg)<EOL><INDENT>}"}
{"signature": "var se =", "body": "<STR_LIT><EOL>"}
{"signature": "fun box() {", "body": "<EOL><INDENT>foo(<NUM_LIT>)<EOL>}"}
{"signature": "val minSupportedRendered =", "body": "compatibleAndroidGradlePluginVersionRange.minSupportedVersion.major.toString() +<EOL>"}
{"signature": "val allDataFiles =", "body": "classpathStructure.files<EOL>"}
{"signature": "if (blockCount == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val excludedDirs =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val keyValue =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "val objcRelease =", "body": "llvm.externalNativeRuntimeFunction(<EOL>"}
{"signature": "if (ordinal != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>setOrdinal(ordinal)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val interceptorRef =", "body": "lastParameter!!.makeRef()<EOL>"}
{"signature": "val localCommonFilePath =", "body": "<STR_LIT><EOL>"}
{"signature": "val toCompressedNode =", "body": "nodeIds[edge.node] ?: continue<EOL>"}
{"signature": "if (sumFunOnParameters(<NUM_LIT>, *aI, *aI) {", "body": "<NUM_LIT>*it }"}
{"signature": "val directoryMatch =", "body": "findMatchLine(path, isDirectory = true, parentMatch)<EOL>"}
{"signature": "val packageFqName =", "body": "descriptor.containingPackage() ?: return null<EOL>"}
{"signature": "fun staticCall(caller: DataFlowIR.FunctionSymbol.Declared, call: DataFlowIR.Node.Call, node: DataFlowIR.Node, callee: DataFlowIR.FunctionSymbol) {", "body": "<EOL><INDENT><INDENT>val resolvedCallee = callee.resolved()<EOL><INDENT><INDENT>val callSite = CallGraphNode.CallSite(call, node, false, resolvedCallee)<EOL><INDENT><INDENT>val function = moduleDFG.functions[resolvedCallee]<EOL><INDENT><INDENT>callGraph.addEdge(caller, callSite)<EOL><INDENT><INDENT>if (function != null)<EOL><INDENT><INDENT><INDENT>functionStack.push(HandleFunctionParams(caller, function))<EOL><INDENT>}"}
{"signature": "val jdk<NUM_LIT>Path =", "body": "KtTestUtil.getJdk<NUM_LIT>Home().absolutePath<EOL>"}
{"signature": "when (val c = match.groups[<NUM_LIT>]!!.value.single()) {", "body": "<INDENT><INDENT><INDENT>'\\\\' -> <STR_LIT><INDENT><INDENT><INDENT>' ' -> <STR_LIT><INDENT><INDENT><INDENT>'n' -> <STR_LIT><INDENT><INDENT><INDENT>'t' -> <STR_LIT><INDENT><INDENT><INDENT>// Impossible situation: all possible values are mentioned in the regex<INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<INDENT><INDENT>}"}
{"signature": "val dsf =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun foo(x: NSObject, y: NSObject, z: NSObject) {", "body": "}"}
{"signature": "if (afterDescriptors.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>functionToTest.body.statements += JsReturn(functionDescriptor.buildCall())<EOL><INDENT><INDENT><INDENT>return functionToTest<EOL><INDENT><INDENT>}"}
{"signature": "if (hasAnnotation(StandardNames.FqNames.extensionFunctionType)) {", "body": "<EOL><INDENT><INDENT>this<EOL><INDENT>}"}
{"signature": "if (!classDescriptor.kind.isSingleton) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.NO_COMPANION_OBJECT.on(qualifier.referenceExpression, referenceTarget))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun exitLoopBody(expression: KtLoopExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>val info = loopInfo.pop()<EOL><INDENT><INDENT><INDENT>elementToLoopInfo.remove(expression)<EOL><INDENT><INDENT><INDENT>allBlocks.pop()<EOL><INDENT><INDENT><INDENT>bindLabel(info.bodyExitPoint)<EOL><INDENT><INDENT>}"}
{"signature": "val sharedPaths =", "body": "listOf(<EOL>"}
{"signature": "val tryAsmType =", "body": "aTry.asmType<EOL>"}
{"signature": "fun visitResolvedErrorReference(resolvedErrorReference: FirResolvedErrorReference) {", "body": "<EOL><INDENT><INDENT>visitElement(resolvedErrorReference)<EOL><INDENT>}"}
{"signature": "val typeVariableText =", "body": "(typeVariable as? TypeVariableFromCallableDescriptor)?.originalTypeParameter?.name?.asString()<EOL>"}
{"signature": "fun useGeneratedKotlinSource(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT>}"}
{"signature": "fun testRandomAccess() {", "body": "<EOL><INDENT><INDENT>val reversed = listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).asReversed()<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, reversed[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, reversed[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, reversed[<NUM_LIT>])<EOL><INDENT>}"}
{"signature": "val transformedResult =", "body": "aTry.tryResult.transform(transformer, null)<EOL>"}
{"signature": "val mutableSetSum =", "body": "<!EVALUATED: `Sum = <NUM_LIT>`!>testIterator(mutableSetOf<Byte>(<NUM_LIT>, (<NUM_LIT>).toByte(), <NUM_LIT>27, <NUM_LIT><NUM_LIT>, <NUM_LIT>))<!><EOL>"}
{"signature": "fun assertCompileFails(<EOL><INDENT>repl: JvmTestRepl,<EOL><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT>line: String<EOL>) {", "body": "<EOL><INDENT>val compiledSnippet =<EOL><INDENT><INDENT>checkCompile(repl, line)<EOL><EOL><INDENT>TestCase.assertNull(compiledSnippet)<EOL>}"}
{"signature": "val argumentsQueue =", "body": "ArgumentsQueue(arguments.map { it.value.descriptor as ArgDescriptor<*, *> })<EOL>"}
{"signature": "val arePartiallySpecifiedTypeArgumentsEnabled =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.PartiallySpecifiedTypeArguments)<EOL>"}
{"signature": "fun doesNotWork(bi: Bar<Int>, bs: Bar<String>) {", "body": "<EOL><INDENT>Foo().add(bi).add(bs)<EOL>}"}
{"signature": "val nonWordCharRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "fun testUnicode() {", "body": "<EOL><INDENT><INDENT>assertTrue(Regex(<STR_LIT>).matches(<STR_LIT>))<EOL><INDENT><INDENT>assertTrue(Regex(<STR_LIT>).matches(<STR_LIT>))<EOL><INDENT><INDENT>assertTrue(Regex(<STR_LIT>).matches(<STR_LIT>))<EOL><INDENT><INDENT>assertTrue(Regex(<STR_LIT>).matches(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val returnValueIndex =", "body": "getFirstUnusedLocalVariableIndex()<EOL>"}
{"signature": "val specialMethodInfo =", "body": "specialBridgeMethods.getSpecialMethodInfo(function)<EOL>"}
{"signature": "fun html(init: () -> Unit) {", "body": "<EOL><INDENT>return init(init)<EOL>}"}
{"signature": "if (log != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val finalizers =", "body": "ClassFileFactoryFinalizerExtension.getInstances(project)<EOL>"}
{"signature": "if (!skipMetadataVersionCheck && !version.isCompatible(metadataVersionFromLanguageVersion)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportIncompatibleVersionError(version)<EOL><INDENT><INDENT><INDENT><INDENT>return EMPTY<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun afterIndependentPart() {", "body": "<EOL><INDENT><INDENT>onIndependentPartCompilationEnd(this)<EOL><INDENT>}"}
{"signature": "if (x is I<NUM_LIT> && x is I<NUM_LIT> && x is I<NUM_LIT> && x is I<NUM_LIT> && x is I<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val (t<NUM_LIT>, t<NUM_LIT>, t<NUM_LIT>, t<NUM_LIT>, t<NUM_LIT>) = x<EOL><INDENT><INDENT>return t<NUM_LIT> + t<NUM_LIT> + t<NUM_LIT> + t<NUM_LIT> + t<NUM_LIT><EOL><INDENT>}"}
{"signature": "for (symbol in symbolTable.descriptorExtension.allUnboundSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT>stubGenerator.getDeclaration(symbol)<EOL><INDENT><INDENT>}"}
{"signature": "val knownThirdPartyCode =", "body": "loadKnownThirdPartyCodeList()<EOL>"}
{"signature": "fun addAndSave(dependency: String) {", "body": "<EOL><INDENT><INDENT><INDENT>add(dependency)<EOL><INDENT><INDENT><INDENT>save()<EOL><INDENT><INDENT>}"}
{"signature": "when (task) {", "body": "<INDENT><INDENT><INDENT><INDENT>is Test -> testFrameworkOf(task)<INDENT><INDENT><INDENT><INDENT>else -> // Android connected test tasks don't inherit from Test, but we use JUnit for them<INDENT><INDENT><INDENT><INDENT><INDENT>KotlinTestJvmFramework.junit<INDENT><INDENT><INDENT>}"}
{"signature": "val typeInsn =", "body": "insn as TypeInsnNode<EOL>"}
{"signature": "val indexVar =", "body": "if (segments.size >= <NUM_LIT>) irTemporary(irInt(<NUM_LIT>), <STR_LIT>) else null<EOL>"}
{"signature": "val kotlinScriptingJars =", "body": "if (withScripting) listOf(<EOL>"}
{"signature": "fun toSet() {", "body": "<EOL><INDENT><INDENT>assertEquals(emptySet(), emptySequence<Int>().toSet())<EOL><INDENT><INDENT>assertEquals(setOf(<NUM_LIT>), sequenceOf(<NUM_LIT>).toSet())<EOL><INDENT><INDENT>assertEquals(setOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), sequenceOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).toSet())<EOL><INDENT><INDENT>assertEquals(setOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), sequenceOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>).toSet())<EOL><INDENT>}"}
{"signature": "val resultFile =", "body": "File(tmpdir.absolutePath, <STR_LIT>)<EOL>"}
{"signature": "val negPat =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val firstHash =", "body": "getHash(<EOL>"}
{"signature": "val internedName =", "body": "interner.intern(name)<EOL>"}
{"signature": "while (condition) {", "body": "body }"}
{"signature": "val lookupTags =", "body": "mutableListOf<ConeClassLikeLookupTag>()<EOL>"}
{"signature": "val jvmFileName =", "body": "InTextDirectivesUtils.findStringWithPrefixes(fileText, <STR_LIT>) ?: directory.name<EOL>"}
{"signature": "while (signature.current() != ':' && signature.current() != CharacterIterator.DONE) {", "body": "<EOL><INDENT><INDENT><INDENT>name.append(signature.current())<EOL><INDENT><INDENT><INDENT>signature.next()<EOL><INDENT><INDENT>}"}
{"signature": "val missingIncrementalSupport =", "body": "processors.filter { it.isMissingIncrementalSupport() }<EOL>"}
{"signature": "fun addMetadataVisibleAnnotationsToElement(declaration: IrDeclaration, annotations: List<IrConstructorCall>)<EOL><EOL><INDENT>fun addMetadataVisibleAnnotationsToElement(declaration: IrDeclaration, vararg annotations: IrConstructorCall) {", "body": "<EOL><INDENT><INDENT>addMetadataVisibleAnnotationsToElement(declaration, annotations.toList())<EOL><INDENT>}"}
{"signature": "if (x.qualifier == null && x.name in localVariables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val fieldName = context.getFieldName(x.name!!)<EOL><INDENT><INDENT><INDENT><INDENT>ctx.replaceMe(JsNameRef(fieldName, JsThisRef()).source(x.source))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testJavaConstantUnchangedUsedInKotlin() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val switchBuilder =", "body": "JsAstProtoBuf.Switch.newBuilder()<EOL>"}
{"signature": "if (s == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "var delegateProvided =", "body": "false<EOL>"}
{"signature": "fun error(f: Inv<out Parent>, w: Inv<Child>) {", "body": "<EOL><INDENT>consume(select(f, wrapper<Child>()))<EOL>}"}
{"signature": "var consistentDataClassCopyVisibility =", "body": "false<EOL>"}
{"signature": "val targetProject =", "body": "subproject?.let { subProject(it) } ?: this<EOL>"}
{"signature": "val qualifiedNameAsFqName =", "body": "docName.getQualifiedNameAsFqName()<EOL>"}
{"signature": "val esClassToPossibilityForOptimization =", "body": "DefaultDelegateFactory.newDeclarationToValueMapping<IrClass, MutableReference<Boolean>>()<EOL>"}
{"signature": "var processedPattern =", "body": "patternString<EOL>"}
{"signature": "val narrowArg =", "body": "narrowType(fromType, expression.type, argument())<EOL>"}
{"signature": "fun assertEquals(expected: Map<String, Set<Int>>, actual: Map<String, Set<Int>>) {", "body": "<EOL><INDENT><INDENT>assertEquals(expected.prettyStringForDiff(), actual.prettyStringForDiff())<EOL><INDENT>}"}
{"signature": "val linuxArm<NUM_LIT>Hfp =", "body": "Unit<EOL>"}
{"signature": "package interop;<EOL>.", "body": ""}
{"signature": "val HIDDEN_CHEAP_MODULE_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "var targets =", "body": "mutableListOf(<STR_LIT>)<EOL>"}
{"signature": "fun setDescriptorAndLibraryByName(name: String, descriptor: ModuleDescriptor, library: KotlinLibrary) {", "body": "<EOL><INDENT><INDENT>stdlibPathToDescriptor[name] = descriptor<EOL><INDENT><INDENT>descriptorToLibrary[descriptor] = library<EOL><INDENT>}"}
{"signature": "val actualDelegatedTypeRef =", "body": "(actualTypeRef as? FirResolvedTypeRef?)?.delegatedTypeRef ?: return<EOL>"}
{"signature": "if (assignableParams.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitFunction(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (sideEffects) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>invalidateTemporaries()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setFace(face: SomeFace<T>?) {", "body": "}<EOL><INDENT>fun setString(string: String?) {}"}
{"signature": "val ABI_SNAPSHOT_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (actualIt.hasNext()) {", "body": "<EOL><INDENT><INDENT>check(!expectedIt.hasNext())<EOL><EOL><INDENT><INDENT>fail(messagePrefix(message) + <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val both =", "body": "Host::both as KMutableProperty<NUM_LIT><Int><EOL>"}
{"signature": "val itemName =", "body": "this@matchAllWith.namer.determineName(item)<EOL>"}
{"signature": "val toExclude =", "body": "ps.toSet()<EOL>"}
{"signature": "if (candidate == null) {", "body": "<EOL><INDENT><INDENT><INDENT>candidate = declaration<EOL><INDENT><INDENT>}"}
{"signature": "if (boundKind == EXACT_BOUND || boundKind == LOWER_BOUND) {", "body": "<EOL><INDENT><INDENT><INDENT>addBound(typeVariable, notNullConstrainingType, LOWER_BOUND, constraintContext)<EOL><INDENT><INDENT>}"}
{"signature": "val notImplemented =", "body": "mutableListOf<FirCallableSymbol<*>>()<EOL>"}
{"signature": "val superProperty =", "body": "superFunctionInterface.declarations<EOL>"}
{"signature": "if (results.add(element)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>yield(element)<EOL><INDENT><INDENT><INDENT><INDENT>resolveQueue.add(element)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun someTest() {", "body": "}<EOL><EOL>@Test(expected = IOException::class)<EOL>fun someRest() {}"}
{"signature": "val interpretCPointerFunName =", "body": "<STR_LIT><EOL>"}
{"signature": "val attr<NUM_LIT>Value =", "body": "conf.attributes.getAttribute(disambiguation<NUM_LIT>Attribute)<EOL>"}
{"signature": "val publicConst =", "body": "<NUM_LIT><EOL>"}
{"signature": "val entrySetClass =", "body": "entriesFunction.owner.returnType.erasedUpperBound<EOL>"}
{"signature": "val componentSubstitutedCall =", "body": "pregenerateCall(componentResolvedCall)<EOL>"}
{"signature": "val receiverRef =", "body": "receiverName.makeRef()<EOL>"}
{"signature": "when (typeConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrTypeParameterSymbol -> emptyList()<EOL><INDENT><INDENT><INDENT>is IrClassSymbol -> extractTypeParameters(typeConstructor.owner)<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun throwsNamedArrayOfUnresolved() {", "body": "}<EOL><EOL>@Throws(*<!NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION!>[<!ANNOTATION_ARGUMENT_MUST_BE_CONST!><!UNRESOLVED_REFERENCE!>UE<!>::class<!>]<!>)<EOL>fun throwsSpreadLiteralWithUnresolved() {}"}
{"signature": "if (length == <NUM_LIT> || builder[length - <NUM_LIT>] != ' ') {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(' ')<EOL><INDENT><INDENT>}"}
{"signature": "var wasThrown =", "body": "false<EOL>"}
{"signature": "fun compilerOptions(configure: CO.() -> Unit) {", "body": "<EOL><INDENT><INDENT>configure(compilerOptions)<EOL><INDENT>}"}
{"signature": "val K_CLASS_CACHE =", "body": "createCache { KClassImpl(it) }<EOL>"}
{"signature": "for (receiverType in extension.addNewImplicitReceivers(functionCall)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val receiverValue = ImplicitExtensionReceiverValue(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>boundSymbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>receiverType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>session,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>scopeSession<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>context.addReceiver(name = null, receiverValue)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val iosArm<NUM_LIT>Interop =", "body": "kotlin.iosArm<NUM_LIT>(<STR_LIT>).compilations.getByName(<STR_LIT>).cinterops.create(<STR_LIT>).identifier<EOL>"}
{"signature": "var newValues =", "body": "VALUES<EOL>"}
{"signature": "val isToNullable =", "body": "toType.isNullable()<EOL>"}
{"signature": "val javaPackages =", "body": "mutableMapOf<FqName, TreeBasedPackage>()<EOL>"}
{"signature": "when (symbol.modality) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Modality.FINAL -> null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> WITH_IMPLICIT_MODALITY.getModalityModifier(analysisSession, symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val bHasReceiverType =", "body": "if (bReceiver != null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val requiresPosition =", "body": "lookupTracker.requiresPosition<EOL>"}
{"signature": "if (task.name == kaptGenerateStubsTaskName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>configureKotlinTask(task)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun saveReport(pass: Int, statistics: FirResolveBench.TotalStatistics) {", "body": "<EOL><INDENT><INDENT>if (DUMP_FIR) dump.finish()<EOL><INDENT><INDENT>printStatistics(statistics, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun generateGlobalReturnFlag(iv: InstructionAdapter, labelName: String) {", "body": "<EOL><INDENT>iv.invokestatic(NON_LOCAL_RETURN, labelName, <STR_LIT>, false)<EOL>}"}
{"signature": "val minus<NUM_LIT> =", "body": "twoVal.<!EVALUATED(<STR_LIT>)!>minus(doubleVal)<!><EOL>"}
{"signature": "fun testColorsDisabledByDefault() {", "body": "<EOL><INDENT><INDENT>doTest(MessageRenderer.WITHOUT_PATHS, false)<EOL><INDENT>}"}
{"signature": "val llvmAr =", "body": "ClangArgs.Native(testRunSettings.configurables).llvmAr().first()<EOL>"}
{"signature": "fun checkPreCondition(loopExit: Label) {", "body": "<EOL><INDENT><INDENT>v.load(iteratorVar, asmTypeForIterator)<EOL><INDENT><INDENT>v.invokeinterface(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>v.ifeq(loopExit)<EOL><INDENT>}"}
{"signature": "var allDiagnostics =", "body": "info.analysisResult.bindingContext.diagnostics.toList()<EOL>"}
{"signature": "package dollar<EOL>.", "body": ""}
{"signature": "val resolvedTypeRef =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>calleeReference.superTypeRef as? FirResolvedTypeRef<EOL>"}
{"signature": "var indexInGroup =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (child in directChildrenSnapshot) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>child.acceptChildrenVoid(this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val superInvokeSuspendFunction =", "body": "coroutineBaseClass.owner.simpleFunctions().single { it.name == stateMachineMethodName }<EOL>"}
{"signature": "val minValue =", "body": "keys.first()<EOL>"}
{"signature": "val historyEither =", "body": "getBuildHistoryFilesForJar(jar)<EOL>"}
{"signature": "var activeLocalGaps =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun usage(i: I) {", "body": "*<INDENT> i.foo() // Here we invoke * }"}
{"signature": "val loweredConstructor =", "body": "capturedConstructors[originalConstructor]!!<EOL>"}
{"signature": "val architectureDir =", "body": "Android.architectureDirForTarget(target)<EOL>"}
{"signature": "for (b in listOf(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return b<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val entityName =", "body": "presetEntry.entityName<EOL>"}
{"signature": "val ordinalProp =", "body": "serializableDescriptor.unsubstitutedMemberScope.getContributedVariables(<EOL>"}
{"signature": "fun configuration(code: Configuration.() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configurationConfigurations += code<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lambdaDescriptor =", "body": "getOrFail(BindingContext.FUNCTION, ktFunction)<EOL>"}
{"signature": "var deprecated =", "body": "false<EOL>"}
{"signature": "val code =", "body": "this.code<EOL>"}
{"signature": "val re =", "body": "namePatternToRegex(pattern)<EOL>"}
{"signature": "val emptyFile =", "body": "Files.createTempFile(<STR_LIT>,<STR_LIT>).toFile()<EOL>"}
{"signature": "val parameterTypeUnsubstituted =", "body": "getFunctionTypeForSamType(unsubstitutedSamType, samResolver, samConversionOracle)<EOL>"}
{"signature": "val classModuleSession =", "body": "classLikeDeclaration.moduleData.session<EOL>"}
{"signature": "if (actualSymbol == null || !actualSymbol.isBound) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>moduleDeserializer.addModuleReachableTopLevel(actualSig)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (withPsiDeclarationFromBinaryModuleProvider) {", "body": "<EOL><INDENT><INDENT><INDENT>registerPsiDeclarationFromBinaryModuleProvider()<EOL><INDENT><INDENT>}"}
{"signature": "fun started(e: TaskEvent) {", "body": "<INDENT><INDENT>// do nothing, we just process on finish<INDENT>}"}
{"signature": "val inverseDependencies =", "body": "oldMetadata.inverseDependencies.toMutable()<EOL>"}
{"signature": "import it into the file if importing it is needed for the shortening.", "body": "<EOL>"}
{"signature": "val uInt =", "body": "module.findClassAcrossModuleDependencies(StandardNames.FqNames.uInt)?.defaultType ?: return false<EOL>"}
{"signature": "if (propertyDescriptor.isSyntheticEnumEntries()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportOn,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageFeature.EnumEntries to languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val abbreviation =", "body": "if (proto.hasAbbreviation()) deserializeTypeAbbreviation(proto.abbreviation) else null<EOL>"}
{"signature": "val isImplicitElseRequired =", "body": "<EOL><INDENT><INDENT><INDENT>if (isUsedAsExpression)<EOL>"}
{"signature": "if (transformedLhsCall.calleeReference.toResolvedBaseSymbol()?.origin == FirDeclarationOrigin.DynamicScope) {", "body": "<EOL><INDENT><INDENT><INDENT>return chooseAssign()<EOL><INDENT><INDENT>}"}
{"signature": "if (arg.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>current.setLocal(local, interpreter.newEmptyValue(local))<EOL><INDENT><INDENT><INDENT><INDENT>local++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val coreLibraryPath =", "body": "getSerializationLibraryJar(<STR_LIT>)<EOL>"}
{"signature": "val convertedFiles =", "body": "getJavaFiles(info)<EOL>"}
{"signature": "val MS =", "body": "Short.MIN_VALUE<EOL>"}
{"signature": "fun test<NUM_LIT>(x: Ref?) {", "body": "<EOL><INDENT>x?.value = <NUM_LIT><EOL>}"}
{"signature": "val libraryKFile =", "body": "KFile(libraryFile.absolutePath)<EOL>"}
{"signature": "var needsWrappingGroup =", "body": "false<EOL>"}
{"signature": "fun testHelloWorld() {", "body": "<EOL><INDENT><INDENT>Assert.assertEquals(<STR_LIT>, Greeter(<STR_LIT>).greeting)<EOL><INDENT>}"}
{"signature": "fun testCompare(uv<NUM_LIT>: ULong, uv<NUM_LIT>: ULong, expected<NUM_LIT><NUM_LIT>: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>testComparison(uv<NUM_LIT>, uv<NUM_LIT>, expected<NUM_LIT><NUM_LIT>)<EOL><INDENT><INDENT><INDENT>testComparison(uv<NUM_LIT>, uv<NUM_LIT>, -expected<NUM_LIT><NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (data.inConstantExpression || isConst) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitGetField(expression, data.copy(inConstantExpression = true))<EOL><INDENT><INDENT>}"}
{"signature": "fun valuesRemoveAll() {", "body": "<EOL><INDENT><INDENT>val expected = mapOf(<STR_LIT> to <STR_LIT>, <STR_LIT> to <STR_LIT>, <STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT>val m = HashMap(expected)<EOL><INDENT><INDENT>assertFalse(m.values.removeAll(listOf(<STR_LIT>, <STR_LIT>)))<EOL><INDENT><INDENT>assertEquals(expected, m)<EOL><INDENT><INDENT>assertTrue(m.values.removeAll(listOf(<STR_LIT>, <STR_LIT>)))<EOL><INDENT><INDENT>assertEquals(mapOf(<STR_LIT> to <STR_LIT>, <STR_LIT> to <STR_LIT>), m)<EOL><INDENT>}"}
{"signature": "val invokeFun =", "body": "this.irClass.declarations.filterIsInstance<IrSimpleFunction>().single { it.name == OperatorNameConventions.INVOKE }<EOL>"}
{"signature": "if (continueTargetStatement != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultContinueTarget = continueTargetStatement<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nextInput =", "body": "inputIter.next().first ?: continue<EOL>"}
{"signature": "fun test<NUM_LIT>(noinline s : Int.() -> Int) {", "body": "<EOL><EOL>}"}
{"signature": "val arr =", "body": "arrayOfNulls<Int>(<NUM_LIT>)<EOL>"}
{"signature": "if (nullabilityDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return nullabilityDiff<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (BackReferenceHandling.captureLargestValidIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val match = pattern.toRegex().find(<STR_LIT>)!!<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, match.value)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, match.groups[<NUM_LIT>]?.value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun main(c: C) {", "body": "<EOL><INDENT>if (c !is B) return<EOL><INDENT>c.foo()<EOL>}"}
{"signature": "val reportOnProperty =", "body": "abstractMember.containingDeclaration == descriptor<EOL>"}
{"signature": "for (i in oneToFive) {", "body": "<EOL><INDENT><INDENT>sum += i;<EOL><INDENT>}"}
{"signature": "if (file.modificationStamp == requestCache.modificationStamp && file == requestCache.virtualFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return requestCache.result<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val tpIndex =", "body": "inner.index()<EOL>"}
{"signature": "fun testIdenticalInternalVisibility() {", "body": "}<EOL>internal fun testIdenticalInternalVisibility() {}"}
{"signature": "if (member.typeParameter != null || !sourceSet.containsType(member.name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>failedToResolveUnionTypes += unionType.name<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun swipeWithEvent(event: NSEvent) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val colonIndex =", "body": "trimmedCheckLine.indexOf(':')<EOL>"}
{"signature": "val TABLE_INIT =", "body": "<STR_LIT><EOL>"}
{"signature": "val lineIterator =", "body": "lines.listIterator()<EOL>"}
{"signature": "val uniqueSymbols =", "body": "mutableSetOf<D>()<EOL>"}
{"signature": "val processedLine =", "body": "line.substringBefore(<STR_LIT>).trim()<EOL>"}
{"signature": "val targetTypeReference =", "body": "expression.right<EOL>"}
{"signature": "val facadeShortName =", "body": "multifileFacadeId?.let(multifileFacadeShortNames::getOrNull)<EOL>"}
{"signature": "val sessionFlagFile =", "body": "makeAutodeletingFlagFile(<STR_LIT>, File(daemonOptions.runFilesPathOrDefault))<EOL>"}
{"signature": "val randomValues =", "body": "List(<NUM_LIT>) { Random.nextInt(<NUM_LIT>, <NUM_LIT><NUM_LIT>) }<EOL>"}
{"signature": "val hashAbiSize =", "body": "filesToLoad.sumBy { dataForFiles[it]!!.classAbiHash.size }<EOL>"}
{"signature": "for (supertype in immediateSupertypes) {", "body": "<EOL><INDENT><INDENT>collectAllSupertypes(supertype, result)<EOL><INDENT>}"}
{"signature": "val isWindows =", "body": "platform.get().isWindows()<EOL>"}
{"signature": "val closure =", "body": "annotator.getClassClosure(declaration)<EOL>"}
{"signature": "val parameterSource =", "body": "ktParameter.toFirSourceElement()<EOL>"}
{"signature": "if (kotlinCall.callKind == KotlinCallKind.VARIABLE) {", "body": "<EOL><INDENT><INDENT><INDENT>errorScope.getContributedVariables(kotlinCall.name, scopeTower.location)<EOL><INDENT><INDENT>}"}
{"signature": "fun check(b: Boolean, message: String) {", "body": "<EOL><INDENT>if (!b) throw RuntimeException(message)<EOL>}"}
{"signature": "val firDefaultValue =", "body": "firValueParameter.defaultValue<EOL>"}
{"signature": "fun unfoldGetClass(element: IrGetClass, callStack: CallStack) {", "body": "<EOL><INDENT>callStack.pushSimpleInstruction(element)<EOL><INDENT>callStack.pushCompoundInstruction(element.argument)<EOL>}"}
{"signature": "val canonicalClassesKeys =", "body": "intArrayOf(<EOL>"}
{"signature": "if (sourceScope is HierarchicalScope) {", "body": "<EOL><INDENT><INDENT>descriptorToLookup.canBeResolvedWithoutDeprecation(<EOL><INDENT><INDENT><INDENT>sourceScope,<EOL><INDENT><INDENT><INDENT>diagnostic.lookupLocation<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val icUtils =", "body": "context.inlineClassesUtils<EOL>"}
{"signature": "val DECLARATION_KEYWORDS =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val evaluationConfigurationInstance =", "body": "scriptConfigInstance(mainAnnotation.evaluationConfiguration)<EOL>"}
{"signature": "if (errorMessage?.replace(SIGNATURE_WITH_HASH) {", "body": "it.groupValues[<NUM_LIT>] + <STR_LIT> }"}
{"signature": "val captured =", "body": "linkedMapOf<DeclarationDescriptor, JsName>()<EOL>"}
{"signature": "fun invoke(s: String)<EOL><EOL><INDENT>private fun privateFun() {", "body": "}<EOL><INDENT>private var privateProperty: String<EOL><INDENT><INDENT>get() = <STR_LIT><EOL><INDENT><INDENT>set(value) {}"}
{"signature": "val jcSuperClass =", "body": "parseType(superClasses.single().children.single())<EOL>"}
{"signature": "fun generateSyntheticProperties(<EOL><INDENT><INDENT>thisDescriptor: ClassDescriptor,<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>bindingContext: BindingContext,<EOL><INDENT><INDENT>fromSupertypes: ArrayList<PropertyDescriptor>,<EOL><INDENT><INDENT>result: MutableSet<PropertyDescriptor><EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "var cOrDCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val transformedFunctionSet =", "body": "mutableSetOf<IrSimpleFunction>()<EOL>"}
{"signature": "val directoriesToCopy =", "body": "mutableListOf<FileTreeToCopy>()<EOL>"}
{"signature": "if (e % <NUM_LIT> == <NUM_LIT> && counter % <NUM_LIT> == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>yield(e)<EOL><INDENT><INDENT>}"}
{"signature": "if (!scope.isInlinedLambda) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val removeExpectDeclarationsPhase =", "body": "createFileLoweringPhase(<EOL>"}
{"signature": "val destTy =", "body": "first.type<EOL>"}
{"signature": "val maximallySpecific =", "body": "findMaximallySpecific(noOverrides, checkArgumentsMode, false)<EOL>"}
{"signature": "if (new(fun(z: Z<Int>) {", "body": "}"}
{"signature": "var MyDemo<NUM_LIT>OpenSetterCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (onlyFalse(x !is String)) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val benchmarkSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "val fileFacadeMd =", "body": "Class.forName(<STR_LIT>).getMetadata()<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>b != null<!>) {", "body": "<INDENT><INDENT>// 'a' cannot be cast to SomeSubClass!<INDENT><INDENT>a<!UNSAFE_CALL!>.<!>hashCode()<INDENT><INDENT>a.<!UNRESOLVED_REFERENCE!>foo<!><INDENT><INDENT>(a as? SomeSubClass)<!UNSAFE_CALL!>.<!>foo<INDENT><INDENT>(a as SomeSubClass).foo<INDENT>}"}
{"signature": "val sourcesToReprocess =", "body": "changedSources.toMutableSet()<EOL>"}
{"signature": "var local<NUM_LIT> =", "body": "null, local<NUM_LIT> = null ...<EOL>"}
{"signature": "fun setA(t: Any) {", "body": "}"}
{"signature": "val elementTypeByUnsignedArrayType =", "body": "unsignedArrayTypeByElementType.inverseMap()<EOL>"}
{"signature": "val isBoxUsed =", "body": "body.replaceThisWithBoxBeforeSuperCall(irClass, boxParameter.symbol)<EOL>"}
{"signature": "val asmValue =", "body": "asmAnnotationArgs[descName.asString()] ?: return false<EOL>"}
{"signature": "val ignoreErrors =", "body": "IGNORE_FIR_DIAGNOSTICS in part.module.directives<EOL>"}
{"signature": "val validWithNullArgs =", "body": "expression.validWithNullArgs()<EOL>"}
{"signature": "if (lastArgument != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>markRange(lastArgument, rightParenthesis)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import<EOL> */<EOL>.", "body": ""}
{"signature": "val firClassOrigin =", "body": "firClass.irOrigin(c)<EOL>"}
{"signature": "val classOrigin =", "body": "getDeclarationOriginFor(classLikeDeclaration.containingKtFile)<EOL>"}
{"signature": "if (!context.ghaEnabled()) {", "body": "<EOL><INDENT><INDENT>call(llvm.isSubtypeFunction, listOf(objTypeInfo, codegen.typeInfoValue(dstClass)))<EOL><INDENT>}"}
{"signature": "if (dependencyLibraries.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>); add(dependencyLibraries.joinToString(<STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lastParameterIndex =", "body": "parameters.lastIndex<EOL>"}
{"signature": "val nameFromParents =", "body": "parents.joinToString(separator = <STR_LIT>) { suggestLocalName(it as IrDeclarationWithName) }<EOL>"}
{"signature": "import javax.", "body": "inject.Inject<EOL>"}
{"signature": "fun wasm<NUM_LIT>wat(input: File, output: File) {", "body": "<EOL><INDENT><INDENT>wasm<NUM_LIT>watTool.runAndPrint(<STR_LIT>, input.absolutePath, <STR_LIT>, output.absolutePath)<EOL><INDENT>}"}
{"signature": "val throwLinkageError =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val _array =", "body": "arrayOf(A(<NUM_LIT>))<EOL>"}
{"signature": "val catchFinallyStack =", "body": "Stack<CatchFinallyLabels>()<EOL>"}
{"signature": "var remainingTokens =", "body": "tokens<EOL>"}
{"signature": "val entriesFunction =", "body": "irClass.getPropertyGetter(<STR_LIT>)!!<EOL>"}
{"signature": "val receiverFqName =", "body": "receiverClassType?.classId?.asSingleFqName()<EOL>"}
{"signature": "for (val (a: Int, b: Int) in b) {", "body": "}"}
{"signature": "val insertionPoint =", "body": "goodFunctionsByPrefix.binarySearch(name).let { if (it < <NUM_LIT>) it.inv() else it }<EOL>"}
{"signature": "if (diagnosticsPerProject.size == <NUM_LIT> && compactRendering) {", "body": "<EOL><INDENT><INDENT>diagnosticsPerProject.entries.single().value.render()<EOL><INDENT>}"}
{"signature": "fun printMessage() {", "body": "print(<STR_LIT>) }"}
{"signature": "val excludedFirTestdataPattern =", "body": "TestGeneratorUtil.KT_OR_KTS_WITH_FIR_PREFIX<EOL>"}
{"signature": "fun checkPlatform() {", "body": "<EOL><INDENT><INDENT>Assume.assumeTrue(HostManager.hostIsMac)<EOL><INDENT>}"}
{"signature": "val pointerWithoutPsiAnchor =", "body": "if (directiveToIgnoreSymbolRestore == null && directiveToIgnoreNonPsiSymbolRestore == null)<EOL>"}
{"signature": "if (context.languageVersionSettings.supportsFeature(LanguageFeature.JsAllowInvalidCharsIdentifiersEscaping)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val tsDefinitionsFile =", "body": "File(cacheDir, CACHED_MODULE_D_TS).ifExists { this }<EOL>"}
{"signature": "val topLevelCallableNamesByPackage =", "body": "<EOL><INDENT><INDENT>session.firCachesFactory.createCache(::computeTopLevelCallableNames)<EOL>"}
{"signature": "val pathConverter =", "body": "RelocatableFileToPathConverter((workingDir.canonicalFile))<EOL>"}
{"signature": "val commentOrNull =", "body": "objCCommentOrNull(mustBeDocumentedAttributeList(property.annotations) + visibilityComments)<EOL>"}
{"signature": "if (explicitLanguageVersionSettings != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.languageVersionSettings = explicitLanguageVersionSettings<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val prologueBb =", "body": "basicBlockInFunction(<STR_LIT>, null)<EOL>"}
{"signature": "val bucketsSelectors =", "body": "createBucketSelectors(<EOL>"}
{"signature": "val irVarargElement =", "body": "<EOL><INDENT><INDENT><INDENT>if (varargElementArgument.getSpreadElement() != null ||<EOL>"}
{"signature": "val finalElement =", "body": "last<EOL>"}
{"signature": "fun ktest<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>super.<!INTERFACE_CANT_CALL_DEFAULT_METHOD_VIA_SUPER!>test<!>()<EOL><EOL><INDENT><INDENT>test()<EOL><INDENT>}"}
{"signature": "val iFoo =", "body": "IFoo::class.java<EOL>"}
{"signature": "for (declaration in declarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>appendLine(declaration.render())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val colon =", "body": "declaration.colon!!<EOL>"}
{"signature": "val valueVar =", "body": "info.value?.let { context.getNameForDescriptor(it) }<EOL>"}
{"signature": "val MutableListIterator =", "body": "<STR_LIT>.collectionsId()<EOL>"}
{"signature": "val moduleHeaderProto =", "body": "parseModuleHeader(library.moduleHeaderData)<EOL>"}
{"signature": "var v =", "body": "<NUM_LIT><EOL>"}
{"signature": "val enumSyntheticFunsLoweringPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "if (!it.isReified) {", "body": "<INDENT><INDENT><INDENT><INDENT>// E.g., fun <T: Any> foo(): Any = T::class<INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.TYPE_PARAMETER_AS_REIFIED, it, context)<INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(base: Array<out Base>) {", "body": "<EOL><INDENT>result = base[<NUM_LIT>].name<EOL>}"}
{"signature": "val withPlatform =", "body": "if (descriptor is MemberDescriptor && descriptor.isActual)<EOL>"}
{"signature": "for ((abiSignatureVersion, dumper) in dumpers) {", "body": "<EOL><INDENT><INDENT><INDENT>LibraryAbiRenderer.render(libraryAbi, dumper.builderForModule(module), AbiRenderingSettings(abiSignatureVersion))<EOL><INDENT><INDENT>}"}
{"signature": "val ifNull<NUM_LIT> =", "body": "insn.next as JumpInsnNode<EOL>"}
{"signature": "fun addClass(c: IrClass, stabilityInferredParametersValue: Int) {", "body": "<EOL><INDENT><INDENT>classesToValues[c.descriptor] = stabilityInferredParametersValue<EOL><INDENT>}"}
{"signature": "if (renderedAnnotation.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotationsBuffer.add(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderedAnnotation + (if (this is PsiParameter || this is PsiTypeParameter) <STR_LIT> else <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinNativeCompile =", "body": "project.registerTask<KotlinNativeCompile>(<EOL>"}
{"signature": "if (symbolCanBeExported) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>idSignatureToFile[signature] = IdSignatureSource(libFile, fileSymbolProvider, symbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val elementsToReorder =", "body": "this.getContent<Element> { it is Element && it.getAttribute(<STR_LIT>)?.value in normalOrdering }<EOL>"}
{"signature": "if (data is TowerData.TowerLevel) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.level.recordLookup(name)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun registerDisposableObject(ownedObject: Closeable) {", "body": "<EOL><INDENT><INDENT>disposableObjects.add(ownedObject)<EOL><INDENT>}"}
{"signature": "val targetIndex =", "body": "context.projectDescriptor.buildTargetIndex<EOL>"}
{"signature": "if (anonymousInitializer.body is FirLazyBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>val designation = FirDesignation(data, anonymousInitializer)<EOL><INDENT><INDENT><INDENT>calculateLazyBodyForAnonymousInitializer(designation)<EOL><INDENT><INDENT>}"}
{"signature": "if (index >= data.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>done()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (failFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinTestUtils.assertEqualsToFile(failFile, e.message ?: <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (data != null && !data.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>nonEmpty.add(data)<EOL><INDENT><INDENT>}"}
{"signature": "val dirty =", "body": "metas.find { it.paramRef?.maskParam is IrChangedBitMaskVariable }<EOL>"}
{"signature": "val renderedValue =", "body": "symbolRenderer.render(session, value)<EOL>"}
{"signature": "val libBuildScriptBackup =", "body": "libBuildScript.readText()<EOL>"}
{"signature": "val jvmClassName =", "body": "JvmClassName.byInternalName(facadeInternalName)<EOL>"}
{"signature": "package j<EOL>.", "body": ""}
{"signature": "if (primitive in PrimitiveType.unsignedPrimitives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sourceFile(SourceFile.URanges)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testThrowsCME(withArrayList: WithCollection<ArrayList<String>>) {", "body": "<EOL><INDENT><INDENT><INDENT>testIteratorThrowsCME(withArrayList, operations)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in array.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>Blackhole.consume(array[i])<EOL><INDENT><INDENT>}"}
{"signature": "fun newPublishedFun() {", "body": "}<EOL><EOL><EOL>@RequiresOptIn<EOL>@Retention(AnnotationRetention.BINARY)<EOL>annotation class Marker<EOL><EOL>@SinceKotlin(<STR_LIT>)<EOL>@WasExperimental(Marker::class)<EOL>fun newFunExperimentalInThePast() {}"}
{"signature": "val definedTarget =", "body": "scriptCompilationConfiguration[ScriptCompilationConfiguration.jvm.jvmTarget]<EOL>"}
{"signature": "val argumentConstructor =", "body": "argumentType?.typeConstructor()<EOL>"}
{"signature": "val FIELD_FOR_PROPERTY =", "body": "JvmSerializationBindings.SerializationMappingSlice.create<FirProperty, Pair<Type, String>>()<EOL>"}
{"signature": "for ((x, _, z) in aA) {", "body": "<EOL><INDENT><INDENT>return x + z<EOL><INDENT>}"}
{"signature": "val newCatchParameter =", "body": "buildVariable(<EOL>"}
{"signature": "for (x in US_START until US_MAX) {", "body": "<EOL><INDENT><INDENT>if (x > US_MAX.toUInt()) throw AssertionError()<EOL><INDENT>}"}
{"signature": "val possibleTargets =", "body": "applicableTargets.intersect(actualTargets)<EOL>"}
{"signature": "val copyOfSymbol =", "body": "symbols.copyOf[arraySymbol]!!<EOL>"}
{"signature": "val tryBlockStart =", "body": "markNewLabel()<EOL>"}
{"signature": "fun bar(doIt: Int.() -> Int) {", "body": "<EOL><INDENT><NUM_LIT>doIt()<EOL><INDENT><NUM_LIT><!UNNECESSARY_SAFE_CALL!>?.<!>doIt()<EOL><INDENT>val i: Int? = <NUM_LIT><EOL><INDENT>i<!UNSAFE_CALL!>.<!>doIt()<EOL><INDENT>i?.doIt()<EOL>}"}
{"signature": "if (memberDescriptor is FunctionDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateDelegationToSuperDefaultImpls(memberDescriptor, implementation as FunctionDescriptor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useUnchanged(e: Enum) {", "body": "<EOL><INDENT>println(e.unchanged.string())<EOL>}"}
{"signature": "val bundleSize =", "body": "if (infoParts[<NUM_LIT>] != <STR_LIT>) infoParts[<NUM_LIT>] else null<EOL>"}
{"signature": "val specifiers =", "body": "element.superTypeListEntries<EOL>"}
{"signature": "fun testPodDownloadGitSubspec(gradleVersion: GradleVersion) {", "body": "<INDENT><INDENT>doTestGit(<INDENT><INDENT><INDENT>gradleVersion,<INDENT><INDENT><INDENT>repo = <STR_LIT>,<INDENT><INDENT><INDENT>pod = <STR_LIT>,<INDENT><INDENT><INDENT>tag = <STR_LIT><INDENT><INDENT>)<INDENT>}"}
{"signature": "val newConstraintCanAddNullabilityToOtherOne =", "body": "<EOL><INDENT><INDENT><INDENT>newConstraint.isNullableType() && !otherConstraint.isNullableType() && kind == ConstraintKind.UPPER<EOL>"}
{"signature": "val nextOffset =", "body": "indexToOffset[idx + <NUM_LIT>]<EOL>"}
{"signature": "if (shouldBeTransformed(methodNode)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>performTransformations(methodNode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stringToInt =", "body": "listOf(<STR_LIT>, <STR_LIT>).map { it.length }<EOL>"}
{"signature": "fun add(diagnostic: KtDiagnosticFactory<NUM_LIT>, creator: KtFirDiagnostic<NUM_LIT>Creator) {", "body": "<EOL><INDENT><INDENT>conversions[diagnostic] = creator<EOL><INDENT>}"}
{"signature": "when(p) {", "body": "<EOL><INDENT><INDENT>null -> <NUM_LIT><EOL><INDENT><INDENT>else -> p!!<EOL><INDENT>}"}
{"signature": "val functionOrProperty =", "body": "functionOrPropertyBaseCommonizer(values) ?: return null<EOL>"}
{"signature": "package names because we are sure that annotations from them<EOL>.", "body": ""}
{"signature": "if (emitNameSection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendTextSection(definedFunctions)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TEMP_FUNCTION_FOR_INTERPRETER =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val SUPPORTED_PRESETS =", "body": "emptyMap<String, List<String>>()<EOL>"}
{"signature": "val firstFileChild =", "body": "firstRoot.resolve(secondFileChild.relativeTo(secondRoot))<EOL>"}
{"signature": "val oldAnnotationMode =", "body": "_annotationMode<EOL>"}
{"signature": "val receiver =", "body": "(dispatchReceiverParameter ?: extensionReceiverParameter)?.type?.getOnlyName()?.let { <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "fun testLanguage() {", "body": "<EOL><INDENT><INDENT>setUpEnvironment(<STR_LIT>)<EOL><EOL><INDENT><INDENT>val aClass = generateClass(<STR_LIT>)<EOL><INDENT><INDENT>val constructor = aClass.getConstructor(Integer.TYPE)<EOL><INDENT><INDENT>val result = aClass.getDeclaredField(<STR_LIT>)<EOL><INDENT><INDENT>result.isAccessible = true<EOL><INDENT><INDENT>val script = constructor.newInstance(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, result.get(script))<EOL><INDENT>}"}
{"signature": "if (currentModuleName != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>finishModule(lineNumber)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testNullable(x: NX?, y: NY?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] == ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] === ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "if (frameworkTargets.size == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT>// Fast path: there is only one device target. There is no need to build a fat framework.<INDENT><INDENT><INDENT>createSyncForRegularFramework(project, kotlinExtension, requestedBuildType, frameworkTargets.single().konanTarget)<INDENT><INDENT>}"}
{"signature": "val examplesForPredicate =", "body": "arrayOf(<EOL>"}
{"signature": "val strSet =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val ComposableTarget =", "body": "ComposeClassIds.ComposableTarget.asSingleFqName()<EOL>"}
{"signature": "val twoPwr<NUM_LIT> =", "body": "TWO_PWR_<NUM_LIT>_DBL_<EOL>"}
{"signature": "if (whenBranch.condition.resolvedType.isBoolean) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val conditionVariable = getVariableIfStable(flow, whenBranch.condition) ?: return@mergeIncomingFlow<EOL><INDENT><INDENT><INDENT><INDENT>flow.commitOperationStatement(conditionVariable eq true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isolatedClassLoadersMap =", "body": "ConcurrentHashMap<Any, URLClassLoader>()<EOL>"}
{"signature": "if (debugInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>this.setupBridgeDebugInfo()<EOL><INDENT><INDENT>}"}
{"signature": "when (attribute.sign) {", "body": "<EOL><INDENT><INDENT><INDENT>ConeNumberSignAttribute.Sign.Positive -> PositiveClassId<EOL><INDENT><INDENT><INDENT>ConeNumberSignAttribute.Sign.Negative -> NegativeClassId<EOL><INDENT><INDENT>}"}
{"signature": "fun canCreateAnyParameterScheme() {", "body": "<EOL><INDENT><INDENT>val lazyScheme = LazyScheme(schemeOf(<STR_LIT>))<EOL><INDENT><INDENT>assertTrue(lazyScheme.anyParameters)<EOL><INDENT><INDENT>assertTrue(lazyScheme.parameters.isEmpty())<EOL><INDENT>}"}
{"signature": "val jvmCompiledModule =", "body": "jvmCompiledScript.getCompiledModule() as KJvmCompiledModuleInMemoryImpl<EOL>"}
{"signature": "val operatorGenerator =", "body": "OperatorExpressionGenerator(c, this, conversionScope)<EOL>"}
{"signature": "package<EOL><INDENT><INDENT>val targetDescriptor = DescriptorUtils.", "body": "getParentOfType(descriptor, ClassOrPackageFragmentDescriptor::class.java) ?: return<EOL>"}
{"signature": "val libraryDataFile =", "body": "generateStructureData(ClassData(<STR_LIT>))<EOL>"}
{"signature": "fun test(name: String, ignored: Boolean, testFn: () -> Any?) {", "body": "testResult = testFn() }"}
{"signature": "fun checkLocalVariable(<EOL><INDENT><INDENT>declaration: KtProperty,<EOL><INDENT><INDENT>descriptor: VariableDescriptor,<EOL><INDENT><INDENT>bindingTrace: BindingTrace<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>if (declaration.typeReference != null) return<EOL><EOL><INDENT><INDENT>checkNullabilityAssertion(declaration.initializer ?: return, descriptor.type, bindingTrace)<EOL><INDENT>}"}
{"signature": "if (digit in '<NUM_LIT>'..'<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>digits.add(digit.toInt() - '<NUM_LIT>'.toInt())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addValue(t: String, weight: Long?) {", "body": "<EOL><INDENT><INDENT>myValues.add(t.replace(SEPARATOR, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "if (str.toString() != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val originalPathPsi =", "body": "targetPathPsi.unwrapCopy(targetPsiFile) ?: return null<EOL>"}
{"signature": "var improvements =", "body": "mapOf<String, ScoreChange>()<EOL>"}
{"signature": "val GENERIC_ARGUMENT_UAST =", "body": "TypeMappingMode(mapTypeAliases = true)<EOL>"}
{"signature": "val TEST_OUTPUT_COMPONENT_SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "if (method != null) {", "body": "<EOL><INDENT><INDENT>method()<EOL><INDENT>}"}
{"signature": "if (!areTypesTheSame(expectedBound, candidateBound)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val samCandidateNames =", "body": "mutableSetOf<Name>()<EOL>"}
{"signature": "fun declarePropertyWithSignature(signature: IdSignature, symbol: IrPropertySymbol) {", "body": "<EOL><INDENT><INDENT>propertySlice.set(signature, symbol)<EOL><INDENT>}"}
{"signature": "fun bar<NUM_LIT>(x: Int) {", "body": "}<EOL>fun bar<NUM_LIT>(s: String) {}"}
{"signature": "val classBuilder =", "body": "createRemappingClassBuilderViaFactory(inliningContext)<EOL>"}
{"signature": "val processorPath =", "body": "projectPath.resolve(<STR_LIT>).toFile()<EOL>"}
{"signature": "var LibDemoOpenGetterCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (permittedSubclass != null) {", "body": "<EOL><INDENT><INDENT><INDENT>declarationsInsideClass.add(Declaration(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "while (info != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>info = info.outerName?.takeIf(::add)?.let(innerClassInfos::get)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (smartCastSubtypingResult == null) {", "body": "<EOL><INDENT><INDENT><INDENT>tracing.wrongReceiverType(<EOL><INDENT><INDENT><INDENT><INDENT>trace, receiverParameter, receiverArgument,<EOL><INDENT><INDENT><INDENT><INDENT>this.replaceCallPosition(CallPosition.ExtensionReceiverPosition(candidateCall))<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return OTHER_ERROR<EOL><INDENT><INDENT>}"}
{"signature": "val oldIsInlineFunctionContext =", "body": "isInlineFunctionContext<EOL>"}
{"signature": "val unwrappedLhs =", "body": "parenthesizedExpression.expression ?: return<EOL>"}
{"signature": "val valueToConvert =", "body": "expression.extensionReceiver!!<EOL>"}
{"signature": "val barClass =", "body": "kotlinClassesDir().resolve(<STR_LIT>).toFile()<EOL>"}
{"signature": "val anonymousObject =", "body": "JavaClass.anonymousObject()<EOL>"}
{"signature": "for ((nonStaticDefaultSymbol, staticDefault) in staticDefaultStubs) {", "body": "<EOL><INDENT><INDENT><INDENT>val staticDefaultSymbol = staticDefault.symbol<EOL><INDENT><INDENT><INDENT>val newNonStaticDefaultSymbol = functionSymbolMap[nonStaticDefaultSymbol] ?: continue<EOL><INDENT><INDENT><INDENT>val newStaticDefaultSymbol = staticDefaultStubs[newNonStaticDefaultSymbol]?.symbol ?: continue<EOL><INDENT><INDENT><INDENT>functionSymbolMap[staticDefaultSymbol] = newStaticDefaultSymbol<EOL><INDENT><INDENT>}"}
{"signature": "val hiddenConstructorsOfSealedClasses =", "body": "ConcurrentHashMap<IrConstructor, IrConstructor>()<EOL>"}
{"signature": "when (overriddenBuiltin) {", "body": "<EOL><INDENT><INDENT>is PropertyDescriptor -> overriddenBuiltin.getBuiltinSpecialPropertyGetterName()<EOL><INDENT><INDENT>is SimpleFunctionDescriptor -> BuiltinMethodsWithDifferentJvmName.getJvmName(overriddenBuiltin)?.asString()<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "var paramSlots =", "body": "<NUM_LIT><EOL>"}
{"signature": "val cycle<NUM_LIT> =", "body": "makeCycle(<NUM_LIT>, junk)<EOL>"}
{"signature": "val EXISTING_CLIENT_FILE_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val contextReceiversArguments =", "body": "mutableListOf<SimpleKotlinCallArgument>()<EOL>"}
{"signature": "fun discardTrailingBits(num: Long) {", "body": "<EOL><INDENT><INDENT>val mask = (<NUM_LIT>L shl num.toInt()).inv()<EOL><INDENT><INDENT>abandonedNumber += mantissa and mask<EOL><INDENT><INDENT>mantissa = mantissa shr num.toInt()<EOL><INDENT>}"}
{"signature": "val lib<NUM_LIT> =", "body": "compileLibrary(<STR_LIT>, lib<NUM_LIT>) { <STR_LIT> copyTo <STR_LIT> }<EOL>"}
{"signature": "if (it.resolve(<STR_LIT>).exists() && it.name.matches(pidRegex)) {", "body": "<EOL><INDENT><INDENT><INDENT>ProcessBuilder().command(<STR_LIT>, <STR_LIT>, cpuList, it.name).inheritIO().start().waitFor()<EOL><INDENT><INDENT>}"}
{"signature": "val varTypeAliasee =", "body": "baseMirror.pointedType<EOL>"}
{"signature": "package during compiler<EOL>.", "body": ""}
{"signature": "if (localFunctionNode != null) {", "body": "<EOL><INDENT><INDENT><INDENT>addEdge(localFunctionNode, enterNode)<EOL><INDENT><INDENT>}"}
{"signature": "var falseCondition =", "body": "false<EOL>"}
{"signature": "val cellValue =", "body": "if (reverse) -currentValue else currentValue<EOL>"}
{"signature": "val boxFiles =", "body": "resultFiles.filter { hasBoxMethod(it.content) }<EOL>"}
{"signature": "val clangTarget =", "body": "targetTriple.withoutVendor()<EOL>"}
{"signature": "val skipAttrs =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val isResponseBad =", "body": "response.status.value !in <NUM_LIT>.<NUM_LIT><EOL>"}
{"signature": "if (list<NUM_LIT> != listOf<ULong>((MinUL + <NUM_LIT>u), (MinUL + <NUM_LIT>u), MinUL)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val resolveResourcesFromDependenciesTask =", "body": "project.registerTask<ResolveResourcesFromDependenciesTask>(<EOL>"}
{"signature": "for (field in keptFields) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>field.accept(cv)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (stateAllowsMixedNamedAndPositionArguments && parameters.getOrNull(currentPositionedParameterIndex) == parameter) {", "body": "<EOL><INDENT><INDENT><INDENT>state = State.POSITION_ARGUMENTS<EOL><INDENT><INDENT><INDENT>currentPositionedParameterIndex++<EOL><INDENT><INDENT>}"}
{"signature": "val whitespaceCategories =", "body": "listOf(<EOL>"}
{"signature": "val thisSet =", "body": "if (this is Set<T>) this else this.toSet()<EOL>"}
{"signature": "if ((parent as? IrDeclaration)?.symbol == symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return parent as D<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(a: MutableList<Int>) {", "body": "}"}
{"signature": "fun normalFunction() {", "body": "<EOL><INDENT><STR_LIT><EOL>}"}
{"signature": "val collected =", "body": "ArrayList<String>()<EOL>"}
{"signature": "val scriptDataStream =", "body": "classLoader.getResourceAsStream(scriptMetadataPath(scriptClassFQName))<EOL>"}
{"signature": "if (classes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsNative.THROWS_LIST_EMPTY.on(reportLocation))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val expectedArgumentCount =", "body": "inputOutputTypes.inputTypes.size - unboundReceiverCount<EOL>"}
{"signature": "fun set(v: String) {", "body": "<EOL><INDENT><INDENT>this.v = v<EOL><INDENT>}"}
{"signature": "val sourceSetNamesString =", "body": "sourceSetNames.joinToString(<STR_LIT>) { <STR_LIT> }<EOL>"}
{"signature": "val actualDumpFile =", "body": "tmpdir.resolve(testDataDir.name + <STR_LIT>)<EOL>"}
{"signature": "val actualMessage =", "body": "t.message<EOL>"}
{"signature": "val delegateAccessorResolvedCall =", "body": "bindingContext.get(BindingContext.DELEGATED_PROPERTY_RESOLVED_CALL, descriptor)<EOL>"}
{"signature": "while (!c.isTopLevelDeclaration && innerClasses.add(c)) {", "body": "<EOL><INDENT><INDENT><INDENT>c = c.parentClassOrNull ?: break<EOL><INDENT><INDENT>}"}
{"signature": "if (notBeenHereYet) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Don't visit the same dependency twice.<INDENT><INDENT><INDENT><INDENT>recurse(moduleId = incomingDependencyId, aboveConflictingDependency = dependencyState.isConflicting)<INDENT><INDENT><INDENT>}"}
{"signature": "if (thisBuildNumber == null && otherBuildNumber != null) {", "body": "<EOL><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val classCandidate =", "body": "declaration.containingClassOrObject?.let(::findNonLocalClassLikeDeclaration)<EOL>"}
{"signature": "fun reportValReassigned(expression: KtExpression, variableDescriptor: VariableDescriptor, ctxt: VariableInitContext) {", "body": "<EOL><INDENT><INDENT>report(VAL_REASSIGNMENT_VIA_BACKING_FIELD.on(languageVersionSettings, expression, variableDescriptor), ctxt)<EOL><INDENT>}"}
{"signature": "if (resolutionResult.isSingleResult && resolutionResult.resultingDescriptor is FakeCallableDescriptorForObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitResolvedDeclarationStatus(resolvedDeclarationStatus: FirResolvedDeclarationStatus, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedDeclarationStatus(resolvedDeclarationStatus)<EOL><INDENT>}"}
{"signature": "if (reportsDestination != null) {", "body": "<EOL><INDENT><INDENT><INDENT>metrics.saveReportsTo(reportsDestination)<EOL><INDENT><INDENT>}"}
{"signature": "if (stringPlaceholderRanges.none()) {", "body": "<EOL><INDENT><INDENT><INDENT>codeStyleManager.reformat(resultElement, true) as KtElement<EOL><INDENT><INDENT>}"}
{"signature": "val KLIB_PROPERTY_COMMONIZER_NATIVE_TARGETS =", "body": "<STR_LIT><EOL>"}
{"signature": "val contextReceiversValues<NUM_LIT> =", "body": "contextReceiverVariables<NUM_LIT>.map { VariableLValue(context, it) }<EOL>"}
{"signature": "when (original) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is IrFunctionExpression -> original.function<EOL><INDENT><INDENT><INDENT><INDENT>is IrFunction -> original<EOL><INDENT><INDENT><INDENT><INDENT>else -> return@run null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (attempts in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (logFile.isLogContainsSequence(<STR_LIT>)) break<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Thread.sleep(<NUM_LIT>0)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val SPEC_LINKED_TESTDATA_PATTERN =", "body": "<EOL><INDENT><INDENT><INDENT>Regex(<STR_LIT>\"\\/\\*\\s+? \\* KOTLIN (PSI|DIAGNOSTICS|CODEGEN BOX) SPEC TEST \\((POSITIVE|NEGATIVE)\\)\\n([\\s\\S]*?\\n)\\s+\\*\\/\\n<STR_LIT>\")<EOL>"}
{"signature": "fun reportMissingUnresolved(expression: KtReferenceExpression) {", "body": "<EOL><INDENT><INDENT>newDiagnostic(<EOL><INDENT><INDENT><INDENT>expression,<EOL><INDENT><INDENT><INDENT>DebugInfoDiagnosticFactory<NUM_LIT>MISSING_UNRESOLVED<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun repeatables<NUM_LIT>() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun visitProperty(property: FirProperty, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitProperty(property)<EOL><INDENT>}"}
{"signature": "val removableCandidates =", "body": "IdentityHashMap<Reference, RemoveCandidate>()<EOL>"}
{"signature": "val initializersBlocks =", "body": "rootMfvcNode.mfvc.declarations.filterIsInstance<IrAnonymousInitializer>()<EOL>"}
{"signature": "if (!updated) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (true) <NUM_LIT> else <!RETURN_NOT_ALLOWED!>return<!>) {", "body": "}"}
{"signature": "fun scan(trees: com.sun.tools.javac.util.List<out JCTree>?) {", "body": "<INDENT><INDENT><INDENT><INDENT>// We don't need to repeat the logic above here as scan(List) calls scan(JCTree)<INDENT><INDENT><INDENT><INDENT>if (found) return<INDENT><INDENT><INDENT><INDENT>super.scan(trees)<INDENT><INDENT><INDENT>}"}
{"signature": "fun prot() {", "body": "}<EOL><EOL><INDENT>override fun int() {<EOL><INDENT><INDENT>prot()<EOL><INDENT>}"}
{"signature": "if (anotherProperty != declaredProperty && anotherProperty.isCollectable() && anotherProperty.isVisibleInClass(klass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collect(anotherProperty, FirRedeclarationPresenter.represent(anotherProperty), otherDeclarations)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val importedClassId =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>import.resolvedParentClassId?.createNestedClassId(importedName) ?: ClassId(import.packageFqName, importedName)<EOL>"}
{"signature": "fun visitFunction(declaration: IrFunction, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunction(declaration)<EOL><INDENT>}"}
{"signature": "fun warning(message: String, startPosition: CodePosition, endPosition: CodePosition) {", "body": "<EOL><INDENT><INDENT>warnings += Warning(message, startPosition, endPosition)<EOL><INDENT>}"}
{"signature": "val exClass =", "body": "IndexOutOfBoundsException::class<EOL>"}
{"signature": "val kimono =", "body": "<STR_LIT> // kimono"}
{"signature": "for (j in <NUM_LIT>.k) {", "body": "<EOL><INDENT><INDENT><!VAL_REASSIGNMENT!>i<!> = j<EOL><INDENT>}"}
{"signature": "val SERIAL_DESCRIPTOR_CLASS =", "body": "<STR_LIT><EOL>"}
{"signature": "val mutedInDatabase =", "body": "isMutedInDatabase(testClass, methodKey)<EOL>"}
{"signature": "fun wrapperOfJavaRandomIsSerializable() {", "body": "<EOL><INDENT><INDENT>val kotlin = java.util.Random(<NUM_LIT>).asKotlinRandom()<EOL><INDENT><INDENT>discardSomeValues(kotlin)<EOL><INDENT><INDENT>val deserialized = serializeAndDeserialize(kotlin)<EOL><INDENT><INDENT>testRandomsHaveSameState(kotlin, deserialized)<EOL><INDENT>}"}
{"signature": "val directRememberFunction =", "body": "// Exclude the varargs version"}
{"signature": "var containingClassLookUp =", "body": "containingClassForLocal()<EOL>"}
{"signature": "val changedTypes =", "body": "HashMap<String, String>()<EOL>"}
{"signature": "val userDir =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val boundSymbol =", "body": "containingDeclaration.symbol<EOL>"}
{"signature": "val byteOut =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "if (!testStringAppend<NUM_LIT>('x', <STR_LIT>, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val typeMirror =", "body": "builderResult.bridgeGenerationComponents.enumToTypeMirror.getValue(enum)<EOL>"}
{"signature": "val kPropertyType =", "body": "ConeClassLikeTypeImpl(<EOL>"}
{"signature": "val disabledNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val startFunctionBody =", "body": "context.fieldInitFunction.body as IrBlockBody<EOL>"}
{"signature": "var fPositiveInfinity =", "body": "+<NUM_LIT>f / <NUM_LIT>f<EOL>"}
{"signature": "val externalClasspath =", "body": "tmpDir.newFolder()<EOL>"}
{"signature": "val aij =", "body": "AIJ()<EOL>"}
{"signature": "for (codePoint in range.first..range.last) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(codePoint.isCaseIgnorable())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jdkAnnotation =", "body": "findAnnotation<JdkVersions>(context)<EOL>"}
{"signature": "fun execute(onlyIfAttached: Boolean, handler: () -> Unit) {", "body": "<EOL><INDENT><INDENT>handler()<EOL><INDENT>}"}
{"signature": "if (lineNumber != null) {", "body": "<EOL><INDENT><INDENT>append(lineNumber)<EOL><INDENT>}"}
{"signature": "for (type in dispatchReceiver.allOriginalTypes) {", "body": "<EOL><INDENT><INDENT><INDENT>type.memberScope.recordLookup(name, location)<EOL><INDENT><INDENT>}"}
{"signature": "val base<NUM_LIT>RangeLength =", "body": "rangeLength.toVarLenBase<NUM_LIT>()<EOL>"}
{"signature": "val executablePath =", "body": "File(KtTestUtil.getJdk<NUM_LIT>Home(), <STR_LIT> + executableName).absolutePath<EOL>"}
{"signature": "var relativeStart =", "body": "start >> <NUM_LIT>;<EOL>"}
{"signature": "val containsTests =", "body": "targets.any { it.isTests }<EOL>"}
{"signature": "fun remapEndLabel(oldEnd: LabelNode, remapped: T) {", "body": "<EOL><INDENT><INDENT>remapped.verify(processor)<EOL><INDENT><INDENT>intervalEnds.remove(oldEnd, remapped)<EOL><INDENT><INDENT>intervalEnds.put(remapped.endLabel, remapped)<EOL><INDENT>}"}
{"signature": "fun f()<EOL><INDENT>fun g() {", "body": "}<EOL><INDENT>abstract fun h()<EOL><INDENT><!ABSTRACT_FUNCTION_WITH_BODY!>abstract<!> fun j() {}"}
{"signature": "for (approx in listOf(Float.MIN_VALUE, <NUM_LIT>F, <NUM_LIT>F, <NUM_LIT>F)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertAlmostEquals(approx, acosh(cosh(approx)))<EOL><INDENT><INDENT><INDENT>assertAlmostEquals(approx, acosh(cosh(-approx)))<EOL><INDENT><INDENT>}"}
{"signature": "if (isFinalSigmaAt(index)) {", "body": "<EOL><INDENT><INDENT><INDENT>sb.append('\\u<NUM_LIT>C<NUM_LIT>')<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "val switchProto =", "body": "proto.switchStatement<EOL>"}
{"signature": "val randomString =", "body": "generateRandomString()<EOL>"}
{"signature": "val mostOuterTypeQualifier =", "body": "generateSequence(qualifier) { it.outerTypeQualifier }.last()<EOL>"}
{"signature": "val nonNullType =", "body": "if (type is ObjCNullableReferenceType) type.nonNullType else type<EOL>"}
{"signature": "if (!state.classBuilderMode.generateMetadata) {", "body": "<EOL><INDENT><INDENT><INDENT>classBuilder.ensureGenerated()<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val initialArgumentType =", "body": "resolvedCall.candidateDescriptor.valueParameters.getOrNull(i)?.type?.upperIfFlexible() ?: continue<EOL>"}
{"signature": "val savedClasspathProperty =", "body": "System.setProperty(<STR_LIT>, classpath.joinToString(File.pathSeparator))<EOL>"}
{"signature": "val continueTarget =", "body": "breakContinueTargets[x]!!<EOL>"}
{"signature": "val entryTypeInfo =", "body": "BindingContextUtils.getRecordedTypeInfo(entryExpression, bindingContext) ?: continue<EOL>"}
{"signature": "fun testDummyJs() {", "body": "<EOL><INDENT><INDENT>doSerializeDeserializeAndCompareTest<K<NUM_LIT>JSCompilerArguments>()<EOL><INDENT>}"}
{"signature": "if (!forbidDirectFieldAccess && irClass.isFinalClass && backingField != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irGetField(receiver, backingField)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val otherError =", "body": "it.error<EOL>"}
{"signature": "if (!optionsBuilder.checkOptions(project, logger, configuration)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (memberDeclaration.isLateInit) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val jvmInternalPackage =", "body": "createEmptyExternalPackageFragment(<EOL>"}
{"signature": "if (number < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append('_')<EOL><INDENT><INDENT>}"}
{"signature": "val untilFunName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val shouldAdd =", "body": "p.getter?.hasComposableAnnotation() ?: false ||<EOL>"}
{"signature": "val numericPrimitivesDefaultOrder =", "body": "PrimitiveType.defaultPrimitives intersect PrimitiveType.numericPrimitives<EOL>"}
{"signature": "val expressionResult =", "body": "lhsResult as? DoubleColonLHS.Expression ?: return<EOL>"}
{"signature": "val nameExpressions =", "body": "argumentMapping[StandardClassIds.Annotations.ParameterNames.suppressNames]?.unwrapVarargValue() ?: return<EOL>"}
{"signature": "fun setDependencies(vararg descriptors: ModuleDescriptorImpl) {", "body": "<EOL><INDENT><INDENT>setDependencies(descriptors.toList())<EOL><INDENT>}"}
{"signature": "val test_bn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b === n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n === b<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b !== n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n !== b<!><EOL>"}
{"signature": "val JAVA_ENHANCEMENT_FOR_DECLARED_MEMBERS =", "body": "scopeSessionKey<FirRegularClassSymbol, FirContainingNamesAwareScope>()<EOL>"}
{"signature": "val paragraphSentences =", "body": "specSentences[sectionsPath]<EOL>"}
{"signature": "val xcfName =", "body": "xcFrameworkName.get()<EOL>"}
{"signature": "for (i in list.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>appendLine()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>itemPrinter(list[i])<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val baseExpectSymbol =", "body": "expectSymbol<EOL>"}
{"signature": "if (!projection.isStarProjection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>forceResolveTypeContents(projection.type)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val intercepted =", "body": "callFromBridge(<EOL>"}
{"signature": "val extraValues =", "body": "allowedMppValues - kotlinPlatformTypesMissedInMppPlatforms - konanTargetsMissedInMppPlatforms<EOL>"}
{"signature": "val isDeprecated =", "body": "if (it in KonanTarget.deprecatedTargets) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val argumentAsmType =", "body": "codegen.typeMapper.mapTypeAsDeclaration(argumentType)<EOL>"}
{"signature": "val dataPaths =", "body": "descriptor.dataManager.dataPaths<EOL>"}
{"signature": "if (allAreDummyOrCompiled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.processMessage(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CustomBuilderMessage(SettingConstants.KOTLIN_COMPILER_REFERENCE_INDEX_BUILDER_ID, MESSAGE_TYPE, module.name)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (statsKey.declarationType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DeclarationType.TOP_LEVEL_CLASS, DeclarationType.TOP_LEVEL_INTERFACE -> false<EOL><INDENT><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val throwMissedFieldExceptionFunc =", "body": "compilerContext.referenceFunctions(<EOL>"}
{"signature": "fun putLocalFunction(localFunction: FirFunction, irFunctionSymbol: IrSimpleFunctionSymbol) {", "body": "<EOL><INDENT><INDENT>require(localFunction !is FirSimpleFunction || localFunction.visibility == Visibilities.Local)<EOL><INDENT><INDENT>localFunctionCache[localFunction] = irFunctionSymbol<EOL><INDENT>}"}
{"signature": "val testsByParagraph =", "body": "testsBySection.getOrCreate<JsonObject>(specPlace.paragraphNumber.toString())<EOL>"}
{"signature": "val previousFlows =", "body": "mutableListOf<PersistentFlow>()<EOL>"}
{"signature": "val suppressions =", "body": "computer.getSuppressionAnnotations(element).filter { it.fqName == StandardNames.FqNames.suppress }<EOL>"}
{"signature": "val overriddenExportedGetter =", "body": "!property.getter?.overriddenSymbols.isNullOrEmpty() &&<EOL>"}
{"signature": "if (LOCAL_VARIABLE in possibleTargets) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.OPT_IN_MARKER_ON_WRONG_TARGET.on(entry, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val impProto =", "body": "LlvmFunctionSignature(LlvmRetType(llvm.voidType)).toProto(<EOL>"}
{"signature": "val descriptorName =", "body": "referencedDescriptor.name.asString()<EOL>"}
{"signature": "val reachableElements =", "body": "hashSetOf<KtElement>()<EOL>"}
{"signature": "val ktModuleClass =", "body": "ktModule::class.allSuperclasses.first { it in ktModuleSubclasses }<EOL>"}
{"signature": "fun foo<NUM_LIT>(c: MutableSet<Any>?) {", "body": "}"}
{"signature": "if (moduleName.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>report(ERROR, <STR_LIT>, VfsUtilCore.getVirtualFileForJar(root) ?: root)<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((index, i) in J.iteratorOfNotNull().withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (testModule !in uniqueDependencies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val transitiveDependencies = testModule.transitiveDependencies()<EOL><INDENT><INDENT><INDENT><INDENT>uniqueDependencies.addAll(transitiveDependencies)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (irDeclaration is IrClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>bindFakeOverridesInClass(irDeclaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!context.config.configuration.getBoolean(KonanConfigKeys.VERIFY_BITCODE)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val argMapping =", "body": "ktAnnotation?.calleeExpression<EOL>"}
{"signature": "fun consumeTargetTypeBase(value: TargetTypeBase) {", "body": "}<EOL><EOL>fun consumeTargetType(value: TargetType) {}"}
{"signature": "val closing =", "body": "closingRegex.find(text)<EOL>"}
{"signature": "val objcExportMetaAnnotations =", "body": "annotation.annotationClass?.findObjCExportMetaAnnotations()<EOL>"}
{"signature": "val sourceSetsToIncludeDependencies =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (isNativeSharedSourceSet)<EOL>"}
{"signature": "val signaturePrefix =", "body": "firJavaClass.symbol.classId.toString()<EOL>"}
{"signature": "if (testClass.isAnnotationPresent(EnforcedHostTarget::class.java)) {", "body": "<EOL><INDENT><INDENT><INDENT>this[ClassLevelProperty.TEST_TARGET] = HostManager.host.name<EOL><INDENT><INDENT>}"}
{"signature": "if (tcb.handler !in defaultHandlers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>handlerStartLabels.add(tcb.handler)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allActualizationPaths =", "body": "moduleStructureOracle.findAllReversedDependsOnPaths(descriptor.module)<EOL>"}
{"signature": "if (resolveMode.resolveSupertypes) {", "body": "<EOL><INDENT><INDENT><INDENT>transformer.forceResolveStatusesOfSupertypes(firClass)<EOL><INDENT><INDENT>}"}
{"signature": "if (suspendFunType.arguments.last().type.isUnit()) {", "body": "<EOL><INDENT><INDENT><INDENT>+irAdapteeCall<EOL><INDENT><INDENT>}"}
{"signature": "fun setCandidateDescriptor(newCandidateDescriptor: CallableDescriptor) {", "body": "<EOL><INDENT><INDENT>if (newCandidateDescriptor == candidateDescriptor) return<EOL><INDENT><INDENT>_candidateDescriptor = newCandidateDescriptor<EOL><INDENT>}"}
{"signature": "val ENDRESTARTGROUP =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun my(my: <!OPT_IN_USAGE_FUTURE_ERROR!>My<!>) {", "body": "}<EOL><EOL>fun your(my: <!OPT_IN_USAGE_ERROR!>Some<!>) {}"}
{"signature": "val ctorStr =", "body": "implClassJava.constructors.toList().toString()<EOL>"}
{"signature": "val jsPsis =", "body": "jsPaths.flatMap { d -> d.listAllFiles().mapNotNull { createPsiFile(it.path, false) } }<EOL>"}
{"signature": "if (DescriptorUtils.isLocal(serializerDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>val element = declaration.findSerializableOrMetaAnnotationDeclaration() ?: declarationElement<EOL><EOL><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>SerializationErrors.LOCAL_SERIALIZER_USAGE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>element,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>serializerType<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val companionObjectSuperTypes =", "body": "companionObjectDescriptor?.let { TypeUtils.getAllSupertypes(it.defaultType) } ?: return false<EOL>"}
{"signature": "import ${Nested::class.", "body": "java.canonicalName};\")<EOL>"}
{"signature": "when (internal) {", "body": "}"}
{"signature": "fun visitModuleFragment(declaration: IrModuleFragment) {", "body": "<EOL><INDENT><INDENT>visitElement(declaration)<EOL><INDENT>}"}
{"signature": "if (isWrong && body != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(body.source, FirWebCommonErrors.WRONG_BODY_OF_EXTERNAL_DECLARATION, context)<EOL><INDENT><INDENT>}"}
{"signature": "val sourceSetVisibility =", "body": "<EOL><INDENT><INDENT><INDENT>params.sourceSetVisibilityProvider.getVisibleSourceSets(<EOL>"}
{"signature": "if (this is KClassImpl<*> && annotationClass is KClassImpl<T>) {", "body": "<EOL><INDENT><INDENT>val key = annotationClass.jClass.asDynamic().`$metadata$`?.associatedObjectKey?.unsafeCast<Int>() ?: return null<EOL><INDENT><INDENT>val map = jClass.asDynamic().`$metadata$`?.associatedObjects ?: return null<EOL><INDENT><INDENT>val factory = map[key] ?: return null<EOL><INDENT><INDENT>return factory()<EOL><INDENT>}"}
{"signature": "val keyList =", "body": "extrasKeyOf<MutableList<Dummy>>()<EOL>"}
{"signature": "val maybeImportedSignatures =", "body": "fileSymbolProvider.getReachableSignatures().toHashSet()<EOL>"}
{"signature": "fun TestDifferentlyNamedValueParameters(argB: UserKlass) {", "body": "}<EOL><EOL>class TestDifferentlyNamedValueParametersReverse {<EOL><INDENT>constructor(argA: UserKlass)<EOL>}"}
{"signature": "fun clearBuildName() {", "body": "<EOL><INDENT>  _builder.clearBuildName()<EOL><INDENT>}"}
{"signature": "fun getResourceId(v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT>v.getstatic(androidPackage.replace(<STR_LIT>, <STR_LIT>) + <STR_LIT>, resource.name.asString(), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitEnumEntry(declaration: IrEnumEntry, data: Data) {", "body": "<INDENT><INDENT><INDENT>// Although IrEnumEntry is an IrDeclaration, its name shouldn't be added to nameStack. This is because each IrEnumEntry has<INDENT><INDENT><INDENT>// an IrClass with the same name underneath it, and that class should obtain the name of the form <STR_LIT>,<INDENT><INDENT><INDENT>// not <STR_LIT>.<INDENT><INDENT><INDENT>declaration.acceptChildren(this, data.makeLocal())<INDENT><INDENT>}"}
{"signature": "val primitiveArrayForType =", "body": "primitiveArrayElementTypes.asSequence().associate { it.value to it.key }<EOL>"}
{"signature": "val buildParams =", "body": "listOf(<EOL>"}
{"signature": "if (classId == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getTopLevelCallableSymbols(callableId.packageName, callableId.callableName).toList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(g: Int) {", "body": "definedExternally }"}
{"signature": "if (r<NUM_LIT>isSuccess) {", "body": "<EOL><INDENT><INDENT>if (r<NUM_LIT>getOrNull()?.descriptor != r<NUM_LIT>getOrNull()?.descriptor)<EOL><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val kotlinxCollectionsImmutable =", "body": "getLibraryJar(kotlinxImmutable(<STR_LIT>))<EOL>"}
{"signature": "val outFileName =", "body": "<STR_LIT>.replace('-', '_')<EOL>"}
{"signature": "val localProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (needCompatibilityResolveForCallableReference(callableReferenceAdaptation, candidateDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>markCandidateForCompatibilityResolve(diagnostics)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(b<NUM_LIT>: Bar<NUM_LIT>, b<NUM_LIT>: Bar<NUM_LIT>, b<NUM_LIT>: Bar<NUM_LIT>) {", "body": "<EOL><INDENT>b<NUM_LIT> == b<NUM_LIT><EOL><INDENT><!EQUALITY_NOT_APPLICABLE!>b<NUM_LIT> == b<NUM_LIT><!><EOL>}"}
{"signature": "val cachedMainModule =", "body": "cachedProgram.last()<EOL>"}
{"signature": "val ktValueArgument =", "body": "ktValueArgumentName.parent as? KtValueArgument ?: return emptyList()<EOL>"}
{"signature": "val returnBuilder =", "body": "JsAstProtoBuf.Return.newBuilder()<EOL>"}
{"signature": "val jvmDefaultMode =", "body": "classOrObject<EOL>"}
{"signature": "val exportFragment =", "body": "fileExports.generateProgramFragmentForExport(mode, globalNameScope)<EOL>"}
{"signature": "val statFile =", "body": "rootFolder.listFiles()?.single()?.listFiles()?.single() ?: fail(<STR_LIT>)<EOL>"}
{"signature": "val kotlinReflectionPackageFqn =", "body": "kotlinPackageFqn.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val specialCasingMapping =", "body": "mapping.first()<EOL>"}
{"signature": "val malformedLibraries =", "body": "listOf(<EOL>"}
{"signature": "val stepsTxt =", "body": "File(testDataSrc, <STR_LIT>)<EOL>"}
{"signature": "val additionalSymbolFields =", "body": "listOf(<EOL>"}
{"signature": "val typeWithFreshVariables =", "body": "resolvedCallAtom.freshVariablesSubstitutor.safeSubstitute(convertedType)<EOL>"}
{"signature": "val REGULAR_ARGUMENT_COMPARATOR =", "body": "compareBy(Regular::type, Regular::variance)<EOL>"}
{"signature": "if (i < fakeArgCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>argumentMap[parameter] = ExpressionValueArgument(fakeArguments.get(i++))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var parenthesisBalance =", "body": "<NUM_LIT><EOL>"}
{"signature": "val notForInline =", "body": "irFunction.suspendForInlineToOriginal()<EOL>"}
{"signature": "if (psiElement.isVarArg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CLASS_DECL_TOKENS =", "body": "TokenSet.create(KtTokens.CLASS_KEYWORD, KtTokens.INTERFACE_KEYWORD)<EOL>"}
{"signature": "for (i in A(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>p += i<EOL><INDENT>}"}
{"signature": "val opened =", "body": "Stack<CodeMetaInfo>()<EOL>"}
{"signature": "val oldSubstitutor =", "body": "substitutor.toOldSubstitution().buildSubstitutor()<EOL>"}
{"signature": "fun validateScope(scopeOwner: DeclarationDescriptor, scope: MemberScope, collector: DescriptorValidator.DiagnosticCollector) {", "body": "<EOL><INDENT><INDENT>super.validateScope(scopeOwner, scope, collector)<EOL><INDENT><INDENT>validateDeserializedScope(scopeOwner, scope)<EOL><INDENT>}"}
{"signature": "if (unknown.value !== savedResult.value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>currentResult = savedResult.getOrNull()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>currentException = savedResult.exceptionOrNull()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>savedResult = unknown<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val protectedVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val simpleProjectArtifactDependency =", "body": "IdeaKotlinProjectArtifactDependency(<EOL>"}
{"signature": "for (statement in block.statements) {", "body": "<EOL><INDENT><INDENT><INDENT>generate(statement)<EOL><INDENT><INDENT>}"}
{"signature": "val vtable =", "body": "vtable(superClass)<EOL>"}
{"signature": "val kniFunction =", "body": "<STR_LIT><EOL>"}
{"signature": "for ((type, index) in (value.unboxedTypes zip slotIndices).asReversed()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.instructions.insertBefore(insn, VarInsnNode(type.getOpcode(Opcodes.ISTORE), index))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val filesWithUpdatedStubbedSymbolsToRebuild =", "body": "updater.collectFilesWithUpdatedStubbedSymbols(dirtyFileExports)<EOL>"}
{"signature": "for (i in <NUM_LIT>.size) {", "body": "<EOL><INDENT><INDENT><INDENT>appendLine(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT>it.inc()<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in intArray.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += intArray[i]<EOL><INDENT><INDENT>}"}
{"signature": "val oldDescriptor =", "body": "descriptorByModule[module]?.moduleDescriptor<EOL>"}
{"signature": "val sourceToJsOutputsMap =", "body": "registerMap(SourceToJsOutputMap(SOURCE_TO_JS_OUTPUT.storageFile, icContext))<EOL>"}
{"signature": "val overridesWithSameName =", "body": "scope.getFunctions(functionToCheck)<EOL>"}
{"signature": "if (this in 'a'..'z' || this in 'A'..'Z') {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "if (parameterVariance == Variance.INVARIANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return projectionKind<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fileIdx =", "body": "c.getIndexOf(file)<EOL>"}
{"signature": "if (currentElement == null && designation.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>currentElement = designation.next()<EOL><INDENT><INDENT>}"}
{"signature": "if (resultingDescriptor is ClassConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT>val ktClass = resultingDescriptor.constructedClass.source.getPsi() as? KtClass<EOL><INDENT><INDENT>if (ktClass?.isAnnotation() == true) return ktClass.fqName?.toString()<EOL><INDENT>}"}
{"signature": "val llvmGlobal =", "body": "LLVMGetNamedGlobal(module, name) ?: return null<EOL>"}
{"signature": "val irValueParameter =", "body": "irAccessor.valueParameters.single()<EOL>"}
{"signature": "fun willBeUnresolved() {", "body": "<EOL><INDENT>JavaClass().f(<STR_LIT>)<EOL>}"}
{"signature": "val logContents =", "body": "logFiles[i]?.readLines()<EOL>"}
{"signature": "val ALL_EXCEPT_ANNOTATIONS =", "body": "values().filter { it.includeByDefault }.toSet()<EOL>"}
{"signature": "val DIST_FOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitDanglingModifierList(danglingModifierList: FirDanglingModifierList, data: T) {", "body": "<EOL><INDENT><INDENT>visitAnnotationContainer(danglingModifierList, data)<EOL><INDENT>}"}
{"signature": "if (atom.isLambda) {", "body": "// lambda - must return null in case of absent parameters<INDENT><INDENT><INDENT><INDENT><INDENT>if (atom.valueParameters.isNotEmpty())<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>atom.collectDeclaredValueParameterTypes()<INDENT><INDENT><INDENT><INDENT><INDENT>else null<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (suspensionPointKind != SuspensionPointKind.NEVER) {", "body": "<EOL><INDENT><INDENT><INDENT>addSuspendMarker(mv, isStartNotEnd = true, suspensionPointKind == SuspensionPointKind.NOT_INLINE)<EOL><INDENT><INDENT>}"}
{"signature": "val libAndroidUtilKt =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "if (getter?.needsInlineParameterNullCheckRequirement() == true || setter?.needsInlineParameterNullCheckRequirement() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>versionRequirementTable?.writeInlineParameterNullCheckRequirement(proto::addVersionRequirement)<EOL><INDENT><INDENT>}"}
{"signature": "when (nameParts.size) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> <STR_LIT> to <STR_LIT><EOL><INDENT><INDENT><NUM_LIT> -> <STR_LIT> to nameParts.single()<EOL><INDENT><INDENT>else -> nameParts[<NUM_LIT>] to nameParts[<NUM_LIT>]<EOL><INDENT>}"}
{"signature": "val elementToAnalyze =", "body": "position.containingNonLocalDeclaration() ?: position<EOL>"}
{"signature": "val compositionContextBody =", "body": "irModule.files.last().declarations<EOL>"}
{"signature": "val defineInlineFunctionNode =", "body": "context.extractNode(function)<EOL>"}
{"signature": "fun option(name: Any, value: Any) {", "body": "<EOL><INDENT><INDENT>options.put(name.toString(), value.toString())<EOL><INDENT>}"}
{"signature": "package `a` exists but package `a.", "body": "b` doesn't exist, `a.b.` will be returned.<EOL>"}
{"signature": "val test_bnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === b<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== b<!><EOL>"}
{"signature": "val ExtensionFunctionType =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val writableTypeInfoValue =", "body": "buildWritableTypeInfoValue(convertToRetained = convertToRetained.toConstPointer())<EOL>"}
{"signature": "val nullableParameterType =", "body": "TypeUtils.makeNullable(receiverParameterType)<EOL>"}
{"signature": "if (d && true) {", "body": "}"}
{"signature": "val stubFile =", "body": "primaryArtifactContent.resolve(testSourceSetName).resolve(KLIB_MANIFEST_PATH)<EOL>"}
{"signature": "fun f(g: context(A, B) Int.(Int) -> Int) {", "body": "}<EOL><EOL>class A {<EOL><INDENT>val valueA: Int = <NUM_LIT><EOL>}"}
{"signature": "val calleeOn =", "body": "expression.explicitReceiver ?: return<EOL>"}
{"signature": "val nanBug =", "body": "dnq == dnq<EOL>"}
{"signature": "fun matchEntireLazyQuantor() {", "body": "<EOL><INDENT><INDENT>val regex = <STR_LIT>.toRegex()<EOL><INDENT><INDENT>val input = StringBuilder(<STR_LIT>)<EOL><EOL><INDENT><INDENT>assertEquals(<STR_LIT>, regex.find(input)!!.value)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, regex.matchEntire(input)!!.value)<EOL><INDENT>}"}
{"signature": "var extractedUnder =", "body": "declaration<EOL>"}
{"signature": "val extensionRoot =", "body": "<EOL><INDENT><INDENT><INDENT>if (expression.symbol.owner.isInfix) expression.extensionReceiver?.let { buildTree(it) } else null<EOL>"}
{"signature": "if (shouldGeneratePartHierarchy) {", "body": "<EOL><INDENT><INDENT><INDENT>if (descriptor !is PropertyDescriptor || !descriptor.isConst) return false<EOL><INDENT><INDENT>}"}
{"signature": "val icUnit<NUM_LIT> =", "body": "U<NUM_LIT>(Unit)<EOL>"}
{"signature": "if (result == null || isNotWorse(candidate, result)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = candidate<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (idx in <NUM_LIT> until length) {", "body": "<EOL><INDENT><INDENT>if (!get(idx).isES<NUM_LIT>IdentifierPart()) return false<EOL><INDENT>}"}
{"signature": "if (delegatedConstructorCall.isThis) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val earlierScriptField =", "body": "irScriptClass.addEarlierScriptField(irScript)<EOL>"}
{"signature": "val rootCause =", "body": "generateSequence(result.failure) { it.cause }.last()<EOL>"}
{"signature": "val fmodules =", "body": "false<EOL>"}
{"signature": "val DEPRECATED_REPLACE_WITH_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (boundedValue.isHighInclusive) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>// high < arg<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>comparisonGenerator.jumpIfLess(v, jumpLabel)<INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (var (a, b: Int) in b) {", "body": "}"}
{"signature": "fun fields() {", "body": "<EOL><INDENT>val foo = Foo()<EOL><INDENT>foo.more()<EOL><INDENT>sb.appendLine(foo.i)<EOL><INDENT>foo.less()<EOL><INDENT>sb.appendLine(foo.i)<EOL>}"}
{"signature": "fun visitEnumEntry(declaration: IrEnumEntry, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitEnumEntry(declaration)<EOL><INDENT>}"}
{"signature": "package ${context.", "body": "validPackageName}\")<EOL>"}
{"signature": "val KOTLIN_SCRIPT_RUNTIME_JAR_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!parameter.hasValOrVar() || parameter.isMutable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.JVM_RECORD_NOT_VAL_PARAMETER.on(parameter))<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val END_OF_CENTRAL_DIR_SIZE =", "body": "<NUM_LIT><EOL>"}
{"signature": "val mappingsClass =", "body": "storage.getOrPut(containingClass) { MappingsClass(containingClass) }<EOL>"}
{"signature": "fun testSimpleUseNonExportedPackage() {", "body": "<EOL><INDENT><INDENT>val a = module(<STR_LIT>)<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(a))<EOL><INDENT>}"}
{"signature": "val snapshotMapFile =", "body": "File(caches, <STR_LIT>)<EOL>"}
{"signature": "val declarationOwners =", "body": "declarationOwnersCache.getValue(firFile)<EOL>"}
{"signature": "if (!isInterface) {", "body": "<EOL><INDENT><INDENT><INDENT>result.addAll(createConstructors())<EOL><INDENT><INDENT>}"}
{"signature": "var disableStandardScript =", "body": "false<EOL>"}
{"signature": "if (approximatedType is ConeTypeParameterType && conversionScope.shouldEraseType(approximatedType)) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// This hack is about type parameter leak in case of generic delegated property<INDENT><INDENT><INDENT><INDENT><INDENT>// It probably will be prohibited after <NUM_LIT><INDENT><INDENT><INDENT><INDENT><INDENT>// For more details see KT<NUM_LIT><INDENT><INDENT><INDENT><INDENT><INDENT>return approximateUpperBounds(approximatedType.lookupTag.typeParameterSymbol.resolvedBounds)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val objCExportResumeContinuationWithException =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (field.isFinal && field.fromParent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import is FirResolvedImport) processPossiblyUnresolvedImport(import, context, reporter)<EOL>.", "body": ""}
{"signature": "package generators.", "body": "unicode.ranges.writers<EOL>"}
{"signature": "val MaxMediumSize =", "body": "ChunkBucketSize * MediumChunksSizeAlignment<EOL>"}
{"signature": "val trimLeadingSpaces =", "body": "!(contentStarted || indentedCodeBlock) || isPlainContent<EOL>"}
{"signature": "fun resetTest(testDir: File, newOutDir: File, newCacheDir: File) {", "body": "}<EOL><EOL><INDENT>private fun createCompilerArgumentsImpl(destinationDir: File, testDir: File): Args =<EOL><INDENT><INDENT>createCompilerArguments(destinationDir, testDir).apply {<EOL><INDENT><INDENT><INDENT>parseCommandLineArguments(parseAdditionalArgs(testDir), this)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(value: IdType, cv: CInt<NUM_LIT>Var) {", "body": "<EOL><INDENT>cv.value = value.value<EOL>}"}
{"signature": "fun testPlus(doPlus: (List<String>) -> List<String>) {", "body": "<EOL><INDENT><INDENT>val list = listOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val list<NUM_LIT>: List<String> = doPlus(list)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), list)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>), list<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun exitCallableReference(callableReferenceAccess: FirCallableReferenceAccess) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitCallableReference(callableReferenceAccess).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val DESCRIPTION =", "body": "<EOL><INDENT><STR_LIT> +<EOL>"}
{"signature": "val gcTypes =", "body": "<EOL><INDENT><INDENT>ReferencableAndDefinable<IrClassSymbol, WasmTypeDeclaration>()<EOL>"}
{"signature": "val testFun =", "body": "maybeGetFunction(<STR_LIT>, kotlinTestPackage)<EOL>"}
{"signature": "if (d is IrConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>put(d, c)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var dollarIndex =", "body": "this.indexOf('$', startIndex = <NUM_LIT>)<EOL>"}
{"signature": "if (foo is B && foo == bar) {", "body": "<EOL><INDENT><INDENT>bar.<!UNRESOLVED_REFERENCE!>b<!>()<EOL><INDENT>}"}
{"signature": "if (additionalStatements.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>contains<EOL><INDENT><INDENT>}"}
{"signature": "if (!element.isKDocStart() && !element.isKDocEnd()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(element.text)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (pattern[nextIndex()] != '<') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw PatternSyntaxException(<STR_LIT>, patternString, curTokenIndex)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var width =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val nonExportedInterfacesTsString =", "body": "if (nonExportedInterfaces.isNotEmpty()) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val testModules =", "body": "hashMapOf<String, TestModule.Exclusive>()<EOL>"}
{"signature": "var targetIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val exportedParentDefault =", "body": "ExportedParent()<EOL>"}
{"signature": "fun writeLines(lines: Iterable<String>) {", "body": "<EOL><INDENT><INDENT>Files.write(javaPath, lines)<EOL><INDENT>}"}
{"signature": "for ((index, module) in modules.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>originalPositions[module] = index<EOL><INDENT><INDENT><INDENT>val group = findOrCreateRootKmpGroup(module)<EOL><INDENT><INDENT><INDENT>group.addModule(module)<EOL><INDENT><INDENT><INDENT>groupsByModules.putIfAbsent(module, group)<EOL><INDENT><INDENT>}"}
{"signature": "if (dependencies.get().isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>appendLine()<EOL><INDENT><INDENT>}"}
{"signature": "val convertedBooleanFields =", "body": "mutableSetOf<IrFieldSymbol>()<EOL>"}
{"signature": "package foobar<EOL>.", "body": ""}
{"signature": "fun parseCommonizerTargetOrNull() {", "body": "<EOL><INDENT><INDENT>assertEquals(parseCommonizerTarget(<STR_LIT>), parseCommonizerTargetOrNull(<STR_LIT>))<EOL><INDENT><INDENT>assertNull(parseCommonizerTargetOrNull(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "while (<NUM_LIT> > i++) {", "body": "<EOL><INDENT><INDENT>result = aa(if (true) <STR_LIT> else <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val candidateGroup =", "body": "buildTypeGroup(trees, node.type.classifierId) ?: return@forEach<EOL>"}
{"signature": "fun testSimple<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>assert<NUM_LIT>BitHash(<STR_LIT>, <NUM_LIT>UL)<EOL><INDENT><INDENT>assert<NUM_LIT>BitHash(<STR_LIT>, 2<NUM_LIT>0714258260161385UL)<EOL><INDENT><INDENT>assert<NUM_LIT>BitHash(<STR_LIT>.repeat(<NUM_LIT>), <NUM_LIT>UL)<EOL><INDENT><INDENT>assert<NUM_LIT>BitHash(<STR_LIT>.repeat(<NUM_LIT>), <NUM_LIT>UL)<EOL><INDENT><INDENT>assert<NUM_LIT>BitHash(<STR_LIT>.repeat(<NUM_LIT>), <NUM_LIT>UL)<EOL><INDENT>}"}
{"signature": "else if (mapping.kotlinMutable == classId) {", "body": "<INDENT><INDENT><INDENT><INDENT>return <STR_LIT> + classId.relativeClassName.asString()<INDENT><INDENT><INDENT><INDENT><INDENT>.replace(<STR_LIT>, <STR_LIT>) // kotlin.jvm.internal.markers.KMutableMap.Entry for some reason<INDENT><INDENT><INDENT><INDENT><INDENT>.replace(<STR_LIT>, <STR_LIT>)<INDENT><INDENT><INDENT>}"}
{"signature": "if (falseWhenString(x) || true) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "if (this[index] == '\\n') {", "body": "<EOL><INDENT><INDENT>index + <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun testMultipleCinteropsWithTestSourceSetsAndCompilationsTestSourceSetsDependingOnMain(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>`test multiple cinterops with test source sets and compilations`(gradleVersion, true)<EOL><INDENT>}"}
{"signature": "val irFileDirectory =", "body": "<STR_LIT><EOL>"}
{"signature": "val aZ =", "body": "BooleanArray(<NUM_LIT>)<EOL>"}
{"signature": "val remap =", "body": "remap(`var`)<EOL>"}
{"signature": "val writeMethod =", "body": "WRITE_METHOD_NAMES[asmType] ?: error(<STR_LIT>)<EOL>"}
{"signature": "val differentSourceMark<NUM_LIT> =", "body": "timeSource<NUM_LIT>.markNow()<EOL>"}
{"signature": "fun renderArguments(arguments: List<FirExpression>) {", "body": "<EOL><INDENT><INDENT>printer.print(<STR_LIT>)<EOL><INDENT><INDENT>printer.renderSeparated(arguments, visitor)<EOL><INDENT><INDENT>printer.print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun testFunTypeVal() {", "body": "<EOL><INDENT><INDENT><!UNDERSCORE_USAGE_WITHOUT_BACKTICKS!>____<!>()<EOL><INDENT>}"}
{"signature": "if (owner.isInfix || owner.isOperator || owner.origin == IrBuiltIns.BUILTIN_OPERATOR) {", "body": "<EOL><INDENT><INDENT>val lhs = expression.binaryOperatorLhs() ?: return <NUM_LIT><EOL><INDENT><INDENT>return binaryOperatorOffset(lhs, sourceRangeInfo, source)<EOL><INDENT>}"}
{"signature": "import libcurl.", "body": "*<EOL>"}
{"signature": "val xcodebuildVersion =", "body": "xcode.xcodebuildVersion<EOL>"}
{"signature": "fun report(element: IrElement?, irFile: IrFile?, message: String, isError: Boolean) {", "body": "<EOL><INDENT><INDENT>val location = element?.getCompilerMessageLocation(irFile ?: error(<STR_LIT>))<EOL><INDENT><INDENT>this.messageCollector.report(<EOL><INDENT><INDENT><INDENT><INDENT>if (isError) CompilerMessageSeverity.ERROR else CompilerMessageSeverity.WARNING,<EOL><INDENT><INDENT><INDENT><INDENT>message, location<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val jsBlock =", "body": "JsBlock(statements)<EOL>"}
{"signature": "if (stdlibDependency != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val depVersion = stdlibDependency.version ?: coreLibrariesVersion.get()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (!isAtLeast<NUM_LIT>_<NUM_LIT>_<NUM_LIT>(depVersion)) return@withDependencies<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val I<NUM_LIT>_MUL =", "body": "<STR_LIT><EOL>"}
{"signature": "val friendsNames =", "body": "friends.takeIf { it.isNotBlank() }?.split(<STR_LIT>) ?: emptyList()<EOL>"}
{"signature": "if (function is FirDefaultPropertySetter) {", "body": "<EOL><INDENT><INDENT><INDENT>val valueParameter = function.valueParameters.first()<EOL><INDENT><INDENT><INDENT>val type = valueParameter.returnTypeRef.toIrType(c, ConversionTypeOrigin.SETTER)<EOL><INDENT><INDENT><INDENT>declareDefaultSetterParameter(type, valueParameter)<EOL><INDENT><INDENT>}"}
{"signature": "val localClassesInInlineLambdasPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "for (e in array) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += e<EOL><INDENT><INDENT>}"}
{"signature": "fun f(x: KClass<out Int>) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>f(<NUM_LIT>::class)<EOL><INDENT>f((<NUM_LIT> + <NUM_LIT>)::class)<EOL><INDENT><NUM_LIT>::toInt<EOL>}"}
{"signature": "val objCClassRegistry =", "body": "LocatableDeclarationRegistry<ObjCClassImpl>()<EOL>"}
{"signature": "fun visitUIntValue(value: UIntValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.INT<EOL><INDENT><INDENT>data.builder.intValue = value.value.toLong()<EOL><INDENT><INDENT>data.builder.flags = Flags.IS_UNSIGNED.toFlags(true)<EOL><INDENT>}"}
{"signature": "val classWithConstructors =", "body": "typeWithConstructors.constructor.declarationDescriptor as ClassDescriptor<EOL>"}
{"signature": "if (size > MINIMUM_GARBAGE_COLLECTIBLE_SIZE && filtered.size.toDouble() / fileIds.size.toDouble() < DELETED_TO_SIZE_THRESHOLD) {", "body": "<EOL><INDENT><INDENT><INDENT>lookupMap[key] = filtered<EOL><INDENT><INDENT>}"}
{"signature": "if (memoryUsageAfterBuild == null || memoryUsageBeforeBuild == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>log.debug(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val constraintsLines =", "body": "bomBuildFile.readText()<EOL>"}
{"signature": "val variableAsFunctionMode =", "body": "selectorCalleeReference is FirResolvedNamedReference &&<EOL>"}
{"signature": "for (knmFile in files) {", "body": "<EOL><INDENT><INDENT><INDENT>checkKnmStubConsistency(knmFile)<EOL><INDENT><INDENT>}"}
{"signature": "val DELEGATE_METHOD_FOR_FIR_VARIABLE =", "body": "JvmSerializationBindings.SerializationMappingSlice.create<FirVariable, Method>()<EOL>"}
{"signature": "if (reference is FirResolvedCallableReference) {", "body": "<EOL><INDENT><INDENT><INDENT>checkCallableReference(expression, symbol, reporter, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun testNoWarningsOnProjectDependencies(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>checkDiagnostics(gradleVersion, <STR_LIT>, projectPathToCheck = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val rowItems =", "body": "row.toList()<EOL>"}
{"signature": "var found =", "body": "false<EOL>"}
{"signature": "for (declaredField in clazz.declaredFields) {", "body": "<EOL><INDENT><INDENT><INDENT>val stubSerializer = declaredField.get(null) as? ObjectStubSerializer<*, *> ?: continue<EOL><INDENT><INDENT><INDENT>val name = declaredField.name<EOL><INDENT><INDENT><INDENT>val externalId = stubSerializer.externalId<EOL><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, externalId)<EOL><INDENT><INDENT>}"}
{"signature": "if (history.peekLast().first == line) {", "body": "<EOL><INDENT><INDENT><INDENT>history.removeLast()<EOL><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT>}"}
{"signature": "fun testFallbackRuleMatchEverything() {", "body": "<EOL><INDENT><INDENT>val fallbackRule = owners.patterns.first()<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>, fallbackRule.pattern)<EOL><INDENT><INDENT>assertIs<OwnershipPattern.Pattern>(fallbackRule, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (deprecatedSinceKotlin == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>SimpleDeprecatedProvider(deprecationLevel, propagatesToOverride, deprecated)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>L..<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>s = s * <NUM_LIT>0 + i<EOL><INDENT>}"}
{"signature": "val typeOperandIndex =", "body": "integerTypePredicates.indexOfFirst { it(typeOperand) }<EOL>"}
{"signature": "val DESERIALIZED_IR_HANDLERS_STEP_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val fpz =", "body": "F::class.constructors.single().call(+<NUM_LIT>f)<EOL>"}
{"signature": "val shouldExportKDoc =", "body": "false<EOL>"}
{"signature": "fun f<NUM_LIT>(<!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> a: Foo) {", "body": "}<EOL>fun f<NUM_LIT>(<!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> a: Foo?) {}"}
{"signature": "val myRecord =", "body": "MyRecord(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun call(c: Any) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>JavaClass::<!UNSUPPORTED_FEATURE!>foo<!><EOL><INDENT>call(JavaClass::<!UNSUPPORTED_FEATURE!>foo<!>)<EOL>}"}
{"signature": "val classLoaderData =", "body": "mutableListOf<ClassLoaderData>()<EOL>"}
{"signature": "val foundQualifiers =", "body": "annotations.mapNotNullTo(hashSetOf()) { it.qualifiedName }<EOL>"}
{"signature": "val importedModule =", "body": "import(crossModuleRef.module.header)<EOL>"}
{"signature": "for ((signature, expression) in fragment.imports) {", "body": "<EOL><INDENT><INDENT><INDENT>val importBuilder = Import.newBuilder()<EOL><INDENT><INDENT><INDENT>importBuilder.signatureId = serialize(signature)<EOL><INDENT><INDENT><INDENT>importBuilder.expression = serialize(expression)<EOL><INDENT><INDENT><INDENT>fragmentBuilder.addImportEntry(importBuilder)<EOL><INDENT><INDENT>}"}
{"signature": "val getDescriptorMethod =", "body": "methodClass.getDeclaredMethod(<STR_LIT>)<EOL>"}
{"signature": "for ((variable, constraint) in missedConstraints) {", "body": "<EOL><INDENT><INDENT><INDENT>typeCheckerState.addPossibleNewConstraint(variable, constraint)<EOL><INDENT><INDENT>}"}
{"signature": "val joinedLines =", "body": "propertyLines.joinToString(System.lineSeparator())<EOL>"}
{"signature": "val changedClassesFqNames =", "body": "changedProgramSymbols.classes.mapTo(mutableSetOf()) { it.asSingleFqName() }<EOL>"}
{"signature": "val supertypesToSkip =", "body": "context.session.primaryConstructorSuperTypePlatformSupport<EOL>"}
{"signature": "val valueAndIndexList =", "body": "mutableListOf<Int>()<EOL>"}
{"signature": "fun getValue(thisRef: Any?, property: kotlin.reflect.KProperty<*>) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>//  return thisRef._a<INDENT><INDENT><INDENT><INDENT><INDENT>// }"}
{"signature": "package foo.", "body": "bar<EOL>"}
{"signature": "val DISABLE_STATISTICS_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitString(x: JsStringLiteral) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeByte(ExpressionIds.STRING_LITERAL)<EOL><INDENT><INDENT><INDENT><INDENT>writeInt(internalizeString(x.value))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedMajor =", "body": "if (languageVersion.usesK<NUM_LIT>) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val ls =", "body": "us.filterNotNull()<EOL>"}
{"signature": "val headerId =", "body": "getHeaderId(getContainingFile(cursor))<EOL>"}
{"signature": "for (it in nameParts.drop(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>symbol = symbol.members_field?.getElementsByName(names.fromString(it))?.firstOrNull() as? Symbol.ClassSymbol ?: return null<EOL><INDENT><INDENT><INDENT><INDENT>symbol.complete()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>(MinUI + <NUM_LIT>u, MinUI + <NUM_LIT>u)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val gcRootSetSlot =", "body": "createRootSetSlot()<EOL>"}
{"signature": "val aDirTarget =", "body": "root.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (type.matchesFqNameWithSupertypes(superFqName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jvmCommand =", "body": "System.getProperty(<STR_LIT>) + javaExePath<EOL>"}
{"signature": "fun foo(id: Int) {", "body": "}<EOL><EOL><INDENT>@Test<EOL><INDENT>private fun ping() {}"}
{"signature": "val notSuspendLambda =", "body": "Label()<EOL>"}
{"signature": "if (searchScope == provider.scope) {", "body": "<EOL><INDENT><INDENT><INDENT>provider<EOL><INDENT><INDENT>}"}
{"signature": "val BUILT_INS_NATIVE_DIR_JVM =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "if (file.isDirectory && !dirHasFilesInside(file)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw IllegalStateException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.symbol.getAnnotationStringParameter(JsStandardClassIds.Annotations.JsNative, context.session) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(jsNameSource, FirJsErrors.JS_NAME_PROHIBITED_FOR_NAMED_NATIVE, context)<EOL><INDENT><INDENT>}"}
{"signature": "var STATE_SUSPENDED =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun foo(p: AAA<String>, s: Int?) {", "body": "<EOL><INDENT>p.<!CANNOT_INFER_PARAMETER_TYPE!>process<!>(<!ARGUMENT_TYPE_MISMATCH(<STR_LIT>)!>s<!>)<EOL>}"}
{"signature": "val coneNotFunctionAsOperator =", "body": "ConeNotFunctionAsOperator(propertyAsOperator.symbol)<EOL>"}
{"signature": "val notFound =", "body": "ArrayList<String>()<EOL>"}
{"signature": "when (val lambda = expression.getValueArgument(<NUM_LIT>)) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is IrBlock -> (lambda.statements.last() as IrFunctionReference).acceptVoid(this)<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is IrFunctionExpression -> lambda.function.acceptVoid(this)<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> lambda?.acceptVoid(this) // for example IrFunctionReference<INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!extensions.extraProperties.has(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>registerDiscoverScriptExtensionsTransform(classLoadersCachingService, compilerClasspath)<EOL><INDENT><INDENT>extensions.extraProperties[<STR_LIT>] = true<EOL><INDENT>}"}
{"signature": "fun visitFinallyBlockExitNode(node: FinallyBlockExitNode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>finallyScopeCount--<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (index == pathSegments.lastIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source = accessSource<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isSigned) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KmAnnotationArgument.LongValue(value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val callType =", "body": "callTypeAndReceiver.callType<EOL>"}
{"signature": "if (subCandidate.postponedAtoms.contains(lambdaAtom)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>found = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>uL until <NUM_LIT>uL step <NUM_LIT>L) {", "body": "<EOL><INDENT><INDENT>ulongList += i<EOL><INDENT>}"}
{"signature": "val indyExpr =", "body": "Regex(<STR_LIT>).find(it)<EOL>"}
{"signature": "val WINDOW =", "body": "<STR_LIT><EOL>"}
{"signature": "val argumentProtos =", "body": "proto.argumentList<EOL>"}
{"signature": "fun test<NUM_LIT>(f: String.(String) -> Unit) {", "body": "<EOL><INDENT><STR_LIT>.f(<STR_LIT>)<EOL><INDENT><STR_LIT>.f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>p<NUM_LIT><!> = <STR_LIT>)<!><EOL><INDENT><STR_LIT>.f(<!NO_VALUE_FOR_PARAMETER!><!NAMED_ARGUMENTS_NOT_ALLOWED, NAMED_PARAMETER_NOT_FOUND!>zzz<!> = <STR_LIT>)<!><EOL>}"}
{"signature": "var separator =", "body": "separator<EOL>"}
{"signature": "val stackTraceProcessor =", "body": "<EOL><INDENT><INDENT>TeamCityMessageStackTraceProcessor()<EOL>"}
{"signature": "val valueOfFun =", "body": "enumClass.functions.single { it.name.asString() == <STR_LIT> }<EOL>"}
{"signature": "val splayTreeModifications =", "body": "<NUM_LIT>;<EOL>"}
{"signature": "val rowValues =", "body": "valuesByRow[row]?.let { values -> values.sortedBy { it.indent } } ?: emptyList()<EOL>"}
{"signature": "package qq<EOL>.", "body": ""}
{"signature": "fun interceptJavaStaticField(expression: IrGetField) {", "body": "<EOL><INDENT><INDENT>val field = expression.symbol.owner<EOL><INDENT><INDENT>verify(field.origin == IrDeclarationOrigin.IR_EXTERNAL_JAVA_DECLARATION_STUB && field.isStatic)<EOL><INDENT><INDENT>verify(field.initializer?.expression !is IrConst<*>)<EOL><INDENT><INDENT>callStack.pushState(environment.convertToState(Wrapper.getStaticGetter(field).invokeWithArguments(), field.type))<EOL><INDENT>}"}
{"signature": "val invocationKindProtobufEnum =", "body": "invocationKindProtobufEnum(effectDeclaration.kind)<EOL>"}
{"signature": "when(sourceSetTree) {", "body": "<INDENT><INDENT><INDENT>null -> continue // for unknown trees there should be no relation between source sets, so just skip<INDENT><INDENT><INDENT>KotlinSourceSetTree.main -> <STR_LIT><INDENT><INDENT><INDENT>else -> lowerCamelCaseName(<STR_LIT>, sourceSetTree.name, <STR_LIT>)<INDENT><INDENT>}"}
{"signature": "val CONFIGURATION_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "fun initialize(first: CirValueParameter) {", "body": "<EOL><INDENT><INDENT>name = first.name<EOL><INDENT><INDENT>varargElementType = first.varargElementType<EOL><INDENT><INDENT>isCrossinline = first.isCrossinline<EOL><INDENT><INDENT>isNoinline = first.isNoinline<EOL><INDENT>}"}
{"signature": "val EMPTY_CONTRACT_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val genericFakeOverrideMFVCWithMFVCUpperBound =", "body": "GenericFakeOverrideMFVCWithMFVCUpperBound(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val contextReceiverType =", "body": "deserializationContext.typeDeserializer.type(this)<EOL>"}
{"signature": "if (isPreHmppDependency(dependency) && reportedDependencies.add(dependencyId)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collector.reportOncePerGradleBuild(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>project,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>KotlinToolingDiagnostics.PreHmppDependenciesUsedInBuild(dependencyId.displayName),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>key = dependencyId.displayName<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun takeJ(j: J) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>takeJ(J().j())<EOL>}"}
{"signature": "val decompiledPsiFilesFromSourceJar =", "body": "LibraryUtils.getAllPsiFilesFromJar(librarySourcesJar, project)<EOL>"}
{"signature": "val resultHandler =", "body": "buildResultHandler(runResult)<EOL>"}
{"signature": "fun testFlagInMapAppearsIfPresent() {", "body": "<EOL><INDENT><INDENT>val map = mapOf(<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT>val options = makeExternalDependenciesResolverOptions(map)<EOL><EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.flag(<STR_LIT>), true)<EOL><INDENT>}"}
{"signature": "if (if (b == null) return <STR_LIT> else b) {", "body": "<EOL><INDENT><INDENT>if (s == null) return <STR_LIT><EOL><INDENT><INDENT>s<EOL><INDENT>}"}
{"signature": "val kotlinMutableAnalogFqName =", "body": "JavaToKotlinClassMap.readOnlyToMutable(kotlinAnalog.fqNameUnsafe) ?: return setOf(kotlinAnalog)<EOL>"}
{"signature": "val fileQualifiedName =", "body": "file.packageFqName.asString()<EOL>"}
{"signature": "val dstClass =", "body": "value.typeOperand.getClass()<EOL>"}
{"signature": "val contextReceiverCount =", "body": "callee.contextReceiverParametersCount<EOL>"}
{"signature": "if (left != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateInstructions(left)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val computationSession =", "body": "implicitBodyResolveComputationSession as LLImplicitBodyResolveComputationSession<EOL>"}
{"signature": "val VARIANT =", "body": "CompilerConfigurationKey.create<List<String>>(<STR_LIT>)<EOL>"}
{"signature": "var thisNode =", "body": "instructions.first<EOL>"}
{"signature": "val valueAccess =", "body": "if (accessor.hasValueAccessor) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val externalGlobal =", "body": "LLVMGetNamedGlobal(otherModule, name)!!<EOL>"}
{"signature": "val firLoopParameter =", "body": "generateTemporaryVariable(<EOL>"}
{"signature": "val minEnd<NUM_LIT> =", "body": "minEnd(<EOL>"}
{"signature": "val KOTLIN_COMPILER_REFERENCE_INDEX_BUILDER_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "val baseDispatchReceiverType =", "body": "symbol.dispatchReceiverType ?: return@l ProcessorAction.NEXT<EOL>"}
{"signature": "fun foo(<EOL><INDENT>javaTable: JavaTableView<String>,<EOL><INDENT>kotlinTable: KotlinTableView<String>,<EOL><INDENT>selection: ArrayList<String><EOL>) {", "body": "<EOL><INDENT>javaTable.selection = selection<EOL><INDENT>kotlinTable.selection = selection<EOL>}"}
{"signature": "if (qualifierPartArgsCount > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return ConeTypeArgumentsForOuterClassWhenNestedReferencedError(typeArgumentList.source!!)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val NON_CONST =", "body": "<NUM_LIT><EOL>"}
{"signature": "val accessExternalFileUrl =", "body": "<STR_LIT><EOL>"}
{"signature": "val calleeAsDoubleColonLHS =", "body": "resolveExpressionOnLHS(callee, c) ?: return null<EOL>"}
{"signature": "fun visitQualifiedErrorAccessExpression(qualifiedErrorAccessExpression: FirQualifiedErrorAccessExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitQualifiedErrorAccessExpression(qualifiedErrorAccessExpression)<EOL><INDENT>}"}
{"signature": "val subPath =", "body": "path.substring(rootLength)<EOL>"}
{"signature": "val cPointerRawValuePropertyName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testImportedLongConstInlinedFromOtherModule() {", "body": "<EOL><INDENT>testImportedLongConstInlineFun()<EOL>}"}
{"signature": "val runtimeKlibsPaths =", "body": "WasmEnvironmentConfigurator.getRuntimePathsForModule(target)<EOL>"}
{"signature": "if (stub.stubType == KtStubElementTypes.CLASS_BODY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stub.getChildrenStubs().filterIsInstance<KotlinClassOrObjectStub<*>>().forEach(::indexStub)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fileLocalDeserializationState =", "body": "moduleReversedFileIndex[key] ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (data != null && strings != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val (nameResolver, proto) = JvmProtoBufUtil.readPackageDataFrom(data, strings)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Triple(nameResolver, proto, header.metadataVersion)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val _expressions =", "body": "mutableListOf<IrExpression>()<EOL>"}
{"signature": "package<EOL><INDENT><INDENT><INDENT><INDENT>if (parent.", "body": "classId.packageFqName != regularClass.classId.packageFqName) continue<EOL>"}
{"signature": "if (csBuilder.hasContradiction) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.yieldDiagnostic(InapplicableCandidate)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val functionWithNaturalNameExists =", "body": "explicitlyDeclaredFunctionWithNaturalName != null ||<EOL>"}
{"signature": "fun calculateK() {", "body": "<EOL><INDENT>k++<EOL>}"}
{"signature": "package suspendLambdaAssertionsDisabled<EOL>.", "body": ""}
{"signature": "for ((from, to) in candidates) {", "body": "<EOL><INDENT><INDENT><INDENT>addLocalVariableAlias(this, from, to ?: continue)<EOL><INDENT><INDENT>}"}
{"signature": "if (propertyFound) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>hasMatchingSetter = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ProcessorAction.STOP<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun quickSort(<EOL><INDENT><INDENT>array: IntArray, left: Int, right: Int) {", "body": "<EOL><INDENT>val index = partition(array, left, right)<EOL><INDENT>if (left < index - <NUM_LIT>)<EOL><INDENT><INDENT>quickSort(array, left, index - <NUM_LIT>)<EOL><INDENT>if (index < right)<EOL><INDENT><INDENT>quickSort(array, index, right)<EOL>}"}
{"signature": "val resolvedAnnotationSymbol =", "body": "annotationType.lookupTag.toFirRegularClassSymbol(context.session) ?: return<EOL>"}
{"signature": "for (x in ShortArray(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>if (x != <NUM_LIT>toShort()) return <STR_LIT><EOL><INDENT>}"}
{"signature": "val myTypeVariable =", "body": "getMyTypeVariable(type)<EOL>"}
{"signature": "fun checkAssumptions() {", "body": "<EOL><INDENT><INDENT>`check for KT<NUM_LIT>`()<EOL><INDENT>}"}
{"signature": "if (target is KotlinAndroidTarget) {", "body": "<EOL><INDENT><INDENT><INDENT>return AndroidGradlePluginVersion.current >= KotlinAndroidTargetResourcesPublication.MIN_AGP_VERSION<EOL><INDENT><INDENT>}"}
{"signature": "val shouldRefineInSwift =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (resolutionAtPositions.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val (_, singleResolutionResult) = resolutionAtPositions.single()<EOL><EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun testKotlinProjectWithEmptyTestOutputDir() {", "body": "<EOL><INDENT><INDENT>doTest()<EOL><INDENT>}"}
{"signature": "val MAX_FUNCTION_PARAMETERS_ON_ONE_LINE =", "body": "<NUM_LIT><EOL>"}
{"signature": "val getValueByOrdinal =", "body": "<EOL><INDENT><INDENT><INDENT>irInvoke(<EOL>"}
{"signature": "val successValue =", "body": "x.compareAndSet(initial, new)<EOL>"}
{"signature": "val withPrivateInvoke =", "body": "WithPrivateInvoke()<EOL>"}
{"signature": "val sourceLocationMappings =", "body": "mutableListOf<SourceLocationMapping>()<EOL>"}
{"signature": "val libraryRoot =", "body": "Paths.get(libraryRootPath)<EOL>"}
{"signature": "var contextReceivers =", "body": "resolvedCallAtom.contextReceiversArguments.map { it.receiver.receiverValue }<EOL>"}
{"signature": "val unownedHeadersToDefFiles =", "body": "mutableMapOf<String, File>()<EOL>"}
{"signature": "val cacheDeserializationStrategy =", "body": "CacheDeserializationStrategy.SingleFile(file.path, file.packageFqName.asString())<EOL>"}
{"signature": "val builtInsModuleInfo =", "body": "BuiltInModuleInfo(Name.special(<STR_LIT>))<EOL>"}
{"signature": "val actualConfigurationsWithDisambiguationAttribute =", "body": "configurations<EOL>"}
{"signature": "if (this.isNull() && !irType.isNullable()) {", "body": "<EOL><INDENT><INDENT>exceptionToThrow().handleUserException(environment)<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "val compilationWithImports =", "body": "compilation.copy(<EOL>"}
{"signature": "if (cacheableSerializers[index]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irInvoke(irGet(variable), compilerContext.arrayValueGetter.symbol, irInt(index))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val hasDefaults =", "body": "(<NUM_LIT> until expression.valueArgumentsCount).any { expression.getValueArgument(it) == null }<EOL>"}
{"signature": "var irOnly =", "body": "false<EOL>"}
{"signature": "var sweepStatistics =", "body": "mutableMapOf<String, SweepStatistics>()<EOL>"}
{"signature": "val isInsideExpectClass =", "body": "isInsideExpectClass(containingDeclaration, context)<EOL>"}
{"signature": "fun visitImplicitInvokeCall(implicitInvokeCall: FirImplicitInvokeCall, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allFunctionCallCheckers.check(implicitInvokeCall, data)<EOL><INDENT>}"}
{"signature": "fun f<NUM_LIT>(s: Int?) {", "body": "<EOL><INDENT>var u = <!INVALID_IF_AS_EXPRESSION!>if<!> (s!! == <NUM_LIT>2);<EOL><INDENT>if (u == Unit) u = <!INVALID_IF_AS_EXPRESSION!>if<!> (s == <NUM_LIT>);<EOL><INDENT>return u<EOL>}"}
{"signature": "fun foo(u: Usage) {", "body": "<EOL>  u.foo(null)<EOL>}"}
{"signature": "if (firProperty.origin == FirDeclarationOrigin.ScriptCustomization.ResultProperty) {", "body": "<EOL><INDENT><INDENT>calculateLazyBodyForResultProperty(firProperty, designation)<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "fun assertFilesContentEquals(expected: Path, actual: Path) {", "body": "<EOL><INDENT>assertFileExists(expected)<EOL><INDENT>assertFileExists(actual)<EOL><INDENT>assertContentEquals(<EOL><INDENT><INDENT>expected.readLines().asSequence(),<EOL><INDENT><INDENT>actual.readLines().asSequence(),<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>)<EOL>}"}
{"signature": "val explicitOrDefaultVersion =", "body": "explicitVersion ?: defaultLanguageVersion(collector)<EOL>"}
{"signature": "var baz =", "body": "<NUM_LIT><EOL>"}
{"signature": "val embedStaticLibrariesDir =", "body": "interopDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val closeL =", "body": "{ closeable?.close() }<EOL>"}
{"signature": "val irRhs =", "body": "irCallOp(context.irBuiltIns.intPlusSymbol, irIntType, shiftedResult, getHashCodeOfProperty(property))<EOL>"}
{"signature": "val runBlockSymbol =", "body": "IrSimpleFunctionSymbolImpl()<EOL>"}
{"signature": "val alist =", "body": "arrayListOf(<NUM_LIT> to <NUM_LIT>, <NUM_LIT> to <NUM_LIT>, <NUM_LIT> to <NUM_LIT>)<EOL>"}
{"signature": "val isProjectIsolationEnabled =", "body": "project.isProjectIsolationEnabled<EOL>"}
{"signature": "val OBJC_MARK =", "body": "<STR_LIT><EOL>"}
{"signature": "val targetResolver =", "body": "this[target.path]<EOL>"}
{"signature": "val isolatedClassLoader<NUM_LIT> =", "body": "URLClassLoader(classes, null)<EOL>"}
{"signature": "val symlinkTarget =", "body": "createTempDirectory().cleanupRecursively()<EOL>"}
{"signature": "val tmp_a =", "body": "a<EOL>"}
{"signature": "for (i in logged(<STR_LIT>, <NUM_LIT>) downTo logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT>0 + i<EOL><INDENT>}"}
{"signature": "val permittedOwners =", "body": "mutableListOf<CodeOwners.OwnerListEntry>()<EOL>"}
{"signature": "var wasSuccess =", "body": "basicResult.result == OverrideCompatibilityInfo.Result.OVERRIDABLE<EOL>"}
{"signature": "fun main<NUM_LIT>(x: A<<!UPPER_BOUND_VIOLATED_BASED_ON_JAVA_ANNOTATIONS!>Int?<!>>) {", "body": "}<EOL>fun main<NUM_LIT>(x: A<NUM_LIT><<!UPPER_BOUND_VIOLATED_BASED_ON_JAVA_ANNOTATIONS!>Int?<!>>) {}"}
{"signature": "val loweredEnumConstructorParameters =", "body": "mutableMapOf<IrValueParameter, IrValueParameter>()<EOL>"}
{"signature": "if (!context.isTopLevel) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotation.source, FirWasmErrors.NESTED_WASM_IMPORT, context)<EOL><INDENT><INDENT>}"}
{"signature": "val executed =", "body": "AtomicReference<Throwable>()<EOL>"}
{"signature": "val localIndex =", "body": "signature.valueParameters.take(index + if (replaced.extensionReceiverParameter != null) <NUM_LIT> else <NUM_LIT>)<EOL>"}
{"signature": "val Normal_Forward =", "body": "Edge(NormalPath, EdgeKind.Forward)<EOL>"}
{"signature": "when (classOrTypeAliasType) {", "body": "<EOL><INDENT><INDENT><INDENT>is CirClassType -> visit(classOrTypeAliasType)<EOL><INDENT><INDENT><INDENT>is CirTypeAliasType -> visit(classOrTypeAliasType)<EOL><INDENT><INDENT>}"}
{"signature": "fun reportWrongExportedDeclaration(kind: String) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJs.WRONG_EXPORTED_DECLARATION.on(declaration, kind))<EOL><INDENT><INDENT>}"}
{"signature": "else if (declaration.isVisibleInLVT) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.markLineNumber(startOffset = true)<EOL><INDENT><INDENT><INDENT>pushDefaultValueOnStack(varType, mv)<EOL><INDENT><INDENT><INDENT>mv.store(index, varType)<EOL><INDENT><INDENT>}"}
{"signature": "val dependencyUrl =", "body": "<STR_LIT><EOL>"}
{"signature": "val varDeclarationWithInit =", "body": "JsVars.JsVar(name, initExpr).apply { synthetic = true }<EOL>"}
{"signature": "val unescaped =", "body": "child.unescapedValue<EOL>"}
{"signature": "val namesProperty =", "body": "it as? JsonArray ?: return SourceMapError(<STR_LIT>)<EOL>"}
{"signature": "val resolvedFullyExpandedType =", "body": "argument.resolvedType.fullyExpandedType(context.session)<EOL>"}
{"signature": "val agpVersions =", "body": "listOf(<EOL>"}
{"signature": "if (<STR_LIT> !in adaptedSource) {", "body": "<EOL><INDENT><INDENT><INDENT>return adaptedSource.replace(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (checkBases) {", "body": "<EOL><INDENT><INDENT><INDENT>PsiClassImplUtil.findInnerByName(myClass, name, true)<EOL><INDENT><INDENT>}"}
{"signature": "val COMMAS =", "body": "SourceElementPositioningStrategy(<EOL>"}
{"signature": "fun processReturns() {", "body": "<INDENT><INDENT>// Do nothing.<INDENT>}"}
{"signature": "for (index in <NUM_LIT> until range.first) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(args[index])<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val INCREASE_K =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (c in this) {", "body": "<EOL><INDENT><INDENT>offset++<EOL><INDENT><INDENT>if (c == '\\n') lineOffsets.add(offset)<EOL><INDENT>}"}
{"signature": "if (!results.isSuccess) {", "body": "<EOL><INDENT><INDENT><INDENT>return errorType()<EOL><INDENT><INDENT>}"}
{"signature": "val nonLazy =", "body": "MyColor(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val approximatesExpectedType =", "body": "<EOL><INDENT><INDENT><INDENT>typeApproximator.approximateToSubType(expectedType, TypeApproximatorConfiguration.LocalDeclaration) ?: expectedType<EOL>"}
{"signature": "package InheritGenericInExternalClass<EOL>.", "body": ""}
{"signature": "val intermediateResultType =", "body": "numberFunctionOperandType(returnType)<EOL>"}
{"signature": "val fileExtension =", "body": "fileName.split(<STR_LIT>).last()<EOL>"}
{"signature": "fun call<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>test()<EOL><INDENT>}"}
{"signature": "val ORIGINAL_ROOTS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "var TIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val expectedModuleName =", "body": "<STR_LIT><EOL>"}
{"signature": "package $packageFqName not found\", finder.", "body": "findPackage(packageFqName.asString()))<EOL>"}
{"signature": "val isInline =", "body": "Flags.IS_INLINE_ACCESSOR.get(setterFlags)<EOL>"}
{"signature": "val psiClassType =", "body": "ex.defaultType.asPsiType(support, TypeMappingMode.DEFAULT, builder) as? PsiClassType<EOL>"}
{"signature": "val K_CLASS_QUALIFIED_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "var filesCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (invalid in listOf(<NUM_LIT>, <NUM_LIT>, Double.NaN, Double.MAX_VALUE, -Double.MAX_VALUE, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(atanh(invalid).isNaN())<EOL><INDENT><INDENT>}"}
{"signature": "package view scope for $fqName in ${module.", "body": "name}\", scopes)<EOL>"}
{"signature": "fun test(x: Int?) {", "body": "<EOL><INDENT> <!TYPE_MISMATCH!>x<!> in <NUM_LIT>.<NUM_LIT><EOL>}"}
{"signature": "fun test(x: CollectionStringImpl) {", "body": "<EOL><INDENT>x.contains(<STR_LIT>)<EOL><INDENT>(x as Collection<String>).contains(<STR_LIT>)<EOL>}"}
{"signature": "var front =", "body": "nodeIds.keys.toMutableList()<EOL>"}
{"signature": "val prevKeys =", "body": "this.keys<EOL>"}
{"signature": "while (preliminaryVisitor == null && currentDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentDeclaration = currentDeclaration.getStrictParentOfType()<EOL><INDENT><INDENT><INDENT><INDENT>preliminaryVisitor = bindingContext.get(BindingContext.PRELIMINARY_VISITOR, currentDeclaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (calleeExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtConstructorCalleeExpression -> if (calleeExpression.parent is KtSuperTypeCallEntry) return<EOL><INDENT><INDENT><INDENT>is KtConstructorDelegationReferenceExpression -> return<EOL><INDENT><INDENT>}"}
{"signature": "val TAGS_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val expectedMapping =", "body": "expectedMapping(categoryCode)<EOL>"}
{"signature": "if (mostVisibleProperties.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return mostVisibleProperties.first()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val destinationZipFile =", "body": "temporaryFolder.newFile()<EOL>"}
{"signature": "val charsPerGroup =", "body": "charsPerSet(charsPerByte, bytesPerGroup, byteSeparatorLength)<EOL>"}
{"signature": "val defaultMaxMemoryPerTestWorkerMb =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun addSubFrame(subFrameOwner: IrElement) {", "body": "<EOL><INDENT><INDENT>innerStack.add(SubFrame(subFrameOwner))<EOL><INDENT>}"}
{"signature": "val MISSING_EXACT_OBJC_NAME =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "if (other is LightField<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>other.name<EOL><INDENT><INDENT>}"}
{"signature": "val sizeOfArgumentStringPtr =", "body": "allocator.allocate(<NUM_LIT>)<EOL>"}
{"signature": "val needProfiling =", "body": "arguments.profilePhases<EOL>"}
{"signature": "while (slashIndex >= <NUM_LIT> && this[slashIndex] != '/') {", "body": "<EOL><INDENT><INDENT><INDENT>slashIndex--<EOL><INDENT><INDENT>}"}
{"signature": "var hasMore =", "body": "true<EOL>"}
{"signature": "val isConstructorParameterSymbol =", "body": "containingMethod.isConstructor<EOL>"}
{"signature": "val fooKt =", "body": "projectPath.resolve(<STR_LIT>).resolve(<STR_LIT>)<EOL>"}
{"signature": "var testedEquals =", "body": "false<EOL>"}
{"signature": "if (symbol is FirRegularClassSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>symbol.fir<EOL><INDENT><INDENT>}"}
{"signature": "val typeApproximator =", "body": "scopeTower.typeApproximator<EOL>"}
{"signature": "val regularDependencies =", "body": "hashSetOf<Dependency>()<EOL>"}
{"signature": "fun push(state: State) {", "body": "<EOL><INDENT><INDENT>stack.add(state)<EOL><INDENT>}"}
{"signature": "fun sideEffects() {", "body": "<EOL><INDENT>x++<EOL>}"}
{"signature": "val withWhen<NUM_LIT> =", "body": "<!EVALUATED(<STR_LIT>)!>when(value) { <NUM_LIT> -> <STR_LIT>; <NUM_LIT>0 -> <STR_LIT>; else -> <STR_LIT> }<!><EOL>"}
{"signature": "if (sameAbiDir.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>val testCaseSameAbi: TestCase = generateTestcaseFromDirectory(testPathFull, <STR_LIT>, listOf())<EOL><INDENT><INDENT><INDENT>compileToLibrary(testCaseSameAbi).assertSuccess()<EOL><INDENT><INDENT><INDENT>val headerKlibSameAbi = File(getHeaderPath(<STR_LIT>))<EOL><INDENT><INDENT><INDENT>assert(headerKlibSameAbi.exists())<EOL><INDENT><INDENT><INDENT>assertContentEquals(headerKlibBase.readBytes(), headerKlibSameAbi.readBytes())<EOL><INDENT><INDENT>}"}
{"signature": "if (s.hashCode() == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return bar(s)<EOL><INDENT>}"}
{"signature": "fun visitComparisonExpression(comparisonExpression: FirComparisonExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(comparisonExpression)<EOL><INDENT>}"}
{"signature": "val deserializedFile =", "body": "ifTrue { stringTable[readInt()] }<EOL>"}
{"signature": "val innerClassesProperties =", "body": "innerClasses.map { it.toReadonlyProperty() }<EOL>"}
{"signature": "val simpleNameProp =", "body": "JsPropertyInitializer(JsNameRef(Namer.METADATA_SIMPLE_NAME), JsStringLiteral(simpleName.identifier))<EOL>"}
{"signature": "if (whenReturnType != null && isExhaustive && expression.elseExpression == null && KotlinBuiltIns.isNothing(whenReturnType)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.record(BindingContext.IMPLICIT_EXHAUSTIVE_WHEN, expression)<EOL><INDENT><INDENT>}"}
{"signature": "if (k >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>y = doubleSetWord(d = y, hi = __HI(y) + (k shl <NUM_LIT>))<INDENT><EOL><INDENT><INDENT>return y<EOL><INDENT>}"}
{"signature": "val remappedParameters =", "body": "makeMethodLikeRemappedParameters(constructor)<EOL>"}
{"signature": "val shrunkClasses =", "body": "shrunkCurrentClasspathAgainstPrevLookups.mapTo(mutableSetOf()) { it.classId }<EOL>"}
{"signature": "val beingResolved =", "body": "hashSetOf<Tree>()<EOL>"}
{"signature": "fun p<NUM_LIT>Fun() {", "body": "}<EOL>fun String.p<NUM_LIT>ExtFun() {}"}
{"signature": "val dummy =", "body": "Node(root!!.key, root!!.value)<EOL>"}
{"signature": "val primaryConstructorParameters =", "body": "declarationProvider.primaryConstructorParameters<EOL>"}
{"signature": "fun use(c: suspend (Pair<Int, Int>) -> Unit) {", "body": "}<EOL><EOL>fun blackhole(a: Any) {}"}
{"signature": "when (base) {", "body": "<EOL><INDENT><INDENT>is A -> <NUM_LIT><EOL><INDENT><INDENT>is B.First -> <NUM_LIT><EOL><INDENT><INDENT>is B.Second -> <NUM_LIT><EOL><INDENT><INDENT>C.SomeValue -> <NUM_LIT><EOL><INDENT><INDENT>C.AnotherValue -> <NUM_LIT><EOL><INDENT><INDENT>D -> <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (!arguments.sourceMap && sourceMapEmbedContentString != null) {", "body": "<EOL><INDENT><INDENT><INDENT>messageCollector.report(WARNING, <STR_LIT>, null)<EOL><INDENT><INDENT>}"}
{"signature": "if (importTracker != null) {", "body": "<EOL><INDENT><INDENT>register(<EOL><INDENT><INDENT><INDENT>FirImportTrackerComponent::class,<EOL><INDENT><INDENT><INDENT>IncrementalPassThroughImportTrackerComponent(importTracker)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "when (pluginName) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -><EOL><INDENT><INDENT><INDENT>Class.forName(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>.getDeclaredConstructor()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>.newInstance() as Plugin<EOL><INDENT><INDENT>null -> DefaultPlugin<EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun testRandomFlagArgumentsJVM() {", "body": "<EOL><INDENT><INDENT>doRandomFlagArgumentsTest<K<NUM_LIT>JVMCompilerArguments>()<EOL><INDENT>}"}
{"signature": "val PUBLIC_VALUE =", "body": "<STR_LIT><EOL>"}
{"signature": "val functionBuilder =", "body": "JsAstProtoBuf.Function.newBuilder()<EOL>"}
{"signature": "fun A(x: Int, $default: Int) {", "body": "<EOL> *<INDENT>   val x = if ($default and <NUM_LIT>b<NUM_LIT> != <NUM_LIT>) <NUM_LIT> else x<EOL> *<INDENT>   f(x)<EOL> *<INDENT> }"}
{"signature": "if (DescriptorUtils.isObject(resolvedCall.resultingDescriptor.containingDeclaration)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>cachedReceiver = context().getOrDeclareTemporaryConstVariable(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ReferenceTranslator.translateAsValueReference(resolvedCall.resultingDescriptor.containingDeclaration, context()))<EOL><INDENT><INDENT><INDENT><INDENT>result.add(<NUM_LIT>, cachedReceiver.reference())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (generateConfigOnly) {", "body": "<EOL><INDENT><INDENT><INDENT>runner.config.save(configFile.get())<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val PASSES =", "body": "System.getProperty(<STR_LIT>)?.toInt() ?: <NUM_LIT><EOL>"}
{"signature": "if (parentSession is StubTypesBasedInferenceSession<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>parentSession.addNestedInferenceSession(this)<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_SUPPRESS_GRADLE_PLUGIN_ERRORS =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (enumEntriesClass != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>elementFactory.createType(enumEntriesClass, enumTypeWithoutAnnotation)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lightTreeConverter =", "body": "LightTree<NUM_LIT>Fir(<EOL>"}
{"signature": "for (e in string) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += e.hashCode()<EOL><INDENT><INDENT>}"}
{"signature": "var inliningHazard =", "body": "false<EOL>"}
{"signature": "val objType =", "body": "jsTypeOf(obj)<EOL>"}
{"signature": "val xss =", "body": "java.lang.<!NO_COMPANION_OBJECT!>System<!><EOL>"}
{"signature": "if (end < minSurrogate || start > maxSurrogate) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>bits_.set(start, end + <NUM_LIT>, !inverted)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val visibility =", "body": "withInfo.visibility.toVisibility()<EOL>"}
{"signature": "fun fooWarningIsGreater<NUM_LIT>() {", "body": "}<EOL><EOL>@Deprecated(<STR_LIT>)<EOL><!DEPRECATED_SINCE_KOTLIN_WITH_UNORDERED_VERSIONS!>@DeprecatedSinceKotlin(warningSince = <STR_LIT>, errorSince = <STR_LIT>, hiddenSince = <STR_LIT>)<!><EOL>fun fooErrorIsGreater() {}"}
{"signature": "if (session.predicateBasedProvider.matches(PREDICATE, classSymbol)) {", "body": "<EOL><INDENT><INDENT><INDENT>setOf(SpecialNames.DEFAULT_NAME_FOR_COMPANION_OBJECT)<EOL><INDENT><INDENT>}"}
{"signature": "val overrideService =", "body": "session.overrideService<EOL>"}
{"signature": "val functionHasDispatchReceiver =", "body": "function.dispatchReceiverParameter != null<EOL>"}
{"signature": "val dependsRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val substitutionForCallable =", "body": "substitutions[effect.callable] as? ESValue ?: continue@effectsLoop<EOL>"}
{"signature": "val descriptorsToDrop =", "body": "ArrayList<T>()<EOL>"}
{"signature": "if (expr.length > <NUM_LIT>) {", "body": "<EOL><INDENT>val c = expr.get(<NUM_LIT>)<EOL><INDENT>expr.deleteCharAt(<NUM_LIT>)<EOL>  }"}
{"signature": "val binaryenPath =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val coroutineContextKey =", "body": "<EOL><INDENT><INDENT><INDENT>(KotlinClassMetadata.readStrict(CoroutineContext.Key::class.java.getMetadata()) as KotlinClassMetadata.Class).kmClass.name<EOL>"}
{"signature": "when (actualMembers.first()) {", "body": "<EOL><INDENT><INDENT>is IrSimpleFunction -> createFakeOverrideFunction(actualMembers as List<IrSimpleFunction>, declaration)<EOL><INDENT><INDENT>is IrProperty -> createFakeOverrideProperty(actualMembers as List<IrProperty>, declaration)<EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val hasJsName =", "body": "AnnotationsUtils.getJsNameAnnotation(descriptor) != null<EOL>"}
{"signature": "val PACKAGE_OPTION =", "body": "CliOption(<STR_LIT>, <STR_LIT>, <STR_LIT>, required = false)<EOL>"}
{"signature": "if (isErrorCandidate()) {", "body": "<EOL><INDENT><INDENT><INDENT>return ErrorCallResolutionResult(resolvedCall, allDiagnostics, constraintSystem)<EOL><INDENT><INDENT>}"}
{"signature": "val indexInClass =", "body": "index - indexOffset<EOL>"}
{"signature": "val nestedClassifiers =", "body": "computeNestedClassifiersForClass(classSymbol)<EOL>"}
{"signature": "val taskListener =", "body": "listener(compilationTask.elements, Trees.instance(compilationTask))<EOL>"}
{"signature": "val resolvedParentClassId =", "body": "import.resolvedParentClassId ?: return@forEach<EOL>"}
{"signature": "val equalsInt<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER, EQUALITY_NOT_APPLICABLE!><NUM_LIT> == <STR_LIT><!><EOL>"}
{"signature": "val delegationCtorInTheSameClass =", "body": "delegationClassDescriptor == classDescriptor<EOL>"}
{"signature": "import foo as *<EOL>.", "body": ""}
{"signature": "while (i <= j) {", "body": "<EOL><INDENT><INDENT>while (this[i] < m) i++<EOL><INDENT><INDENT>while (this[j] > m) j--<EOL><INDENT><INDENT>if (i <= j)<EOL><INDENT><INDENT><INDENT>swap(i++, j--)<EOL><INDENT>}"}
{"signature": "var dontRemember =", "body": "false<EOL>"}
{"signature": "while (typeParametersCount.size < classNestingLevel) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>typeParametersCount.add(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ARRAY_NEW_DATA =", "body": "<STR_LIT><EOL>"}
{"signature": "if (results.isSingleResult && results.resultingCall.status.isSuccess) {", "body": "<EOL><INDENT><INDENT><INDENT>return results.changeStatusToSuccess()<EOL><INDENT><INDENT>}"}
{"signature": "val inventNamesForLocalClassesPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "var executed =", "body": "false<EOL>"}
{"signature": "val expectation =", "body": "formatAsSteppingTestExpectation(<EOL>"}
{"signature": "fun fooArrayIn(s: @Ann Array<in @Ann<NUM_LIT> Outer.NestedStatic<@Ann<NUM_LIT> String>>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun visitTypeParameterRefsOwner(typeParameterRefsOwner: FirTypeParameterRefsOwner, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeParameterRefsOwner(typeParameterRefsOwner)<EOL><INDENT>}"}
{"signature": "val srcBlockPtr =", "body": "bitcast(pointerType(blockLiteralType), param(<NUM_LIT>))<EOL>"}
{"signature": "val catchLabels =", "body": "LinkedList<Label>()<EOL>"}
{"signature": "fun useNonDefault() {", "body": "<EOL><INDENT>f(<NUM_LIT>, <NUM_LIT>)<EOL>}"}
{"signature": "val bridgeDirections =", "body": "function.target.bridgeDirectionsTo(function)<EOL>"}
{"signature": "if (directlyExpanded != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>generate(directlyExpanded.fullyExpandedType(session))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (application.getServiceIfCreated(KotlinFakeClsStubsCache::class.java) != null) {", "body": "<INDENT><INDENT><INDENT><INDENT>// application services already registered by som other threads, tests<INDENT><INDENT><INDENT><INDENT>return<INDENT><INDENT><INDENT>}"}
{"signature": "val propListUrl =", "body": "<STR_LIT>"}
{"signature": "val meaningfulNode =", "body": "root.skipMeaninglessNodes().apply { compress() }<EOL>"}
{"signature": "var callExpression =", "body": "callInfo.translateFunctionCall()<EOL>"}
{"signature": "fun jvmFunction<NUM_LIT>(<EOL><INDENT>commonActualization: MyCommonClassWithActualization,<EOL><INDENT>intermediateActualization: IntermediateClassWithActualization,<EOL><INDENT>common: MyCommonClass,<EOL><INDENT>intermediate: MyIntermediateClass,<EOL><INDENT>jvm: MyJvmClass,<EOL>) {", "body": "<EOL><EOL>}"}
{"signature": "val loopVariableInitializer =", "body": "loopVariable.initializer ?: return<EOL>"}
{"signature": "val nativeHeap =", "body": "interopClass(InteropFqNames.nativeHeapName)<EOL>"}
{"signature": "val fakeLoop =", "body": "JsDoWhile(JsBooleanLiteral(false), x.statement)<EOL>"}
{"signature": "val kotlinBuildLogger =", "body": "KotlinBuildStatsLoggerService(KotlinBuildStatsConfiguration(project))<EOL>"}
{"signature": "val MAX_BITS_PER_COLOR =", "body": "<NUM_LIT><EOL>"}
{"signature": "var bytesInBuffer =", "body": "<NUM_LIT><EOL>"}
{"signature": "val serializerExtension =", "body": "JvmSerializerExtension(serializationBindings, context.state, context.defaultTypeMapper)<EOL>"}
{"signature": "for (x in e) {", "body": "}"}
{"signature": "val jsExportIgnoreFqName =", "body": "SerializationJsDependenciesClassIds.jsExportIgnore.asSingleFqName()<EOL>"}
{"signature": "fun private() {", "body": "snapshotAPIAndCompare(testName.methodName) }"}
{"signature": "if (JavaToKotlinClassMap.mapKotlinToJava(containingClassName) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "when (nameReference) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirErrorReferenceWithCandidate -> nameReference.diagnostic<EOL><INDENT><INDENT><INDENT>is FirResolvedErrorReference -> nameReference.diagnostic<EOL><INDENT><INDENT><INDENT>is FirErrorNamedReference -> nameReference.diagnostic<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val capturedDispatchReceiver =", "body": "lambdaContextMapping.values.findDispatchReceiver()<EOL>"}
{"signature": "if (<NUM_LIT> == j) {", "body": "}"}
{"signature": "fun varfoo(vararg t: Unit) {", "body": "<EOL>}"}
{"signature": "if (k<NUM_LIT>ModuleFile != null && k<NUM_LIT>ModuleFile != null) {", "body": "<EOL><INDENT><INDENT><INDENT>ModuleMetadataTask(configuration, k<NUM_LIT>ModuleFile.asByteArray(), k<NUM_LIT>ModuleFile.asByteArray(), moduleMetadataReport).run()<EOL><INDENT><INDENT>}"}
{"signature": "if (annotationClassId == StandardClassIds.Annotations.Target) {", "body": "<EOL><INDENT><INDENT><INDENT>K<NUM_LIT>ExpectActualCollectionArgumentsCompatibilityCheckStrategy.ExpectIsSubsetOfActual<EOL><INDENT><INDENT>}"}
{"signature": "fun visitReferenceList(list: PsiReferenceList) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkParentAndVisitChildren(list, notCheckItself = ignoreDecompiledClasses)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun doRun() {", "body": "<EOL><INDENT><INDENT><INDENT>testFunction()<EOL><INDENT><INDENT>}"}
{"signature": "val MODIFIER_KEYWORD_SET =", "body": "TokenSet.orSet(SOFT_KEYWORDS, TokenSet.create(IN_KEYWORD, FUN_KEYWORD))<EOL>"}
{"signature": "val anySymbol =", "body": "getClassOrObjectSymbolByClassId(StandardClassIds.Any) ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (argumentsAsSingleArray is JsArrayLiteral) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>JsInvocation(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JsNameRef(symbolName),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>argumentsAsSingleArray.expressions<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (receiver != null || superQualifierSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val WriteBitcodeFilePhase =", "body": "createSimpleNamedCompilerPhase<PhaseContext, WriteBitcodeFileInput>(<EOL>"}
{"signature": "val kotlinCoreEnvironment =", "body": "createKotlinCoreEnvironment(testDisposable)<EOL>"}
{"signature": "package client<EOL>.", "body": ""}
{"signature": "val inlineFunClass =", "body": "File(tmpdir.absolutePath, <STR_LIT>)<EOL>"}
{"signature": "if (trueWhenString(x) && trueWhenInt(x)) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT><INDENT>x.inc()<EOL><INDENT>}"}
{"signature": "when (infix) {", "body": "}"}
{"signature": "val parentsReceiver =", "body": "grandParent.receiverExpression<EOL>"}
{"signature": "val controlFlowGraph =", "body": "ControlFlowGraph.build(this)<EOL>"}
{"signature": "val javaFilesChanges =", "body": "javaFilesProcessor!!.process(changedFiles)<EOL>"}
{"signature": "val NOT_EXPORTED_NAMESPACE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!classId.isLocal && classId !in StandardClassIds.allBuiltinTypes) {", "body": "<EOL><INDENT><INDENT>val classFqName = classId.asSingleFqName()<EOL><INDENT><INDENT>recordLookup(classFqName.shortName().asString(), classFqName.parent().asString(), source, fileSource)<EOL><INDENT><INDENT>recordLookup(<EOL><INDENT><INDENT><INDENT>classFqName.parent().shortName().asString(),<EOL><INDENT><INDENT><INDENT>classFqName.parent().parent().asString(),<EOL><INDENT><INDENT><INDENT>source, fileSource<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun test(a: A, b: B, c: C) {", "body": "<EOL><INDENT>a.foo()<EOL><INDENT>b.foo()<EOL><INDENT>c.foo()<EOL>}"}
{"signature": "if (outputsDir.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT>outputsDir.deleteRecursively()<EOL><INDENT><INDENT>}"}
{"signature": "val deprecatedCommonCompilerInterfaceFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val closestFirFile =", "body": "context.containingFile<EOL>"}
{"signature": "package to simplify their use from JavaScript.", "body": "<EOL>"}
{"signature": "val allImpacts =", "body": "listOf(SupertypesInheritorsImpact, ConstantsInCompanionObjectsImpact)<EOL>"}
{"signature": "if (defaultKDoc != null) {", "body": "<EOL><INDENT><INDENT>appendLine(defaultKDoc)<EOL><INDENT><INDENT>appendLine()<EOL><INDENT>}"}
{"signature": "val calledSymbol =", "body": "findUnambiguousReferencedCallableId(calleeReference) ?: return<EOL>"}
{"signature": "val cl =", "body": "URLClassLoader((getMainKtsClassPath() + tmpdir).map { it.toURI().toURL() }.toTypedArray())<EOL>"}
{"signature": "val ktType =", "body": "type.fullyExpandedType<EOL>"}
{"signature": "if (rhs.isNullConst()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return irEqeqNull(lhs)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!hasExplicitElseBranch) {", "body": "<EOL><INDENT><INDENT><INDENT>addElseBranchForExhaustiveWhenIfNeeded(irWhen, expression)<EOL><INDENT><INDENT>}"}
{"signature": "var parametersCount =", "body": "function.valueParameters.size<EOL>"}
{"signature": "val serializationProvider =", "body": "session.dependencySerializationInfoProvider<EOL>"}
{"signature": "val baseSubstitutions =", "body": "mapOf<SubstitutionTag, (SubstitutionRule) -> String>(<EOL>"}
{"signature": "val funCompareTo<NUM_LIT> =", "body": "twoVal.<!EVALUATED(<STR_LIT>)!>compareTo(doubleVal)<!><EOL>"}
{"signature": "if (b != null && b) {", "body": "}"}
{"signature": "val typePatterns =", "body": "getTypePatternsForOneTypeVariable()<EOL>"}
{"signature": "if (inputFileProperty.isPresent) {", "body": "<EOL><INDENT><INDENT><INDENT>newArgs.add(inputFileProperty.asFile.get().normalize().absolutePath)<EOL><INDENT><INDENT>}"}
{"signature": "val BASE_KOTLIN_PACKAGE =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "while (x < <NUM_LIT>) {", "body": "x++ }"}
{"signature": "val platformVersion =", "body": "(kotlinCompileOptions?.jvmTarget ?: <STR_LIT>)<EOL>"}
{"signature": "if (memberDeclaration.isActual) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val foundKeys =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.propertyGetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(JsProtoBuf.propertyGetterAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val runMinifierByDefault =", "body": "JsEnvironmentConfigurationDirectives.RUN_MINIFIER_BY_DEFAULT in globalDirectives<EOL>"}
{"signature": "val executedProjectPaths =", "body": "project.getOrPutRootProjectProperty(PROPERTY_KEY_EXECUTED_PROJECT_PATHS) { mutableSetOf<String>() }<EOL>"}
{"signature": "val origFile =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "if (SerialInfo.ON_TYPE in enum.options.serialInfo) {", "body": "<EOL><INDENT><INDENT>append(indent)<EOL><INDENT><INDENT>appendLine(<STR_LIT>$classUsage\\<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun main(d : D) {", "body": "<EOL><INDENT>d.from(<STR_LIT>)<EOL><INDENT>d.from(<NUM_LIT>)<EOL>}"}
{"signature": "import light.", "body": "ann.array.AnnAuxEnum.ANN_ENUM_VAL_B;<EOL>"}
{"signature": "var isSuspendFunctionFound =", "body": "false<EOL>"}
{"signature": "val appendable =", "body": "<!NO_COMPANION_OBJECT!>Appendable<!><EOL>"}
{"signature": "val actualValueParameters =", "body": "actualDeclaration.valueParameters<EOL>"}
{"signature": "var finalOverriddenError =", "body": "false<EOL>"}
{"signature": "if (moduleInfoFiles.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addJavaBinaryRootsByJavaModules(configuration, configurationKind, moduleInfoFiles)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val referencesToSpill =", "body": "arrayListOf<ReferenceToSpill>()<EOL>"}
{"signature": "val isCrossCompiled =", "body": "rootDescriptor is KotlinIncludedModuleSourceRoot<EOL>"}
{"signature": "val nextPos =", "body": "positionFinder.findNextPosition(it)<EOL>"}
{"signature": "val initialValueVar =", "body": "generateTemporaryVariable(<EOL>"}
{"signature": "val paddingSize =", "body": "(potentiallyConflictingDependencies.size + <NUM_LIT>).toString().length<EOL>"}
{"signature": "package runtime.", "body": "basic.runtime_basic_init<EOL>"}
{"signature": "fun platformSpecificConstructor(descriptor: ConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>markInteropDeclaration(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "for (x in xs) {", "body": "}"}
{"signature": "val columnNumber =", "body": "offset - lineStartOffsets[lineNumber]<EOL>"}
{"signature": "if (sourceName == null || sourceName.isSpecial) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val count = (anonymousClassesCount[enclosingName.toUpperCaseAsciiOnly()] ?: <NUM_LIT>) + <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>anonymousClassesCount[enclosingName.toUpperCaseAsciiOnly()] = count<EOL><INDENT><INDENT><INDENT><INDENT>count.toString()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val regularDelimiter =", "body": "<STR_LIT><EOL>"}
{"signature": "val rootTasksPaths =", "body": "allTasksPaths - allDependentTasksPaths<EOL>"}
{"signature": "when (old.kind) {", "body": "<EOL><INDENT><INDENT><INDENT>ConstraintKind.EQUALITY -> true<EOL><INDENT><INDENT><INDENT>ConstraintKind.LOWER -> new.kind.isLower()<EOL><INDENT><INDENT><INDENT>ConstraintKind.UPPER -> new.kind.isUpper()<EOL><INDENT><INDENT>}"}
{"signature": "if (!importedShortNames.add(importedFqName.shortName().asString())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nativeDependencies =", "body": "target.extensions.getByType<NativeDependenciesExtension>()<EOL>"}
{"signature": "val nonFixedTypesToResultSubstitutor =", "body": "ComposedSubstitutor(substitutor, nonFixedToVariablesSubstitutor)<EOL>"}
{"signature": "val uncompressedSize =", "body": "getInt(currentOffset + <NUM_LIT>)<EOL>"}
{"signature": "if (falseWhenString(x) || b) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val irBuiltIns =", "body": "this@SymbolTableWithBuiltInsDeduplication.irBuiltIns ?: return super.referenceClass(declaration)<EOL>"}
{"signature": "if (Character.isJavaIdentifierPart(c)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.append(c)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val receiverExpressionType =", "body": "receiver.resolvedType as? ConeIntersectionType ?: return null<EOL>"}
{"signature": "val ignoredDaemonSessionFiles =", "body": "mutableSetOf<File>()<EOL>"}
{"signature": "if (isGivenKlibArtifact) {", "body": "<INDENT><INDENT><INDENT><INDENT>// Special case for the given (external) KLIB artifacts.<INDENT><INDENT><INDENT><INDENT>get<Binaries>().givenBinariesDir<INDENT><INDENT><INDENT>}"}
{"signature": "val referencedName =", "body": "referenceExpression.getReferencedName()<EOL>"}
{"signature": "val preparedResolution =", "body": "resolution<EOL>"}
{"signature": "val PROJECT_DIR_PLACEHOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this.isInit && this.parameters.isEmpty() && this.selector != <STR_LIT>) {", "body": "<INDENT><INDENT>// Create synthetic Unit parameter, just like Swift does in this case:<INDENT><INDENT>val parameterName = this.selector.removePrefix(<STR_LIT>).removePrefix(<STR_LIT>).replaceFirstChar(Char::lowercaseChar)<INDENT><INDENT>return listOf(FunctionParameterStub(parameterName, KotlinTypes.unit.toStubIrType()))<INDENT><INDENT>// Note: this parameter is explicitly handled in compiler.<INDENT>}"}
{"signature": "if (fromType.eraseToClassOrInterface.isSubclassOf(expression.type.eraseToClassOrInterface)) {", "body": "<EOL><INDENT><INDENT><INDENT>return narrowType(fromType, expression.type, expression.argument)<EOL><INDENT><INDENT>}"}
{"signature": "for (annotation in element.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotation.acceptVoid(this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lhsIsNotNullable =", "body": "!lhs.type.isNullable()<EOL>"}
{"signature": "val jsCodeExpression =", "body": "expression.arguments.firstOrNull()<EOL>"}
{"signature": "if (expression is KtDoWhileExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(pseudocode.rootPseudocode as PseudocodeImpl).containsDoWhile = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val impactedConstants =", "body": "classMembers.memberNames.intersect(constantsInCompanionObject.toSet())<EOL>"}
{"signature": "package myPack<EOL>.", "body": ""}
{"signature": "val actualParameters =", "body": "MutableList<IrValueDeclaration?>(expression.valueArgumentsCount) { null }<EOL>"}
{"signature": "for (index in this.indices.reversed()) {", "body": "<EOL><INDENT><INDENT>val element = this[index]<EOL><INDENT><INDENT>if (predicate(element)) return element<EOL><INDENT>}"}
{"signature": "val digitZero =", "body": "'<NUM_LIT>' // \\u<NUM_LIT><NUM_LIT>3<NUM_LIT>"}
{"signature": "fun visitVars(x: JsVars) {", "body": "<EOL><INDENT><INDENT>printLineNumbers(x)<EOL><INDENT><INDENT>super.visitVars(x)<EOL><INDENT>}"}
{"signature": "if (annotation.staticName == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val constructor = classDescriptor.createJavaConstructor(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>valueParameters = valueParameters,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visibility = annotation.visibility<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>partsBuilder.addConstructor(constructor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val statementFlows =", "body": "mutableListOf<PersistentFlow>()<EOL>"}
{"signature": "fun testExpr() {", "body": "<EOL>  A() += <NUM_LIT><EOL>  A() -= <NUM_LIT><EOL>  A() *= <NUM_LIT><EOL>  A() /= <NUM_LIT><EOL>  A() %= <NUM_LIT><EOL>}"}
{"signature": "if (files == null || files.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(output.trimIndent(), result)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val COROUTINES_METADATA_SPILLED_JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val memberContext =", "body": "c.copyWithNewDefaultTypeQualifiers(getDefaultAnnotations(c))<EOL>"}
{"signature": "while (y != null) {", "body": "<EOL><INDENT><INDENT>bar(y)<EOL><INDENT>}"}
{"signature": "var lib =", "body": "false<EOL>"}
{"signature": "when (typeA) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> if (typeB == <STR_LIT>) return (a as Boolean) || (b as Boolean)<EOL><INDENT><INDENT>}"}
{"signature": "val versionString =", "body": "manifestProperties.getProperty(KLIB_PROPERTY_METADATA_VERSION) ?: return null<EOL>"}
{"signature": "val irSetter =", "body": "descriptor.setter?.let(::getActualFunction)<EOL>"}
{"signature": "var collection =", "body": "sourceSets.project.objects.fileCollection() as FileCollection<EOL>"}
{"signature": "val getStaticInsn =", "body": "ifNullNext as FieldInsnNode<EOL>"}
{"signature": "val yy =", "body": "::y<EOL>"}
{"signature": "val chunkBuilder =", "body": "Chunk.newBuilder()<EOL>"}
{"signature": "when(value_<NUM_LIT>) {", "body": "<EOL><INDENT>null -> <STR_LIT><EOL>}"}
{"signature": "if (call.typeArguments.size != descriptor.typeParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT>return TypeArgumentsMapping.TypeArgumentsMappingImpl(<EOL><INDENT><INDENT><INDENT><INDENT>listOf(WrongCountOfTypeArguments(descriptor, call.typeArguments.size)), emptyMap()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (m in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>if (m == <NUM_LIT>) break@loop<EOL><INDENT><INDENT>j = m<EOL><INDENT>}"}
{"signature": "fun streamAsSequence() {", "body": "<EOL><INDENT><INDENT>val stringStream: Stream<String> = Stream.of(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val stringSequence: Sequence<String> = stringStream.asSequence()<EOL><INDENT><INDENT>assertPrints(stringSequence.joinToString(<STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun setupFileStub(fileStub: KotlinFileStubImpl, packageFqName: FqName) {", "body": "<EOL><INDENT>val packageDirectiveStub = KotlinPlaceHolderStubImpl<KtPackageDirective>(fileStub, KtStubElementTypes.PACKAGE_DIRECTIVE)<EOL><INDENT>createStubForPackageName(packageDirectiveStub, packageFqName)<EOL><INDENT>KotlinPlaceHolderStubImpl<KtImportList>(fileStub, KtStubElementTypes.IMPORT_LIST)<EOL>}"}
{"signature": "val appliedTemplatesImpl =", "body": "mutableSetOf<KotlinHierarchyTemplate>()<EOL>"}
{"signature": "val runDate =", "body": "Date()<EOL>"}
{"signature": "val returnedExpressions =", "body": "arrayListOf<KtElement>()<EOL>"}
{"signature": "if (descriptor != directReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collector.badDescription(<STR_LIT>, expression)<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jspecifyMark =", "body": "diagnosticsToJspecifyMarksForMode[diagnostic] ?: return@mapNotNull null<EOL>"}
{"signature": "if (stdLibTypes.contains(name)) {", "body": "<EOL><INDENT><INDENT><INDENT>QualifierEntity(TSLIBROOT, IdentifierEntity(name))<EOL><INDENT><INDENT>}"}
{"signature": "val fqnParts =", "body": "publicSig.nameSegments<EOL>"}
{"signature": "val referencedDependencyTargets =", "body": "targetDependencies.values.flatten().toSet()<EOL>"}
{"signature": "val test_delegatedVal =", "body": "::delegatedVal<EOL>"}
{"signature": "val serviceName =", "body": "serviceClass.name<EOL>"}
{"signature": "var symbolCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ComposableInferredTarget =", "body": "ComposeClassIds.ComposableInferredTarget.asSingleFqName()<EOL>"}
{"signature": "if (!ErrorUtils.isError(candidate)) {", "body": "<EOL><INDENT><INDENT>constraintSystem.addReceiverConstraint(substitutor, dispatchReceiver, candidate.dispatchReceiverParameter, position)<EOL><INDENT><INDENT>constraintSystem.addReceiverConstraint(substitutor, extensionReceiver, candidate.extensionReceiverParameter, position)<EOL><INDENT>}"}
{"signature": "val catchParameterDescriptor =", "body": "getOrFail(BindingContext.VALUE_PARAMETER, ktCatchParameter)<EOL>"}
{"signature": "val reportFile =", "body": "getReportFile()<EOL>"}
{"signature": "val substitutedOrNull =", "body": "substitutor.substituteOrNull(type)<EOL>"}
{"signature": "fun addToModifiedFiles(file: Path) {", "body": "<EOL><INDENT><INDENT>sourcesChanges = SourcesChanges.Known(<EOL><INDENT><INDENT><INDENT>modifiedFiles = sourcesChanges.modifiedFiles + file.toFile(),<EOL><INDENT><INDENT><INDENT>removedFiles = sourcesChanges.removedFiles,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (boundTypeArgument.variance.allowsInPosition) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>boundsForParameter.lower += boundTypeArgument.type.collectLowerBounds()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import as? FirResolvedImport)?.", "body": "resolvedParentClassId ?: ClassId.topLevel(importedFqName)<EOL>"}
{"signature": "val COMPOSER_PARAMETER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (!success) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package box functions<EOL>.", "body": ""}
{"signature": "if (property.getJsName(context.session) != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(jsNameSource, FirJsErrors.JS_NAME_ON_ACCESSOR_AND_PROPERTY, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setDestinationDirectory(kotlinTestReport: KotlinTestReport, directory: Provider<Directory>) {", "body": "<EOL><INDENT><INDENT>kotlinTestReport.destinationDir = directory.get().asFile<EOL><INDENT>}"}
{"signature": "val firQualifiedExpression =", "body": "getMatchingFirQualifiedAccessExpression(expression) ?: return emptyList()<EOL>"}
{"signature": "val diff =", "body": "code - start<EOL>"}
{"signature": "val partName =", "body": "partIndex.toString().padStart(digitCount, '<NUM_LIT>') + <STR_LIT> + fragmentShortName<EOL>"}
{"signature": "val newMembers =", "body": "members(newProto).filterNot { it.isPrivate }<EOL>"}
{"signature": "fun replaceOriginalExpression(newOriginalExpression: FirExpression) {", "body": "<EOL><INDENT><INDENT>originalExpression = newOriginalExpression<EOL><INDENT>}"}
{"signature": "fun case_<NUM_LIT>() {", "body": "<EOL><INDENT>null!!<EOL>}"}
{"signature": "val outputLibraryRuntimeDirectory =", "body": "File(outputDir, module.kotlinCompilerSettings.outputDirectoryForJsLibraryFiles).absolutePath<EOL>"}
{"signature": "val testModels =", "body": "ArrayList<TestClassModel>()<EOL>"}
{"signature": "if (processingReturnStack.lastOrNull()?.value == enclosing && enclosing is IrReturnableBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>return useReturnableExpressionAsType(enclosing.type)<EOL><INDENT><INDENT>}"}
{"signature": "fun testCircularDependenciesInternalFromAnotherModule() {", "body": "<EOL><INDENT><INDENT>initProject(JVM_MOCK_RUNTIME)<EOL><INDENT><INDENT>val result = buildAllModules()<EOL><INDENT><INDENT>result.assertFailed()<EOL><INDENT><INDENT>result.checkErrors()<EOL><INDENT>}"}
{"signature": "fun launch<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>pumpEvents()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val klibEnumEntries =", "body": "LinkedHashMap<CirEntityId, ClassEntry.EnumEntry>() // linked hash map to preserve order"}
{"signature": "for ((applicabilityType, newQualifier) in newQualifiers) {", "body": "<INDENT><INDENT><INDENT>if (newQualifier == null) continue // ignore inconsistent qualifiers<INDENT><INDENT><INDENT>defaultQualifiersByType[applicabilityType] = newQualifier<INDENT><INDENT><INDENT>wasUpdate = true<INDENT><INDENT>}"}
{"signature": "if (occurrences < quantifier.min) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val mainModuleDependency =", "body": "Dependency(MAIN_MODULE_NAME, mainModuleKlibFile)<EOL>"}
{"signature": "var hasElseBranch =", "body": "false<EOL>"}
{"signature": "fun computeNonDeclaredFunctions(result: MutableCollection<SimpleFunctionDescriptor>, name: Name) {", "body": "<EOL><INDENT>}"}
{"signature": "val resultForExpr =", "body": "tryResolveLHS(doubleColonExpression, this::shouldTryResolveLHSAsExpression, this::resolveExpressionOnLHS)<EOL>"}
{"signature": "val hasSameDispatchReceiver =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irFunction.dispatchReceiverParameter?.type?.classOrNull?.owner?.kind?.isSingleton == true ||<EOL>"}
{"signature": "for (newSource in newSources) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collectedSources.add(newSource)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newRemainingSources.add(newSource)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>knownSourcePaths.add(newSource.virtualFile.path)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mode =", "body": "MultiplatformDiagnosticRenderingMode()<EOL>"}
{"signature": "fun getType(psi: PSI): TYPE<EOL><EOL><INDENT>override val type: TYPE<EOL><INDENT><INDENT>get() {", "body": "<EOL><INDENT><INDENT><INDENT>val psi = psiPointer.element<EOL><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return getType(psi)<EOL><INDENT><INDENT>}"}
{"signature": "when (input) {", "body": "<EOL><INDENT>!is FirOutput.Full -> null<EOL><INDENT>else -> firSerializerBase(input.firResult, null)<EOL>}"}
{"signature": "val configurationTimeMetrics =", "body": "MetricContainer()<EOL>"}
{"signature": "val ANONYMOUS_FQ_NAME =", "body": "FqName.topLevel(Name.special(ANONYMOUS_STRING))<EOL>"}
{"signature": "val symbolKind =", "body": "symbolData.kind<EOL>"}
{"signature": "if (isZero()) {", "body": "<EOL><INDENT><INDENT>return ZERO<EOL><INDENT>}"}
{"signature": "val KOTLIN_TEST_ROOT_TYPE_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "val NOSOURCES_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (packageFqName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>header.packageFqName = packageFqName.asString()<EOL><INDENT><INDENT>}"}
{"signature": "for (callable in this) {", "body": "<EOL><INDENT><INDENT>if (callable is KProperty<*> && callable.name != field.name && callable.javaField == field) return callable<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(f: String.(Int) -> Unit) {", "body": "<EOL><INDENT><NUM_LIT><!FUNCTION_EXPECTED!>(f)<!>(<NUM_LIT>)<EOL><INDENT><NUM_LIT><!FUNCTION_EXPECTED!>(f)<!>()<EOL>}"}
{"signature": "val featureDependenciesTargets =", "body": "mapOf(<EOL>"}
{"signature": "if (argumentMapping.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.DEPRECATED_SINCE_KOTLIN_WITHOUT_ARGUMENTS, context)<EOL><INDENT><INDENT>}"}
{"signature": "val metadataDependenciesConfiguration =", "body": "sourceSet.internal.resolvableMetadataConfiguration<EOL>"}
{"signature": "val builtin =", "body": "getOverriddenBuiltinReflectingJvmDescriptor() ?: error(<STR_LIT>)<EOL>"}
{"signature": "val operationReceiver =", "body": "(unary?.initializer ?: statements.lastOrNull())<EOL>"}
{"signature": "val returnedExpressionType =", "body": "returnedExpression.resolvedType<EOL>"}
{"signature": "if (property.isJvmFieldPropertyInInterfaceCompanion() && versionRequirementTable != null) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(JvmProtoBuf.flags, JvmFlags.getPropertyFlags(true))<EOL><INDENT><INDENT>}"}
{"signature": "val typeFqName =", "body": "kotlinType.constructor.declarationDescriptor?.fqNameSafe?.asString() ?: return null<EOL>"}
{"signature": "val commonSourceSetsWithoutMetadataCompilation =", "body": "allSourceSets<EOL>"}
{"signature": "val withHostTests =", "body": "<STR_LIT><EOL>"}
{"signature": "val booleanArraySerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelCreateBooleanArray, symbols.parcelWriteBooleanArray)<EOL>"}
{"signature": "val extraArgumentsTail =", "body": "<EOL><INDENT><INDENT><INDENT>(if (isDefault) ((kotlinParameterTypes.sumOf(::typeSize) + Int.SIZE_BITS - <NUM_LIT>) / Int.SIZE_BITS) + <NUM_LIT> else <NUM_LIT>) +<EOL>"}
{"signature": "val baz<NUM_LIT>LambdaVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "package renaming to new one (except some cases for default package)<EOL>.", "body": ""}
{"signature": "fun writeVarInt<NUM_LIT>(v: Byte) {", "body": "<EOL><INDENT><INDENT>writeSignedLeb<NUM_LIT>(v.toLong())<EOL><INDENT>}"}
{"signature": "fun rec() {", "body": "<INDENT><INDENT><INDENT>C.rec() // resolution goes to `E.rec`. Hence the resolved symbol is considered different from `C.rec`.<INDENT><INDENT>}"}
{"signature": "import <STR_LIT>;\")<EOL>.", "body": ""}
{"signature": "val RawChunkSize =", "body": "<NUM_LIT>L shl RawChunkSizeBits<EOL>"}
{"signature": "fun test_<NUM_LIT>(map: Map<A, Int>, b: B) {", "body": "<EOL><INDENT>map.get(b)<EOL>}"}
{"signature": "fun registerAdditionalComponent(session: FirSession) {", "body": "<EOL><INDENT><INDENT>session.register(FirLazyDeclarationResolver::class, lazyResolver)<EOL><INDENT>}"}
{"signature": "fun jpsReportInternalBuilderError(context: CompileContext, error: Throwable) {", "body": "<EOL><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT>val builderError = CompilerMessage.createInternalBuilderError(<STR_LIT>, error)<EOL><INDENT>context.processMessage(builderError)<EOL>}"}
{"signature": "if (current < value.length && value[current] == ch) {", "body": "<EOL><INDENT><INDENT><INDENT>current++<EOL><INDENT><INDENT>}"}
{"signature": "if (callee?.fir?.origin == FirDeclarationOrigin.SamConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>val substitutor = (firCall as? FirQualifiedAccessExpression)<EOL><INDENT><INDENT><INDENT><INDENT>?.createConeSubstitutorFromTypeArguments(rootModuleSession, discardErrorTypes = true)<EOL><INDENT><INDENT><INDENT><INDENT>?: ConeSubstitutor.Empty<EOL><INDENT><INDENT><INDENT>return substitutor.substituteOrSelf((callee.fir as FirSimpleFunction).returnTypeRef.coneType).asKtType()<EOL><INDENT><INDENT>}"}
{"signature": "val compileTaskRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "fun appendLines(lines: Iterable<String>) {", "body": "<EOL><INDENT><INDENT>Files.write(javaPath, lines, StandardOpenOption.APPEND)<EOL><INDENT>}"}
{"signature": "val outerThisDeclarations =", "body": "ConcurrentHashMap<IrClass, IrField>()<EOL>"}
{"signature": "fun testIgnoreCase() {", "body": "<EOL><INDENT><INDENT>var regex = Regex(<STR_LIT>, RegexOption.IGNORE_CASE)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><EOL><INDENT><INDENT>regex = Regex(<STR_LIT>, RegexOption.IGNORE_CASE)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><EOL><INDENT><INDENT>regex = Regex(<STR_LIT>, RegexOption.IGNORE_CASE)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val MULTI_FILE_FACADE_KIND =", "body": "<NUM_LIT><EOL>"}
{"signature": "val LANGUAGE_VERSION_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (outputDirPath == null) {", "body": "<EOL><INDENT><INDENT><INDENT>messageCollector.report(ERROR, <STR_LIT>, null)<EOL><INDENT><INDENT><INDENT>return COMPILATION_ERROR<EOL><INDENT><INDENT>}"}
{"signature": "val suspensionPoints =", "body": "processingNode.instructions.asSequence()<EOL>"}
{"signature": "when (accessedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is FirCallableSymbol<*> -> accessedSymbol.publishedApiEffectiveVisibility ?: accessedSymbol.effectiveVisibility<EOL><INDENT><INDENT><INDENT><INDENT>is FirClassLikeSymbol<*> -> accessedSymbol.publishedApiEffectiveVisibility ?: accessedSymbol.effectiveVisibility<EOL><INDENT><INDENT><INDENT><INDENT>else -> shouldNotBeCalled()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val layoutInflater =", "body": "LayoutInflater.from(parent.context)<EOL>"}
{"signature": "fun serializeDeserializeRegex() {", "body": "<EOL><INDENT><INDENT>equivalentAfterDeserialization(Regex(<STR_LIT>))<EOL><INDENT><INDENT>equivalentAfterDeserialization(Regex(<STR_LIT>))<EOL><INDENT><INDENT>equivalentAfterDeserialization(Regex(<STR_LIT>, RegexOption.IGNORE_CASE))<EOL><INDENT><INDENT>equivalentAfterDeserialization(Regex(<STR_LIT>, setOf(RegexOption.LITERAL, RegexOption.MULTILINE)))<EOL><INDENT><INDENT>equivalentAfterDeserialization(Pattern.compile(<STR_LIT>, Pattern.UNICODE_CASE).toRegex())<EOL><INDENT>}"}
{"signature": "if (name.startsWith(allowedPackage)) {", "body": "<EOL><INDENT><INDENT><INDENT>parent.loadClass(name)<EOL><INDENT><INDENT>}"}
{"signature": "val classIdsInRoots =", "body": "ArrayList<List<ClassId>>(roots.size)<EOL>"}
{"signature": "fun resumeWith(value: Result<String>) {", "body": "<EOL><INDENT><INDENT><INDENT>result = value.getOrThrow()<EOL><INDENT><INDENT>}"}
{"signature": "fun visitGetObjectValue(expression: IrGetObjectValue) {", "body": "<EOL><INDENT><INDENT>print(expression.symbol.owner.name)<EOL><INDENT>}"}
{"signature": "for (j in (<NUM_LIT> until size)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>matrix[i][j] = (<NUM_LIT>.2<NUM_LIT>).random()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val layoutPaths =", "body": "getResPaths(path)<EOL>"}
{"signature": "val serviceInterfaceClass =", "body": "project.loadClass<Any>(serviceInterface, fakePluginDescriptor)<EOL>"}
{"signature": "if (notVisited) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>notVisited = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return value<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val failedToOpen =", "body": "unavailableRequiredPackages()<EOL>"}
{"signature": "val facadeFqName =", "body": "getPackageMemberOwnerInternalName(directMember, publicFacade)<EOL>"}
{"signature": "fun configureTest(builder: TestConfigurationBuilder) {", "body": "<EOL><INDENT><INDENT>super.configureTest(builder)<EOL><INDENT><INDENT>builder.useDirectives(Directives)<EOL><INDENT>}"}
{"signature": "val closingRegex =", "body": "<STR_LIT>\"(<!>)<STR_LIT>\".toRegex()<EOL>"}
{"signature": "val newCost =", "body": "edge.cost + oldCost<EOL>"}
{"signature": "fun testPlusAssign(doPlusAssign: (MutableMap<String, Int>) -> Unit) {", "body": "<EOL><INDENT><INDENT>val map = hashMapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>doPlusAssign(map)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map.size)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map[<STR_LIT>])<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map[<STR_LIT>])<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map[<STR_LIT>])<EOL><INDENT>}"}
{"signature": "if (lastPackagePartIndexExclusive <= parts.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>yield(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FqNameInterpretation.create(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>packageParts = parts.subList(<NUM_LIT>, lastPackagePartIndexExclusive),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classParts = parts.subList(lastPackagePartIndexExclusive, parts.size - <NUM_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>callable = parts.last(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isJava<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>f()<EOL><INDENT>}"}
{"signature": "if (parent is IrClass && parent.isFileClass) {", "body": "<INDENT><INDENT>// JVM IR adds facade classes for IR of functions/properties loaded both from sources and dependencies. However, these shouldn't<INDENT><INDENT>// exist in the descriptor hierarchy, since this is what the old backend (dealing with descriptors) expects.<INDENT><INDENT>parentDescriptor.containingDeclaration!!<INDENT>}"}
{"signature": "while (handlerFirstInsn != null && !handlerFirstInsn.isMeaningful) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>handlerFirstInsn = handlerFirstInsn.next<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun finishSuccessfully() {", "body": "<EOL><INDENT><INDENT>assert(isStartedImpl.get())<EOL><INDENT><INDENT>assert(!isFinishedSuccessfully.getAndSet(true))<EOL><INDENT><INDENT>configurationResult.complete(ProjectConfigurationResult.Success)<EOL><INDENT>}"}
{"signature": "val dynamicCacheInstallName =", "body": "File(outputName).cacheBinaryPart().child(cacheFileName).absolutePath<EOL>"}
{"signature": "if (a is Out<*>) {", "body": "<EOL><INDENT><INDENT>a.copy(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (element is FirSmartCastExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>element.originalExpression.acceptChildren(this)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val PROJECT_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "for ((a, b: Int) in b) {", "body": "}"}
{"signature": "when (originalTypeArgument.kind) {", "body": "<INDENT><INDENT>// Out<out T> is the same as Out<T><INDENT><INDENT>ProjectionKind.OUT -> originalTypeArgument.type!!<INDENT><INDENT>// Out<*> is the same as Out<SubstitutedUpperBounds> (i.e. Out<Supertype(CapturedType(*))>)<INDENT><INDENT>ProjectionKind.STAR -> session.typeApproximator.approximateToSuperType(<INDENT><INDENT><INDENT>capturedTypeArgument, TypeApproximatorConfiguration.FinalApproximationAfterResolutionAndInference<INDENT><INDENT>)<INDENT><INDENT>else -> null<INDENT>}"}
{"signature": "fun insertAtInternal(i: Int, n: Int) {", "body": "<EOL><INDENT><INDENT>ensureExtraCapacity(n)<EOL><INDENT><INDENT>backing.copyInto(backing, startIndex = i, endIndex = length, destinationOffset = i + n)<EOL><INDENT><INDENT>length += n<EOL><INDENT>}"}
{"signature": "if (buildScriptText.matches(<STR_LIT>.toRegex())) {", "body": "<EOL><INDENT><INDENT>assertTasksExecuted(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val jl =", "body": "J<Long>(Long::class)<EOL>"}
{"signature": "if (field.isObjectInstanceField()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>field.type.classOrFail.owner.primaryConstructor?.enqueue(field, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (added && size > limit) {", "body": "<EOL><INDENT><INDENT><INDENT>super.remove()<EOL><INDENT><INDENT>}"}
{"signature": "val dist =", "body": "project.file(project.findProperty(<STR_LIT>) ?: <STR_LIT>)<EOL>"}
{"signature": "val module =", "body": "it.module!!<EOL>"}
{"signature": "if (!hasBackingField && isMarkedTransient) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val transientPsi =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(descriptor.annotations.findAnnotation(SerializationAnnotations.serialTransientFqName) as? LazyAnnotationDescriptor)?.annotationEntry<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(SerializationErrors.TRANSIENT_IS_REDUNDANT.on(transientPsi ?: declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isConstructorRequiringAccessor(implFun)) {", "body": "<INDENT><INDENT><INDENT>// Kotlin generates constructor accessors differently from Java.<INDENT><INDENT><INDENT>functionHazard = true<INDENT><INDENT>}"}
{"signature": "val annotationResolver =", "body": "this@LocalClassDescriptorHolder.annotationResolver<EOL>"}
{"signature": "while (<NUM_LIT> < <NUM_LIT>) {", "body": "}"}
{"signature": "val expectedSingleChunk =", "body": "data.toList()<EOL>"}
{"signature": "if (range<NUM_LIT> != range<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DiagnosticUtils.TEXT_RANGE_COMPARATOR.compare(range<NUM_LIT>, range<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stringPlaceholderRanges =", "body": "allPlaceholders.asSequence()<EOL>"}
{"signature": "val COROUTINE_SUSPEND_OR_RETURN_JS_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val IMPLICIT_RECEIVER_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val FRC_POWERS =", "body": "longArrayOf(<EOL>"}
{"signature": "val bodyStartLV =", "body": "BitSet()<EOL>"}
{"signature": "fun visitErrorResolvedQualifier(errorResolvedQualifier: FirErrorResolvedQualifier, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitErrorResolvedQualifier(errorResolvedQualifier)<EOL><INDENT>}"}
{"signature": "if (state != State.DONE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>state = State.DONE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((a, b) in C(<NUM_LIT>)..C(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>i = a;<EOL><INDENT><INDENT>s = b;<EOL><INDENT>}"}
{"signature": "fun preProcess(node: JsNode) {", "body": "<EOL><INDENT><INDENT>breakContinueTargetStatements += node.collectBreakContinueTargets()<EOL><INDENT><INDENT>nodesToSplit = node.collectNodesToSplit(breakContinueTargetStatements)<EOL><INDENT>}"}
{"signature": "if (parameterTypes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!variadic) append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val toNotNullable =", "body": "toType.makeNotNull()<EOL>"}
{"signature": "val dirAccessible =", "body": "builtProductsDirAccessibility()<EOL>"}
{"signature": "var foobaz =", "body": "<STR_LIT><EOL>"}
{"signature": "val valueParameterDeclaration =", "body": "DescriptorToSourceUtils.descriptorToDeclaration(descriptor)!!<EOL>"}
{"signature": "val otherSymbols =", "body": "ArrayList<T>()<EOL>"}
{"signature": "val labelIteratorLoop =", "body": "Label()<EOL>"}
{"signature": "val savedStackDescriptor =", "body": "SavedStackDescriptor(savedStackValues, firstUnusedLocalVarIndex)<EOL>"}
{"signature": "val kotlinUByteToJsNumber =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val fqNameToAffectedFiles =", "body": "HashMap<FqName, MutableSet<File>>()<EOL>"}
{"signature": "val beginIndex =", "body": "instructions.indexOf(suspensionPoint.suspensionCallBegin)<EOL>"}
{"signature": "fun copyWasmArray(source: WasmLongArray, destination: WasmLongArray, sourceIndex: Int, destinationIndex: Int, length: Int) {", "body": "<EOL><INDENT>wasm_array_copy<WasmLongArray>(destination, destinationIndex, source, sourceIndex, length)<EOL>}"}
{"signature": "if (!isTypeSupportedInJsInterop(this, isInFunctionReturnPosition)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsWasm.WRONG_JS_INTEROP_TYPE.on(reportOn, typePositionDescription, this))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import kt<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "val STUB_TO_STRING_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "when (data.name) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT>else -> throw AssertionError()<EOL><INDENT>}"}
{"signature": "for (string in strings) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val newLineIdx = string.indexOf(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>if (newLineIdx < <NUM_LIT>) return emptyList()<EOL><INDENT><INDENT><INDENT><INDENT>result.add(Pair(string.substring(<NUM_LIT>, newLineIdx).trim(), string.substring(newLineIdx)))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((argument, convertedConstant) in resolvedCallAtom.argumentsWithConstantConversion) {", "body": "<EOL><INDENT><INDENT><INDENT>val expression = argument.psiExpression ?: continue<EOL><INDENT><INDENT><INDENT>expectedTypeForConvertedArguments[expression] = convertedConstant<EOL><INDENT><INDENT>}"}
{"signature": "if (ix < <NUM_LIT>x<NUM_LIT><NUM_LIT>1<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>ax *= two<NUM_LIT>; n -= <NUM_LIT>; ix = __HI(ax); }"}
{"signature": "package demo_range<EOL>.", "body": ""}
{"signature": "val signatureType =", "body": "signatureTypes[index]<EOL>"}
{"signature": "val jsExceptionReveal =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "val invocationBuilder =", "body": "JsAstProtoBuf.Invocation.newBuilder()<EOL>"}
{"signature": "val scriptCompiler =", "body": "ScriptJvmCompilerFromEnvironment(environment)<EOL>"}
{"signature": "if (parameters.isNotEmpty()) {", "body": "<INDENT><INDENT><INDENT><INDENT>// <STR_LIT> -> <STR_LIT><INDENT><INDENT><INDENT><INDENT>insert(lastIndex, '_')<INDENT><INDENT><INDENT>}"}
{"signature": "val valueTypeClassifier =", "body": "typeMirror.valueType.classifier<EOL>"}
{"signature": "val enumRegistry =", "body": "LocatableDeclarationRegistry<EnumDefImpl>()<EOL>"}
{"signature": "val psiClass =", "body": "resultingDescriptor.constructedClass.source.getPsi() as? PsiClass<EOL>"}
{"signature": "fun enableKgpBasedDependencyResolution(enable: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>project.extraProperties.set(KOTLIN_MPP_IMPORT_ENABLE_KGP_DEPENDENCY_RESOLUTION, enable.toString())<EOL><INDENT><INDENT>}"}
{"signature": "var implementConfigurationIsUsed =", "body": "false<EOL>"}
{"signature": "fun foo(x: (A) -> Int) {", "body": "}<EOL><EOL>fun main() {<EOL><INDENT>foo(A::prop)<EOL><INDENT>foo(A::baz)<EOL>}"}
{"signature": "fun functionB() {", "body": "<EOL><INDENT>functionA()<EOL>}"}
{"signature": "for (symbol in provider.getTopLevelFunctionSymbols(import.packageFqName, name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processor(symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is KtProperty || declaration is KtAnonymousInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>generateInstructions(declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (firSymbol.isGetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtFirPropertyGetterSymbol(firSymbol, analysisSession)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun registerIgnore(suite: TestSuite) {", "body": "<EOL><INDENT><INDENT>registerIgnore(suite.testCases.values)<EOL><INDENT>}"}
{"signature": "val fileTextWithoutSymbolsData =", "body": "testFileText.substringBeforeLast(SYMBOLS_TAG).trimEnd()<EOL>"}
{"signature": "val newJsArray =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "var bufPos =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun f<NUM_LIT>(x: String) {", "body": "}<EOL>fun f<NUM_LIT>(f: () -> Unit) {}"}
{"signature": "val VERSION =", "body": "<NUM_LIT>u<EOL>"}
{"signature": "val unsubstitutedReturnType =", "body": "resultingDescriptor.original.returnType ?: return false<EOL>"}
{"signature": "if (bound.isExtensionFunctionType(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(bound.source, FirErrors.UPPER_BOUND_IS_EXTENSION_FUNCTION_TYPE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(z: Boolean, c: C, b: B, s: String, d: D) {", "body": "<EOL><INDENT>val v = if(z) c.g else b.f<EOL><INDENT>v.h = s<EOL><INDENT>d.o = v<EOL><INDENT>val u = v<EOL><INDENT>u.p = c<EOL>}"}
{"signature": "fun TestMultipleDifferentlyNamedValueParametersBReverse(arg<NUM_LIT>B: UserKlassA, arg<NUM_LIT>B: UserKlassB) {", "body": "}<EOL><EOL>class TestMultipleTypeAliasedValueParameterTypesA {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) constructor(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: SameUserKlassB)<EOL>}"}
{"signature": "package exp<EOL>.", "body": ""}
{"signature": "val typeParameterNameToId =", "body": "mutableMapOf<Int, Int>()<EOL>"}
{"signature": "val localVarB =", "body": "<NUM_LIT><EOL>"}
{"signature": "package flow<EOL>.", "body": ""}
{"signature": "val invalidConstructorDelegation =", "body": "declaration.checkConstructorDelegation()<EOL>"}
{"signature": "val contentFile =", "body": "sourceRoots<EOL>"}
{"signature": "val substitutedOverrideSignature =", "body": "computeJvmMethod(substitutedOverride)<EOL>"}
{"signature": "val intArrayOfFunctionSymbol =", "body": "<EOL><INDENT><INDENT>referenceFunctions(CallableId(StandardNames.BUILT_INS_PACKAGE_FQ_NAME, Name.identifier(<STR_LIT>))).first()<EOL>"}
{"signature": "val reversedFilesOrderRoot =", "body": "workingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun addRoot(moduleName: String, libraryName: String, getLibrary: (PathProvider) -> File, noLibraryArgument: String) {", "body": "<EOL><INDENT><INDENT>addModularRootIfNotNull(<EOL><INDENT><INDENT><INDENT>isModularJava, moduleName,<EOL><INDENT><INDENT><INDENT>getLibraryFromHome(paths, getLibrary, libraryName, messageCollector, noLibraryArgument)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val moduleDescription =", "body": "JsModuleDescriptor(<EOL>"}
{"signature": "val descriptorByIdSignatureFinder =", "body": "DescriptorByIdSignatureFinderImpl(<EOL>"}
{"signature": "val unixLikeCommonizerTarget =", "body": "SharedCommonizerTarget(unixLikeTargets.map { it.konanTarget })<EOL>"}
{"signature": "if (!canHaveSpecialBridge(function)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val packageProto =", "body": "fragment.`package`<EOL>"}
{"signature": "if (nestedClassNamedContainer != null) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>ErrorsJvm.REPEATABLE_ANNOTATION_HAS_NESTED_CLASS_NAMED_CONTAINER.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>languageVersionSettings,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinRepeatable.entry<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val forwardDeclaration =", "body": "ObjCClassForwardDeclaration(className.objCName, generics)<EOL>"}
{"signature": "else if (falseCondition) {", "body": "<EOL><INDENT><INDENT><INDENT>if (complexCondition) ConditionValue.COMPLEX_FALSE else ConditionValue.CONST_FALSE<EOL><INDENT><INDENT>}"}
{"signature": "fun testUnbound() {", "body": "<EOL><INDENT>use<NUM_LIT>(A::foo)<EOL>}"}
{"signature": "if (it is FirRegularClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processClassAndNestedClassHeaders(it)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (stringLength == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return dstArray.createString()<EOL><INDENT>}"}
{"signature": "for (char in this) {", "body": "<EOL><INDENT><INDENT>result += char<EOL><INDENT>}"}
{"signature": "val annotationToAdd =", "body": "ClassId.fromString(<STR_LIT>)<EOL>"}
{"signature": "fun visitRawFunctionReference(expression: IrRawFunctionReference, data: IrDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitRawFunctionReference(expression, data)<EOL><INDENT><INDENT><INDENT>expression.symbol.owner.enqueue(data, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!parentFile.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parentFile.mkdirs()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun buildEnd() {", "body": "<EOL><INDENT><INDENT>numberOfNestedBlocks--<EOL><INDENT><INDENT>buildInstrWithNoLocation(WasmOp.END)<EOL><INDENT>}"}
{"signature": "when (classifierDeclaration.isInner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>true -> constructorFilter.acceptInner<EOL><INDENT><INDENT><INDENT><INDENT>false -> constructorFilter.acceptNested<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(z: Z) {", "body": "<EOL><INDENT>z.x = <NUM_LIT> to <NUM_LIT><EOL>}"}
{"signature": "if (fn is IrSimpleFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>return fn.sourceKey()<EOL><INDENT><INDENT>}"}
{"signature": "val count =", "body": "b.readVarUInt<NUM_LIT>AsInt()<EOL>"}
{"signature": "val targetPosition =", "body": "currentPosition + <NUM_LIT><EOL>"}
{"signature": "val coroutineHelpersPath =", "body": "<STR_LIT><EOL>"}
{"signature": "val staticFakeOverrideKey =", "body": "getFieldStaticFakeOverrideKey(field, containingClassLookupTag)<EOL>"}
{"signature": "if (hasExtension(JvmProtoBuf.lambdaClassOriginName)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(getExtension(JvmProtoBuf.lambdaClassOriginName))<EOL><INDENT>}"}
{"signature": "val originalTypeToUse =", "body": "<EOL><INDENT><INDENT><INDENT>if (KotlinBuiltIns.isNothing(singleArgumentType))<EOL>"}
{"signature": "var isFirstMatch =", "body": "true<EOL>"}
{"signature": "var totalLines =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (cs != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(cs)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>buffer = <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compilerXmlOutput =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "val reflective =", "body": "if (cond()) iae else cnfe<EOL>"}
{"signature": "var noCheckActual =", "body": "false<EOL>"}
{"signature": "fun visitContinueExpression(continueExpression: FirContinueExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitContinueExpression(continueExpression)<EOL><INDENT>}"}
{"signature": "val firConstructor =", "body": "originalDeclaration as FirConstructor<EOL>"}
{"signature": "val callToNonModule =", "body": "AnnotationsUtils.isNonModule(calleeRootContainer) ||<EOL>"}
{"signature": "if (!arguments.devMode) {", "body": "<EOL><INDENT><INDENT><INDENT>performDce(files, arguments, messageCollector)<EOL><INDENT><INDENT>}"}
{"signature": "if (x is C<NUM_LIT> || x is B<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>var k: B<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: A<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: C<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: Any = x<EOL><INDENT>}"}
{"signature": "val newBinaryAsts =", "body": "incrementalArtifact.icCache!!<EOL>"}
{"signature": "val dateRange =", "body": "dailyTimes.asSequence().map { it.date }.range() ?: return emptyList()<EOL>"}
{"signature": "fun foo(arr: IntArray) {", "body": "<EOL><INDENT>val x = arr[<NUM_LIT>]<EOL><INDENT>arr[<NUM_LIT>] = x<EOL>}"}
{"signature": "fun testFailure(failure: Failure?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ok = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>System.out.flush()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>failure?.exception?.printStackTrace()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>System.err.flush()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val zs =", "body": "ZArray(IntArray(<NUM_LIT>))<EOL>"}
{"signature": "if (descriptor.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportWrongExternalDeclaration(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var anyFound =", "body": "false<EOL>"}
{"signature": "when (foo bar(<NUM_LIT>) buzz<T>(<NUM_LIT>) zoo val a = <NUM_LIT>) {", "body": "<EOL><INDENT><NUM_LIT> -> <NUM_LIT><EOL>  }"}
{"signature": "if (originalFun !is IrFunction || defaultFunStub !is IrFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOf(originalFun, defaultFunStub)<EOL><INDENT><INDENT>}"}
{"signature": "if (lambda != null) {", "body": "<EOL><INDENT><INDENT>lambda.invoke()<EOL><INDENT><INDENT>lambda()<EOL><INDENT>}"}
{"signature": "val portExtractor =", "body": "makePortFromRunFilenameExtractor(classPathDigest)<EOL>"}
{"signature": "fun endVisit(x: JsContinue, ctx: JsContext<JsNode>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (x.label == null)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ctx.replaceMe(JsContinue(label))<EOL><INDENT><INDENT><INDENT><INDENT>super.endVisit(x, ctx)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (minCapacity > this.capacity) {", "body": "<EOL><INDENT><INDENT><INDENT>val newSize = AbstractList.newCapacity(this.capacity, minCapacity)<EOL><INDENT><INDENT><INDENT>keysArray = keysArray.copyOfUninitializedElements(newSize)<EOL><INDENT><INDENT><INDENT>valuesArray = valuesArray?.copyOfUninitializedElements(newSize)<EOL><INDENT><INDENT><INDENT>presenceArray = presenceArray.copyOf(newSize)<EOL><INDENT><INDENT><INDENT>val newHashSize = computeHashSize(newSize)<EOL><INDENT><INDENT><INDENT>if (newHashSize > hashSize) rehash(newHashSize)<EOL><INDENT><INDENT>}"}
{"signature": "if (mixin) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOf()<EOL><INDENT><INDENT>}"}
{"signature": "val resultingClauses =", "body": "mutableListOf<ESEffect>()<EOL>"}
{"signature": "val testCaseGroupProvider =", "body": "createTestCaseGroupProvider(getOrCreateTestClassSettings().get())<EOL>"}
{"signature": "val intArrStatic =", "body": "IntArray(<NUM_LIT>) { i: Int -> i * <NUM_LIT> }<EOL>"}
{"signature": "val kapt<NUM_LIT>Extension =", "body": "testServices.kapt<NUM_LIT>ExtensionProvider.createExtension(<EOL>"}
{"signature": "val getPermittedSubclasses =", "body": "cache.getPermittedSubclasses ?: return null<EOL>"}
{"signature": "val upperBoundClassDescriptor =", "body": "upperBoundType.constructor.declarationDescriptor as? ClassDescriptor ?: return false<EOL>"}
{"signature": "val extensionReceiverResolvedCall =", "body": "getResolvedCall(bindingContext)<EOL>"}
{"signature": "fun computeNonDeclaredFunctions(name: Name, functions: MutableList<SimpleFunctionDescriptor>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun printWarning(message: String) {", "body": "<EOL><INDENT>println(<STR_LIT>)<EOL>}"}
{"signature": "val functionTypeId =", "body": "ClassId(kind.packageFqName, kind.numberedClassName(receiverAndParameterTypes.size - <NUM_LIT>))<EOL>"}
{"signature": "fun renderTo(appendable: Appendable, importCollector: ImportCollecting) {", "body": "<EOL><INDENT><INDENT>appendable.append(name)<EOL><INDENT><INDENT>renderNullabilityTo(appendable)<EOL><INDENT>}"}
{"signature": "val byteSeparator =", "body": "bytesFormat.byteSeparator<EOL>"}
{"signature": "val dispatchReceiverValueOwnerLookupTag =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiver.resolvedType.findClassRepresentation(<EOL>"}
{"signature": "fun render(getClassCall: FirGetClassCall) {", "body": "<EOL><INDENT><INDENT>getClassCall.argument.accept(components.visitor)<EOL><INDENT><INDENT>components.printer.print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val constable =", "body": "if (cond()) mh else mt<EOL>"}
{"signature": "val typeParameterBounds =", "body": "containerApplicabilityType == AnnotationQualifierApplicabilityType.TYPE_PARAMETER_BOUNDS<EOL>"}
{"signature": "val atomicRef<NUM_LIT> =", "body": "AtomicReference<Any?>(Any())<EOL>"}
{"signature": "val liveness =", "body": "InstructionLivenessAnalyzer(methodNode).analyze()<EOL>"}
{"signature": "if (isNoTargetsInitialized) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.report(project, KotlinToolingDiagnostics.NoKotlinTargetsDeclared(project.name, project.path))<EOL><INDENT><INDENT>}"}
{"signature": "val orderedDeclarations =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (sortDeclarations) declarationsInsideClass.sortedBy { it.text } else declarationsInsideClass<EOL>"}
{"signature": "if (!javaMethod.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiverType = dispatchReceiver<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (workDirectory != null) {", "body": "<EOL><INDENT><INDENT><INDENT>processBuilder.directory(workDirectory)<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedDependencyResult =", "body": "lazyConfiguration.allDependencies.first()<EOL>"}
{"signature": "val duplicateAnnotation =", "body": "useSiteTarget in existingTargetsForAnnotation<EOL>"}
{"signature": "val objCExportMetaAnnotations =", "body": "annotationClass.annotations.findMetaAnnotations(session)<EOL>"}
{"signature": "val jsClassUsageInReflectionPhase =", "body": "makeIrModulePhase(<EOL>"}
{"signature": "if (options.mode == APT_ONLY) {", "body": "<EOL><INDENT><INDENT><INDENT>return AnalysisResult.EMPTY<EOL><INDENT><INDENT>}"}
{"signature": "package initializerAssertionsEnabled<EOL>.", "body": ""}
{"signature": "var strictImplicitExportType =", "body": "false<EOL>"}
{"signature": "val kotlinTextCanonicalFile =", "body": "newFile(<STR_LIT>)<EOL>"}
{"signature": "val restrictingVisibility =", "body": "restrictingDescriptor.effectiveVisibility()<EOL>"}
{"signature": "val JsName =", "body": "<STR_LIT>.jsId()<EOL>"}
{"signature": "package declaration is exactly {@code fqName}.", "body": "For example, if a file declares<EOL>"}
{"signature": "val qNameLowerCase =", "body": "qName.lowercase()<EOL>"}
{"signature": "if (member !in usefulDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>emptyList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (transitiveDepends.add(inlineFunction)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>newDependsStack += inlineFunction<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>transitiveHash += inlineFunction.inlineFunctionFlatHash<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val irArgumentExpression =", "body": "<EOL><INDENT><INDENT><INDENT>generateArgumentExpression(ktArgumentExpression)<EOL>"}
{"signature": "val mutableListFun =", "body": "fun (l: MutableList<Double>): MutableList<Int> = null!!<EOL>"}
{"signature": "if (declaration.isReanalyzableContainer() || declaration.accessors.any(KtPropertyAccessor::isReanalyzableContainer)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.hasFirBody = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import<EOL><INDENT>val where<EOL>.", "body": ""}
{"signature": "val variableDeclarationPerStatement =", "body": "variableFirstUsage.entries<EOL>"}
{"signature": "val TEST_FIXTURES_SOURCE_SET_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (level + <NUM_LIT> < segments.size) {", "body": "<EOL><INDENT><INDENT><INDENT>recCreateStubForType(userTypeStub, level + <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration.isContextualDeclaration()) {", "body": "<EOL><INDENT><INDENT><INDENT>val contextReceiverList = declaration.findDescendantOfType<KtContextReceiverList>() ?: return<EOL><INDENT><INDENT><INDENT>checkContextReceiversAreEnabled(context.trace, context.languageVersionSettings, contextReceiverList)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (cn.toFloat() != <NUM_LIT>.toFloat()) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "else if (erasedUpperBound.constructor.parameters.isNotEmpty()) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT>// T : Enum<E> -> out Enum<*><INDENT><INDENT><INDENT><INDENT><INDENT>TypeProjectionImpl(Variance.OUT_VARIANCE, erasedUpperBound)<INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import cstdlib.", "body": "*<EOL>"}
{"signature": "val calledPtrLlvmFunPtr =", "body": "getMethodImpl.buildCall(builder, listOf(classPtr, LLVMGetArgOperand(call, <NUM_LIT>)!!))<EOL>"}
{"signature": "if (bridge.useUnitCompletion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (superImplementation != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return superImplementation.getConcreteDeclarationForInline()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package anotherPackage<EOL>.", "body": ""}
{"signature": "fun processModule(module: TestModule, info: BinaryArtifacts.KLib) {", "body": "<EOL><INDENT><INDENT>reportKtDiagnostics(module, info.reporter)<EOL><INDENT>}"}
{"signature": "if (useOldGetter) {", "body": "<EOL><INDENT><INDENT>unboxMethod = oldGetter!!<EOL><INDENT><INDENT>unboxFunctionImplementation = defaultMethodsImplementationSourceNode ?: CustomUnboxFunctionImplementation(unboxMethod, rootNode)<EOL><INDENT>}"}
{"signature": "val simpleScriptExpectedOutput =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "val apiSysroot =", "body": "<STR_LIT><EOL>"}
{"signature": "if (super.getStackSize() < maxStackSize) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.push(value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val wholeQualifier =", "body": "TypeQualifier.createFor(resolvedQualifier) ?: return<EOL>"}
{"signature": "val previousSerializer =", "body": "classSerializer<EOL>"}
{"signature": "val isSubtypingCurrentlyInvolved =", "body": "!isTypeAlias<EOL>"}
{"signature": "val lastDot =", "body": "className.lastIndexOf('.')<EOL>"}
{"signature": "for () {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val invalidJars =", "body": "compilerPluginJars.filterNot { it.isDirectory || (it.isFile && it.extension == <STR_LIT>) }<EOL>"}
{"signature": "val childPackage =", "body": "if (currentPackage.isEmpty()) child.name else currentPackage + <STR_LIT> + child.name<EOL>"}
{"signature": "fun changeFile(<EOL><INDENT><INDENT>fileName: String,<EOL><INDENT><INDENT>transform: (String) -> String,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>val file = module.sourcesDirectory.resolve(fileName)<EOL><INDENT><INDENT>writeFile(fileName, transform(file.readText()))<EOL><INDENT>}"}
{"signature": "if (hiddenSince != null && !isReportDeprecatedSinceKotlinWithUnorderedVersions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isReportDeprecatedSinceKotlinWithUnorderedVersions = warningSince > hiddenSince<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rttiGenerator =", "body": "RTTIGenerator(generationState, referencedFunctions = null)<EOL>"}
{"signature": "val newInitializer =", "body": "revive<FirAnonymousInitializer>(designation)<EOL>"}
{"signature": "val testMethod =", "body": "instanceClass.getMethod(<EOL>"}
{"signature": "var backing =", "body": "arrayOfUninitializedElements<E>(initialCapacity)<EOL>"}
{"signature": "var uint<NUM_LIT> =", "body": "<NUM_LIT>u<EOL>"}
{"signature": "val extractionTimeout =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val jvmAssertArgsRegex =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "fun generateArrayAccessWithoutCall(arrayAccessExpression: KtArrayAccessExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>createNonSyntheticValue(arrayAccessExpression, generateArrayAccessArguments(arrayAccessExpression), MagicKind.UNRESOLVED_CALL)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedArrayType =", "body": "data?.getExpectedType(arrayLiteral)<EOL>"}
{"signature": "var RUN_SLOW_ASSERTIONS =", "body": "false<EOL>"}
{"signature": "fun interceptTestTemplateMethod(<EOL><INDENT><INDENT>invocation: InvocationInterceptor.Invocation<Void>,<EOL><INDENT><INDENT>invocationContext: ReflectiveInvocationContext<Method>,<EOL><INDENT><INDENT>extensionContext: ExtensionContext<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>interceptWithMuteInDatabase(invocation, extensionContext)<EOL><INDENT>}"}
{"signature": "val overriddenWithDefaults =", "body": "overridden.getSingleMatchedExpectForActualOrNull() as? FirNamedFunctionSymbol ?: overridden<EOL>"}
{"signature": "fun add(line: String) {", "body": "<EOL><INDENT><INDENT>lastPrintedLines.add(line)<EOL><INDENT><INDENT>totalCount++<EOL><INDENT>}"}
{"signature": "for (s in enumerator) {", "body": "<EOL><INDENT><INDENT>o += s;<EOL><INDENT>}"}
{"signature": "val CHAR_DOLLAR<INDENT><INDENT><INDENT>   =", "body": "<NUM_LIT>xe<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>.toInt() or '$'.toInt()<EOL>"}
{"signature": "fun additionalFunInIosActual() {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (item in elements) {", "body": "<EOL><INDENT><INDENT>if (add(item)) result = true<EOL><INDENT>}"}
{"signature": "val dummyInstrumentSrcRelativePath =", "body": "dummyInstrumentSrcDir.relativeTo(task.project.projectDir).path.replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val co =", "body": "'O'<EOL>"}
{"signature": "fun testSuspendWithArgs() {", "body": "useSuspendInt(::fooInt) }"}
{"signature": "val pathHash =", "body": "file.absolutePath.cityHash<NUM_LIT>String()<EOL>"}
{"signature": "when (accessTarget) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is AccessTarget.Call -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(accessTarget.resolvedCall.resultingDescriptor as? VariableDescriptor)?.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is AccessTarget.Declaration -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>accessTarget.descriptor.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val languageVersionCheckHint =", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL>"}
{"signature": "val factoryFunctionCall =", "body": "JsIrBuilder.buildCall(<EOL>"}
{"signature": "if (destinationOffset <= sourceOffset) {", "body": "<EOL><INDENT><INDENT>srcIndex = sourceOffset<EOL><INDENT><INDENT>dstIndex = destinationOffset<EOL><INDENT><INDENT>increment = <NUM_LIT><EOL><INDENT>}"}
{"signature": "for (i in rgbas.array.indices) {", "body": "<EOL><INDENT><INDENT>if (rgbas.array[i] != <NUM_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "fun call() {", "body": "<EOL><INDENT>val x = <NUM_LIT>foo()<EOL><INDENT><expr>x(<NUM_LIT>)</expr><EOL>}"}
{"signature": "val compilerEnvironment =", "body": "ModuleCompilerEnvironment(projectEnvironment, diagnosticsReporter)<EOL>"}
{"signature": "if (directive in module.directives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>configuration.put(ScriptingConfigurationKeys.LEGACY_SCRIPT_RESOLVER_ENVIRONMENT_OPTION, envName, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val receiverExpression = (expression as? KtQualifiedExpression)?.receiverExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtSimpleNameExpression -> receiverExpression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtQualifiedExpression -> receiverExpression.selectorExpression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val deserializedSymbolProviderFactory =", "body": "LLFirLibrarySymbolProviderFactory.getService(project)<EOL>"}
{"signature": "val arrA<NUM_LIT> =", "body": "arrayOf(a<NUM_LIT>)<EOL>"}
{"signature": "val cirExpandedType =", "body": "computeExpandedType(underlyingType)<EOL>"}
{"signature": "val isKlibTarget =", "body": "!pluginContext.platform.isJvm()<EOL>"}
{"signature": "if (call is InlineFunctionSource && callTarget is CallableDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportInlineCallCycle(call, callTarget)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val stateSnapshot =", "body": "resolveState<EOL>"}
{"signature": "val fetched =", "body": "fetched<EOL>"}
{"signature": "fun toStringIdentity() {", "body": "<EOL><INDENT><INDENT>val a = ArrayList(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>).toString(), a.toString())<EOL><INDENT>}"}
{"signature": "if (restParameters.size > maskValues.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val lastParameter = restParameters.last()<EOL><INDENT><INDENT><INDENT><INDENT>put(lastParameter, IrConstImpl.constNull(startOffset, endOffset, lastParameter.type))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (clang_getCursorAvailability(cursor)) {", "body": "<EOL><INDENT><INDENT>CXAvailabilityKind.CXAvailability_Available,<EOL><INDENT><INDENT>CXAvailabilityKind.CXAvailability_Deprecated -> true<EOL><EOL><INDENT><INDENT>CXAvailabilityKind.CXAvailability_NotAvailable,<EOL><INDENT><INDENT>CXAvailabilityKind.CXAvailability_NotAccessible -> false<EOL><INDENT>}"}
{"signature": "val localDelegatedProperties =", "body": "ConcurrentHashMap<IrAttributeContainer, List<IrLocalDelegatedPropertySymbol>>()<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.propertyDelegatedFieldAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = 3<NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.propertyDelegatedFieldAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val privateSpecGitUri =", "body": "privateSpecGit.toUri().toString()<EOL>"}
{"signature": "fun A(a: Int, b: Int, c: Int) {", "body": "}"}
{"signature": "fun setBoundedTypeVariable(value: BTV) {", "body": "storage = value }"}
{"signature": "var keepClassAsIs =", "body": "false<EOL>"}
{"signature": "val closed<NUM_LIT> =", "body": "bindings.closed(<STR_LIT>)<EOL>"}
{"signature": "val generateTestRunner =", "body": "configuration.getNotNull(KonanConfigKeys.GENERATE_TEST_RUNNER)<EOL>"}
{"signature": "val otherNonDefault =", "body": "containerCtor.valueParameters.find { it.name.asString() != <STR_LIT> && !it.declaresDefaultValue() }<EOL>"}
{"signature": "val DEFAULT_SETTINGS =", "body": "Settings(isVerbose = true, sortDeclarations = false)<EOL>"}
{"signature": "val ifProto =", "body": "proto.ifStatement<EOL>"}
{"signature": "val numberOfParameters =", "body": "kotlinType.arguments.size - <NUM_LIT><EOL>"}
{"signature": "val DECOMPILED_COMMENT_FOR_PARAMETER =", "body": "<STR_LIT><EOL>"}
{"signature": "var state =", "body": "<STR_LIT><EOL>"}
{"signature": "val codegenFactory =", "body": "createJvmIrCodegenFactory(targetConfiguration, file is KtCodeFragment, targetFir<NUM_LIT>IrResult.irModuleFragment)<EOL>"}
{"signature": "val thisFqName =", "body": "DescriptorUtils.getFqName(thisDescriptor).asString()<EOL>"}
{"signature": "fun nextBits() {", "body": "<INDENT><INDENT>// always generates a <NUM_LIT><INDENT><INDENT>println(Random.nextBits(<NUM_LIT>))<INDENT><INDENT>// randomly generates a <NUM_LIT> or <NUM_LIT><INDENT><INDENT>println(Random.nextBits(<NUM_LIT>))<INDENT><INDENT>// generates a random non-negative Int value less than <NUM_LIT><INDENT><INDENT>println(Random.nextBits(<NUM_LIT>))<INDENT><INDENT>// generates a random Int value, may generate a negative value as well<INDENT><INDENT>println(Random.nextBits(<NUM_LIT>))<INDENT>}"}
{"signature": "val linuxArm<NUM_LIT>MainSourceFile =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val firstAngle =", "body": "Random.nextDouble(until = Math.PI / <NUM_LIT>);<EOL>"}
{"signature": "fun runSplayWithMarkHelpers() {", "body": "<EOL><INDENT><INDENT>splay.runSplay()<EOL><INDENT>}"}
{"signature": "if (x !is String || <!SENSELESS_COMPARISON!>x == null<!>){", "body": "<EOL><INDENT><INDENT>var k: Any? = x<EOL><INDENT>}"}
{"signature": "val functionLikeBuilder =", "body": "FunctionLikeSymbolBuilder()<EOL>"}
{"signature": "import mockito.", "body": "OngoingStubbing<EOL>"}
{"signature": "val aAndB =", "body": "if (condition) C() else D()<EOL>"}
{"signature": "val calleeSession =", "body": "callee.moduleData.session<EOL>"}
{"signature": "val IR_MESSAGE_LOGGER =", "body": "CompilerConfigurationKey<IrMessageLogger>(<STR_LIT>)<EOL>"}
{"signature": "val fileMetadata =", "body": "metadata as? DescriptorMetadataSource.File<EOL>"}
{"signature": "var isReified =", "body": "false<EOL>"}
{"signature": "val inputJsFiles =", "body": "modules<EOL>"}
{"signature": "val sourceName =", "body": "context.getNameForDescriptor(fromDescriptor).ident<EOL>"}
{"signature": "if (function.isSuspend && defaultValue != null && isSuspendFunctionType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.session.inlineCheckerExtension?.checkSuspendFunctionalParameterWithDefaultValue(param, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val specialFunction =", "body": "specialFunctionsByName[nameRef.ident] ?: return<EOL>"}
{"signature": "if (argumentCount > MAX_RESTART_ARGUMENT_COUNT && !context.platform.isJvm()) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "while (aUniqueNames.hasNext() && bUniqueNames.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val diff = aUniqueNames.next().compareTo(bUniqueNames.next())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (diff != <NUM_LIT>) return@Comparator diff<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val functionNMap =", "body": "mutableMapOf<Int, IrClass>()<EOL>"}
{"signature": "val typeWithNullability =", "body": "TypeUtils.makeNullableAsSpecified(type, builder.nullability == KtTypeNullability.NULLABLE)<EOL>"}
{"signature": "package set will be<EOL>.", "body": ""}
{"signature": "val resolvedImport =", "body": "FirImportResolveTransformer(session).transformImport(rawImportForSelectedFqName, null) as FirResolvedImport<EOL>"}
{"signature": "for (angle in listOf(Float.NaN, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(sin(angle).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertTrue(cos(angle).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertTrue(tan(angle).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (part in block.statements) {", "body": "<EOL><INDENT><INDENT><INDENT>blockBuilder.addStatement(serialize(part))<EOL><INDENT><INDENT>}"}
{"signature": "if (accessor.isGetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val getterName = JvmAbi.getterName(propertyName)<EOL><INDENT><INDENT><INDENT><INDENT>wrapperName == getterName ||<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>isMangled(wrapperName, getterName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (headerOnly) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (classOrObjectPattern.matcher(newText).find()) {", "body": "<EOL><INDENT><INDENT><INDENT>newText = newText.replace(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> + newPackage.child(Name.identifier(possibleSelfImport)).asString()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val intMinValue =", "body": "Int.MIN_VALUE<EOL>"}
{"signature": "if (backingField != null) {", "body": "<EOL><INDENT><INDENT>candidate.hasVisibleBackingField = isVisible(backingField, callInfo, candidate.dispatchReceiver, skipCheckForContainingClassVisibility)<EOL><INDENT>}"}
{"signature": "if (engineUsageCnt++ > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>engineUsageCnt = <NUM_LIT><EOL><INDENT><INDENT><INDENT>engineCache = null<EOL><INDENT><INDENT>}"}
{"signature": "fun useUnit(fn: () -> Unit) {", "body": "<EOL><INDENT>fn.invoke()<EOL>}"}
{"signature": "val constructedTypeRef =", "body": "delegatedConstructorCall.constructedTypeRef<EOL>"}
{"signature": "package scope tests.", "body": "<EOL>"}
{"signature": "fun aaa() {", "body": "}<EOL><EOL>fun test<NUM_LIT>(aaa: String): String? {<EOL><INDENT>return js(<STR_LIT>)<EOL>}"}
{"signature": "fun box(a: String, b: String?, x: IC?) {", "body": "<EOL><INDENT>val p = <NUM_LIT>u<EOL><INDENT>val s = a + <STR_LIT> + <STR_LIT> + <NUM_LIT> + <NUM_LIT>L + b + <NUM_LIT> + <NUM_LIT>F + '<NUM_LIT>' + A() + true + false + <NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>8<NUM_LIT><NUM_LIT><NUM_LIT><NUM_LIT>u + p + x<EOL><EOL><INDENT>a.plus(b)<EOL><INDENT>b?.plus(a)<EOL><INDENT>val ref<NUM_LIT> = a::plus<EOL><INDENT>val ref<NUM_LIT> = b::plus<EOL><EOL><INDENT>test(<STR_LIT>::plus)<EOL>}"}
{"signature": "val superClassSymbol =", "body": "superClassOrigin.getClassOrObjectSymbol() ?: return false<EOL>"}
{"signature": "val packageView =", "body": "getPackage(StandardNames.BUILT_INS_PACKAGE_FQ_NAME)<EOL>"}
{"signature": "val contractCall =", "body": "this as? FirFunctionCall ?: return false<EOL>"}
{"signature": "val AT_MOST_ONCE_KIND =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val allowedTypesWithoutTypeParams =", "body": "setOf(<EOL>"}
{"signature": "for (<!INVALID_CHARACTERS!>`x/y`<!> in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "val index =", "body": "binarySearchRange(rangeStart, this)<EOL>"}
{"signature": "var canBeUsedInAnnotation =", "body": "true<EOL>"}
{"signature": "val otherFileInfo =", "body": "<!EVALUATED: `other.kt:<NUM_LIT>`!>getSomeInfo()<!><EOL>"}
{"signature": "val failure =", "body": "project.configurationResult.await() as? KotlinPluginLifecycle.ProjectConfigurationResult.Failure ?: return<EOL>"}
{"signature": "fun suspendThrowsNamedLiteralWithUnresolved() {", "body": "}<EOL><EOL>@Throws(exceptionClasses = <!NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION!>arrayOf(<!ANNOTATION_ARGUMENT_MUST_BE_CONST!><!UNRESOLVED_REFERENCE!>UE<!>::class<!>)<!>)<EOL>suspend fun suspendThrowsNamedArrayOfUnresolved() {}"}
{"signature": "fun compilerOptions(configure: Action<in CO>) {", "body": "<EOL><INDENT><INDENT>configure.execute(compilerOptions)<EOL><INDENT>}"}
{"signature": "val COMMANDS_AS_MESSAGE_PART =", "body": "COMMANDS.joinToString(<STR_LIT>) { <STR_LIT>.$it\\<STR_LIT> }<EOL>"}
{"signature": "if (currentChar == '/' && nextChar() == '*') {", "body": "<EOL><INDENT><INDENT><INDENT>commentLevel++<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>result.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val elementArray =", "body": "arrayOf<Any>(<STR_LIT>) as Array<out Any><EOL>"}
{"signature": "if (irConstructor.isPrimary) {", "body": "<INDENT><INDENT>// Optimization. When constructor is primary, the return value will be the same as the argument.<INDENT><INDENT>// So we can just use the argument on the call site.<INDENT><INDENT>// This might be especially important for reference types,<INDENT><INDENT>// to avoid redundant suboptimal <STR_LIT> machinery messing with this code.<INDENT><INDENT>irBuiltIns.unitType<INDENT>}"}
{"signature": "else if (csBuilder.addSubtypeConstraintIfCompatible(argumentType, expectedNullableType, position)) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticsHolder.addDiagnostic(UnsafeCallError(expressionArgument))<EOL><INDENT><INDENT>}"}
{"signature": "val PACKAGES_FQ_NAMES =", "body": "listOf(<EOL>"}
{"signature": "val contextMeta =", "body": "mutableListOf<CallArgumentMeta>()<EOL>"}
{"signature": "val kotlinGenerated =", "body": "processingEnv.options[KAPT_KOTLIN_GENERATED_OPTION]<EOL>"}
{"signature": "if (hx < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>y[<NUM_LIT>] = -y[<NUM_LIT>]; y[<NUM_LIT>] = -y[<NUM_LIT>]; return -n<EOL><INDENT>}"}
{"signature": "package<EOL><INDENT> *  - Creation of a new declaration<EOL>.", "body": ""}
{"signature": "val TASK_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (hasExtension(JvmProtoBuf.classModuleName)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(getExtension(JvmProtoBuf.classModuleName))<EOL><INDENT>}"}
{"signature": "fun visitQualifiedErrorAccessExpression(qualifiedErrorAccessExpression: FirQualifiedErrorAccessExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(qualifiedErrorAccessExpression)<EOL><INDENT>}"}
{"signature": "if (l.argument !is FirSmartCastExpression && r.argument !is FirSmartCastExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val membersFromSupertypesWithScopes =", "body": "resultOfIntersectionWithNaturalName.overriddenMembers<EOL>"}
{"signature": "fun doReadValue(v: InstructionAdapter) {", "body": "<INDENT><INDENT>// -> collection, parcel<INDENT><INDENT>elementSerializer.readValue(v) // -> collection, element<INDENT><INDENT>v.castIfNeeded(elementSerializer.asmType)<INDENT><INDENT>v.invokevirtual(collectionType.internalName, <STR_LIT>, <STR_LIT>, false) // -> bool<INDENT><INDENT>v.pop()<INDENT>}"}
{"signature": "val locator =", "body": "MavenRepositorySystemUtils.newServiceLocator()<EOL>"}
{"signature": "val charSeqValue =", "body": "StackValue.local(charSeqVar, charSeqType)<EOL>"}
{"signature": "val RELEASE =", "body": "$nativeBuildType.RELEASE\"<EOL>"}
{"signature": "val kotlinSupertypesResolver =", "body": "JavacWrapperKotlinResolverImpl(lightClassGenerationSupport)<EOL>"}
{"signature": "val MAGIC_DO_NOT_CHANGE_TEST_JAR_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val TEST_MODULE_REGEX =", "body": "Regex(<STR_LIT> +<INDENT><INDENT>  // name"}
{"signature": "if (!symbol.hasJvmFieldAnnotation(session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var time =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun Bar(child: @Composable (() -> Unit)?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>child?.invoke()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>toChar()<INDENT>  until <NUM_LIT>toChar())<INDENT>  {", "body": "sb.append(i); sb.append(' ') }"}
{"signature": "val funKeyword =", "body": "declaration.getFunKeyword() ?: return<EOL>"}
{"signature": "val newPackagePrefix =", "body": "testFile.path.replace(<STR_LIT>.toRegex(), <STR_LIT>)<EOL>"}
{"signature": "val _my_invalid_variable =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (currentDeclaration is FirCallableDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val containingClassLookupTag = currentDeclaration.containingClassLookupTag() ?: return true<EOL><INDENT><INDENT><INDENT><INDENT>return containsTypeParameter(containingClassLookupTag.toSymbol(session)?.fir)<EOL><INDENT><INDENT><INDENT>}"}
