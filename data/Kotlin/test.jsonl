{"signature": "var gc =", "body": "<NUM_LIT><EOL>"}
{"signature": "val boxTestRunFile =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val alignmnet =", "body": "declaration.requiredAlignment(llvm)<EOL>"}
{"signature": "if (queue == null) {", "body": "<EOL><INDENT><INDENT><INDENT>this.state = STATE_SUSPENDED<EOL><INDENT><INDENT>}"}
{"signature": "for (type in arrayOf(irBuiltIns.floatType, irBuiltIns.doubleType, irBuiltIns.numberType)) {", "body": "<EOL><INDENT><INDENT><INDENT>add(type, ConversionNames.TO_CHAR, intrinsics.jsNumberToChar)<EOL><INDENT><INDENT>}"}
{"signature": "if (jsIsEs<NUM_LIT>() && noArgsConstructor !== jsClass) {", "body": "<EOL><INDENT><INDENT>js(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (classId in optionalAnnotationClassesAndPackages.first.keys) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getOrPut(classId.packageFqName, ::mutableSetOf).add(classId.shortClassName.asString())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var accumulator =", "body": "this[<NUM_LIT>]<EOL>"}
{"signature": "for ((firTypeParameterRef, boundTypeArgument) in mapping) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.collect(ctx, typeParameterOwner, firTypeParameterRef, boundTypeArgument, compatibilityUpperBound)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val pushClassFunc =", "body": "serialDescImplClass.getFuncDesc(CallingConventions.addClassAnnotation).single()<EOL>"}
{"signature": "if (declaration.hasExplicitBackingField) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportError(declaration.source, <STR_LIT>, context)<EOL><INDENT><INDENT>}"}
{"signature": "var stackSize =", "body": "actualStackSize<EOL>"}
{"signature": "fun println(message : Long) {", "body": "System.out.println(message) }"}
{"signature": "val xcTestRunnerNativeLibrary =", "body": "listOf(config.xcTestLauncherNativeLibrary)<EOL>"}
{"signature": "val teamcity =", "body": "project.rootProject.findProperty(<STR_LIT>) as? Map<*, *><EOL>"}
{"signature": "if (flexibleType.isNullabilityFlexible()) {", "body": "<EOL><INDENT><INDENT><INDENT>irAnnotations.addIfNotNull(extensions.generateFlexibleNullabilityAnnotationCall())<EOL><INDENT><INDENT>}"}
{"signature": "if (<STR_LIT> !in jvmTarget.compilations.names) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitTypeAlias(declaration: IrTypeAlias, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeAlias(declaration)<EOL><INDENT>}"}
{"signature": "val deferredGeneratorsStack =", "body": "Stack<MutableList<DeferredGenerator>>()<EOL>"}
{"signature": "val cliOption =", "body": "explicitApi?.toCompilerValue()<EOL>"}
{"signature": "val boundsForNestedVariable =", "body": "getTypeBounds(it).bounds<EOL>"}
{"signature": "val kInitFuncType =", "body": "LlvmFunctionSignature(LlvmRetType(llvm.voidType), listOf(LlvmParamType(llvm.int<NUM_LIT>Type), LlvmParamType(pointerType(kMemoryStateType))))<EOL>"}
{"signature": "if (jdkVersion == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>module(<STR_LIT>, additionalKotlinArguments = listOf(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val multifileClassSnapshot =", "body": "classSnapshots[<STR_LIT>]!!.toGson()<EOL>"}
{"signature": "val result_<NUM_LIT> =", "body": "select(A(x<NUM_LIT>), A(x<NUM_LIT>))<EOL>"}
{"signature": "val LOCAL_VARIABLE_NAME_PREFIX_INLINE_FUNCTION =", "body": "<STR_LIT><EOL>"}
{"signature": "val remoteHost =", "body": "project.findProperty(<STR_LIT>)?.toString()<EOL>"}
{"signature": "if (receiverOrImplicitInvoke is FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT><INDENT>getSymbolsForResolvedQualifier(receiverOrImplicitInvoke, expression, session, symbolBuilder)<EOL><INDENT><INDENT>}"}
{"signature": "val superValueParameters =", "body": "superFunction?.valueParameters.orEmpty()<EOL>"}
{"signature": "val DISABLE_SCRIPT_DEFINITIONS_FROM_CLASSPATH_OPTION =", "body": "<STR_LIT><EOL>"}
{"signature": "val module<NUM_LIT>Lib =", "body": "this.workDir.resolve(<STR_LIT>).resolve(<STR_LIT>)<EOL>"}
{"signature": "val myInterfaceClassId =", "body": "ClassId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val infoPlistFile =", "body": "directory.child(<STR_LIT>)<EOL>"}
{"signature": "if (left is KtProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>accessTarget = getDeclarationAccessTarget(left)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val modifiersChecker =", "body": "modifiersChecker.withTrace(trace)<EOL>"}
{"signature": "val modifierLists =", "body": "modifierListsOwner.getAllModifierLists()<EOL>"}
{"signature": "val truncatedString =", "body": "removeSuffix(compilerType.lowerName)<EOL>"}
{"signature": "val irClassSymbol =", "body": "irType.classOrNull<EOL>"}
{"signature": "val mutableToReadOnlyClassId =", "body": "HashMap<ClassId, ClassId>()<EOL>"}
{"signature": "package myPack<EOL>.", "body": ""}
{"signature": "if (hasClassId()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + fqNameIndexes(classId)<EOL><INDENT>}"}
{"signature": "val additionalProducedBitcodeFiles =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "if (argument.getSpreadElement() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return if (parameterDescriptor.varargElementType == null) DONT_CARE else parameterDescriptor.type<EOL><INDENT>}"}
{"signature": "fun suspendThrowsSpreadEmptyLiteral() {", "body": "}<EOL><EOL><!THROWS_LIST_EMPTY!>@Throws(*arrayOf())<!><EOL>suspend fun suspendThrowsSpreadEmptyArrayOf() {}"}
{"signature": "var inVerbosePhase =", "body": "false<EOL>"}
{"signature": "fun foo(x: (E) -> E) {", "body": "}<EOL><INDENT>fun bar(x: (Inv<E>) -> E) {}"}
{"signature": "val innerSig =", "body": "deserializeIdSignature(proto.innerSig)<EOL>"}
{"signature": "val androidExtension =", "body": "platformProject.extensions.getByName(<STR_LIT>) as BaseExtension<EOL>"}
{"signature": "if (tree is JCTree.JCTypeApply) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>tree = tree.clazz<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fromTypeErased =", "body": "fromType.getRuntimeClass(context.irBuiltIns)<EOL>"}
{"signature": "val xSafeCallSafeCastExplicitType =", "body": "t?.findViewById<X>(<NUM_LIT>) <!USELESS_CAST!>as? X<!><EOL>"}
{"signature": "var needUpdateLambdaType =", "body": "anonymousFunction.typeRef is FirImplicitTypeRef<EOL>"}
{"signature": "package - will return SirExtension for that package.", "body": "<EOL>"}
{"signature": "if (function.symbol is FirPropertyAccessorSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.containingProperty?.symbol<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun defineGlobalVTable(irClass: IrClassSymbol, wasmGlobal: WasmGlobal) {", "body": "<EOL><INDENT><INDENT>wasmFragment.globalVTables.define(irClass, wasmGlobal)<EOL><INDENT>}"}
{"signature": "fun visitBody(body: IrBody, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBody(body)<EOL><INDENT>}"}
{"signature": "for (int elem: arr) {", "body": "<EOL><INDENT><INDENT><INDENT>result[i++] = elem;<EOL><INDENT><INDENT>}"}
{"signature": "val commonProxy =", "body": "CommonProxy(this, callInterceptor)<EOL>"}
{"signature": "var call =", "body": "Z(<STR_LIT>).test(b = {res += <STR_LIT>; <STR_LIT>}(), a = {res+=<STR_LIT>; <STR_LIT>}(), c = {res += <STR_LIT>; <STR_LIT>})<EOL>"}
{"signature": "val zipRootTarget =", "body": "root.resolve(<STR_LIT>)<EOL>"}
{"signature": "val untilFuns =", "body": "packageDescriptor.memberScope.getContributedFunctions(untilFunName, NoLookupLocation.FROM_BUILTINS)<EOL>"}
{"signature": "val families =", "body": "mutableSetOf<Family>()<EOL>"}
{"signature": "val signedElement =", "body": "element.toInt()<EOL>"}
{"signature": "if (config.produce.isCache) {", "body": "<EOL><INDENT><INDENT><INDENT>val containsStdlib = config.libraryToCache!!.klib == context.stdlibModule.konanLibrary<EOL><INDENT><INDENT><INDENT>CacheLlvmModuleSpecification(config.cachedLibraries, context.config.libraryToCache!!, containsStdlib = containsStdlib)<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedExpression =", "body": "ResolvedExpressionAtom(expressionArgument)<EOL>"}
{"signature": "val middleSpace =", "body": "kotlin.math.max(<NUM_LIT> - length, <NUM_LIT>)<EOL>"}
{"signature": "val tryLoopStack =", "body": "mutableListOf<IrExpression>()<EOL>"}
{"signature": "fun target(x: Int) {", "body": "}<EOL><EOL>fun use(fn: (Int) -> Unit): Any = fn<EOL><EOL>fun box(): String {<EOL><INDENT>checkEqual(use(::target), ::target)<EOL><INDENT>checkEqual(useFromOtherFile(), ::target)<EOL><INDENT>return <STR_LIT><EOL>}"}
{"signature": "val newThrowableFunction =", "body": "context.newThrowableSymbol<EOL>"}
{"signature": "val subTypeSubstituted =", "body": "substituteDontCare.substitute(subType, Variance.INVARIANT) ?: return true<EOL>"}
{"signature": "when (val parent = element?.parent) {", "body": "<EOL><INDENT><INDENT>is KtBinaryExpression -> if (parent.left == element && parent.operationToken == KtTokens.EQ) parent else null<EOL><INDENT><INDENT>is KtQualifiedExpression -> findAssignment(element.parent)<EOL><INDENT><INDENT>is KtSimpleNameExpression -> findAssignment(element.parent)<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "if (escChar == <NUM_LIT>toChar()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>escaped.append(c)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val afterDumpSet =", "body": "phaseSetFromArguments(phases, arguments.phasesToDumpAfter, ::report)<EOL>"}
{"signature": "for (irBranch in branches) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irBranch.condition = irBranch.condition.cast(irBuiltIns.booleanType)<EOL><INDENT><INDENT><INDENT><INDENT>irBranch.result = irBranch.result.cast(type)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testArrayAccess(nc: C?) {", "body": "<EOL><INDENT>nc?.p[<NUM_LIT>]++<EOL>}"}
{"signature": "val methodNameCut =", "body": "testName.lastIndexOf('.')<EOL>"}
{"signature": "fun serializeReturn(operation: ProtoOperation.Builder, expression: IrReturn) {", "body": "<EOL><INDENT><INDENT>val proto = ProtoReturn.newBuilder()<EOL><INDENT><INDENT><INDENT>.setReturnTarget(serializeIrSymbol(expression.returnTargetSymbol))<EOL><INDENT><INDENT><INDENT>.setValue(serializeExpression(expression.value))<EOL><INDENT><INDENT>operation.`return` = proto.build()<EOL><INDENT>}"}
{"signature": "val substitutedTypes =", "body": "SmartList<ConeClassLikeType>()<EOL>"}
{"signature": "val bad =", "body": "Bad({ <NUM_LIT> })<EOL>"}
{"signature": "val superConstructor =", "body": "superClass.constructors.single { it.valueParameters.size == numOfSuperArgs }<EOL>"}
{"signature": "val stats =", "body": "FactoryMap.create<StatsKey, StatsValue> { StatsValue(dimension) }<EOL>"}
{"signature": "if (argumentType is ConeClassLikeType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkUpperBoundViolated(argumentTypeRef, argumentType, context, reporter, isIgnoreTypeParameters)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.isReanalyzableContainer() || declaration.accessors.any(KtPropertyAccessor::isReanalyzableContainer)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.hasFirBody = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun NFromFile() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Open()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val removedSupertypes =", "body": "supertypesMap[child].orEmpty().filter { it !in parents }<EOL>"}
{"signature": "val listT =", "body": "ArrayList<T>(expectedSize)<EOL>"}
{"signature": "fun test(some: Iterable<String>) {", "body": "<EOL><INDENT>val it = some.iterator()<EOL><INDENT>val split = some.spliterator()<EOL>}"}
{"signature": "val arrayConstructorSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.getArrayConstructorSymbol(expression.type as IrSimpleType) { it.owner.valueParameters.size == <NUM_LIT> }<EOL>"}
{"signature": "val configurationConfigurations =", "body": "mutableListOf<Configuration.() -> Unit>()<EOL>"}
{"signature": "if (node.tokenType == KtNodeTypes.INTEGER_CONSTANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return listOf(TextRange.create(endOffset - <NUM_LIT>, endOffset))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val startMem =", "body": "usedMemory(withGC)<EOL>"}
{"signature": "val cStructVarName =", "body": "<STR_LIT><EOL>"}
{"signature": "val arrayTypeOf =", "body": "elementType.lowercase() + <STR_LIT><EOL>"}
{"signature": "if (typeVariable != null && !c.notFixedTypeVariables.containsKey(typeConstructor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fixedTypeVariable(typeVariable)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val numContextParams =", "body": "ownerFn.contextReceiverParametersCount<EOL>"}
{"signature": "val hasCatches =", "body": "catchClauses.isNotEmpty()<EOL>"}
{"signature": "val useSiteOffset =", "body": "testServices.expressionMarkerProvider.getCaretPositionOrNull(psiFile, caretTag = <STR_LIT>)<EOL>"}
{"signature": "val receiverKind =", "body": "candidate.explicitReceiverKind<EOL>"}
{"signature": "val projectPaths =", "body": "mutableListOf<Path>()<EOL>"}
{"signature": "val leftIsBoolean =", "body": "leftVariable != null && fir.leftOperand.resolvedType.isBoolean<EOL>"}
{"signature": "val containingDeclaration<NUM_LIT> =", "body": "d<NUM_LIT>containingDeclaration<EOL>"}
{"signature": "val matchingLevel =", "body": "CommonizerLogLevel.values().firstOrNull { logLevel -> logLevel.name.equals(logLevelString, true) }<EOL>"}
{"signature": "val LegacyIntExternalizer =", "body": "ExternalIntegerKeyDescriptor.INSTANCE<EOL>"}
{"signature": "val inlinedVersion =", "body": "(binaryClass as? FileBasedKotlinClass)?.classVersion ?: return<EOL>"}
{"signature": "val typeParameterScopes =", "body": "ArrayDeque<Map<TypeParameterDescriptor, IrTypeParameterSymbol>>()<EOL>"}
{"signature": "val JVM_IR_TEMPLATES_WITH_INLINE_SCOPES =", "body": "\""}
{"signature": "val compileOutputHasEnoughClassFiles =", "body": "checkMinNumberOfClassFiles(compiledSources, totalDeclaredTypes)<EOL>"}
{"signature": "val dstHierarchyInfo =", "body": "context.getLayoutBuilder(dstClass).hierarchyInfo<EOL>"}
{"signature": "val argsArray =", "body": "expression.getValueArgument(<NUM_LIT>) as? IrBlock<EOL>"}
{"signature": "fun initializeCompilation(scriptCompilationConfiguration: ScriptCompilationConfiguration) {", "body": "<EOL><INDENT><INDENT>if (_compilation != null) throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>_compilation = createCompilation(scriptCompilationConfiguration)<EOL><INDENT>}"}
{"signature": "fun builder(c: suspend String.() -> Unit) {", "body": "<EOL><INDENT>c.startCoroutine(<STR_LIT>, EmptyContinuation)<EOL>}"}
{"signature": "val ra =", "body": "bar(a)<EOL>"}
{"signature": "if (call<NUM_LIT>numDefaults > call<NUM_LIT>numDefaults) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun generateSyntheticFunctionParameterDeclarations(irFunction: IrFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultConeType =", "body": "computeOrdinaryDefaultType(defaultStatement, firDefaultStatement)<EOL>"}
{"signature": "fun printLog(text: String) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun jumpIfCanCompareTopWithPrimitive(v: InstructionAdapter, label: Label) {", "body": "<EOL><INDENT><INDENT>v.instanceOf(boxedType)<EOL><INDENT><INDENT>v.ifne(label)<EOL><INDENT>}"}
{"signature": "val inf =", "body": "inflater.inflate(R.layout.fragment_start,container,false)<EOL>"}
{"signature": "import<INDENT>() : import<EOL>.", "body": ""}
{"signature": "val staticOrUnbound =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (static != null)<EOL>"}
{"signature": "var lastGroupIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "package does not match file path.", "body": "<EOL>"}
{"signature": "var elseLabel =", "body": "Label()<EOL>"}
{"signature": "if (Files.isRegularFile(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Files.copy(it, outputPath.resolve(it.normalizedToBeRelative), StandardCopyOption.REPLACE_EXISTING)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (k < finalValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>O[k] = value;<EOL><INDENT><INDENT><INDENT><INDENT>k++;<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isDefinitelyAssigned =", "body": "info?.get(symbol)?.isDefinitelyVisited() == true<EOL>"}
{"signature": "val CACHED_DESCRIPTOR_FIELD =", "body": "<STR_LIT><EOL>"}
{"signature": "val arrayOfURLs =", "body": "classpath.map { File(it.absolutePath).toURI().toURL() }.toTypedArray()<EOL>"}
{"signature": "val jvmNameEntry =", "body": "JvmFileClassUtil.findAnnotationEntryOnFileNoResolve(file, JVM_NAME_SHORT)<EOL>"}
{"signature": "val nullCheckedValueAdapter =", "body": "valueAdapter?.let(::CheckNotNullAndAdapter)<EOL>"}
{"signature": "if (mapping.kotlinMutable == classId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <STR_LIT> + classId.relativeClassName.asString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>.replace(<STR_LIT>, <STR_LIT>)<INDENT><INDENT><INDENT><INDENT><INDENT> .replace(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ENUM_ENTRIES =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val ktDiagnostics =", "body": "ktDiagnosticReporter.diagnosticsByFilePath[<STR_LIT>] ?: continue<EOL>"}
{"signature": "val notVisitedSupers =", "body": "supers.filterNot { visitedSupers.contains(it) }<EOL>"}
{"signature": "val components =", "body": "localRoot.listFiles.filter { it.looksLikeKlibComponent }<EOL>"}
{"signature": "val countAndBlock =", "body": "map.remove(id)<EOL>"}
{"signature": "val nameSerializer =", "body": "DataWriter()<EOL>"}
{"signature": "val parentDeclarations =", "body": "anchor.parentsOfType<KtDeclaration>(withSelf = true)<EOL>"}
{"signature": "val submitters =", "body": "Array(numberOfSubmitters) { Worker.start() }<EOL>"}
{"signature": "if (status.isTailRec) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var testGroup =", "body": "<STR_LIT><EOL>"}
{"signature": "if (compatibilityCandidate == null && isPreserveCompatibilityCandidate(candidate)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>compatibilityGroup = group<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>compatibilityCandidate = candidate<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val testCallableRefLHSType =", "body": "<!UNDERSCORE_USAGE_WITHOUT_BACKTICKS!>___<!>::toString<EOL>"}
{"signature": "val readOnlyClassTypeArguments =", "body": "(readOnlyClassType as IrSimpleType).arguments.mapNotNull { (it as? IrTypeProjection)?.type }<EOL>"}
{"signature": "val contextReceiverParameters =", "body": "descriptor.contextReceiverParameters<EOL>"}
{"signature": "if (property.fromPrimaryConstructor == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.lazyResolveToPhase(resolverPhase)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (expressionTypes.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return expressionTypes.singleOrNull() <EOL><INDENT><INDENT>}"}
{"signature": "val WASM_PAGE_SIZE_IN_BYTES =", "body": "<NUM_LIT>_<NUM_LIT>"}
{"signature": "when (repo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> repo<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (includeFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this += file<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ENUM_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "if (isHiddenFromObjC && supersNotHiddenFromObjC.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.reportIncompatibleOverride(declarationToReport, descriptor, objCAnnotations, supersNotHiddenFromObjC)<EOL><INDENT><INDENT>}"}
{"signature": "val receiverType =", "body": "it.owner.extensionReceiverParameter?.type<EOL>"}
{"signature": "val oldValue<NUM_LIT> =", "body": "cache.put(<STR_LIT>, valueReplacement<NUM_LIT>)<EOL>"}
{"signature": "val internedScopeFqName =", "body": "interner.intern(scopeFqName)<EOL>"}
{"signature": "val startingChunks =", "body": "classId.relativeClassName.pathSegments()<EOL>"}
{"signature": "val OLD_INFERENCE_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!withAbiSnapshot && buildHistoryFile.isFile != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return CompilationMode.Rebuild(BuildAttribute.NO_BUILD_HISTORY)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val escapeRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "for (task in tasksWithNativeCompilerArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val taskOutput = getOutputForTask(task, LogLevel.INFO)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertTrue(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>taskOutput.contains(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visit(arg: Wrapper) {", "body": "<EOL><INDENT><INDENT><INDENT>add(arg.tag)<EOL><INDENT><INDENT>}"}
{"signature": "val useInitialized =", "body": "useUnitialized + v + w<EOL>"}
{"signature": "val derivedWithKey =", "body": "DerivedWithKey()<EOL>"}
{"signature": "val dependenciesModulesProvider =", "body": "dependenciesProvider[target]<EOL>"}
{"signature": "val unsubstitutedTypeArgument =", "body": "unsubstitutedType.arguments[i].type<EOL>"}
{"signature": "val supersNotRefinedInSwift =", "body": "mutableListOf<CallableMemberDescriptor>()<EOL>"}
{"signature": "val importAlias =", "body": "convertImportAlias(it)<EOL>"}
{"signature": "fun test<NUM_LIT>(x: C<out Int?>) {", "body": "<EOL><INDENT>val y = x.data<EOL><INDENT>require(y is Number)<EOL><INDENT>x.data.inc()<EOL><INDENT>y.inc()<EOL>}"}
{"signature": "val errorArgument =", "body": "arguments[<NUM_LIT>]<EOL>"}
{"signature": "val annotatedEnumSerializerFactory =", "body": "session.symbolProvider<EOL>"}
{"signature": "val cachedNullResults =", "body": "CommonizerSet<CirEntityId>()<EOL>"}
{"signature": "val javaSourceRoots =", "body": "ArrayList<JavaRootPath>()<EOL>"}
{"signature": "if (isSetter || originalDeclarationReturnType.isUnit || originalDeclarationReturnType.isNothing) {", "body": "<EOL><INDENT><INDENT><INDENT>body.statements.add(irCastOrCall)<EOL><INDENT><INDENT>}"}
{"signature": "val markerVariablesFromInlinedNode =", "body": "inlinedNodeLocalVariables.filter { isFakeLocalVariableForInline(it.name) }<EOL>"}
{"signature": "var firstImportingScopeIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "var skipValidation =", "body": "false<EOL>"}
{"signature": "fun afterChildren(current: IrClassSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this.result += current<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (child is KtScript) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>yieldAll(child.declarations)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun println() {", "body": "}<EOL>fun foo(x: Any) {}"}
{"signature": "val ASSIGNMENT_OPERATIONS =", "body": "setOf(TIMES_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, REM_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN)<EOL>"}
{"signature": "package FQ name (cnames/objcnames).", "body": "Need to transfer it to the main package.<EOL>"}
{"signature": "fun fooA() {", "body": "}"}
{"signature": "val encodingGenerator =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CStringLiteralsGenerator(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (classOrObject !is KtEnumEntry) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "fun flameThrower() {", "body": "<EOL><INDENT>throw Throwable(<STR_LIT>)<EOL>}"}
{"signature": "val previousValue =", "body": "edgesMap[instruction]<EOL>"}
{"signature": "if (fromSetter && symbol is FirPropertySymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>symbol.setterSymbol?.loadExperimentalities(<EOL><INDENT><INDENT><INDENT><INDENT>context, result, visited, fromSetter = false, dispatchReceiverType, fromSupertype = false<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun remAssign(value: Int) {", "body": "<EOL><INDENT><INDENT>remAssign = true<EOL><INDENT><INDENT>a = a % value<EOL><INDENT>}"}
{"signature": "var exception =", "body": "false<EOL>"}
{"signature": "if (signature.current() == CharacterIterator.DONE) {", "body": "<EOL><INDENT><INDENT><INDENT>throw ClsFormatException()<EOL><INDENT><INDENT>}"}
{"signature": "if (resultingDescriptor is ClassConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT>val ktClass = resultingDescriptor.constructedClass.source.getPsi() as? KtClass<EOL><INDENT><INDENT>if (ktClass?.isAnnotation() == true) return ktClass.fqName?.toString()<EOL><INDENT>}"}
{"signature": "fun plusAssign(set: Collection<S>) {", "body": "<EOL><INDENT><INDENT>children += set<EOL><INDENT>}"}
{"signature": "fun fooRecursive(n: Int) {", "body": "<EOL><INDENT>if (n > <NUM_LIT>)<EOL><INDENT><INDENT>fooRecursive(n - <NUM_LIT>)<EOL>}"}
{"signature": "val expectedSign =", "body": "parameter.returnTypeRef.coneType.attributes.numberSign ?: continue<EOL>"}
{"signature": "val returnTypeRef =", "body": "type.returnTypeReference<EOL>"}
{"signature": "val bootstrapMethodHandle =", "body": "evalMethodHandle(bootstrapMethodHandleArg)<EOL>"}
{"signature": "fun produceLibrary() {", "body": "<EOL><INDENT><INDENT>produceLibrary<EOL><INDENT>}"}
{"signature": "val cci =", "body": "CustomContinuationInterceptor()<EOL>"}
{"signature": "val FORWARD_DECLARATION_AS_REIFIED_TYPE_ARGUMENT =", "body": "DiagnosticFactory<NUM_LIT>create<PsiElement, KotlinType>(Severity.ERROR)<EOL>"}
{"signature": "import alias if any.", "body": "Then, we can still compare the<EOL>"}
{"signature": "val namesTopDownEnter =", "body": "HashSet<String>()<EOL>"}
{"signature": "if (arity >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KotlinTypeFactory.simpleType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>attributes,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>functionTypeConstructor.builtIns.getSuspendFunction(arity).typeConstructor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>arguments,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>nullable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (memberDeclaration.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (diagnostic) {", "body": "<EOL><INDENT><INDENT><INDENT>is ModuleDoesNotReadUnnamedModule -><EOL><INDENT><INDENT><INDENT><INDENT>JAVA_MODULE_DOES_NOT_READ_UNNAMED_MODULE.on(reportOn)<EOL><INDENT><INDENT><INDENT>is ModuleDoesNotReadModule -><EOL><INDENT><INDENT><INDENT><INDENT>JAVA_MODULE_DOES_NOT_DEPEND_ON_MODULE.on(reportOn, diagnostic.dependencyModuleName)<EOL><INDENT><INDENT><INDENT>is ModuleDoesNotExportPackage -><EOL><INDENT><INDENT><INDENT><INDENT>JAVA_MODULE_DOES_NOT_EXPORT_PACKAGE.on(reportOn, diagnostic.dependencyModuleName, referencedPackageFqName!!.asString())<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (b is C) {", "body": "<EOL><INDENT><INDENT>b<!UNNECESSARY_SAFE_CALL!>?.<!>foo(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val constantArgumentValue =", "body": "parameterNameArgument?.expression as? KtConstantAnnotationValue ?: return null<EOL>"}
{"signature": "fun append(ch: Char) {", "body": "<EOL><INDENT><INDENT>if (length >= buf.size) buf = buf.copyOf(<NUM_LIT> * buf.size)<EOL><INDENT><INDENT>buf[length++] = ch<EOL><INDENT>}"}
{"signature": "val dumpContent =", "body": "dumper(actionState, data, context) ?: return<EOL>"}
{"signature": "val serializableProperties =", "body": "properties.serializableProperties<EOL>"}
{"signature": "val hcFun =", "body": "creator.createHashCodeMethodDeclaration()<EOL>"}
{"signature": "fun canCreateASchemeWithAnonymousOpens() {", "body": "<EOL><INDENT><INDENT>val scheme = Scheme(Open(<NUM_LIT>), listOf(Scheme(Open(<NUM_LIT>))))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, scheme.toString())<EOL><INDENT>}"}
{"signature": "val packageFacadeFqNames =", "body": "allClasses.filter { it is KotlinClassSnapshot && it !is RegularKotlinClassSnapshot }<EOL>"}
{"signature": "val stableBits =", "body": "param.irSlotAnd(meta.maskSlot, StabilityBits.UNSTABLE.bits)<EOL>"}
{"signature": "when (it.origin) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IrDeclarationOrigin.IR_EXTERNAL_DECLARATION_STUB -> isPropertyWithBackingFieldFromAnotherModule<EOL><INDENT><INDENT><INDENT><INDENT>else -> it.backingField != null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitConstructor(constructor: FirConstructor, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allConstructorCheckers.check(constructor, data)<EOL><INDENT>}"}
{"signature": "val exitCond =", "body": "JsIrBuilder.buildCall(booleanNotSymbol).apply { dispatchReceiver = it }<EOL>"}
{"signature": "for (target in javaTargets) {", "body": "<EOL><INDENT><INDENT><INDENT>vararg.elements.add(<EOL><INDENT><INDENT><INDENT><INDENT>IrGetEnumValueImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>UNDEFINED_OFFSET, UNDEFINED_OFFSET, symbols.elementTypeEnum.defaultType, target.symbol<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val attributesToKeep =", "body": "this.attributes.filterNot { it.isCustomAttribute() }<EOL>"}
{"signature": "if (firResult == null) {", "body": "<EOL><INDENT><INDENT><INDENT>FirDiagnosticsCompilerResultsReporter.reportToMessageCollector(diagnosticsReporter, messageCollector, renderDiagnosticNames)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val actualTypealias =", "body": "getTypealiasSymbolIfActualizedViaTypealias(expectAnnotationClass, classActualizationInfo)?.owner<EOL>"}
{"signature": "fun useBuildConfigJava() {", "body": "<EOL><INDENT>if (BuildConfig.APPLICATION_ID != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val fileTranslationData =", "body": "serializer.translationData(file)<EOL>"}
{"signature": "val serializableClassDescriptor =", "body": "getSerializableClassDescriptorBySerializer(classDescriptor) ?: return<EOL>"}
{"signature": "val typeParameters<NUM_LIT> =", "body": "other.function.typeParameters<EOL>"}
{"signature": "val builtProductsDir =", "body": "XcodeEnvironment.builtProductsDir<EOL>"}
{"signature": "val gradleErrorPath =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun renderResolvedQualifierWithoutAnnotations(resolvedQualifier: FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT>printer.print(<STR_LIT>)<EOL><INDENT><INDENT>super.renderResolvedQualifierWithoutAnnotations(resolvedQualifier)<EOL><INDENT><INDENT>printer.print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun Boo() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Foo()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val elem =", "body": "Random.nextDouble()<EOL>"}
{"signature": "if (variableParent is ConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val classDescriptor = variableParent.containingDeclaration<EOL><EOL><INDENT><INDENT><INDENT>if (scopeContainer == classDescriptor) return false<EOL><INDENT><INDENT><INDENT>if (scopeContainer is PropertyDescriptor && scopeContainer.containingDeclaration == classDescriptor) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun setValue(withName: WithName, property: KProperty<*>, value: String) {", "body": "<EOL><INDENT><INDENT>withName.name = value + <STR_LIT> + property.name<EOL><INDENT>}"}
{"signature": "if (origin != null) {", "body": "<EOL><INDENT><INDENT>baz(origin)<EOL><INDENT><INDENT>baz(origin)<EOL><INDENT>}"}
{"signature": "val asmLoopRangeType =", "body": "codegen.asmType(rangeKotlinType)<EOL>"}
{"signature": "val variableLines =", "body": "testFileLines.asSequence().filter { line -> line.startsWith(\""}
{"signature": "val validClasspathFilesExtensions =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun foo(n: Nested) {", "body": "<EOL><INDENT><INDENT>n.bar()<EOL><INDENT>}"}
{"signature": "fun releaseInterceptedContinuation(continuation: Continuation<*>) {", "body": "<EOL><INDENT><INDENT>releases++<EOL><INDENT>}"}
{"signature": "if (expression is FirVariableAssignment && expression.lValue is FirDesugaredAssignmentValueReferenceExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (typeParameter in container.typeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>closureBuilder.addPotentiallyCapturedTypeParameter(typeParameter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compiledIrFiles =", "body": "serializedIrFiles<EOL>"}
{"signature": "package MultipleInterfaceImplementationWithSameJsNameClash<EOL>.", "body": ""}
{"signature": "fun get() {", "body": "<EOL><INDENT><NUM_LIT> + <NUM_LIT> <!SYNTAX!><NUM_LIT> <NUM_LIT> <NUM_LIT><!><EOL>}"}
{"signature": "var written =", "body": "<NUM_LIT>; private set<EOL>"}
{"signature": "val outputOption =", "body": "argParser.option(ArgType.String, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun testKotlinProjectWithEmptyTestOutputDir() {", "body": "<EOL><INDENT><INDENT>doTest()<EOL><INDENT>}"}
{"signature": "val INAPPLICABLE_OBJC_NAME =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "val nativePointed =", "body": "interopClass(InteropFqNames.nativePointedName)<EOL>"}
{"signature": "val kl =", "body": "K<Long>(Long::class)<EOL>"}
{"signature": "val FILENAME_REGEX =", "body": "<STR_LIT><STR_LIT><STR_LIT><EOL>"}
{"signature": "val loopParameterType =", "body": "loopParameterDescriptor.returnType ?: context.currentModule.builtIns.anyType<EOL>"}
{"signature": "val externalLambdaArguments =", "body": "oldCall.functionLiteralArguments<EOL>"}
{"signature": "if (resolvedObjCNameAnnotation != null && resolvedObjCNameAnnotation.isExact) {", "body": "<EOL><INDENT><INDENT>return swiftName<EOL><INDENT>}"}
{"signature": "if (annotations != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (allSuperTypeCallEntries.size <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>buildDelegatedCall(superTypeCallEntry, delegatedSuperTypeRef!!)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val librariesSearchScope =", "body": "ProjectScope.getLibrariesScope(project)<EOL>"}
{"signature": "val EQUALS_METHOD_NAME =", "body": "OperatorNameConventions.EQUALS<EOL>"}
{"signature": "var dependencies =", "body": "listOf(dependency)<EOL>"}
{"signature": "val SUPPORT_V<NUM_LIT>_PACKAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val subResolveAtoms =", "body": "resolvedAtom.subResolvedAtoms<EOL>"}
{"signature": "fun checkOpen() {", "body": "<EOL><INDENT><INDENT>if (isClosed) throw IOException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun reportParameterError(<EOL><INDENT><INDENT><INDENT><INDENT>node: Node,<EOL><INDENT><INDENT><INDENT><INDENT>index: Int,<EOL><INDENT><INDENT><INDENT><INDENT>expected: String,<EOL><INDENT><INDENT><INDENT><INDENT>received: String<EOL><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val call = node as? Call ?: (node as? ResolvedExpression)?.node as? Call ?: return<EOL><INDENT><INDENT><INDENT><INDENT>errors.add(call)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONFIGURE_PROJECT_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val smartCastNeeded =", "body": "<EOL><INDENT><INDENT><INDENT>notNullReceiverExpected || !isCandidateVisibleOrExtensionReceiver(receiverArgument, null, isDispatchReceiver)<EOL>"}
{"signature": "fun testShouldNotGenerateCodeMetadata() {", "body": "<EOL><INDENT><INDENT>runTest(K<NUM_LIT>MetadataCompiler(), classNotFound, CustomComponentRegistrar::class)<EOL><INDENT>}"}
{"signature": "val usesNonConstValAsConstant =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>usesNonConstValAsConstant(argumentForReceiver.expression) || usesNonConstValAsConstant(argumentForParameter.expression)<EOL>"}
{"signature": "val completionCandidateCheckerImpl =", "body": "KtFirCompletionCandidateChecker(this, token)<EOL>"}
{"signature": "package Jet<NUM_LIT><EOL>.", "body": ""}
{"signature": "val serializedTargetsFile =", "body": "serializedTargetsDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val hidesFromObjCSupportedTargets =", "body": "arrayOf(KotlinTarget.FUNCTION, KotlinTarget.PROPERTY, KotlinTarget.CLASS)<EOL>"}
{"signature": "val makeConfigurationProvider =", "body": "configurationProvider?.let { { it } }<EOL>"}
{"signature": "val isolatingGenerated =", "body": "mutableSetOf<File>()<EOL>"}
{"signature": "val localsCount =", "body": "frame.locals<EOL>"}
{"signature": "fun startBuildSession(buildUid: String) {", "body": "<EOL><INDENT><INDENT>buildSession = BuildSession(buildUid)<EOL><INDENT>}"}
{"signature": "val wasmWasi =", "body": "platforms[WasmTarget.WASI]!!<EOL>"}
{"signature": "when (actualHasDenotableType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>true -> append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>false -> append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun scheduleForRemoval(declaration: IrDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>scheduledForRemoval += declaration<EOL><INDENT><INDENT>}"}
{"signature": "if (thisIsBuiltInsModule) {", "body": "<EOL><INDENT><INDENT><INDENT>builtIns.builtInsModule = context.module<EOL><INDENT><INDENT><INDENT>additionalPackages += functionInterfacePackageFragmentProvider(context.storageManager, context.module)<EOL><INDENT><INDENT>}"}
{"signature": "fun initProject(project: TestProject) {", "body": "<EOL><INDENT><INDENT><INDENT>project.addArchivesBaseNameCompat(oldName)<EOL><INDENT><INDENT>}"}
{"signature": "val collectedExceptions =", "body": "mutableListOf<Exception>()<EOL>"}
{"signature": "import te.", "body": "st.a.`Test$`.`Inner$` as MyInner<NUM_LIT><EOL>"}
{"signature": "val unsubstitutedKtSignature =", "body": "targetSymbol.toKtSignature()<EOL>"}
{"signature": "val elseNode =", "body": "context.extractNode(expression.elseExpression) ?: return null<EOL>"}
{"signature": "val CompositeProjectComponentArtifactMetadata =", "body": "<EOL><INDENT>Class.forName(<STR_LIT>)<EOL>"}
{"signature": "fun topFoo(@ANNOTATION param: Int) {", "body": "<EOL>}"}
{"signature": "fun add(diagnostic: KtDiagnosticFactory<NUM_LIT>, creator: KtFirDiagnostic<NUM_LIT>Creator) {", "body": "<EOL><INDENT><INDENT>conversions[diagnostic] = creator<EOL><INDENT>}"}
{"signature": "val oldContainer =", "body": "container<EOL>"}
{"signature": "fun bar(x: MutableList<String>) {", "body": "<EOL><INDENT>x.removeFirst()<EOL><INDENT>x.removeLast()<EOL>}"}
{"signature": "val candidateWithWrappedIntegerOperator =", "body": "candidates.firstOrNull { it.symbol.isWrappedIntegerOperator() }<EOL>"}
{"signature": "val sourceMapFileName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun registerIgnore(testCases: Collection<TestCase>) {", "body": "<EOL><INDENT><INDENT>total += testCases.size<EOL><INDENT><INDENT>_ignoredTests.addAll(testCases)<EOL><INDENT>}"}
{"signature": "val comparisonGenerator =", "body": "getComparisonGeneratorForRangeContainsCall(codegen, rangeContainsTypeInfo)<EOL>"}
{"signature": "if (substitutionMap == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>traceForProvideDelegate.record(PROVIDE_DELEGATE_RESOLVED_CALL, variableDescriptor, provideDelegateResults.resultingCall)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>traceForProvideDelegate.commit()<INDENT><INDENT><INDENT><INDENT> }"}
{"signature": "val globalContext =", "body": "ParcelSerializer.ParcelSerializerContext(codegen.typeMapper, containerAsmType, emptyList(), frameMap)<EOL>"}
{"signature": "val public_in_class_b =", "body": "{ TestPublic().boo() + TestPublic().boo(<NUM_LIT>) }<EOL>"}
{"signature": "val lightTreeComparingModeEnabled =", "body": "FirDiagnosticsDirectives.COMPARE_WITH_LIGHT_TREE in currentModule.directives<EOL>"}
{"signature": "val qualifiedProperty =", "body": "propertyReferenceExpression.getQualifiedElement() as? KtDotQualifiedExpression ?: return<EOL>"}
{"signature": "val compiledClasses =", "body": "tmp.newFolder(<STR_LIT>)<EOL>"}
{"signature": "val rightDfv =", "body": "rightValue.toDataFlowValue(builtIns)<EOL>"}
{"signature": "val hashSuffix =", "body": "<STR_LIT><EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.parameterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.parameterAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "if (nonTrivialUnfulfilled.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val classDescriptor =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(descriptor as? TypeAliasDescriptor)?.expandedType?.constructor?.declarationDescriptor as? ClassDescriptor<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: (descriptor as ClassDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Errors.NO_ACTUAL_CLASS_MEMBER_FOR_EXPECTED_CLASS.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reportOn, classDescriptor, nonTrivialUnfulfilled<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val javaSymbol =", "body": "context.session.javaSymbolProvider?.getClassLikeSymbolByClassId(declaration.classId) ?: return<EOL>"}
{"signature": "val mismatchReportType =", "body": "<STR_LIT><EOL>"}
{"signature": "val visitedLibs =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "if (removeComments && tree != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>map.removeComment(tree)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (j in packageNames.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val b = packageNames[j]<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(i >= j, a.startsWith(b))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (elem in it) {", "body": "<EOL><INDENT><INDENT><INDENT>sb.append(elem)<EOL><INDENT><INDENT>}"}
{"signature": "for (subGraph in subGraphs) {", "body": "<EOL><INDENT><INDENT><INDENT>subGraph.completePostponedNodes()<EOL><INDENT><INDENT>}"}
{"signature": "fun renderTo(appendable: Appendable, importCollector: ImportCollecting) {", "body": "<EOL><INDENT><INDENT>appendable.append(name)<EOL><INDENT><INDENT>renderNullabilityTo(appendable)<EOL><INDENT>}"}
{"signature": "fun TestDifferencesInInternalAndPublicVisibilitiesB() {", "body": "}<EOL><EOL>class TestDifferencesInInternalAndPublicVisibilitiesBReverse {<EOL><INDENT>public constructor()<EOL>}"}
{"signature": "val receiverCanBeNull =", "body": "receiverDataFlowValue != null && initialDataFlowInfoForArguments.getStableNullability(receiverDataFlowValue).canBeNull()<EOL>"}
{"signature": "fun X(x: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>X(x + <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>X(x)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var superCallIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (symbol == irBuiltins.dataClassArrayMemberHashCodeSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>overloadSymbol = symbols.findContentHashCodeOverload(argumentType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>returnType = irBuiltins.intType<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val clashed =", "body": "stableNames.collectNameClashesWith(symbol).takeIf { it.isNotEmpty() } ?: continue<EOL>"}
{"signature": "val arrayProperties =", "body": "CompilerArgumentsContentProspector.getArrayCompilerArgumentProperties(T::class)<EOL>"}
{"signature": "val evals =", "body": "<NUM_LIT><EOL>"}
{"signature": "val expectedFiles =", "body": "expected.listFiles().orEmpty()<EOL>"}
{"signature": "val BASE_PACKAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "var skipPrereleaseCheck =", "body": "false<EOL>"}
{"signature": "val externalDependenciesFile =", "body": "findParameterInOutput(<STR_LIT>, output)?.let(::File)<EOL>"}
{"signature": "if (result != null && isStable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtSmartCastedReceiverValue(result, smartcastType.coneType.asKtType())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun f<NUM_LIT>(s: String?) {", "body": "<EOL><INDENT>if (s!! == <STR_LIT>);<EOL><INDENT>checkSubtype<String>(s)<EOL>}"}
{"signature": "if (!symbol.hasJvmFieldAnnotation(session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var mainKtCacheModified =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun identityWithImplicitBoxing(a: Int, b: Any?) {", "body": "<EOL><INDENT><!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a === b<!><EOL>}"}
{"signature": "if (headerOnly) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val errorLevel =", "body": "extractDslMarkerFqNames(receiver.type)<EOL>"}
{"signature": "fun VarArgsCaller() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>VarArgsFirst()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isEnum && isGetEntriesMethod(psiMethod)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@mapNotNull getEnumEntriesPsiMethod(this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var myFirst =", "body": "first<EOL>"}
{"signature": "fun takeExtractsTheFirstNElements() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>), fibonacci().take(<NUM_LIT>).toList())<EOL><INDENT>}"}
{"signature": "val hint<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val failedBrowsers =", "body": "failedBrowsers<EOL>"}
{"signature": "fun localFunction(msg: String) {", "body": "obj.status = msg }"}
{"signature": "val sourceArguments =", "body": "sourceFile?.let { listOf(<STR_LIT>, sourceFile.absolutePath) } ?: emptyList()<EOL>"}
{"signature": "var copyJsLibraryFiles =", "body": "true<EOL>"}
{"signature": "val objCClassName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (superName == null || <STR_LIT> == superName || this.isEnum && <STR_LIT> == superName) {", "body": "<EOL><INDENT><INDENT><INDENT>newReferenceList(JavaStubElementTypes.EXTENDS_LIST, this, ArrayUtil.EMPTY_STRING_ARRAY)<EOL><INDENT><INDENT>}"}
{"signature": "var boundReferenceReceiverParameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (property?.isTopLevelDeclaration == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.scheduleForRemoval()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var valueIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (flags.kind == ClassKind.ANNOTATION_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Modality.OPEN<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (diagnostic !is KtPsiDiagnostic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val range = DiagnosticUtils.firstRange(diagnostic.textRanges)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add(range.startOffset)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add(range.endOffset)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val implementationMember =", "body": "delegation ?: implementations.singleOrNull() ?: return<EOL>"}
{"signature": "var hasQuestionMarkAtLHS =", "body": "false<EOL>"}
{"signature": "val klassId =", "body": "(klass as? KClassImpl<*>)?.typeData?.typeId ?: return null<EOL>"}
{"signature": "val irValue =", "body": "expression.symbol.owner<EOL>"}
{"signature": "while (traverseOnce(visitor, nodeMap)) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val oldStart =", "body": "startLabel<EOL>"}
{"signature": "val intListMax =", "body": "intList.maxByOrNull { it } ?: <NUM_LIT><EOL>"}
{"signature": "val goldenFilePath =", "body": "getGoldenFilePath(description.className, description.methodName)<EOL>"}
{"signature": "when (containingDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtFirNamedClassOrObjectSymbol -> processOverrides(containingDeclaration, callableSymbol, process)<EOL><INDENT><INDENT><INDENT>is KtFirAnonymousObjectSymbol -> processOverrides(containingDeclaration, callableSymbol, process)<EOL><INDENT><INDENT><INDENT>else -> throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "else if (c == '\\\\') {", "body": "<EOL><INDENT><INDENT><INDENT>return normalizeTail(i, path, separator)<EOL><INDENT><INDENT>}"}
{"signature": "import j.", "body": "Base<EOL>"}
{"signature": "val pluginPresenceService =", "body": "project.getService(KtCompilerPluginsProvider::class.java)<EOL>"}
{"signature": "fun testLanguageVersionChanged() {", "body": "<EOL><INDENT><INDENT>languageOrApiVersionChanged(CommonCompilerArguments::languageVersion)<EOL><INDENT>}"}
{"signature": "val originalPositions =", "body": "mutableMapOf<KtModule, Int>()<EOL>"}
{"signature": "if (insn is LabelNode) {", "body": "<EOL><INDENT><INDENT><INDENT>result[insn.label] = currentLineNumber<EOL><INDENT><INDENT>}"}
{"signature": "if (InlineClassDescriptorResolver.isSynthesizedBoxMethod(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return BOX_JVM_METHOD_NAME<EOL><INDENT><INDENT>}"}
{"signature": "val builderCalleeExpression =", "body": "context.call.calleeExpression<EOL>"}
{"signature": "val lhsIsNotNullable =", "body": "!lhs.type.isNullable()<EOL>"}
{"signature": "fun testDelegatedAtomicLong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, l)<EOL><INDENT><INDENT>_l.getAndIncrement()<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, l)<EOL><INDENT><INDENT>l = <NUM_LIT><EOL><INDENT><INDENT>assertTrue(_l.compareAndSet(<NUM_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, _l.value)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, l)<EOL><INDENT>}"}
{"signature": "val files =", "body": "generatedDts.map { it.absolutePath }<EOL>"}
{"signature": "val classStub =", "body": "buildClassStub(StubOrigin.ObjCClass(clazz, isMeta = false), companion)<EOL>"}
{"signature": "val elvisBinaryExpression =", "body": "resolvedCall.call.callElement as? KtBinaryExpression ?: return<EOL>"}
{"signature": "fun foo(jsObject: dynamic) {", "body": "<EOL><INDENT>jsObject.dynamic<caret>PropertyAccess<EOL>}"}
{"signature": "fun reportLoopErrorRefs(classLikeDeclaration: FirClassLikeDeclaration, supertypeRefs: List<FirResolvedTypeRef>) {", "body": "<EOL><INDENT><INDENT>supertypeStatusMap[classLikeDeclaration] = SupertypeComputationStatus.Computed(supertypeRefs)<EOL><INDENT>}"}
{"signature": "fun markAlive(varIndex: Int) {", "body": "<EOL><INDENT><INDENT>bitSet.set(varIndex, true)<EOL><INDENT>}"}
{"signature": "if (!added && current == from) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val G_<NUM_LIT>_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "if (minimizedMemberNames && !function.hasStableJsName(context)) {", "body": "<EOL><INDENT><INDENT><INDENT>function.parentAsClass.fieldData()<EOL><INDENT><INDENT><INDENT>context.minimizedNameGenerator.nameBySignature(signature)<EOL><INDENT><INDENT>}"}
{"signature": "if (x<NUM_LIT> !is X) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (!argInfo.isCertain) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>bitMaskConstant = bitMaskConstant or ParamState.Uncertain.bitsForSlot(slot)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (discriminateGenerics) {", "body": "<EOL><INDENT><INDENT><INDENT>val isGeneric<NUM_LIT> = call<NUM_LIT>isGeneric<EOL><INDENT><INDENT><INDENT>val isGeneric<NUM_LIT> = call<NUM_LIT>isGeneric<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (isGeneric<NUM_LIT> && !isGeneric<NUM_LIT>) return false<EOL><INDENT><INDENT><INDENT>if (!isGeneric<NUM_LIT> && isGeneric<NUM_LIT>) return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (isGeneric<NUM_LIT> && isGeneric<NUM_LIT>) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(aImpl: AImpl) {", "body": "<EOL><INDENT>val a: A = aImpl<EOL><INDENT>(a <!USELESS_CAST!>as A<!>).b().bar()<INDENT> a.b().bar() }"}
{"signature": "val outerClass =", "body": "jClass.outerClass ?: return simpleName<EOL>"}
{"signature": "if (!targetType.isSubtypeOf(expectedType, context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>val reportElement = annotationCall.typeArguments.singleOrNull()?.source ?: annotationCall.source<EOL><INDENT><INDENT><INDENT>reporter.reportOn(reportElement, KtErrorsParcelize.PARCELER_TYPE_INCOMPATIBLE, parcelerType, targetType, context)<EOL><INDENT><INDENT>}"}
{"signature": "var someListOfLongs =", "body": "mutableListOf<Long>(<NUM_LIT>L)<EOL>"}
{"signature": "val kotlinCompilerArgumentsLogLevel =", "body": "project.kotlinPropertiesProvider.kotlinCompilerArgumentsLogLevel<EOL>"}
{"signature": "package is `root<NUM_LIT>root<NUM_LIT>`<EOL>.", "body": ""}
{"signature": "if (expressionType is AbbreviatedType) {", "body": "<EOL><INDENT><INDENT><INDENT>upperBoundChecker.checkBoundsOfExpandedTypeAlias(expressionType.expandedType, expression, c.trace)<EOL><INDENT><INDENT>}"}
{"signature": "if (temp is <!IS_ENUM_ENTRY!>Color.RED<!>) {", "body": "<EOL><INDENT><INDENT>return temp as Color.<!ENUM_ENTRY_AS_TYPE!>RED<!><EOL><INDENT>}"}
{"signature": "for (si in <NUM_LIT>.s.length - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>result[i++] = s[si].code.toByte()<EOL><INDENT><INDENT>}"}
{"signature": "val disabledPhases =", "body": "phaseSetFromArguments(phases, namesOfDisabled, report)<EOL>"}
{"signature": "val arrayFqn =", "body": "StandardNames.FqNames.array.toSafe()<EOL>"}
{"signature": "val resolutionCandidates =", "body": "givenCandidates.map { candidateFactory.createCandidate(it).forceResolution() }<EOL>"}
{"signature": "for(i in <NUM_LIT>.contextReceiverTypeIdCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeById(getContextReceiverTypeId(i)).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(JsProtoBuf.propertySetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(JsProtoBuf.propertySetterAnnotation, i), new.getExtension(JsProtoBuf.propertySetterAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firLoopVarStmt =", "body": "loopBodyStatements.firstOrNull()<EOL>"}
{"signature": "package parts<EOL>.", "body": ""}
{"signature": "if (!ktFiles.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>LoadDescriptorUtil.compileKotlinToDirAndGetModule(ktFiles, outDir, environment)<EOL><INDENT><INDENT>}"}
{"signature": "val cPointerGetRawValueFunName =", "body": "<STR_LIT><EOL>"}
{"signature": "val paramNamesRecorded =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "fun recordGroup() {", "body": "<EOL><INDENT><INDENT>groups++<EOL><INDENT>}"}
{"signature": "val parentClassLoader =", "body": "parent ?: ServiceLoaderLiteTestWithClassLoader::class.java.classLoader<EOL>"}
{"signature": "val continuationFqName =", "body": "StandardClassIds.Continuation.asSingleFqName()<EOL>"}
{"signature": "var settings =", "body": "container.getChild(JpsKotlinCompilerSettings.ROLE)<EOL>"}
{"signature": "val inlineScopeInfoSuffix =", "body": "substringAfter(INLINE_SCOPE_NUMBER_SEPARATOR)<EOL>"}
{"signature": "if(value is HashMap<*, *>) {", "body": "<EOL><INDENT><INDENT>return Pair(true, value as HashMap<String, Any?>)<EOL><INDENT>}"}
{"signature": "val unspecifiedError =", "body": "<NUM_LIT><EOL>"}
{"signature": "val resolutionErrorMessage =", "body": "<STR_LIT> +<EOL>"}
{"signature": "val layoutContainerDescriptor =", "body": "find(LayoutContainer::class.java.canonicalName)<EOL>"}
{"signature": "val target =", "body": "config.target<EOL>"}
{"signature": "val firExpectedFile =", "body": "testDataFile.withExtension(<STR_LIT>)<EOL>"}
{"signature": "val actualFileContent =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reverseTransformers.foldRight(initialFileContent) { transformer, source -> transformer.revert(file, source) }<EOL>"}
{"signature": "val allQualifiedElements =", "body": "wholeQualifierElement.qualifiedElementsWithSelf<EOL>"}
{"signature": "val JFBiConsumer =", "body": "javaFunction(<STR_LIT>)<EOL>"}
{"signature": "fun serializeTypeParameter(typeParameter: FirTypeParameter, proto: ProtoBuf.TypeParameter.Builder) {", "body": "<EOL><INDENT><INDENT>typeParameter.serializeAnnotations(<EOL><INDENT><INDENT><INDENT>session,<EOL><INDENT><INDENT><INDENT>additionalMetadataProvider,<EOL><INDENT><INDENT><INDENT>annotationSerializer,<EOL><INDENT><INDENT><INDENT>proto,<EOL><INDENT><INDENT><INDENT>protocol.typeParameterAnnotation<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val fileViewProvider =", "body": "psiFile.viewProvider<EOL>"}
{"signature": "val delegatedTypeRef =", "body": "(originalDeclaration as FirConstructor).delegatedConstructor?.constructedTypeRef<EOL>"}
{"signature": "for (base in allFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (file != base) testRelativeTo(null, file, base)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeX =", "body": "mockClassType(<STR_LIT>)<EOL>"}
{"signature": "if (newProtoData == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val (fqNames, symbols) = addProtoInfo(protoData, fqName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>dirtyFqNames.addAll(fqNames)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>dirtyLookupSymbols.addAll(symbols)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package names which contain any top-level declaration within the provider's scope.", "body": "<EOL>"}
{"signature": "val allGetters =", "body": "listOfNotNull(specialGetter) + getters.filterNot { it == specialGetter }<EOL>"}
{"signature": "val resultMethod =", "body": "aClass.getDeclaredMethod(<STR_LIT>)<EOL>"}
{"signature": "val specificCallSite =", "body": "storage.filterKeys { it != null } as Map<AnnotationUseSiteTarget, List<DeprecationInfoProvider>><EOL>"}
{"signature": "if (!mockJdkRuntimeJar.exists()) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (s in <!ITERATOR_ON_NULLABLE!>other<!>) {", "body": "}"}
{"signature": "fun runLlvmTool(args: Array<String>) {", "body": "<EOL><INDENT>val toolName = args[<NUM_LIT>]<EOL><INDENT>val toolArguments = args.drop(<NUM_LIT>)<EOL><EOL><INDENT>val platform = platformManager().hostPlatform<EOL><INDENT>val llvmHome = platform.configurables.absoluteLlvmHome<EOL><EOL><INDENT>val toolPath = <STR_LIT><EOL><EOL><INDENT>runCommand(toolPath, *toolArguments.toTypedArray())<EOL>}"}
{"signature": "val errorListener =", "body": "makeErrorListener(sourceFile)<EOL>"}
{"signature": "if (exitValue != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>$commandString\\<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val switchNode =", "body": "TableSwitchInsnNode(min, max, getNew(dflt))<EOL>"}
{"signature": "val firstLocalId =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>function.locals.lastOrNull()?.id?.plus(<NUM_LIT>) ?: <NUM_LIT><EOL>"}
{"signature": "val NON_REPORTING =", "body": "<EOL><INDENT><INDENT><INDENT>TypeAliasExpander(TypeAliasExpansionReportStrategy.DO_NOTHING, false)<EOL>"}
{"signature": "if (candidateDescriptor.typeParameters.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val concreteClasses =", "body": "arrayOfNulls<Node?>(allTypes.size)<EOL>"}
{"signature": "val BEFORE_PREFIX =", "body": "BeforeOrAfter.BEFORE.name<EOL>"}
{"signature": "fun setupEnvironment(environment: KotlinCoreEnvironment) {", "body": "<EOL><INDENT><INDENT>super.setupEnvironment(environment)<EOL><INDENT><INDENT>SyntheticResolveExtension.registerExtension(environment.project, SerializableLike())<EOL><INDENT>}"}
{"signature": "val isAnnotationsGroupedUsingBrackets =", "body": "<EOL><INDENT><INDENT><INDENT>lastAnnotationEntry?.getNextSiblingIgnoringWhitespaceAndComments()?.node?.elementType == KtTokens.RBRACKET<EOL>"}
{"signature": "if (result == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val candidatesToOverride =", "body": "supertypeScopeContext.collectIntersectionResultsForCallables(name, FirScope::processFunctionsByName)<EOL>"}
{"signature": "if (js(<STR_LIT>).captureStackTrace != null) {", "body": "<EOL><INDENT><INDENT>js(<STR_LIT>).captureStackTrace(instance, constructorFunction)<EOL><INDENT>}"}
{"signature": "val directEdgesCount =", "body": "IntArrayList()<EOL>"}
{"signature": "val lambdaScheme =", "body": "argument.toLazyScheme()<EOL>"}
{"signature": "fun test(intArray: IntArray) {", "body": "<EOL><INDENT><INDENT>if (intArray.secondElementX<NUM_LIT> != <NUM_LIT>) throw AssertionError()<EOL><INDENT><INDENT>intArray.secondElementX<NUM_LIT> = <NUM_LIT><EOL><INDENT><INDENT>if (intArray.secondElementX<NUM_LIT> != <NUM_LIT>) throw AssertionError()<EOL><EOL><INDENT><INDENT>if (<NUM_LIT>L.appendDigit<NUM_LIT> != <NUM_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "if (isKotlin<NUM_LIT>Dot<NUM_LIT>OrLater(version)) {", "body": "<EOL><INDENT><INDENT>out.writeInt(flags)<EOL><INDENT>}"}
{"signature": "val flexibleTypeCommonizer =", "body": "FlexibleTypeAssociativeCommonizer(this)<EOL>"}
{"signature": "val dispatchReceiverType =", "body": "expression.receiver?.type<EOL>"}
{"signature": "for (field in A::class.java.getDeclaredFields()) {", "body": "<EOL><INDENT><INDENT>val prop = field.kotlinProperty<EOL><INDENT><INDENT>if (prop != null) return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (baseClass != null && !baseClass.isAny()) {", "body": "<EOL><INDENT><INDENT><INDENT>jsClass.baseClass = baseClassRef<EOL><INDENT><INDENT>}"}
{"signature": "val evaluationConfiguration =", "body": "ScriptEvaluationConfiguration()<EOL>"}
{"signature": "val kType =", "body": "createKType(tp.type)<EOL>"}
{"signature": "val emptyLam =", "body": "{}<EOL>"}
{"signature": "val reportRange =", "body": "nodeToReport.textRange<EOL>"}
{"signature": "fun testMissingStaticClass() {", "body": "<EOL><INDENT><INDENT>doTestBrokenLibrary(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val linesByStatement =", "body": "lineNumbersByStatement.getOrPut(it, ::mutableListOf)<EOL>"}
{"signature": "val childSourceSets =", "body": "<EOL><INDENT><INDENT><INDENT>hierarchy.children.mapNotNull { childHierarchy -> applyKotlinHierarchy(childHierarchy, compilation) }<EOL>"}
{"signature": "val outOfBlockTracker =", "body": "project.createProjectWideOutOfBlockModificationTracker()<EOL>"}
{"signature": "fun report(field: IrField) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>inlineConstTracker?.reportOnIr(irFile, field, result)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val throwsVararg =", "body": "throwsAnnotation.getValueArgument(<NUM_LIT>)<EOL>"}
{"signature": "if (isAtLeastJava<NUM_LIT>()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FileSystems.newFileSystem(rootUri, mapOf(<STR_LIT> to jdkHome.absolutePath))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val suppressedExceptions =", "body": "this.deleteRecursivelyImpl()<EOL>"}
{"signature": "val COCOAPODS_EXTENSION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (testSourceSetsDependOnMainSourceSets) {", "body": "<EOL><INDENT><INDENT><INDENT>nativeTest.dependsOn(nativeMain)<EOL><INDENT><INDENT><INDENT>appleTest.dependsOn(appleMain)<EOL><INDENT><INDENT><INDENT>iosTest.dependsOn(iosMain)<EOL><INDENT><INDENT>}"}
{"signature": "for (checker in checkers.languageVersionSettingsCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.check(data, rawReport)<EOL><INDENT><INDENT>}"}
{"signature": "when(someEnum) {", "body": "<EOL><INDENT>SomeEnum.A -> <STR_LIT><EOL><INDENT>else -> <STR_LIT><EOL>}"}
{"signature": "fun fromInner() {", "body": "<EOL><INDENT><INDENT><INDENT>foo()<INDENT><INDENT><INDENT> bar()<INDENT><INDENT><INDENT> gav()<INDENT><INDENT><INDENT> baz()<INDENT><INDENT> }"}
{"signature": "if (q != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun childAdded(event: PsiTreeChangeEvent) {", "body": "}<EOL><EOL><INDENT>override fun childRemoved(event: PsiTreeChangeEvent) {}"}
{"signature": "fun test<NUM_LIT>(x: TC<Number, List<Int>>) {", "body": "}<EOL>fun test<NUM_LIT>(x: TC<Number, <!UPPER_BOUND_VIOLATED!>List<Any><!>>) {}"}
{"signature": "for (i in from..to) {", "body": "<EOL><INDENT><INDENT>if (c >= <NUM_LIT>) continue@loop<EOL><INDENT><INDENT>c++<EOL><INDENT>}"}
{"signature": "if (firDefaultStatement is FirVariableAssignment && firDefaultStatement.lValue.psi == defaultStatement) {", "body": "<EOL><INDENT><INDENT><INDENT>return computeOrdinaryDefaultType(defaultStatement, firDefaultStatement.lValue)<EOL><INDENT><INDENT>}"}
{"signature": "val absPos =", "body": "pos.calcAbsolute(source)<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Any, s: String) {", "body": "<EOL><INDENT>requreIsInstanceOf(x, s)<EOL><INDENT>x.length<EOL>}"}
{"signature": "fun foooo() {", "body": "<EOL><INDENT><INDENT>testStatic()<EOL><INDENT><INDENT>super.<!INTERFACE_CANT_CALL_DEFAULT_METHOD_VIA_SUPER!>test<!>()<EOL><INDENT><INDENT>testOverride()<EOL><INDENT><INDENT>super.testOverride()<EOL><INDENT>}"}
{"signature": "fun testScriptWhereMethodHasClosure() {", "body": "<EOL><INDENT><INDENT>setUpEnvironment(<STR_LIT>)<EOL><EOL><INDENT><INDENT>val aClass = generateClass(<STR_LIT>)<EOL><INDENT><INDENT>val constructor = aClass.getConstructor(Integer.TYPE)<EOL><INDENT><INDENT>val script = constructor.newInstance(<NUM_LIT>)<EOL><INDENT><INDENT>val fib = aClass.getMethod(<STR_LIT>)<EOL><INDENT><INDENT>val invoke = fib.invoke(script)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, invoke as Int / <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun testJvmPackageName() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (falseWhenString(x) && b) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val kindDiff =", "body": "a.kind.ordinal - b.kind.ordinal<EOL>"}
{"signature": "if (expression.origin == INLINED_FUNCTION_REFERENCE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>saveDeclarationsFromStackIntoRegenerationPool()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (rebuild) {", "body": "<EOL><INDENT><INDENT>libraryCacheDir.deleteRecursively()<EOL><INDENT>}"}
{"signature": "val threadState =", "body": "AtomicInteger(threadStateInitial)<EOL>"}
{"signature": "if (bytesPerLastGroupInLine != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>result += groupSeparatorLength<EOL><INDENT><INDENT><INDENT>result += charsPerSet(charsPerByte, bytesPerLastGroupInLine, byteSeparatorLength)<EOL><INDENT><INDENT>}"}
{"signature": "fun sort( p<NUM_LIT>: java.util.Comparator<in String>) {", "body": "<EOL><INDENT><INDENT>super.sort(p<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun test(array: Array<out Int>) {", "body": "<EOL><INDENT>array.foo()<EOL><INDENT>array.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>foo<!><<!PROJECTION_ON_NON_CLASS_TYPE_ARGUMENT!>out<!> Int>()<EOL>}"}
{"signature": "val setterElement =", "body": "setter?.source?.fakeElement(KtFakeSourceElementKind.DelegatedPropertyAccessor) ?: fakeSource<EOL>"}
{"signature": "fun lombokConfigurationFile(file: File) {", "body": "<EOL><INDENT><INDENT>configurationFile = file<EOL><INDENT>}"}
{"signature": "val suspendMarkerVarIndex =", "body": "methodNode.maxLocals++<EOL>"}
{"signature": "val COMMON_MAIN_SOURCE_SET_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val inferredTypes =", "body": "substitutionMap.values<EOL>"}
{"signature": "fun testBuildMetricsForMppJvm(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testBuildReportInFile(<STR_LIT>, <STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "val maxLines =", "body": "<NUM_LIT><EOL>"}
{"signature": "val originalParameterType =", "body": "substitutedDescriptor.original.valueParameters[index].type<EOL>"}
{"signature": "val shouldActivate =", "body": "rootProject.findProperty(<STR_LIT>)?.toString()?.toBoolean() == true<EOL>"}
{"signature": "if (!callableDescriptor.isEffectivelyFinal(ignoreEnumClassFinality = false)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.DECLARATION_CANT_BE_INLINED_WARNING.on(functionOrProperty))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (result.finallyBlock != null) {", "body": "<EOL><INDENT><INDENT><INDENT>dataFlowAnalyzer.enterFinallyBlock()<EOL><INDENT><INDENT><INDENT>result = result.transformFinallyBlock(transformer, ResolutionMode.ContextIndependent)<EOL><INDENT><INDENT><INDENT>dataFlowAnalyzer.exitFinallyBlock()<EOL><INDENT><INDENT>}"}
{"signature": "fun onItemClick(position: Int) {", "body": "<EOL><INDENT><INDENT>Toast.makeText(this, <STR_LIT> + adapter.getItem(position), LENGTH_SHORT).show()<EOL><INDENT>}"}
{"signature": "if (!false) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun test(foo: A.() -> Int, a: A) {", "body": "<EOL><INDENT>val b: Int = foo(a)<EOL><INDENT>val c: Int = (foo)(a)<EOL>}"}
{"signature": "val generatedFile =", "body": "File(packageDir, <STR_LIT>)<EOL>"}
{"signature": "if (isRefinedInSwift && supersNotRefinedInSwift.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.reportIncompatibleOverride(declarationToReport, descriptor, swiftAnnotations, supersNotRefinedInSwift)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(x: Final) {", "body": "<EOL><INDENT>x.foo<EOL>}"}
{"signature": "val ARRAY_COPY =", "body": "<STR_LIT><EOL>"}
{"signature": "val colonOrEmpty =", "body": "if (text.isEmpty()) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val checkTypeProp =", "body": "prop<EOL>"}
{"signature": "if (javaMethod.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>containingClassForStaticMemberAttr = classId.toLookupTag()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (name == label) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>found = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (radix in digit + <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>testEquals(digit, char, radix)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>testEquals(digit, lower, radix)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (CFGNode.killEdge(node, next, propagateDeadness = false) && !kind.isBack && kind.usedInCfa) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>next.updateDeadStatus()<EOL><INDENT><INDENT><INDENT><INDENT>propagateDeadnessForward(next)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CLASSFILE_STUB_VERSION =", "body": "BINARY_STUB_VERSION + <NUM_LIT><EOL>"}
{"signature": "val sizeSince =", "body": "if (thisKind.isFloatingPoint) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val dispatchReceiverFromDescriptor =", "body": "descriptor.dispatchReceiverParameter<EOL>"}
{"signature": "fun testMissingDependencySimple() {", "body": "<EOL><INDENT><INDENT>doTestBrokenLibrary(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val versionArgumentName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "for (it in data.asSequence()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (filterLoad(it))<EOL><INDENT><INDENT><INDENT><INDENT>count++<EOL><INDENT><INDENT>}"}
{"signature": "val peakRSSChecker =", "body": "PeakRSSChecker(<NUM_LIT>_<NUM_LIT>_<NUM_LIT>L)<EOL>"}
{"signature": "package plugins.", "body": "publishing<EOL>"}
{"signature": "val hasComposableAnnotation =", "body": "descriptor.hasComposableAnnotation()<EOL>"}
{"signature": "while (readySubmittersCounter.value != numberOfSubmitters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val frontend =", "body": "FrontendKinds.fromString(option)<EOL>"}
{"signature": "var useFastJarFileSystem =", "body": "false<EOL>"}
{"signature": "val testJvmFieldObjectVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (slot == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val __value =", "body": "<NUM_LIT><EOL>"}
{"signature": "val newPositionHolder =", "body": "PositionHolder()<EOL>"}
{"signature": "val kotlinDirtyFilesHolder =", "body": "KotlinDirtySourceFilesHolder(chunk, context, dirtyFilesHolder)<EOL>"}
{"signature": "for (i in a downTo M) {", "body": "<EOL><INDENT><INDENT>n++<EOL><INDENT>}"}
{"signature": "if (type is WasmRefNullType) {", "body": "<EOL><INDENT><INDENT><INDENT>appendHeapType(type.heapType)<EOL><INDENT><INDENT>}"}
{"signature": "val FILE_PROTOCOL =", "body": "<STR_LIT><EOL>"}
{"signature": "val oldIsInlineFunctionContext =", "body": "isInlineFunctionContext<EOL>"}
{"signature": "val windowStyle =", "body": "NSWindowStyleMaskTitled or NSWindowStyleMaskMiniaturizable or<EOL>"}
{"signature": "if (firstIndex == null || secondIndex == null || firstIndex == secondIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "package OpenInheritedMethodClashedWithChildMethodJsName<EOL>.", "body": ""}
{"signature": "val serializerA =", "body": "TestAbstract.A.serializer()<EOL>"}
{"signature": "if (!dryRun) {", "body": "<EOL><INDENT><INDENT><INDENT>GeneratorsFileUtil.writeFileIfContentChanged(testSourceFile, generatedCode, false)<EOL><INDENT><INDENT>}"}
{"signature": "if (a === Variance.IN_VARIANCE && b === Variance.OUT_VARIANCE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return STAR<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val anon =", "body": "object : <!SEALED_SUPERTYPE_IN_LOCAL_CLASS(<STR_LIT>)!>SealedInterface<!> {}<EOL>"}
{"signature": "val allReportedInfos =", "body": "globalMetadataInfoHandler.getReportedMetaInfosForFile(file)<EOL>"}
{"signature": "val STRING_INDEXES_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val typesToCapture =", "body": "getTypesToCapture(type.lowerBound) + getTypesToCapture(type.upperBound)<EOL>"}
{"signature": "fun testRandomStringArgumentsJS() {", "body": "<EOL><INDENT><INDENT>doRandomStringArgumentsTest<K<NUM_LIT>JSCompilerArguments>()<EOL><INDENT>}"}
{"signature": "val hex =", "body": "it.toUByte().toString(<NUM_LIT>)<EOL>"}
{"signature": "if (example.ns.y is Int) {", "body": "<EOL><INDENT><INDENT>b = example.ns.y<EOL><INDENT>}"}
{"signature": "val prev<NUM_LIT> =", "body": "prev.previousMeaningful() ?: continue<EOL>"}
{"signature": "fun constructPointedType(valueType: KotlinType): KotlinClassifierType<EOL><EOL><INDENT>class Primitive(override val bridgedType: BridgedType, val varClass: Classifier) : TypeInfo() {", "body": "<EOL><EOL><INDENT><INDENT>override fun argToBridged(expr: KotlinExpression) = expr<EOL><INDENT><INDENT>override fun argFromBridged(expr: KotlinExpression, scope: KotlinScope, nativeBacked: NativeBacked) = expr<EOL><EOL><INDENT><INDENT>override fun constructPointedType(valueType: KotlinType) = varClass.typeWith(valueType)<EOL><INDENT>}"}
{"signature": "if (firElement is FirReceiverParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>firElement.typeRef<EOL><INDENT><INDENT>}"}
{"signature": "val metaFiles =", "body": "files.filter { it.name.endsWith(<STR_LIT>) }<EOL>"}
{"signature": "val tempIndex =", "body": "createTmpVariable(irGet(index))<EOL>"}
{"signature": "if (isFloat<NUM_LIT>RangeEnforced) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, Float.fromBits(value.toBits()))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, Float.fromBits(value.toRawBits()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitFunctionReference(expression: IrFunctionReference) {", "body": "<EOL><INDENT><INDENT>expression.symbol = resolver.getReferencedFunction(expression.symbol)<EOL><INDENT><INDENT>expression.reflectionTarget = expression.reflectionTarget?.let(resolver::getReferencedFunction)<EOL><INDENT><INDENT>visitElement(expression)<EOL><INDENT>}"}
{"signature": "if (a == null && throw Exception()) {", "body": "<EOL><INDENT><INDENT>a.foo()<EOL><INDENT>}"}
{"signature": "var continuationChanged =", "body": "true<EOL>"}
{"signature": "for (i in <NUM_LIT> downTo <NUM_LIT>L step it) {", "body": "sb.append(i) }"}
{"signature": "val BINARY_LAYOUT_NODE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val extractedConditions =", "body": "tryExtractEqEqNumberConditions(symbols, conditions) ?: return false<EOL>"}
{"signature": "fun addClass(classId: ClassId) {", "body": "<EOL><INDENT><INDENT><INDENT>classMembers.remove(classId)<EOL><INDENT><INDENT><INDENT>classes.add(classId)<EOL><INDENT><INDENT>}"}
{"signature": "val pseudocode =", "body": "value.createdAt?.owner ?: return AllTypes<EOL>"}
{"signature": "val sortedAdaptersPointer =", "body": "staticData.placeGlobalConstArray(<STR_LIT>, type, sortedAdapters)<EOL>"}
{"signature": "val sourceSetBMetadataFile =", "body": "metadataOutputDirectory.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (implementation != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return implementation.symbol<EOL><INDENT><INDENT>}"}
{"signature": "val firSubjectSource =", "body": "this.toKtPsiSourceElement(KtFakeSourceElementKind.WhenGeneratedSubject)<EOL>"}
{"signature": "if (nameExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT>nameExpression.replace(KtPsiFactory(project).createLiteralStringTemplateEntry(name))<EOL><INDENT><INDENT>}"}
{"signature": "val stubSerializer =", "body": "declaredField.get(null) as? ObjectStubSerializer<*, *> ?: continue<EOL>"}
{"signature": "when (val y<NUM_LIT>t: T = foo) {", "body": "}"}
{"signature": "fun useVariable(name: JsName) {", "body": "<EOL><INDENT><INDENT>usages[name] = (usages[name] ?: <NUM_LIT>) + <NUM_LIT><EOL><INDENT>}"}
{"signature": "val illegalArgumentExceptionSymbol =", "body": "<EOL><INDENT><INDENT>defineOperator(BuiltInOperatorNames.ILLEGAL_ARGUMENT_EXCEPTION, nothingType, listOf(stringType))<EOL>"}
{"signature": "var varNull =", "body": "null<EOL>"}
{"signature": "val charArraySerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelCreateCharArray, symbols.parcelWriteCharArray)<EOL>"}
{"signature": "val ARGS_ATTR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this is FirSimpleFunctionBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this.contractDescription = it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (this is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT>return propertyKind(usageModule, languageVersionSettings)<EOL><INDENT>}"}
{"signature": "val nativeSourceSets =", "body": "sourceSets.filter { sourceSet -> sourceSet.internal.commonizerTarget.await() != null }<EOL>"}
{"signature": "fun report(severity: ReportSeverity, message: String) {", "body": "<EOL><INDENT>}"}
{"signature": "if (eventOccurrencesRange.canBeRevisited()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>builder.nondeterministicJump(beforeDeclaration, lambdaFunctionLiteral, null)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!classId.isNestedClass && !classId.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.state.classesInPackage.getOrPut(classId.packageFqName, ::mutableSetOf).add(classId.shortClassName)<EOL><INDENT><INDENT><INDENT><INDENT>data.state.classifierInPackage.getOrPut(classId.packageFqName, ::mutableSetOf).add(classId.shortClassName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import a JavaScript object<EOL>.", "body": ""}
{"signature": "val MEM_SIZE =", "body": "size / SIZE<EOL>"}
{"signature": "fun bar(atomicfu$getter: () -> T, atomicfu$setter: (T) -> Unit) {", "body": "... }"}
{"signature": "if (nameFilter(shortName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.addIfNotNull(getPackage(shortName))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val historyFromDelegate =", "body": "delegate.historyFilesForChangedFiles(changedFiles)<EOL>"}
{"signature": "fun test(java<NUM_LIT>: Java<NUM_LIT>, l: List<*>) {", "body": "<EOL><INDENT>java<NUM_LIT>removeAll(l)<EOL>}"}
{"signature": "val ktSubject =", "body": "whenExpression.subjectExpression ?: return null<EOL>"}
{"signature": "val ectorOuter =", "body": "outerLambda.getEnclosingConstructor()<EOL>"}
{"signature": "val isNativeDistributionKey =", "body": "extrasKeyOf<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "fun importStarUse() {", "body": "<EOL><INDENT>A()<EOL>}"}
{"signature": "val resultSize =", "body": "size - n<EOL>"}
{"signature": "val disabledFeaturesFromUnsupportedVersions =", "body": "mutableListOf<LanguageFeature>()<EOL>"}
{"signature": "val firExpr =", "body": "annotationInfo.annotationMethodsDefaultValues[signature]<EOL>"}
{"signature": "if (kotlinOrigin != null || other.kotlinOrigin != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return other.kotlinOrigin == kotlinOrigin<EOL><INDENT><INDENT>}"}
{"signature": "val libraryLoader =", "body": "DefaultNativeLibraryLoader(logger)<EOL>"}
{"signature": "fun setSecondPauseStartTime(value: Long) {", "body": "<EOL><INDENT><INDENT>secondPauseStartTimeNs = value<EOL><INDENT>}"}
{"signature": "fun useListOfA(a: List<A>) {", "body": "}<EOL>fun useListOfB(b: List<B>) {}"}
{"signature": "if (this is IrFunctionExpression && originalExpectedType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>recordExpectedLambdaReturnTypeIfAppropriate(expectedType, originalExpectedType)<EOL><INDENT><INDENT>}"}
{"signature": "fun onAnnotations(vararg annotations: KotlinType, handler: RefineScriptCompilationConfigurationHandler) {", "body": "<EOL><INDENT><INDENT>onAnnotations(annotations.asList(), handler)<EOL><INDENT>}"}
{"signature": "fun repeatedAnnotation(annotation: AnnotationDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val annotationEntry = (annotation.source as? KotlinSourceElement)?.psi as? KtAnnotationEntry ?: return<EOL><INDENT><INDENT><INDENT>trace.report(REPEATED_ANNOTATION.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val commonKtFiles =", "body": "commonFiles.map { it.toKtFile(project) }<EOL>"}
{"signature": "package hash to make sure tooling can identify it as such<EOL>.", "body": ""}
{"signature": "if (statement is JsBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>removeDuplicateImports(statement.statements, existingImports, replacements)<EOL><INDENT><INDENT>}"}
{"signature": "if (variants.isEmpty() || applicationPackage.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val JsCode =", "body": "<STR_LIT>.callableId(BASE_JS_PACKAGE)<EOL>"}
{"signature": "val OK_STATUS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (node in nodes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addAllUntilMatchedOrStatement(stack)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val inputExpressions =", "body": "ArrayList<KtExpression>()<EOL>"}
{"signature": "var wasmEnableAsserts =", "body": "false<EOL>"}
{"signature": "if (c.toFloat() != <NUM_LIT>toFloat()) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val propagatedPaths =", "body": "mutableSetOf<FlowPath>()<EOL>"}
{"signature": "fun takeIntFinal(x: Final<Int>) {", "body": "}<EOL>fun takeIntBase(x: Base<Int>) {}"}
{"signature": "val elseBranchResult =", "body": "expression.branches[<NUM_LIT>].result<EOL>"}
{"signature": "val gcUnsafeCall =", "body": "NativeRuntimeNames.Annotations.gcUnsafeCallClassId.asSingleFqName()<EOL>"}
{"signature": "if (target != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>byTarget[target] = element<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val FQNAME_RESOLVE_PACKAGES =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun lastOrNullInEmptyRange() {", "body": "<EOL><INDENT><INDENT>assertNull(UIntRange.EMPTY.lastOrNull())<EOL><INDENT><INDENT>assertNull(ULongRange.EMPTY.lastOrNull())<EOL><INDENT><INDENT>assertNull(UIntProgression.fromClosedRange(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>).lastOrNull())<EOL><INDENT>}"}
{"signature": "fun incrementAndCheckCommands() {", "body": "<EOL><INDENT><INDENT>commandCount++<EOL><INDENT><INDENT>if (commandCount >= environment.configuration.maxCommands) InterpreterTimeOutError().handleUserException(environment)<EOL><INDENT>}"}
{"signature": "fun callMe(x: Int, y: String) {", "body": "<EOL><EOL>}"}
{"signature": "fun tripleHashSet() {", "body": "<EOL><INDENT><INDENT>val s = hashSetOf(Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>), Triple(<NUM_LIT>, <STR_LIT>, <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, s.size)<EOL><INDENT><INDENT>assertTrue(s.contains(t))<EOL><INDENT>}"}
{"signature": "val inNonDefaultLambda =", "body": "inliningContext.isInliningLambda && inliningContext.lambdaInfo !is DefaultLambda<EOL>"}
{"signature": "val firstFailure =", "body": "sourceDependencies.firstOrNull { it.sourceDependencies is ResultWithDiagnostics.Failure }<EOL>"}
{"signature": "val isJumpElement =", "body": "element is KtBreakExpression<EOL>"}
{"signature": "if (!checkRestrictsSuspension(expression, enclosingSuspendFunction, symbol, context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirErrors.ILLEGAL_RESTRICTED_SUSPENDING_FUNCTION_CALL, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (size < <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val vk =", "body": "getK()<EOL>"}
{"signature": "val internalArguments =", "body": "ArrayList<InternalArgument>()<EOL>"}
{"signature": "if (subroutine is KtAnnotationEntry) {", "body": "<EOL><INDENT><INDENT><INDENT>markAnnotationArguments(subroutine)<EOL><INDENT><INDENT>}"}
{"signature": "val compilerOpts =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val FATAL_REPLACEMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "if (packageName.isRoot) {", "body": "<EOL><INDENT><INDENT><INDENT>return context.fragment.scope.declareName(Namer.getRootPackageName())<EOL><INDENT><INDENT>}"}
{"signature": "val primitiveArrayElementTypes =", "body": "primitiveArraysToPrimitiveTypes.mapValues { primitiveTypeToIrType[it.value] }<EOL>"}
{"signature": "val declarationWithParentId =", "body": "FirDeclarationWithParentId(declaration, containingClass?.classId, forceExpect)<EOL>"}
{"signature": "val ALL_NATIVE_DEPENDENCIES =", "body": "<STR_LIT><EOL>"}
{"signature": "val classObjectValue =", "body": "Struct(classObjectType, fields)<EOL>"}
{"signature": "val commonTestData =", "body": "commonMetaInfo[firTestFile] ?: return@map firTestFile to firTestData<EOL>"}
{"signature": "fun assertCompareResult(expectedResult: Int, expectedResultIgnoreCase: Int, v<NUM_LIT>: String, v<NUM_LIT>: String) {", "body": "<EOL><INDENT><INDENT><INDENT>assertCompareResult(expectedResult, v<NUM_LIT>, v<NUM_LIT>, false)<EOL><INDENT><INDENT><INDENT>assertCompareResult(expectedResultIgnoreCase, v<NUM_LIT>, v<NUM_LIT>, true)<EOL><INDENT><INDENT>}"}
{"signature": "val functionAnalysisResult =", "body": "intraproceduralAnalysisResults[functionSymbol]!!<EOL>"}
{"signature": "fun bar(k: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>foo(I(k))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>foo(J(k))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var isExact =", "body": "false<EOL>"}
{"signature": "fun acceptBoxed(x: Any?) {", "body": "}<EOL>fun acceptFlattened(x: DPoint) {}"}
{"signature": "val branch =", "body": "expression.branches[i]<EOL>"}
{"signature": "fun CannotSkip(a: Int, b: Foo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>used(a)<EOL><INDENT><INDENT><INDENT><INDENT>used(b)<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun writeVarUInt<NUM_LIT>(v: UInt) {", "body": "<EOL><INDENT><INDENT>writeUnsignedLeb<NUM_LIT>(v)<EOL><INDENT>}"}
{"signature": "fun visitAnonymousFunctionExpression(anonymousFunctionExpression: FirAnonymousFunctionExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnonymousFunctionExpression(anonymousFunctionExpression)<EOL><INDENT>}"}
{"signature": "val closureBoxAnyClass =", "body": "getInternalClass(<STR_LIT>)<EOL>"}
{"signature": "val buildType =", "body": "nativeBuildTypeClass.renderShort()<EOL>"}
{"signature": "if (!HostManager().isEnabled(konanTarget)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val initialMaxLocals =", "body": "methodNode.maxLocals<EOL>"}
{"signature": "val STABLE_BRANCH =", "body": "<STR_LIT><EOL>"}
{"signature": "val PRE_RELEASE_WARNING_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (propertyName.staticRef == null && exportedName != propertyName) {", "body": "<EOL><INDENT><INDENT><INDENT>propertyName.staticRef = expression<EOL><INDENT><INDENT>}"}
{"signature": "else if (version != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val anchorFir =", "body": "resolveAndFindFirForAnchor(firElementContainer, anchorElement) ?: return null<EOL>"}
{"signature": "fun visibility(value: String) {", "body": "visibility = value }"}
{"signature": "for (x in e) {", "body": "}"}
{"signature": "fun runUnhandledExceptionHook(throwable: Throwable) {", "body": "<EOL><INDENT>val handler = UnhandledExceptionHookHolder.hook.value ?: throw throwable<EOL><INDENT>handler(throwable)<EOL>}"}
{"signature": "var branchPointDataFlowInfo =", "body": "receiverTypeInfo.dataFlowInfo<EOL>"}
{"signature": "var componentIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val headersCanonicalPaths =", "body": "ownHeaders.map { it?.canonicalPath }.toSet()<EOL>"}
{"signature": "val bodyString =", "body": "privateCtorString + membersString + indent<EOL>"}
{"signature": "for (result in listOf(inf + inf, inf + value, inf + (-value), value + inf, (-value) + inf)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertEquals(inf, result)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import m<NUM_LIT>THashSet<EOL>.", "body": ""}
{"signature": "if (NEED_TO_DOWNLOAD_FLAG) {", "body": "<EOL><INDENT><INDENT><INDENT>downloadAndExtract()<EOL><INDENT><INDENT>}"}
{"signature": "val nodeJs =", "body": "this.kotlinNodeJsExtension<EOL>"}
{"signature": "val firs =", "body": "firSymbolProvider.getTopLevelCallableSymbols(packageFqName, name)<EOL>"}
{"signature": "val AUTOMATIC_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (explicitScriptDefinitions.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>configureScriptDefinitions(<EOL><INDENT><INDENT><INDENT>explicitScriptDefinitions,<EOL><INDENT><INDENT><INDENT>configuration,<EOL><INDENT><INDENT><INDENT>classLoader,<EOL><INDENT><INDENT><INDENT>messageCollector,<EOL><INDENT><INDENT><INDENT>hostConfiguration<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun testICmp(x: ICmp) {", "body": "<EOL><INDENT>if (x.intc.compareTo(<NUM_LIT>) != <NUM_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val valFromOtherModuleCompanion<NUM_LIT> =", "body": "ClassFromOtherModule.valFromOtherModuleCompanion + <STR_LIT><EOL>"}
{"signature": "if (descriptor.isEffectivelyExternal() || (checkJsInterop && descriptor.hasValidJsCodeBody(bindingContext))) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsWasm.WASM_EXPORT_ON_EXTERNAL_DECLARATION.on(wasmExportPsi))<EOL><INDENT><INDENT>}"}
{"signature": "val outputsForSource =", "body": "sourceToOutputMapping.getOrPut(sourceFile) { hashSetOf() }<EOL>"}
{"signature": "if (len > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val a = s[pos + <NUM_LIT>].toUByte()<EOL><INDENT><INDENT>val b = s[pos + len.ushr(<NUM_LIT>)].toUByte()<EOL><INDENT><INDENT>val c = s[pos + len - <NUM_LIT>].toUByte()<EOL><INDENT><INDENT>val y = a + (b.toUInt() shl <NUM_LIT>)<EOL><INDENT><INDENT>val z = len.toULong() + (c.toUInt() shl <NUM_LIT>)<EOL><INDENT><INDENT>return shiftMix(y * k<NUM_LIT> xor z * k<NUM_LIT>) * k<NUM_LIT><EOL><INDENT>}"}
{"signature": "val hasPrefix =", "body": "expressionKind.prefix != null<EOL>"}
{"signature": "fun foo<NUM_LIT>(y: Float, vararg x: Int,) {", "body": "}<EOL><EOL>val foo<NUM_LIT>: (Int, Int,) -> Int = fun(<EOL><INDENT>x,<EOL><INDENT>y,<EOL><INDENT>): Int {<EOL><INDENT>return x + y<EOL>}"}
{"signature": "if (functionDescriptor.isExpect) {", "body": "<EOL><INDENT><INDENT><INDENT>checkExpectedFunction(function, functionDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "import p<NUM_LIT>Parent<EOL>.", "body": ""}
{"signature": "val macroName =", "body": "functionName.removePrefix(CODE_SNIPPET_FUNCTION_NAME_PREFIX)<EOL>"}
{"signature": "val arrayFactorySymbol =", "body": "context.referencePackageFunction(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val ib =", "body": "context.irBuiltIns<EOL>"}
{"signature": "fun declareParameter(parameter: KtParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>add(VariableDeclarationInstruction(parameter, currentScope))<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration in capturingClassesConstructors) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.dispatchReceiverParameter =<EOL><INDENT><INDENT><INDENT><INDENT>declaration.createThisReceiverParameter(context, IrDeclarationOrigin.INSTANCE_RECEIVER, scriptClassReceiver.type)<EOL><INDENT><INDENT>}"}
{"signature": "if (hx < <NUM_LIT>x<NUM_LIT>ff<NUM_LIT>) {", "body": "<INDENT><INDENT><EOL><INDENT><INDENT>return (x - x) / (x - x)<EOL><INDENT>}"}
{"signature": "fun floatToString() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <NUM_LIT>e<NUM_LIT>toFloat().toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.MIN_VALUE.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.MAX_VALUE.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.NEGATIVE_INFINITY.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.POSITIVE_INFINITY.toString())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Float.NaN.toString())<EOL><INDENT>}"}
{"signature": "val classWithUnstableParameterNames =", "body": "newMetadata.readAsKmClass()<EOL>"}
{"signature": "val dirForTestClasses =", "body": "Files.createTempDirectory(<STR_LIT>).toFile()<EOL>"}
{"signature": "var sqrt =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun testCoroutinesDebugMetadata() {", "body": "<EOL><INDENT><INDENT>val usage = module(<STR_LIT>)<EOL><INDENT><INDENT>val (stdout, stderr) = runModule(<STR_LIT>, listOf(usage))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, stderr)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, stdout)<EOL><INDENT>}"}
{"signature": "val interopPackageName =", "body": "NativeStandardInteropNames.cInteropPackage<EOL>"}
{"signature": "val barVarR =", "body": "Z::barVar<EOL>"}
{"signature": "val serverAddr =", "body": "alloc<sockaddr_in>()<EOL>"}
{"signature": "fun repeatPseudocode(startLabel: Label, finishLabel: Label) {", "body": "<EOL><INDENT><INDENT><INDENT>labelCount = pseudocode.repeatPart(startLabel, finishLabel, labelCount)<EOL><INDENT><INDENT>}"}
{"signature": "val numericalMetrics =", "body": "HashMap<MetricDescriptor<NumericalMetrics>, IMetricContainer<Long>>()<EOL>"}
{"signature": "if (!exists) {", "body": "mkdirs() }"}
{"signature": "if (predicate()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.waitingOnPredicate = null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continuation.resume(Unit)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val fmodulesArgs =", "body": "if (fmodules) TestCInteropArgs(<STR_LIT>, <STR_LIT>) else TestCompilerArgs.EMPTY<EOL>"}
{"signature": "val assignableParams =", "body": "declaration.valueParameters.filter { it.isAssignable }<EOL>"}
{"signature": "val SUBSTITUTOR_PREFIX =", "body": "\""}
{"signature": "val incrementalRunner =", "body": "TestRunner(incrementalConfiguration)<EOL>"}
{"signature": "val convertedPointeeType =", "body": "convertType(pointeeType)<EOL>"}
{"signature": "val REF_EQ =", "body": "<STR_LIT><EOL>"}
{"signature": "val attributes =", "body": "hashMapOf(<STR_LIT> to create.toString())<EOL>"}
{"signature": "val DEPENDENCY_ROOTS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val benchmarkOutputDir =", "body": "benchmarkOutputsDir.resolve(projectName)<EOL>"}
{"signature": "if (valueParameter is ValueParameterDescriptorImpl && valueParameter.type.shouldBeUpdated()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>valueParameter.setOutType(it.approximatedType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (containingDeclaration.isExtension) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FirWasmErrors.JSCODE_UNSUPPORTED_FUNCTION_KIND,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val transformResult =", "body": "transformer.doTransform(nodeRemapper)<EOL>"}
{"signature": "val mset =", "body": "mutableSetOf(<STR_LIT>)<EOL>"}
{"signature": "else if (serializableClass.serializableAnnotationIsUseless) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw CompilationException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, null, serializableClass.findPsi()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setProperties(<EOL><INDENT>it: RewriteSourceMapFilterReader,<EOL><INDENT>srcSourceRoot: String,<EOL><INDENT>targetSourceRoot: String<EOL>) {", "body": "<EOL><INDENT>it.srcSourceRoot = srcSourceRoot<EOL><INDENT>it.targetSourceRoot = targetSourceRoot<EOL>}"}
{"signature": "if (!doKtElementHasCorrespondingFirElement(element)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (objCName.exact && (declaration !is FirClass || declaration.classKind == ClassKind.ENUM_ENTRY)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotationSource, INAPPLICABLE_EXACT_OBJC_NAME, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun forceUpdate(myNativeComponent: ReactComponent, callback: () -> Unit) {", "body": "<EOL><INDENT>myNativeComponent.forceUpdate(callback)<EOL>}"}
{"signature": "val originalCalleeReference =", "body": "call.calleeReference<EOL>"}
{"signature": "val firFunction =", "body": "functionSymbol.fir<EOL>"}
{"signature": "if (declaration is KtClassLikeDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>appendLine(declaration.getNameWithPositionString())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (missingExceptionClassRef.isPrimary) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>JsNew(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.translateQualifiedReference(missingExceptionClassRef.containingDeclaration),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(JsStringLiteral(prop.name))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (nextIndex != <NUM_LIT> && count < expectedRepetitionTimes + <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>count++<EOL><INDENT><INDENT>currentOffset = nextIndex + expectedSubString.length<EOL><INDENT><INDENT>nextIndex = output.indexOf(expectedSubString, currentOffset)<EOL><INDENT>}"}
{"signature": "package io.", "body": "realm.examples.kotlin<EOL>"}
{"signature": "val TABLE_SET =", "body": "<STR_LIT><EOL>"}
{"signature": "when (featureTemplatesType) {", "body": "<EOL><INDENT><INDENT><INDENT>FeatureTemplatesType.AS_STRING -> templates!!<EOL><INDENT><INDENT><INDENT>FeatureTemplatesType.AS_FILE -> getTemplateFiles(testArea)<EOL><INDENT><INDENT>}"}
{"signature": "val valueAfter =", "body": "function.getConstantFromExpressionBody()"}
{"signature": "fun visitGetClassCall(getClassCall: FirGetClassCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitGetClassCall(getClassCall)<EOL><INDENT>}"}
{"signature": "for (valueParameter in result.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>valueParameter.moveOrDeleteIrrelevantAnnotations()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun log(lazyMessage: () -> Any?) {", "body": "<EOL><INDENT>lazyMessage()<EOL>}"}
{"signature": "for ((staticReplacement, original) in multiFieldValueClassReplacements.originalFunctionForStaticReplacement) {", "body": "<EOL><INDENT><INDENT><INDENT>if (staticReplacement !is IrSimpleFunction) continue<EOL><INDENT><INDENT><INDENT>val newOriginal = functionSymbolMap[original.symbol]?.owner ?: continue<EOL><INDENT><INDENT><INDENT>val newStaticReplacement = multiFieldValueClassReplacements.getReplacementFunction(newOriginal) ?: continue<EOL><INDENT><INDENT><INDENT>functionSymbolMap[staticReplacement.symbol] = newStaticReplacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "val I<NUM_LIT>_TRUNC_F<NUM_LIT>_S =", "body": "<STR_LIT><EOL>"}
{"signature": "fun bigIntDigitGeneratorInstImpl(f: Long, e: Int,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT> isDenormalized: Boolean, mantissaIsZero: Boolean, p: Int) {", "body": "<EOL><INDENT><INDENT>val results = IntArray(<NUM_LIT>)<EOL><INDENT><INDENT>bigIntDigitGeneratorInstImpl(results, uArray, f, e, isDenormalized, mantissaIsZero, p)<EOL><INDENT><INDENT>setCount = results[<NUM_LIT>]<EOL><INDENT><INDENT>getCount = results[<NUM_LIT>]<EOL><INDENT><INDENT>firstK   = results[<NUM_LIT>]<EOL><INDENT>}"}
{"signature": "val conflictingInterfaceMembers =", "body": "linkedSetOf<CallableMemberDescriptor>()<EOL>"}
{"signature": "val or<NUM_LIT> =", "body": "falseVal.<!EVALUATED(<STR_LIT>)!>or(falseVal)<!><EOL>"}
{"signature": "if (OptimisticNumbersTypeCommonizer.isOptimisticallyCommonizableNumber(classType.classifierId)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isOptimisticallyCommonizableNumberType = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val projectSessionProvider =", "body": "FirProjectSessionProvider()<EOL>"}
{"signature": "if (dispatchReceiverReference !is FirSuperReference) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun syncOptionsAsConvention(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinNativeCompilerOptions,<EOL><INDENT><INDENT>into: org.jetbrains.kotlin.gradle.dsl.KotlinNativeCompilerOptions,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerOptionsHelper.syncOptionsAsConvention(from, into)<EOL><INDENT><INDENT>into.moduleName.convention(from.moduleName)<EOL><INDENT>}"}
{"signature": "val contractAllowedHere =", "body": "<EOL><INDENT><INDENT>(isAllowedOnMembers || isTopLevel) &&<EOL>"}
{"signature": "fun getOrDefault() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Optional.of(<STR_LIT>).getOrDefault(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Optional.empty<String>().getOrDefault(<STR_LIT>))<EOL><EOL><INDENT><INDENT><INDENT><INDENT>assertNull(Optional.empty<String>().getOrDefault(null))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, Optional.empty<Int>().getOrDefault(<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "val JAVA_RUNTIME_CLASSES =", "body": "<STR_LIT><EOL>"}
{"signature": "val otherClassifierLowercase =", "body": "other.classifier.toLowerCase(Locale.ROOT)<EOL>"}
{"signature": "val insertAfterNonNull =", "body": "if (jumpsIfNull) insn else insn.label<EOL>"}
{"signature": "val id =", "body": "wasmFragment.stringLiteralPoolId.reference(string)<EOL>"}
{"signature": "val nextToken =", "body": "tokens.firstOrNull() as? Word ?: return null<EOL>"}
{"signature": "if (wasmTargetType != KotlinWasmTargetType.WASI) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>compilation.npmProject.dir<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONSTANTS_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "for (index in <NUM_LIT>.midPoint) {", "body": "<EOL><INDENT><INDENT>val tmp = this[index]<EOL><INDENT><INDENT>this[index] = this[reverseIndex]<EOL><INDENT><INDENT>this[reverseIndex] = tmp<EOL><INDENT><INDENT>reverseIndex--<EOL><INDENT>}"}
{"signature": "val constructedFromExportedInlineFunctions =", "body": "mutableSetOf<IrClass>()<EOL>"}
{"signature": "val createdClassFieldIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (<!USELESS_IS_CHECK!>x<NUM_LIT> is Foo<<!UNRESOLVED_REFERENCE!>_<!>><!>) {", "body": "}"}
{"signature": "val staticCacheCompilationOptions =", "body": "if (testModule.name == mainTestModule.name)<EOL>"}
{"signature": "if (path.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compiledJavaFiles.add(path)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun checkEqual(a: Any, b: Any) {", "body": "<EOL><INDENT>if (a != b || b != a) throw AssertionError(<STR_LIT>)<EOL><INDENT>if (a.hashCode() != b.hashCode()) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "val extraPaths =", "body": "extraDirs.map { File(dir, it) }<EOL>"}
{"signature": "if ((targets - refinesInSwiftSupportedTargets).isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val reportLocation = DescriptorToSourceUtils.getSourceFromAnnotation(it) ?: declaration<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsNative.INVALID_REFINES_IN_SWIFT_TARGETS.on(reportLocation))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val disambiguationAttribute =", "body": "org.gradle.api.attributes.Attribute.of(<STR_LIT>, String::class.java)<EOL>"}
{"signature": "val deepestTypeWithQualifier =", "body": "typeElement.qualifiedTypesWithSelf.last()<EOL>"}
{"signature": "val isIdeaActive =", "body": "project.readSystemPropertyAtConfigurationTime(<STR_LIT>).isPresent<EOL>"}
{"signature": "fun addBinaryRoots(roots: Collection<Path>) {", "body": "<EOL><INDENT><INDENT>binaryRoots.addAll(roots)<EOL><INDENT>}"}
{"signature": "val expectedStackSizeNodes =", "body": "loopEntryPointMarkers[location] ?: listOf(location)<EOL>"}
{"signature": "package now.", "body": "<EOL>"}
{"signature": "val CONFLICTING_OBJC_OVERLOADS =", "body": "DiagnosticFactory<NUM_LIT>create<PsiElement, Collection<DeclarationDescriptor>>(Severity.ERROR)<EOL>"}
{"signature": "if (find(subDeclaration.declarations, classIdPathIndex + <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val getExpr =", "body": "extra.typeInfo.argFromBridged(readBits, kotlinFile, object : NativeBacked {})<EOL>"}
{"signature": "val constraintTypeConstructor =", "body": "constraint.type.typeConstructor(typeSystemContext)<EOL>"}
{"signature": "package java<NUM_LIT>d<EOL>.", "body": ""}
{"signature": "package in these files:\\n%s\"<EOL>.", "body": ""}
{"signature": "if (hasFailedPreviously) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>task.logger.kotlinInfo(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun quickSort(<EOL><INDENT>array: UByteArray, left: Int, right: Int) {", "body": "<EOL><INDENT>val index = partition(array, left, right)<EOL><INDENT>if (left < index - <NUM_LIT>)<EOL><INDENT><INDENT>quickSort(array, left, index - <NUM_LIT>)<EOL><INDENT>if (index < right)<EOL><INDENT><INDENT>quickSort(array, index, right)<EOL>}"}
{"signature": "val konanTarget =", "body": "task.konanTarget<EOL>"}
{"signature": "var limit =", "body": "input.labyrinth.width + input.labyrinth.height - <NUM_LIT><EOL>"}
{"signature": "val bracket =", "body": "tree.findLastChildByType(blockNode ?: node, KtTokens.RBRACE)<EOL>"}
{"signature": "fun NoParams() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (prev != null) {", "body": "<EOL><INDENT><INDENT><INDENT>holder = holder.minus(slice.key)<EOL><INDENT><INDENT>}"}
{"signature": "val FIR_DUMP_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(i: Int, j: Int) {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE!>foo<!>[i, j]<EOL>}"}
{"signature": "val foreignValueProvider =", "body": "ForeignValueProviderService.getInstance()<EOL>"}
{"signature": "val originalShuffled =", "body": "original.shuffled(Random(seed))<EOL>"}
{"signature": "val allDslMarkersFromCall =", "body": "callDslMarkers + additionalCallDslMarkers<EOL>"}
{"signature": "fun barUseA(a: A) {", "body": "<EOL><INDENT>a.a()<EOL>}"}
{"signature": "when (expression.symbol.owner.origin) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>IrDeclarationOrigin.FUNCTION_FOR_DEFAULT_PARAMETER -> context.mapping.defaultArgumentsOriginalFunction[expression.symbol.owner]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> expression.symbol.owner<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (supertype.isMarkedNullable || subtype.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>return isCastErased(TypeUtils.makeNotNullable(supertype), TypeUtils.makeNotNullable(subtype), typeChecker)<EOL><INDENT><INDENT>}"}
{"signature": "val JAVAX_NONNULL_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val Annotation =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "if (!useK<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>CopyDefaultValuesFromExpectLowering(pluginContext).lower(moduleFragment)<EOL><INDENT><INDENT>}"}
{"signature": "fun takeIntX(value : Int?) {", "body": "}<EOL>fun takeAnyX(value : Any?) {}"}
{"signature": "val storedReference =", "body": "trace.get(REFERENCE_TARGET, calleeExpression)<EOL>"}
{"signature": "val placeholder =", "body": "<STR_LIT><EOL>"}
{"signature": "fun assign(o: StringPropertyWithPlus) {", "body": "<EOL><INDENT><INDENT>this.v = o.get()<EOL><INDENT>}"}
{"signature": "val KOTLIN_JS_YARN =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "fun registerFile(firFile: FirFile, irFile: IrFile) {", "body": "<EOL><INDENT><INDENT>fileCache[firFile] = irFile<EOL><INDENT>}"}
{"signature": "val lambdaPatcher =", "body": "ScriptFixLambdasTransformer(irScriptClass)<EOL>"}
{"signature": "val blockStack =", "body": "mutableListOf<JsBlock>()<EOL>"}
{"signature": "if (descriptor.kind == ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val receiverCopier =", "body": "ExpressionCopierImpl(receiver, scope, saveVariable)<EOL>"}
{"signature": "fun lifetime(body: (Lifetime) -> Unit) {", "body": "<EOL><INDENT>val l = Lifetime()<EOL><INDENT>body(l)<EOL><INDENT>l.close()<EOL>}"}
{"signature": "val codePoints =", "body": "ArrayList<Int>(bmpCodePointsBeforeSurrogates + isolatedSurrogates + bmpCodePointsAfterSurrogates)<EOL>"}
{"signature": "fun register(tClass: KClass<out FirSessionComponent>, value: FirSessionComponent) {", "body": "<EOL><INDENT><INDENT>registerComponent(tClass, value)<EOL><INDENT>}"}
{"signature": "val emptyMutableSetSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>mutableSetOf<Any>().size<!><EOL>"}
{"signature": "if (extendedAnalysisMode) {", "body": "<EOL><INDENT><INDENT><INDENT>registerExtendedCommonCheckers()<EOL><INDENT><INDENT>}"}
{"signature": "if (leftType.isResultType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.reportDiagnosticOnce(Errors.RESULT_CLASS_WITH_NULLABLE_OPERATOR.on(reportOn, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.<size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertEquals((pointer + i).loadByte(), bytes[i])<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (callableReference) {", "body": "<EOL><INDENT><INDENT>is CallableReferenceKotlinCallArgument -> ArgumentConstraintPositionImpl(callableReference)<EOL><INDENT><INDENT>is CallableReferenceKotlinCall -> CallableReferenceConstraintPositionImpl(callableReference)<EOL><INDENT>}"}
{"signature": "if (superSource.treeStructure.getParent(superSource.lighterASTNode)?.tokenType == KtNodeTypes.DELEGATED_SUPER_TYPE_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(superSource, FirErrors.DELEGATION_IN_INTERFACE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val SWIFT_EXPORT_CLASSPATH_RESOLVABLE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (destination != null) {", "body": "<EOL><INDENT><INDENT><INDENT>strongWarning(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (t(<NUM_LIT>) != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val KOTLIN_CLASS =", "body": "setOf(KotlinClassHeader.Kind.CLASS)<EOL>"}
{"signature": "val receiverParameterName =", "body": "JsScope.declareTemporaryName(Namer.getReceiverParameterName())<EOL>"}
{"signature": "for (i in logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "fun take(w: WithGeneric<*>) {", "body": "<EOL><INDENT><INDENT>w.<expr>functionWithGeneric</expr><EOL>}"}
{"signature": "val mavenLocalOverride =", "body": "System.getProperty(<STR_LIT>) ?: return<EOL>"}
{"signature": "if (declaration in elementsToCheckContext) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val collectedContext = PersistenceContextCollector.collectContext(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SessionHolderImpl.createWithEmptyScopeSession(declaration.moduleData.session),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>firFile,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>compareStructurally(context, collectedContext)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testPropertyTypes() {", "body": "<EOL><INDENT><INDENT>val instance<NUM_LIT> = TestPropertyTypes(null, <NUM_LIT>, null, <STR_LIT>, null, false)<EOL><INDENT><INDENT>val deserialized<NUM_LIT> = deserializeFromPlainText<TestPropertyTypes>(serializeToPlainText(instance<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(instance<NUM_LIT>, deserialized<NUM_LIT>)<EOL><EOL><INDENT><INDENT>val instance<NUM_LIT> = TestPropertyTypes(<NUM_LIT>, <NUM_LIT>, <STR_LIT>, <STR_LIT>, true, false)<EOL><INDENT><INDENT>val deserialized<NUM_LIT> = deserializeFromPlainText<TestPropertyTypes>(serializeToPlainText(instance<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(instance<NUM_LIT>, deserialized<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun append(key: KEY, elements: Collection<E>) {", "body": "<EOL><INDENT><INDENT>appendableStorage.append(key, elements)<EOL><INDENT>}"}
{"signature": "for (nestedConstructor in nestedClassConstructors) {", "body": "<EOL><INDENT><INDENT><INDENT>val name = nestedConstructor.containingDeclaration.name<EOL><INDENT><INDENT><INDENT>functionsByName.putValue(name, nestedConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "fun altMain(args: Array<String>) {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT> + <NUM_LIT>)<EOL><INDENT>println(<STR_LIT>)<EOL>}"}
{"signature": "if (currentShouldAnnotateClass && cls.isData) {", "body": "<EOL><INDENT><INDENT><INDENT>cls.addHiddenFromObjCAnnotation()<EOL><INDENT><INDENT><INDENT>hideFromObjCDeclarationsSet?.add(cls)<EOL><INDENT><INDENT>}"}
{"signature": "val buildPath =", "body": "if (slicedProjectPath.size == <NUM_LIT>) slicedProjectPath.first() else <STR_LIT><EOL>"}
{"signature": "if (wasExperimentalFqNames.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>return SinceKotlinAccessibility.NotAccessibleButWasExperimental(version, wasExperimentalFqNames)<EOL><INDENT>}"}
{"signature": "val useSiteFileSymbol =", "body": "mainFile.getFileSymbol()<EOL>"}
{"signature": "fun visitPostfixExpression(expression: KtPostfixExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitPostfixExpression(expression)<EOL><INDENT><INDENT><INDENT>block(expression)<EOL><INDENT><INDENT>}"}
{"signature": "val scoreMeanVariance =", "body": "computeMeanVariance(resultsSet.map { it.score })<EOL>"}
{"signature": "val nodeJsTaskProviders =", "body": "this.kotlinNodeJsExtension<EOL>"}
{"signature": "val annotationsNullability =", "body": "annotationTypeQualifierResolver.extractNullability(composedAnnotation) { forceWarning(type) }<EOL>"}
{"signature": "fun visitDelegatedSuperTypeEntry(delegatedSuperTypeEntry: KtDelegatedSuperTypeEntry) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitDelegatedSuperTypeEntry(delegatedSuperTypeEntry)<EOL><INDENT><INDENT><INDENT>block(delegatedSuperTypeEntry)<EOL><INDENT><INDENT>}"}
{"signature": "val commonMainValue =", "body": "<NUM_LIT><EOL>"}
{"signature": "else if (<NUM_LIT>.n..<n..n) {", "body": "}"}
{"signature": "val listenFd =", "body": "socket(AF_INET, SOCK_STREAM, <NUM_LIT>)<EOL>"}
{"signature": "val preparedBaseType =", "body": "prepareArgumentTypeRegardingCaptureTypes(receiverValue.type.unwrap()) ?: return this<EOL>"}
{"signature": "fun testB(b: B) {", "body": "<EOL><INDENT>call(B::foo)<EOL><INDENT>call(B()::foo)<EOL><INDENT>call(B.Companion::foo)<EOL>}"}
{"signature": "val lazyDefs =", "body": "lazyDefsSeq.toList()<EOL>"}
{"signature": "val enabledModuleMetadataCheckers =", "body": "allModuleMetadataCheckers.filterOutDisabled()<EOL>"}
{"signature": "val packageJsonTaskName =", "body": "npmProject.packageJsonTaskName<EOL>"}
{"signature": "val STDERR =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visitSuperTypeEntry(specifier: KtSuperTypeEntry) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val xCastExplicitType =", "body": "Test().findViewById<X>(<NUM_LIT>) as X<EOL>"}
{"signature": "fun visitAnonymousObject(anonymousObject: FirAnonymousObject, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnonymousObject(anonymousObject)<EOL><INDENT>}"}
{"signature": "fun markJump(extraEndLocation: (IrExpression) -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>hasJump = true<EOL><INDENT><INDENT><INDENT><INDENT>extraEndLocations.push(extraEndLocation)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val LLVM_BITCODE =", "body": "<STR_LIT><EOL>"}
{"signature": "var continueTargets =", "body": "mutableMapOf<JsName, JsStatement?>()<EOL>"}
{"signature": "val leftTokenType =", "body": "left.elementType<EOL>"}
{"signature": "val strField =", "body": "it<EOL>"}
{"signature": "val psiContext =", "body": "containingClass.findLightDeclarationContext(containingDeclaration)<EOL>"}
{"signature": "if (jump is FirReturnExpression && jump.target.labeledElement is FirAnonymousFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>jumpDataFlowFromPostponedLambdas(jump.target.labeledElement.symbol)<EOL><INDENT><INDENT>}"}
{"signature": "if (a == null && platformJ == a) {", "body": "}"}
{"signature": "var hasSwift =", "body": "false<EOL>"}
{"signature": "if (loadingSignature in moduleDeserializer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>moduleDeserializer.addModuleReachableTopLevel(loadingSignature)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (outerClassId != null) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT> val outerFirClassifier = symbolFirSession.firProvider.getFirClassifierByFqName(outerClassId) ?: return null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return firSymbolBuilder.buildSymbol(outerFirClassifier) as? KtDeclarationSymbol<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val hasOptionalParams =", "body": "signature.contains(<STR_LIT>)<EOL>"}
{"signature": "val usableSymbols =", "body": "HashSet<IrClassifierSymbol>()<EOL>"}
{"signature": "val generationStates =", "body": "fragmentsList.map { fragment -> createGenerationStateAndRunLowerings(fragment) }<EOL>"}
{"signature": "val typeParameterStack =", "body": "klass.javaTypeParameterStack<EOL>"}
{"signature": "val KOTLIN_NATIVE_IGNORE_DISABLED_TARGETS =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (lastJumpInsn != null && lastJumpInsn != jumpInsn) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>jumpInsn.label = lastJumpInsn.label<EOL><INDENT><INDENT>}"}
{"signature": "fun add() {", "body": "<EOL><INDENT><INDENT>val item = Item()<EOL><INDENT><INDENT>mItems.add(<NUM_LIT>, item)<EOL><INDENT><INDENT>item.save()<EOL><INDENT><INDENT>notifyItemInserted(<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val platformLikeCompileDependenciesConfiguration =", "body": "project.configurations.detachedResolvable()<EOL>"}
{"signature": "val frontendOutput =", "body": "useContext(FrontendContextImpl(config)) { it.runPhase(FrontendPhase, environment) }<EOL>"}
{"signature": "else if (char<NUM_LIT> < '\\u<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val codePoint = char<NUM_LIT>toInt()<EOL><INDENT><INDENT><INDENT><INDENT>buffer[writtenBytes++] = (codePoint ushr <NUM_LIT>) or <NUM_LIT>b<NUM_LIT>_<NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>buffer[writtenBytes++] = (codePoint and <NUM_LIT>b<NUM_LIT>_<NUM_LIT>) or <NUM_LIT>b<NUM_LIT>_<NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun reset() {", "body": "<EOL><INDENT><INDENT>queue.clear()<EOL><INDENT>}"}
{"signature": "if (arguments.isNotEmpty()) {", "body": "<EOL><INDENT>SymbolLightLazyAnnotationParameterList(this, lazyOf(arguments))<EOL>}"}
{"signature": "if (rewriteLabelInstructions()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>rewriteNonLabelInstructions()<EOL><INDENT><INDENT><INDENT><INDENT>rewriteTryCatchBlocks()<EOL><INDENT><INDENT><INDENT><INDENT>rewriteLocalVars()<EOL><INDENT><INDENT><INDENT><INDENT>methodNode.removeEmptyCatchBlocks()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useA(a: A) {", "body": "<EOL><INDENT>a.f()<EOL>}"}
{"signature": "if (Files.isDirectory(newPath)) {", "body": "<EOL><INDENT><INDENT><INDENT>Files.createDirectories(newPath)<EOL><INDENT><INDENT>}"}
{"signature": "when (proto.annotationCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> return emptySet()<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> return setOf(deserialize(proto.annotationList[<NUM_LIT>]))<EOL><INDENT><INDENT><INDENT><INDENT>else -> proto.annotationList.mapTo(SmartSet.create(), ::deserialize)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val test<NUM_LIT>p<NUM_LIT> =", "body": "P<NUM_LIT><!WRONG_NUMBER_OF_TYPE_ARGUMENTS!><Int, Int, Int><!>(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val SKIP_CACHE_VERSION_CHECK_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testFun() {", "body": "<EOL><INDENT>System.out.println(<STR_LIT>)<EOL>}"}
{"signature": "if (current.right.exists && current.right.value < min.value) {", "body": "<EOL><INDENT><INDENT>min = current.right<EOL><INDENT>  }"}
{"signature": "if (index == EMPTY_INDEX) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw NoSuchElementException()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val emptyByteArray =", "body": "ByteArray(<NUM_LIT>)<EOL>"}
{"signature": "val otherPsiClass =", "body": "other.psi as? PsiClass ?: return symbolEquals(other)<EOL>"}
{"signature": "val firstMachoOffset =", "body": "raf.readInt().fromUIntToLong()"}
{"signature": "val butterknifeJavaClassesDir =", "body": "<STR_LIT><EOL>"}
{"signature": "fun acceptLvalue(expression: JsExpression) {", "body": "<EOL><INDENT><INDENT>accept(expression)<EOL><INDENT>}"}
{"signature": "if (!blockExitNode.isDead) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirErrors.NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY, context)<EOL><INDENT><INDENT>}"}
{"signature": "var companionObjectAlreadyFound =", "body": "false<EOL>"}
{"signature": "fun typeParameterCount() {", "body": "}<EOL><EOL>expect enum class <!EXPECT_AND_ACTUAL_IN_THE_SAME_MODULE!>EnumEntries<!> {<EOL><INDENT>ONE, TWO;<EOL>}"}
{"signature": "package classAssertions<EOL>.", "body": ""}
{"signature": "val VERSIONED_PATH_MARKER =", "body": "<STR_LIT><EOL>"}
{"signature": "if (classDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return ResolvedWidget(this, classDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "fun testCircularDependencyWithReferenceToOldVersionLib() {", "body": "<EOL><INDENT><INDENT>initProject(JVM_MOCK_RUNTIME)<EOL><EOL><INDENT><INDENT>val libraryJar = MockLibraryUtilExt.compileJvmLibraryToJar(workDir.absolutePath + File.separator + <STR_LIT>, <STR_LIT>)<EOL><EOL><INDENT><INDENT>AbstractKotlinJpsBuildTestCase.addDependency(JpsJavaDependencyScope.COMPILE, listOf(findModule(<STR_LIT>), findModule(<STR_LIT>)), false, <STR_LIT>, libraryJar)<EOL><EOL><INDENT><INDENT>val result = buildAllModules()<EOL><INDENT><INDENT>result.assertSuccessful()<EOL><INDENT>}"}
{"signature": "for (i in items) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>P(i)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val otherLowercaseRanges =", "body": "mutableListOf<PropertyLine>()<EOL>"}
{"signature": "fun testDisableDiscoveryInCompileClasspath(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT>}"}
{"signature": "val isArgumentPure =", "body": "isPureConstant(argumentForReceiver.expression)<EOL>"}
{"signature": "fun processFunctionsByName(<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>processor: (FirNamedFunctionSymbol) -> Unit,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>delegate.processFunctionsByName(name, processor)<EOL><INDENT>}"}
{"signature": "fun bar(r: Runnable?) {", "body": "<EOL><INDENT>}"}
{"signature": "package infrastructure.", "body": "testListing.foo<EOL>"}
{"signature": "val expectedMean =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun TestInlineFunctionVsConstructor() {", "body": "}<EOL><EOL>class TestInlineFunctionVsConstructorReverse {<EOL><INDENT>constructor()<EOL>}"}
{"signature": "if (nameReferenceExpression.getReferencedNameElementType() != KtTokens.IDENTIFIER) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return@registerMultiProvider PsiReference.EMPTY_ARRAY<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val settingsFile =", "body": "if (Files.exists(settingsGradle)) settingsGradle else settingsGradleKts<EOL>"}
{"signature": "val conditionsBlock =", "body": "JsBlock()<EOL>"}
{"signature": "for (upperBound in typeParameter.toConeType().collectUpperBounds()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkMissingDependencySuperTypes(upperBound, typeParameter.source, reporter, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun e<NUM_LIT>() {", "body": "}<EOL><EOL>@E<NUM_LIT><EOL>fun e<NUM_LIT>() {}"}
{"signature": "if (typeArgumentDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return typeArgumentDiff<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun noTails() {", "body": "<EOL><INDENT>}"}
{"signature": "val containsCache =", "body": "mutableMapOf<IrDeclaration, Boolean>()<EOL>"}
{"signature": "fun recordLocalDeclaration(local: DeclarationContext) {", "body": "<EOL><INDENT><INDENT>localDeclarationCaptures[local.declaration] = local.captures<EOL><INDENT>}"}
{"signature": "fun fail() {", "body": "<EOL><INDENT><INDENT>MainApiKotlin.sayHi()<EOL><INDENT><INDENT>MainApiJava.sayHi()<EOL><INDENT><INDENT>CommonApi.throwException()<EOL><INDENT>}"}
{"signature": "if (propertyDescriptor.isVar && name != null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ComposeErrors.COMPOSABLE_VAR.on(name))<EOL><INDENT><INDENT>}"}
{"signature": "val factoryName =", "body": "adapter.scope.declareName(<STR_LIT>)<EOL>"}
{"signature": "val paramCount =", "body": "argTypes.size + <NUM_LIT>"}
{"signature": "if (op.isOutCfgNode()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>eatEverythingUntilLevel = numberOfNestedBlocks<EOL><INDENT><INDENT><INDENT><INDENT>addInstruction(op, location, immediates)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val shortened =", "body": "doMinus(original)<EOL>"}
{"signature": "fun testGlobalInitializers() {", "body": "<EOL><INDENT><INDENT>runTest(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>listOf(<EOL><INDENT><INDENT><INDENT><INDENT>testRoot.resolve(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT>testRoot.resolve(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT>testRoot.resolve(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>),<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun assertToString(s: String, x: Any) {", "body": "<EOL><INDENT>assertEquals(s, x.toString())<EOL>}"}
{"signature": "val processedFiles =", "body": "hashSetOf<VirtualFile>()<EOL>"}
{"signature": "fun invOutFinal(x: Inv<Out<Final>>) {", "body": "}<EOL>fun invInOutOpen(x: Inv<In<Out<Open>>>) {}"}
{"signature": "val actualTargets =", "body": "getActualTargetList(owner).defaultTargets<EOL>"}
{"signature": "val callInCommon =", "body": "ktFileInCommon.findDescendantOfType<KtCallExpression>()!!<EOL>"}
{"signature": "var offset =", "body": "<NUM_LIT><EOL>"}
{"signature": "val isCalledFunPublicOrPublishedApi =", "body": "calledFunEffectiveVisibility.publicApi<EOL>"}
{"signature": "for (typeArg in fullyExpandedType.typeArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val typeArgType = typeArg.type ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>checkTypeAndTypeArguments(typeArgType, source, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun privateAccess() {", "body": "<EOL><INDENT><INDENT>listOf(x.x.x)<EOL><INDENT><INDENT>listOf(x.x)<EOL><INDENT><INDENT>listOf(x)<EOL><INDENT>}"}
{"signature": "package viewmodel<EOL>.", "body": ""}
{"signature": "when (val declaration = constructor.declarationDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>is ClassifierDescriptorWithTypeParameters -> declaration.declaredTypeParameters.isNotEmpty() && arguments.isEmpty()<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "package testing; .", "body": ""}
{"signature": "fun testAugmentedMemberAssignment(d: dynamic) {", "body": "<EOL><INDENT>d.m += <STR_LIT><EOL><INDENT>d.m -= <STR_LIT><EOL><INDENT>d.m *= <STR_LIT><EOL><INDENT>d.m /= <STR_LIT><EOL><INDENT>d.m %= <STR_LIT><EOL>}"}
{"signature": "val directDependsOnSymbols =", "body": "match.groupValues[<NUM_LIT>].split(',').filter(String::isNotEmpty).toSet()<EOL>"}
{"signature": "else if (unwrappedPointeeType is ArrayType) {", "body": "<EOL><INDENT><INDENT><INDENT>mirror(declarationMapper, pointeeType)<EOL><INDENT><INDENT>}"}
{"signature": "when (originalConfiguration.name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>runtimeElementsConfigurationName -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>apiElementsConfigurationName -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val outerThisDeclarations =", "body": "ConcurrentHashMap<IrClass, IrField>()<EOL>"}
{"signature": "fun foo(node: kotlinx.dom.Node) {", "body": "<EOL><INDENT><caret>check(node.isElement)<EOL>}"}
{"signature": "val firstParameterDeclaration =", "body": "parameters.first()<EOL>"}
{"signature": "when (diagnostic.factory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>in diagnosticsStoringResolvedCalls<NUM_LIT> -> assertResolvedCallsAreCompleted(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>diagnostic, DiagnosticFactory.cast(diagnostic, diagnosticsStoringResolvedCalls<NUM_LIT>).a, configuredLanguageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>in diagnosticsStoringResolvedCalls<NUM_LIT> -> assertResolvedCallsAreCompleted(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>diagnostic, DiagnosticFactory.cast(diagnostic, diagnosticsStoringResolvedCalls<NUM_LIT>).b, configuredLanguageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun onCreate(savedInstanceState: Bundle?) {", "body": "<EOL><INDENT><INDENT>super.onCreate(savedInstanceState)<EOL><INDENT><INDENT>setContentView(R.layout.activity_main)<EOL><INDENT>}"}
{"signature": "val matchingParsers =", "body": "InternalArgumentParser.PARSERS.filter { it.canParse(arg) }<EOL>"}
{"signature": "if (a >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val compiledJavaCache =", "body": "mutableMapOf<TestModule, File>()<EOL>"}
{"signature": "val fullJsName =", "body": "line.substring(webpackLocalDelimiterIndex, fileStartIndex)"}
{"signature": "fun foo(a: List<*>?) {", "body": "}"}
{"signature": "if (typeParameter is FirConstructedClassTypeParameterRef) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinJsInputFile =", "body": "InputFile(InputResource.file(kotlinJsLib), null, kotlinJsLibOutput, <STR_LIT>)<EOL>"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.propertyDelegatedFieldAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.propertyDelegatedFieldAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val hasSpreadOperator =", "body": "false<EOL>"}
{"signature": "for (accessor in listOfNotNull(property.getter, property.setter)) {", "body": "<EOL><INDENT><INDENT><INDENT>checkExpectPropertyAccessorModifiers(accessor, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "if (accessedClass.isCompanion) {", "body": "<EOL><INDENT><INDENT><INDENT>inlineFunctionBodyContext.checkAccessedDeclaration(<EOL><INDENT><INDENT><INDENT><INDENT>source, expression, accessedClass, accessedClass.visibility, context, reporter,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in (<NUM_LIT>.array.size<NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT><INDENT>array[j] = <NUM_LIT><EOL><INDENT><INDENT><INDENT>j++<EOL><INDENT><INDENT>}"}
{"signature": "fun testAnnotation() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (showDiagnosticsStacktrace != null) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val proposedExitCode =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>doBuild(chunk, kotlinTarget, context, kotlinDirtyFilesHolder, messageCollector, outputConsumer, fsOperations)<EOL>"}
{"signature": "val jName =", "body": "localJClass.simpleName<EOL>"}
{"signature": "fun golb() {", "body": "<EOL><INDENT>throw Baobab()<EOL>}"}
{"signature": "val classNodes =", "body": "CommonizerMap<CirEntityId, CirClassNode>()<EOL>"}
{"signature": "fun bench() {", "body": "<EOL><INDENT><INDENT>run(spaceScale, timeScale)<EOL><INDENT>}"}
{"signature": "val typeParameter =", "body": "toType.classifierOrNull?.owner as? IrTypeParameter<EOL>"}
{"signature": "if (flags and Pattern.LITERAL > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>processedPattern = Pattern.quote(patternString)<EOL><INDENT><INDENT>}"}
{"signature": "val oldSubstitution =", "body": "typeParameters.zip(typeArguments).toMap()<EOL>"}
{"signature": "val listDiff =", "body": "compareLists(methodIds<NUM_LIT>, methodIds<NUM_LIT>) ?: return<EOL>"}
{"signature": "var regularParent =", "body": "new pckg.RegularParent(<STR_LIT>)<EOL>"}
{"signature": "fun buz() {", "body": "<EOL><INDENT>bar(SomeImpl()::foo)<EOL>}"}
{"signature": "else if (!isValidJavaFqName(value)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJvm.JVM_PACKAGE_NAME_MUST_BE_VALID_NAME.on(entry))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val npmCachesSetupTask =", "body": "nodeJsTaskProviders.npmCachesSetupTaskProvider<EOL>"}
{"signature": "val ORIGINAL_ROOTS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val allMetaInfos =", "body": "openingMatchResult.tags<EOL>"}
{"signature": "val varUsedInBlocks =", "body": "hashMapOf<JsName, HashSet<JsBlock>>()<EOL>"}
{"signature": "val rnd =", "body": "nextLong()<EOL>"}
{"signature": "val randomFlags =", "body": "generateSequence { Random.nextBoolean() }.take(flagProperties.size).toList()<EOL>"}
{"signature": "val sessionFactory =", "body": "createPlatformAwareSessionFactory(module)<EOL>"}
{"signature": "package Property<NUM_LIT><EOL>.", "body": ""}
{"signature": "var invokeArgIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val cStringLiterals =", "body": "mutableMapOf<String, ConstPointer>()<EOL>"}
{"signature": "val laziedFirFileDump =", "body": "FirRenderer().renderElementAsString(laziedFirFile)<EOL>"}
{"signature": "val scopeInfos =", "body": "implicitScopeTower.allScopesWithImplicitsResolutionInfo()<EOL>"}
{"signature": "for (i in startIndex until endIndex) {", "body": "<EOL><INDENT><INDENT>destination[destIndex++] = this[i]<EOL><INDENT>}"}
{"signature": "var booleanResult =", "body": "false<EOL>"}
{"signature": "fun TestTypeAliasedValueParameterTypesAReverse(arg: SameUserKlass) {", "body": "}<EOL><EOL>class TestTypeAliasedValueParameterTypesB {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) constructor(arg: SameUserKlass)<EOL>}"}
{"signature": "if (descriptor.isCleanDescriptor()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>stubGenerator.generateMemberStub(descriptor)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val sr =", "body": "inlineMe<NUM_LIT>({ c<NUM_LIT>(); c<NUM_LIT>() }) { c<NUM_LIT>(); c<NUM_LIT>() }<EOL>"}
{"signature": "val contextReceiversListStubBuilder =", "body": "ContextReceiversListStubBuilder(c)<EOL>"}
{"signature": "val lastError =", "body": "chrome.extension.lastError?.message<EOL>"}
{"signature": "fun visitBreak(jump: IrBreak) {", "body": "<EOL><INDENT><INDENT>val exitState = loopMap[jump.loop]!!.exitState<EOL><INDENT><INDENT>resetExceptionStateIfNeeded(jump.loop)<EOL><INDENT><INDENT>doDispatch(exitState)<EOL><INDENT>}"}
{"signature": "val irDispatchReceiver =", "body": "dispatchReceiverValue?.loadIfExists()<EOL>"}
{"signature": "if (info.isRemapped) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return RemapInfo(info, remapped, REMAPPED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val genericSignatureInfo =", "body": "overriddenMethod.getSpecialSignatureInfo()<EOL>"}
{"signature": "val lastType =", "body": "mostSpecificSamConversion.operandKotlinType<EOL>"}
{"signature": "val unboxedFieldNames =", "body": "unboxedTypesAndMethodNamesAndFieldNames.map { (_, _, fieldName) -> fieldName }<EOL>"}
{"signature": "fun beginTestFile(fileName: String) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(null, currentTestFileName)<EOL><INDENT><INDENT><INDENT>currentTestFileName = fileName<EOL><INDENT><INDENT>}"}
{"signature": "val shouldBuildAsFunctionType =", "body": "isBuiltinFunctionClass(classId) && type.argumentList.none { it.projection == Projection.STAR }<EOL>"}
{"signature": "val COMPILER_CLASSPATH_CONFIGURATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val importedFromObjectData =", "body": "(this as FirCallableDeclaration).importedFromObjectOrStaticData<EOL>"}
{"signature": "var currentMark =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun insertAliasToEntryPoint(context: PhaseContext, module: LLVMModuleRef) {", "body": "<EOL><INDENT>val config = context.config<EOL><INDENT>val nomain = config.configuration.get(KonanConfigKeys.NOMAIN) ?: false<EOL><INDENT>if (config.produce != CompilerOutputKind.PROGRAM || nomain)<EOL><INDENT><INDENT>return<EOL><INDENT>val entryPointName = config.entryPointName<EOL><INDENT>val entryPoint = LLVMGetNamedFunction(module, entryPointName)<EOL><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT>val programAddressSpace = LLVMGetProgramAddressSpace(module)<EOL><INDENT>LLVMAddAlias<NUM_LIT>(module, getGlobalFunctionType(entryPoint), programAddressSpace, entryPoint, <STR_LIT>)<EOL>}"}
{"signature": "val upperBoundWithSubstitutedInferredTypes =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>systemWithoutWeakConstraints.resultingSubstitutor.substitute(upperBound, Variance.INVARIANT)<EOL>"}
{"signature": "if (function is FirAnonymousFunction && function.invocationKind?.canBeRevisited() != false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>enterRepeatableStatement(flow, assignedInside)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (filesUsed.isEmpty() || library in config.resolve.includedLibraries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>moduleDependencies.add(library)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addAllDependencies(cache)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!file.isPhysical && !file.viewProvider.isEventSystemEnabled && file.originalFile != file) {", "body": "<EOL><INDENT><INDENT><INDENT>return DanglingFileResolutionMode.IGNORE_SELF<EOL><INDENT><INDENT>}"}
{"signature": "package parts.", "body": "<EOL>"}
{"signature": "val translationUnit =", "body": "parseTranslationUnit(index, sourceFile, compilerArgs, options = CXTranslationUnit_DetailedPreprocessingRecord)<EOL>"}
{"signature": "if (left is IrBlock && left.origin == JvmLoweredStatementOrigin.FOLDED_SAFE_CALL && right.type.isJvmPrimitive()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val safeCallWhen = left.statements[<NUM_LIT>] as IrWhen<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val safeCallResult = safeCallWhen.branches[<NUM_LIT>].result<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.putValueArgument(<NUM_LIT>, safeCallResult)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>safeCallWhen.branches[<NUM_LIT>].result = expression<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>safeCallWhen.branches[<NUM_LIT>].result = irFalse(startOffset, endOffset)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>safeCallWhen.type = expression.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return safeCallWhen.wrapWithBlock(origin = null)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val minCapacity =", "body": "Random.nextInt(maxArraySize + <NUM_LIT>.Int.MAX_VALUE)<EOL>"}
{"signature": "if (matchingFakeOverrides.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processedMembers.addMember(memberFromSupertype as IrOverridableDeclaration<*>)<EOL><INDENT><INDENT><INDENT><INDENT>fakeOverrideInfo.addMember(newMember)<EOL><INDENT><INDENT><INDENT><INDENT>klass.addMember(newMember)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isNotNullable =", "body": "<EOL><INDENT><INDENT><INDENT>(KotlinBuiltIns.isPrimitiveType(propertyType) || KotlinBuiltIns.isString(propertyType)) &&<EOL>"}
{"signature": "if (callInfo.arguments.firstOrNull()?.isIntegerLiteralOrOperatorCall() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT>}"}
{"signature": "val rl =", "body": "value.rotateLeft(n)<EOL>"}
{"signature": "val newFnClass =", "body": "context.function(argCount + extraParams).owner<EOL>"}
{"signature": "if (sharedAsmType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>asmType = sharedAsmType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val unwrappedType = typeMapper.mapType(parameter.targetType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stackValue = StackValue.shared(stackIndex, unwrappedType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lastAnnotationCall =", "body": "context.callsOrAssignments.lastOrNull() as? FirAnnotation<EOL>"}
{"signature": "fun testConcreteType() {", "body": "<EOL><INDENT>val mutableProperty = Klass<Int>::mutableProperty<EOL><INDENT>mutableProperty.set(Klass<Int>(), Generic<Int>())<EOL>}"}
{"signature": "fun testCompilerArgumentsCopyFunctionsAreUpToDate() {", "body": "<EOL><INDENT><INDENT>generateCompilerArgumentsCopy(::getPrinterForTests)<EOL><INDENT>}"}
{"signature": "fun visitTryExpressionEnterNode(node: TryExpressionEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val metaInf =", "body": "root.findChild(<STR_LIT>) ?: continue<EOL>"}
{"signature": "if (exception != null) {", "body": "<EOL><INDENT><INDENT>throw id(exception)!!<EOL><INDENT>}"}
{"signature": "val functionProtosBytes =", "body": "functionList.groupByName { it.name }.packToByteArray()<EOL>"}
{"signature": "val stringResult =", "body": "platformEncodeToString(source, startIndex, endIndex)<EOL>"}
{"signature": "val newIrVararg =", "body": "IrVarargImpl(this.startOffset, this.endOffset, this.type, this.varargElementType)<EOL>"}
{"signature": "fun accept(visitor: KmPropertyExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibPropertyExtensionVisitor)<EOL><INDENT><INDENT>annotations.forEach(visitor::visitAnnotation)<EOL><INDENT><INDENT>getterAnnotations.forEach(visitor::visitGetterAnnotation)<EOL><INDENT><INDENT>setterAnnotations.forEach(visitor::visitSetterAnnotation)<EOL><INDENT><INDENT>file?.let(visitor::visitFile)<EOL><INDENT><INDENT>uniqId?.let(visitor::visitUniqId)<EOL><INDENT><INDENT>compileTimeValue?.let(visitor::visitCompileTimeValue)<EOL><INDENT>}"}
{"signature": "fun testKotlinProjectWithEmptyProductionOutputDirWithoutSrcDir() {", "body": "<EOL><INDENT><INDENT>doTest()<EOL><INDENT>}"}
{"signature": "fun takeUInt(u: UInt) {", "body": "}<EOL>fun takeULong(u: ULong) {}"}
{"signature": "val serializerClassSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>property.serializableWith(compilerContext)<EOL>"}
{"signature": "val jsFilePath =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val depsFromCompiler =", "body": "context.environment.configuration.getList(CLIConfigurationKeys.CONTENT_ROOTS)<EOL>"}
{"signature": "if (FirDiagnosticsDirectives.WITH_EXTENDED_CHECKERS in module.directives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>registerExtendedCommonCheckers()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val beforeAdding =", "body": "result<EOL>"}
{"signature": "val internalRoot =", "body": "<STR_LIT><EOL>"}
{"signature": "val fragmentBuilder =", "body": "Fragment.newBuilder()<EOL>"}
{"signature": "val functionArgumentsSize =", "body": "if (isExtension) typeParamSize - <NUM_LIT> else typeParamSize - <NUM_LIT><EOL>"}
{"signature": "for (part in backendContext.state.factory.packagePartRegistry.parts.values.addCompiledPartsAndSort(backendContext.state)) {", "body": "<EOL><INDENT><INDENT><INDENT>part.addTo(builder)<EOL><INDENT><INDENT>}"}
{"signature": "val protoIdSignatureMap =", "body": "mutableMapOf<IdSignature, Int>()<EOL>"}
{"signature": "fun foo(i: Any) {", "body": "}"}
{"signature": "val previouslyFailedTestTasks =", "body": "readPreviouslyFailedTasks()<EOL>"}
{"signature": "val oldProcessors =", "body": "this.processors<EOL>"}
{"signature": "if (abstractInBaseClassNoImpl.isNotEmpty() && !canHaveAbstractMembers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ABSTRACT_CLASS_MEMBER_NOT_IMPLEMENTED.on(klass, klass, abstractInBaseClassNoImpl.first()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun indented(body: () -> Unit) {", "body": "<EOL><INDENT><INDENT>indent++<EOL><INDENT><INDENT>body()<EOL><INDENT><INDENT>indent--<EOL><INDENT>}"}
{"signature": "fun wrongParametersDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT>expectedDiagnostic: TextDiagnostic,<EOL><INDENT><INDENT><INDENT><INDENT>actualDiagnostic: TextDiagnostic,<EOL><INDENT><INDENT><INDENT><INDENT>start: Int,<EOL><INDENT><INDENT><INDENT><INDENT>end: Int<EOL><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>actualMessages.add(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CheckerTestUtilTest.wrongParameters(expectedDiagnostic.asString(), actualDiagnostic.asString(), start, end)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun kt<NUM_LIT>() {", "body": "<EOL><INDENT>stupidRemembered = ComposerEmpty<EOL><INDENT>case<NUM_LIT>() <EOL><INDENT>stupidRemembered = ComposerEmpty<EOL><INDENT>case<NUM_LIT>()<EOL><INDENT>stupidRemembered = ComposerEmpty<EOL><INDENT>case<NUM_LIT>()<EOL><EOL><INDENT>val expectedInL = <STR_LIT><EOL><INDENT>if (l != expectedInL) fail(<STR_LIT>)<EOL>}"}
{"signature": "val KOTLIN_ANNOTATIONS_JVM_PROP =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testSimpleCompilable() {", "body": "<EOL><INDENT><INDENT>val engine = ScriptEngineManager().getEngineByExtension(<STR_LIT>) as KotlinJsr<NUM_LIT>ScriptEngineImpl<EOL><INDENT><INDENT>val comp<NUM_LIT> = engine.compile(<STR_LIT>)<EOL><INDENT><INDENT>val comp<NUM_LIT> = engine.compile(<STR_LIT>)<EOL><INDENT><INDENT>val res<NUM_LIT> = comp<NUM_LIT>eval()<EOL><INDENT><INDENT>Assert.assertNull(res<NUM_LIT>)<EOL><INDENT><INDENT>val res<NUM_LIT> = comp<NUM_LIT>eval()<EOL><INDENT><INDENT>Assert.assertEquals(<NUM_LIT>, res<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val Member =", "body": "kindOf(TowerGroupKind.Member)<EOL>"}
{"signature": "val includedBuild =", "body": "project.gradle.includedBuild(identifier.identityPath.topRealPath().name!!)<EOL>"}
{"signature": "if (isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val wrapper = nullableTypeParent(parent, type)<EOL><INDENT><INDENT><INDENT><INDENT>createTypeAnnotationStubs(wrapper, type, otherAnnotations)<EOL><INDENT><INDENT><INDENT><INDENT>wrapper<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (splitArg in arg.split(',')) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addToIncludeOrExcludeList(splitArg)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (charCode < gap.start + gap.length) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return unassignedCategoryId<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testMissingDependencyJava() {", "body": "<EOL><INDENT><INDENT>doTestBrokenLibrary(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val propertyTranslator =", "body": "DefaultPropertyTranslator(property, context, JsNullLiteral())<EOL>"}
{"signature": "val declarationsWithResolvedAnnotations =", "body": "mutableSetOf<FirAnnotationContainer>()<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(BuiltInsProtoBuf.functionAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(BuiltInsProtoBuf.functionAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val problemNodes =", "body": "edgesInCycles.flatMap { setOf(it.from, it.to) }<EOL>"}
{"signature": "val preparedType =", "body": "if (local) baseType.unwrap() else substituteAlternativesInPublicType(baseType)<EOL>"}
{"signature": "val substitutionOverrideCache =", "body": "session.substitutionOverrideStorage.substitutionOverrideCacheByScope.getValue(key, null)<EOL>"}
{"signature": "if (irClass.isInterface) {", "body": "<EOL><INDENT><INDENT>null<EOL><INDENT>}"}
{"signature": "if (field.origin == IrDeclarationOrigin.FIELD_FOR_OBJECT_INSTANCE && expression.origin == JsStatementOrigins.SYNTHESIZED_STATEMENT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>synthetic = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sideEffects = SideEffectKind.PURE<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val simpleScript =", "body": "<STR_LIT>x = \\$x\\<STR_LIT>.toScriptSource()<EOL>"}
{"signature": "val rangeElementType =", "body": "maxByDomainCapacity(type, UnsignedType.UINT)<EOL>"}
{"signature": "if (e === loop) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>found = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val problemDependencies =", "body": "mutableListOf<Dependency>()<EOL>"}
{"signature": "val _unsubstitutedPrimaryConstructor =", "body": "<EOL><INDENT><INDENT>c.storageManager.createLazyValue { createUnsubstitutedPrimaryConstructor(constructorVisibility) }<EOL>"}
{"signature": "if (unit <= DurationUnit.MILLISECONDS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expect(d, d, unit)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testClosingCache() {", "body": "<EOL><INDENT><INDENT>cache.close()<EOL><EOL><INDENT><INDENT>assertTrue(cacheDir.resolve(<STR_LIT>).exists())<EOL><INDENT><INDENT>assertTrue(cacheDir.resolve(<STR_LIT>).exists())<EOL><INDENT>}"}
{"signature": "val NOSOURCES_CHEAP_MODULE_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (container is ProtoContainer.Package && container.source is JvmPackagePartSource) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val jvmPackagePartSource = container.source as JvmPackagePartSource<EOL><EOL><INDENT><INDENT><INDENT><INDENT>return jvmPackagePartSource.knownJvmBinaryClass<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: kotlinClassFinder.findKotlinClass(jvmPackagePartSource.classId, jvmMetadataVersion)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val reportedDiagnosticMap =", "body": "hashMapOf<Instruction, DiagnosticFactory<*>>()<EOL>"}
{"signature": "val fileDescriptorSerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelReadFileDescriptor, symbols.parcelWriteFileDescriptor)<EOL>"}
{"signature": "when (val callee = (unwrapArgument() as? FirQualifiedAccessExpression)?.calleeReference) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirResolvedNamedReference -> callee.resolvedSymbol<EOL><INDENT><INDENT><INDENT>is FirThisReference -> callee.boundSymbol<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (DescriptorUtils.isAnonymousObject(returnTypeDeclarationDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.PRIVATE_INLINE_FUNCTIONS_RETURNING_ANONYMOUS_OBJECTS.on(reportOn))<EOL><INDENT><INDENT>}"}
{"signature": "if (!outAfterMake.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFalse(outDir.exists())<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.propertySetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.propertySetterAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "fun replaceAll(operator: UnaryOperator<Int>) {", "body": "}"}
{"signature": "val compileJava =", "body": "configuration.getBoolean(JVMConfigurationKeys.COMPILE_JAVA)<EOL>"}
{"signature": "fun useHandlers(vararg constructor: Constructor<AnalysisHandler<InputArtifact>>) {", "body": "<EOL><INDENT><INDENT>handlers += constructor<EOL><INDENT>}"}
{"signature": "val globalMetadataInfoHandler =", "body": "testServices.globalMetadataInfoHandler<EOL>"}
{"signature": "var DATA_SIZE =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (charClass.mayContainSupplCodepoints) {", "body": "<EOL><INDENT><INDENT><INDENT>return SupplementaryRangeSet(charClass, hasFlag(CASE_INSENSITIVE))<EOL><INDENT><INDENT>}"}
{"signature": "if (hasSyntheticWriteToParcel()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeWriteToParcel(codegen, propertiesToSerialize, PARCEL_TYPE, parcelerObject)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (it in indexFileNames) {", "body": "<EOL><INDENT><INDENT><INDENT>return resolveAsFile(dir.resolve(it)) ?: continue<EOL><INDENT><INDENT>}"}
{"signature": "fun gen(expression: IrExpression, type: Type, irType: IrType, data: BlockInfo) {", "body": "<EOL><INDENT><INDENT>expression.accept(this, data).materializeAt(type, irType)<EOL><INDENT>}"}
{"signature": "val firCallableDeclaration =", "body": "callableSymbol.firSymbol.fir<EOL>"}
{"signature": "fun visitBlock(block: FirBlock, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBlockCheckers.check(block, data)<EOL><INDENT>}"}
{"signature": "import my.", "body": "math.IntMath<EOL>"}
{"signature": "val existingPackageName =", "body": "firstMeaningfulLine?.getExistingPackageName()<EOL>"}
{"signature": "val calleeAsDoubleColonLHS =", "body": "resolveExpressionOnLHS(callee, c) ?: return null<EOL>"}
{"signature": "val xx<NUM_LIT> =", "body": "<STR_LIT> + <!INVALID_IF_AS_EXPRESSION!>if<!> (true) <NUM_LIT><EOL>"}
{"signature": "val overridesWithoutStubs =", "body": "HashMap<IrSimpleFunction, List<IrSimpleFunctionSymbol>>()<EOL>"}
{"signature": "if (x!! == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>checkSubtype<Int>(x)<EOL><INDENT>}"}
{"signature": "val firSymbol =", "body": "this.firSymbol.fir as? FirAnnotationContainer ?: return null<EOL>"}
{"signature": "when(variable.origin) {", "body": "<EOL><INDENT><INDENT>IrDeclarationOrigin.FOR_LOOP_IMPLICIT_VARIABLE,<EOL><INDENT><INDENT>IrDeclarationOrigin.FOR_LOOP_ITERATOR,<EOL><INDENT><INDENT>IrDeclarationOrigin.IR_TEMPORARY_VARIABLE -> false<EOL><INDENT><INDENT>else -> true<EOL><INDENT>}"}
{"signature": "val dsymFile =", "body": "File(frameworkFile.file.path + <STR_LIT>)<EOL>"}
{"signature": "val importKindFromOption =", "body": "ImportKind.fromShortenOption(option)<EOL>"}
{"signature": "val SharedImmutable =", "body": "ClassId(kotlinNativePackage.child(Name.identifier(<STR_LIT>)), Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "package only */ -> true<EOL>.", "body": ""}
{"signature": "if (shouldWrapVarargInArray) {", "body": "<EOL><INDENT><INDENT><INDENT>val concatArguments = prepareConcatArguments(arguments, list, varargElementType)<EOL><INDENT><INDENT><INDENT>val concatExpression = concatArgumentsIfNeeded(concatArguments, varargElementType, false)<EOL><INDENT><INDENT><INDENT>concatExpression<EOL><INDENT><INDENT>}"}
{"signature": "val symlinkToOtherJava =", "body": "Files.createSymbolicLink(File(tempDir, <STR_LIT>).toPath(), otherJava.toPath()).toFile()<EOL>"}
{"signature": "fun foo(x: Any?) {", "body": "<EOL><INDENT>x ?:<EOL><INDENT>val foo = <NUM_LIT><EOL><EOL><INDENT>x ?:<EOL><INDENT>fun bar() = <NUM_LIT><EOL><EOL><INDENT>x ?:<EOL><INDENT>fun String.() = <NUM_LIT><EOL>}"}
{"signature": "val sourceInformation =", "body": "<EOL><INDENT><INDENT>topLevelCallableId(KtxNameConventions.SOURCEINFORMATION)<EOL>"}
{"signature": "fun printDouble(v: Double) {", "body": "<EOL><INDENT>println(v)<EOL>}"}
{"signature": "while (<!NON_TRIVIAL_BOOLEAN_CONSTANT!><NUM_LIT> == <NUM_LIT><!>) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (!aptCache.updateCache(processors, failedToAnalyzeSources)) {", "body": "<EOL><INDENT><INDENT><INDENT>javaCache.invalidateAll()<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "package whats.", "body": "the.difference<EOL>"}
{"signature": "val isNsRange =", "body": "Random.nextBoolean()<EOL>"}
{"signature": "val localFunctions =", "body": "hashMapOf<CallableDescriptor, FunctionWithWrapper>()<EOL>"}
{"signature": "if (result is JsAnalysisResult.RetryWithAdditionalRoots) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>environmentForJS.addKotlinSourceRoots(result.additionalKotlinRoots)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visit(element: Any) {", "body": "<EOL><INDENT><INDENT><INDENT><!RETURN_NOT_ALLOWED!>return@find<NUM_LIT><!> element<EOL><INDENT><INDENT>}"}
{"signature": "val inheritancePath =", "body": "collectInheritancePath(baseFirSymbol, superFirSymbol) ?: return null<EOL>"}
{"signature": "if (!classSymbol.isEffectivelyExternal(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(classSymbol.source, FirJsPlainObjectsErrors.NON_EXTERNAL_DECLARATIONS_NOT_SUPPORTED, classKind, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (isVararg && it is FirErrorTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it.wrapIntoArray()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor.declaresDefaultValue()) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(DEFAULT_VALUE_NOT_ALLOWED_IN_OVERRIDE.on(parameter))<EOL><INDENT><INDENT>}"}
{"signature": "val enumIrClass =", "body": "kType.classOrNull!!.owner<EOL>"}
{"signature": "val realSize =", "body": "if (frame.position + size > frame.size) frame.size - frame.position else size<EOL>"}
{"signature": "val rawPointer =", "body": "args[<NUM_LIT>]<EOL>"}
{"signature": "val classExpectations =", "body": "ArrayList<SignatureExpectation>()<EOL>"}
{"signature": "fun testMultipleClasses() {", "body": "<EOL><INDENT><INDENT>doTest(<EOL><INDENT><INDENT><INDENT>setOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT>package test<EOL><EOL><INDENT><INDENT><INDENT><INDENT>class Fizz<EOL><INDENT><INDENT><INDENT><INDENT>class Buzz<STR_LIT>\".trimIndent()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "for (action in actionsOnClose) {", "body": "<EOL><INDENT><INDENT><INDENT>action()<EOL><INDENT><INDENT>}"}
{"signature": "val existingCondition =", "body": "statement.condition<EOL>"}
{"signature": "fun testFileSystemNotAcceptsMavenPath() {", "body": "<EOL><INDENT><INDENT>val resolver = FileSystemDependenciesResolver()<EOL><INDENT><INDENT>resolver.assertNotAcceptsArtifact(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "when (languageVersionSettings.supportsFeature(LanguageFeature.ProhibitAccessToInvisibleSetterFromDerivedClass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>true -> INVISIBLE_SETTER<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> INVISIBLE_SETTER_FROM_DERIVED<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (inputs.size != inputValues.size) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val shouldReportWarnings =", "body": "!isProperEqualityChecksEnabled<EOL>"}
{"signature": "for (i in <NUM_LIT>L .. N) {", "body": "<EOL><INDENT><INDENT>sum += i<EOL><INDENT>}"}
{"signature": "if (!testObject(obj as Obj)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration == null) {", "body": "<EOL><INDENT><INDENT>return true<INDENT>  }"}
{"signature": "package kt_<NUM_LIT>_<NUM_LIT>_<NUM_LIT><EOL>.", "body": ""}
{"signature": "fun BookmarkButton(<EOL><INDENT>isBookmarked: Boolean,<EOL><INDENT>onClick: () -> Unit,<EOL>) {", "body": "<EOL>}"}
{"signature": "val signedType =", "body": "type.asSigned.capitalized<EOL>"}
{"signature": "val propertyNameExpression =", "body": "wholePropertyAccessExpression?.getPossiblyQualifiedSimpleNameExpression()<EOL>"}
{"signature": "val fileNameWithoutExtension =", "body": "testFilePath.split(<STR_LIT>).last().replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val nullableK =", "body": "(nullableK<Unit> { null }).toString()<EOL>"}
{"signature": "if (another.isNegative()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>bits_.and(anotherBits)<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val doWhileLoopProperties =", "body": "ArrayDeque<Pair<FirLoop, MutableSet<FirPropertySymbol>>>()<EOL>"}
{"signature": "val dummyTaskName =", "body": "<STR_LIT><EOL>"}
{"signature": "val sbSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>StringBuilder(MyCharSequence(<STR_LIT>)).length<!><EOL>"}
{"signature": "val outerContractDescription =", "body": "function.obtainContractDescription()<EOL>"}
{"signature": "package names for which [getKindByClassNamePrefix] may return a [FunctionTypeKind].", "body": "<EOL>"}
{"signature": "val serial =", "body": "findTypeSerializerOrContext(compilerContext, arg.typeOrNull!!)<EOL>"}
{"signature": "val sourceLength =", "body": "alloc<size_tVar>()<EOL>"}
{"signature": "val primitiveFloatingPointIrTypes =", "body": "listOf(floatType, doubleType)<EOL>"}
{"signature": "if (other.equalsLong(MIN_VALUE)) {", "body": "<EOL><INDENT><INDENT>return ZERO<EOL><INDENT>}"}
{"signature": "fun bar(lmbd: (Int) -> Int) {", "body": "<EOL><INDENT>lmbd(<NUM_LIT>)<EOL>}"}
{"signature": "fun visitFunctionCallArgumentsEnterNode(node: FunctionCallArgumentsEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionCallArgumentsEnterNode(node)<EOL><INDENT>}"}
{"signature": "if (dcl is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ktClasses.removeLast()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val CREATOR =", "body": "Creator()<EOL>"}
{"signature": "if (type in originatingTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isolatingGenerated.add(file)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val propertySetter =", "body": "valueProperty.setter!!<EOL>"}
{"signature": "if (!visitedModuleNames.add(jpsModule.name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val IS_VALUE =", "body": "FlagField.booleanAfter(IS_INNER)<EOL>"}
{"signature": "val IS_VARARG =", "body": "FlagField.booleanFirst()<EOL>"}
{"signature": "when(cond) {", "body": "<EOL><INDENT><INDENT>true -> ::A<EOL><INDENT><INDENT>false -> ::B<EOL><INDENT>}"}
{"signature": "val REPL_SNIPPET_FIRST_GEN =", "body": "<NUM_LIT><EOL>"}
{"signature": "val schemeOne =", "body": "Scheme(Open(<NUM_LIT>), listOf(Scheme(Open(<NUM_LIT>))))<EOL>"}
{"signature": "if (v is String) {", "body": "<EOL><INDENT><INDENT><INDENT>value = v<EOL><INDENT><INDENT>}"}
{"signature": "if (dotIndex == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(containerName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (expression.symbol.owner.hasAnnotation(ContractsDslNames.CONTRACTS_DSL_ANNOTATION_FQN)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return IrCompositeImpl(expression.startOffset, expression.endOffset, context.irBuiltIns.unitType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun registerReplacement(original: IrValueDeclaration, replacement: IrValueDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>oldValueSymbol<NUM_LIT>NewValueSymbol[original.symbol] = replacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "for ((receiverType, type) in fragmentTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>properties += genPropertyForFragment(packageFragmentDescriptor, receiverType, type, resource)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val digitsEndIndex =", "body": "endIndex - suffix.length<EOL>"}
{"signature": "if (firSymbol.origin == FirDeclarationOrigin.SamConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>buildSamConstructorSymbol(firSymbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (newLineNumber == callSiteLineNumber) {", "body": "<EOL><INDENT><INDENT>return name<EOL><INDENT>}"}
{"signature": "val linuxMipsel<NUM_LIT> =", "body": "Unit<EOL>"}
{"signature": "while (nativeBytes[length] != <NUM_LIT>toByte()) {", "body": "<EOL><INDENT><INDENT>++length<EOL><INDENT>}"}
{"signature": "val listenersMap =", "body": "mutableMapOf<String, MutableList<ListenerDescriptor>>()<EOL>"}
{"signature": "if (newInferenceLambdaInfo == null && context.languageVersionSettings.supportsFeature(LanguageFeature.NewInference)) {", "body": "<EOL><INDENT><INDENT><INDENT>newContext = newContext.replaceContextDependency(ContextDependency.INDEPENDENT)<EOL><INDENT><INDENT>}"}
{"signature": "var totalDiffs =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (propertyDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val serializable = serialPropertiesMap[propertyDescriptor]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(serializable ?: transientsPropertiesMap[propertyDescriptor])?.get()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classifierSymbol =", "body": "scope.findFirstClassifierByName(targetClassName) ?: return null<EOL>"}
{"signature": "val recursiveGenericTypeParameter =", "body": "RecursiveGeneric::class.typeParameters.single()<EOL>"}
{"signature": "val signatureDeserializer =", "body": "IdSignatureDeserializer(libraryFile, fileSignature, irInterner)<EOL>"}
{"signature": "val performanceManager =", "body": "depsDescriptors.compilerConfiguration[CLIConfigurationKeys.PERF_MANAGER]<EOL>"}
{"signature": "val PROPERTY_NAME_EXPRESSION =", "body": "CirName.create(ReplaceWith::expression.name)<EOL>"}
{"signature": "fun assertNoWarnings(androidGradlePluginVersion: String) {", "body": "<EOL><INDENT><INDENT><INDENT>project.runMultiplatformAndroidGradlePluginCompatibilityHealthCheck(<EOL><INDENT><INDENT><INDENT><INDENT>FixedAndroidGradlePluginVersionProvider(androidGradlePluginVersion)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>project.assertNoWarningMessage()<EOL><INDENT><INDENT>}"}
{"signature": "if (!notCheckItself) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkDeclarationParent(declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val singular = lombokService.getSingular(field.symbol)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>null -> createSetterMethod(builder, field, symbol, declarations)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> createMethodsForSingularFields(builder, singular, field, symbol, declarations)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (classId != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return KtFe<NUM_LIT>DescSamConstructorSymbolPointer(classId)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until rnum) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>list.removeAt(list.size - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val iCanonicalClass =", "body": "getCanonicalClass(inputInts[i])<EOL>"}
{"signature": "val pluginDescriptorsCache =", "body": "ContainerUtil.createConcurrentSoftKeySoftValueMap<PluginDesignation, RawPluginDescriptor>()<EOL>"}
{"signature": "val creatorType =", "body": "androidSymbols.androidOsParcelableCreator.typeWith(declarationType)<EOL>"}
{"signature": "val KSERIALIZER_CLASS_ID =", "body": "ClassId.topLevel(KSERIALIZER_NAME_FQ)<EOL>"}
{"signature": "if (difference > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>b<EOL><INDENT><INDENT>}"}
{"signature": "fun addSuppressed(cause: Throwable, exception: Throwable) {", "body": "<EOL><INDENT><INDENT>ReflectThrowable.addSuppressed?.invoke(cause, exception)<EOL><INDENT>}"}
{"signature": "val LENGTH_PROPERTY_INTRINSIC =", "body": "BuiltInPropertyIntrinsic(<STR_LIT>)<EOL>"}
{"signature": "fun renderAccessorModifiers(descriptor: PropertyAccessorDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT>renderMemberModifiers(descriptor, builder)<EOL><INDENT>}"}
{"signature": "if (shouldUpdateFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fileStack.pop()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DEPRECATED_RUNTIME_PACKAGE =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val fieldInitFunction =", "body": "createInitFunction(<STR_LIT>)<EOL>"}
{"signature": "if (context.configuration.skipBodies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>createStubIrForErrorClass()<EOL><INDENT><INDENT>}"}
{"signature": "fun testKotlincSimple() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir.path<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val isInfix =", "body": "function.isInfix<EOL>"}
{"signature": "import Enum.", "body": "*<EOL>"}
{"signature": "fun Row(content: @Composable () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>Layout(content)<EOL><INDENT><INDENT>}"}
{"signature": "if (kind == OwnerKind.ERASED_INLINE_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sw.writeReturnType()<EOL><INDENT><INDENT><INDENT><INDENT>sw.writeAsmType(mapType(f.containingDeclaration))<EOL><INDENT><INDENT><INDENT><INDENT>sw.writeReturnTypeEnd()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (index in tail - <NUM_LIT> downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (element == elementData[index]) return index + elementData.size - head<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val untilFunName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "for (attr in BuildAttribute.values()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>buildMetricsData.buildAttributeKind[attr.name] = attr.kind.name<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val test_dn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>d === n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n === d<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>d !== n<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>n !== d<!><EOL>"}
{"signature": "val diagnosticElementTextRange =", "body": "diagnostic.psiElement.textRange<EOL>"}
{"signature": "fun assertJvmEnvironmentAttributeEquals(target: KotlinTarget, value: String) {", "body": "<EOL><INDENT><INDENT>assertJvmEnvironmentAttributeEquals(<EOL><INDENT><INDENT><INDENT>target,<EOL><INDENT><INDENT><INDENT>target.project.objects.named<TargetJvmEnvironment>(value)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun removeExistingIdeaLibrariesAndModules() {", "body": "<EOL><INDENT><INDENT>File(projectDir, <STR_LIT>).deleteRecursively()<EOL><INDENT><INDENT>File(projectDir, <STR_LIT>).deleteRecursively()<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(c: Int) {", "body": "}<EOL><EOL>fun test<NUM_LIT>(@ann(parameter) a) {}"}
{"signature": "fun test(a: A) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>"}
{"signature": "val reifiedTypeParametersUsages =", "body": "ReifiedTypeParametersUsages()<EOL>"}
{"signature": "fun manyFoo(vararg v: Int) {", "body": "}<EOL>fun manyFoo(vararg s: String) {}"}
{"signature": "val paramsByNames =", "body": "function.parameters.associate { it.name to it }<EOL>"}
{"signature": "fun testSuspendPlain() {", "body": "useSuspend(::foo<NUM_LIT>) }"}
{"signature": "fun testNamedAgainstSeveralAutomatic() {", "body": "<EOL><INDENT><INDENT>val a = module(<STR_LIT>)<EOL><INDENT><INDENT>val b = module(<STR_LIT>)<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(a, b))<EOL><INDENT>}"}
{"signature": "for (metric in BooleanMetrics.values()) {", "body": "<EOL><INDENT><INDENT><INDENT>logger.report(metric, true)<EOL><INDENT><INDENT>}"}
{"signature": "if (parent.name != packageFqNameSegments[index].asString()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (superFunCall == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>wrappedFunctionCall<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in uLongArray.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += uLongArray[i]<EOL><INDENT><INDENT>}"}
{"signature": "var hasGetter =", "body": "false<EOL>"}
{"signature": "for (i in <NUM_LIT>u.toUByte() until <NUM_LIT>u.toUByte()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val dp_h =", "body": "doubleArrayOf(<NUM_LIT>, <NUM_LIT>e<NUM_LIT>) <EOL>"}
{"signature": "if (generateArgv) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>backendContext.createArrayOfExpression(UNDEFINED_OFFSET, UNDEFINED_OFFSET, context.irBuiltIns.stringType, emptyList())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (false) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (irClass.hasAnnotation(KonanFqNames.hasFinalizer)) {", "body": "<EOL><INDENT><INDENT><INDENT>result = result or TF_HAS_FINALIZER<EOL><INDENT><INDENT>}"}
{"signature": "val classOrObjectSymbol =", "body": "getClassOrObjectSymbolByClassId(classId) ?: return<EOL>"}
{"signature": "fun f(x: T) {", "body": "<EOL><INDENT><INDENT>result = x.toString()<EOL><INDENT>}"}
{"signature": "if (target.isSecondaryConstructorCall) {", "body": "<EOL><INDENT><INDENT><INDENT>val factory = context.buildConstructorFactory(target, target.parentAsClass)<EOL><INDENT><INDENT><INDENT>replaceSecondaryConstructorWithFactoryFunction(expression, factory.symbol)<EOL><INDENT><INDENT>}"}
{"signature": "val typeA =", "body": "mockTAType(<STR_LIT>) { typeX }<EOL>"}
{"signature": "val sharedSourceSetName =", "body": "node.sharedSourceSetName(compilation) ?: return null<EOL>"}
{"signature": "val variableLikeBuilder =", "body": "VariableLikeSymbolBuilder()<EOL>"}
{"signature": "val whenObjectAddedActions =", "body": "mutableListOf<(T) -> Unit>()<EOL>"}
{"signature": "val wabtWatFile =", "body": "newFile(<STR_LIT>)<EOL>"}
{"signature": "val parameter<NUM_LIT>arguments =", "body": "backendContext.multiFieldValueClassReplacements<EOL>"}
{"signature": "val nativeLibraries =", "body": "mutableSetOf<FileCollection>()<EOL>"}
{"signature": "val lessThanMaxDouble =", "body": "maxNsDouble.nextDown()<EOL>"}
{"signature": "val casedRangesBuilder =", "body": "CasedRangesBuilder()<EOL>"}
{"signature": "import Bar<EOL>.", "body": ""}
{"signature": "val appClassKtSourceFile =", "body": "secondProject.subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val typeStubBuilder =", "body": "TypeClsStubBuilder(c)<EOL>"}
{"signature": "if (printConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (shouldWarningBeReported(extensionReceiver.type, extensionReceiverParameter.type, dataFlowValue, context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val expression = (extensionReceiver as? ExpressionReceiver)?.expression ?: reportOn<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Errors.RECEIVER_TYPE_MISMATCH_WARNING_FOR_INCORRECT_CAPTURE_APPROXIMATION.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>expression, extensionReceiverParameter.type, extensionReceiver.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun deleteStorageFiles() {", "body": "<EOL><INDENT><INDENT>icContext.transaction.deleteFile(countersFile.toPath())<EOL><EOL><INDENT><INDENT>size = <NUM_LIT><EOL><EOL><INDENT><INDENT>super.deleteStorageFiles()<EOL><INDENT>}"}
{"signature": "val inlineModuleBuilder =", "body": "InlineModule.newBuilder()<EOL>"}
{"signature": "import<EOL><EOL>import foo.", "body": "<EOL>"}
{"signature": "if (foo<NUM_LIT> != foo<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val hasElse =", "body": "expression.elseExpression != null<EOL>"}
{"signature": "fun minusIsLazyIterated() {", "body": "<EOL><INDENT><INDENT>val seq = sequenceOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val list = arrayListOf<String>()<EOL><INDENT><INDENT>val result = seq - list<EOL><EOL><INDENT><INDENT>list += <STR_LIT><EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>), result.toList())<EOL><INDENT><INDENT>list += <STR_LIT><EOL><INDENT><INDENT>assertEquals(emptyList<String>(), result.toList())<EOL><INDENT>}"}
{"signature": "val baseFqName =", "body": "DescriptorUtils.getFqName(baseDescriptor).asString()<EOL>"}
{"signature": "val notFoundTypeVariables =", "body": "notFixedTypeVariables.keys.toMutableSet().apply { removeAll(result) }<EOL>"}
{"signature": "val enumEntriesMap =", "body": "enumsSupport.enumEntriesMap(irClass)<EOL>"}
{"signature": "if (it.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(i: @b(<NUM_LIT>) Int?) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(l: List<@b(<NUM_LIT>) Int?>) {}"}
{"signature": "val llvmSrcType =", "body": "value.argument.type.toLLVMType(llvm)<EOL>"}
{"signature": "val qualifiedNames =", "body": "ProtoBuf.QualifiedNameTable.newBuilder()<EOL>"}
{"signature": "val parentChildren =", "body": "elementParent.children<EOL>"}
{"signature": "fun addMissedConstraints(<EOL><INDENT><INDENT>position: IncorporationConstraintPosition,<EOL><INDENT><INDENT>constraints: MutableList<Pair<TypeVariableMarker, Constraint>>,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>storage.missedConstraints.add(position to constraints)<EOL><INDENT>}"}
{"signature": "val initialType =", "body": "block.resolvedType<EOL>"}
{"signature": "val expandedClass =", "body": "targetDescriptor.expandedType.constructor.declarationDescriptor as? ClassDescriptor<EOL>"}
{"signature": "val ctorToFreeFunctionMap =", "body": "hashMapOf<IrConstructorSymbol, IrSimpleFunctionSymbol>()<EOL>"}
{"signature": "val eqIntrinsic =", "body": "binaryIntrinsic(operator = eqSelector)<EOL>"}
{"signature": "val neighbors =", "body": "DFS.Neighbors<T> { current -> edgeLists[current] ?: emptySet() }<EOL>"}
{"signature": "if (currentGraph.declaration == null) {", "body": "<EOL><INDENT><INDENT><INDENT>graphs.pop()<INDENT><INDENT><INDENT> return null to null<EOL><INDENT><INDENT>}"}
{"signature": "val portSelectionRng =", "body": "Random()<EOL>"}
{"signature": "fun visitExpression(expression: IrExpression) {", "body": "<EOL><INDENT><INDENT>expression.type = typeRemapper.remapType(expression.type)<EOL><INDENT><INDENT>super.visitExpression(expression)<EOL><INDENT>}"}
{"signature": "val savedState =", "body": "jsr<NUM_LIT>Bindings.remove(KOTLIN_SCRIPT_STATE_BINDINGS_KEY)<EOL>"}
{"signature": "when(l) {", "body": "<EOL><INDENT>is <!CANNOT_CHECK_FOR_ERASED!>MutableList<String><!> -> <NUM_LIT><EOL><INDENT>else <!SYNTAX!><NUM_LIT><!><EOL>}"}
{"signature": "if (sdeAnnotationValue == null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val CLASSPATH_ENTRIES_FILE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (expression is KtThisExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>dispatchReceiverDescriptor = context.get(BindingContext.REFERENCE_TARGET, expression.instanceReference)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val computedLifetime =", "body": "lifetimeOf(node)<EOL>"}
{"signature": "when (result) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "if (propertiesProvider.yarn) {", "body": "<EOL><INDENT><INDENT><INDENT>YarnPlugin.apply(project)<EOL><INDENT><INDENT>}"}
{"signature": "if (cache is JpsIncrementalJvmCache) {", "body": "<EOL><INDENT><INDENT><INDENT>addDependentCache(cache)<EOL><INDENT><INDENT>}"}
{"signature": "val processedTypes =", "body": "HashSet<TypeConstructor>()<EOL>"}
{"signature": "val moduleAndClass =", "body": "if (moduleName == null) debugMetadata.className else <STR_LIT><EOL>"}
{"signature": "val longConcatString =", "body": "longChars.concatToString()<EOL>"}
{"signature": "fun sourceFriendsDependencies(modules: Collection<FirModuleData>) {", "body": "<EOL><INDENT><INDENT><INDENT>allFriendsDependencies += modules<EOL><INDENT><INDENT>}"}
{"signature": "when (projection.getVariance()) {", "body": "<EOL><INDENT><INDENT><INDENT>TypeVariance.IN -> if (!out) typeMarker.lowerType() ?: projection.getType() else null<EOL><INDENT><INDENT><INDENT>TypeVariance.OUT -> if (out) projection.getType() else null<EOL><INDENT><INDENT><INDENT>TypeVariance.INV -> null<EOL><INDENT><INDENT>}"}
{"signature": "fun testExtensions(obj: JsObject, key: Int, oldValue: Any?, newValue: Any) {", "body": "<EOL><INDENT>assertEquals(oldValue, obj[key])<EOL><INDENT>obj[key] = newValue<EOL><INDENT>assertEquals(newValue, obj[key])<EOL><INDENT>obj[key] = null<EOL><INDENT>assertEquals(null, obj[key])<EOL>}"}
{"signature": "val sharedImmutableFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val validationAction =", "body": "makeVerifyAction(::validationCallback)<EOL>"}
{"signature": "val objCMethodAnnotation =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val sortedMethods =", "body": "JavacList.from(methods.sortedWith(MembersPositionComparator(classPosition, methodsPositions)))<EOL>"}
{"signature": "val cBridgeArgument =", "body": "cToBridged(cParameter.name)<EOL>"}
{"signature": "val KOTLIN_SCRIPT_RUNTIME_PROP =", "body": "<STR_LIT><EOL>"}
{"signature": "if (x is String?){", "body": "<EOL><INDENT><INDENT>var k: String? = x<EOL><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<ULong>(<NUM_LIT>uL)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (parameterVariance == Variance.INVARIANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return projectionKind<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val IS_SUBTYPE<INDENT><INDENT><INDENT><INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "if (deprecated) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.reportDiagnostic(CallToDeprecatedOverrideOfHidden)<EOL><INDENT><INDENT>}"}
{"signature": "val dataFlowValueFactory =", "body": "DataFlowValueFactoryImpl(analysisContext.languageVersionSettings)<EOL>"}
{"signature": "val leftNonNullLabel =", "body": "Label()<EOL>"}
{"signature": "for (i in (<NUM_LIT>u.toUShort() + <NUM_LIT>u.toUShort()).toUShort()..(<NUM_LIT>u.toUShort() - <NUM_LIT>u.toUShort()).toUShort()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "fun testIdenticalInternalVisibility() {", "body": "}<EOL>internal fun testIdenticalInternalVisibility() {}"}
{"signature": "package prop.", "body": "`in`.`companion`.indirect.twice<EOL>"}
{"signature": "val reactVersion =", "body": "getPackageJson().overrides?.get(react)<EOL>"}
{"signature": "val generatedWords =", "body": "generatedCommentLine.trim().split(<STR_LIT>).map { it.trim() }<EOL>"}
{"signature": "if (transformedStatement is IrComposite) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>for (statement in transformedStatement.statements)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>+statement<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import <GameController/GCDevice.", "body": "h><EOL>"}
{"signature": "val defaultImplsOriginalMethods =", "body": "ConcurrentHashMap<IrSimpleFunction, IrSimpleFunction>()<EOL>"}
{"signature": "if (b != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun testSameLibraryTwiceInClasspath() {", "body": "<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(compileLibrary(<STR_LIT>), compileLibrary(<STR_LIT>)))<EOL><INDENT>}"}
{"signature": "if (this is SirErrorType && sirSession.errorTypeStrategy == ErrorTypeStrategy.Fail) {", "body": "<EOL><INDENT><INDENT><INDENT>reportErrorType(this.reason)<EOL><INDENT><INDENT>}"}
{"signature": "val psiType =", "body": "typeElement.type<EOL>"}
{"signature": "val elementTypeAsString =", "body": "elementType.erasedUpperBound.fqNameWhenAvailable?.asString()<EOL>"}
{"signature": "when (category) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>in <NUM_LIT>.<NUM_LIT> -> entries[category]<EOL><INDENT><INDENT><INDENT><INDENT>in <NUM_LIT>.<NUM_LIT> -> entries[category - <NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT>else -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var typesForB =", "body": "getStableTypes(b, languageVersionSettings)<EOL>"}
{"signature": "package<EOL>package lib<EOL>.", "body": ""}
{"signature": "if (remainingFeaturedLibraries.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>reporter.reportNotIncludedLibraries(libraries, remainingFeaturedLibraries)<EOL><INDENT>}"}
{"signature": "for (fileName in arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(dirs.contains(File(fileName)), fileName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allSrcKtFiles =", "body": "HashSet<String>()<EOL>"}
{"signature": "val shouldBeTrue =", "body": "<NUM_LIT>L in <NUM_LIT>L..<NUM_LIT>L<EOL>"}
{"signature": "val SIGNATURER =", "body": "KonanIdSignaturer(KonanManglerDesc)<EOL>"}
{"signature": "val gDouble =", "body": "FooDouble(<NUM_LIT>)<EOL>"}
{"signature": "fun foo(i: Any?) {", "body": "}"}
{"signature": "if (defaultValue != null && !canBeEvaluatedAtCompileTime(defaultValue, context.session, allowErrors = true, calledOnCheckerStage = true)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(defaultValue.source, FirErrors.ANNOTATION_PARAMETER_DEFAULT_VALUE_MUST_BE_CONSTANT, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val firstValue =", "body": "values.first()<EOL>"}
{"signature": "val typeParam =", "body": "A::class.members.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val srcFiles =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>).map { File(TEST_DATA_DIR, it) }<EOL>"}
{"signature": "for (b in stream) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result += b<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lastStage =", "body": "qualifiedExpression === expression<EOL>"}
{"signature": "fun assertNull(value: Any?) {", "body": "<EOL><INDENT>kotlin.test.assertNull(value)<EOL>}"}
{"signature": "fun visitBinaryAndExitNode(node: BinaryAndExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val conditionIsOver =", "body": "Label()<EOL>"}
{"signature": "val I<NUM_LIT>_REINTERPRET_F<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "fun resetLineNumber() {", "body": "<EOL><INDENT><INDENT>lastLineNumber = <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun testLambdaInInlineFunction() {", "body": "<EOL><INDENT>}"}
{"signature": "val METADATA_TARGET_NAME =", "body": "KotlinMetadataTarget.METADATA_TARGET_NAME<EOL>"}
{"signature": "var isDefinitelyInitialized =", "body": "ctxt.exitInitState?.definitelyInitialized() ?: false<EOL>"}
{"signature": "val isObjectGetter =", "body": "irGetter?.origin == JsLoweredDeclarationOrigin.OBJECT_GET_INSTANCE_FUNCTION<EOL>"}
{"signature": "val interopManifest =", "body": "getManifest(<STR_LIT>)<EOL>"}
{"signature": "val evaluatedMapping =", "body": "mutableMapOf<Name, FirExpression>()<EOL>"}
{"signature": "var HYP =", "body": "sqrt(<NUM_LIT>)<EOL>"}
{"signature": "if (currentClassOptimizationDecision != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nearestOptimizationDecision = currentClassOptimizationDecision<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var isNegate =", "body": "false<EOL>"}
{"signature": "if (!isPrimitiveTypeOrWrapper) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>codegen.mv.aconst(null)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val UNARY_PLUS<INDENT><INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(predicate: (Char) -> Boolean) {", "body": "<EOL><INDENT>!predicate('c')<EOL>}"}
{"signature": "fun replaceInitializer(newInitializer: FirExpression?) {", "body": "}<EOL><EOL><INDENT>override fun replaceDelegate(newDelegate: FirExpression?) {}"}
{"signature": "if (withAdditionalAnnotations && additionalAnnotationsProvider.isSpecialQualifier(qualifiedName)) {", "body": "<EOL><INDENT><INDENT><INDENT>return additionalAnnotationsProvider.findSpecialAnnotation(this, qualifiedName, owner)<EOL><INDENT><INDENT>}"}
{"signature": "val relevantParams =", "body": "argsParams.asSequence()<EOL>"}
{"signature": "val usedReferenceTypes =", "body": "usedTypes.filter { typeTranslator.isMappedToReference(it) }<EOL>"}
{"signature": "val sdkRoot =", "body": "KtTestUtil.getAndroidSdkSystemIndependentPath()<EOL>"}
{"signature": "val ptrToT =", "body": "ptrToLong<NUM_LIT> + <NUM_LIT><EOL>"}
{"signature": "val WITH_CUSTOM_NAME =", "body": "setOf(LIBRARY, NATIVE)<EOL>"}
{"signature": "val testConfig =", "body": "scriptCompilationConfiguration(includedFragments)<EOL>"}
{"signature": "package fragment in order for check visibilities between modules<EOL>.", "body": ""}
{"signature": "val inlineScopesTestDir =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "val tempDirectoryForRemoval =", "body": "File(outputFiles.mainFileName + <STR_LIT>)<EOL>"}
{"signature": "var functionReferenceWithDefaultValueFeaturePassedExplicitly =", "body": "false<EOL>"}
{"signature": "fun usage(a: Aliased) {", "body": "<EOL><INDENT>aliased()<EOL>}"}
{"signature": "val firTypeScope =", "body": "containingClass.unsubstitutedScope(context)<EOL>"}
{"signature": "fun visitIntegerLiteralOperatorCall(integerLiteralOperatorCall: FirIntegerLiteralOperatorCall) {", "body": "<EOL><INDENT><INDENT>visitElement(integerLiteralOperatorCall)<EOL><INDENT>}"}
{"signature": "val newLines =", "body": "this?.contentLines.orEmpty() + lines<EOL>"}
{"signature": "var operationCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val _testCases =", "body": "mutableMapOf<String, BasicTestCase<F>>()<EOL>"}
{"signature": "if (child != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return getEndOffset(child)<EOL><INDENT><INDENT>}"}
{"signature": "package bar, then `import bar.", "body": "Foo` is valid. This is an arguable feature and a candidate for<EOL>"}
{"signature": "if (samClass.isInheritedFromSerializable()) {", "body": "<EOL><INDENT><INDENT><INDENT>shouldBeSerializable = true<EOL><INDENT><INDENT>}"}
{"signature": "val fileOutsideBaseDir =", "body": "baseDir.resolve(<STR_LIT>).normalize()<EOL>"}
{"signature": "if (it.getNextSiblingIgnoringWhitespaceAndComments() is PsiErrorElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val structureElement = declarationToStructureElement[it] ?: return@forEach<EOL><INDENT><INDENT><INDENT><INDENT>val comment = structureElement.createComment()<EOL><INDENT><INDENT><INDENT><INDENT>elementToComment[it] = comment<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!element.lighterASTNode.hasChildrenInSet(reachable)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return super.markKtDiagnostic(element, diagnostic)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (old.hasEnumValueId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkStringEquals(old.enumValueId, new.enumValueId)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val PROTO_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "val encoded =", "body": "Json.encodeToString(serializer, value)<EOL>"}
{"signature": "val testRunner =", "body": "createProperTestRunner(testRun, testRunSettings)<EOL>"}
{"signature": "fun addFriendDependency(module: KtModule) {", "body": "<EOL><INDENT><INDENT>directFriendDependencies.add(module)<EOL><INDENT>}"}
{"signature": "val digitValue =", "body": "digit and <NUM_LIT>x<NUM_LIT>F<EOL>"}
{"signature": "val reversedCoefficient =", "body": "<NUM_LIT> - coefficient<EOL>"}
{"signature": "val GET_FIRST_LIST_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun funJ<NUM_LIT>() {", "body": "}"}
{"signature": "val refValuesByNewInsn =", "body": "LinkedHashMap<TypeInsnNode, CapturedVarDescriptor>()<EOL>"}
{"signature": "if (expression.value.type == data?.coercion?.type) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.folded = true<EOL><INDENT><INDENT><INDENT><INDENT>expression.type = expression.value.type<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var rebuildingAllKotlin =", "body": "false<EOL>"}
{"signature": "fun test(@ann p: Int) {", "body": "<EOL><EOL>}"}
{"signature": "val simpleSubArgumentType =", "body": "subArgumentType.asSimpleType()<EOL>"}
{"signature": "val negMagnitudeBits =", "body": "(-abs(magnitude)).toBits()<EOL>"}
{"signature": "if (stubList == null) {", "body": "<EOL><INDENT><INDENT>val stubTree = StubTreeLoader.getInstance().readOrBuild(ktElement.project, virtualFile, null)<EOL><INDENT><INDENT>stubList = stubTree?.plainList ?: emptyList()<EOL><INDENT><INDENT>ktFile.putUserData(STUBS_KEY, WeakReference(stubList))<EOL><INDENT>}"}
{"signature": "for (x in xs.indices) {", "body": "<EOL><INDENT><INDENT>println(x)<EOL><INDENT>}"}
{"signature": "if (vCap > vHead.size) {", "body": "<EOL><INDENT><INDENT><INDENT>val newSize = maxOf(<NUM_LIT> * vHead.size, vCap)<EOL><INDENT><INDENT><INDENT>vHead = vHead.copyOf(newSize)<EOL><INDENT><INDENT>}"}
{"signature": "val listAndList =", "body": "listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>) + listOf(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val compileLinuxArm<NUM_LIT> =", "body": "project.tasks.getByName(<STR_LIT>) as KotlinNativeCompile<EOL>"}
{"signature": "if (receiverType == scriptClassReceiver.type) {", "body": "<EOL><INDENT><INDENT><INDENT>getAccessCallForScriptInstance(data, expression.startOffset, expression.endOffset, origin, originalReceiverParameter)<EOL><INDENT><INDENT>}"}
{"signature": "fun testLambdaInConstructor() {", "body": "<EOL><INDENT>}"}
{"signature": "val serviceInterface =", "body": "serviceDescriptor.serviceInterface<EOL>"}
{"signature": "if (!this._shownError) {", "body": "<EOL><INDENT><INDENT><INDENT>this._shownError = true;<EOL><INDENT><INDENT><INDENT>throw new Error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun resetDirectivesBuilder() {", "body": "<EOL><INDENT><INDENT><INDENT>directivesBuilder = RegisteredDirectivesParser(directivesContainer, assertions)<EOL><INDENT><INDENT>}"}
{"signature": "fun runBlock() {", "body": "<EOL><INDENT><INDENT>block()<EOL><INDENT>}"}
{"signature": "fun abstractMemberWithMoreSpecificType(<EOL><INDENT><INDENT><INDENT>abstractMember: CallableMemberDescriptor,<EOL><INDENT><INDENT><INDENT>concreteMember: CallableMemberDescriptor<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT>typeMismatchOnInheritance(abstractMember, concreteMember)<EOL><INDENT><INDENT>}"}
{"signature": "if (resultNullability == ResultNullability.NOT_NULL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(if (it is NewCapturedType) it.withNotNullProjection() else it).makeSimpleTypeDefinitelyNotNullOrNotNull()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val test_ia =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i === a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a === i<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i !== a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a !== i<!><EOL>"}
{"signature": "import pagind.", "body": "QueryPagingSource<EOL>"}
{"signature": "val markerShiftTemp =", "body": "getIndexAfterLastMarker(node)<EOL>"}
{"signature": "when (named.variant) {", "body": "<EOL><INDENT><INDENT>is EnumVariant -> writeEnumDef(named, indent)<EOL><INDENT>}"}
{"signature": "var stubTypeFound =", "body": "false<EOL>"}
{"signature": "for (i in <NUM_LIT> until partInternalNamesSorted.size) {", "body": "<EOL><INDENT><INDENT><INDENT>result[partInternalNamesSorted[i]] = partInternalNamesSorted[i - <NUM_LIT>]<EOL><INDENT><INDENT>}"}
{"signature": "val otherTarget =", "body": "other as? TargetWithSanitizer ?: return false<EOL>"}
{"signature": "val SOURCEINFORMATIONMARKEREND =", "body": "<STR_LIT><EOL>"}
{"signature": "if (declaration is FirPropertyAccessor && declaration.isDirectlyExternal(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirWebCommonErrors.WRONG_EXTERNAL_DECLARATION, <STR_LIT>, context)<EOL><INDENT><INDENT>}"}
{"signature": "val annDiff =", "body": "compareAnnotations(anns<NUM_LIT>, anns<NUM_LIT>) ?: continue<EOL>"}
{"signature": "fun testCharSequence(s: CharSequence, expectedSize: Int) {", "body": "<EOL><INDENT>assertEquals(expectedSize, s.length, s, <STR_LIT>)<EOL><INDENT>assertEquals(expectedSize == <NUM_LIT>, s.isEmpty(), s, <STR_LIT>)<EOL>}"}
{"signature": "val p  =", "body": "S(<STR_LIT>);<EOL>"}
{"signature": "if (argument is IrTypeProjection && argument.variance == Variance.IN_VARIANCE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>argument.type<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val functionsToEnter =", "body": "mutableSetOf<JsFunction>()<EOL>"}
{"signature": "val placeHolder =", "body": "Any()<EOL>"}
{"signature": "val moduleDependencies =", "body": "dependencies.sure { <STR_LIT> }<EOL>"}
{"signature": "val kGetTypeFuncType =", "body": "LlvmFunctionSignature(LlvmRetType(codegen.kTypeInfoPtr))<EOL>"}
{"signature": "val topLevelDeclarationsWithStableName =", "body": "mutableMapOf<String, MutableList<FirJsStableName>>()<EOL>"}
{"signature": "val dwarfVersion =", "body": "node(llvm.llvmContext, llvmTwo, dwarfVersionMetaDataNodeName, llvm.int<NUM_LIT>(DWARF.dwarfVersion(config)))<EOL>"}
{"signature": "val importStatements =", "body": "mutableMapOf<JsVars, String>()<EOL>"}
{"signature": "val testDataDir =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "if (declaration.valueParameters.size != original.valueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val subReturnType =", "body": "subDescriptor.returnType!!<EOL>"}
{"signature": "val annotationParameter =", "body": "text.substring(startIndex + <NUM_LIT>, endIndex)<EOL>"}
{"signature": "var indexType =", "body": "Type.INT_TYPE<EOL>"}
{"signature": "if (p.isStoreOperation() && (p as VarInsnNode).`var` == lv.index) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>potentiallyTemporaryStores.remove(p)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val filteredExtractedConditions =", "body": "extractedConditions.filter { it.const.value !in seenConditions }<EOL>"}
{"signature": "package from there first.", "body": "Since we support AGP versions<EOL>"}
{"signature": "val testTypeRegex =", "body": "<STR_LIT><STR_LIT><STR_LIT><EOL>"}
{"signature": "if (needsGroup) {", "body": "<EOL><INDENT><INDENT><INDENT>currentFunctionScope.metrics.recordGroup()<EOL><INDENT><INDENT>}"}
{"signature": "val currentInfo =", "body": "getInfoForDeclaration(symbol)<EOL>"}
{"signature": "if (options.mode != WITH_COMPILATION) {", "body": "<EOL><INDENT><INDENT><INDENT>doNotGenerateCode()<EOL><INDENT><INDENT>}"}
{"signature": "val allSuperInterfaces =", "body": "mutableMapOf<String, List<String>>()<EOL>"}
{"signature": "val zipArchive =", "body": "tmpDir.child(<STR_LIT>)<EOL>"}
{"signature": "if (ErrorUtils.containsUninferredTypeVariable(expectedType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>matchStatus = ArgumentMatchStatus.MATCH_MODULO_UNINFERRED_TYPES<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun exitStringConcatenationCall(call: FirStringConcatenationCall) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitStringConcatenationCall(call).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (!reportOutputFiles) null else fun(sources: List<File>, output: File) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(OUTPUT, OutputMessageUtil.formatOutputMessage(sources, output))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val packagePartsCache =", "body": "session.firCachesFactory.createCache(::tryComputePackagePartInfos)<EOL>"}
{"signature": "while (a >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val intRangeName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (orderedProperties.size == properties.size) {", "body": "<EOL><INDENT><INDENT>orderedProperties<EOL><INDENT>}"}
{"signature": "val asmTypeForIterator =", "body": "Type.getType(Iterator::class.java)<EOL>"}
{"signature": "val kotlinTestJsInputFile =", "body": "InputFile(InputResource.file(kotlinTestJsLib), null, kotlinTestJsLibOutput, <STR_LIT>)<EOL>"}
{"signature": "if (reenterCount_.value > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>reenterCount_.decrementAndGet()<EOL><INDENT><INDENT>}"}
{"signature": "val overriddenPerSupertype =", "body": "setMultimapOf<ConeClassLikeLookupTag, S>()<EOL>"}
{"signature": "if (v.ok()) {", "body": "<EOL><INDENT><INDENT>v = C()<EOL><INDENT>}"}
{"signature": "val nativeDistributionDependencies =", "body": "getNativeDistributionDependencies(commonizerTarget)<EOL>"}
{"signature": "fun addValue(t: Boolean, weight: Long?) {", "body": "<EOL><INDENT><INDENT>myValue = (myValue ?: false) || t<EOL><INDENT>}"}
{"signature": "val we<NUM_LIT>we<NUM_LIT> =", "body": "we<NUM_LIT> + we<NUM_LIT><EOL>"}
{"signature": "val lengthPropName =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!>String::length.name<!><EOL>"}
{"signature": "val sourceDestinationDir =", "body": "File(workDir, sourceDirName)<EOL>"}
{"signature": "if (value is IrGetValue && value.symbol.owner.isImmutable) {", "body": "<EOL><INDENT><INDENT>irTemporary = null<EOL><INDENT><INDENT>valueSymbol = value.symbol<EOL><INDENT>}"}
{"signature": "val enhanced =", "body": "symbol.fir<EOL>"}
{"signature": "if (mainFunction.isTopLevel) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JvmFileClassUtil.getFileClassInfoNoResolve(file).facadeClassFqName<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (element in c) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>hashCode += (element?.hashCode() ?: <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitLoop(loop: IrLoop, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLoop(loop)<EOL><INDENT>}"}
{"signature": "if (cache === notOnJava<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun processCallableReferenceAccess(callableReferenceAccess: FirCallableReferenceAccess) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (callableReferenceAccess.dispatchedWithoutImport) return<EOL><INDENT><INDENT><INDENT><INDENT>processErrorNameReference(callableReferenceAccess)<EOL><EOL><INDENT><INDENT><INDENT><INDENT>val referencedByName = callableReferenceAccess.callableReferenceName ?: return<EOL><INDENT><INDENT><INDENT><INDENT>saveCallable(callableReferenceAccess, referencedByName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val INTEROP_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitEnumEntry(enumEntry: FirEnumEntry, data: FirRecorderData) {", "body": "<EOL><INDENT><INDENT><INDENT>val symbol = enumEntry.symbol<EOL><INDENT><INDENT><INDENT>data.state.callableContainerMap[symbol] = data.file<EOL><INDENT><INDENT>}"}
{"signature": "for (seed in listOf(v, -v)) {", "body": "<EOL><INDENT><INDENT><INDENT>testSameSeededRandoms(Random(seed), Random(seed), seed)<EOL><INDENT><INDENT>}"}
{"signature": "if (endCaretPosition < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (x > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>test(x - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "for ((_, argument) in objCName.annotation.argumentMapping.mapping) {", "body": "<EOL><INDENT><INDENT><INDENT>if (argument is FirLiteralExpression<*>) continue<EOL><INDENT><INDENT><INDENT>reporter.reportOn(argument.source, NON_LITERAL_OBJC_NAME_ARG, context)<EOL><INDENT><INDENT>}"}
{"signature": "val myRes =", "body": "Way(childRes.length + <NUM_LIT>, next)<EOL>"}
{"signature": "if (irClass.isData) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>allDeclarations += dataClassMembersGenerator.generateDataClassMembers(klass, irClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isEhxaustive =", "body": "thenExpression != null && elseExpression != null<EOL>"}
{"signature": "if (parent is KtQualifiedExpression && parent.selectorExpression == calleeExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return findLeftOutermostQualifiedExpression(parent)<EOL><INDENT><INDENT>}"}
{"signature": "val innerElvisWhen =", "body": "elvisLhs.statements[<NUM_LIT>] as IrWhen<EOL>"}
{"signature": "if (symbol <= <NUM_LIT>xFF) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>byteArray[length++] = symbol.toByte()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var wasCompletionRun =", "body": "false<EOL>"}
{"signature": "var currPagesAvailable =", "body": "wasmMemorySize()<EOL>"}
{"signature": "val leftPsi =", "body": "binaryExpression.left ?: return null<EOL>"}
{"signature": "val oldField =", "body": "backingField ?: return null<EOL>"}
{"signature": "fun testKotlinNoReflect() {", "body": "<EOL><INDENT><INDENT>kotlincInProcess(<STR_LIT>, <STR_LIT>, tmpdir.path)<EOL><EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir.path,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedStdout = <STR_LIT><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (!AbstractTypeChecker.equalTypes(typeCheckerState, subValueParameters[index].type, superValueParameter.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return incompatible(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val sleeper =", "body": "SleeperWithBackoff()<EOL>"}
{"signature": "val cEnumClassGenerator =", "body": "<EOL><INDENT><INDENT><INDENT>CEnumClassGenerator(context, cEnumCompanionGenerator, cEnumVarClassGenerator)<EOL>"}
{"signature": "var renderedType =", "body": "this.render().replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (memberDeclaration.typeParameters.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>memberDeclaration.typeParameters.renderTypeParameters()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun clearClasspath() {", "body": "<EOL><INDENT>  _builder.clearClasspath()<EOL><INDENT>}"}
{"signature": "val workDirPath =", "body": "FileUtil.toSystemIndependentName(workDir.absolutePath)<EOL>"}
{"signature": "val JAVAX_TYPE_QUALIFIER_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (position<NUM_LIT> != null && position<NUM_LIT>path == classSource.path) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (isIncompatibleInAccordanceWithBuiltInOverridabilityRules(superDescriptor, subDescriptor, subClassDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Result.INCOMPATIBLE<EOL><INDENT><INDENT>}"}
{"signature": "val shortFloorLong =", "body": "byte.floorDiv(long)<EOL>"}
{"signature": "for (declaration in ownerInfo.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT>index.putToIndex(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val resultValueArgument =", "body": "lambdaResult as? PSIKotlinCallArgument ?: continue<EOL>"}
{"signature": "val lockBasedLazyResolveStorageManager =", "body": "LockBasedLazyResolveStorageManager(globalContext.storageManager)<EOL>"}
{"signature": "if (declaration is IrConstructor || declaration.returnType == context.irBuiltIns.unitType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>body.statements += irReturn(irCall(symbols.theUnitInstance, context.irBuiltIns.unitType))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (size > <NUM_LIT>x<NUM_LIT>F) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>write(<NUM_LIT>x<NUM_LIT> or (size and <NUM_LIT>x<NUM_LIT>F))<EOL><INDENT><INDENT><INDENT><INDENT>size = size ushr <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package bottles<EOL>.", "body": ""}
{"signature": "val ignoreDecompiledClasses =", "body": "isTestAgainstCompiledCode<EOL>"}
{"signature": "val newDeclaration =", "body": "getTransformedSymbol(expression.symbol) ?: return expression<EOL>"}
{"signature": "val kFunctionImplConstructorSymbol =", "body": "kFunctionImplSymbol.constructors.single()<EOL>"}
{"signature": "if (userTypeRef.customRenderer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(userTypeRef.toString())<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONCURRENT_HASH_MAP_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun lock() {", "body": "<EOL><INDENT>isLocked = true<EOL>}"}
{"signature": "for (i in a..M) {", "body": "<EOL><INDENT><INDENT>n++<EOL><INDENT>}"}
{"signature": "var certainArguments =", "body": "<NUM_LIT><EOL>"}
{"signature": "val scopesAreTheSame =", "body": "scopes === staticScopes<EOL>"}
{"signature": "fun A(x: Any) {", "body": "}<EOL><INDENT><INDENT><STR_LIT>\",<EOL><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>@Composable<EOL><INDENT><INDENT><INDENT>fun Example() {<EOL><INDENT><INDENT><INDENT><INDENT>A(listOf(<STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (regularClass.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>context.storeClassIfNotNested(regularClass, session)<EOL><INDENT><INDENT>}"}
{"signature": "val scriptingClasspath =", "body": "listOf(<STR_LIT>).map { File(kotlinPaths.libPath, it) }<EOL>"}
{"signature": "var testedEquals =", "body": "false<EOL>"}
{"signature": "val actualSymbol =", "body": "actualSymbols[it.value]<EOL>"}
{"signature": "val actualAnnotations =", "body": "scriptContents.annotations<EOL>"}
{"signature": "fun jobFun() {", "body": "<EOL><INDENT><INDENT>status += <STR_LIT><EOL><INDENT>}"}
{"signature": "val INDEXER =", "body": "indexer(<NUM_LIT>)<EOL>"}
{"signature": "val PROHIBITED_STATIC_NAMES =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (fullyExpandedType is KtFunctionalType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val renderer = if (fullyExpandedType.isReflectType) AS_CLASS_TYPE else AS_FUNCTIONAL_TYPE<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderer.renderType(analysisSession, fullyExpandedType, typeRenderer, printer)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compareLong<NUM_LIT> =", "body": "LONG >= <NUM_LIT>L<EOL>"}
{"signature": "fun check(token: KtSingleValueToken, name: Name) {", "body": "<EOL><INDENT><INDENT><INDENT>val mappedToken = allEntries.remove(name)<EOL><INDENT><INDENT><INDENT>assertNotNull(mappedToken, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertEquals(token.value, mappedToken, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun processPackagePart(sourceFile: File, packagePartMetadata: ByteArray, binaryAst: ByteArray, inlineData: ByteArray) {", "body": "<EOL><INDENT><INDENT>_packageParts.put(sourceFile, TranslationResultValue(packagePartMetadata, binaryAst, inlineData))<EOL><INDENT>}"}
{"signature": "val classLiteralExpression =", "body": "receiverValue.expression as? KtClassLiteralExpression ?: return null<EOL>"}
{"signature": "var bound =", "body": "Long.MIN_VALUE<EOL>"}
{"signature": "if (ownerType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>append(typeToString(ownerType))<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>append(rawType.simpleName)<EOL><INDENT><INDENT>}"}
{"signature": "val spreadExpr =", "body": "singleSpreadElement.expression<EOL>"}
{"signature": "fun testResultValueViaKotlinc() {", "body": "<EOL><INDENT><INDENT>runWithKotlinc(<STR_LIT>, listOf(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val implicitConst =", "body": "isFinal && isStatic && origin == IrDeclarationOrigin.IR_EXTERNAL_JAVA_DECLARATION_STUB<EOL>"}
{"signature": "val caseBlock =", "body": "CoroutineBlock()<EOL>"}
{"signature": "for (ann in annotationsSource) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>ann,<EOL><INDENT><INDENT><INDENT><INDENT>FirErrors.UNSUPPORTED,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (distributionType.mustGeneratePlatformLibs) {", "body": "<EOL><INDENT><INDENT>PlatformLibrariesGenerator(<EOL><INDENT><INDENT><INDENT>project,<EOL><INDENT><INDENT><INDENT>konanTarget,<EOL><INDENT><INDENT><INDENT>project.konanHome,<EOL><INDENT><INDENT><INDENT>project.kotlinPropertiesProvider,<EOL><INDENT><INDENT><INDENT>project.konanPropertiesBuildService,<EOL><INDENT><INDENT>).generatePlatformLibsIfNeeded()<EOL><INDENT>}"}
{"signature": "var isElse =", "body": "false<EOL>"}
{"signature": "val reportLocation =", "body": "throwsAnnotationEntry ?: declaration<EOL>"}
{"signature": "val targetRequest =", "body": "arguments.target<EOL>"}
{"signature": "for (i in J.listOfNotNull()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val MIN_ARITY =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun wrapNoInline(f: () -> Unit) {", "body": "<EOL><INDENT>f()<EOL>}"}
{"signature": "val cst =", "body": "select(O<NUM_LIT>, O<NUM_LIT>)<EOL>"}
{"signature": "val restOfLine =", "body": "lines.firstOrNull()?.takeIf { it.isNotBlank() }?.let { <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "val outerIndex =", "body": "frameMap.enterTemp(AsmTypes.OBJECT_TYPE)<EOL>"}
{"signature": "if (binary.buildType.optimized) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun testAtomicValUncheckedCast() {", "body": "<EOL><INDENT><INDENT>assertEquals((s as AtomicRef<String>).value, <STR_LIT>)<EOL><INDENT><INDENT>bs.lazySet(arrayOf(arrayOf(Box(<NUM_LIT>), Box(<NUM_LIT>))))<EOL><INDENT><INDENT>assertEquals((bs as AtomicRef<Array<Array<Box>>>).value[<NUM_LIT>]!![<NUM_LIT>].b * <NUM_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "fun processAfterAllModules(someAssertionWasFailed: Boolean) {", "body": "}<EOL><EOL><INDENT>companion object {<EOL><INDENT><INDENT>const val DUMPED_IR_FOLDER_NAME = <STR_LIT><EOL><INDENT><INDENT>val AFTER_PREFIX = BeforeOrAfter.AFTER.name<EOL><INDENT><INDENT>val BEFORE_PREFIX = BeforeOrAfter.BEFORE.name<EOL><INDENT>}"}
{"signature": "if (originalExpression is FirSafeCallExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>originalExpression.replaceSelector(block)<EOL><INDENT><INDENT><INDENT>originalExpression<EOL><INDENT><INDENT>}"}
{"signature": "val KCALLABLE_CACHE_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val entriesWithoutJvmField =", "body": "kotlinOrigin.annotationEntries.filter { it.shortName?.identifier != <STR_LIT> }<EOL>"}
{"signature": "fun assertIndexOverflow(f: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>val ex = assertFailsWith<ArithmeticException>(block = f)<EOL><INDENT><INDENT><INDENT>assertTrue(ex.message!!.contains(<STR_LIT>, ignoreCase = true))<EOL><INDENT><INDENT>}"}
{"signature": "fun visitAnonymousInitializer(initializer: KtAnonymousInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val containerDescriptor =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lazyDeclarationResolver.resolveToDescriptor(initializer.containingDeclaration) as ClassDescriptorWithResolutionScopes<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c.anonymousInitializers.put(initializer, containerDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitTargetElement(targetElement: FirTargetElement, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTargetElement(targetElement)<EOL><INDENT>}"}
{"signature": "val fusStatisticsPath =", "body": "fusStatisticsPath<EOL>"}
{"signature": "val nextCheck =", "body": "functionGenerationContext.basicBlock(<STR_LIT>, catch.endLocation)<EOL>"}
{"signature": "val synchronisationBlock =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\"<EOL>"}
{"signature": "val isLocalReturn =", "body": "labelName == null || labelName in returnLabels<EOL>"}
{"signature": "val noPackagesKindFilter =", "body": "kindFilter.withoutKinds(DescriptorKindFilter.PACKAGES_MASK)<EOL>"}
{"signature": "fun sameVariance() {", "body": "}<EOL><EOL>@Ann<Ann<Any>><EOL>actual fun <!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>startProjection<!>() {}"}
{"signature": "val Yplus<NUM_LIT> =", "body": "<!NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION!>Y + <NUM_LIT><!><EOL>"}
{"signature": "val ans =", "body": "C::class.constructors.map { it.annotations.single().annotationClass.java.simpleName }.sorted()<EOL>"}
{"signature": "while (t.isArray()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>t = t.getArrayElementType(context.irBuiltIns)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun addIdSignature(key: IdSignature) {", "body": "<EOL><INDENT><INDENT>reachableTopLevels.add(key)<EOL><INDENT>}"}
{"signature": "val selectors =", "body": "splitSelector(selector)<EOL>"}
{"signature": "val globalStatePtr =", "body": "getGlobalInitStateFor(fileInitializer.parent as IrDeclarationContainer)<EOL>"}
{"signature": "fun updateScheme(scheme: Scheme) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun p() {", "body": "}<EOL><EOL>fun box(): String {<EOL><INDENT>var sum = <NUM_LIT><EOL><INDENT>for (i: Int? in sum downTo sum.toULong().countTrailingZeroBits())<EOL><INDENT><INDENT>p()<EOL><INDENT>return <STR_LIT><EOL>}"}
{"signature": "if (notCallableTypeConstructor != null) {", "body": "<EOL><INDENT><INDENT>diagnosticsHolder.addDiagnostic(<EOL><INDENT><INDENT><INDENT>NotCallableExpectedType(<EOL><INDENT><INDENT><INDENT><INDENT>argument,<EOL><INDENT><INDENT><INDENT><INDENT>expectedType,<EOL><INDENT><INDENT><INDENT><INDENT>notCallableTypeConstructor.requireIs()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val sortedInterfaceLayouts =", "body": "interfaceLayouts.sortedBy { it.classId }.toTypedArray()<EOL>"}
{"signature": "var skipScriptsInLtModeWarning =", "body": "false<EOL>"}
{"signature": "val fallThroughType =", "body": "aTry.type<EOL>"}
{"signature": "val suspendFunctionOriginalToView =", "body": "ConcurrentHashMap<IrSimpleFunction, IrSimpleFunction>()<EOL>"}
{"signature": "if (currentItem.line != <NUM_LIT> || currentItem.expectation != logItem.expectation) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(logItem)<EOL><INDENT><INDENT><INDENT>currentItem = logItem<EOL><INDENT><INDENT>}"}
{"signature": "val candidatesWithoutActualizedExpects =", "body": "filterOutActualizedExpectCandidates(candidates)<EOL>"}
{"signature": "val globalCatchBlock =", "body": "CoroutineBlock()<EOL>"}
{"signature": "val topLevelClassId =", "body": "generateSequence(classId, ClassId::outerClassId).last()<EOL>"}
{"signature": "val anonymizedValue =", "body": "metric.anonymization.anonymize(value)<EOL>"}
{"signature": "val lvStartIndex =", "body": "insnList.indexOf(lv.start)<EOL>"}
{"signature": "val matchingItem =", "body": "evalState.history.firstOrNull { it.id == compileResult.lineId }<EOL>"}
{"signature": "val nullableBoundRef =", "body": "C.nullableBoundRef()<EOL>"}
{"signature": "if (konanTarget == KonanTarget.IOS_ARM<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>args += <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val newTypeParameterDescriptor =", "body": "typeConstructor.originalTypeParameter<EOL>"}
{"signature": "if (A.FIRST.a == <NUM_LIT> && A.SECOND.a == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "var maskStartIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun test(vararg ss: String) {", "body": "<EOL><INDENT>ok = ss[<NUM_LIT>]<EOL>}"}
{"signature": "val PREAMBLE_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val hexCode =", "body": "it.code.toString(<NUM_LIT>)<EOL>"}
{"signature": "val annotationProcessors =", "body": "kaptExtension.processors<EOL>"}
{"signature": "if (projection is ConeKotlinTypeProjection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>projection.type.collectTypeParameters(c)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (b && <!CONDITION_TYPE_MISMATCH!>c<!>) {", "body": "}"}
{"signature": "val previousValueIntArray =", "body": "BinaryVersion.parseVersionArray(previousValue)<EOL>"}
{"signature": "if (!condition) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(msg())<EOL><INDENT>}"}
{"signature": "val prevDrain =", "body": "incomingEdges[<NUM_LIT>]<EOL>"}
{"signature": "val typeArgumentContainer =", "body": "if (callee is IrConstructor) callee.parentAsClass else callee<EOL>"}
{"signature": "for (typeParameterDescriptor in classDescriptor.declaredTypeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.addTypeParameter(typeParameter(typeParameterDescriptor))<EOL><INDENT><INDENT>}"}
{"signature": "if (configurables is ZephyrConfigurables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addNonEmpty(configurables.constructClangCC<NUM_LIT>Args())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (config.unifiedNullChecks) {", "body": "<EOL><INDENT><INDENT><INDENT>mv.invokestatic(IntrinsicMethods.INTRINSICS_CLASS_NAME, <STR_LIT>, <STR_LIT>, false)<EOL><INDENT><INDENT>}"}
{"signature": "val convertedType =", "body": "conversion.convertType(diagnosticParameter.type)<EOL>"}
{"signature": "val sealedClasses =", "body": "findSealedSupertypes(class<NUM_LIT>recompile, listOf(this))<EOL>"}
{"signature": "fun invoke(i<NUM_LIT>: Int) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "if (fileClassInfo.fileClassFqName != fqNameWhenAvailable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.classNameOverride[this] = JvmClassName.byInternalName(partClassType.internalName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (res == <NUM_LIT>L) {", "body": "<EOL><INDENT><INDENT>throw OutOfMemoryError()<EOL><INDENT>}"}
{"signature": "while (low <= high) {", "body": "<EOL><INDENT><INDENT>val mid = (low + high).ushr(<NUM_LIT>)<INDENT><INDENT> val midVal = storage[mid]<EOL><INDENT><INDENT>val cmp = uintCompare(midVal.toInt(), signedElement)<EOL><INDENT><INDENT>if (cmp < <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>low = mid + <NUM_LIT><EOL><INDENT><INDENT>else if (cmp > <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>high = mid - <NUM_LIT><EOL><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT>return mid<INDENT> }"}
{"signature": "if (delegatedConstructorCall.isSuper) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun topLevelFunInParameter(s: Some) {", "body": "}<EOL>fun Some.topLevelFunInExtension() {}"}
{"signature": "val resolvedGetCall =", "body": "context[BindingContext.INDEXED_LVALUE_GET, arrayAccessExpression] ?: return null<EOL>"}
{"signature": "val combinedExtras =", "body": "extras<NUM_LIT> + extras<NUM_LIT><EOL>"}
{"signature": "val interopObjCObjectBase =", "body": "interopClass(InteropFqNames.objCObjectBaseName)<EOL>"}
{"signature": "val inlineFunModule =", "body": "callee.fileOrNull?.module<EOL>"}
{"signature": "if (valueParameter == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newArgumentMapping[arg] = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val propertyOwner =", "body": "field.property<EOL>"}
{"signature": "if (psi != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>psiSetViaFir += psi<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val allDependsOnDependencies =", "body": "useSiteModuleData.allDependsOnDependencies<EOL>"}
{"signature": "val errBarViaBB =", "body": "BB.<!UNRESOLVED_REFERENCE!>bar<!>()<EOL>"}
{"signature": "if (y is String) {", "body": "<EOL><INDENT><INDENT>x.length<INDENT> }"}
{"signature": "if (replaced != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val alreadyIndexed =", "body": "indexedRoots.toHashSet()<EOL>"}
{"signature": "fun usage(foo: Int) {", "body": "<EOL><INDENT>foo()<EOL>}"}
{"signature": "val genSourceNameObj =", "body": "genSourceNameField.get(filerObj)<EOL>"}
{"signature": "fun addSource() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addFileWithContent(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>package androidx.compose.compiler.test<EOL><INDENT><INDENT><INDENT>const val number = <NUM_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (hasDefaultValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinNameReferenceExpressionStubImpl(parameterStub, StringRef.fromString(COMPILED_DEFAULT_PARAMETER_VALUE))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val incrementOrDecrement =", "body": "isIncrementOrDecrement(operationType)<EOL>"}
{"signature": "var elems =", "body": "ArrayList<Int>()<EOL>"}
{"signature": "val tableDescriptor =", "body": "field.module.resolveClassByFqName(LombokNames.TABLE, NoLookupLocation.FROM_SYNTHETIC_SCOPE) ?: return<EOL>"}
{"signature": "if (result) {", "body": "<EOL><INDENT><INDENT><INDENT>isCrossinline = isCrossinline && next.isCrossinline<EOL><INDENT><INDENT><INDENT>isNoinline = isNoinline && next.isNoinline<EOL><INDENT><INDENT>}"}
{"signature": "fun test(<EOL><INDENT>w: (A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A) -> Unit,<EOL><INDENT>vararg x: Function<NUM_LIT><*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, Unit><EOL>) {", "body": "<EOL><INDENT>bar(::foo)<EOL><INDENT>bar(x)<EOL>}"}
{"signature": "val kmClassCopy =", "body": "metadata.write().readAsKmClass()<EOL>"}
{"signature": "var isStarProjection =", "body": "false<EOL>"}
{"signature": "if (next > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(next, value + value.ulp)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (false) {", "body": "<EOL><INDENT><INDENT>val x = <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun test(b: Base<String>, d: Derived, d<NUM_LIT>: Derived<NUM_LIT>) {", "body": "<EOL><INDENT>b.foo(x = <STR_LIT>)<EOL><INDENT>b.foo(y = <STR_LIT>)<EOL><INDENT>d.foo(x = <STR_LIT>)<EOL><INDENT>d.foo(y = <STR_LIT>)<EOL><INDENT>d<NUM_LIT>foo(x = <STR_LIT>)<EOL><INDENT>d<NUM_LIT>foo(y = <STR_LIT>)<EOL>}"}
{"signature": "fun visitNamedFunction(namedFunction: KtNamedFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitNamedFunction(namedFunction)<EOL><INDENT><INDENT><INDENT>block(namedFunction)<EOL><INDENT><INDENT>}"}
{"signature": "fun testWithExpectedType() {", "body": "<EOL><INDENT>val extFun_AB_A: IA.(IB) -> Unit = IA::extFun<EOL><INDENT>val extFun_AA_B: IA.(IA) -> Unit = IB::<!NONE_APPLICABLE!>extFun<!><EOL><INDENT>val extFun_BB_A: IB.(IB) -> Unit = IA::extFun<EOL><INDENT>val extFun_BA_B: IB.(IA) -> Unit = IB::extFun<EOL><INDENT>val extFun_BB_B: IB.(IB) -> Unit = IB::<!OVERLOAD_RESOLUTION_AMBIGUITY!>extFun<!><EOL>}"}
{"signature": "if (!superInterface.hasAnnotation(JsPlainObjectsAnnotations.jsPlainObjectAnnotationClassId, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>superType.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirJsPlainObjectsErrors.JS_PLAIN_OBJECT_CAN_EXTEND_ONLY_OTHER_JS_PLAIN_OBJECTS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classSymbol.classId.asFqNameString(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitElementWithResolveState(elementWithResolveState: FirElementWithResolveState) {", "body": "<EOL><INDENT><INDENT>visitElement(elementWithResolveState)<EOL><INDENT>}"}
{"signature": "if (!context.session.languageVersionSettings.supportsFeature(LanguageFeature.ContextReceivers)) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.reportDiagnostic(UnsupportedContextualDeclarationCall)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun bar(x: () -> Unit) {", "body": "<EOL><EOL>}"}
{"signature": "fun addAll(c: Collection<T>) {", "body": "<EOL><INDENT><INDENT>list.addAll(c)<EOL><INDENT>}"}
{"signature": "val selectorsToDefine =", "body": "mutableMapOf<String, MethodBridge>()<EOL>"}
{"signature": "val hasElementInParents =", "body": "implementation.element.elementAncestorsAndSelfDepthFirst().any { it == element }<EOL>"}
{"signature": "val actualAbiSnapshot =", "body": "lastBuildInfo.dependencyToAbiSnapshot[module]<EOL>"}
{"signature": "var string =", "body": "map[<NUM_LIT>]<EOL>"}
{"signature": "val divInt =", "body": "u / uai<EOL>"}
{"signature": "if (declaration is IrClass && declaration.isInner) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.declarations += innerClassesSupport.getOuterThisField(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val innerGenericType =", "body": "javaTypeOf<T<NUM_LIT><String, Unit>.Inner<IntRange>>()<EOL>"}
{"signature": "if (substitution.kind == EXACT_BOUND) {", "body": "<EOL><INDENT><INDENT>addNewBound(type, bound.kind)<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "val otherConstructors =", "body": "mutableSetOf<FirConstructor>()<EOL>"}
{"signature": "val jvmCommand =", "body": "System.getProperty(<STR_LIT>) + javaExePath<EOL>"}
{"signature": "fun addLast(e: Int?) {", "body": "}"}
{"signature": "val aConst =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun testTotalKotlinOnlyLightTree() {", "body": "<EOL><INDENT><INDENT>totalKotlinLight(true)<EOL><INDENT>}"}
{"signature": "fun testPrimitives() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val privateSetterName =", "body": "IdentifierEntity(<STR_LIT> + (ownerName as IdentifierEntity).value)<EOL>"}
{"signature": "fun reportFailure(<EOL><INDENT><INDENT>results: TestResultProcessor,<EOL><INDENT><INDENT>id: Any,<EOL><INDENT><INDENT>failure: KotlinTestFailure,<EOL><INDENT><INDENT>isAssertionFailure: Boolean,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>results.failure(<EOL><INDENT><INDENT><INDENT>id,<EOL><INDENT><INDENT><INDENT>failure,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val otherNeg =", "body": "other.isNegative();<EOL>"}
{"signature": "if (binary !is TestExecutable) {", "body": "<EOL><INDENT><INDENT>tasks.named(binary.compilation.target.artifactsTaskName).dependsOn(linkTask)<EOL><INDENT><INDENT>locateOrRegisterTask<Task>(LifecycleBasePlugin.ASSEMBLE_TASK_NAME).dependsOn(linkTask)<EOL><INDENT>}"}
{"signature": "when (callable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KmFunction -> pkg.functions += callable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KmProperty -> pkg.properties += callable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isRemovingBody =", "body": "dceRuntimeDiagnostic.removingBody()<EOL>"}
{"signature": "fun testEnums(a: Enum<*>) {", "body": "<EOL><INDENT>use(C.E)<EOL><INDENT>use(C.E<NUM_LIT>)<EOL><INDENT>use(a)<EOL>}"}
{"signature": "var exceptionCount =", "body": "<NUM_LIT>;<EOL>"}
{"signature": "for (field in fieldsToRemove) {", "body": "<EOL><INDENT><INDENT><INDENT>field.correspondingPropertySymbol?.owner?.backingField = null<EOL><INDENT><INDENT>}"}
{"signature": "val calleeIrType =", "body": "if (callee.isFromJava() && callee.type.isInlineClassType()) callee.type.makeNullable() else callee.type<EOL>"}
{"signature": "val causeProperty =", "body": "irClass.getOriginalPropertyByName(<STR_LIT>)<EOL>"}
{"signature": "val libraryHeader =", "body": "(packageAccessedHandler ?: SimplePackageAccessHandler).loadModuleHeader(library)<EOL>"}
{"signature": "fun case(){", "body": "<EOL><INDENT><!OVERLOAD_RESOLUTION_AMBIGUITY!>A<!>()<EOL>}"}
{"signature": "val newDispatchReceiverValue =", "body": "if (hasExtensionReceiver) dispatchReceiverValue else explicitReceiverValue<EOL>"}
{"signature": "if (this == from) {", "body": "<EOL><INDENT><INDENT><INDENT>block()<EOL><INDENT><INDENT><INDENT>to<EOL><INDENT><INDENT>}"}
{"signature": "if (q) {", "body": "<EOL><INDENT><INDENT><INDENT>c = C()<EOL><INDENT><INDENT>}"}
{"signature": "val remember =", "body": "ComposeCallableIds.remember.asSingleFqName()<EOL>"}
{"signature": "var backing =", "body": "arrayOfUninitializedElements<E>(initialCapacity)<EOL>"}
{"signature": "fun visitStringConcatenation(expression: IrStringConcatenation) {", "body": "<EOL><INDENT><INDENT>visitExpression(expression)<EOL><INDENT>}"}
{"signature": "if (call.isValueArgumentReorderingRequired()) {", "body": "<EOL><INDENT><INDENT><INDENT>generateCallWithArgumentReordering(irCall, startOffset, endOffset, call, irResultType, contextReceivers.size)<EOL><INDENT><INDENT>}"}
{"signature": "if (this is ValueParameterDescriptor && this.name == StandardNames.IMPLICIT_LAMBDA_PARAMETER_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT>return KtSymbolOrigin.SOURCE_MEMBER_GENERATED<EOL><INDENT><INDENT>}"}
{"signature": "if (value < <NUM_LIT>u) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT> + (value >= <NUM_LIT>u).toInt()<EOL><INDENT><INDENT>}"}
{"signature": "fun takeReference(block: (String) -> Unit) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>takeReference(ShortenReferences.DEFAULT::process)<EOL>}"}
{"signature": "for (type in PrimitiveInteropType.values()) {", "body": "<EOL><INDENT><INDENT><INDENT>writer.generateAllocWithValue(type)<EOL><INDENT><INDENT><INDENT>writer.appendLine()<EOL><INDENT><INDENT>}"}
{"signature": "if (fromIndex < <NUM_LIT> || toIndex > size) {", "body": "<EOL><INDENT><INDENT>throw IndexOutOfBoundsException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val bbb =", "body": "Bbb::class.declaredMemberFunctions.first { it.name == <STR_LIT> }.javaMethod<EOL>"}
{"signature": "val addedFunctions =", "body": "mutableListOf<IrFunction>()<EOL>"}
{"signature": "val classifierCache =", "body": "NullableCaffeineCache<ClassId, FirClassLikeSymbol<*>> { it.maximumSize(<NUM_LIT>) }<EOL>"}
{"signature": "fun dropMaxValue() {", "body": "<EOL><INDENT><INDENT>val range = <NUM_LIT>L..Int.MAX_VALUE + <NUM_LIT>L<EOL><INDENT><INDENT>assertEquals(listOf(Int.MAX_VALUE.toLong(), Int.MAX_VALUE + <NUM_LIT>L), range.drop(Int.MAX_VALUE))<EOL><INDENT>}"}
{"signature": "val irBuilder =", "body": "context.createIrBuilder(symbol, SYNTHETIC_OFFSET, SYNTHETIC_OFFSET)<EOL>"}
{"signature": "package builders<EOL>.", "body": ""}
{"signature": "if (s is String) {", "body": "<EOL><INDENT><INDENT>s = <NUM_LIT><EOL><INDENT><INDENT>bar(<!TYPE_MISMATCH!>s<!>)<EOL><INDENT>}"}
{"signature": "if (o >= o) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT><EOL><INDENT>}"}
{"signature": "when (x as? String) {", "body": "<EOL><INDENT><INDENT> *<INDENT> is CharSequence -> ...<EOL><INDENT><INDENT> *<INDENT> null -> ...<EOL><INDENT><INDENT> * }"}
{"signature": "val modifiedTime =", "body": "file.getLastModifiedTime()<EOL>"}
{"signature": "fun x(p: X) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias B = Long<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias X = B<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x(p: X) {}"}
{"signature": "else if (isAbstract(method.access)) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "val singleParent =", "body": "clsLoader.parent<EOL>"}
{"signature": "if (!languageVersionSettings.supportsFeature(LanguageFeature.BoundCallableReferences)) {", "body": "<EOL><INDENT><INDENT><INDENT>c.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.receiverExpression!!,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageFeature.BoundCallableReferences to languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinVersionStr =", "body": "if (isKts) <STR_LIT>$artifactVersionProperty\\<STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val localStatus =", "body": "computeStatusForNonIntersectionType(unwrappedSubjectType, session, whenExpression)<EOL>"}
{"signature": "val badJarFile =", "body": "File(tmpDir, <STR_LIT>)<EOL>"}
{"signature": "val firstChild =", "body": "ref.get().firstOrNull() ?: return null<EOL>"}
{"signature": "if (this.name in setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>annotations += <STR_LIT>DIVISION_BY_ZERO\\<STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "for (state in outputs) {", "body": "<EOL><INDENT><INDENT><INDENT>ProgressIndicatorAndCompilationCanceledStatus.checkCanceled()<EOL><INDENT><INDENT><INDENT>writeOutput(state.configuration, state.factory, mainClassFqName)<EOL><INDENT><INDENT>}"}
{"signature": "val callerPackage =", "body": "DescriptorUtils.getParentOfType(caller, PackageFragmentDescriptor::class.java) ?: return false<EOL>"}
{"signature": "val intersectionOverride =", "body": "intersectionContext.intersectionOverrides.getValueIfComputed(symbol)<EOL>"}
{"signature": "fun bar(xBar<NUM_LIT>: Int, xBar<NUM_LIT>: Int, xBar<NUM_LIT>: Int) {", "body": "<EOL><INDENT>baz(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>}"}
{"signature": "val TYPE_PARCELER_FQNAME =", "body": "FqName(TypeParceler::class.java.name)<EOL>"}
{"signature": "package qualified<EOL>.", "body": ""}
{"signature": "if (!isThereConstantEntriesButNulls(expression)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val serviceFile =", "body": "File(file, SERVICE_DIRECTORY_LOCATION + classId).takeIf { it.isFile } ?: return emptySet()<EOL>"}
{"signature": "if (!trueIfEqual) {", "body": "<EOL><INDENT><INDENT><INDENT>val trueLabel = Label()<EOL><INDENT><INDENT><INDENT>v.goTo(trueLabel)<EOL><INDENT><INDENT><INDENT>cleanupOnNullReceiver(v)<EOL><INDENT><INDENT><INDENT>v.mark(trueLabel)<EOL><INDENT><INDENT>}"}
{"signature": "val xPrefixesToExclude =", "body": "argsToExclude.filter { it.startsWith(<STR_LIT>) }.map { <STR_LIT> }<EOL>"}
{"signature": "val visitedModuleFragments =", "body": "hashSetOf<IrModuleFragment>()<EOL>"}
{"signature": "val fileContentsAfterSecondBuild =", "body": "stubFilesAfterSecondBuild[file]<EOL>"}
{"signature": "val stubNameAndArity =", "body": "stubMethod.nameAndArity<EOL>"}
{"signature": "val allKEq =", "body": "{ _: Boolean, _: Boolean -> kotlinEqualsIntrinsic }<EOL>"}
{"signature": "val coroutineSuspendedGetterSymbol =", "body": "context.coroutineSymbols.coroutineSuspendedGetter<EOL>"}
{"signature": "fun visitBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allLogicExpressionCheckers.check(binaryLogicExpression, data)<EOL><INDENT>}"}
{"signature": "if (category == OUTPUT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportToCollector(text)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val toDouble =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.toDouble()<!><EOL>"}
{"signature": "val safeCastNegative =", "body": "safe_cast_negative().toString()<EOL>"}
{"signature": "for ((descriptor, parameter) in valueParameterDescriptors.zip(valueParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT>ForceResolveUtil.forceResolveAllContents(descriptor.annotations)<EOL><INDENT><INDENT><INDENT>resolveDefaultValue(descriptor, parameter, contextForDefaultValue)<EOL><INDENT><INDENT>}"}
{"signature": "if (typeVariableWithCapturedConstraint == null) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.error(debugMessage(<STR_LIT>, inferenceErrorData))<EOL><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT>}"}
{"signature": "if (!Regex(expectedPattern).matches(actualLine)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>$actualLine\\<STR_LIT>$expectedPattern\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import runtime global from it.", "body": "<EOL>"}
{"signature": "fun test_<NUM_LIT>(inv: Inv<NUM_LIT><A, B, C>) {", "body": "<EOL><INDENT>inv.k().k().foo()<EOL><INDENT>inv.k().t().bar()<EOL><INDENT>inv.t().baz()<EOL>}"}
{"signature": "fun legacyRegisterCompilerExtensions(project: Project, module: TestModule, configuration: CompilerConfiguration) {", "body": "<EOL><INDENT><INDENT>SyntheticResolveExtension.registerExtension(project, SerializableLike())<EOL><INDENT>}"}
{"signature": "val buildGradle =", "body": "resolve(<STR_LIT>)<EOL>"}
{"signature": "if (symbol is KtNamedClassOrObjectSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isExternal) add(KtTokens.EXTERNAL_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isInline) add(KtTokens.INLINE_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isData) add(KtTokens.DATA_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isFun) add(KtTokens.FUN_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isInner) add(KtTokens.INNER_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (mixin) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOf()<EOL><INDENT><INDENT>}"}
{"signature": "val buildNumbers =", "body": "buildsInfo.map { it.buildNumber }<EOL>"}
{"signature": "if (canRemoveInsn(includeDup = i > unboxMethodIndex)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.instructions.remove(if (i < unboxMethodIndex) unboxMethodCall.previous.previous else unboxMethodCall.previous)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_SOURCES =", "body": "<STR_LIT><EOL>"}
{"signature": "val singleFileStrategy =", "body": "cacheDeserializationStrategy as? CacheDeserializationStrategy.SingleFile<EOL>"}
{"signature": "val catchEnterNode =", "body": "catchBlocksInProgress.pop()<EOL>"}
{"signature": "val memberFilter =", "body": "kindFilter exclude DescriptorKindExclude.NonExtensions<EOL>"}
{"signature": "val txt =", "body": "Thing(<STR_LIT>)<EOL>"}
{"signature": "val parameterIsDynamic =", "body": "descriptor.extensionReceiverParameter!!.value.type.isDynamic()<EOL>"}
{"signature": "val kotlinClass =", "body": "(type as IrSimpleType).arguments.singleOrNull()?.typeOrNull?.getClass()<EOL>"}
{"signature": "if (strIndex >= rightBound) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val isMain =", "body": "owner is KtNamedFunction && mainFunctionDetector.isMain(owner)<EOL>"}
{"signature": "val kaptIgnoredAnnotationFqName =", "body": "KaptIgnored::class.java.name<EOL>"}
{"signature": "var n =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun foo<NUM_LIT>(d: IntArray) {", "body": "}"}
{"signature": "val k<NUM_LIT>JsDceArgumentsFqName =", "body": "FqName(K<NUM_LIT>JSDceArguments::class.qualifiedName!!)<EOL>"}
{"signature": "val leftVariable =", "body": "getVariableIfStable(flowFromLeft, fir.leftOperand)<EOL>"}
{"signature": "if (containingDeclaration !is JavaCallableMemberDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (<NUM_LIT>==<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><NUM_LIT>javaClass<EOL><INDENT>}"}
{"signature": "val MODULE_KIND =", "body": "BasicWritableSlice<ModuleDescriptor, ModuleKind>(RewritePolicy.DO_NOTHING).apply { setDebugName(<STR_LIT>) }<EOL>"}
{"signature": "val DESCRIPTION =", "body": "<EOL><INDENT><STR_LIT> +<EOL>"}
{"signature": "fun fooInt(x: Int) {", "body": "}<EOL>fun foo<NUM_LIT>(vararg xs: Int) {}"}
{"signature": "val excludedNames =", "body": "aliasImportNames.mapNotNull { if (it.parent() == packageName) it.shortName() else null }<EOL>"}
{"signature": "for (varargArgument in argumentExpression.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val valueArgument = varargArgument.findSourceKtExpressionForCallArgument() ?: return<EOL><INDENT><INDENT><INDENT><INDENT>argumentMapping[valueArgument] = parameterSymbol<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val filesToRebuild =", "body": "updater.collectFilesToRebuildSignatures(filesWithModifiedExportsOrImports)<EOL>"}
{"signature": "val pBase =", "body": "cBase.permittedSubclasses.mapTo(HashSet()) { it.simpleName ?: <STR_LIT> }<EOL>"}
{"signature": "val filesLeft =", "body": "expectedOutputs.map { outputDirectory.resolve(it).relativeTo(outputDirectory) }<EOL>"}
{"signature": "if (inlineClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(LanguageFeature.InlineClasses, LanguageFeature.State.ENABLED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val localFloatToString =", "body": "<NUM_LIT>f.<!EVALUATED{IR}(<STR_LIT>)!>toString()<!><EOL>"}
{"signature": "fun store(<EOL><INDENT><INDENT><INDENT>compiledScript: CompiledScript, script: SourceCode, scriptCompilationConfiguration: ScriptCompilationConfiguration<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val rightComputation =", "body": "<EOL><INDENT><INDENT><INDENT>getNonTrivialComputation(rightExpression, bindingTrace, moduleDescriptor) ?: return ConditionalDataFlowInfo.EMPTY<EOL>"}
{"signature": "if (xmlText == null) {", "body": "}"}
{"signature": "val originalFilesToCheck =", "body": "originalArtifact.allFiles()<EOL>"}
{"signature": "for (typeArgument in coneType.typeArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkConeType(typeArgument.type)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mainRun =", "body": "assertNotNull(kotlin.jvm().mainRun.await())<EOL>"}
{"signature": "val numberOfStatements =", "body": "block.statements.size<EOL>"}
{"signature": "fun recordMethod(member: JavaMember, descriptor: SimpleFunctionDescriptor) {", "body": "}<EOL><EOL><INDENT>override fun recordConstructor(element: JavaElement, descriptor: ConstructorDescriptor) {}"}
{"signature": "val byteContent =", "body": "fileContent ?: file.contentsToByteArray(false)<EOL>"}
{"signature": "if (functionDescriptors.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>MISSING_STDLIB.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression, <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return noTypeInfo(context)<EOL><INDENT><INDENT>}"}
{"signature": "fun recordDelegateFieldMappedToBackingField(field: FirField, irFieldSymbol: IrFieldSymbol) {", "body": "<EOL><INDENT><INDENT>fieldCache[field] = irFieldSymbol<EOL><INDENT>}"}
{"signature": "val SUPPORTED_PRESETS =", "body": "emptyMap<String, List<String>>()<EOL>"}
{"signature": "fun testFiltersNegativeGlob() {", "body": "<EOL><INDENT><INDENT>doTestFilters(Filter(listOf(), listOf(<STR_LIT>, <STR_LIT>), listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)))<EOL><INDENT>}"}
{"signature": "val typeParameterTarget =", "body": "buildEnumEntry(elementTypeEnum, <STR_LIT>)<EOL>"}
{"signature": "val correspondingPropertyName =", "body": "setterDescriptor.correspondingVariable.name.asString()<EOL>"}
{"signature": "fun fromClass(id: Id<String>) {", "body": "<EOL><INDENT><INDENT>if (id.id != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "fun testIndent() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.prependIndent(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.prependIndent(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.prependIndent(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.prependIndent(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.prependIndent(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val cocoapodsCommonizationProjectName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (orderRoot.isExported) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>args += (<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val declarationTypeClassId =", "body": "declarationType.classId<EOL>"}
{"signature": "fun put(factory: KtDiagnosticFactory<NUM_LIT>, message: String) {", "body": "<EOL><INDENT><INDENT>put(factory, SimpleKtDiagnosticRenderer(message))<EOL><INDENT>}"}
{"signature": "if (f is FunctionImportedFromObject) {", "body": "<EOL><INDENT><INDENT><INDENT>return mapSignature(f.callableFromObject, kind, skipGenericSignature)<EOL><INDENT><INDENT>}"}
{"signature": "val contextResolveSession =", "body": "contextModule.getFirResolveSession(contextModule.project)<EOL>"}
{"signature": "fun test_<NUM_LIT>(map: Map<A, Int>, b: B) {", "body": "<EOL><INDENT>map.get(b)<EOL>}"}
{"signature": "val arraySizeVariable =", "body": "irTemporary(irArraySize(arrayHandle, irGet(dst)), <STR_LIT>.synthesizedString)<EOL>"}
{"signature": "val apiLevel =", "body": "versionInfoElement?.getOptionValue(<STR_LIT>)<EOL>"}
{"signature": "val fieldInsnNode =", "body": "cur as FieldInsnNode?<EOL>"}
{"signature": "if (stepArg.constLongValue != null && nestedInfo.step.constLongValue?.absoluteValue == stepArg.constLongValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return nestedInfo<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val buildFile =", "body": "if (isBuildGradleKts) buildGradleKts else buildGradle<EOL>"}
{"signature": "fun defineGlobalField(irField: IrFieldSymbol, wasmGlobal: WasmGlobal) {", "body": "<EOL><INDENT><INDENT>wasmFragment.globalFields.define(irField, wasmGlobal)<EOL><INDENT>}"}
{"signature": "when (defaultsProvider.defaultFrontend) {", "body": "<EOL><INDENT><INDENT>FrontendKinds.ClassicFrontend -> CodegenTestDirectives.IGNORE_FIR_METADATA_LOADING_K<NUM_LIT><EOL><INDENT><INDENT>FrontendKinds.FIR -> CodegenTestDirectives.IGNORE_FIR_METADATA_LOADING_K<NUM_LIT><EOL><INDENT><INDENT>else -> shouldNotBeCalled()<EOL><INDENT>}"}
{"signature": "val nameRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "if (a is String || a is Any) {", "body": "<EOL><INDENT><INDENT>a.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>foo<!>()<INDENT> }"}
{"signature": "val optionalAnnotationClassDescriptors =", "body": "<EOL><INDENT><INDENT>registry.optionalAnnotations.toSet() +<EOL>"}
{"signature": "fun f(x: Byte) {", "body": "}<EOL>fun f(x: Int) {}"}
{"signature": "var irProduceJs =", "body": "false<EOL>"}
{"signature": "val serialized =", "body": "scheme.serialize()<EOL>"}
{"signature": "fun setValue(i: Int, j: Any, k: Int) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (minimumValue !== null && maximumValue !== null) {", "body": "<EOL><INDENT><INDENT>if (minimumValue > maximumValue) throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>if (this < minimumValue) return minimumValue<EOL><INDENT><INDENT>if (this > maximumValue) return maximumValue<EOL><INDENT>}"}
{"signature": "fun takeClass(instanceClass: Sample<*>?) {", "body": "}<EOL>class Sample<T : Any><EOL><EOL>fun box(): String {<EOL><INDENT>foo()<EOL><INDENT>return <STR_LIT><EOL>}"}
{"signature": "for (name in declarationNames) {", "body": "<EOL><INDENT><INDENT><INDENT>val classLikeSymbol = provider.getClassLikeSymbolByClassId(ClassId.topLevel(packageFqName.child(name))) ?: continue<EOL><INDENT><INDENT><INDENT>firRenderer.renderElementAsString(classLikeSymbol.fir)<EOL><INDENT><INDENT><INDENT>builder.appendLine()<EOL><INDENT><INDENT>}"}
{"signature": "when (predicates.size) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> null<EOL><INDENT><INDENT><NUM_LIT> -> predicates.first()<EOL><INDENT><INDENT>else -> ForSomeType(predicates.toList())<EOL><INDENT>}"}
{"signature": "val requiresExplicitComposerParameter =", "body": "useComposableFactory &&<EOL>"}
{"signature": "if (configurationBuildDir != null) {", "body": "<EOL><INDENT><INDENT><INDENT>OutputPlacement(configurationBuildDir, name)<EOL><INDENT><INDENT>}"}
{"signature": "val personalityFunction =", "body": "llvm.gxxPersonalityFunction<EOL>"}
{"signature": "val expectedElement =", "body": "expected.get(index)<EOL>"}
{"signature": "fun visitReference(reference: FirReference) {", "body": "<EOL><INDENT><INDENT>visitElement(reference)<EOL><INDENT>}"}
{"signature": "fun visitPropertyInitializerEnterNode(node: PropertyInitializerEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val conflictingJvmDeclarationsData =", "body": "getConflictingJvmDeclarationsData(signature, declarations)<EOL>"}
{"signature": "if (i<NUM_LIT> < size<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val ann<NUM_LIT> = anns<NUM_LIT>Sorted[i<NUM_LIT>]<EOL><INDENT><INDENT><INDENT><INDENT>++i<NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>result.add(ListEntryDiff(ann<NUM_LIT>fullString(), null))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val evaluator =", "body": "ConstantEvaluator(containingClass, javac, compilationUnit)<EOL>"}
{"signature": "val delegatePropertyAnnotations =", "body": "mutableListOf<FirAnnotation>()<EOL>"}
{"signature": "else if (convertedArgumentType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.SIGNED_CONSTANT_CONVERTED_TO_UNSIGNED.on(deparenthesized))<EOL><INDENT><INDENT>}"}
{"signature": "if (symbol.callableId !in JsStandardClassIds.Callables.definedExternallyPropertyNames) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (intrinsicRememberEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitRememberCall(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dependencyReports =", "body": "output.lineSequence().filter { line -> line.contains(<STR_LIT>) }.toList()<EOL>"}
{"signature": "fun foo(b: MyClass<B>, c: MyClass<C>) {", "body": "<EOL><INDENT>val set<NUM_LIT> : Set<MyClass<out D>> = hashSetOf(b, c)<INDENT> val set<NUM_LIT>  = hashSetOf(b, c) }"}
{"signature": "val phase =", "body": "testServices.moduleStructure.allDirectives.singleOrZeroValue(PRE_RESOLVED_PHASE)<EOL>"}
{"signature": "else if (element !is KtProperty || PsiTreeUtil.getParentOfType(element, KtDeclaration::class.java) !is KtClass) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsAndroid.INAPPLICABLE_IGNORED_ON_PARCEL.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val fileStatements =", "body": "fileExports.file.accept(IrFileToJsTransformer(useBareParameterNames = true), staticContext).statements<EOL>"}
{"signature": "val capturedName =", "body": "tracker.getNameForCapturedDescriptor(descriptor)!!<EOL>"}
{"signature": "if (codeSize != null) {", "body": "<EOL><INDENT><INDENT><INDENT>outputFile.appendText(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val declaredParameters =", "body": "mutableListOf<ValueParameterDescriptor>()<EOL>"}
{"signature": "var actualType =", "body": "type<EOL>"}
{"signature": "fun visitEffectDeclaration(effectDeclaration: FirEffectDeclaration, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitEffectDeclaration(effectDeclaration)<EOL><INDENT>}"}
{"signature": "val txtDiffPath =", "body": "testServices.moduleStructure.originalTestDataFiles.first().withExtension(<STR_LIT>)<EOL>"}
{"signature": "fun visitValueAccess(expression: IrValueAccessExpression, data: IrDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>visitDeclarationReference(expression, data)<EOL><INDENT><INDENT><INDENT>expression.symbol.owner.enqueue(data, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val packageJsonFile =", "body": "dir.resolve(PACKAGE_JSON)<EOL>"}
{"signature": "fun unreachableDeclarationException() {", "body": "<EOL><INDENT>throw JsError(<STR_LIT>)<EOL>}"}
{"signature": "val defaultValue =", "body": "<NUM_LIT><EOL>"}
{"signature": "for ((maskParameter, maskValue) in restParameters zip maskValues.asList()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(maskParameter, IrConstImpl.int(startOffset, endOffset, maskParameter.type, maskValue))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitElseBranch(branch: IrElseBranch) {", "body": "<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val ENUM_VALUES<INDENT><INDENT><INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "if (childrenInSet) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nodes += node<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun replaceReturnTypeRef(newReturnTypeRef: FirTypeRef) {", "body": "<EOL><INDENT><INDENT>returnTypeRef = newReturnTypeRef<EOL><INDENT>}"}
{"signature": "val exceptionText =", "body": "casesAsString + toString() + stackTrace[<NUM_LIT>]?.let { ls + it }<EOL>"}
{"signature": "val actuals =", "body": "ExpectedActualResolver.findActualForExpected(descriptor, leafModule) ?: return@forEach<EOL>"}
{"signature": "fun zero() {", "body": "}<EOL>private fun zero(a: Int) {}"}
{"signature": "val defaultMethodSignatureMapper =", "body": "MethodSignatureMapper(this, defaultTypeMapper)<EOL>"}
{"signature": "val allNativeLibs =", "body": "DependenciesSerializer.deserialize(path, dependencies.subList(allNativeDepsIndex + <NUM_LIT>, allCachedBitcodeDepsIndex)).map { it.libName }<EOL>"}
{"signature": "for (i in <NUM_LIT> ..> n) {", "body": "}"}
{"signature": "val staticData =", "body": "KotlinStaticData(generationState, this, module)<EOL>"}
{"signature": "if (declaration.name.isSpecial) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declaration.name.asStringStripSpecialMarkers()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if ('$STR' != 'ClassSTR') {", "body": "return <STR_LIT>; }"}
{"signature": "fun writeObject(objectOutputStream: ObjectOutputStream) {", "body": "<EOL><INDENT><INDENT>objectOutputStream.defaultWriteObject()<EOL><INDENT>}"}
{"signature": "if (included.closure == null && connected.add(included)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collectRec(included)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val test_varWithBackingFieldAndAccessors =", "body": "::varWithBackingFieldAndAccessors<EOL>"}
{"signature": "if (mode.get() !in arrayOf(EXTRACT, INLINE, IMPORT)) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT>Possible values for cssSupport.mode:<EOL><INDENT><INDENT><INDENT><INDENT>- EXTRACT<EOL><INDENT><INDENT><INDENT><INDENT>- INLINE<EOL><INDENT><INDENT><INDENT><INDENT>- IMPORT<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val IGNORED_XML_WIDGET_TYPES =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val actualAsInt =", "body": "StringBuilder()<EOL>"}
{"signature": "if (elementOwner is KtFile) {", "body": "<EOL><INDENT><INDENT><INDENT>moduleComponents.firFileBuilder.buildRawFirFileWithCaching(elementOwner)<EOL><INDENT><INDENT>}"}
{"signature": "val groupNumbers =", "body": "mutableListOf<TowerGroup>()<EOL>"}
{"signature": "val baseMethodBridge =", "body": "mapper.bridgeMethod(baseMethod)<EOL>"}
{"signature": "val peer =", "body": "pJson.getAsJsonObject(<STR_LIT>)<EOL>"}
{"signature": "var lib =", "body": "false<EOL>"}
{"signature": "val componentAsmType =", "body": "codegen.asmType(componentDescriptor.returnType!!)<EOL>"}
{"signature": "val typeParameter_as_val =", "body": "<!TYPE_PARAMETER_IS_NOT_AN_EXPRESSION!>T<!><EOL>"}
{"signature": "val test<NUM_LIT>a =", "body": "ClassWithCompanionObjectWithInvoke(<!NULL_FOR_NONNULL_TYPE!>null<!>)<EOL>"}
{"signature": "if (value.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>put(key, value)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(a: Int?, b: Int?, c: Int?) {", "body": "<EOL><INDENT>bar(<!TYPE_MISMATCH!>if (a == null) return else if (b == null) return else c<!>)<EOL>}"}
{"signature": "var analysisResult =", "body": "BoundsCheckAnalysisResult(false, null)<EOL>"}
{"signature": "fun foo(p: MyAlias) {", "body": "<EOL><INDENT>bar(p).length<EOL>}"}
{"signature": "val _setter =", "body": "lazy(PUBLICATION) { Setter(this) }<EOL>"}
{"signature": "fun testSimpleAbstractDeclarationOverridesConcreteThroughFakeOverride() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a, c to b)<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT><INDENT>doTest(c, setOf())<EOL><INDENT>}"}
{"signature": "val dirtyLookupSymbols =", "body": "HashSet<LookupSymbol>()<EOL>"}
{"signature": "if (x in analysisResult.astNodesToEliminate) {", "body": "<EOL><INDENT><INDENT><INDENT>ctx.removeMe()<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val statusMap =", "body": "mutableMapOf<FirClass, StatusComputationStatus>()<EOL>"}
{"signature": "package pckg<EOL>.", "body": ""}
{"signature": "val pluginContext =", "body": "Fir<NUM_LIT>IrPluginContext(platformComponentsStorage, platformComponentsStorage.moduleDescriptor)<EOL>"}
{"signature": "if (c<NUM_LIT> is IrClassifierSymbol && c<NUM_LIT> is IrClassifierSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>FqNameEqualityChecker.areEqual(c<NUM_LIT> , c<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (<!SENSELESS_COMPARISON!>platformNN == null<!>) {", "body": "}"}
{"signature": "for (i in <NUM_LIT>.objectArray.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>sum += objectArray[i].value<EOL><INDENT>}"}
{"signature": "val originalContinuation =", "body": "delegateField.get(continuation)<EOL>"}
{"signature": "val gcTypes =", "body": "<EOL><INDENT><INDENT>ReferencableAndDefinable<IrClassSymbol, WasmTypeDeclaration>()<EOL>"}
{"signature": "if (codegen.state.classBuilderMode != ClassBuilderMode.LIGHT_CLASSES) {", "body": "<EOL><INDENT><INDENT><INDENT>val parcelClassType = ParcelableResolveExtension.resolveParcelClassType(parcelableClass.module)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  ?: error(<STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>val parcelableCreatorClassType = ParcelableResolveExtension.resolveParcelableCreatorClassType(parcelableClass.module)<EOL><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>writeCreatorClass(codegen, parcelableClass, parcelClassType, parcelableCreatorClassType, PARCEL_TYPE, parcelerObject, propertiesToSerialize)<EOL><INDENT><INDENT>}"}
{"signature": "val accessorFun =", "body": "accessorSymbol.owner<EOL>"}
{"signature": "val outerReceiver =", "body": "irConstructor.dispatchReceiverParameter!!<EOL>"}
{"signature": "val bHasDefaultValue =", "body": "if (b.defaultValue != null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val diagnosticsReporter =", "body": "<EOL><INDENT><INDENT><INDENT>UpperBoundViolatedReporter(trace, argumentType, typeParameterDescriptor, diagnosticForTypeAliases = diagnosticForTypeAliases)<EOL>"}
{"signature": "else if (!isConstructor && isTopLevel && !isExtension && !isProperty) {", "body": "<EOL><INDENT><INDENT><INDENT>MethodBridgeReceiver.Static<EOL><INDENT><INDENT>}"}
{"signature": "if (arg.first?.isEmpty() ?: false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>list.remove(arg.first)<EOL><INDENT>}"}
{"signature": "val FORCE_PARAMETER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (x.isInlineableCoroutineBody) {", "body": "<EOL><INDENT><INDENT><INDENT>x.body = transformCoroutineMetadataToSpecialFunctions(x.body)<EOL><INDENT><INDENT>}"}
{"signature": "val baseReading =", "body": "Long.MAX_VALUE - <NUM_LIT><EOL>"}
{"signature": "val topData =", "body": "Data(<NUM_LIT>)<EOL>"}
{"signature": "fun visitErrorTypeRef(errorTypeRef: FirErrorTypeRef, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allTypeRefCheckers.check(errorTypeRef, data)<EOL><INDENT>}"}
{"signature": "package three;<EOL>.", "body": ""}
{"signature": "val classFileFactory =", "body": "GenerationUtils.compileFiles(testFiles.psiFiles, environment, TEST_LIGHT_ANALYSIS).factory<EOL>"}
{"signature": "if (data is IrBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>return data.insertImplicitCasts()<EOL><INDENT><INDENT>}"}
{"signature": "for (i in (<NUM_LIT>uL..<NUM_LIT>uL step <NUM_LIT>L).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (symbol is FirRegularClassSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>symbol.fir<EOL><INDENT><INDENT>}"}
{"signature": "val olderVersionsDir =", "body": "layout.buildDirectory.dir(<STR_LIT>)<EOL>"}
{"signature": "val compilerPluginRegistrars =", "body": "ServiceLoaderLite.loadImplementations(CompilerPluginRegistrar::class.java, classLoader)<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.propertyGetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JsProtoBuf.propertyGetterAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "when (val single = singleOrNull()) {", "body": "<EOL><INDENT>null -> CommonIdePlatformKind.Platform<EOL><INDENT>is JdkPlatform -> JvmIdePlatformKind.Platform(single.targetVersion)<EOL><INDENT>is JvmPlatform -> JvmIdePlatformKind.Platform(JvmTarget.DEFAULT)<EOL><INDENT>is JsPlatform -> JsIdePlatformKind.Platform<EOL><INDENT>is WasmPlatform -> WasmIdePlatformKind.Platform<EOL><INDENT>is NativePlatform -> NativeIdePlatformKind.Platform<EOL><INDENT>else -> error(<STR_LIT>)<EOL>}"}
{"signature": "else if (!overriddenDescriptors.isEmpty() && !overridesBackwardCompatibilityHelper.overrideCanBeOmitted(declared)) {", "body": "<EOL><INDENT><INDENT><INDENT>val overridden = overriddenDescriptors.first()<EOL><INDENT><INDENT><INDENT>trace.report(VIRTUAL_MEMBER_HIDDEN.on(member, declared, overridden, overridden.containingDeclaration))<EOL><INDENT><INDENT>}"}
{"signature": "fun TestMultipleDifferentlyNamedValueParametersB(arg<NUM_LIT>B: UserKlassA, arg<NUM_LIT>B: UserKlassB) {", "body": "}<EOL><EOL>class TestMultipleDifferentlyNamedValueParametersBReverse {<EOL><INDENT>constructor(arg<NUM_LIT>A: UserKlassA, arg<NUM_LIT>A: UserKlassB)<EOL>}"}
{"signature": "for (i in <NUM_LIT>uL until MinUL step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val symbolOfA =", "body": "symbolOfB.getSuperClassSymbolNotAny()<EOL>"}
{"signature": "val publishable =", "body": "target.publishable<EOL>"}
{"signature": "val binaryOptions =", "body": "BinaryOptions.RuntimeAssertionsMode.chooseFor(cacheMode, optimizationMode, freeCompilerArgs.assertionsMode)<EOL>"}
{"signature": "val parameterTypes =", "body": "smartList()<EOL>"}
{"signature": "val executableFile =", "body": "File(buildDir, clangExecutableName)<EOL>"}
{"signature": "if (names.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>removedMembers.getSet(scope).addAll(names)<EOL><INDENT><INDENT>}"}
{"signature": "when (val signature = signatureComposer.composeSignature(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> FirOverrideKey.Declaration(this)<EOL><INDENT><INDENT><INDENT>else -> FirOverrideKey.Signature(signature)<EOL><INDENT><INDENT>}"}
{"signature": "when (internal) {", "body": "}"}
{"signature": "val NO_MUTE =", "body": "SuppressionResult(false, null)<EOL>"}
{"signature": "val ENABLE_STATISTICS_PROPERTY_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val writtenFiles =", "body": "createWrittenFilesContainer()<EOL>"}
{"signature": "for (member in declaration.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT>if (member !is KtProperty) continue<EOL><EOL><INDENT><INDENT><INDENT>val propertyDescriptor = context.trace[BindingContext.DECLARATION_TO_DESCRIPTOR, member] as? PropertyDescriptor ?: continue<EOL><INDENT><INDENT><INDENT>if (context.trace.bindingContext[BindingContext.BACKING_FIELD_REQUIRED, propertyDescriptor] != true && member.delegate == null) continue<EOL><EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.FIELD_IN_JVM_RECORD.on(member))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (el in b) {", "body": "<EOL><INDENT><INDENT>sum = sum + (el ?: <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "var noReceiverAssertions =", "body": "false<EOL>"}
{"signature": "val MinI =", "body": "Int.MIN_VALUE<EOL>"}
{"signature": "val notNullableArgumentType =", "body": "argumentType.makeNotNullable()<EOL>"}
{"signature": "val annotationDescriptorsWithCycle =", "body": "mutableSetOf(targetAnnotation)<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.constructorAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.constructorAnnotation, i), new.getExtension(KlibMetadataProtoBuf.constructorAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val targetDirtyFiles =", "body": "dirtyFilesHolder.byTarget[jpsTarget]<EOL>"}
{"signature": "val parentIter =", "body": "parents.iterator()<EOL>"}
{"signature": "val setterDescriptor =", "body": "variableDescriptor.setter<EOL>"}
{"signature": "val enc =", "body": "json.encodeToString(input)<EOL>"}
{"signature": "if (placesMatcher.find()) {", "body": "<EOL><INDENT><INDENT><INDENT>return placesMatcher.group(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val rightPsi =", "body": "binaryExpression.right ?: return null<EOL>"}
{"signature": "fun addReversedEdge(caller: DataFlowIR.FunctionSymbol.Declared, callee: DataFlowIR.FunctionSymbol.Declared) {", "body": "<EOL><INDENT><INDENT>reversedEdges[callee]!!.add(caller)<EOL><INDENT>}"}
{"signature": "val projectA =", "body": "buildProject()<EOL>"}
{"signature": "fun foo(o: ArrayList<Int>) {", "body": "}"}
{"signature": "val closure<NUM_LIT> =", "body": "{ y }"}
{"signature": "val rightReference =", "body": "KotlinPlaceHolderStubImpl<KtTypeReference>(intersectionType, KtStubElementTypes.TYPE_REFERENCE)<EOL>"}
{"signature": "val thisClassDeclaration =", "body": "this.containingClass.kotlinOrigin<EOL>"}
{"signature": "val objCCategoryById =", "body": "LocatableDeclarationRegistry<ObjCCategoryImpl>()<EOL>"}
{"signature": "val expectContainingClass =", "body": "actualContainingClass?.getSingleMatchedExpectForActualOrNull() as? FirRegularClassSymbol<EOL>"}
{"signature": "if (JvmAbi.isSetterName(nameAsString)) {", "body": "<EOL><INDENT><INDENT>return propertyNamesBySetMethodName(name)<EOL><INDENT>}"}
{"signature": "val parentScope =", "body": "functionsStack.last()<EOL>"}
{"signature": "val LITERAL =", "body": "<NUM_LIT> shl <NUM_LIT><EOL>"}
{"signature": "if (className.indexOf('.') < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return if (className == topLevelClass.name) topLevelClass else null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (passedTime > frameDuration * <NUM_LIT>){", "body": "<EOL><INDENT><INDENT><INDENT>lastFrameTime = now<INDENT><INDENT> }"}
{"signature": "val elementAsmType =", "body": "typeMapper.mapTypeSafe(elementType, forceBoxed = true)<EOL>"}
{"signature": "val useCset =", "body": "project.findProperty(<STR_LIT>)?.toString()?.toBoolean() ?: false<EOL>"}
{"signature": "val linuxArm<NUM_LIT>Hfp =", "body": "Unit<EOL>"}
{"signature": "if (allAreAbstract) {", "body": "<EOL><INDENT><INDENT>return findMaxVisibilityOrNull(nonSubsumedOverrides, toSymbol)<EOL><INDENT>}"}
{"signature": "val linker =", "body": "<STR_LIT><EOL>"}
{"signature": "val actualModule =", "body": "descriptor.module<EOL>"}
{"signature": "fun bar(x: () -> Int) {", "body": "}<EOL>fun bam(x: A.() -> Int) {}"}
{"signature": "if (this.diagnostic is DiagnosticWithParameters<NUM_LIT><*, *> && other is ActualDiagnostic && other.diagnostic is DiagnosticWithParameters<NUM_LIT><*, *>) {", "body": "<EOL><INDENT><INDENT><INDENT>(name + this.diagnostic.a).compareTo(other.name + other.diagnostic.a)<EOL><INDENT><INDENT>}"}
{"signature": "val fieldEquivalent =", "body": "capturedParams[constructorParamBuilder.nextParameterOffset]<EOL>"}
{"signature": "val usageModuleDescriptor =", "body": "DescriptorUtils.getContainingModuleOrNull(containingDeclarationOrModule)<EOL>"}
{"signature": "if (c.importPair != null) {", "body": "<EOL><INDENT><INDENT><INDENT>b.writeString(c.importPair.moduleName)<EOL><INDENT><INDENT><INDENT>b.writeString(c.importPair.declarationName)<EOL><INDENT><INDENT><INDENT>b.writeByte(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>appendType(c.type)<EOL><INDENT><INDENT><INDENT>b.writeVarUInt<NUM_LIT>(c.isMutable)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val globalLanguageVersionSettings =", "body": "useSiteModule.languageVersionSettings<EOL>"}
{"signature": "fun afterChildren(current: T?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.add(current)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val remaining =", "body": "countdowns[next.id].let { if (it == <NUM_LIT>) next.previousNodeCount else it } - <NUM_LIT><EOL>"}
{"signature": "fun unsafeCall(trace: BindingTrace, type: KotlinType, isCallForImplicitInvoke: Boolean) {", "body": "<EOL><INDENT><INDENT>unexpectedError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val enumModels =", "body": "<EOL><INDENT><INDENT><INDENT>fileDeclaration.declarations.filterIsInstance<IDLEnumDeclaration>().map { it.convertToModel() }.flatten()<EOL>"}
{"signature": "val ONE =", "body": "Second.THREE<EOL>"}
{"signature": "val ChunkHeaderSize =", "body": "<NUM_LIT> * Int.SIZE_BYTES"}
{"signature": "if (typeParameterDescriptor is IrBasedTypeParameterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return typeParameterDescriptor.owner.symbol<EOL><INDENT><INDENT>}"}
{"signature": "val isWrapped =", "body": "wrapFunctionMatcher?.lookingAt() == true<EOL>"}
{"signature": "if (isMember && (isExtension || !declaration.symbol.isNativeObject(context)) || !isMember && !isExtension) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>declaration.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirJsErrors.NATIVE_ANNOTATIONS_ALLOWED_ONLY_ON_MEMBER_OR_EXTENSION_FUN,<EOL><INDENT><INDENT><INDENT><INDENT>annotation.resolvedType,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val filteredNewVtableSlots =", "body": "newVtableSlots<EOL>"}
{"signature": "val parsedContract =", "body": "PsiContractParserDispatcher(collector, callContext, storageManager).parseContract()<EOL>"}
{"signature": "val aD =", "body": "DoubleArray(<NUM_LIT>)<EOL>"}
{"signature": "val lowerTypeDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lowerType.constructor.declarationDescriptor as? ClassDescriptor<EOL>"}
{"signature": "if (newInferenceEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>TypeUtils.getPrimitiveNumberType(typeConstructor as IntegerLiteralTypeConstructor, expectedType)<EOL><INDENT><INDENT>}"}
{"signature": "val visitedLibraries =", "body": "mutableSetOf<KotlinLibrary>()<EOL>"}
{"signature": "for ((variable, stubType) in parentSession.stubsForPostponedVariables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>commonSystem.registerTypeVariableIfNotPresent(variable)<EOL><INDENT><INDENT><INDENT><INDENT>commonSystem.addSubtypeConstraint(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>variable.defaultType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stubType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>InjectedAnotherStubTypeConstraintPositionImpl(lambdaArgument)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val arraySlot =", "body": "LLVMBuildAlloca(builder, arrayType, <STR_LIT>)!!<EOL>"}
{"signature": "val FILE_NAME_ANNOTATIONS =", "body": "arrayOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun visitComparisonExpression(comparisonExpression: FirComparisonExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(comparisonExpression)<EOL><INDENT>}"}
{"signature": "val lj =", "body": "JavaClass.id(l)<EOL>"}
{"signature": "val processingEnvironment =", "body": "JavacProcessingEnvironment.instance(context)<EOL>"}
{"signature": "val returnClass =", "body": "this.returnType.getClass(this.isReturnTypePrimitiveAsObject())<EOL>"}
{"signature": "val foundSymbol =", "body": "findBuiltinSpecialPropertyFqName(overridden, scope)<EOL>"}
{"signature": "var DemoOpenSetterCalls =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun generateModule(irModuleFragment: IrModuleFragment) {", "body": "<EOL><INDENT><INDENT>acceptVisitor(irModuleFragment, declarationGenerator)<EOL><INDENT>}"}
{"signature": "if (base is Derived) {", "body": "<EOL><INDENT><INDENT>fun can(n: Int) = n > <NUM_LIT><EOL><INDENT><INDENT>trans(<NUM_LIT>, ::can)<EOL><INDENT><INDENT>bar(base)<EOL><INDENT>}"}
{"signature": "val atom =", "body": "resolvedCallAtom.atom<EOL>"}
{"signature": "val JsFun =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "fun enterScope(owner: IrDeclaration) {", "body": "<EOL><INDENT><INDENT>enterScope(owner.symbol)<EOL><INDENT>}"}
{"signature": "val publishingDir =", "body": "localRepoDir.resolve(<STR_LIT>).resolve(<STR_LIT>)<EOL>"}
{"signature": "if (inferenceErrorData.receiverArgumentType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>append(RENDER_TYPE_WITH_ANNOTATIONS.render(inferenceErrorData.receiverArgumentType, context)).append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val builderResolvedCall =", "body": "overloadResolutionResults.resultingCall as? NewAbstractResolvedCall<*> ?: return<EOL>"}
{"signature": "var currentCache =", "body": "rootCache<EOL>"}
{"signature": "val rootLibraries =", "body": "this.map { KotlinResolvedLibraryImpl(it) }<EOL>"}
{"signature": "if (expression is IrCall && callee.symbol == context.ir.symbols.indyLambdaMetafactoryIntrinsic) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitExpression(handleLambdaMetafactoryIntrinsic(expression, thisSymbol))<EOL><INDENT><INDENT>}"}
{"signature": "val ordinal =", "body": "entryProto.getExtensionOrNull(KlibMetadataProtoBuf.enumEntryOrdinal)<EOL>"}
{"signature": "val reachableFromTakenEscapeOrigins =", "body": "mutableSetOf<PointsToGraphNode>()<EOL>"}
{"signature": "val searchForRPAR =", "body": "lexer.tokenType == KtTokens.LPAR<EOL>"}
{"signature": "for(char in 'A'..'D') {", "body": "<EOL><INDENT><INDENT>s += char<EOL><INDENT>}"}
{"signature": "val useCurryKt =", "body": "kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val lhsType =", "body": "context.bindingContext.getType(lhs) ?: return false<EOL>"}
{"signature": "val newLoop =", "body": "oldLoop.transform(this, null)<EOL>"}
{"signature": "val overridden =", "body": "copyFunction.overriddenDescriptors.firstOrNull()<EOL>"}
{"signature": "fun foo(noinline lambda: (Int) -> Int) {", "body": "}<EOL><INDENT>inline fun foo<NUM_LIT>(crossinline lambda: (Int) -> Int) {}"}
{"signature": "val symUnion =", "body": "range<NUM_LIT> union range<NUM_LIT><EOL>"}
{"signature": "fun testKotlincJvmSimple() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir.path<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val symbolKind =", "body": "symbolData.kind<EOL>"}
{"signature": "val kaptMethod =", "body": "kaptClassLoader.kaptClass(<STR_LIT>).declaredMethods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "if (outputJar == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fastJarFs<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun consumeBLambda(fn: (B)->Unit) {", "body": "<EOL><INDENT>fn(B())<EOL>}"}
{"signature": "val ois =", "body": "ObjectInputStream(bais)<EOL>"}
{"signature": "fun call(a: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>consume(a)<EOL><INDENT><INDENT><INDENT>consume(this@Foo)<EOL><INDENT><INDENT><INDENT>consume(this@test)<EOL><INDENT><INDENT><INDENT>x = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val idCounter =", "body": "AtomicInteger(<NUM_LIT>)<EOL>"}
{"signature": "val documentedConstructor =", "body": "buildAnnotationConstructor(buildClass(JvmAnnotationNames.DOCUMENTED_ANNOTATION))<EOL>"}
{"signature": "var path =", "body": "cache[file]<EOL>"}
{"signature": "val sealedMissingCases =", "body": "WhenChecker.getSealedMissingCases(element, context, sealedClassDescriptor)<EOL>"}
{"signature": "fun doTest(testDirectoryPath: Path)<EOL><EOL><INDENT>override fun setUp() {", "body": "<EOL><INDENT><INDENT>super.setUp()<EOL><EOL><INDENT><INDENT>environment.projectEnvironment.environment.registerFileType(<EOL><INDENT><INDENT><INDENT>KlibMetaFileType, KlibMetaFileType.defaultExtension<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (request.query.type != undefined) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type = request.query.type<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val objCClassRegistry =", "body": "LocatableDeclarationRegistry<ObjCClassImpl>()<EOL>"}
{"signature": "val minusOneVal =", "body": "(<NUM_LIT>).<!EVALUATED(<STR_LIT>)!>toShort()<!><EOL>"}
{"signature": "val parcelerClass =", "body": "parcelerType.constructor.declarationDescriptor as? ClassDescriptor ?: return<EOL>"}
{"signature": "val ns<NUM_LIT> =", "body": "NA(null)<EOL>"}
{"signature": "val ktArg =", "body": "ktExpression.baseExpression ?: throw AssertionError(<STR_LIT>)<EOL>"}
{"signature": "val typeAliasMap =", "body": "typeAlias.typeParameters.map { it.symbol }.zip(abbreviatedType.typeArguments).toMap()<EOL>"}
{"signature": "fun packageName(value: String) {", "body": "<EOL><INDENT><INDENT>packageName = value<EOL><INDENT>}"}
{"signature": "package set is too expensive or impossible to compute.", "body": "<EOL>"}
{"signature": "if (inputFileProperty.isPresent) {", "body": "<EOL><INDENT><INDENT><INDENT>newArgs.add(inputFileProperty.asFile.get().normalize().absolutePath)<EOL><INDENT><INDENT>}"}
{"signature": "fun testFortyTwo() {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, fortyTwo())<EOL>}"}
{"signature": "if (parentImplFqName != null) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val KT_<NUM_LIT>_HEADER =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "fun visitClass(klass: FirClass, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allClassCheckers.check(klass, data)<EOL><INDENT>}"}
{"signature": "if (useProjectSettings != null) {", "body": "<EOL><INDENT><INDENT><INDENT>this.useProjectSettings = useProjectSettings<EOL><INDENT><INDENT>}"}
{"signature": "val stableTypes =", "body": "dataFlowInfo.getStableTypes(dataFlowValue, languageVersionSettings)<EOL>"}
{"signature": "var fileIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (firSymbol.origin == FirDeclarationOrigin.ImportedFromObjectOrStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return buildFieldSymbol(firSymbol.fir.importedFromObjectOrStaticData!!.original.symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val qualifierReceiver =", "body": "createQualifierReceiver(resolvedQualifier, session, components.scopeSession)<EOL>"}
{"signature": "fun addMetric(metric: GradleBuildPerformanceMetric, value: Long) {", "body": "<EOL><INDENT>}"}
{"signature": "val nativeLibsToLink =", "body": "DependenciesSerializer.deserialize(path, dependencies.subList(nativeDepsToLinkIndex + <NUM_LIT>, allNativeDepsIndex)).map { it.libName }<EOL>"}
{"signature": "for (diagnostic in diagnostics) {", "body": "<EOL><INDENT><INDENT>renderReportedDiagnostic(diagnostic, logger, renderingOptions)<EOL><INDENT>}"}
{"signature": "val isResolveExtensionFile =", "body": "containingVirtualFile.isResolveExtensionFile<EOL>"}
{"signature": "val leftConstant =", "body": "evaluate(leftExpression, booleanType) ?: return null<EOL>"}
{"signature": "if (iterator.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(separator)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (link != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>doTest(cwd, link.path, expected)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (projectionKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KtProjectionKind.IN -> IN_VARIANCE<EOL><INDENT><INDENT><INDENT><INDENT>KtProjectionKind.OUT -> OUT_VARIANCE<EOL><INDENT><INDENT><INDENT><INDENT>KtProjectionKind.NONE -> INVARIANT<EOL><INDENT><INDENT><INDENT><INDENT>else -><INDENT><INDENT><INDENT><INDENT><INDENT> throw IllegalStateException(<STR_LIT> + projectionKind)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun replaceAnnotationTypeRef(newAnnotationTypeRef: FirTypeRef) {", "body": "<EOL><INDENT><INDENT>annotationTypeRef = newAnnotationTypeRef<EOL><INDENT>}"}
{"signature": "val fname =", "body": "m[<NUM_LIT>]<EOL>"}
{"signature": "val allNpmDependencies =", "body": "disambiguateDependencies(externalNpmDependencies, otherNpmDependencies, logger)<EOL>"}
{"signature": "for (properties in unicodeData) {", "body": "<EOL><INDENT><INDENT><INDENT>charProperties[properties.char] = properties<EOL><INDENT><INDENT>}"}
{"signature": "val sourceMapSourceRootList =", "body": "StringUtil.split(sourceMapSourceRoots, File.pathSeparator)<EOL>"}
{"signature": "for (element in <NUM_LIT>toByte()..<NUM_LIT>toByte() step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val reexportModuleToHeader =", "body": "headers.groupBy { it.reexportedInModuleWithName }<EOL>"}
{"signature": "val NATIVE_EXECUTABLE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (project.hasProperty(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return@whenKaptEnabled<EOL><INDENT><INDENT>}"}
{"signature": "val bad<NUM_LIT> =", "body": "listOf(<!WRONG_ANNOTATION_TARGET!>@JvmSerializableLambda<!> <NUM_LIT>)[<NUM_LIT>]<EOL>"}
{"signature": "package K<EOL>.", "body": ""}
{"signature": "val symbolIds =", "body": "mutableMapOf<FirBasedSymbol<*>, Int>()<EOL>"}
{"signature": "val topLevelVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val xCast =", "body": "t.findViewById(<NUM_LIT>) as X<EOL>"}
{"signature": "val intModLong =", "body": "byte.mod(long)<EOL>"}
{"signature": "val declarations =", "body": "file.declarations.toList()<EOL>"}
{"signature": "val nextLabel =", "body": "Label()<EOL>"}
{"signature": "for (j in arrayOf(false, true)) {", "body": "<EOL><INDENT><INDENT><INDENT>acc += areSame(i, j).oneIfTrueElseZero()<EOL><INDENT><INDENT>}"}
{"signature": "val firstChar =", "body": "this[<NUM_LIT>]<EOL>"}
{"signature": "import on demand from object ''{<NUM_LIT>}''.", "body": "\",<EOL>"}
{"signature": "val rightIsNullConst =", "body": "rightConst?.kind == ConstantValueKind.Null<EOL>"}
{"signature": "if (!newIrFunction.isFakeOverride) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newIrFunction.body = newIrFunction.generateDefaultStubBody(irFunction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (classDescriptor !is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ACTUAL_TYPE_ALIAS_NOT_TO_CLASS.on(declaration))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun testSeveralJars() {", "body": "<EOL><INDENT><INDENT>val jar<NUM_LIT> = writeJar(<STR_LIT>, processors(<STR_LIT>))<EOL><INDENT><INDENT>val jar<NUM_LIT> = writeJar(<STR_LIT>, processors(<STR_LIT>))<EOL><EOL><INDENT><INDENT>val impls = ServiceLoaderLite.findImplementations<Processor>(listOf(jar<NUM_LIT>, jar<NUM_LIT>))<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, impls.size)<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in impls)<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in impls)<EOL><INDENT>}"}
{"signature": "val delegatedConstructorCall =", "body": "this as? FirDelegatedConstructorCall ?: return null<EOL>"}
{"signature": "fun checkLinkedHashMap(obj: Any) {", "body": "<EOL><INDENT>assertTrue(obj is LinkedHashMap<*, *>, <STR_LIT>)<EOL><INDENT>checkHashMap(obj)<EOL>}"}
{"signature": "fun provideDelegate(x: Any?, p: KProperty<*>) {", "body": "}<EOL><EOL>operator fun Any.provideDelegate(x: Any?, p: KProperty<*>) {}"}
{"signature": "if (coneType.customAnnotations.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KtEmptyAnnotationsList(builder.token)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var charsWritten =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (throwError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw error<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (failure != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Assert.fail(failure.textContent)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (primitive == PrimitiveType.Char) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (pattern[nextIndex()] != '<') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw PatternSyntaxException(<STR_LIT>, patternString, curTokenIndex)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val metadataArtifact =", "body": "resolvedHostSpecificMetadataConfiguration<EOL>"}
{"signature": "val jsonResponses =", "body": "mutableListOf<JsonNode>()<EOL>"}
{"signature": "val kotlinBaseAllowed =", "body": "!session.languageVersionSettings.supportsFeature(ForbidSyntheticPropertiesWithoutBaseJavaGetter)<EOL>"}
{"signature": "if (variableType is DeferredType && variableType.isComputing) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return null<INDENT><INDENT><INDENT> }"}
{"signature": "var line =", "body": "replConfiguration.commandReader.readLine(next) ?: return WhatNextAfterOneLine.QUIT<EOL>"}
{"signature": "fun fail<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>::memberVal<EOL><INDENT><INDENT>::memberFun<EOL><INDENT>}"}
{"signature": "for (j in <NUM_LIT>.groupResults[i].size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(groupResults[i][j], result.groupValues[j + <NUM_LIT>], <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (pluginContext.platform.isJs() || pluginContext.platform.isWasm()) {", "body": "<EOL><INDENT><INDENT><INDENT>WrapJsComposableLambdaLowering(<EOL><INDENT><INDENT><INDENT><INDENT>pluginContext,<EOL><INDENT><INDENT><INDENT><INDENT>symbolRemapper,<EOL><INDENT><INDENT><INDENT><INDENT>metrics,<EOL><INDENT><INDENT><INDENT><INDENT>idSignatureBuilder,<EOL><INDENT><INDENT><INDENT><INDENT>stabilityInferencer,<EOL><INDENT><INDENT><INDENT><INDENT>decoysEnabled<EOL><INDENT><INDENT><INDENT>).lower(moduleFragment)<EOL><INDENT><INDENT>}"}
{"signature": "val PROLOG_END =", "body": "<STR_LIT>sourcesContent\\<STR_LIT><EOL>"}
{"signature": "val isPositiveCompare =", "body": "expression.operation == FirOperation.EQ || expression.operation == FirOperation.IDENTITY<EOL>"}
{"signature": "fun consumeF(vararg bases: BaseBuildee<TargetType>) {", "body": "}<EOL><EOL>fun BaseBuildee<TargetType>.consumeG() {}"}
{"signature": "val arrayOfNullableAny =", "body": "builtIns.getArrayType(Variance.INVARIANT, builtIns.nullableAnyType)<EOL>"}
{"signature": "when (warningMode) {", "body": "<EOL><INDENT><INDENT><INDENT>WarningMode.Fail -> arguments.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>WarningMode.All -> arguments.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>WarningMode.Summary -> arguments.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>WarningMode.None -> arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val hasExplicitTypeArgument =", "body": "expression.typeArguments.any { it.isExplicit }<EOL>"}
{"signature": "val symbolNameAnnotation =", "body": "NativeRuntimeNames.Annotations.symbolNameClassId.asSingleFqName()<EOL>"}
{"signature": "while (handlerFirstInsn != null && !handlerFirstInsn.isMeaningful) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>handlerFirstInsn = handlerFirstInsn.next<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun suspendThrowsRuntimeExceptionTypealias() {", "body": "}<EOL><EOL>@Throws(Exception::class)<EOL>suspend fun suspendThrowsException<NUM_LIT>() {}"}
{"signature": "val JAR_ARTIFACT_TYPE =", "body": "<STR_LIT><EOL>"}
{"signature": "for (charset in listOf(Charsets.UTF_<NUM_LIT>, Charsets.UTF_<NUM_LIT>BE, Charsets.UTF_<NUM_LIT>LE, Charsets.UTF_<NUM_LIT>BE, Charsets.UTF_<NUM_LIT>LE)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>testReadLine(text, lines, charset)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testNullToString() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, listOf<String?>(null).asReversed().toString())<EOL><INDENT>}"}
{"signature": "val typeParametersOfOwner =", "body": "(owner as? FirTypeParameterRefsOwner)?.typeParameters.orEmpty()<EOL>"}
{"signature": "import testOther.", "body": "*<EOL>"}
{"signature": "val TYPE_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "var isIncorporatingConstraintFromDeclaredUpperBound =", "body": "false<EOL>"}
{"signature": "val wrongTarget =", "body": "targets.firstOrNull { !kind.availableFor(it) }<EOL>"}
{"signature": "if (files.any(TestFile::checkLazyLog)) {", "body": "<EOL><INDENT><INDENT><INDENT>lazyOperationsLog = LazyOperationsLog(HASH_SANITIZER)<EOL><INDENT><INDENT><INDENT>storageManager = LoggingStorageManager(<EOL><INDENT><INDENT><INDENT><INDENT>LockBasedStorageManager.createWithExceptionHandling(<STR_LIT>, tracker),<EOL><INDENT><INDENT><INDENT><INDENT>lazyOperationsLog.addRecordFunction<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val compareInt<NUM_LIT> =", "body": "INT >= <NUM_LIT><EOL>"}
{"signature": "val flattenedGetterExpressions =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>instance.makeFlattenedGetterExpressions(this@flattenExpressionTo, irCurrentClass, ::registerPossibleExtraBoxUsage)<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.nestedClassNameCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkStringEquals(old.getNestedClassName(i), new.getNestedClassName(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (root.packagePrefix != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>, JAVA_SOURCE_PACKAGE_PREFIX, <STR_LIT><STR_LIT>\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (catchClause in tryExpression.catches) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>catchClause.parameter.accept(this)<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>catchClause.block.accept(this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val disabledTestCaseIds =", "body": "hashSetOf<TestCaseId>()<EOL>"}
{"signature": "val ls =", "body": "us.filterNotNull()<EOL>"}
{"signature": "for (i in <NUM_LIT>u until <NUM_LIT>u step <NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>uintList += i<EOL><INDENT>}"}
{"signature": "fun expectMinMaxWith(min: Byte, max: Byte, elements: ByteArray, comparator: Comparator<Byte>) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(min, elements.minWith(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWith(comparator))<EOL><INDENT>}"}
{"signature": "for (file in filesToRender) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resultBuilder.appendLine()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderer.renderElementAsString(file)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun checkTestInfoElementIsCorrect(<EOL><INDENT><INDENT>testInfoElementValueMatcher: Matcher?,<EOL><INDENT><INDENT>testInfoElementName: SpecTestInfoElementType,<EOL><INDENT><INDENT>testInfoElementValue: String?<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>if (testInfoElementValueMatcher != null && !testInfoElementValueMatcher.find())<EOL><INDENT><INDENT><INDENT>throw SpecTestValidationException(<EOL><INDENT><INDENT><INDENT><INDENT>SpecTestValidationFailedReason.TESTINFO_NOT_VALID,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val multiFilePartMd =", "body": "Class.forName(<STR_LIT>).getMetadata()<EOL>"}
{"signature": "val checkStickyConditions =", "body": "arguments.checkStickyPhaseConditions<EOL>"}
{"signature": "val unsubstitutedType =", "body": "unsubstitutedUnderlyingTypeForInlineClass(session) ?: return null<EOL>"}
{"signature": "val mappingForSupertype =", "body": "superType.toTypeArgumentMapping(mapping) ?: continue<EOL>"}
{"signature": "fun test(elements: Array<out String?>) {", "body": "<EOL><INDENT>val filtered = elements.filterNotNull()<EOL>}"}
{"signature": "val targetConstructor =", "body": "constructorParent.getComposableForDecoy().owner as IrConstructor<EOL>"}
{"signature": "val ktInitializer =", "body": "multiDeclaration.initializer!!<EOL>"}
{"signature": "val parsed =", "body": "argumentExpressions.mapNotNull(::tryParseReferenceToIntConstant).toJavacList()<EOL>"}
{"signature": "val _ieee<NUM_LIT>equalsFunByOperandType =", "body": "mutableMapOf<IrClassifierSymbol, IrSimpleFunctionSymbol>()<EOL>"}
{"signature": "val destructComposites =", "body": "mutableMapOf<FirVariableSymbol<*>, IrComposite>()<EOL>"}
{"signature": "val getLazyValueName =", "body": "JvmAbi.getterName(<STR_LIT>)<EOL>"}
{"signature": "if (hasDesc()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(desc)<EOL><INDENT>}"}
{"signature": "if (c === x && e is Int) {", "body": "<EOL><INDENT><INDENT>bar(MyPair(x.getValue(e), x.getValue(e)))<EOL><INDENT><INDENT>return MyPair(x.getValue(e), x.getValue(e))<EOL><INDENT>}"}
{"signature": "if (symbolApplicability == applicability) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidates.add(TypeCandidate(symbol, substitutor, diagnostic, symbolApplicability))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isWithTargetBackend()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ERROR_TYPE_TEXT =", "body": "<STR_LIT><EOL>"}
{"signature": "val cValues =", "body": "packageName.child(cValuesName)<EOL>"}
{"signature": "val commonDatabaseFile =", "body": "File(databaseDir, <STR_LIT>)<EOL>"}
{"signature": "val hasDefaultBound =", "body": "boundTypes.size == <NUM_LIT> && boundTypes[<NUM_LIT>].equalsToText(CommonClassNames.JAVA_LANG_OBJECT)<EOL>"}
{"signature": "for(i in <NUM_LIT>.valueParameterCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getValueParameter(i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val fromCompressedNode =", "body": "nodeIds[from] ?: continue<EOL>"}
{"signature": "val referencedFile =", "body": "findVirtualFile(targetClassOrPackage, originalDescriptor) ?: return null<EOL>"}
{"signature": "val ushortSerializer =", "body": "IrUnsafeCoerceWrappedSerializer(shortSerializer, symbols.kotlinUShort.defaultType, irBuiltIns.shortType)<EOL>"}
{"signature": "val usedInlineFunctions =", "body": "linkedSetOf<IrFunction>()<EOL>"}
{"signature": "if (actualPlatformTypes.values.distinct().size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return UnsafeNumberAnnotation(actualPlatformTypes)<EOL><INDENT>}"}
{"signature": "fun checkBasify() {", "body": "<EOL><INDENT><INDENT>val npmProjectDir = createTempDirectory(<STR_LIT>)<EOL><INDENT><INDENT>val executableFile = npmProjectDir.resolve(<STR_LIT>)<EOL><EOL><INDENT><INDENT>val based = basify(npmProjectDir.toFile(), executableFile.toFile())<EOL><EOL><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>based<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun appendImportedFunction(function: WasmFunction.Imported) {", "body": "<EOL><INDENT><INDENT>b.writeString(function.importPair.moduleName)<EOL><INDENT><INDENT>b.writeString(function.importPair.declarationName)<EOL><INDENT><INDENT>b.writeByte(<NUM_LIT>)<INDENT><INDENT>  b.writeVarUInt<NUM_LIT>(function.type.owner.index)<EOL><INDENT>}"}
{"signature": "if (this.isAnonymous) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val exportedParentDefault =", "body": "ExportedParent()<EOL>"}
{"signature": "if (isConventionCall(outerCall)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val containingDeclarationName = functionDescriptor.containingDeclaration.fqNameUnsafe.asString()<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.PROPERTY_AS_OPERATOR.on(reportOn, functionDescriptor, containingDeclarationName))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if(true) {", "body": "z = <NUM_LIT> }"}
{"signature": "if (!allowSymbolsWithoutSignaturesFromOtherModule) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!symbol.isPublicApi && symbol.hasDescriptor && !platformSpecificSymbol(symbol) &&<EOL><INDENT><INDENT><INDENT><INDENT>symbol.descriptor.module !== currentModule<EOL><INDENT><INDENT><INDENT>) return null<EOL><INDENT><INDENT>}"}
{"signature": "if (hasAbbreviatedTypeId()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeById(abbreviatedTypeId).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "var methodHandleInDefaultMethodIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun warning(message: String) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.warn(message)<EOL><INDENT><INDENT>}"}
{"signature": "fun serializeProperty(<EOL><INDENT><INDENT>descriptor: PropertyDescriptor,<EOL><INDENT><INDENT>proto: ProtoBuf.Property.Builder,<EOL><INDENT><INDENT>versionRequirementTable: MutableVersionRequirementTable?,<EOL><INDENT><INDENT>childSerializer: DescriptorSerializer<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun test(a: Int?, b: Int?) {", "body": "<EOL><INDENT>bar(<!TYPE_MISMATCH!>if (a == null) return else b<!>)<EOL>}"}
{"signature": "val refinedTypeSymbol =", "body": "FirRegularClassSymbol(refinedTypeId)<EOL>"}
{"signature": "val oldValueParameters =", "body": "constructor.valueParameters + oldThisReceiver<EOL>"}
{"signature": "for ((_, typeVariable) in typeParameters.zip(typeVariables)) {", "body": "<EOL><INDENT><INDENT><INDENT>allTypeParameterBounds.put(typeVariable, TypeBoundsImpl(typeVariable))<EOL><INDENT><INDENT>}"}
{"signature": "fun testNullable<NUM_LIT>(x: NX<NUM_LIT><String>?, y: NY<NUM_LIT><Number>?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] == ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] === ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "val linuxFirst =", "body": "CommonizerTarget(LINUX_X<NUM_LIT>, MACOS_X<NUM_LIT>)<EOL>"}
{"signature": "val kotlinTaskPath =", "body": "<STR_LIT><EOL>"}
{"signature": "val receiverRef =", "body": "receiverName.makeRef()<EOL>"}
{"signature": "fun progressionMaxValueToMaxValue() {", "body": "<EOL><INDENT><INDENT>doTest(MaxI..MaxI step <NUM_LIT>, MaxI, MaxI, <NUM_LIT>, listOf(MaxI))<EOL><INDENT><INDENT>doTest(MaxB..MaxB step <NUM_LIT>, MaxB.toInt(), MaxB.toInt(), <NUM_LIT>, listOf(MaxB.toInt()))<EOL><INDENT><INDENT>doTest(MaxS..MaxS step <NUM_LIT>, MaxS.toInt(), MaxS.toInt(), <NUM_LIT>, listOf(MaxS.toInt()))<EOL><INDENT><INDENT>doTest(MaxL..MaxL step <NUM_LIT>, MaxL, MaxL, <NUM_LIT>L, listOf(MaxL))<EOL><EOL><INDENT><INDENT>doTest(MaxC..MaxC step <NUM_LIT>, MaxC, MaxC, <NUM_LIT>, listOf(MaxC))<EOL><EOL><INDENT><INDENT>doTest(MaxUI..MaxUI step <NUM_LIT>, MaxUI, MaxUI, <NUM_LIT>, listOf(MaxUI))<EOL><INDENT><INDENT>doTest(MaxUL..MaxUL step <NUM_LIT>, MaxUL, MaxUL, <NUM_LIT>L, listOf(MaxUL))<EOL><INDENT>}"}
{"signature": "val syntheticProperty =", "body": "resource as AndroidSyntheticProperty<EOL>"}
{"signature": "package foo -> package codegen.", "body": "box.annotations.genericAnnotations.foo<EOL>"}
{"signature": "if (config.internalize) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMAddInternalizePass(manager, <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (val typeVariable = error.typeVariable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is TypeVariableFromCallableDescriptor -> typeVariable.originalTypeParameter.name.asString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is TypeVariableForLambdaReturnType -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val klibFile =", "body": "modulesMap[dependency.moduleName]?.klibFile<EOL>"}
{"signature": "val rightIsBoolean =", "body": "rightVariable != null && fir.rightOperand.resolvedType.isBoolean<EOL>"}
{"signature": "when (determineLinkerOutput(context)) {", "body": "<EOL><INDENT><INDENT><INDENT>LinkerOutputKind.DYNAMIC_LIBRARY -> dynamicLibraryRelocationMode<EOL><INDENT><INDENT><INDENT>LinkerOutputKind.STATIC_LIBRARY -> staticLibraryRelocationMode<EOL><INDENT><INDENT><INDENT>LinkerOutputKind.EXECUTABLE -> executableRelocationMode<EOL><INDENT><INDENT>}"}
{"signature": "var suppressVersionWarnings =", "body": "false<EOL>"}
{"signature": "fun test(k: KClass<out MyString>) {", "body": "<EOL><INDENT>k::class.java<EOL>}"}
{"signature": "val stringValueDirectives =", "body": "mutableMapOf<StringDirective, MutableList<String>>()<EOL>"}
{"signature": "val fileClassMembers =", "body": "ArrayList<IrDeclaration>()<EOL>"}
{"signature": "var isInterfaceMember =", "body": "false<EOL>"}
{"signature": "for (nestedClass in nestedClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collectFunctions(nestedClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val numPagesToGrow =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(availableAddress - currentMaxSize) / WASM_PAGE_SIZE_IN_BYTES + <NUM_LIT><EOL>"}
{"signature": "else if (ktElement.destructuringDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>origin = IrDeclarationOrigin.DESTRUCTURED_OBJECT_PARAMETER<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testSeveralDirs() {", "body": "<EOL><INDENT><INDENT>val dir<NUM_LIT> = writeDir(<STR_LIT>, processors(<STR_LIT>))<EOL><INDENT><INDENT>val dir<NUM_LIT> = writeDir(<STR_LIT>, processors(<STR_LIT>))<EOL><EOL><INDENT><INDENT>val impls = ServiceLoaderLite.findImplementations<Processor>(listOf(dir<NUM_LIT>, dir<NUM_LIT>))<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, impls.size)<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in impls)<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in impls)<EOL><INDENT>}"}
{"signature": "val BINARY_STUB_VERSION =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (x) {", "body": "<EOL><INDENT><INDENT>return f<NUM_LIT>(y)<EOL><INDENT>}"}
{"signature": "for (var i = <NUM_LIT>; i < this.length; i++) {", "body": "<EOL><INDENT><INDENT>this[i] = value;<EOL><INDENT>}"}
{"signature": "val reportStep =", "body": "finalGlobalCount / progressReportsCount<EOL>"}
{"signature": "fun r() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val eq =", "body": "binaryIntrinsic(coerceTo(leftKotlinType), coerceTo(rightKotlinType), eqSelector)<EOL>"}
{"signature": "package are modified (e.", "body": "g. merged) after deserialization.<EOL>"}
{"signature": "if (!DescriptorUtils.isInterface(immediateConcreteSuper.containingDeclaration)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "val symbolRootVirtualFile =", "body": "getSymbolRootFile(symbolVirtualFile, symbolFile.packageFqName)<EOL>"}
{"signature": "val intermediateBuilders =", "body": "mutableListOf<IntermediateBuilder<BuilderField, Element>>()<EOL>"}
{"signature": "fun generateFunctionParameterDeclarationsAndReturnType(<EOL><INDENT><INDENT>irFunction: IrFunction,<EOL><INDENT><INDENT>ktParameterOwner: KtPureElement?,<EOL><INDENT><INDENT>ktReceiverParameterElement: KtElement?,<EOL><INDENT><INDENT>ktContextReceiverParametersElements: List<KtElement><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>declarationGenerator.generateScopedTypeParameterDeclarations(irFunction, irFunction.descriptor.propertyIfAccessor.typeParameters)<EOL><INDENT><INDENT>irFunction.returnType = irFunction.descriptor.returnType!!.toIrType()<EOL><INDENT><INDENT>generateValueParameterDeclarations(irFunction, ktParameterOwner, ktReceiverParameterElement, ktContextReceiverParametersElements)<EOL><INDENT>}"}
{"signature": "val fakeArgCount =", "body": "functionDescriptor.valueParameters.size - receivers<EOL>"}
{"signature": "val ideaGradleDownloadSourcesProperty =", "body": "<EOL><INDENT><INDENT>extension.project.providers.systemProperty(<STR_LIT>)<EOL>"}
{"signature": "for (unsignedType in UnsignedType.values()) {", "body": "<EOL><INDENT><INDENT><INDENT>arrayClassIdToUnsignedClassId[unsignedType.arrayClassId] = unsignedType.classId<EOL><INDENT><INDENT><INDENT>unsignedClassIdToArrayClassId[unsignedType.classId] = unsignedType.arrayClassId<EOL><INDENT><INDENT>}"}
{"signature": "val findViewByIdParent =", "body": "if (getView == null) container.fqName else FqName(AndroidConst.VIEW_FQNAME)<EOL>"}
{"signature": "if (resolvedCall.resultingDescriptor.returnType.containsArrayOfNothing()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.UNSUPPORTED.on(reportOn, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (isComputed) {", "body": "<EOL><INDENT><INDENT><INDENT>classBuilder().done(generateSmapCopyToAnnotation)<EOL><INDENT><INDENT>}"}
{"signature": "val largeFoo =", "body": "Foo(<NUM_LIT>)<EOL>"}
{"signature": "fun setKotlinCodeAnalyzer(kotlinCodeAnalyzer: KotlinCodeAnalyzer) {", "body": "<EOL><INDENT><INDENT>this.kotlinCodeAnalyzer = kotlinCodeAnalyzer<EOL><INDENT>}"}
{"signature": "fun foo(other: C) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>"}
{"signature": "if (c == '\\\\') {", "body": "<EOL><INDENT><INDENT><INDENT>return normalizeTail(i, path, separator)<EOL><INDENT><INDENT>}"}
{"signature": "for (assertion in assertions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>base.addSuppressed(assertion)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val entryPoint =", "body": "values.singleOrNull() ?: fail { <STR_LIT> }<EOL>"}
{"signature": "val startCoroutineUninterceptedOrReturnIntrinsics =", "body": "<EOL><INDENT><INDENT>(<NUM_LIT>.<NUM_LIT>).map { getInternalFunction(<STR_LIT>) }<EOL>"}
{"signature": "val firRegularClassesSet =", "body": "mutableSetOf<FirRegularClassSymbol>()<EOL>"}
{"signature": "val presentableFqName =", "body": "fqName.ifEmpty { <STR_LIT> }<EOL>"}
{"signature": "fun test<NUM_LIT>(value: Any?) {", "body": "<EOL><INDENT>val result = (value as? Map<*, *>)?.get(<STR_LIT>)<EOL>}"}
{"signature": "if (id == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>candidate is ClassDescriptor || candidate is TypeAliasDescriptor<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testTopLevelValUnchekedCast() {", "body": "<EOL><INDENT><INDENT>assertEquals((topLevelS as AtomicRef<Array<String>>).value[<NUM_LIT>], <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (fastJarFs == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>messageCollector?.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>STRONG_WARNING,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>applicationEnvironment.jarFileSystem<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (functionLiteral != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val functionalType = getExpectedType(functionLiteral) as? KtFunctionalType<EOL><INDENT><INDENT><INDENT>functionalType?.returnType<EOL><INDENT><INDENT>}"}
{"signature": "val primitiveIrTypes =", "body": "listOf(booleanType, charType, byteType, shortType, intType, floatType, longType, doubleType)<EOL>"}
{"signature": "val TEST_MODE_PLACEHOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "val debugMessage =", "body": "String.format(kind.debugMessage, *formatParams)<EOL>"}
{"signature": "val floatPosInfinity =", "body": "<!EVALUATED: `Infinity`!>{ java.lang.Float.POSITIVE_INFINITY }()<!><EOL>"}
{"signature": "var globalNum =", "body": "<NUM_LIT><EOL>"}
{"signature": "val fileCount =", "body": "rawModuleFragment.files.size<EOL>"}
{"signature": "if (mappedProjection.kind == ProjectionKind.INVARIANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return convertProjectionKindToConeTypeProjection(projection.kind)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var processes =", "body": "ConcurrentLinkedQueue<Process>()<EOL>"}
{"signature": "if (other is C) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>other.a.baseFun()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val initialArgumentType =", "body": "resolvedCall.candidateDescriptor.valueParameters.getOrNull(i)?.type?.upperIfFlexible() ?: continue<EOL>"}
{"signature": "if (hasInlineOnlyAnnotation) {", "body": "<EOL><INDENT><INDENT><INDENT>action()<EOL><INDENT><INDENT>}"}
{"signature": "fun C(a: Int) {", "body": "<EOL><INDENT>log += <STR_LIT><EOL>}"}
{"signature": "fun addSourceRoot(path: Path) {", "body": "<EOL><INDENT><INDENT>sourceRoots.add(path)<EOL><INDENT>}"}
{"signature": "val floatNegInfinity =", "body": "<!EVALUATED: `-Infinity`!>{ java.lang.Float.NEGATIVE_INFINITY }()<!><EOL>"}
{"signature": "fun suspendThrowsRuntimeException<NUM_LIT>() {", "body": "}<EOL><EOL>@Throws(RuntimeException::class, Exception<NUM_LIT>::class)<EOL>suspend fun suspendThrowsRuntimeException<NUM_LIT>() {}"}
{"signature": "val messageDigest =", "body": "MessageDigest.getInstance(<STR_LIT>)<EOL>"}
{"signature": "val fileLevelExportedVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (val (y<NUM_LIT>t: T, y<NUM_LIT>) = foo) {", "body": "}"}
{"signature": "fun setValue(thisRef: Any, property: KProperty<*>, value: EE?) {", "body": "<EOL><INDENT><INDENT>setNullableValue(thisRef, key ?: property.toKey(), value)<EOL><INDENT>}"}
{"signature": "val commonCacheKind =", "body": "nativeCacheKind<EOL>"}
{"signature": "if (loadValueFromPomXml(file.path, listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)) == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val version = loadValueFromPomXml(file.path, listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>poms.add(Pom(file.path, version))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun expanded(maxCapacity: Int, newCapacity: Int, buffer: Array<Any?>) {", "body": "<EOL><INDENT>select(buffer.copyOf(newCapacity), toArray(arrayOfNulls(newCapacity)))<EOL>}"}
{"signature": "val byVarDecoded =", "body": "Json.decodeFromString<DelegatedByObjectProperty>(byVarJsonStr)<EOL>"}
{"signature": "fun arguments(action: KaptArguments.() -> Unit) {", "body": "<EOL><INDENT><INDENT>apOptionsActions += action<EOL><INDENT>}"}
{"signature": "fun ExpectComposable(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>value: String,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>composeText: (String) -> String,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>content: @Composable (v: String) -> Unit<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>content(composeText(value))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun f(x: RuntimeException) {", "body": "throw x }"}
{"signature": "val rangeLiteral =", "body": "getBoundedValue(codegen)<EOL>"}
{"signature": "val maxIndexIterable =", "body": "maxIndexSequence.asIterable()<EOL>"}
{"signature": "val YARN_LOCK_MISMATCH_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "when (prev.opcode) {", "body": "<EOL><INDENT><INDENT><INDENT>Opcodes.LDC -> (prev as LdcInsnNode).cst as String<EOL><INDENT><INDENT><INDENT>else -> return null<EOL><INDENT><INDENT>}"}
{"signature": "for (e in this.sourceIterator()) {", "body": "<EOL><INDENT><INDENT>val key = keyOf(e)<EOL><INDENT><INDENT>val accumulator = destination[key]<EOL><INDENT><INDENT>destination[key] = operation(key, accumulator, e, accumulator == null && !destination.containsKey(key))<EOL><INDENT>}"}
{"signature": "val fqNameFromClassWithPreciseName =", "body": "javaPsiFacade.findClass(nameWithDots, scope)?.qualifiedName<EOL>"}
{"signature": "val fieldsWithGetter =", "body": "computeFieldsWithGetter(classSymbol) ?: return null<EOL>"}
{"signature": "for (multifileClassFqName in filesInMultifileClasses.keySet() + obsoleteMultifileClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>CodegenFactory.doCheckCancelled(state)<EOL><INDENT><INDENT><INDENT>generateMultifileClass(state, multifileClassFqName, filesInMultifileClasses.get(multifileClassFqName))<EOL><INDENT><INDENT>}"}
{"signature": "val l<NUM_LIT> =", "body": "r<EOL>"}
{"signature": "if (hasExtension(JvmProtoBuf.isRaw)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JvmProtoBuf.isRaw).hashCode()<EOL><INDENT>}"}
{"signature": "val executeTaskNames =", "body": "allTasks.filter { it.enabled }.map { it.name }.toSet()<EOL>"}
{"signature": "val xClassSuperType =", "body": "assertIs<CirClassType>(xSuperType, <STR_LIT>)<EOL>"}
{"signature": "val runtimeElementsConfiguration =", "body": "project.configurations<EOL>"}
{"signature": "val subDerivedWithKey =", "body": "SubDerivedWithKey()<EOL>"}
{"signature": "when (sourceElement) {", "body": "<EOL><INDENT><INDENT><INDENT>is JavaBinarySourceElement -> sourceElement.virtualFile<EOL><INDENT><INDENT><INDENT>is KotlinJvmBinarySourceElement -> (sourceElement.binaryClass as? VirtualFileKotlinClass)?.file ?: return<EOL><INDENT><INDENT><INDENT>else -> return<EOL><INDENT><INDENT>}"}
{"signature": "val classMemberLocalContext =", "body": "LocalClassMemberContext(declaration, localContext)<EOL>"}
{"signature": "val artifactPath =", "body": "line.trimStart { it.isWhitespace() }<EOL>"}
{"signature": "val jsEnumEntryCreation =", "body": "ClassInitializerTranslator.generateEnumEntryInstanceCreation(context, enumEntry, enumEntryOrdinal)<EOL>"}
{"signature": "if (offsets[i] == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if(x < y) {", "body": "<EOL><INDENT>}"}
{"signature": "if (containerRetention > annotationRetention) {", "body": "<EOL><INDENT><INDENT><INDENT>return ErrorsJvm.REPEATABLE_CONTAINER_HAS_SHORTER_RETENTION<EOL><INDENT><INDENT><INDENT><INDENT>.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>languageVersionSettings,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportOn,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>containerClass.fqNameSafe,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>containerRetention.name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>annotationClass.fqNameSafe,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>annotationRetention.name<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val NUMERICAL_METRICS_RELATIVE_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val testView =", "body": "TestView(activityTestRule.activity)<EOL>"}
{"signature": "package nativeKLib<EOL>.", "body": ""}
{"signature": "val elseWhenExpression =", "body": "(result as? FirSingleExpressionBlock)?.statement as? FirWhenExpression<EOL>"}
{"signature": "if (fromOptions == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>RuntimeProcType.NON_INCREMENTAL<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mySet =", "body": "MySet()<EOL>"}
{"signature": "if (getter.name.asString() == GETTER) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(getter.type as IrSimpleType).arguments.first().typeOrNull<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (resultIf == null && entry.isElse) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context().addStatementsToCurrentBlockFrom(statementBlock)<EOL><INDENT><INDENT><INDENT><INDENT>return statement<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val equalsInstance =", "body": "(this == instance)<EOL>"}
{"signature": "if (!s.matches(p)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>cnt++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (NameSuggestion.sanitizeName(name) != name) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJs.NAME_CONTAINS_ILLEGAL_CHARS.on(reportOn))<EOL><INDENT><INDENT>}"}
{"signature": "fun use<NUM_LIT>(<EOL><INDENT>c<NUM_LIT>: NewClassExperimentalInThePast,<EOL><INDENT>t<NUM_LIT>: TypeAliasToNewClass<EOL>) {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE!>newPublishedFun<!>()<EOL><INDENT>newFunExperimentalInThePast()<EOL><INDENT>newValExperimentalInThePast<EOL><INDENT>NewClassExperimentalInThePast()<EOL>}"}
{"signature": "fun withA(f: A.() -> Unit) {", "body": "}<EOL><EOL>fun withB(f: B.() -> Unit) {}"}
{"signature": "val theCall =", "body": "ns_r_notauth<EOL>"}
{"signature": "if (value == null || value < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>messageCollector.report(ERROR, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val actualVal =", "body": "res.value.result<EOL>"}
{"signature": "var prev =", "body": "<NUM_LIT><EOL>"}
{"signature": "val namesProperty =", "body": "it as? JsonArray ?: return SourceMapError(<STR_LIT>)<EOL>"}
{"signature": "if (firClass is FirRegularClass && firClass.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>firClass.valueClassRepresentation = computeValueClassRepresentation(firClass, session)<EOL><INDENT><INDENT>}"}
{"signature": "var found =", "body": "false<EOL>"}
{"signature": "val WARNING_LEVEL =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val enumCompanionDescriptor =", "body": "(enumEntryDescriptor.containingDeclaration as? ClassDescriptor)?.companionObjectDescriptor<EOL>"}
{"signature": "if (container is ClassifierDescriptorWithTypeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return container.declaredTypeParameters[tpIndex]<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (oldSignatures == newSignatures) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (topLevelCallContext.inferenceSession is StubTypesBasedInferenceSession<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>topLevelCallContext.inferenceSession.addNestedInferenceSession(this)<EOL><INDENT><INDENT>}"}
{"signature": "val forth =", "body": "Forth()<EOL>"}
{"signature": "val lineContent =", "body": "getText(info)<EOL>"}
{"signature": "fun calcRatio() {", "body": "<EOL><INDENT><INDENT>val inputs = createMeanVarianceBenchmarks()<EOL><EOL><INDENT><INDENT>val ratio = inputs.first.calcRatio(inputs.second)<EOL><INDENT><INDENT>val expectedMean = <NUM_LIT><EOL><INDENT><INDENT>val expectedVariance = <NUM_LIT><EOL><EOL><INDENT><INDENT>assertTrue(abs(ratio.mean - expectedMean) < eps)<EOL><INDENT><INDENT>assertTrue(abs(ratio.variance - expectedVariance) < eps)<EOL><INDENT>}"}
{"signature": "val directChildren =", "body": "if (!hasBranches())<EOL>"}
{"signature": "if (classSymbol.hasAnnotation(JsPlainObjectsAnnotations.jsPlainObjectAnnotationClassId, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkJsPlainObjectAnnotationTargets(classSymbol, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT>checkJsPlainObjectSuperTypes(classSymbol, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT>checkJsPlainObjectMembers(classSymbol, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var jump =", "body": "insnNode.dflt.indexOf<EOL>"}
{"signature": "fun visitValueParameterReference(valueParameterReference: KtValueParameterReference<ConeKotlinType, ConeDiagnostic>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>printer.print(valueParameterReference.name)<EOL><INDENT>}"}
{"signature": "if (boxParameter.type.isNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>+irIfThen(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>condition = irEqeqeq(irGet(boxParameter), irNull()),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>thenPart = irReturn(irNullPointerOrReference(function.returnType))<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (property.isJvmFieldPropertyInInterfaceCompanion() && versionRequirementTable != null) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(JvmProtoBuf.flags, JvmFlags.getPropertyFlags(true))<EOL><INDENT><INDENT>}"}
{"signature": "if (project.plugins.hasPlugin(<STR_LIT>) || project.plugins.hasPlugin(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinProject.ProjectType.PLATFORM_JS<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fatTask =", "body": "project.registerAssembleFatForXCFrameworkTask(xcFrameworkName, buildType, fatTarget)<EOL>"}
{"signature": "val WINDOW =", "body": "<STR_LIT><EOL>"}
{"signature": "val isKotlinClass =", "body": "kotlinClassHeader != null<EOL>"}
{"signature": "val targetModule =", "body": "resolvedDependency.children.single()<EOL>"}
{"signature": "val fragmentManager =", "body": "appPackageFqName.child(<STR_LIT>)<EOL>"}
{"signature": "val sortedConstructors =", "body": "DFS.topologicalOrder(allConstructors.asIterable()) { thisCalls[it].orEmpty() }.reversed()<EOL>"}
{"signature": "if (propertyAccessorDeclaration != null || other.propertyAccessorDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return propertyAccessorDeclaration == other.propertyAccessorDeclaration<EOL><INDENT><INDENT>}"}
{"signature": "val actualDelegatedTypeRef =", "body": "(actualTypeRef as? FirResolvedTypeRef?)?.delegatedTypeRef ?: return<EOL>"}
{"signature": "fun registerSignature(declaration: JCTree.JCMethodDecl, method: MethodNode) {", "body": "<EOL><INDENT><INDENT>signatureInfo[declaration.getJavacSignature()] = method.name + method.desc<EOL><INDENT>}"}
{"signature": "val lastInList =", "body": "j == lastIndex<EOL>"}
{"signature": "fun unitCoercion(f: suspend () -> Unit) {", "body": "}<EOL>fun foo(): Int = <NUM_LIT><EOL><EOL>fun defaults(f: suspend (Int) -> String) {}"}
{"signature": "var yc =", "body": "<NUM_LIT>toChar()<EOL>"}
{"signature": "val scriptSymbol =", "body": "maybeScriptType.classifierOrNull ?: return null<EOL>"}
{"signature": "for (c in sb) {", "body": "<EOL><INDENT><INDENT>if (ctr % <NUM_LIT> == <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>sb.append('x')<EOL><INDENT><INDENT>ctr++<EOL><INDENT><INDENT>result.append(c)<EOL><INDENT>}"}
{"signature": "val leafClassesOrInterfaces =", "body": "computeLeafClassesOrInterfaces(upperBoundClasses)<EOL>"}
{"signature": "val devirtualizedCallSites =", "body": "input.devirtualizationAnalysisResult.devirtualizedCallSites<EOL>"}
{"signature": "val compiledClassFile =", "body": "subProject(<STR_LIT>)<EOL>"}
{"signature": "val sharedImmutable =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val hiddenConstructorsOfSealedClasses =", "body": "ConcurrentHashMap<IrConstructor, IrConstructor>()<EOL>"}
{"signature": "val unsubstitutedParameterType =", "body": "candidateDescriptor.valueParameters.getOrNull(<NUM_LIT>)?.type?.unwrap() ?: return<EOL>"}
{"signature": "val scopeOwner =", "body": "context.scope.ownerDescriptor<EOL>"}
{"signature": "val testClassSettings =", "body": "getOrCreateSimpleTestClassSettings()<EOL>"}
{"signature": "fun assertSyntheticResolvableReferenceIsNotResolved(resolvable: FirResolvable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assert(resolvable.calleeReference is FirStubReference)<EOL><INDENT>}"}
{"signature": "var jumpOutPossible =", "body": "jumpOutPossibleInSubject<EOL>"}
{"signature": "val KOTLIN_SUSPEND_BUILT_IN_FUNCTION_CALLABLE_ID =", "body": "CallableId(StandardClassIds.BASE_KOTLIN_PACKAGE, BUILTIN_SUSPEND_NAME)<EOL>"}
{"signature": "if ((inheritedAccessor is PropertyGetterDescriptor) == (traitAccessor is PropertyGetterDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result[traitAccessor] = inheritedAccessor<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun declareVariable(property: KtVariableDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>add(VariableDeclarationInstruction(property, currentScope))<EOL><INDENT><INDENT>}"}
{"signature": "package example;<EOL>.", "body": ""}
{"signature": "val emptyMatch =", "body": "pattern.toRegex()<EOL>"}
{"signature": "val FUNCTION_NAME_PREFIX =", "body": "'#'<EOL>"}
{"signature": "val GET =", "body": "<STR_LIT><EOL>"}
{"signature": "val impliedType =", "body": "if (operation == Operation.EqNull) nullableNothingType else anyType<EOL>"}
{"signature": "val emptyPackages =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val varInsn =", "body": "insn as VarInsnNode<EOL>"}
{"signature": "val jsTranslatorReflectionPattern =", "body": "<STR_LIT><EOL>"}
{"signature": "val defaultParam =", "body": "scope.defaultParameter<EOL>"}
{"signature": "val finallyGaps =", "body": "tryInfo.gaps.toList()<EOL>"}
{"signature": "val baseClassLoadersChain =", "body": "generateSequence(baseClassLoader) { it.parent }<EOL>"}
{"signature": "val publishedVariantsNamesWithCompilation =", "body": "project.future { getPublishedPlatformCompilations(project).mapKeys { it.key.variantName } }<EOL>"}
{"signature": "val uniqueSourceRoots =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "val rows =", "body": "ArrayList<List<String>>()<EOL>"}
{"signature": "val primitiveIrSymbols =", "body": "irBuiltIns.primitiveIrTypes.map { it.classifierOrFail as IrClassSymbol }<EOL>"}
{"signature": "fun recordSourceParameter(call: IrCall, index: Int, scope: Scope.BlockScope) {", "body": "<EOL><INDENT><INDENT>sourceFixups.add(SourceInfoFixup(call, index, scope))<EOL><INDENT>}"}
{"signature": "fun registerProjectComponents(project: MockProject, configuration: CompilerConfiguration) {", "body": "<EOL><INDENT><INDENT>AnalysisHandlerExtension.registerExtension(project, CustomAnalysisHandler())<EOL><INDENT>}"}
{"signature": "val comp<NUM_LIT> =", "body": "(engine as Compilable).compile(<STR_LIT>)<EOL>"}
{"signature": "val newJsArray =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "fun Bar() {", "body": "}<EOL><INDENT><INDENT>@Foo(<NUM_LIT>) fun Bam() {}"}
{"signature": "val primitiveArrayForType =", "body": "primitiveArrayElementTypes.asSequence().associate { it.value to it.key }<EOL>"}
{"signature": "while (y is Int) {", "body": "<EOL><INDENT><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>inc<!>()<EOL><INDENT><INDENT><INDENT>y++<EOL><INDENT><INDENT>}"}
{"signature": "val classNames =", "body": "last().split('.')<EOL>"}
{"signature": "val cBridgeBodyLines =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "for (d in data) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>$tdClass\\<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val protectedVar =", "body": "Unit<EOL>"}
{"signature": "for (intermediateSourceSet in listOf(linuxIntermediateMain, linuxIntermediateTest)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertConstraint(intermediateSourceSet, IdeMultiplatformImport.SourceSetConstraint.isAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(intermediateSourceSet, IdeMultiplatformImport.SourceSetConstraint.isJvmAndAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(intermediateSourceSet, IdeMultiplatformImport.SourceSetConstraint.isLeaf, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(intermediateSourceSet, IdeMultiplatformImport.SourceSetConstraint.isNative, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(intermediateSourceSet, IdeMultiplatformImport.SourceSetConstraint.isSinglePlatformType, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(intermediateSourceSet, IdeMultiplatformImport.SourceSetConstraint.unconstrained, isMatchExpected = true)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitTypeRef(typeRef: FirTypeRef, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allTypeRefCheckers.check(typeRef, data)<EOL><INDENT>}"}
{"signature": "val isConventionOperator =", "body": "element is KtOperationReferenceExpression && element.isConventionOperator()<EOL>"}
{"signature": "val INCREMENTAL_COMPILATION =", "body": "<EOL><INDENT><INDENT>CompilerConfigurationKey.create<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "package hilt.", "body": "error.sampleapp<EOL>"}
{"signature": "val firReturnTargets =", "body": "mutableSetOf<FirFunction>()<EOL>"}
{"signature": "when (typeArgument) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrTypeProjection -> makeTypeProjection(this.remapType(typeArgument.type), typeArgument.variance)<EOL><INDENT><INDENT><INDENT>is IrStarProjection -> typeArgument<EOL><INDENT><INDENT>}"}
{"signature": "fun hoo() {", "body": "<EOL><INDENT><INDENT>result += <STR_LIT><EOL><INDENT>}"}
{"signature": "for (file in element.files) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>collect(file)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val implClassFQN =", "body": "JvmFileClassUtil.getPartFqNameForDeserialized(overload)<EOL>"}
{"signature": "val jsErrorReporter =", "body": "JsErrorReporter(jsCodeExpr, context, reporter)<EOL>"}
{"signature": "fun TestMultipleDifferentlyNamedValueParametersBReverse(arg<NUM_LIT>B: UserKlassA, arg<NUM_LIT>B: UserKlassB) {", "body": "}<EOL><EOL>class TestMultipleTypeAliasedValueParameterTypesA {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) constructor(arg<NUM_LIT>: UserKlassA, arg<NUM_LIT>: SameUserKlassB)<EOL>}"}
{"signature": "if (dirty.used && dirty is IrChangedBitMaskVariable) {", "body": "<EOL><INDENT><INDENT><INDENT>skipPreamble.statements.addAll(<NUM_LIT>, dirty.asStatements())<EOL><INDENT><INDENT><INDENT>dirty<EOL><INDENT><INDENT>}"}
{"signature": "val xLongDyanmic =", "body": "xLong + xLong<EOL>"}
{"signature": "if (!isStandalone) {", "body": "<EOL><INDENT><INDENT><INDENT>moduleDescriptor.getCapability(REFINER_CAPABILITY)?.value = TypeRefinementSupport.Enabled(this)<EOL><INDENT><INDENT>}"}
{"signature": "fun doSomething() {", "body": "<EOL><INDENT>}"}
{"signature": "if (param is CapturedParamInfo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>param.cloneWithNewDeclarationIndex(nextDeclarationIndex++)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (annotationDescriptor in getSuppressionAnnotations(annotated)) {", "body": "<EOL><INDENT><INDENT><INDENT>processAnnotation(builder, annotationDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val oldJsMap =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "fun visitErrorTypeRef(errorTypeRef: FirErrorTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitErrorTypeRef(errorTypeRef)<EOL><INDENT>}"}
{"signature": "if (char.isLetterOrDigit() || char == '_') {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if ((descriptor.containingDeclaration as? ClassDescriptor)?.kind == ClassKind.INTERFACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return (access or Opcodes.ACC_PUBLIC or Opcodes.ACC_STATIC) and<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Opcodes.ACC_PRIVATE.inv() and Opcodes.ACC_PROTECTED.inv()<INDENT><INDENT> }"}
{"signature": "if (tryPossibleAnswer(bounds, superTypeOfNumberLowerBounds)) {", "body": "<EOL><INDENT><INDENT><INDENT>return setOf(superTypeOfNumberLowerBounds!!)<EOL><INDENT><INDENT>}"}
{"signature": "val ContextFunctionTypeParams =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val isAtLeastJvm<NUM_LIT>Target =", "body": "!targets.contains(JvmTarget.JVM_<NUM_LIT>_<NUM_LIT>description)<EOL>"}
{"signature": "val outerThisAccessors =", "body": "mapping.outerThisCacheAccessors<EOL>"}
{"signature": "val DIV =", "body": "OperatorNameConventions.DIV<EOL>"}
{"signature": "fun assertGenericSuper(expected: String, function: Any?) {", "body": "<EOL><INDENT>val clazz = (function as java.lang.Object).getClass()!!<EOL><INDENT>val genericSuper = clazz.getGenericInterfaces()[<NUM_LIT>]!!<EOL><INDENT>assertEquals(expected, genericSuper)<EOL>}"}
{"signature": "if (incompatibility != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(element.source, FirErrors.INCOMPATIBLE_CLASS, source.presentableString, incompatibility, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun column(name: String, init: TableColumn.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val column = TableColumn(name).init()<EOL><INDENT>}"}
{"signature": "fun topLevelFun() {", "body": "<EOL><INDENT>external class <!NESTED_EXTERNAL_DECLARATION!>A<!><EOL><EOL><INDENT>class B<EOL><EOL><INDENT>fun foo() = <NUM_LIT><EOL><EOL><INDENT><!NESTED_EXTERNAL_DECLARATION!>external fun bar(): Int<!><EOL>}"}
{"signature": "val coneTypeOrNullImport =", "body": "ArbitraryImportable(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (x < <NUM_LIT> && x != <NUM_LIT> && x > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT> + <!NON_TAIL_RECURSIVE_CALL!>badTails<!>(x - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val FQ_NAME_KONAN =", "body": "FqName.fromSegments(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "val embeddedBuildScript =", "body": "gradleBuildScript(embeddedModuleName)<EOL>"}
{"signature": "if (typeReference == null || typeReference.text != type) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun canUpdateResult() {", "body": "<EOL><INDENT><INDENT>val lazyScheme = LazyScheme(schemeOf(<STR_LIT>))<EOL><INDENT><INDENT>val bindings = lazyScheme.bindings<EOL><INDENT><INDENT>val a = bindings.closed(<STR_LIT>)<EOL><INDENT><INDENT>val b = bindings.closed(<STR_LIT>)<EOL><INDENT><INDENT>val c = bindings.closed(<STR_LIT>)<EOL><INDENT><INDENT>bindings.unify(lazyScheme.target, a)<EOL><INDENT><INDENT>bindings.unify(lazyScheme.parameters[<NUM_LIT>].target, b)<EOL><INDENT><INDENT>bindings.unify(lazyScheme.parameters[<NUM_LIT>].target, c)<EOL><INDENT><INDENT>assertEquals(schemeOf(<STR_LIT>), lazyScheme.toScheme())<EOL><INDENT>}"}
{"signature": "val extensionMethod =", "body": "Class.forName(<STR_LIT>).declaredMethods.single { it.name.startsWith(<STR_LIT>) }<EOL>"}
{"signature": "val baseValueType =", "body": "signature.valueParameters.single().asmType<EOL>"}
{"signature": "val prevNode =", "body": "thisNode.previous<EOL>"}
{"signature": "fun testJvmPackageNameLanguageVersion<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>, loadWith = LanguageVersion.KOTLIN_<NUM_LIT>_<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (context.keeper.shouldKeep(function)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.minimizedNameGenerator.keepName(signature)<EOL><INDENT><INDENT>}"}
{"signature": "val sourceTypeClassifier =", "body": "argument.resolvedType.toIrType().classifierOrNull ?: return this<EOL>"}
{"signature": "val valuesFunc =", "body": "DescriptorUtils.getFunctionByName(serializableDescriptor.staticScope, StandardNames.ENUM_VALUES)<EOL>"}
{"signature": "val expectSingleCandidate =", "body": "(compatibility[Compatible] ?: compatibility.values.singleOrNull())?.singleOrNull()<EOL>"}
{"signature": "val arrayItemField =", "body": "DataFlowIR.Field(symbolTable.mapClassReferenceType(context.irBuiltIns.anyClass.owner), <NUM_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val functionTypeKind =", "body": "context.session.functionTypeService.extractSingleSpecialKindForFunction(anonymousFunction.symbol)<EOL>"}
{"signature": "val o =", "body": "O.Alpha.Companion.FromCompanionAlpha()<EOL>"}
{"signature": "if (name != prevName) {", "body": "<EOL><INDENT><INDENT><INDENT>prevName = interner.intern(name)<EOL><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT>}"}
{"signature": "val openVal =", "body": "Unit<EOL>"}
{"signature": "val javaDocDokkaDependency =", "body": "project.dependencies.create(<STR_LIT>)<EOL>"}
{"signature": "if (functionProto.hasNameId()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>name = deserializeName(functionProto.nameId)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var extensionRegistered =", "body": "false<EOL>"}
{"signature": "if (selector == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sourceElement<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var zeroSlot =", "body": "<STR_LIT>;<EOL>"}
{"signature": "val irEnumClass =", "body": "enumClassSymbol.owner<EOL>"}
{"signature": "if (!isContainsOnlyUnsignedTypes()) {", "body": "<EOL><INDENT><INDENT><INDENT>result += builtIns.numberType<EOL><INDENT><INDENT>}"}
{"signature": "val fakeApiElementsSourceSets =", "body": "projectStructureMetadata.sourceSetNamesByVariantName[<STR_LIT>]<EOL>"}
{"signature": "fun visitVariableDescriptor(descriptor: VariableDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>reportUnexpectedDescriptor(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (hasTypeAliasName()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + fqNameIndexes(typeAliasName)<EOL><INDENT>}"}
{"signature": "var normalExpressions =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (propertyAccessor.isExternal) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val defDirectory =", "body": "<EOL><INDENT><INDENT>File(distribution.platformDefs(konanTarget)).absoluteFile<EOL>"}
{"signature": "val firstMessage =", "body": "first.getDeprecationMessage() ?: return@run null<EOL>"}
{"signature": "fun printAll() {", "body": "<EOL><INDENT><INDENT>while (!buffer.isEmpty())<EOL><INDENT><INDENT>  out(buffer.pop())<EOL><INDENT>}"}
{"signature": "val DEFAULT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val conversionDefinitelyNotNeeded =", "body": "conversion.conversionDefinitelyNotNeeded(candidate, argument, candidateExpectedType)<EOL>"}
{"signature": "val kinds =", "body": "session.functionTypeService.extractAllSpecialKindsForFunction(symbol)<EOL>"}
{"signature": "if (varargIndex != <NUM_LIT> || numberOfTrailingParameters > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>sliceIntrinsicArgs.add(irInt(varargIndex))<EOL><INDENT><INDENT><INDENT>sliceIntrinsic = jsSliceArrayLikeFromIndex<EOL><INDENT><INDENT>}"}
{"signature": "val defaultResources =", "body": "actualResources<EOL>"}
{"signature": "val MAX_BYTES_PER_CHAR =", "body": "<NUM_LIT><EOL>"}
{"signature": "val array =", "body": "Array(workers.size) { it }<EOL>"}
{"signature": "fun id(s: String) {", "body": "result += s }"}
{"signature": "val otherElements =", "body": "if (other is CompositePostConfigure) other.elements else listOf(other)<EOL>"}
{"signature": "val handledProperties =", "body": "SmartSet.create<PropertyDescriptor>()<EOL>"}
{"signature": "fun exception() {", "body": "<EOL><INDENT>throw CustomException(<STR_LIT>)<EOL>}"}
{"signature": "val END_MARKER =", "body": "<STR_LIT><EOL>"}
{"signature": "val outStreams =", "body": "Array(ParallelStartParams.threads, { ByteArrayOutputStream() })<EOL>"}
{"signature": "fun java() {", "body": "snapshotAPIAndCompare(testName.methodName) }"}
{"signature": "val explicitCacheFiles =", "body": "configuration.get(KonanConfigKeys.CACHED_LIBRARIES)!!<EOL>"}
{"signature": "val kotlinArtifactsExtension =", "body": "project.kotlinArtifactsExtension<EOL>"}
{"signature": "val thisClassOrigin =", "body": "kotlinOrigin<EOL>"}
{"signature": "val scriptSourceFile =", "body": "scriptFile.sourceFile?.toSourceCode() ?: return emptyList()<EOL>"}
{"signature": "if (declaration.isVisibleInLVT) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.markLineNumber(startOffset = true)<EOL><INDENT><INDENT><INDENT>pushDefaultValueOnStack(varType, mv)<EOL><INDENT><INDENT><INDENT>mv.store(index, varType)<EOL><INDENT><INDENT>}"}
{"signature": "val nameIndex =", "body": "name?.let(this::getNameIndex) ?: <NUM_LIT><EOL>"}
{"signature": "val shallowDependencies =", "body": "shallowTypeVariableDependencies[a] ?: return false<EOL>"}
{"signature": "when(type.unwrapTypedefs()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is PrimitiveType,<EOL><INDENT><INDENT><INDENT><INDENT>is PointerType,<EOL><INDENT><INDENT><INDENT><INDENT>is ObjCPointer -> WrappedMacroDef(name, type)<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package <!INVALID_CHARACTERS!>`>`<!><EOL>.", "body": ""}
{"signature": "val accessorAnnotations =", "body": "mutableListOf<FirAnnotationCall>()<EOL>"}
{"signature": "val testString =", "body": "<STR_LIT><EOL>"}
{"signature": "val suspendableExpressionValues =", "body": "mutableMapOf<IrSuspendableExpression, MutableList<IrSuspensionPoint>>()<EOL>"}
{"signature": "if (completionMode != ConstraintSystemCompletionMode.PARTIAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reportNotEnoughTypeInformation(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>completionMode, topLevelAtoms, topLevelType, postponedArguments<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (index == descriptors.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun toolOptions(configure: TO.() -> Unit) {", "body": "<EOL><INDENT><INDENT>configure(toolOptions)<EOL><INDENT>}"}
{"signature": "val _val =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun setup(args: K<NUM_LIT>JSCompilerArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>args.languageVersion = <STR_LIT><INDENT><INDENT><INDENT> }"}
{"signature": "var ourCapacity =", "body": "shortName.length<EOL>"}
{"signature": "var konanConfig =", "body": "KonanConfig(project, configuration)<EOL>"}
{"signature": "val TYPE_PARAMETER_COUNT =", "body": "<STR_LIT><EOL>"}
{"signature": "for (base in bases) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val rootedFile = root.resolve(file)<EOL><INDENT><INDENT><INDENT><INDENT>val rootedBase = root.resolve(base)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rootedFile.relativeTo(rootedBase), file.relativeTo(base), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (it.lowercase()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>K<NUM_LIT>JsArgumentConstants.RUNTIME_DIAGNOSTIC_LOG -> RuntimeDiagnostic.LOG<EOL><INDENT><INDENT><INDENT><INDENT>K<NUM_LIT>JsArgumentConstants.RUNTIME_DIAGNOSTIC_EXCEPTION -> RuntimeDiagnostic.EXCEPTION<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeForAnnotation =", "body": "<EOL><INDENT><INDENT><INDENT>if (isVarArgs && kotlinType != null && KotlinBuiltIns.isArray(kotlinType)) kotlinType.arguments[<NUM_LIT>].type else kotlinType<EOL>"}
{"signature": "for (iter in <NUM_LIT> until <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>val destination = ByteArray(<NUM_LIT>)<EOL><INDENT><INDENT>if (destination[<NUM_LIT>] != <NUM_LIT>toByte()) return <STR_LIT><EOL><INDENT><INDENT>destination[<NUM_LIT>] = <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (freeParameters.isEmpty() && otherType.freeParameters.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (type.checkInheritance(otherType.type)) TypeSubstitutor.EMPTY else null<EOL><INDENT><INDENT>}"}
{"signature": "if (hasExtension(JavaClassProtoBuf.isPackagePrivateField)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JavaClassProtoBuf.isPackagePrivateField).hashCode()<EOL><INDENT>}"}
{"signature": "val declaredNames =", "body": "mutableSetOf<JsName>()<EOL>"}
{"signature": "fun charCategoryUppercaseLetter() {", "body": "<EOL><INDENT><INDENT>val latinCapitalLetterA = 'A'<INDENT><INDENT> assertTrue(latinCapitalLetterA.isLetterOrDigit())<EOL><INDENT><INDENT>assertTrue(latinCapitalLetterA.isLetter())<EOL><INDENT><INDENT>assertTrue(latinCapitalLetterA.isUpperCase())<EOL><INDENT><INDENT>assertEquals(CharCategory.UPPERCASE_LETTER, latinCapitalLetterA.category)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, CharCategory.UPPERCASE_LETTER.code)<EOL><INDENT>}"}
{"signature": "val tmpToDelete =", "body": "Files.createTempFile(Paths.get(tmpDirectory.absolutePath), null, null).toFile()<EOL>"}
{"signature": "val hintMissingLibrary =", "body": "<STR_LIT><EOL>"}
{"signature": "fun fromBoth(name: Name) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "if (c is String) {", "body": "<EOL><INDENT><INDENT>a.<!UNRESOLVED_REFERENCE!>length<!><INDENT><INDENT> b.<!UNRESOLVED_REFERENCE!>length<!><INDENT> }"}
{"signature": "if (!resolutionResultAtomicFieldUpdater.compareAndSet(this, snapshot, computedResult)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val againstType =", "body": "getOrFail(BindingContext.TYPE, expression.typeReference)<EOL>"}
{"signature": "val unref =", "body": "cppClass.declarations<EOL>"}
{"signature": "if (element is KtNamedDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return PositioningStrategies.DECLARATION_NAME.mark(element)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val diagnosticProvider =", "body": "createDiagnosticProvider(moduleProvider, sessionProvider)<EOL>"}
{"signature": "when (val withoutExtension = filename.removeSuffix(BuiltInSerializerProtocol.DOT_DEFAULT_EXTENSION)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> withoutExtension<EOL><INDENT><INDENT>}"}
{"signature": "if (header?.kind == KotlinClassHeader.Kind.FILE_FACADE || header?.kind == KotlinClassHeader.Kind.MULTIFILE_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>packageScopes.add(moduleData.packagePartScopeCache.getPackagePartScope(binaryClass))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val test_varWithPrivateSet =", "body": "C::varWithPrivateSet<EOL>"}
{"signature": "val unsignedTypeNames =", "body": "enumValues<UnsignedType>().map { it.typeName }.toSet()<EOL>"}
{"signature": "if (file.relativeToOrSelf(basedir).invariantSeparatorsPathString == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>didFollowLinks = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val backtrace =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val cleanerCallBack =", "body": "prepareCleanerCallback() ?: return null<EOL>"}
{"signature": "val extraImports =", "body": "ExtraImportsProviderExtension.getInstance(file.project).getExtraImports(file)<EOL>"}
{"signature": "val builderByModule =", "body": "LinkedHashMap<String, StringBuilder>()<EOL>"}
{"signature": "val computationSession =", "body": "implicitBodyResolveComputationSession as LLImplicitBodyResolveComputationSession<EOL>"}
{"signature": "if (!skipLabelsAndCatches) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>names += x.parameter.name<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun xyz(x: F) {", "body": "}<EOL><EOL><INDENT>fun foo(): F {<EOL><INDENT><INDENT>val x<NUM_LIT>: F = <!NULL_FOR_NONNULL_TYPE!>null<!><EOL><INDENT><INDENT>val x<NUM_LIT>: F? = null<EOL><EOL><INDENT><INDENT>xyz(<!NULL_FOR_NONNULL_TYPE!>null<!>)<EOL><INDENT><INDENT>bar<F?>(null)<EOL><EOL><INDENT><INDENT>return <!NULL_FOR_NONNULL_TYPE!>null<!><EOL><INDENT>}"}
{"signature": "val OLD_MODULE_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val isAtLeastGradle<NUM_LIT> =", "body": "gradleVersion >= GradleVersion.version(<STR_LIT>)<EOL>"}
{"signature": "when (ctx) {", "body": "<EOL><INDENT><INDENT><INDENT>is CtxImpl -> <!SMARTCAST_IMPOSSIBLE!>ctx<!>.doJob(<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val verboseReporting =", "body": "CompilerSystemProperties.COMPILE_DAEMON_VERBOSE_REPORT_PROPERTY.value != null<EOL>"}
{"signature": "if (hiddenSince != null && !isReportDeprecatedSinceKotlinWithUnorderedVersions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isReportDeprecatedSinceKotlinWithUnorderedVersions = warningSince > hiddenSince<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val unwrapped = unwrap()) {", "body": "<EOL><INDENT><INDENT>is FlexibleType -> KotlinTypeFactory.flexibleType(<EOL><INDENT><INDENT><INDENT>unwrapped.lowerBound.replace(newArguments, newAttributes),<EOL><INDENT><INDENT><INDENT>unwrapped.upperBound.replace(newArgumentsForUpperBound, newAttributes)<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>is SimpleType -> unwrapped.replace(newArguments, newAttributes)<EOL><INDENT>}"}
{"signature": "val EnhancedNullability =", "body": "<STR_LIT>.jvmInternalId()<EOL>"}
{"signature": "fun test(n: Int) {", "body": "<EOL><INDENT><expr>n = <NUM_LIT></expr><EOL>}"}
{"signature": "fun addBinaryRootsFromJdkHome(jdkHome: Path, isJre: Boolean) {", "body": "<EOL><INDENT><INDENT>val jdkRoots = LibraryUtils.findClassesFromJdkHome(jdkHome, isJre)<EOL><INDENT><INDENT>addBinaryRoots(jdkRoots)<EOL><INDENT>}"}
{"signature": "fun setValue(thisRef: R, desc: KProperty<*>, value: T) {", "body": "<EOL><INDENT><INDENT>thisRef.putUserData(key, if (value != defaultValue) value else null)<EOL><INDENT>}"}
{"signature": "val contextClassLoader =", "body": "Thread.currentThread().getContextClassLoader()<EOL>"}
{"signature": "val evaluatedMppProject =", "body": "mppProject.evaluate()<EOL>"}
{"signature": "if (hasExtension(KlibMetadataProtoBuf.enumEntryOrdinal)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.enumEntryOrdinal)<EOL><INDENT>}"}
{"signature": "fun foo(x: <!UNRESOLVED_REFERENCE!>Inner<!><Int>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val y: Outer<String>.Inner<Char> = Inner<Char>()<EOL><INDENT>}"}
{"signature": "val mutatorsCooperate =", "body": "configuration.get(BinaryOptions.gcMutatorsCooperate)<EOL>"}
{"signature": "val configurationKey =", "body": "configurationKeyField!![null] as CompilerConfigurationKey<Boolean><EOL>"}
{"signature": "fun visitIncrementDecrementExpression(incrementDecrementExpression: FirIncrementDecrementExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitIncrementDecrementExpression(incrementDecrementExpression)<EOL><INDENT>}"}
{"signature": "val functionTypeInterfacePackageFiles =", "body": "hashSetOf<IrFile>()<EOL>"}
{"signature": "for (index in offset until offset + length) {", "body": "<EOL><INDENT><INDENT>result += chars[index]<EOL><INDENT>}"}
{"signature": "if (split.size >= <NUM_LIT> && split[<NUM_LIT>] == <STR_LIT> && split[<NUM_LIT>] == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>replInterpreter.dumpClasses(PrintWriter(System.out))<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val expectedIsDigit =", "body": "isDigit(expectedCategoryCode)<EOL>"}
{"signature": "val candidateSystem =", "body": "candidate.system<EOL>"}
{"signature": "val ktTypeArguments =", "body": "typeElement.typeArgumentsAsTypes<EOL>"}
{"signature": "if (useOldGetter) {", "body": "<EOL><INDENT><INDENT>unboxMethod = oldGetter!!<EOL><INDENT><INDENT>unboxFunctionImplementation = defaultMethodsImplementationSourceNode ?: CustomUnboxFunctionImplementation(unboxMethod, rootNode)<EOL><INDENT>}"}
{"signature": "for (i in (charLow() .. charHigh()).reversed()) {", "body": "<EOL><INDENT><INDENT>sumC = sumC * <NUM_LIT> + i.toInt() - '<NUM_LIT>'.toInt()<EOL><INDENT>}"}
{"signature": "val isInTestBuilderImpl =", "body": "TestBuilderImpl::class.simpleName!! in stackTraceLine<EOL>"}
{"signature": "fun run(element: IrElement) {", "body": "<EOL><INDENT><INDENT>element.transformChildrenVoid(this)<EOL><INDENT><INDENT>postprocessReturnExpressions(element)<EOL><INDENT>}"}
{"signature": "if (declaration is FirClassLikeDeclaration && stableName.name in PROHIBITED_STATIC_NAMES) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirJsErrors.JS_BUILTIN_NAME_CLASH, <STR_LIT>, context)<EOL><INDENT><INDENT>}"}
{"signature": "val ktParam =", "body": "p.source.getPsi() as? KtParameter ?: declaration<EOL>"}
{"signature": "var boxInlineClassBeforeInvoke =", "body": "false<EOL>"}
{"signature": "val postponedActions =", "body": "mutableListOf<() -> Unit>()<EOL>"}
{"signature": "val profilerProcessBuilder =", "body": "ProcessBuilder()<EOL>"}
{"signature": "val nameSuffixForOverloadSimulation =", "body": "bridgeParameters.joinToString(separator = <STR_LIT>, transform = { it.bridge.cType.repr })<EOL>"}
{"signature": "val lcaBlock =", "body": "calculateLCA(usedInBlocks + assignedInBlocks)<EOL>"}
{"signature": "val specialCasingUrl =", "body": "\"https:"}
{"signature": "val visitorParam =", "body": "element.visitorParameterName<EOL>"}
{"signature": "if (storedReference == null || !ErrorUtils.isError(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.record(REFERENCE_TARGET, calleeExpression, descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val publishPodspecCustomContent =", "body": "<EOL><INDENT><INDENT><STR_LIT>\"<EOL>"}
{"signature": "val targetField =", "body": "jvmBackendContext.cachedDeclarations.getFieldForObjectInstance(originalIrClass)<EOL>"}
{"signature": "for (entry in expression.entries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addConstantsFromConditions(entry)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val javaElementType =", "body": "elementType!!.computeJavaType()<EOL>"}
{"signature": "val actualFail =", "body": "assertFails(actual)<EOL>"}
{"signature": "if (descriptor in tracker.capturedDescriptors) {", "body": "<EOL><INDENT><INDENT><INDENT>val capturedName = tracker.getNameForCapturedDescriptor(descriptor)!!<EOL><INDENT><INDENT><INDENT>val globalName = invokingContext.getInnerNameForDescriptor(descriptor)<EOL><INDENT><INDENT><INDENT>val replacingVisitor = NameReplacingVisitor(mapOf(capturedName to JsAstUtils.pureFqn(globalName, null)))<EOL><INDENT><INDENT><INDENT>replacingVisitor.accept(lambda)<EOL><INDENT><INDENT>}"}
{"signature": "val receiverPseudoValue =", "body": "getBoundOrUnreachableValue(expression)<EOL>"}
{"signature": "if (descriptor is VariableDescriptor && descriptor !is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>captureIfNeed(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val specificProjectsReported =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "if (functionCallVariable != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>flow.addAllConditionally(OperationStatement(functionCallVariable, operation), statements)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val globalDce =", "body": "true<EOL>"}
{"signature": "package metadata file: $packageFragmentFile\"<EOL>.", "body": ""}
{"signature": "for (item in elements) {", "body": "<EOL><INDENT><INDENT>if (add(item)) result = true<EOL><INDENT>}"}
{"signature": "fun take(a: Lib) {", "body": "}<EOL><EOL>fun take(a: Other) {}"}
{"signature": "val typeFromCallee =", "body": "components.typeFromCallee(access)<EOL>"}
{"signature": "val lambdaBuilder =", "body": "context.createIrBuilder(symbol)<EOL>"}
{"signature": "val rangesWriter =", "body": "WhitespaceRangesWriter()<EOL>"}
{"signature": "val KOTLIN_COMMONIZED_CINTEROP =", "body": "<STR_LIT><EOL>"}
{"signature": "when (unwrapped?.elementType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>PARENTHESIZED -> unwrapped?.getExpressionInParentheses()<EOL><INDENT><INDENT><INDENT><INDENT>LABELED_EXPRESSION -> unwrapped?.getLabeledExpression()<EOL><INDENT><INDENT><INDENT><INDENT>ANNOTATED_EXPRESSION -> unwrapped?.getAnnotatedExpression()<EOL><INDENT><INDENT><INDENT><INDENT>else -> return unwrapped<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var normalize =", "body": "false<EOL>"}
{"signature": "fun AssumesN() {", "body": "<EOL><INDENT><INDENT><INDENT><!COMPOSE_APPLIER_CALL_MISMATCH!>M<!>()<EOL><INDENT><INDENT>}"}
{"signature": "if (resolvedCallAtom != null) {", "body": "<EOL><INDENT><INDENT><INDENT>additionalDiagnosticReporter.reportAdditionalDiagnostics(resolvedCallAtom, resultingDescriptor, diagnosticHolder, diagnostics)<EOL><INDENT><INDENT>}"}
{"signature": "import bad.", "body": "prefix.KotlinTestInBadPrefix<EOL>"}
{"signature": "val aS =", "body": "ShortArray(<NUM_LIT>)<EOL>"}
{"signature": "val commentOrNull =", "body": "objCCommentOrNull(mustBeDocumentedAttributeList(property.annotations) + visibilityComments)<EOL>"}
{"signature": "val baseName =", "body": "if (fqName == FqNames.mutableMapEntry) <STR_LIT> else fqName.shortName().asString()<EOL>"}
{"signature": "val KAPT_RUNNER_DIRECTORY_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (args.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val oldProtoMap =", "body": "translationResults[srcFile]?.metadata?.let { protoData(srcFile, it) } ?: emptyMap()<EOL>"}
{"signature": "val stackSize =", "body": "this@dump.stackSize<EOL>"}
{"signature": "fun f<NUM_LIT>(a: String) {", "body": "<EOL><INDENT>a <!USELESS_CAST!>as Any?<!><EOL><INDENT>checkSubtype<String>(a)<EOL>}"}
{"signature": "val newPath =", "body": "destFs.getPath(destPath.toString(), relative.toString())<EOL>"}
{"signature": "fun onMergeSuccess(v: BoxedBasicValue, w: BoxedBasicValue) {", "body": "<EOL><INDENT><INDENT>candidatesBoxedValues.merge(v.descriptor, w.descriptor)<EOL><INDENT>}"}
{"signature": "val delegateClass =", "body": "resolvedCall.resultingDescriptor.constructedClass<EOL>"}
{"signature": "val xArray =", "body": "x.orEmpty()<EOL>"}
{"signature": "when (flavor) {", "body": "<EOL><INDENT><INDENT>KotlinPlatform.JVM -> platform.clangForJni<EOL><INDENT><INDENT>KotlinPlatform.NATIVE -> platform.clang<EOL><INDENT>}"}
{"signature": "val optionsToRewrite =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val javaExecutable =", "body": "File(File(System.getProperty(<STR_LIT>), <STR_LIT>), <STR_LIT>)<EOL>"}
{"signature": "if (this is LinkedHashSet) {", "body": "<EOL><INDENT><INDENT>addAll(collection)<EOL><INDENT><INDENT>return this<EOL><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(d: JavaOverride, s: String) {", "body": "<EOL><INDENT>d.foo = s<EOL>}"}
{"signature": "fun framework(configure: Framework.() -> Unit) {", "body": "<EOL><INDENT><INDENT>forAllPodFrameworks(configure)<EOL><INDENT>}"}
{"signature": "fun persistReturnableBlockName(label: String, loop: IrReturnableBlock) {", "body": "<EOL><INDENT><INDENT>localReturnableBlockNames.declareFreshName(loop, label)<EOL><INDENT>}"}
{"signature": "if (withName) {", "body": "<EOL><INDENT><INDENT>append(if (this@computeJvmDescriptor is ConstructorDescriptor) <STR_LIT> else name.asString())<EOL><INDENT>}"}
{"signature": "val INTERNAL_NAME_TO_SOURCE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun replaceReceiverParameter(newReceiverParameter: FirReceiverParameter?) {", "body": "}<EOL><EOL><INDENT>override fun replaceDeprecationsProvider(newDeprecationsProvider: DeprecationsProvider) {<EOL><INDENT><INDENT>deprecationsProvider = newDeprecationsProvider<EOL><INDENT>}"}
{"signature": "val valuePair =", "body": "annotationDescriptor.argumentValue(<STR_LIT>)?.value as? Pair<*, *><EOL>"}
{"signature": "var printReachabilityInfo =", "body": "false<EOL>"}
{"signature": "val gotPsi =", "body": "firClassSymbol.fir.psi<EOL>"}
{"signature": "val linkDefinitionRegExp =", "body": "Regex(pattern = <STR_LIT>)<EOL>"}
{"signature": "val afterAnalysisCheckerConstructors =", "body": "mutableSetOf<Constructor<AfterAnalysisChecker>>()<EOL>"}
{"signature": "val removeIntBridgeFun =", "body": "createRemoveAtStub(stub, context.irBuiltIns.anyNType, IrDeclarationOrigin.BRIDGE)<EOL>"}
{"signature": "val enumVarClassifier =", "body": "classifier.nested(<STR_LIT>)<EOL>"}
{"signature": "if (irFunction.name.asString() == <STR_LIT> && expression.dispatchReceiver is IrGetEnumValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>callStack.pushSimpleInstruction(expression)<EOL><INDENT><INDENT>callStack.pushSimpleInstruction(irFunction.dispatchReceiverParameter!!)<EOL><EOL><INDENT><INDENT>val enumEntry = (expression.dispatchReceiver as IrGetEnumValue).symbol.owner<EOL><INDENT><INDENT>callStack.pushState(enumEntry.toState(environment.irBuiltIns))<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "if (resolvedCall.extensionReceiver is TransientReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>val irAdaptedReceiverParameter = irAdapterFun.valueParameters[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT>irAdapteeCall.extensionReceiver =<EOL><INDENT><INDENT><INDENT><INDENT>IrGetValueImpl(startOffset, endOffset, irAdaptedReceiverParameter.type, irAdaptedReceiverParameter.symbol)<EOL><INDENT><INDENT><INDENT>shift = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "for ((char, code) in chars) {", "body": "<EOL><INDENT><INDENT>assertEquals(code, char.toInt())<EOL><INDENT><INDENT>assertEquals(char, code.toChar())<EOL><INDENT>}"}
{"signature": "val ushortArray =", "body": "ushortArrayOf(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u, UShort.MAX_VALUE, <NUM_LIT>u)<EOL>"}
{"signature": "val FREE_ARGS_ELEMENT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (newLength < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val substitutedValueParameter =", "body": "resolvedCall.resultingDescriptor.valueParameters[valueParameter.index]<EOL>"}
{"signature": "val lapsImpl =", "body": "mutableListOf<Pair<String, Long>>()<EOL>"}
{"signature": "if (c.isDigit()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>digits.pop()<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun expectActualTracker_report(expectedFilePath: String, actualFilePath: String) {", "body": "<EOL><INDENT><INDENT>expectActualTracker!!.report(File(expectedFilePath), File(actualFilePath))<EOL><INDENT>}"}
{"signature": "val testClassStreams =", "body": "testClasses.asSequence().filter { it.name.endsWith(<STR_LIT>) }.map { it.inputStream() }<EOL>"}
{"signature": "val overriddenWithDefaults =", "body": "overridden.getSingleMatchedExpectForActualOrNull() as? FirNamedFunctionSymbol ?: overridden<EOL>"}
{"signature": "val irClass =", "body": "irFactory.createIrClassFromDescriptor(startOffset, endOffset, origin, symbol, descriptor)<EOL>"}
{"signature": "val foreignObjCObjectName =", "body": "<STR_LIT><EOL>"}
{"signature": "val processedScheme =", "body": "deserializeScheme(serialized)<EOL>"}
{"signature": "var byteBuilder =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "val ignoreInterfaceMethodCollisions =", "body": "config.configuration.getBoolean(BinaryOptions.objcExportIgnoreInterfaceMethodCollisions)<EOL>"}
{"signature": "val sourceSetsByVariant =", "body": "mutableMapOf<String, Set<String>>()<EOL>"}
{"signature": "else if (annotation == null && declaration.isInline && !declaration.isExpect) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val keyword = declaration.getModifier(KtTokens.VALUE_KEYWORD)?.source ?: return<EOL><INDENT><INDENT><INDENT>reporter.reportOn(keyword, FirJvmErrors.VALUE_CLASS_WITHOUT_JVM_INLINE_ANNOTATION, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun unitFunction() {", "body": "<EOL><INDENT>return<EOL>}"}
{"signature": "for (i in JImpl().listOfNotNull()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "else if (split.isNotEmpty() && split[<NUM_LIT>] == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until changedCount) {", "body": "<EOL><INDENT><INDENT><INDENT>val start = i * SLOTS_PER_INT<EOL><INDENT><INDENT><INDENT>val end = min(start + SLOTS_PER_INT, allArgs.size)<EOL><INDENT><INDENT><INDENT>val slice = allArgs.subList(start, end)<EOL><INDENT><INDENT><INDENT>result.add(buildChangedArgumentForCall(slice))<EOL><INDENT><INDENT>}"}
{"signature": "val DATA_CONTAINER_VERSION =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (family) {", "body": "<EOL><INDENT><INDENT>Family.IOS -> <STR_LIT><EOL><INDENT><INDENT>Family.WATCHOS -> <STR_LIT><EOL><INDENT><INDENT>Family.TVOS -> <STR_LIT><EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (sw == null || sw.skipGenericSignature()) {", "body": "<EOL><INDENT><INDENT><INDENT>return typeMapper.mapType(returnType, TypeMappingMode.getModeForReturnTypeNoGeneric(isAnnotationMethod), sw, materialized)<EOL><INDENT><INDENT>}"}
{"signature": "val jlcArray =", "body": "symbols.array.typeWith(javaLangClassType)<EOL>"}
{"signature": "val specReposMessages =", "body": "MissingSpecReposMessage(specRepos.get()).missingMessage<EOL>"}
{"signature": "val utilKt =", "body": "javaSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val min =", "body": "<NUM_LIT>UL.toString()<EOL>"}
{"signature": "for (j in (return) downTo <NUM_LIT>u) {", "body": "}"}
{"signature": "fun collectCyclicGarbage() {", "body": "<EOL><INDENT>val (ref<NUM_LIT>Owner, ref<NUM_LIT>Weak, ref<NUM_LIT>Weak) = createCyclicGarbage()<EOL><EOL><INDENT>ref<NUM_LIT>Owner.value = null<EOL><INDENT>GC.collect()<EOL><EOL><INDENT>assertNull(ref<NUM_LIT>Weak.value)<EOL><INDENT>assertNull(ref<NUM_LIT>Weak.value)<EOL>}"}
{"signature": "val candidateHash =", "body": "with(mangler) { candidate.signatureMangle(compatibleMode = false) }<EOL>"}
{"signature": "fun appLinuxAndJs() {", "body": "<EOL><INDENT>fooCommon()<EOL><INDENT>fooLinuxAndJs()<EOL><INDENT><EOL><INDENT>barCommon()<EOL><INDENT>barLinuxAndJs()<EOL><INDENT><EOL><INDENT>}"}
{"signature": "fun kotlinOptions(configure: T.() -> Unit) {", "body": "<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>configure(kotlinOptions)<EOL><INDENT>}"}
{"signature": "var output =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!virtualFile.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>files.addIfNotNull(virtualFile)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package fragment that contains top-level functions, properties, and type aliases.", "body": "<EOL>"}
{"signature": "val program =", "body": "JsProgram()<EOL>"}
{"signature": "fun withLambda(block : Int.(String) -> Unit) {", "body": "<EOL>}"}
{"signature": "fun syncOptionsAsConvention(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinJsDceCompilerToolOptions,<EOL><INDENT><INDENT>into: org.jetbrains.kotlin.gradle.dsl.KotlinJsDceCompilerToolOptions,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerToolOptionsHelper.syncOptionsAsConvention(from, into)<EOL><INDENT><INDENT>into.devMode.convention(from.devMode)<EOL><INDENT><INDENT>into.outputDirectory.convention(from.outputDirectory)<EOL><INDENT>}"}
{"signature": "fun bar(f: ()->Unit) {", "body": "<EOL><INDENT>f<caret>()<EOL>}"}
{"signature": "val buildProperties =", "body": "Properties()<EOL>"}
{"signature": "val needV<NUM_LIT>Signatures =", "body": "AbiSignatureVersions.Supported.V<NUM_LIT> in supportedSignatureVersions<EOL>"}
{"signature": "val intFun =", "body": "suspend { <NUM_LIT> }<EOL>"}
{"signature": "val spare =", "body": "if (numberOfChars > <NUM_LIT>L) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "if (!context.languageVersionSettings.supportsFeature(LanguageFeature.JsExternalPropertyParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT>checkConstructorPropertyParam(declaration, descriptor, trace)<EOL><INDENT><INDENT>}"}
{"signature": "if (initState == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val allUnboxMethods =", "body": "allInnerUnboxMethods + listOf(unboxMethod)<EOL>"}
{"signature": "val throwIseSymbol =", "body": "defineOperator(BuiltInOperatorNames.THROW_ISE, nothingType, listOf())<EOL>"}
{"signature": "fun visitULongValue(value: ULongValue, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinConstantValueKind.ULONG.ordinal)<EOL><INDENT><INDENT>dataStream.writeLong(value.value)<EOL><INDENT>}"}
{"signature": "val infoForArguments =", "body": "candidateCall.dataFlowInfoForArguments<EOL>"}
{"signature": "var holder =", "body": "map[key.attributeOwnerId] ?: KeyFMap.EMPTY_MAP<EOL>"}
{"signature": "for (i in oneToFive) {", "body": "<EOL><INDENT><INDENT>sum += i;<EOL><INDENT>}"}
{"signature": "val initializer =", "body": "declaration.initializer<EOL>"}
{"signature": "val bbInited =", "body": "basicBlock(<STR_LIT>, null)<EOL>"}
{"signature": "val caseSensitive =", "body": "true<EOL>"}
{"signature": "val longChars =", "body": "CharArray(<NUM_LIT>_<NUM_LIT>) { 'k' }<EOL>"}
{"signature": "val bitInSlot =", "body": "i % <NUM_LIT><EOL>"}
{"signature": "val conversionFunction =", "body": "operandNNType.findConversionFunctionTo(targetType)<EOL>"}
{"signature": "if (this is ResultWithDiagnostics.Failure) {", "body": "<EOL><INDENT><INDENT>body(this)<EOL><INDENT>}"}
{"signature": "fun markValueAsDirty(value: BoxedBasicValue) {", "body": "<EOL><INDENT><INDENT>candidatesBoxedValues.remove(value.descriptor)<EOL><INDENT>}"}
{"signature": "val typeArgsCompatibility =", "body": "typeArgumentMapping.asSequence()<EOL>"}
{"signature": "fun testCopySucceeds(source: Path, target: Path, vararg expectedTargetContent: Set<Path>) {", "body": "<EOL><INDENT><INDENT>source.copyToRecursively(target, followLinks = false)<EOL><INDENT><INDENT>val content = target.walkIncludeDirectories().toSet()<EOL><INDENT><INDENT>assertContains(expectedTargetContent.toList(), content)<EOL><INDENT>}"}
{"signature": "val okCandidate =", "body": "o + k<EOL>"}
{"signature": "val stepArgValueAsLong =", "body": "stepArgExpression.constLongValue<EOL>"}
{"signature": "fun platformSpecificSetter(descriptor: PropertySetterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>markInteropDeclaration(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val JAVA_SYNTHETIC_FOR_ANNOTATIONS =", "body": "scopeSessionKey<FirRegularClassSymbol, JavaAnnotationSyntheticPropertiesScope>()<EOL>"}
{"signature": "fun andForInt() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT> and <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val targets =", "body": "scopes.flatMap { extractor(it) }<EOL>"}
{"signature": "val parsedAnnotations =", "body": "parseJvmNameOnFileNoResolve(file)<EOL>"}
{"signature": "val typedEqualsFunction =", "body": "irClass.functions.singleOrNull { it.isTypedEqualsInValueClass() }<EOL>"}
{"signature": "when (statement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is JsBlock -> statement.statements.lastOrNull() ?: statement<EOL><INDENT><INDENT><INDENT><INDENT>else -> statement<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isDirectSubtype =", "body": "notNullType.isSubtypeOf(other.notNullType, context.session)<EOL>"}
{"signature": "val bagOfEdges =", "body": "arrayOfNulls<LongArrayList>(makePrime(preliminaryNumberOfNodes * <NUM_LIT>))<EOL>"}
{"signature": "val toExpand =", "body": "getDefaultParamsNames(arguments, parameters, initialized = false)<EOL>"}
{"signature": "if (buildOptions.languageVersion != null || buildOptions.languageApiVersion != null) {", "body": "<EOL><INDENT><INDENT>projectPath.applyKotlinCompilerArgsPlugin()<EOL><INDENT>}"}
{"signature": "if (result == CallToPotentiallyHiddenSymbolResult.VisibleWithDeprecation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deprecated = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nonParamDeclarations =", "body": "declaration<EOL>"}
{"signature": "val nullabilityAnnotationReportLevels =", "body": "parseNullabilityAnnotationReportLevels(nullabilityAnnotations)<EOL>"}
{"signature": "if (resolvedCall is VariableAsFunctionResolvedCall) {", "body": "<EOL><INDENT><INDENT><INDENT>val functionCall = pregenerateCall(resolvedCall.functionCall)<EOL><INDENT><INDENT><INDENT>return CallGenerator(this).generateCall(expression, functionCall, IrStatementOrigin.INVOKE)<EOL><INDENT><INDENT>}"}
{"signature": "val parametrizedDiagnostic =", "body": "diagnosticFactory.on(nodeToReport, data)<EOL>"}
{"signature": "val pathToSourceMap =", "body": "if (File(pathToSourceMapCandidate).exists()) pathToSourceMapCandidate else null<EOL>"}
{"signature": "if (!isAllowedReflectionApi(descriptor, containingClass, context)) {", "body": "<EOL><INDENT><INDENT><INDENT>report(reportOn, context)<EOL><INDENT><INDENT>}"}
{"signature": "val cleanName =", "body": "cleanName(parent, name)<EOL>"}
{"signature": "val underlyingClassEq =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.inlineClassReplacements.getSpecializedEqualsMethod(underlyingClass, context.irBuiltIns)<EOL>"}
{"signature": "fun reassignFunParams(<!UNUSED_PARAMETER!>a<!>: Int) {", "body": "<EOL><INDENT><!UNUSED_VALUE!><!VAL_REASSIGNMENT!>a<!> =<!> <NUM_LIT><EOL>}"}
{"signature": "if (resultPhi == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val bbCurrent = functionGenerationContext.currentBlock<EOL><INDENT><INDENT><INDENT><INDENT>functionGenerationContext.positionAtEnd(getExit())<EOL><INDENT><INDENT><INDENT><INDENT>resultPhi = functionGenerationContext.phi(returnableBlock.type.toLLVMType(llvm))<EOL><INDENT><INDENT><INDENT><INDENT>functionGenerationContext.positionAtEnd(bbCurrent)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val listSerializer =", "body": "IrListParcelSerializer(classifier, elementType, get(elementType, scope, parcelizeType, strict()))<EOL>"}
{"signature": "if (typeArgument != null && typeParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinTypeMapper.getVarianceForWildcard(typeParameter, typeArgument, typeMappingMode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (x.coroutineMetadata != null) {", "body": "<EOL><INDENT><INDENT><INDENT>lastStatementLevelContext.addPrevious(CoroutineFunctionTransformer(x, functionName[x]).transform())<EOL><INDENT><INDENT><INDENT>x.coroutineMetadata = null<EOL><INDENT><INDENT>}"}
{"signature": "val substitutedArgument =", "body": "ConeSubstitutorByMap.create(substitution, session)<EOL>"}
{"signature": "val jvmSourcesJar =", "body": "tempDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun i<NUM_LIT>(block: Foo.(Foo) -> Int) {", "body": "}<EOL><EOL>fun <T> t<NUM_LIT>(x: Foo) {}"}
{"signature": "val oldArgumentMapping =", "body": "argumentMapping ?: return<EOL>"}
{"signature": "val lastDeclaration =", "body": "script.declarations.lastOrNull()<EOL>"}
{"signature": "if (nThreads > availableProcessors) {", "body": "<EOL><INDENT><INDENT>report(WARNING, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitResolvedQualifier(resolvedQualifier: FirResolvedQualifier, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allResolvedQualifierCheckers.check(resolvedQualifier, data)<EOL><INDENT>}"}
{"signature": "if (filePath != prevFilePath) {", "body": "<EOL><INDENT><INDENT><INDENT>prevFilePath = pathInterner.intern(filePath)<EOL><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT>}"}
{"signature": "val JFBiFunction =", "body": "javaFunction(<STR_LIT>)<EOL>"}
{"signature": "if (receiver != null || superQualifierSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val vertices =", "body": "edges.flatMapTo(HashSet()) { pair -> listOf(pair.first, pair.second) }<EOL>"}
{"signature": "val qq =", "body": "q<NUM_LIT> + q<NUM_LIT><EOL>"}
{"signature": "if (annotation != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return annotation<EOL><INDENT><INDENT>}"}
{"signature": "val shouldBeDisabled =", "body": "platformCompilations<EOL>"}
{"signature": "val configurationName =", "body": "configuration.name<EOL>"}
{"signature": "import outer.", "body": "<!INVISIBLE_REFERENCE!>a<!><EOL>"}
{"signature": "val argsList =", "body": "args.toList()<EOL>"}
{"signature": "fun addAtInternal(i: Int, element: E) {", "body": "<EOL><INDENT><INDENT>registerModification()<EOL><INDENT><INDENT>insertAtInternal(i, <NUM_LIT>)<EOL><INDENT><INDENT>backing[i] = element<EOL><INDENT>}"}
{"signature": "if (!keepUnstable && depDir.list().contains(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>depDir.deleteRecursively()<EOL><INDENT><INDENT><INDENT><INDENT>archive.delete()<EOL><INDENT><INDENT><INDENT><INDENT>extractedDependencies.removeAndSave(dependency)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitEnumConstructorCall(expression: IrEnumConstructorCall) {", "body": "<EOL><INDENT><INDENT>visitFunctionAccess(expression)<EOL><INDENT>}"}
{"signature": "val reducedLeft =", "body": "or.left.accept(this) ?: return null<EOL>"}
{"signature": "val atExistingPath =", "body": "if (existingFile == null) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (c is B && e is E) {", "body": "<EOL><INDENT><INDENT>c == e<EOL><INDENT>}"}
{"signature": "if (whenEntryExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>generateInstructions(whenEntryExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>branches.add(whenEntryExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import ${importPath.", "body": "pathStr}\" + aliasStr<EOL>"}
{"signature": "for (i in <NUM_LIT> until minOf(chars<NUM_LIT>size, chars<NUM_LIT>size)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (chars<NUM_LIT>[i] != chars<NUM_LIT>[i])<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return@all chars<NUM_LIT>[i] < chars<NUM_LIT>[i]<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun invokeSuspend(result: Result<Any?>): Any?<EOL><EOL><INDENT>protected open fun releaseIntercepted() {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>).indices) {", "body": "<EOL><INDENT><INDENT>sum += i<EOL><INDENT>}"}
{"signature": "val publishPodspecContent =", "body": "<EOL><INDENT><INDENT><STR_LIT>\"<EOL>"}
{"signature": "val callbackName =", "body": "context.getScopeForDescriptor(descriptor.containingDeclaration)<EOL>"}
{"signature": "val substitutedParamType =", "body": "param.type.substitute(superTypeArgumentsMap)<EOL>"}
{"signature": "fun visitBinaryExpression(x: JsBinaryOperation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeByte(ExpressionIds.BINARY_OPERATION)<EOL><INDENT><INDENT><INDENT><INDENT>writeByte(x.operator.ordinal)<EOL><INDENT><INDENT><INDENT><INDENT>writeExpression(x.arg<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>writeExpression(x.arg<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun serialize(encoder: Encoder, value: Klass) {", "body": "encoder.encodeString(value.s) }"}
{"signature": "when (visibility) {", "body": "<EOL><INDENT>DescriptorVisibilities.INTERNAL -> ProtoBuf.Visibility.INTERNAL<EOL><INDENT>DescriptorVisibilities.PUBLIC -> ProtoBuf.Visibility.PUBLIC<EOL><INDENT>DescriptorVisibilities.PRIVATE -> ProtoBuf.Visibility.PRIVATE<EOL><INDENT>DescriptorVisibilities.PRIVATE_TO_THIS -> ProtoBuf.Visibility.PRIVATE_TO_THIS<EOL><INDENT>DescriptorVisibilities.PROTECTED -> ProtoBuf.Visibility.PROTECTED<EOL><INDENT>DescriptorVisibilities.LOCAL -> ProtoBuf.Visibility.LOCAL<EOL><INDENT>else -> throw IllegalArgumentException(<STR_LIT>)<EOL>}"}
{"signature": "val isTypeNotNull =", "body": "<EOL><INDENT><INDENT><INDENT>if (languageVersionSettings.supportsFeature(LanguageFeature.NewInference))<EOL>"}
{"signature": "fun test_<NUM_LIT>(list: List<Inv<Int>>, x: Inv<Int>, y: Inv<Number>, z: Inv<Any>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(y)<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(z)<EOL>}"}
{"signature": "package ${IncrementalAggregatingReferencingClasspathProcessor.", "body": "CLASSPATH_TYPE.substringBeforeLast(<STR_LIT>)};<EOL>"}
{"signature": "if (operation == FirOperation.EQ || operation == FirOperation.NOT_EQ) {", "body": "<EOL><INDENT><INDENT><INDENT>if (hasOverriddenEquals(leftOperandType)) return<EOL><INDENT><INDENT>}"}
{"signature": "if (mapping.kotlinReadOnly == classId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package enumValues<EOL>.", "body": ""}
{"signature": "val INAPPLICABLE_SHARED_IMMUTABLE_PROPERTY =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "if (!fullyPrintScope(scopeKind)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firArtifact =", "body": "testServices.dependencyProvider.getArtifactSafe(module, FrontendKinds.FIR)<EOL>"}
{"signature": "val InvalidScriptDefinition =", "body": "<EOL><INDENT>ScriptDefinition(ScriptCompilationConfiguration(), ScriptEvaluationConfiguration())<EOL>"}
{"signature": "val currentBlock =", "body": "worklist.removeAt(<NUM_LIT>)<EOL>"}
{"signature": "val singleDependee =", "body": "dependentsBySourceSetTree<EOL>"}
{"signature": "val deep =", "body": "arguments.getOrNull(<NUM_LIT>)<EOL>"}
{"signature": "var sameModule =", "body": "doWork { <STR_LIT> }<EOL>"}
{"signature": "val note =", "body": "\""}
{"signature": "val argTypeInfo =", "body": "context.trace.get(BindingContext.EXPRESSION_TYPE_INFO, argument.getArgumentExpression())<EOL>"}
{"signature": "var recursive =", "body": "::test.<!EVALUATED(<STR_LIT>)!>name<!><EOL>"}
{"signature": "val SAFE_IDENTIFIER_FOR_NO_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val sourceSetBOutputDirectory =", "body": "temporaryFolder.newFolder()<EOL>"}
{"signature": "val otherError =", "body": "it.error<EOL>"}
{"signature": "val some<NUM_LIT> =", "body": "{ TEST }<EOL>"}
{"signature": "val usedBitcodeOfFile =", "body": "mutableSetOf<LibraryFile>()<EOL>"}
{"signature": "for (j in <NUM_LIT>u .. continue) {", "body": "}"}
{"signature": "val enumEntryDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(enumEntryCandidate.resolvedCall.candidateDescriptor as FakeCallableDescriptorForObject).classDescriptor<EOL>"}
{"signature": "val runName =", "body": "disambiguateCamelCased(RUN_TASK_NAME)<EOL>"}
{"signature": "val packagePartProviderFactory =", "body": "compilerConfigurationProvider.getPackagePartProviderFactory(module)<EOL>"}
{"signature": "fun xorwowIsSerializable() {", "body": "<EOL><INDENT><INDENT>val instance = Random(<NUM_LIT>)<EOL><INDENT><INDENT>discardSomeValues(instance)<EOL><INDENT><INDENT>val deserialized = serializeAndDeserialize(instance)<EOL><INDENT><INDENT>testRandomsHaveSameState(instance, deserialized)<EOL><INDENT>}"}
{"signature": "val JSPECIFY_OLD_ANNOTATIONS_PACKAGE =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val coneBounds =", "body": "data.boundProviders.map { it.invoke(allParameters) }<EOL>"}
{"signature": "val capturedConstructors =", "body": "context.mapping.capturedConstructors<EOL>"}
{"signature": "fun sourceSetTrees(vararg tree: KotlinSourceSetTree) {", "body": "<EOL><INDENT><INDENT>builder.sourceSetTrees = tree.toHashSet()<EOL><INDENT>}"}
{"signature": "if (it.containingDeclaration !is BuiltInsPackageFragment && it.extensionReceiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>symbolTable.referenceClassifier(it.extensionReceiverParameter!!.type.constructor.declarationDescriptor!!)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val atomicSymbols =", "body": "NativeAtomicSymbols(pluginContext, moduleFragment)<EOL>"}
{"signature": "val typeToUse =", "body": "property.backingField?.returnTypeRef?.toIrType(c) ?: type<EOL>"}
{"signature": "val KOTLIN_JS_STDLIB_DOM_API_INCLUDED =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (klass.kind.isSingleton || klass.name.isSpecial) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun replaceIsTrailingLambda(newIsTrailingLambda: Boolean) {", "body": "<EOL><INDENT><INDENT>isTrailingLambda = newIsTrailingLambda<EOL><INDENT>}"}
{"signature": "if (configuration.getBoolean(KonanConfigKeys.CHECK_DEPENDENCIES)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>downloadDependencies()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val COMMANDS =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "var ID_HANDLER_B  =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (signature.current() != '<') {", "body": "<EOL><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "for (classNameId in fragment.getExtension(KlibMetadataProtoBuf.className).orEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(nameResolver.getClassId(classNameId).shortClassName.asString())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (target.isVersionChanged(this, compilerArguments)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinBuilder.LOG.info(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testAnalysisError() {", "body": "<EOL><INDENT><INDENT>runTest(K<NUM_LIT>JVMCompiler(), simple, ErrorAnalysisComponentRegistrar::class, ExitCode.COMPILATION_ERROR)<EOL><INDENT>}"}
{"signature": "if (jsClass === js(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return obj != null<EOL><INDENT>}"}
{"signature": "import mobi.", "body": "porquenao.poc.kotlin.core.ItemRepository<EOL>"}
{"signature": "package parts usages in strings<EOL>.", "body": ""}
{"signature": "val subjectStableTypes =", "body": "<EOL><INDENT><INDENT><INDENT>listOf(subject.type) + context.dataFlowInfo.getStableTypes(subject.dataFlowValue, components.languageVersionSettings)<EOL>"}
{"signature": "val overridesOnlyPrivateDeclarations =", "body": "(this as? IrOverridableDeclaration<*>)<EOL>"}
{"signature": "import select<EOL>.", "body": ""}
{"signature": "fun warning(message: String, startPosition: CodePosition, endPosition: CodePosition) {", "body": "<EOL><INDENT><INDENT>warnings += Warning(message, startPosition, endPosition)<EOL><INDENT>}"}
{"signature": "val COMMANDS_AS_REGEX_PART =", "body": "COMMANDS.joinToString(<STR_LIT>)<EOL>"}
{"signature": "val COMMONJS =", "body": "<STR_LIT><EOL>"}
{"signature": "when (descriptor) {", "body": "<EOL><INDENT><INDENT>is ConstructorDescriptor -><EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>is SimpleFunctionDescriptor -><EOL><INDENT><INDENT><INDENT>descriptor.getJvmName()<EOL><INDENT><INDENT>is PropertyDescriptor -><EOL><INDENT><INDENT><INDENT>descriptor.getJvmName() + <STR_LIT> + accessorKind.suffix<EOL><INDENT><INDENT>else -><EOL><INDENT><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (dispatchReceiver == null && extensionReceiver == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return rememberExpression(functionContext, expression, captures)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val constType =", "body": "this.type.makeNotNull().removeAnnotations()<EOL>"}
{"signature": "val localInput =", "body": "irTemporary(call, <STR_LIT>)<EOL>"}
{"signature": "val directoriesToCopy =", "body": "mutableListOf<FileTreeToCopy>()<EOL>"}
{"signature": "val doNotGenerateInLightClassMode =", "body": "setOf(CLASS_MEMBER_DELEGATION_TO_DEFAULT_IMPL, BRIDGE, COLLECTION_STUB, AUGMENTED_BUILTIN_API)<EOL>"}
{"signature": "else if (function.isEquals(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>methodOfAny = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val instanceMethodSelectors =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun test(s: Array<String>) {", "body": "<EOL><INDENT><expr>s[<NUM_LIT>, <NUM_LIT>]</expr> += <STR_LIT><EOL>}"}
{"signature": "for (secondaryConstructor in descriptor.secondaryConstructors) {", "body": "<EOL><INDENT><INDENT><INDENT>constructorCodegen.generateSecondaryConstructor(secondaryConstructor, AsmTypes.OBJECT_TYPE)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitMaxs(stack: Int, locals: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>lambdasFinallyBlocks = resultNode.tryCatchBlocks.size<EOL><INDENT><INDENT><INDENT><INDENT>super.visitMaxs(stack, locals)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nameValue =", "body": "expression.getStringArgument(StandardNames.NAME, context.session) ?: return<EOL>"}
{"signature": "val baseString =", "body": "<STR_LIT><EOL>"}
{"signature": "val javaExe =", "body": "File(javaHome, <STR_LIT>).takeIf(File::exists)<EOL>"}
{"signature": "val commonIntegrationTest =", "body": "sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "val kaptTransformed =", "body": "transformArgs(args.asList(), messageCollector, false)<EOL>"}
{"signature": "val cmpBlock =", "body": "if (isFloat)<EOL>"}
{"signature": "for(i in <NUM_LIT>.supertypeIdCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeById(getSupertypeId(i)).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "fun contentHashCode() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<Array<Int>>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<CharArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<ShortArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<BooleanArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<UByteArray>().contentHashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, platformNull<UIntArray>().contentHashCode())<EOL><INDENT>}"}
{"signature": "val metaFile =", "body": "dependencyBuildTarget.outputMetaFile.toPath()<EOL>"}
{"signature": "val generatedByFile =", "body": "info.classFileFactory.createTextForEachFile()<EOL>"}
{"signature": "val distributionType =", "body": "NativeDistributionTypeProvider(project).getDistributionType()<EOL>"}
{"signature": "while (child is PsiComment || child is PsiWhiteSpace) {", "body": "<EOL><INDENT><INDENT><INDENT>child = child.prevSibling<EOL><INDENT><INDENT>}"}
{"signature": "val PSEUDO_COMMENT_GROUP_END =", "body": "<STR_LIT><EOL>"}
{"signature": "if (hasOuterType()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + outerType.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val typePredicates =", "body": "LinkedHashSet<TypePredicate?>()<EOL>"}
{"signature": "val fd =", "body": "a.floorDiv(b)<EOL>"}
{"signature": "fun visitBinaryWithTypeRHSExpression(expression: KtBinaryExpressionWithTypeRHS) {", "body": "<EOL><INDENT><INDENT><INDENT>block(expression)<EOL><INDENT><INDENT>}"}
{"signature": "for (name in scope.getCallableNames()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>scope.getMembersTo(this, name)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeTP =", "body": "TypeVariable(<STR_LIT>, listOf(irTypeType.copy(nullable = true)))<EOL>"}
{"signature": "val cfaCheckers =", "body": "declarationCheckers.controlFlowAnalyserCheckers<EOL>"}
{"signature": "if (firSymbol.fir.origin is FirDeclarationOrigin.ScriptCustomization.ResultProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtFirResultPropertySymbolPointer(analysisSession.createOwnerPointer(this))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val targetOutputDirectory =", "body": "CommonizerOutputFileLayout.resolveCommonizedDirectory(rootOutputDirectory, target)<EOL>"}
{"signature": "fun inlineMe(c: suspend () -> Unit) {", "body": "<EOL><INDENT>c()<EOL><INDENT>c()<EOL><INDENT>c()<EOL><INDENT>c()<EOL><INDENT>c()<EOL>}"}
{"signature": "fun topLevel(data: Data) {", "body": "<EOL><INDENT>data.copy()<EOL>}"}
{"signature": "import package<NUM_LIT>package<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "if (rhs != rhsOriginal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>thenBlock.statements += JsAstUtils.asSyntheticStatement(JsAstUtils.assignment(lhs, rhs).source(callElement))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val carets =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "val outputPrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "val REFINER_CAPABILITY =", "body": "ModuleCapability<Ref<TypeRefinementSupport>>(<STR_LIT>)<EOL>"}
{"signature": "val originName =", "body": "libraryFile.string(protoName)<EOL>"}
{"signature": "val jar<NUM_LIT> =", "body": "writeJar(<STR_LIT>, processors(<STR_LIT>))<EOL>"}
{"signature": "val deserializeOverridden =", "body": "classDescriptor.unsubstitutedMemberScope<EOL>"}
{"signature": "package testing.", "body": "groovytest<EOL>"}
{"signature": "val invocations =", "body": "mutableListOf<Int>()<EOL>"}
{"signature": "if (javaClass.isRecord && javaClass.isFromSource) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createDeclarationsForJavaRecord(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>javaClass,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classId,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>moduleData,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>dispatchReceiver,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classTypeParameters,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declarations<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateCodeForTestMethod(functionDescriptor: FunctionDescriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  beforeDescriptors: List<FunctionDescriptor>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  afterDescriptors: List<FunctionDescriptor>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  classDescriptor: ClassDescriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  parentFun: JsFunction) {", "body": "<EOL><INDENT><INDENT>val functionToTest = generateTestFunction(functionDescriptor, beforeDescriptors, afterDescriptors, classDescriptor, parentFun.scope)<EOL><EOL><INDENT><INDENT>val testName = JsStringLiteral(functionDescriptor.name.toString())<EOL><INDENT><INDENT>parentFun.body.statements += JsInvocation(testRef, testName, JsBooleanLiteral(functionDescriptor.isIgnored), functionToTest).makeStmt()<EOL><INDENT>}"}
{"signature": "val conditionEndLV =", "body": "liveVariables.copy()"}
{"signature": "if (extTestModule is ExtTestModule && extTestModule.isSupport && supportModule != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>supportModule.name<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (failFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinTestUtils.assertEqualsToFile(failFile, e.message ?: <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val BUILDER_DATA =", "body": "<STR_LIT><EOL>"}
{"signature": "val versionClass =", "body": "context.referenceClass(ComposeClassIds.ComposeVersion)<EOL>"}
{"signature": "val prefixNameForClass =", "body": "<STR_LIT><EOL>"}
{"signature": "if (typeAlias != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>inlineTypeAliasIfPossible(classes, typeAlias, intoClassNode, targetIndex)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val uniqueCinteropArgs =", "body": "cinteropArgs.toSet()<EOL>"}
{"signature": "val overriddenBy =", "body": "chosenSymbol.getOverridden(explicitlyDeclared)<EOL>"}
{"signature": "fun optionalAsSequence() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>), Optional.of(<STR_LIT>).asSequence().toList())<EOL><INDENT><INDENT>assertEquals(emptyList(), Optional.empty<String>().asSequence().toList())<EOL><EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(listOf<CharSequence>(<STR_LIT>), Optional.of(<STR_LIT>).asSequence<CharSequence>().toList())<EOL><INDENT>}"}
{"signature": "for (directive in indexedImports.importsForName(name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val descriptorsForImport = descriptorsSelector(getImportScope(directive))<EOL><INDENT><INDENT><INDENT><INDENT>descriptors = descriptors.concat(descriptorsForImport)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (nextIndex >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return nextIndex<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var view =", "body": "v<EOL>"}
{"signature": "val originalConstructor =", "body": "this<EOL>"}
{"signature": "fun visitDoubleValue(value: DoubleValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.DOUBLE<EOL><INDENT><INDENT>data.builder.doubleValue = value.value<EOL><INDENT>}"}
{"signature": "fun browser(body: KotlinJsBrowserDsl.() -> Unit) {", "body": "<EOL><INDENT><INDENT>body(browser)<EOL><INDENT>}"}
{"signature": "if (suitableCtor.isPrimary) {", "body": "<EOL><INDENT><INDENT><INDENT>+JsInvocation(Namer.getFunctionCallRef(context.getInnerReference(superClass)), thisParameter).makeStmt()<EOL><INDENT><INDENT>}"}
{"signature": "fun equalsMethod() {", "body": "<EOL><INDENT><INDENT>assertNotEquals(createEmptyMutableSet(), data)<EOL><INDENT><INDENT>assertNotEquals(data, empty)<EOL><INDENT><INDENT>assertEquals(createEmptyMutableSet(), empty)<EOL><INDENT><INDENT>assertEquals(createTestMutableSetReversed(), data)<EOL><INDENT>}"}
{"signature": "when (k) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> if (episode) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> if (episode) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> if (episode) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> if (episode) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val SMARTCAST =", "body": "DebugInfoDiagnosticFactory<NUM_LIT>(<STR_LIT>, Severity.INFO)<EOL>"}
{"signature": "val accessorName =", "body": "if (function.isGetter) JvmAbi.getterName(propertyName) else JvmAbi.setterName(propertyName)<EOL>"}
{"signature": "val suspendReturnType =", "body": "continuationArgumentType.arguments.single().type<EOL>"}
{"signature": "val ll<NUM_LIT> =", "body": "(<NUM_LIT> * <NUM_LIT> + <NUM_LIT>).dec()<EOL>"}
{"signature": "fun bar(barParam: Int, block: (Int) -> Unit) {", "body": "<EOL><INDENT>val barVar = <NUM_LIT><EOL><INDENT>block(<NUM_LIT>)<EOL>}"}
{"signature": "fun foo(x: String, y: Int) {", "body": "<EOL><INDENT><INDENT>s += x<EOL><INDENT>}"}
{"signature": "fun ontest() {", "body": "<EOL><INDENT><INDENT><INDENT>res = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (renderMetadata != null && tree.annotationType.toString() == METADATA_FQ_NAME.asString()) {", "body": "<EOL><INDENT><INDENT><INDENT>print(renderMetadata.invoke(this, tree))<EOL><INDENT><INDENT>}"}
{"signature": "val jcReturnType =", "body": "if (rawReturnType == null) null else parseType(returnTypes.single().children.single())<EOL>"}
{"signature": "val unsafeGetScratchRawMemory =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val enumValueOfIntrinsic =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val frameworkUUID =", "body": "frameworkResult.output.split(<STR_LIT>).getOrNull(<NUM_LIT>)<EOL>"}
{"signature": "if (dependencies.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val referencingNotTakenEscapeOrigins =", "body": "mutableSetOf<PointsToGraphNode>()<EOL>"}
{"signature": "val fooProp =", "body": "<STR_LIT><EOL>"}
{"signature": "if (index == variants.lastIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (this.result == null) failInEmptyState()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val EXPLICIT_FLEXIBLE_TYPES_DECLARATIONS =", "body": "<STR_LIT> + EXPLICIT_FLEXIBLE_PACKAGE +<EOL>"}
{"signature": "val nonNullNativePtr =", "body": "internalPackageName.child(Name.identifier(NON_NULL_NATIVE_PTR_NAME)).toUnsafe()<EOL>"}
{"signature": "val kmProperty =", "body": "pkg!!.properties[<NUM_LIT>]<EOL>"}
{"signature": "if (config.reportingSettings.buildReportOutputs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>requestedCompilationResults.add(CompilationResultCategory.BUILD_METRICS)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitJumpNode(node: JumpNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitJumpNode(node)<EOL><INDENT>}"}
{"signature": "val namespaceRef =", "body": "jsElementAccess(element, currentRef)<EOL>"}
{"signature": "val parentMemberScope =", "body": "resolveMemberScope(fqName.parent()) ?: return null<EOL>"}
{"signature": "val aString =", "body": "<!EVALUATED: `true`!>checkToStringCorrectness(A(), <STR_LIT>)<!><EOL>"}
{"signature": "val jsMetaFile =", "body": "SimpleOutputFile(sourceFilesForMetaFile, metaFileName, metaFileContent)<EOL>"}
{"signature": "val expectClassIdPlatform =", "body": "findExpandedExpectClassInPlatformModule(expectClassIdOriginal)?.classId<EOL>"}
{"signature": "val registeredExtensions =", "body": "extensionFactories.getValue(kClass)<EOL>"}
{"signature": "if (r<NUM_LIT>isSuccess) {", "body": "<EOL><INDENT><INDENT>if (r<NUM_LIT>getOrNull()?.descriptor != r<NUM_LIT>getOrNull()?.descriptor)<EOL><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val allArgsMapping =", "body": "subCandidate.handleVarargsAndReturnAllArgsMapping(allArgs)<EOL>"}
{"signature": "fun stateMachine() {", "body": "<EOL><INDENT>dummy()<EOL><INDENT>dummy()<EOL>}"}
{"signature": "val delegateToMember =", "body": "delegatesMap[delegatedMember]<EOL>"}
{"signature": "val androidMainSourceSet =", "body": "android.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val sessionFiles =", "body": "sessionsDir.listFiles()<EOL>"}
{"signature": "if (spreadArgumentExpression.isSpread) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val diffs =", "body": "diff(repo<NUM_LIT>, repo<NUM_LIT>).filter { diff -> <STR_LIT> !in diff.fileName }<EOL>"}
{"signature": "var hasMissingClass =", "body": "false<EOL>"}
{"signature": "val DOMAIN_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for (tree in parsedJavaFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val actualFile = File(tree.sourceFile.toUri())<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>tree.sourcefile = KaptJavaFileObject(tree, tree.defs.firstIsInstance(), actualFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val outputTaskOrProvider =", "body": "getLibraryOutputTask(variant) ?: return emptySet()<EOL>"}
{"signature": "fun traverse(visitor: JsVisitorWithContext, ctx: JsContext<*>) {", "body": "<EOL><INDENT><INDENT>visitor.visit(this, ctx)<EOL><INDENT><INDENT>visitor.endVisit(this, ctx)<EOL><INDENT>}"}
{"signature": "val cEnumEntryAliasAnnonation =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (currentType is ConeDynamicType) {", "body": "<EOL><INDENT><INDENT><INDENT>return currentType<EOL><INDENT><INDENT>}"}
{"signature": "while (x) {", "body": "continue }"}
{"signature": "val abOutputTarget =", "body": "parseCommonizerTarget(<STR_LIT>) as SharedCommonizerTarget<EOL>"}
{"signature": "val implementations =", "body": "ServiceLoader.load(cls.java, classLoader)<EOL>"}
{"signature": "val newExtensionReceiverValue =", "body": "if (hasExtensionReceiver) explicitReceiverValue else null<EOL>"}
{"signature": "if (order?.notExpired() ?: false) {", "body": "<EOL><INDENT><INDENT>order.doSomething()<EOL><INDENT>}"}
{"signature": "for (parameter in parameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>print(parameter.render(this))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val androidSdk =", "body": "KtTestUtil.findAndroidSdk()<EOL>"}
{"signature": "val varAssignmentInstruction =", "body": "it.varInsNode!!<EOL>"}
{"signature": "if (rawPropertyValue == rawDefaultValue) {", "body": "<EOL><INDENT><INDENT><INDENT>return@forEach<EOL><INDENT><INDENT>}"}
{"signature": "fun print(a: Any) {", "body": "sideEffect += <STR_LIT> }"}
{"signature": "val a_x_UShort =", "body": "AUShort().x as Any as UShortArray<EOL>"}
{"signature": "if (declaration.parent is IrClass) {", "body": "<EOL><INDENT><INDENT><INDENT>register(declaration, consumer::declareGlobalTypeParameter)<EOL><INDENT><INDENT>}"}
{"signature": "val areAllNonStubTypesNothing =", "body": "<EOL><INDENT><INDENT><INDENT>nonStubTypes.isNotEmpty() && nonStubTypes.all { it.isNothing() }<EOL>"}
{"signature": "fun storeInitialConstraint(<EOL><INDENT><INDENT>constraintKind: ConstraintKind,<EOL><INDENT><INDENT>subType: KotlinType,<EOL><INDENT><INDENT>superType: KotlinType,<EOL><INDENT><INDENT>position: ConstraintPosition<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>initialConstraints.add(Constraint(constraintKind, subType, superType, position))<EOL><INDENT>}"}
{"signature": "if (origin == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dataStream.writeInt(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val functionPattern =", "body": "Pattern.compile(<STR_LIT>)<EOL>"}
{"signature": "val userType =", "body": "KotlinUserTypeStubImpl(rightReference)<EOL>"}
{"signature": "import package.", "body": "Class.Marker' is OK, but 'import package.Class.Marker.NestedClass' is not.<EOL>"}
{"signature": "import pack.", "body": "*<EOL>"}
{"signature": "if (a !is Foo) {", "body": "<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "val IS_DATA =", "body": "Flag(F.IS_DATA)<EOL>"}
{"signature": "if (jsTypeOf(obj) != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>throw JsError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val delegateClassSymbol =", "body": "expandedDelegateClassLikeType.lookupTag.toSymbol(context.session) as? FirClassSymbol<*> ?: return null<EOL>"}
{"signature": "when (candidates.first().status) {", "body": "<EOL><INDENT><INDENT><INDENT>ResolutionStatus.RECEIVER_TYPE_ERROR -> Code.CANDIDATES_WITH_WRONG_RECEIVER<EOL><INDENT><INDENT><INDENT>ResolutionStatus.SUCCESS -> Code.AMBIGUITY<EOL><INDENT><INDENT><INDENT>ResolutionStatus.INCOMPLETE_TYPE_INFERENCE -> Code.INCOMPLETE_TYPE_INFERENCE<EOL><INDENT><INDENT><INDENT>else -> Code.MANY_FAILED_CANDIDATES<EOL><INDENT><INDENT>}"}
{"signature": "val rangePrimitives =", "body": "PrimitiveType.rangePrimitives<EOL>"}
{"signature": "val syntheticSupertypes =", "body": "<EOL><INDENT><INDENT>mutableListOf<KotlinType>().apply { c.syntheticResolveExtension.addSyntheticSupertypes(thisDescriptor, this) }<EOL>"}
{"signature": "if (withSideEffect() == null) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (facade.hasIncrementalResultsConsumer()) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.register(IncrementalResultsConsumer::class.java, RemoteIncrementalResultsConsumer(facade, eventManager, rpcProfiler))<EOL><INDENT><INDENT>}"}
{"signature": "val approximatedSubType =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>approximateToSubType(argumentType, conf, depth) ?: continue@loop"}
{"signature": "val updateInductionVarIndex =", "body": "doWhileLoopNext.statements<EOL>"}
{"signature": "val compilations =", "body": "internal.awaitPlatformCompilations()<EOL>"}
{"signature": "val disabledServiceNames =", "body": "disabled.toHashSet()<EOL>"}
{"signature": "if (correspondingProperty != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (correspondingProperty.owner.name !in specialBridgeMethods.specialPropertyNames) return null<EOL><INDENT><INDENT>}"}
{"signature": "val allDescriptors =", "body": "analyzeAndGetAllDescriptors(brokenJar)<EOL>"}
{"signature": "val statementBlock =", "body": "JsBlock()<EOL>"}
{"signature": "val hasBody =", "body": "dataStream.readBoolean()<EOL>"}
{"signature": "val parameterVar =", "body": "codegen.myFrameMap.enter(variableDescriptor, parameterType)<EOL>"}
{"signature": "val zippedParameters =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classOrObject.primaryConstructorParameters.filter { it.hasValOrVar() } zip declarations.filterIsInstance<FirProperty>()<EOL>"}
{"signature": "for (localVariable in method.localVariables) {", "body": "<EOL><INDENT><INDENT><INDENT>isLive[localVariable.start.indexOf] = true<EOL><INDENT><INDENT><INDENT>isLive[localVariable.end.indexOf] = true<EOL><INDENT><INDENT>}"}
{"signature": "val lightTreeBuilder =", "body": "LightTree<NUM_LIT>Fir(session, firProvider.kotlinScopeProvider)<EOL>"}
{"signature": "import<EOL><INDENT><INDENT><INDENT><INDENT>is MetadataDependencyResolution.", "body": "KeepOriginalDependency -> null<EOL>"}
{"signature": "if (descriptor.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportWrongExternalDeclaration(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val valueParameterInSystem =", "body": "builder.typeInSystem(parameter.type)<EOL>"}
{"signature": "var orderRoots =", "body": "parseDependencies(project, sourceSet)<EOL>"}
{"signature": "val targetLabel =", "body": "returnExpression.getTargetLabel()<EOL>"}
{"signature": "fun registerUserDefinedAnnotation(metaAnnotation: AnnotationFqn, annotationClasses: Collection<FirRegularClass>) {", "body": "<EOL><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun test(func: () -> String?) {", "body": "<EOL><INDENT>val x = func() ?: <STR_LIT><EOL>}"}
{"signature": "fun bar(d: DependencyAnalyzerDependency) {", "body": "<EOL><INDENT>foo(d)<EOL>}"}
{"signature": "if (typeArguments.size < access.typeArguments.size) {", "body": "<EOL><INDENT><INDENT><INDENT>typeArguments + access.typeArguments.subList(typeArguments.size, access.typeArguments.size)<EOL><INDENT><INDENT>}"}
{"signature": "fun main(x: MutableCollection<Set<String>>) {", "body": "<EOL><INDENT>val y = ContainerUtil.flatten(x)<EOL><INDENT>y[<NUM_LIT>].length<EOL>}"}
{"signature": "val importKind =", "body": "matchedCallables.minOfOrNull { it.importKind } ?: importKindFromOption ?: return null<EOL>"}
{"signature": "val codeCacheSizeArgument =", "body": "commandParts.single { it.startsWith(<STR_LIT>) }<EOL>"}
{"signature": "fun throwError() {", "body": "<EOL><INDENT>throw Error(<STR_LIT>)<EOL>}"}
{"signature": "val parametersCount =", "body": "serializableKType.arguments.size<EOL>"}
{"signature": "for (type in superTypes) {", "body": "<EOL><INDENT><INDENT><INDENT>return type.erasedUpperBound ?: continue<EOL><INDENT><INDENT>}"}
{"signature": "val notInlined =", "body": "ArrayList<NotInlinedCall>()<EOL>"}
{"signature": "fun noinlineMe(noinline c: suspend () -> Unit) {", "body": "<EOL><INDENT>c()<EOL><INDENT>c()<EOL><INDENT>c()<EOL><INDENT>c()<EOL><INDENT>c()<EOL>}"}
{"signature": "val sameUUID =", "body": "randomUUID()<EOL>"}
{"signature": "val thisPsi =", "body": "source.psi<EOL>"}
{"signature": "val INSTANCE_FIELD =", "body": "<STR_LIT><EOL>"}
{"signature": "if (foo < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>foo = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (allowedDepth <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val bodyEpilogue =", "body": "mutableStatementContainer()<EOL>"}
{"signature": "val KONAN_DISTRIBUTION_COMMON_LIBS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val expectedSuffix =", "body": "File(<STR_LIT>).path<EOL>"}
{"signature": "val delegatedConstructor =", "body": "firConstructor.delegatedConstructor<EOL>"}
{"signature": "var irPropertyLazyInitialization =", "body": "true<EOL>"}
{"signature": "fun testBoundReceiverLocalVal() {", "body": "<EOL><INDENT><INDENT>val h = Host()<EOL><INDENT><INDENT>use(h::withVararg)<EOL><INDENT>}"}
{"signature": "for ((file, support, creator) in filesWithSupportsWithCreators) {", "body": "<EOL><INDENT><INDENT><INDENT>loadMethodsFromFile(file, support, creator, result)<EOL><INDENT><INDENT>}"}
{"signature": "fun html() {", "body": "<EOL><INDENT><html></html><EOL>}"}
{"signature": "val dispatchReceiverSig =", "body": "stream.readInt()<EOL>"}
{"signature": "val isNameForHidesMember =", "body": "<EOL><INDENT><INDENT><INDENT>name in HIDES_MEMBERS_NAME_LIST || implicitScopeTower.getNameForGivenImportAlias(name) in HIDES_MEMBERS_NAME_LIST<EOL>"}
{"signature": "val INTEROP_WRITE_BITS<INDENT><INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "if (!person?.name.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT>person<!UNSAFE_CALL!>.<!>name<INDENT> }"}
{"signature": "if (this is RandomAccess) {", "body": "<EOL><INDENT><INDENT>for (index in size - n until size)<EOL><INDENT><INDENT><INDENT>list.add(this[index])<EOL><INDENT>}"}
{"signature": "val allPreviousLines =", "body": "<EOL><INDENT><INDENT><INDENT>generateSequence(lastCompiledSnippet) { it.previous }<EOL>"}
{"signature": "if (applicableArguments.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addDiagnostic(MultipleArgumentsApplicableForContextReceiver(candidateContextReceiverParameter))<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun parseException(p<NUM_LIT>: ParseException, p<NUM_LIT>: String) {", "body": "<EOL><INDENT><INDENT><INDENT>log.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val libraryFilesWithFqNames =", "body": "mutableMapOf<KotlinLibrary, List<FileWithFqName>>()<EOL>"}
{"signature": "val doubleArraySerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelCreateDoubleArray, symbols.parcelWriteDoubleArray)<EOL>"}
{"signature": "if (options.dryRun) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((oldFile, newName) in fileEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val newFile = File(moduleSrcDir, newName)<EOL><INDENT><INDENT><INDENT><INDENT>oldFile.copyTo(newFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testNum(numX: Number) {", "body": "<EOL><INDENT>assertEquals(true, numX is Number, <STR_LIT>)<EOL><INDENT>assertEquals(true, numX is Int, <STR_LIT>)<EOL><EOL><INDENT>assertEquals(true, numX is Short, <STR_LIT>)<EOL><INDENT>assertEquals(true, numX is Byte, <STR_LIT>)<EOL><INDENT>assertEquals(false, numX is Long, <STR_LIT>)<EOL><EOL><INDENT>assertEquals(true, numX is Double, <STR_LIT>)<EOL><INDENT>assertEquals(true, numX is Float, <STR_LIT>)<EOL>}"}
{"signature": "val iaeName =", "body": "<STR_LIT><EOL>"}
{"signature": "val outDirectory =", "body": "TemporaryFolder()<EOL>"}
{"signature": "val stubsCache =", "body": "ConcurrentHashMap<IrClass, List<StubsForCollectionClass>>()<EOL>"}
{"signature": "var countDown =", "body": "<NUM_LIT><EOL>"}
{"signature": "val fakeOverrideSymbol =", "body": "createFakeOverrideSymbol(originalDeclaration)<EOL>"}
{"signature": "when (val fallbackOption = fallback(runResult)) {", "body": "<EOL><INDENT><INDENT><INDENT>is CommandFallback.Action -> fallbackOption.fallback<EOL><INDENT><INDENT><INDENT>is CommandFallback.Error -> error(fallbackOption.error ?: createErrorMessage(command, runResult))<EOL><INDENT><INDENT>}"}
{"signature": "val indexParam =", "body": "FunctionParameter(<STR_LIT>, StandardTypes.int)<EOL>"}
{"signature": "val hasJarExtension =", "body": "endsWith(<STR_LIT>)<EOL>"}
{"signature": "fun addRunListener(listener: KotlinTestRunnerListener) {", "body": "<EOL><INDENT><INDENT>runListeners.add(listener)<EOL><INDENT>}"}
{"signature": "fun test(z: () -> Unit) {", "body": "<EOL><INDENT>z()<EOL>}"}
{"signature": "val diagnosticHolder =", "body": "KotlinDiagnosticsHolder.SimpleHolder()<EOL>"}
{"signature": "val loops =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "fun compareAndJump(v: InstructionAdapter, label: Label, opcode: Int) {", "body": "<EOL><INDENT><INDENT>v.invokestatic(<STR_LIT>, compareMethodName, compareMethodDescriptor, false)<EOL><INDENT><INDENT>v.visitJumpInsn(opcode, label)<EOL><INDENT>}"}
{"signature": "val localVariable =", "body": "testFunction.findDescendantOfType<KtProperty>()!!<EOL>"}
{"signature": "if (blockStack.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>blockParents[x] = currentBlock<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun quickSort(<EOL><INDENT><INDENT>array: ShortArray, left: Int, right: Int) {", "body": "<EOL><INDENT>val index = partition(array, left, right)<EOL><INDENT>if (left < index - <NUM_LIT>)<EOL><INDENT><INDENT>quickSort(array, left, index - <NUM_LIT>)<EOL><INDENT>if (index < right)<EOL><INDENT><INDENT>quickSort(array, index, right)<EOL>}"}
{"signature": "if (replFactories.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw java.lang.IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testKlibsWithDuplicatedUniqueNameNotDiscriminated<NUM_LIT>(gradleVersion: GradleVersion, @TempDir tempDir: Path) {", "body": "<EOL><INDENT><INDENT>buildTwoLibrariesAndAppForKT<NUM_LIT>(<EOL><INDENT><INDENT><INDENT>baseDir = <STR_LIT>,<EOL><INDENT><INDENT><INDENT>languageVersion = EnforcedLanguageVersion.K<NUM_LIT>,<EOL><INDENT><INDENT><INDENT>tempDir, gradleVersion<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val firJavaClass =", "body": "symbol.fir<EOL>"}
{"signature": "val skipFirstTime =", "body": "allPreviousLines.subList(<NUM_LIT>, minOf(<NUM_LIT>, allPreviousLines.size))<EOL>"}
{"signature": "if (file.isDirectory && !dirHasFilesInside(file)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw IllegalStateException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val generatedTopLevelClassifiers =", "body": "declarationGenerators<EOL>"}
{"signature": "if (superQualifierClass == null || !superQualifierClass.isInterface || expression.isSuperToAny()) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitCall(expression)<EOL><INDENT><INDENT>}"}
{"signature": "val valueParameterSigs =", "body": "stream.readIntArray()<EOL>"}
{"signature": "fun runExecutableAndVerify(testCase: TestCase, executable: TestExecutable) {", "body": "<EOL><INDENT><INDENT>val testRun = testRunProvider.getTestRun(testCase, executable)<EOL><INDENT><INDENT>val testRunner = createProperTestRunner(testRun, testRunSettings)<EOL><INDENT><INDENT>testRunner.run()<EOL><INDENT>}"}
{"signature": "val abcNode =", "body": "atomic(ANode(BNode(CNode(<NUM_LIT>))))<EOL>"}
{"signature": "fun generateBodies() {", "body": "<EOL><INDENT><INDENT>cEnumCompanionGenerator.invokePostLinkageSteps()<EOL><INDENT><INDENT>cEnumByValueFunctionGenerator.invokePostLinkageSteps()<EOL><INDENT><INDENT>cEnumClassGenerator.invokePostLinkageSteps()<EOL><INDENT><INDENT>cEnumVarClassGenerator.invokePostLinkageSteps()<EOL><INDENT><INDENT>cStructClassGenerator.invokePostLinkageSteps()<EOL><INDENT><INDENT>cStructCompanionGenerator.invokePostLinkageSteps()<EOL><INDENT>}"}
{"signature": "if (illegalRename) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(import.source, FirErrors.OPERATOR_RENAMED_ON_IMPORT, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitConstructor(constructorStub: ConstructorStub, data: Unit) {", "body": "}<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>override fun visitPropertyAccessor(propertyAccessor: PropertyAccessor, data: Unit) {}"}
{"signature": "if (isTailCall() && !function.forceStateMachine) {", "body": "<EOL><INDENT><INDENT><INDENT>transformSimple()<EOL><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val allExtensions =", "body": "kotlinExtensions + <STR_LIT><EOL>"}
{"signature": "when (targetBackend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>TargetBackend.JS_IR, TargetBackend.NATIVE -> listOf(TargetBackend.JS_IR, TargetBackend.NATIVE)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> listOf(targetBackend)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setThisType(psiType: PsiType?) {", "body": "<EOL><INDENT><INDENT>thisType = psiType<EOL><INDENT>}"}
{"signature": "if (parent.startsWith(key)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parent = value + parent.removePrefix(key)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val LOCK =", "body": "<STR_LIT><EOL>"}
{"signature": "fun add(function: IrFunction) {", "body": "<EOL><INDENT><INDENT>set.add(function.descriptor.fqNameSafe)<EOL><INDENT>}"}
{"signature": "for (x: Comparable<*> in uintArrayOf(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u)) {", "body": "<EOL><INDENT><INDENT>test = <STR_LIT><EOL><INDENT><INDENT>useUIntAsComparable(x)<EOL><INDENT>}"}
{"signature": "val innerBundle =", "body": "secondInnerArray.get(<NUM_LIT>)<EOL>"}
{"signature": "val jctor<NUM_LIT> =", "body": "kctor<NUM_LIT>javaConstructor ?: throw AssertionError(<STR_LIT>)<EOL>"}
{"signature": "if (backingField != null) {", "body": "<EOL><INDENT><INDENT>candidate.hasVisibleBackingField = isVisible(backingField, callInfo, candidate.dispatchReceiver, skipCheckForContainingClassVisibility)<EOL><INDENT>}"}
{"signature": "fun removePostponedVariables() {", "body": "<EOL><INDENT><INDENT>storage.postponedTypeVariables.clear()<EOL><INDENT>}"}
{"signature": "if (allowedOnMembers && functionDescriptor?.isOverridableOrOverrides == true) {", "body": "<EOL><INDENT><INDENT><INDENT>contractNotAllowed(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val updatedSymbol =", "body": "symbol.updateSubstitutedMemberIfReceiverContainsTypeVariable(usedOuterCs) ?: return<EOL>"}
{"signature": "val chunkBuilder =", "body": "Chunk.newBuilder()<EOL>"}
{"signature": "val otherConstraintCanAddNullabilityToNewOne =", "body": "<EOL><INDENT><INDENT><INDENT>!newConstraint.isNullableType() && otherConstraint.isNullableType() && kind == ConstraintKind.LOWER<EOL>"}
{"signature": "var hasComposites =", "body": "false<EOL>"}
{"signature": "fun addFieldExpectation(className: String, memberName: String, jvmSignature: String?, genericSignature: String) {", "body": "<EOL><INDENT><INDENT><INDENT>fieldExpectations.add(SignatureExpectation(<STR_LIT>, memberName, jvmSignature, genericSignature))<EOL><INDENT><INDENT>}"}
{"signature": "val react =", "body": "<STR_LIT><EOL>"}
{"signature": "val extensionDescriptor =", "body": "resolvedCall.extensionReceiver.resolvedDescriptor<EOL>"}
{"signature": "fun accept(visitor: KmFunctionExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibFunctionExtensionVisitor)<EOL><INDENT><INDENT>annotations.forEach(visitor::visitAnnotation)<EOL><INDENT><INDENT>uniqId?.let(visitor::visitUniqId)<EOL><INDENT><INDENT>file?.let(visitor::visitFile)<EOL><INDENT>}"}
{"signature": "if (symbolWeakMap === VOID) {", "body": "<EOL><INDENT><INDENT>symbolWeakMap = js(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun headerFilterOnly(includeDirs: Collection<Any>) {", "body": "<EOL><INDENT><INDENT><INDENT>headerFilterDirs += files(*includeDirs.toTypedArray())<EOL><INDENT><INDENT>}"}
{"signature": "val startNode =", "body": "PathNode(start, keyOf(start, linkOptions), null)<EOL>"}
{"signature": "if (expectedPattern.isEmpty() && actualLine.isNotEmpty() && inputsToExpectedOutputsIter.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val nextInputToOutput = inputsToExpectedOutputsIter.next()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedPattern = nextInputToOutput.second<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>input = nextInputToOutput.first<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val F<NUM_LIT>_ADD =", "body": "<STR_LIT><EOL>"}
{"signature": "val argsMap =", "body": "callee.typeParameters.map { it.symbol }.zip(typeArguments).toMap()<EOL>"}
{"signature": "var valueClasses =", "body": "false<EOL>"}
{"signature": "if (alternateFlows == null) {", "body": "<EOL><INDENT><INDENT><INDENT>alternateFlows = mutableMapOf()<EOL><INDENT><INDENT><INDENT>_alternateFlows = alternateFlows<EOL><INDENT><INDENT>}"}
{"signature": "fun callInternalFunctions() {", "body": "<EOL><INDENT>A(<NUM_LIT>)<EOL><INDENT>B()<EOL><INDENT>C(<NUM_LIT>)<EOL><INDENT>D()<EOL>}"}
{"signature": "val parameterConstraint =", "body": "computeParameterTypeAdaptationConstraint(adapteeParameter.type, expectedParameter.type)<EOL>"}
{"signature": "var numberOfCallSitesWithExtractedThreadLocalInitializerCall =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (!isSynthesized && captureThis != null) {", "body": "<EOL><INDENT><INDENT><INDENT>writeParameter(sw, JvmMethodParameterKind.OUTER, captureThis.defaultType, descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val longString =", "body": "String(longChars)<EOL>"}
{"signature": "fun OpenCustom(content: CustomComposable) {", "body": "<EOL><INDENT><INDENT><INDENT>content.call()<EOL><INDENT><INDENT>}"}
{"signature": "val coroutineSuspendedGetter =", "body": "<EOL><INDENT><INDENT>context.coroutineSymbols.coroutineSuspendedGetter<EOL>"}
{"signature": "val unitTestCompilation =", "body": "androidTarget.createAndroidCompilation(<STR_LIT>)<EOL>"}
{"signature": "val SCRIPT_COMPILATION_DISABLE_COMMANDLINE_PROCESSORS_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (ktFile.isCompiled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val classOrObject = ktFile.declarations.singleOrNull() as? KtClassOrObject ?: return<EOL><INDENT><INDENT><INDENT>handleCompiledClassDeclaration(classOrObject, text)<EOL><INDENT><INDENT>}"}
{"signature": "val prevContainer =", "body": "enclosingContainer<EOL>"}
{"signature": "val ordered =", "body": "result.values.sortedBy { it.key }.map { it.toPair() }<EOL>"}
{"signature": "if (pair.first != null) {", "body": "<EOL><INDENT><INDENT><!SMARTCAST_IMPOSSIBLE!>pair.first<!>.length<INDENT> }"}
{"signature": "when (val irOperator = getPrefixOperator(ktOperator)) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> throw AssertionError(<STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>in INCREMENT_DECREMENT_OPERATORS -><EOL><INDENT><INDENT><INDENT><INDENT>AssignmentGenerator(statementGenerator).generatePrefixIncrementDecrement(expression, irOperator)<EOL><EOL><INDENT><INDENT><INDENT>in OPERATORS_DESUGARED_TO_CALLS -> generatePrefixOperatorAsCall(expression, irOperator)<EOL><EOL><INDENT><INDENT><INDENT>else -> createErrorExpression(expression, ktOperator.toString())<EOL><INDENT><INDENT>}"}
{"signature": "else if (value >= java.lang.Short.MIN_VALUE && value <= java.lang.Short.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IntInsnNode(Opcodes.SIPUSH, value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val publicPackageFilter =", "body": "{ className: String -> publicPackagePrefixes.none { className.startsWith(it) } }<EOL>"}
{"signature": "val exactName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val _topLevelBoolean =", "body": "atomic(false)<EOL>"}
{"signature": "if (classDescriptor.kind == ClassKind.INTERFACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(CONSTRUCTOR_IN_INTERFACE.on(ktDeclaration))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val libraryAsByteArray =", "body": "header.toByteArray()<EOL>"}
{"signature": "import packageInBase.", "body": "JavaClass<EOL>"}
{"signature": "val methodParameterTypes =", "body": "Type.getArgumentTypes(methodNode.desc)<EOL>"}
{"signature": "for (value in testValues) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(value, value.toDuration(DurationUnit.NANOSECONDS).inWholeNanoseconds)<EOL><INDENT><INDENT><INDENT>assertEquals(-value, -value.toDuration(DurationUnit.NANOSECONDS).inWholeNanoseconds)<EOL><INDENT><INDENT>}"}
{"signature": "fun appendText() {", "body": "<EOL><INDENT><INDENT>val file = createTempFile().cleanup()<EOL><INDENT><INDENT>file.writeText(<STR_LIT>)<EOL><INDENT><INDENT>file.appendText(<STR_LIT> as CharSequence)<EOL><INDENT><INDENT>file.writeText(StringBuilder(<STR_LIT>), Charsets.US_ASCII, StandardOpenOption.APPEND)<EOL><EOL><INDENT><INDENT>assertEquals(<STR_LIT>, file.readText())<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), file.readLines(Charsets.UTF_<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "val parentFirDeclaration =", "body": "parentDeclaration.getOrBuildFir(firResolveSession)<EOL>"}
{"signature": "if (!match(runResult.processOutputAsString(output))) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Result.Failed(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val temporaryVariable =", "body": "createTemporaryVariable(irExpression, nameHint, startOffset = startOffset, endOffset = endOffset)<EOL>"}
{"signature": "for (isoString in isoStrings) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parseIsoString(isoString), isoString)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parse(isoString), isoString)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parseIsoStringOrNull(isoString), isoString)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(duration, Duration.parseOrNull(isoString), isoString)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (type.isArrayOrNullableArray()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return mapArrayType(type, sw, context, mode, materialized)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val overrideInfoProviderImpl =", "body": "KtFirOverrideInfoProvider(this, token)<EOL>"}
{"signature": "fun useBoolean(b: Boolean) {", "body": "}<EOL><EOL>fun main() {<EOL><INDENT>useBoolean(x.foo(<NUM_LIT>))<EOL><INDENT>useBoolean(x.bar(<NUM_LIT>))<EOL><INDENT>useBoolean(x.w)<EOL><INDENT>useBoolean(x.z)<EOL>}"}
{"signature": "fun store(value: LLVMValueRef, index: Int) {", "body": "<EOL><INDENT><INDENT>variables[index].store(value)<EOL><INDENT>}"}
{"signature": "var blackhole =", "body": "<STR_LIT><EOL>"}
{"signature": "val primitiveCombinations =", "body": "numericCombinations + (PrimitiveType.Char to PrimitiveType.Char)<EOL>"}
{"signature": "package property initializers<EOL>.", "body": ""}
{"signature": "val contextReceiverNumber =", "body": "element.contextReceiverNumber<EOL>"}
{"signature": "for (deprecation in getDeprecationByVersionRequirement(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(deprecation)<EOL><INDENT><INDENT>}"}
{"signature": "val scanner =", "body": "Scanner(option)<EOL>"}
{"signature": "val receiverInfo =", "body": "getIdForImplicitReceiver(implicitReceiver)<EOL>"}
{"signature": "fun testLong() {", "body": "<EOL><INDENT><INDENT>doTest(<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val functionPointer =", "body": "load(functionPointerType, bitcast(pointerType(functionPointerType), invokePtr))<EOL>"}
{"signature": "if (needToRenderDependencies && !dependencies.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>renderModules(dependencies, data)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (module.frontendKind == FrontendKinds.FIR) {", "body": "<EOL><INDENT><INDENT>configuration[CommonConfigurationKeys.USE_FIR] = true<EOL><INDENT>}"}
{"signature": "fun fillCompilerArguments(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinJsDceCompilerToolOptions,<EOL><INDENT><INDENT>args: org.jetbrains.kotlin.cli.common.arguments.K<NUM_LIT>JSDceArguments,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerToolOptionsHelper.fillCompilerArguments(from, args)<EOL><INDENT><INDENT>args.devMode = from.devMode.get()<EOL><INDENT><INDENT>args.outputDirectory = from.outputDirectory.orNull<EOL><INDENT>}"}
{"signature": "val endOfFinallyCode =", "body": "markNewLinkedLabel()<EOL>"}
{"signature": "val JsNative =", "body": "<STR_LIT>.jsId()<EOL>"}
{"signature": "val outFileName =", "body": "<STR_LIT>.replace('-', '_')<EOL>"}
{"signature": "val compileListForJavac =", "body": "filterOutKotlinSources(compileList)<EOL>"}
{"signature": "package demo;<EOL>.", "body": ""}
{"signature": "if (variance != builder.variance) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.variance = variance<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (testInfoOriginalElementName) {", "body": "<EOL><INDENT><INDENT>LinkedSpecTestPatterns.PRIMARY_LINKS -><EOL><INDENT><INDENT><INDENT>groupRelevantLinks(LinkedSpecTestPatterns.primaryLinks, rawElements, testInfoOriginalElementName)<EOL><INDENT><INDENT>LinkedSpecTestPatterns.SECONDARY_LINKS -><EOL><INDENT><INDENT><INDENT>groupRelevantLinks(LinkedSpecTestPatterns.secondaryLinks, rawElements, testInfoOriginalElementName)<EOL><INDENT><INDENT>else -><EOL><INDENT><INDENT><INDENT>testInfoElementMatcher.group(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun setValue(thisRef: Any?, kProp: Any, value: T) {", "body": "<EOL><INDENT><INDENT>x = value<EOL><INDENT>}"}
{"signature": "fun visitFile(file: File) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(stack.last().listFiles().contains(file), file.toString())<EOL><INDENT><INDENT><INDENT><INDENT>files.add(file.relativeToOrSelf(basedir))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val failCompilation =", "body": "{ msg: String -> error(irFile, expression, msg) }<EOL>"}
{"signature": "if (originalSymbol.shouldHaveComputedBaseSymbolsForClass(classLookupTag)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>computeBaseSymbols(originalSymbol, FirTypeScope::getDirectOverriddenProperties, scope, classLookupTag)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!descriptor.hasStableParameterNames()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addDiagnostic(NamedArgumentNotAllowed(argument, descriptor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val scopeProviderImpl =", "body": "KtFirScopeProvider(this, firSymbolBuilder, firResolveSession)<EOL>"}
{"signature": "val programAddressSpace =", "body": "LLVMGetProgramAddressSpace(module)<EOL>"}
{"signature": "fun visitProperty(property: FirProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>indexDeclaration(property)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitElement(property)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val contextReceiverParametersCount =", "body": "function.contextReceiverParametersCount<EOL>"}
{"signature": "if (index >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>valuesArray[index] = entry.value<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (safe) {", "body": "<EOL><INDENT><INDENT><INDENT>v.checkcast(asmType)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val jsExportIgnoreFqName =", "body": "SerializationJsDependenciesClassIds.jsExportIgnore.asSingleFqName()<EOL>"}
{"signature": "for (dir in sourceSet.sourceDirectories) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sourceRoots += PSourceRoot(dir, if (sourceSet.forTests) Kind.TEST else Kind.PRODUCTION)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import p.", "body": "*<EOL>"}
{"signature": "val appNodeFetchVersion =", "body": "moduleVersion(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val testTask =", "body": "<STR_LIT><EOL>"}
{"signature": "val shortArray =", "body": "shortArrayOf(<NUM_LIT>)<EOL>"}
{"signature": "fun bar(o: R) {", "body": "<EOL><INDENT><INDENT>super.bar(o)<EOL><INDENT>}"}
{"signature": "val isSynthesizedInitBlock =", "body": "expression.origin == LoweredStatementOrigins.SYNTHESIZED_INIT_BLOCK<EOL>"}
{"signature": "if (taskName in project.tasks.names) {", "body": "<EOL><INDENT><INDENT><EOL><INDENT><INDENT>project.reportDiagnostic(KotlinJvmMainRunTaskConflict(targetName = name, taskName = taskName))<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "var isProcessingTask =", "body": "true<EOL>"}
{"signature": "val entrySymbol =", "body": "context.cachedDeclarations.getFieldForEnumEntry(expression.symbol.owner)<EOL>"}
{"signature": "val lower =", "body": "s.lowercase()<EOL>"}
{"signature": "else if (value < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return fromNumber(-value).negate();<EOL><INDENT>}"}
{"signature": "fun addCastEdge(edge: CastEdge) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (directCastEdges == null) directCastEdges = ArrayList(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>directCastEdges!!.add(edge)<EOL><INDENT><INDENT><INDENT><INDENT>if (edge.node.reversedCastEdges == null) edge.node.reversedCastEdges = ArrayList(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>edge.node.reversedCastEdges!!.add(CastEdge(this, edge.suitableTypes))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun buildEnd() {", "body": "<EOL><INDENT><INDENT>numberOfNestedBlocks--<EOL><INDENT><INDENT>buildInstrWithNoLocation(WasmOp.END)<EOL><INDENT>}"}
{"signature": "val CALLS_IN_PLACE_EFFECT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val stepName =", "body": "rangeKotlinType.getPropertyGetterName(<STR_LIT>)<EOL>"}
{"signature": "if (testJavaSupportInJvmTargets) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertNoDiagnostic(KotlinToolingDiagnostics.DeprecatedJvmWithJavaPresetDiagnostic)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (analysisContext.builtIns.areSameArrayTypeIgnoringProjections(containingArrayType, constantType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(constantValue as ArrayValue).value.expandArrayAnnotationValue(containingArrayType, analysisContext)<EOL><INDENT>}"}
{"signature": "if (hasExtension(JvmProtoBuf.propertySignature)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JvmProtoBuf.propertySignature).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "for (cache in cacheStack.asReversed()) {", "body": "<EOL><INDENT><INDENT><INDENT>val local = cache.getParameter(parameter)<EOL><INDENT><INDENT><INDENT>if (local != null) return local<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_<NUM_LIT>_<NUM_LIT> =", "body": "createByLanguageVersion(LanguageVersion.KOTLIN_<NUM_LIT>_<NUM_LIT>)<EOL>"}
{"signature": "if (delegatedMembersFilter.shouldNotGenerateDelegatedMember(propertySymbol)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@processor<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualStart =", "body": "currentActual.start<EOL>"}
{"signature": "fun bar(body: Ctx.() -> Unit) {", "body": "<EOL><INDENT>foo()<EOL><INDENT>body<!NO_VALUE_FOR_PARAMETER!>()<!><EOL>}"}
{"signature": "else if ((modality ?: declaration.modality) == Modality.ABSTRACT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(reportSource ?: declaration.source, FirJvmErrors.EXTERNAL_DECLARATION_CANNOT_BE_ABSTRACT, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val toolchainSupport =", "body": "ToolchainSupport.createToolchain(project, this)<EOL>"}
{"signature": "when (referenceTarget) {", "body": "<EOL><INDENT><INDENT><INDENT>is CallableDescriptor -> referenceTarget.extensionReceiverParameter?.value<EOL><INDENT><INDENT><INDENT>is ClassDescriptor -> referenceTarget.thisAsReceiverParameter.value<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "when (qualifiers.nullability) {", "body": "<EOL><INDENT><INDENT>NULLABLE -> true<EOL><INDENT><INDENT>NOT_NULL -> false<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val needGenerateDefaultGetter =", "body": "<EOL><INDENT><INDENT><INDENT>property.getter is FirDefaultPropertyGetter ||<EOL>"}
{"signature": "if (attributes.contains(CompilerConeAttributes.Exact)) {", "body": "<EOL><INDENT><INDENT><INDENT>return withAttributes(attributes.remove(CompilerConeAttributes.Exact))<EOL><INDENT><INDENT>}"}
{"signature": "package and relative names to be used in<EOL>.", "body": ""}
{"signature": "val typeVariablesSubstitutionMap =", "body": "substitutor.map.filterKeys { it in variablesForUsedStubTypes }<EOL>"}
{"signature": "val END_EXPRESSION_TAG =", "body": "<STR_LIT><EOL>"}
{"signature": "fun call(block: (Int) -> Int) {", "body": "<EOL><INDENT>System.out.println(block(<NUM_LIT>))<EOL>}"}
{"signature": "val ANNOTATIONS_TO_TREAT_AS_EXPORTED_FQNS =", "body": "ANNOTATIONS_TO_TREAT_AS_EXPORTED.map(ClassId::asSingleFqName)<EOL>"}
{"signature": "val selectedFqName =", "body": "element.getQualifiedNameAsFqName()<EOL>"}
{"signature": "fun noPack(flag: Boolean) {", "body": "<EOL><INDENT><INDENT>noPack = flag<EOL><INDENT>}"}
{"signature": "fun x<NUM_LIT>(x: TA<NUM_LIT>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias TA<NUM_LIT><T, R> = Map<T, R><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias TA<NUM_LIT><R> = TA<NUM_LIT><String, R><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias TA<NUM_LIT> = TA<NUM_LIT><Int><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x<NUM_LIT>(x: TA<NUM_LIT><String, Int>) {}"}
{"signature": "fun replaceDeclarations(newDeclarations: List<FirDeclaration>) {", "body": "<EOL><INDENT><INDENT>declarations.clear()<EOL><INDENT><INDENT>declarations.addAll(newDeclarations)<EOL><INDENT>}"}
{"signature": "val java<NUM_LIT>SourceSet =", "body": "sourceSets[sourceSetName].java<EOL>"}
{"signature": "package and can't be used here.", "body": "<EOL>"}
{"signature": "val abInvocation =", "body": "commonizerInvocations.single { it.output == abOutputTarget }<EOL>"}
{"signature": "val repoOccurrencesStableOrder =", "body": "repoOccurrences<EOL>"}
{"signature": "val charArrayBaseOffset =", "body": "unsafe.arrayBaseOffset(CharArray::class.java).toLong()<EOL>"}
{"signature": "val fileTextWithoutSymbolsData =", "body": "testFileText.substringBeforeLast(SYMBOLS_TAG).trimEnd()<EOL>"}
{"signature": "if (notBeenHereYet) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>recurse(moduleId = incomingDependencyId, aboveConflictingDependency = dependencyState.isConflicting)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fingerprints =", "body": "fullSerializedIr.files.sortedBy { it.path }.map { SerializedIrFileFingerprint(it) }<EOL>"}
{"signature": "val subdirectories =", "body": "directory.listFiles { file -> file.isDirectory } ?: return null<EOL>"}
{"signature": "val renderDiagnosticNoArgs =", "body": "FirDiagnosticCodeMetaRenderConfiguration().apply { renderParams = false }<EOL>"}
{"signature": "val otherIncrementor =", "body": "Incrementor()<EOL>"}
{"signature": "val TF_OBJC_DYNAMIC =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (mapper.isBaseProperty(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (proto.hasPostDeclarationBlock()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>postDeclarationBlock.statements += deserializeCompositeBlock(proto.postDeclarationBlock).statements<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun qualifierPartsMatching(arg: WithNested<String>.Nested<@Ann String>) {", "body": "}<EOL><EOL>actual fun <!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>qualifierPartsNonMatching<!>(arg: WithNested<@Ann String>.Nested<String>) {}"}
{"signature": "var topLevel =", "body": "Z(<NUM_LIT>)<EOL>"}
{"signature": "if (false && b) {", "body": "<EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "if (root<NUM_LIT>rank > root<NUM_LIT>rank) {", "body": "<EOL><INDENT><INDENT><INDENT>rootToMove = root<NUM_LIT><EOL><INDENT><INDENT><INDENT>newParentRoot = root<NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val counts =", "body": "mutableMapOf<FqName, Int>()<EOL>"}
{"signature": "val projectDisposable =", "body": "Disposer.newDisposable(<STR_LIT>)<EOL>"}
{"signature": "val cp_h =", "body": "<NUM_LIT>e<NUM_LIT> <EOL>"}
{"signature": "fun test<NUM_LIT>(a: Inv<A>, b: Inv<B>) {", "body": "<EOL><INDENT>generic(select(a, b))<EOL>}"}
{"signature": "val oldFirstStatement =", "body": "oldBody.statements.firstOrNull() ?: return<EOL>"}
{"signature": "val prevEnd =", "body": "jsonString.length<EOL>"}
{"signature": "val createTargetBlock =", "body": "blocks.getOrElse(<NUM_LIT>) { <STR_LIT> }<EOL>"}
{"signature": "val projections =", "body": "values.safeCastValues<CirTypeProjection, CirRegularTypeProjection>() ?: return null<EOL>"}
{"signature": "if (!element.isUsageAsAnnotationOrImport()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.OPTIONAL_DECLARATION_OUTSIDE_OF_ANNOTATION_ENTRY.on(element))<EOL><INDENT><INDENT>}"}
{"signature": "val CONFIGURATION =", "body": "<STR_LIT><EOL>"}
{"signature": "if (old.hasExtension(JsProtoBuf.functionContainingFileId)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(JsProtoBuf.functionContainingFileId) != new.getExtension(JsProtoBuf.functionContainingFileId)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val intClass =", "body": "builtIns.int.toIrSymbol()<EOL>"}
{"signature": "val irSubProperty =", "body": "generateDelegatedProperty(subClass, firSubClass, delegatedProperty)<EOL>"}
{"signature": "val REQUEST_TIMEOUT =", "body": "<NUM_LIT>toDuration(DurationUnit.SECONDS)<EOL>"}
{"signature": "fun doSmth<NUM_LIT>() {", "body": "}<EOL>fun cond() {}"}
{"signature": "val startParameterIndex =", "body": "<EOL><INDENT><INDENT>if (isEnumConstructor) <NUM_LIT> else<EOL>"}
{"signature": "if (expression is IrReturnableBlock) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>expression.inlineFunction?.addToUsefulPolyfilledDeclarations()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dummyClassFile =", "body": "kotlinClassesDir().findInPath(<STR_LIT>)<EOL>"}
{"signature": "val lengthAnnotation =", "body": "field.annotations.filterIsInstance<CLength>().firstOrNull()<EOL>"}
{"signature": "if (customSubtype == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return createClassicTypeCheckerState(<EOL><INDENT><INDENT><INDENT><INDENT>errorTypesEqualToAnything,<EOL><INDENT><INDENT><INDENT><INDENT>stubTypesEqualToAnything,<EOL><INDENT><INDENT><INDENT><INDENT>typeSystemContext = this,<EOL><INDENT><INDENT><INDENT><INDENT>kotlinTypeRefiner = kotlinTypeRefiner,<EOL><INDENT><INDENT><INDENT><INDENT>kotlinTypePreparator = kotlinTypePreparator,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val macroConstants =", "body": "mutableListOf<ConstantDef>()<EOL>"}
{"signature": "val JS_LOG =", "body": "<STR_LIT><EOL>"}
{"signature": "val ectorInner =", "body": "innerLambda.getEnclosingConstructor()<EOL>"}
{"signature": "fun visitClass(declaration: IrClass, data: ClosureBuilder?) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.acceptChildren(this, declaration.closureBuilder)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(b: HashSet<Any?>) {", "body": "}"}
{"signature": "val expansionRegularClassSymbol =", "body": "type.lookupTag.toSymbol(session) ?: return null<EOL>"}
{"signature": "fun visitDeclaration(declaration: IrDeclarationBase, data: IrDeclaration?) {", "body": "<EOL><INDENT><INDENT>declaration.acceptChildren(this, declaration)<EOL><INDENT>}"}
{"signature": "val dotIndex =", "body": "containerName.indexOf('.')<EOL>"}
{"signature": "val toTypeFlag =", "body": "if (toIsNullable) <NUM_LIT>b<NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val sizeU =", "body": "size.toUInt()<EOL>"}
{"signature": "fun canCreateABindings() {", "body": "<EOL><INDENT><INDENT>val bindings = Bindings()<EOL><INDENT><INDENT>assertNotNull(bindings)<EOL><INDENT>}"}
{"signature": "if (old.hasOuterTypeId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(oldTypeTable.getType(old.outerTypeId), newTypeTable.getType(new.outerTypeId))) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun libraries(configure: KonanLibrariesSpec.() -> Unit) {", "body": "libraries.configure() }"}
{"signature": "val topLevelA =", "body": "atomic(<NUM_LIT>)<EOL>"}
{"signature": "fun testInternalFromAnotherModule() {", "body": "<EOL><INDENT><INDENT>initProject(JVM_MOCK_RUNTIME)<EOL><INDENT><INDENT>val result = buildAllModules()<EOL><INDENT><INDENT>result.assertFailed()<EOL><INDENT><INDENT>result.checkErrors()<EOL><INDENT>}"}
{"signature": "fun foo(k: KRunnable) {", "body": "<EOL><INDENT>k.invoke()<EOL>}"}
{"signature": "val resolution =", "body": "resolver.resolveExtensionsClash(extensions)<EOL>"}
{"signature": "val ac =", "body": "a % c<EOL>"}
{"signature": "if (source[curPos] == STRING_ESC) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendRange(source, lastPos, curPos)<EOL><INDENT><INDENT><INDENT><INDENT>val newPos = appendEsc(source, curPos + <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>curPos = newPos<EOL><INDENT><INDENT><INDENT><INDENT>lastPos = newPos<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val appKt =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>) ?: error(<STR_LIT>)<EOL>"}
{"signature": "val INC<INDENT><INDENT><INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "else if (project.plugins.hasPlugin(<STR_LIT>) || project.plugins.hasPlugin(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinProject.ProjectType.PLATFORM_JS<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val tsFiles =", "body": "compilerResult.outputs.entries.associate { it.value.getFullTsDefinition(moduleId, moduleKind) to it.key }<EOL>"}
{"signature": "val shouldGeneratePolyfills =", "body": "configuration.getBoolean(JSConfigurationKeys.GENERATE_POLYFILLS)<EOL>"}
{"signature": "val metadatas =", "body": "IdentityHashMap<KProperty<*>, Unit>()<EOL>"}
{"signature": "val namesToMembers =", "body": "members.associateBy { it.name }<EOL>"}
{"signature": "val windowedTransform<NUM_LIT> =", "body": "data.windowed(Int.MAX_VALUE, Int.MAX_VALUE, partialWindows) { it }<EOL>"}
{"signature": "val notNullLabel =", "body": "Label()<EOL>"}
{"signature": "val greatest =", "body": "splayTree.findGreatestLessThan(key)<EOL>"}
{"signature": "for (multiDeclaration in destructuringDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT>modifiersChecker.checkModifiersForDestructuringDeclaration(multiDeclaration)<EOL><INDENT><INDENT><INDENT>identifierChecker.checkDeclaration(multiDeclaration, trace)<EOL><INDENT><INDENT>}"}
{"signature": "fun appendArrayTypeDeclaration(type: WasmArrayDeclaration) {", "body": "<EOL><INDENT><INDENT>b.writeVarInt<NUM_LIT>(WasmBinary.ARRAY_TYPE)<EOL><INDENT><INDENT>appendFiledType(type.field)<EOL><INDENT>}"}
{"signature": "val I<NUM_LIT>_AND =", "body": "<STR_LIT><EOL>"}
{"signature": "val attrName =", "body": "getLocalName(index)!!<EOL>"}
{"signature": "var sourceIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (branch.condition is FirElseIfTrueCondition && indexedValue.index < branchesCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(branch.source, FirErrors.ELSE_MISPLACED_IN_WHEN, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeCheck =", "body": "buildIsCheck(pendingException(), type)<EOL>"}
{"signature": "for (i in parameters.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(DummyArgument(i))<EOL><INDENT><INDENT>}"}
{"signature": "if (enumValue.name == value) {", "body": "<EOL><INDENT><INDENT><INDENT>return enumValue<EOL><INDENT><INDENT>}"}
{"signature": "val lastTargetBlockIndex =", "body": "IndexHolder()<EOL>"}
{"signature": "val KotlinFunctionsBuiltInsPackageFqName =", "body": "StandardNames.BUILT_INS_PACKAGE_FQ_NAME<EOL>"}
{"signature": "while (fir is FirTypeAlias) {", "body": "<EOL><INDENT><INDENT><INDENT>fir = fir.expandedConeType?.lookupTag?.toSymbol(session)?.fir ?: return null<EOL><INDENT><INDENT>}"}
{"signature": "var usedNonConst =", "body": "false<EOL>"}
{"signature": "val outerFirClassifier =", "body": "symbolFirSession.firProvider.getFirClassifierByFqName(outerClassId) ?: return null<EOL>"}
{"signature": "val versionNumber =", "body": "readVersionNumber(stream) ?: return CORRUPTED<EOL>"}
{"signature": "val sideEffect =", "body": "L<NUM_LIT>block()<EOL>"}
{"signature": "for (valueSubParameterIndex in valueParameterIndex until (valueParameterIndex + parameterTypeSize)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val maskIndex = parameterSize + (valueSubParameterIndex / Integer.SIZE)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>arguments[maskIndex] = (arguments[maskIndex] as Int) or (<NUM_LIT> shl (valueSubParameterIndex % Integer.SIZE))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BUILT_INS_NATIVE_DIR_NATIVE =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "package ab<EOL>.", "body": ""}
{"signature": "val GENERATE_STUBS =", "body": "<STR_LIT><EOL>"}
{"signature": "package gh<NUM_LIT>nested.", "body": "sync<EOL>"}
{"signature": "val cSources =", "body": "testPathFull.list()!!<EOL>"}
{"signature": "val optimizedName =", "body": "<STR_LIT><EOL>"}
{"signature": "for (measurement in performanceManager.getMeasurementResults()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collector.report(LOGGING, <STR_LIT> + measurement.render(), null)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun TestDifferencesInPrivateAndPublicVisibilitiesAReverse() {", "body": "}<EOL><EOL>class TestDifferencesInPrivateAndPublicVisibilitiesB {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) public constructor()<EOL>}"}
{"signature": "if (hasNextBlock.isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT>hasNextInvocation<EOL><INDENT><INDENT>}"}
{"signature": "val calleeArguments =", "body": "callee?.arguments<EOL>"}
{"signature": "if (!dir.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>File(dir, <STR_LIT>).setFileContent(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isReceiver =", "body": "receiverInfo.isReceiver<EOL>"}
{"signature": "val intrinsicCache =", "body": "mutableMapOf<FunctionDescriptor, FunctionIntrinsic?>()<EOL>"}
{"signature": "val DATA_CLASS_COMPONENT_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in <NUM_LIT> until first.size()) {", "body": "<EOL><INDENT><INDENT>if (first.keyAt(i) != second.keyAt(i)) return false<EOL><INDENT><INDENT>if (first.valueAt(i) != second.valueAt(i)) return false<EOL><INDENT>}"}
{"signature": "val suspendLocalFun<NUM_LIT> =", "body": "::suspendLocal<NUM_LIT> as Any<EOL>"}
{"signature": "val defaultPropertyLazyInitialization =", "body": "true<EOL>"}
{"signature": "val kotlinTypeChecker =", "body": "context.callComponents.kotlinTypeChecker<EOL>"}
{"signature": "var first =", "body": "true<EOL>"}
{"signature": "package generic<EOL>.", "body": ""}
{"signature": "val buildCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val errorTolerancePolicy =", "body": "arguments.errorTolerancePolicy?.let { ErrorTolerancePolicy.resolvePolicy(it) }<EOL>"}
{"signature": "var arraySize =", "body": "<NUM_LIT><EOL>"}
{"signature": "val thrownFromThread =", "body": "AtomicReference<Throwable?>(null)<EOL>"}
{"signature": "val moduleStep =", "body": "moduleInfo.steps.getValue(projectStep.id)<EOL>"}
{"signature": "else if (other.equalsLong(MIN_VALUE)) {", "body": "<EOL><INDENT><INDENT>return ZERO<EOL><INDENT>}"}
{"signature": "if (cachedResult != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return cachedResult<EOL><INDENT><INDENT>}"}
{"signature": "val returnVariable =", "body": "TypeVariableForLambdaReturnType(candidate.callComponents.builtIns, <STR_LIT>)<EOL>"}
{"signature": "val unboxedMethodNames =", "body": "unboxedTypesAndMethodNamesAndFieldNames.map { (_, methodName, _) -> methodName }<EOL>"}
{"signature": "var xLong =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "for (contextReceiverType in contextReceiverTypes) {", "body": "<EOL><INDENT><INDENT><INDENT>val contextReceiverStub =<EOL><INDENT><INDENT><INDENT><INDENT>KotlinContextReceiverStubImpl(contextReceiverListStub, KtStubElementTypes.CONTEXT_RECEIVER, label = null)<EOL><INDENT><INDENT><INDENT>typeStubBuilder.createTypeReferenceStub(contextReceiverStub, contextReceiverType)<EOL><INDENT><INDENT>}"}
{"signature": "if (compilationName == KotlinCompilation.MAIN_COMPILATION_NAME) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "fun visitKClassValue(value: KClassValue, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinConstantValueKind.KCLASS.ordinal)<EOL><INDENT><INDENT>val normalClass = value.value as KClassValue.Value.NormalClass<EOL><INDENT><INDENT>StubUtils.serializeClassId(dataStream, normalClass.classId)<EOL><INDENT><INDENT>dataStream.writeInt(normalClass.arrayDimensions)<EOL><INDENT>}"}
{"signature": "val lastRecord =", "body": "records.lastOrNull()<EOL>"}
{"signature": "while (modulesWithReachableTopLevels.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>val moduleDeserializer = modulesWithReachableTopLevels.first()<EOL><INDENT><INDENT><INDENT>modulesWithReachableTopLevels.remove(moduleDeserializer)<EOL><EOL><INDENT><INDENT><INDENT>moduleDeserializer.deserializeReachableDeclarations()<EOL><INDENT><INDENT>}"}
{"signature": "if (doesSomeExtensionReceiverContainsStubType && !unrestrictedBuilderInferenceSupported) {", "body": "<EOL><INDENT><INDENT><INDENT>c.trace.reportDiagnosticOnce(TYPE_INFERENCE_POSTPONED_VARIABLE_IN_RECEIVER_TYPE.on(expression))<EOL><INDENT><INDENT><INDENT>return noTypeInfo(c)<EOL><INDENT><INDENT>}"}
{"signature": "val nonSourceAnnotations =", "body": "nonSourceAnnotationsForAnnotationType(annotationsForEntries)<EOL>"}
{"signature": "val testPatternsSingles =", "body": "arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun linkFunctionFakeOverride(function: IrFunctionWithLateBinding, manglerCompatibleMode: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>function.acquireSymbol(IrSimpleFunctionSymbolImpl())<EOL><INDENT><INDENT>}"}
{"signature": "fun direct() {", "body": "<EOL><EOL>}"}
{"signature": "val indexedBodies =", "body": "arrayOfNulls<IrArrayMemoryReader>(icData.size)<EOL>"}
{"signature": "val reorderIrLambdaParameters =", "body": "inliningContext.isInliningLambda &&<EOL>"}
{"signature": "if (jvmNameFromAccessor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return jvmNameFromAccessor<EOL><INDENT><INDENT>}"}
{"signature": "if (target != returnableBlock) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>super.genReturn(target, value)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val view =", "body": "LocalView.current<EOL>"}
{"signature": "val internalDummyKt =", "body": "javaSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val doLazyHeaderCheck =", "body": "needLazyHeaderCheck && testRunSettings.get<PipelineType>() == PipelineType.K<NUM_LIT><EOL>"}
{"signature": "val firValueParameterSymbol =", "body": "function.valueParameters.getOrNull(index)?.symbol?.takeIf { it.name == name } ?: return null<EOL>"}
{"signature": "val intersectionResult =", "body": "mutableMapOf<FirTypeParameterSymbol, ConeTypeProjection>()<EOL>"}
{"signature": "val M<NUM_LIT> =", "body": "M<NUM_LIT> + <NUM_LIT>UL<EOL>"}
{"signature": "val lessThanMaxNs =", "body": "lessThanMaxDouble.toDuration(DurationUnit.NANOSECONDS).inWholeNanoseconds<EOL>"}
{"signature": "fun foo(<EOL><INDENT>javaTable: JavaTableView<String>,<EOL><INDENT>kotlinTable: KotlinTableView<String>,<EOL><INDENT>selection: ArrayList<String><EOL>) {", "body": "<EOL><INDENT>javaTable.selection = selection<EOL><INDENT>kotlinTable.selection = selection<EOL>}"}
{"signature": "val evaluatedArgs =", "body": "constructorCall.argumentList.accept(this, null)<EOL>"}
{"signature": "val lambdaCapture =", "body": "{ test.bigProperty }<EOL>"}
{"signature": "val providedClassifiers =", "body": "CirProvidedClassifiers.of(classifiers.commonDependencies, classifiers.targetDependencies[targetIndex])<EOL>"}
{"signature": "fun testDependencyOnReflect() {", "body": "<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(ForTestCompileRuntime.reflectJarForTests()))<EOL><INDENT>}"}
{"signature": "val boundsSeparator =", "body": "if (verbosity == ConstraintSystemRenderingVerbosity.EXTRA_VERBOSE) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "var label =", "body": "statementsLabels[x]<EOL>"}
{"signature": "val sanitizer =", "body": "computeSanitizer(enforcedProperties)<EOL>"}
{"signature": "val mutableListSum =", "body": "<!EVALUATED: `Sum = <NUM_LIT>`!>testIterator(mutableListOf<Byte>(<NUM_LIT>, (<NUM_LIT>).toByte(), <NUM_LIT>, <NUM_LIT>, <NUM_LIT>))<!><EOL>"}
{"signature": "val firstModifierToken =", "body": "firstModifier.token<EOL>"}
{"signature": "when (s) {", "body": "<EOL><INDENT><INDENT>is String -> s <!USELESS_CAST!>as String<!><INDENT><INDENT> is Int -> <STR_LIT><EOL><INDENT><INDENT>else -> return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun lineFailure(ktFile: KtFile) {", "body": "<EOL><INDENT><INDENT>lines[ktFile] = LineInfo.FailedLine(ktFile, successfulLines.lastOrNull())<EOL><INDENT>}"}
{"signature": "val testPathFull =", "body": "getAbsoluteFile(testDir)<EOL>"}
{"signature": "fun intfMethod() {", "body": "}<EOL><INDENT>fun intfImplMethod_ShouldBeOpen() {}"}
{"signature": "when (containingClass?.isJavaOrEnhancement) {", "body": "<EOL><INDENT><INDENT><INDENT>true -> IrDeclarationOrigin.IR_EXTERNAL_JAVA_DECLARATION_STUB<EOL><INDENT><INDENT><INDENT>else -> IrDeclarationOrigin.IR_EXTERNAL_DECLARATION_STUB<EOL><INDENT><INDENT>}"}
{"signature": "val const<NUM_LIT> =", "body": "Label()<EOL>"}
{"signature": "for (i in prev..curr<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val arg = elements[i]<EOL><INDENT><INDENT><INDENT><INDENT>if (arg !in containsNodeWithSideEffect) continue<EOL><EOL><INDENT><INDENT><INDENT><INDENT>elements[i] = arg.extractToTemporary()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val topInt =", "body": "<NUM_LIT><EOL>"}
{"signature": "val representativeInstructions =", "body": "HashMap<KtElement, KtElementInstruction>()<EOL>"}
{"signature": "if (compilationMode is CompilationMode.Incremental) {", "body": "<EOL><INDENT><INDENT><INDENT>args.classpathAsList = listOf(args.destinationAsFile) + args.classpathAsList<EOL><INDENT><INDENT>}"}
{"signature": "if (proto.hasExtension(JvmProtoBuf.isRaw)) {", "body": "<EOL><INDENT><INDENT><INDENT>return RawTypeImpl(lowerBound, upperBound)<EOL><INDENT><INDENT>}"}
{"signature": "package<EOL><INDENT>private inline fun privateInline(): String = J().", "body": "packagePrivate<EOL>"}
{"signature": "if (recordedType != null && !recordedType.constructor.isDenotable) {", "body": "<EOL><INDENT><INDENT><INDENT>updatedType = argumentTypeResolver.updateResultArgumentTypeIfNotDenotable(context, deparenthesized) ?: updatedType<EOL><INDENT><INDENT>}"}
{"signature": "fun visitSmartCastExpression(smartCastExpression: FirSmartCastExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicExpressionCheckers.check(smartCastExpression, data)<EOL><INDENT>}"}
{"signature": "if (thisGetReplacer != null && thisGetReplacer.first == symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return thisGetReplacer.second()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun declarePropertyWithSignature(signature: IdSignature, symbol: IrPropertySymbol) {", "body": "<EOL><INDENT><INDENT>propertySlice.set(signature, symbol)<EOL><INDENT>}"}
{"signature": "val assignments =", "body": "varAssignedInBlocks[name] ?: emptySet()<EOL>"}
{"signature": "val ktBodyStatements =", "body": "ktBody.statements<EOL>"}
{"signature": "if (typeof regularVariableGetterWithSetter.get !== <STR_LIT> || regularVariableGetterWithSetter.get() !== <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val FOREIGN_JDK<NUM_LIT>_ANNOTATIONS_SOURCES_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val jsLibraryRootPaths =", "body": "compilerConfiguration[JSConfigurationKeys.LIBRARIES].orEmpty()<EOL>"}
{"signature": "fun foo(a: C<String>) {", "body": "<EOL><INDENT><INDENT>val x: String = a.<!INVISIBLE_REFERENCE!>tt<!><EOL><INDENT>}"}
{"signature": "val startCollectionCount =", "body": "startCounts?.collectionCount ?: <NUM_LIT><EOL>"}
{"signature": "val irBody =", "body": "context.irFactory.createBlockBody(startOffset, endOffset)<EOL>"}
{"signature": "val splitPerModule =", "body": "JsEnvironmentConfigurationDirectives.SPLIT_PER_MODULE in module.directives<EOL>"}
{"signature": "package jvmWithJavaData<EOL>.", "body": ""}
{"signature": "val structuredReports =", "body": "mutableMapOf<String, MutableList<BenchmarksReport>>()<EOL>"}
{"signature": "val substituted =", "body": "(substitutor ?: FreshVariableNewTypeSubstitutor.Empty).safeSubstitute(it.defaultType)<EOL>"}
{"signature": "if (tBar !is X) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val currentClientsCount =", "body": "state.clientsCounter<EOL>"}
{"signature": "for (error in errors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (index in <NUM_LIT> until contextReceiverCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>putValueArgument(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>index,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitor.convertToIrExpression(statement.contextReceiverArguments[index]),<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kaptOptionsWithClasspath =", "body": "<EOL><INDENT><INDENT><INDENT>kaptOptions.orEmpty() +<EOL>"}
{"signature": "val thisChar =", "body": "this[index]<EOL>"}
{"signature": "val term =", "body": "processTerminal(last)<EOL>"}
{"signature": "if (argument is EnumValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Assert.assertEquals(<STR_LIT>, <STR_LIT>, argument.enumEntryName.identifier.last().toString())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compileTimeFunctions =", "body": "classDescriptor.unsubstitutedMemberScope.getContributedDescriptors()<EOL>"}
{"signature": "val ARTIFACTS_CONTAINER_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val initialStatementsCount =", "body": "irBlock.statements.size<EOL>"}
{"signature": "var replaceBackingFieldAnnotations =", "body": "false<EOL>"}
{"signature": "if (classifier.isCompanionObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(l: List<String>) {", "body": "<EOL><INDENT>a.plusAssign(l)<EOL>}"}
{"signature": "fun getNonDeclaredProperties(name: Name, result: MutableSet<PropertyDescriptor>) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun resolveImportsInFile(file: KtFile) {", "body": "<EOL><INDENT><INDENT>fileScopeProvider.getImportResolver(file).forceResolveNonDefaultImports()<EOL><INDENT>}"}
{"signature": "if (current is PropertyAccessorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>current = current.correspondingProperty<EOL><INDENT><INDENT>}"}
{"signature": "if (isZero()) {", "body": "<EOL><INDENT><INDENT>return ZERO<EOL><INDENT>}"}
{"signature": "val tempFunction =", "body": "createTempFunction(Name.identifier(<STR_LIT>), this.anyType)<EOL>"}
{"signature": "val hasKotlinMarker =", "body": "HasKotlinMarker(dataManager)<EOL>"}
{"signature": "val allocations =", "body": "mutableListOf<Pointer>()<EOL>"}
{"signature": "for (el in emulatedClasspath) {", "body": "<EOL><INDENT><INDENT><INDENT>Assert.assertTrue(cp.contains((root<NUM_LIT> / el).toFile().canonicalFile))<EOL><INDENT><INDENT>}"}
{"signature": "val actualIndex =", "body": "index + <NUM_LIT><EOL>"}
{"signature": "if (newLine) {", "body": "<EOL><INDENT><INDENT>(ptr + dataSize).storeByte(<NUM_LIT>x<NUM_LIT>A)<EOL><INDENT>}"}
{"signature": "val typeCommonizer =", "body": "TypeCommonizer(classifiers, settings)<EOL>"}
{"signature": "fun visitPackageFragmentDescriptor(descriptor: PackageFragmentDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT>renderPackageFragment(descriptor, builder)<EOL><INDENT><INDENT>}"}
{"signature": "val RETHROW =", "body": "<STR_LIT><EOL>"}
{"signature": "for (param in valueParameters.asReversed()) {", "body": "<EOL><INDENT><INDENT>if (param.isComposerParam()) return param<EOL><INDENT><INDENT>if (!param.name.asString().startsWith('$')) return null<EOL><INDENT>}"}
{"signature": "fun disposeAccessor(fileAccessor: RandomAccessFileAndBuffer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fileAccessor.first.close()<EOL><INDENT><INDENT><INDENT><INDENT>fileAccessor.second.unmapBuffer()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package ${IncrementalProcessorReferencingClasspath.", "body": "CLASSPATH_TYPE.substringBeforeLast(<STR_LIT>)};<EOL>"}
{"signature": "else if (platformTypeUpperBound != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>).append(platformTypeUpperBound)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val initializingClass =", "body": "initializingClass ?: return <STR_LIT><EOL>"}
{"signature": "fun serialize(stub: KotlinValueArgumentStub<T>, dataStream: StubOutputStream) {", "body": "<EOL><INDENT><INDENT>dataStream.writeBoolean(stub.isSpread())<EOL><INDENT>}"}
{"signature": "when (versionRequirement.kind) {", "body": "<EOL><INDENT><INDENT><INDENT>KmVersionRequirementVersionKind.LANGUAGE_VERSION -> <STR_LIT><EOL><INDENT><INDENT><INDENT>KmVersionRequirementVersionKind.COMPILER_VERSION -> <STR_LIT><EOL><INDENT><INDENT><INDENT>KmVersionRequirementVersionKind.API_VERSION -> <STR_LIT><EOL><INDENT><INDENT><INDENT>KmVersionRequirementVersionKind.UNKNOWN -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val sourcePath =", "body": "javaPath<EOL>"}
{"signature": "fun foo<NUM_LIT>(x: In<String>) {", "body": "}<EOL><INDENT>override final fun foo<NUM_LIT>(x: In<Any>) {}"}
{"signature": "fun charArray(c: CharArray) {", "body": "}<EOL><EOL>private fun varargStrings(vararg s: String) {}"}
{"signature": "if (codeFragmentMappings != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(codeFragmentMappings.capturedValues)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (<STR_LIT> == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultStatus =", "body": "NULLABILITY_ANNOTATION_SETTINGS[annotation] ?: return ReportLevel.IGNORE<EOL>"}
{"signature": "val nonNull<NUM_LIT> =", "body": "resultOfIntToResultOfInt(Result<Int>(null))<EOL>"}
{"signature": "val rightContext =", "body": "context.innerBlock()<EOL>"}
{"signature": "var currentFinallyDeep =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (worker in workers) {", "body": "<EOL><INDENT><INDENT><INDENT>worker.requestTermination().result<EOL><INDENT><INDENT>}"}
{"signature": "val thunk =", "body": "{ x + <STR_LIT> }<EOL>"}
{"signature": "package prefix rule, 'a.", "body": "b.c' denotes 'c' in package 'a.b' (thus ab_c, not a_bc)<EOL>"}
{"signature": "fun test(s: IntProgression?) {", "body": "<EOL><INDENT>s?.first<EOL>}"}
{"signature": "val dependsOnImpl =", "body": "MutableObservableSetImpl<KotlinSourceSet>()<EOL>"}
{"signature": "when (status) {", "body": "<EOL><INDENT><INDENT>ResolutionStatus.SUCCESS, ResolutionStatus.INCOMPLETE_TYPE_INFERENCE -> return null<EOL><INDENT><INDENT>ResolutionStatus.UNSAFE_CALL_ERROR -> CandidateApplicability.UNSAFE_CALL<EOL><INDENT><INDENT>ResolutionStatus.ARGUMENTS_MAPPING_ERROR -> CandidateApplicability.INAPPLICABLE_ARGUMENTS_MAPPING_ERROR<EOL><INDENT><INDENT>ResolutionStatus.RECEIVER_TYPE_ERROR -> CandidateApplicability.INAPPLICABLE_WRONG_RECEIVER<EOL><INDENT><INDENT>else -> CandidateApplicability.INAPPLICABLE<EOL><INDENT>}"}
{"signature": "val experimentalTryNextEnabled =", "body": "properties.kotlinExperimentalTryNext.get()<EOL>"}
{"signature": "val actualSet =", "body": "actual.map { it.toString().normalizePath() }.toSet()<EOL>"}
{"signature": "var lastExitCode =", "body": "initialExitCode<EOL>"}
{"signature": "fun assertNull(message: String?, actual: Any?) {", "body": "<EOL><INDENT><INDENT>Assert.assertNull(actual, message ?: <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val UNARY_MINUS<INDENT><INDENT>   =", "body": "<STR_LIT><EOL>"}
{"signature": "var currentFunctionWrapperId =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun distinct() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>).distinct())<EOL><INDENT><INDENT>assertTrue(listOf<Int>().distinct().isEmpty())<EOL><INDENT>}"}
{"signature": "for (edge in it.edges) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (edge is PointsToGraphEdge.Assignment)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assignmentEdges += edge<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>drain.edges += edge<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val charProgression =", "body": "CharProgression.fromClosedRange('a', 'z', <NUM_LIT>)<EOL>"}
{"signature": "if (it == lastImport) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>println()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val doubleArray =", "body": "doubleArrayOf(<NUM_LIT>)<EOL>"}
{"signature": "if (index + <NUM_LIT> == endIndex) {", "body": "<EOL><INDENT><INDENT>return malformed(<NUM_LIT>, index, throwOnMalformed)<EOL><INDENT>}"}
{"signature": "val selectedComponent =", "body": "resolvedDependency.selected<EOL>"}
{"signature": "val contractDeserializer =", "body": "if (proto.typeParameterList.isEmpty()) this.contractDeserializer else FirContractDeserializer(local)<EOL>"}
{"signature": "fun foo(f: Any) {", "body": "}<EOL><EOL>fun test<NUM_LIT>() {<EOL><INDENT>foo(K::Nested)<EOL>}"}
{"signature": "fun visitVariableDescriptor(descriptor: VariableDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT>renderVariable(descriptor, true, builder, true)<EOL><INDENT><INDENT>}"}
{"signature": "val golden<NUM_LIT>File =", "body": "testPathFull.resolve(<STR_LIT>)<EOL>"}
{"signature": "val dirtyDeclarations =", "body": "hashMapOf<IdSignature, IrSymbol>()<EOL>"}
{"signature": "fun foo(i: Int?) {", "body": "}"}
{"signature": "var expressionStubs =", "body": "<NUM_LIT><EOL>"}
{"signature": "val part =", "body": "Random.nextLong(<NUM_LIT>, <NUM_LIT>toDuration(unit).inWholeNanoseconds).nanoseconds<EOL>"}
{"signature": "val isNoTargetsInitialized =", "body": "(multiplatformExtension ?: return).awaitTargets().none { it !is KotlinMetadataTarget }<EOL>"}
{"signature": "val textDiagnostic =", "body": "actualDiagnostics[unexpectedDiagnostic]<EOL>"}
{"signature": "fun foo()<EOL><EOL>actual fun foo() {", "body": "}<EOL><EOL>actual fun foo() {}"}
{"signature": "fun report(severity: SwiftExportLogger.Severity, message: String) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val compiledFiles =", "body": "ArrayList<String>()<EOL>"}
{"signature": "fun TestTailrecFunctionVsConstructor() {", "body": "}<EOL><EOL>class TestTailrecFunctionVsConstructorReverse {<EOL><INDENT>constructor()<EOL>}"}
{"signature": "val supressed =", "body": "suppressedExceptionsList<EOL>"}
{"signature": "val expansionResult =", "body": "expandGlob(fullPattern)<EOL>"}
{"signature": "val injectedValueProvider =", "body": "InjectedSymbolProvider(mainKtFile, injectedSymbolMapping)<EOL>"}
{"signature": "var char =", "body": "lexemes.currentChar<EOL>"}
{"signature": "if (originalInstruction === originalPseudocode.internalSinkInstruction && copy is SubroutineSinkInstruction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>internalSinkInstruction = copy<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val noEndorsedLibs =", "body": "arguments.noendorsedlibs<EOL>"}
{"signature": "if (declaration.isDelegated) {", "body": "<EOL><INDENT><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>, commentBlock(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (typeVariableSubstitutors.containsKey(call)) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val randomInts =", "body": "List(<NUM_LIT>) { Random.nextInt() }<EOL>"}
{"signature": "val javaSourceSets =", "body": "project<EOL>"}
{"signature": "val jvmUtil =", "body": "resolvePath(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "for (type in fpTypes) {", "body": "<EOL><INDENT><INDENT>addOperation(BuiltInOperatorNames.IEEE<NUM_LIT>_EQUALS, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (it is FirEnumEntrySymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processor(it)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var useInsecure =", "body": "true<EOL>"}
{"signature": "if (!scope.isInlinedLambda || scope.isComposable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>break@loop<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun printStructure(p: Printer) {", "body": "<EOL><INDENT><INDENT>p.println(primaryScope::class.java.simpleName)<EOL><INDENT>}"}
{"signature": "val isEmpty =", "body": "t.class_Count == <NUM_LIT> && isPackageEmpty<EOL>"}
{"signature": "val groupedByInternalName =", "body": "hiddenSignatures.groupBy({ it.split(<STR_LIT>)[<NUM_LIT>] }) { it.split(<STR_LIT>)[<NUM_LIT>] }<EOL>"}
{"signature": "for (dep in getDependencies(target, context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collectDependenciesRecursively(dep, result)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val initialEdges =", "body": "edges(this)<EOL>"}
{"signature": "val MC =", "body": "Char.MIN_VALUE<EOL>"}
{"signature": "fun visitLookupSwitchInsn(dflt: Label?, keys: IntArray?, labels: Array<out Label>?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>skipValidation = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun f<NUM_LIT>(vararg x: Any)<!><EOL><EOL><EOL>actual inline fun f<NUM_LIT>(noinline s: () -> String) {", "body": "}<EOL>actual inline fun <!ACTUAL_WITHOUT_EXPECT!>f<NUM_LIT><!>(noinline s: () -> String) {}"}
{"signature": "package simpleObject<EOL>.", "body": ""}
{"signature": "if (clazz.hasMethodBodiesInInterface) {", "body": "<EOL><INDENT><INDENT><INDENT>appendLine()<EOL><INDENT><INDENT><INDENT>appendCommentedLine(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val waitingContinuations =", "body": "mutableListOf<Continuation<Result<T>>>()<EOL>"}
{"signature": "val generatedName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (irClass.isData && ktClassOrObject is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateAdditionalMembersForDataClass(irClass, ktClassOrObject)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (state.value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>true -> return Text(text = <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> Text(text = <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val publicX<NUM_LIT>BoundRef =", "body": "Z<NUM_LIT>(<NUM_LIT>U, <NUM_LIT>)::publicX<NUM_LIT><EOL>"}
{"signature": "if (ReportCategory.IC_MESSAGE.code in compilationOptions.reportCategories) {", "body": "<EOL><INDENT><INDENT>reporters.add(<EOL><INDENT><INDENT><INDENT>DebugMessagesICReporter(<EOL><INDENT><INDENT><INDENT><INDENT>servicesFacade = servicesFacade,<EOL><INDENT><INDENT><INDENT><INDENT>rootDir = root,<EOL><INDENT><INDENT><INDENT><INDENT>reportSeverity = ReportSeverity.fromCode(compilationOptions.reportSeverity)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>.getSeverity(mapErrorToWarning = true, mapInfoToWarning = true)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val SCRIPT_RECEIVER_NAME_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val isLambda =", "body": "lambdaInfo != null<EOL>"}
{"signature": "val finallyPaths =", "body": "mutableListOf<List<CoroutineBlock>>()<EOL>"}
{"signature": "val hashBytes =", "body": "md<NUM_LIT>Digest.digest()<EOL>"}
{"signature": "val actualClassIds =", "body": "this.filter { !it.isExpectMember }.map { ClassId.topLevel(it.fqNameSafe) }<EOL>"}
{"signature": "if (changesElement !is JsonArray) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (first is ClassDescriptor) {", "body": "<INDENT><INDENT><INDENT> return listOf(first)<EOL><INDENT><INDENT>}"}
{"signature": "val esClassWhichNeedBoxParameters =", "body": "DefaultDelegateFactory.newDeclarationToValueMapping<IrClass, Boolean>()<EOL>"}
{"signature": "val kotlinAndroidMain =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "package demo_range<EOL>.", "body": ""}
{"signature": "val SPEC_MODULE_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val readBytes =", "body": "`in`.read(buf, <NUM_LIT>, length)<EOL>"}
{"signature": "val testReportDirs =", "body": "testReportNames.map { projectPath.resolve(<STR_LIT>) }<EOL>"}
{"signature": "fun updateReturnRef(value: LLVMValueRef, address: LLVMValueRef) {", "body": "<EOL><INDENT><INDENT>if (context.memoryModel == MemoryModel.STRICT)<EOL><INDENT><INDENT><INDENT>store(value, address)<EOL><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT>call(llvm.updateReturnRefFunction, listOf(address, value))<EOL><INDENT>}"}
{"signature": "val severity =", "body": "if (isUseOldBackendAllowed()) WARNING else ERROR<EOL>"}
{"signature": "fun testPodDownloadGitTag(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestGit(gradleVersion, tag = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (platformN === null) {", "body": "}"}
{"signature": "val topLevelClassName =", "body": "classNameWithInnerClasses.substringBefore('.')<EOL>"}
{"signature": "fun updateJavaClasspath(javaClasspath: MutableList<String>) {", "body": "<EOL><INDENT><INDENT>javaClasspath += layoutlibJar.path<EOL><INDENT>}"}
{"signature": "val enumKind =", "body": "this.classKind == KtClassKind.ENUM_CLASS<EOL>"}
{"signature": "fun visitResolvedDeclarationStatus(resolvedDeclarationStatus: FirResolvedDeclarationStatus, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedDeclarationStatus(resolvedDeclarationStatus)<EOL><INDENT>}"}
{"signature": "val isReadOnly =", "body": "declaration.hasReadOnlyAnnotation ||<EOL>"}
{"signature": "val defectType =", "body": "DefectType(this.name, <STR_LIT>, VALUE<NUM_LIT>_A, VALUE<NUM_LIT>_A)<EOL>"}
{"signature": "val arrayClass =", "body": "parameter.type.classOrNull!!.owner<EOL>"}
{"signature": "if (b ?: d) {", "body": "}"}
{"signature": "fun notNullExternRef(x: ExternRef) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "fun visitEqualityOperatorCallNode(node: EqualityOperatorCallNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitEqualityOperatorCallNode(node)<EOL><INDENT>}"}
{"signature": "fun getByteArray(source: NativePointed, dest: ByteArray, length: Int) {", "body": "<EOL><INDENT><INDENT>unsafe.copyMemory(null, source.address, dest, byteArrayBaseOffset, length.toLong())<EOL><INDENT>}"}
{"signature": "for (typeArgument in argsRefs) {", "body": "<EOL><INDENT><INDENT><INDENT>val argTypeRef = typeArgument.typeRef ?: continue<EOL><INDENT><INDENT><INDENT>checkType(argTypeRef, typeArgument.source ?: fallbackSource, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "fun booleanVararg(vararg xs: Boolean) {", "body": "}<EOL>fun byteVararg(vararg xs: Byte) {}"}
{"signature": "if (declaration.propertySymbol.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, getProperDiagnostic(context), context)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration.correspondingPropertySymbol?.owner?.isLateinit == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val pairStr =", "body": "(fibonacci() zip fibonacci().map { i -> i*<NUM_LIT> }).joinToString(limit = <NUM_LIT>)<EOL>"}
{"signature": "val currentTypeArgumentsNumber =", "body": "(symbol as? FirRegularClassSymbol)?.fir?.typeParameters?.count { it is FirTypeParameter } ?: <NUM_LIT><EOL>"}
{"signature": "fun testAssertNotEquals() {", "body": "<EOL><INDENT><INDENT>assertNotEquals(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (functionDescriptor == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return noTypeInfo(context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (b in listOf(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return b<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitWhenBranchConditionExitNode(node: WhenBranchConditionExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "var root =", "body": "resourceFile<EOL>"}
{"signature": "if (x?.prop_<NUM_LIT>?.prop_<NUM_LIT>!!.prop_<NUM_LIT>?.prop_<NUM_LIT> != null) {", "body": "<EOL><INDENT><INDENT>x.prop_<NUM_LIT>prop_<NUM_LIT>prop_<NUM_LIT>prop_<NUM_LIT><EOL><INDENT><INDENT>x.prop_<NUM_LIT>prop_<NUM_LIT>prop_<NUM_LIT>prop_<NUM_LIT>equals(<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val isError =", "body": "this is IrErrorExpression<EOL>"}
{"signature": "val argumentsEntrySet =", "body": "resolvedCall.valueArguments.entries<EOL>"}
{"signature": "if (targetToResourcesMap[target] != null) {", "body": "<EOL><INDENT><INDENT><INDENT>target.project.reportDiagnostic(KotlinToolingDiagnostics.ResourcePublishedMoreThanOncePerTarget(target.name))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val packagePrefix =", "body": "properties.packagePrefix<EOL>"}
{"signature": "val adaptedReferenceOriginalTarget =", "body": "referencedFunction.getAdapteeFromAdaptedForReferenceFunction()<EOL>"}
{"signature": "fun useCheckers(checkers: DeclarationCheckers) {", "body": "<EOL><INDENT><INDENT>session.checkersComponent.register(checkers)<EOL><INDENT>}"}
{"signature": "val isPlainContent =", "body": "afterAsterisk && !isCodeBlock()<EOL>"}
{"signature": "fun configureScriptDestructuringDeclarationEntry(declaration: FirVariable, container: FirVariable) {", "body": "<EOL><INDENT><INDENT><INDENT>(declaration as FirProperty).destructuringDeclarationContainerVariable = container.symbol<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration is TypeParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>return append(typeParameterNamer(declaration))<EOL><INDENT>}"}
{"signature": "val overriddenFn =", "body": "symbol.owner<EOL>"}
{"signature": "fun addTimeMetricNs(time: GradleBuildTime, durationNs: Long) {", "body": "<EOL><INDENT>}"}
{"signature": "fun storeCallableReferenceContext(<EOL><INDENT><INDENT>access: FirCallableReferenceAccess,<EOL><INDENT><INDENT>context: FirTowerDataContext,<EOL><INDENT><INDENT>inferenceSession: FirInferenceSession<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>contextForCallableReferences[access] = Pair(context, inferenceSession)<EOL><INDENT>}"}
{"signature": "if (statements.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.at(jsCodeExpr, context).report(JsKlibErrors.JSCODE_NO_JAVASCRIPT_PRODUCED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var numberOfColors =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun e<NUM_LIT>(s: String, a: Int) {", "body": "}<EOL><INDENT><!INAPPLICABLE_INFIX_MODIFIER(<STR_LIT>)!>infix<!> fun e<NUM_LIT>() {}"}
{"signature": "val minus<NUM_LIT>D =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun buildStarted(context: CompileContext) {", "body": "<EOL><INDENT><INDENT>logSettings(context)<EOL><INDENT><INDENT>val reportService = JpsStatisticsReportService.create()<EOL><INDENT><INDENT>context.putUserData(statisticsReportServiceKey, reportService)<EOL><INDENT><INDENT>reportService.buildStarted(context)<EOL><INDENT>}"}
{"signature": "fun unchangedFun<NUM_LIT>() {", "body": "}<EOL><EOL>private fun removedFun<NUM_LIT>(): Int = <NUM_LIT><EOL><EOL>private val removedVal<NUM_LIT>: String = <STR_LIT><EOL><EOL>private val changedVal<NUM_LIT>: Int = <NUM_LIT><EOL><EOL>private fun changedFun<NUM_LIT>(arg: Int) {}"}
{"signature": "val classPrefixesToLoadByParentFromRegistry =", "body": "<EOL><INDENT><INDENT><INDENT>System.getProperty(<STR_LIT>)?.split(',')?.map { it.trim() } ?: emptyList()<EOL>"}
{"signature": "val jvmLibrariesProvidedByDefault =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val classesToSkip =", "body": "<EOL><INDENT><INDENT><INDENT>updatedConfiguration[ScriptCompilationConfiguration.skipExtensionsResolutionForImplicits]!!<EOL>"}
{"signature": "val substitutionContext =", "body": "HashMap<TypeConstructor, TypeProjection>()<EOL>"}
{"signature": "fun checkPostConditionAndIncrement(loopExit: Label) {", "body": "<EOL><INDENT><INDENT>incrementLoopVariable()<EOL><INDENT>}"}
{"signature": "val startLine =", "body": "readInt()<EOL>"}
{"signature": "val missingClassNames<NUM_LIT> =", "body": "HashSet<String>()<EOL>"}
{"signature": "if (it.needTransformStatus(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.operation(acc)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dirAccessible =", "body": "builtProductsDirAccessibility()<EOL>"}
{"signature": "fun foo(t: String) {", "body": "}<EOL><INDENT>fun bar(): String {<EOL><INDENT><INDENT>return null!!<EOL><INDENT>}"}
{"signature": "val isExternal =", "body": "functionDeclaration?.hasModifier(KtTokens.EXTERNAL_KEYWORD) ?: withFunctionSymbol { it.isExternal }<EOL>"}
{"signature": "val BINARY_OPERATION_NAMES =", "body": "setOf(TIMES, PLUS, MINUS, DIV, MOD, REM, RANGE_TO, RANGE_UNTIL)<EOL>"}
{"signature": "fun FatFramework(name: String, configure: Action<KotlinNativeFatFrameworkConfig>) {", "body": "<EOL><INDENT><INDENT>addKotlinArtifact<KotlinNativeFatFrameworkConfigImpl>(name, configure)<EOL><INDENT>}"}
{"signature": "val interfaceMaxUnfoldFactor =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (option.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FilesOptionKind.INTERNAL -> Unit<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val subclassesOfType =", "body": "symbolToCheck.collectAllSubclasses(flags.session)<EOL>"}
{"signature": "val resolverTarget =", "body": "this.target<EOL>"}
{"signature": "val typeParametersToRemove =", "body": "if (needsTypeArgumentOffset(declaration)) declaration.parentAsClass.typeParameters.size else <NUM_LIT><EOL>"}
{"signature": "var bufSize =", "body": "initialBufSize<EOL>"}
{"signature": "fun test(invOutAny: Inv<out Any>, invAny: Inv<Any>) {", "body": "<EOL><INDENT>val a: Inv<out Any> = select(invAny, outToOut(invOutAny))<EOL>}"}
{"signature": "val leafRoot =", "body": "findRoot(strictRoot)<EOL>"}
{"signature": "fun bar(body: () -> Unit) {", "body": "<EOL><INDENT><INDENT>body()<EOL><INDENT>}"}
{"signature": "val classIsInterface =", "body": "containingClassProto?.let { Flags.CLASS_KIND.get(it.flags) == ProtoBuf.Class.Kind.INTERFACE } ?: false<EOL>"}
{"signature": "if (this is IrCapturedType) {", "body": "<EOL><INDENT><INDENT><INDENT>b.captureStatus = captureStatus<EOL><INDENT><INDENT><INDENT>b.capturedLowerType = lowerType<EOL><INDENT><INDENT><INDENT>b.capturedTypeConstructor = constructor<EOL><INDENT><INDENT>}"}
{"signature": "fun visitAnnotationCall(annotationCall: FirAnnotationCall) {", "body": "<EOL><INDENT><INDENT>visitElement(annotationCall)<EOL><INDENT>}"}
{"signature": "val singleUnboxedType =", "body": "value.unboxedTypes.singleOrNull()<EOL>"}
{"signature": "val fileList =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>inPlaceaccess.packageFragmentsDir(fqName)<EOL>"}
{"signature": "if (calleeArgument is JsInvocation && calleeArgument.typeCheck == TypeCheck.OR_NULL) {", "body": "<EOL><INDENT><INDENT><INDENT>return JsInvocation(calleeArgument, argument)<EOL><INDENT><INDENT>}"}
{"signature": "package segments.", "body": "e.g. com.google.foo = com -> google -> foo<EOL>"}
{"signature": "val testTasks =", "body": "targetsToTest.flatMap { listOf(<STR_LIT>, <STR_LIT>) }.toTypedArray()<EOL>"}
{"signature": "val newSize =", "body": "toIndex - fromIndex<EOL>"}
{"signature": "if (scope !is LexicalScope) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>firstImportingScopeIndex = i<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val metadataBinary =", "body": "sourceSetContent.metadataBinary ?: return@mapNotNull null<EOL>"}
{"signature": "if (comparator.compare(minValue, v) > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>minValue = v<EOL><INDENT><INDENT>}"}
{"signature": "when (platformType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>in jvmPlatformTypes -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> KOTLIN_RUNTIME<EOL><INDENT><INDENT>}"}
{"signature": "fun both() {", "body": "<EOL><INDENT><INDENT>one()<EOL><INDENT><INDENT>two()<EOL><INDENT>}"}
{"signature": "fun runTest(@TestDataFile filePath: String) {", "body": "<EOL><INDENT><INDENT>testRunner(filePath, configuration).runTest(filePath)<EOL><INDENT>}"}
{"signature": "var getter =", "body": "propertyDescriptor.getter<EOL>"}
{"signature": "val shouldFilter =", "body": "filteredTypes.any { lower -> lower !== upper && predicate(lower, upper) }<EOL>"}
{"signature": "val bitcodeModuleDependencies =", "body": "mutableListOf<DependenciesTracker.ResolvedDependency>()<EOL>"}
{"signature": "if (typeParameter.isReified && typeArgument.toRegularClassSymbol(context.session)?.forwardDeclarationKindOrNull() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirNativeErrors.FORWARD_DECLARATION_AS_REIFIED_TYPE_ARGUMENT,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeArgument,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (s is IrComposite) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>transformedStatements.addAll(s.statements)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(o: Number) {", "body": "}<EOL><EOL>fun test<NUM_LIT>(o: Number) {<EOL><INDENT>val p: Int = <NUM_LIT><EOL><INDENT>val o = if (z < <NUM_LIT>) p else o<EOL><INDENT>test(o)<EOL>}"}
{"signature": "val irMetaInfo =", "body": "processIrModule(module)<EOL>"}
{"signature": "val longTarget<NUM_LIT> =", "body": "LINUX_ARM<NUM_LIT>name<EOL>"}
{"signature": "val maxVal =", "body": "maxBy(a, { x -> invocationCount++; x * x;})<EOL>"}
{"signature": "val owner =", "body": "this.classOrNull?.owner<EOL>"}
{"signature": "fun visitSafeCallExpression(safeCallExpression: FirSafeCallExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(safeCallExpression)<EOL><INDENT>}"}
{"signature": "val isExplicitOverride =", "body": "function.origin == FirDeclarationOrigin.Source<EOL>"}
{"signature": "val singleUse =", "body": "use.single()<EOL>"}
{"signature": "fun Lazy(content: () -> Unit) {", "body": "}<EOL><INDENT><INDENT><INDENT>@Composable inline fun Box(content: () -> Unit) {}"}
{"signature": "val classAssResourceStream =", "body": "classLoader.getResourceAsStream(classResourceName)<EOL>"}
{"signature": "val typeVariableSubstitutors =", "body": "LinkedHashMap<CallHandle, TypeSubstitutor>()<EOL>"}
{"signature": "val implementConfig =", "body": "project.configurations.createDependencyScope(IMPLEMENT_CONFIG_NAME).get()<EOL>"}
{"signature": "val assignedVariable =", "body": "innerStatement.symbol.owner<EOL>"}
{"signature": "if (reported.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>destination.add(WhenMissingCase.Unknown)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (f.toInt() != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val irFragment =", "body": "linker.deserializeFullModule(module, library)<EOL>"}
{"signature": "val areThereIntersectionFinalClasses =", "body": "intersectionSupertypes.any { it.typeConstructor().isCommonFinalClassConstructor() }<EOL>"}
{"signature": "val safeQualifiedExpression =", "body": "parentOfType<KtSafeQualifiedExpression>() ?: return false<EOL>"}
{"signature": "val tracked =", "body": "it.groupValues[<NUM_LIT>]<EOL>"}
{"signature": "val rootCallableDescriptors =", "body": "callableDescriptor.findTopMostOverriddenDescriptors()<EOL>"}
{"signature": "for (srcFile in sourceFiles.keys) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val srcMetadata = srcFileUpdatedMetadata[srcFile] ?: notFoundIcError(<STR_LIT>, libFile, srcFile)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>incrementalCache.updateSourceFileMetadata(srcFile, srcMetadata)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result[libFile, srcFile] = srcMetadata<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val abcCharArray =", "body": "<STR_LIT>.toCharArray()<EOL>"}
{"signature": "val expression<NUM_LIT>MfvcNodeInstanceAccessor =", "body": "mutableMapOf<IrExpression, MfvcNodeInstanceAccessor>()<EOL>"}
{"signature": "val staticClassScope =", "body": "packageOrClassDescriptor.staticScope<EOL>"}
{"signature": "if (stat.link != null) {", "body": "<EOL><INDENT><INDENT>takeString(<!SMARTCAST_IMPOSSIBLE!>stat.link<!>)<EOL><INDENT>}"}
{"signature": "val FAT_MAGIC_<NUM_LIT> =", "body": "<NUM_LIT>xcafebabfL<EOL>"}
{"signature": "val strategyAllArg =", "body": "<STR_LIT><EOL>"}
{"signature": "val erasedParams =", "body": "if (mode == NonReifiedTypeParameterRemappingMode.ERASE) mutableSetOf<IrTypeParameterSymbol>() else null<EOL>"}
{"signature": "val macosX<NUM_LIT>Main =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "if (value == <STR_LIT> && flags[index - <NUM_LIT>] == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var varWithBackingField =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun x<NUM_LIT>(x<NUM_LIT>Var: Int) {", "body": "<EOL><INDENT>val y<NUM_LIT> = <NUM_LIT><EOL>}"}
{"signature": "val KOTLIN_ABI_SNAPSHOT =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (!testStringAppend<NUM_LIT>(<STR_LIT>, 'x', <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (old.hasReturnTypeId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(oldTypeTable.getType(old.returnTypeId), newTypeTable.getType(new.returnTypeId))) return false<EOL><INDENT><INDENT>}"}
{"signature": "val declaredTypeParameters =", "body": "classifierDescriptorChain[index].declaredTypeParameters<EOL>"}
{"signature": "val isInlineFunPublicOrPublishedApi =", "body": "inlineFunEffectiveVisibility.publicApi<EOL>"}
{"signature": "var mutability =", "body": "false<EOL>"}
{"signature": "val calculatedModifiers =", "body": "modifiers ?: Modifier()<EOL>"}
{"signature": "val originalSequence =", "body": "currentDefinitions.constrainOnce()<EOL>"}
{"signature": "package mockito;<EOL>.", "body": ""}
{"signature": "package names<EOL>.", "body": ""}
{"signature": "package topLevelManglingB<EOL>.", "body": ""}
{"signature": "if (containingVirtualFile == null || FileDocumentManager.getInstance().getDocument(containingVirtualFile) == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val firReturnExpressions =", "body": "mutableListOf<FirReturnExpression>()<EOL>"}
{"signature": "var currentParent =", "body": "parentOrNull() ?: return emptySequence()<EOL>"}
{"signature": "val implClassJava =", "body": "Class.forName(<STR_LIT>)<EOL>"}
{"signature": "if (transformedAnnotationType.coneTypeSafe<ConeClassLikeType>()?.lookupTag?.classId in requiredAnnotationsWithArguments) {", "body": "<EOL><INDENT><INDENT><INDENT>argumentsTransformer.transformAnnotation(annotationCall, ResolutionMode.ContextDependent)<EOL><INDENT><INDENT>}"}
{"signature": "val historyBeforeSnippet =", "body": "history.previousItems(compileResult.lineId).map { it.second }.toList()<EOL>"}
{"signature": "val annotationEntries =", "body": "annotated?.annotationEntries<EOL>"}
{"signature": "val ctorMethod =", "body": "typeMapper.mapToCallableMethod(ctorDesc, false)<EOL>"}
{"signature": "if (isImplicit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.toFirSourceElement(KtFakeSourceElementKind.ImplicitConstructor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (b is Derived<*>) {", "body": "<EOL><INDENT><INDENT>b.foo().<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>num<!>()<EOL><INDENT><INDENT>b.baz().length<EOL><INDENT>}"}
{"signature": "val normalizedDestPath =", "body": "destPath.normalize()<EOL>"}
{"signature": "val objCProtocolClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (!checkNonLocalReturnUsage(descriptor, parameterUsage, context.resolutionContext)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(NON_LOCAL_RETURN_NOT_ALLOWED.on(parameterUsage, parameterUsage))<EOL><INDENT><INDENT>}"}
{"signature": "if (nop?.opcode == Opcodes.NOP) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>requiredNops.add(nop)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val html =", "body": "HTML()<EOL>"}
{"signature": "val scriptDefinitionProviderService =", "body": "session.scriptDefinitionProviderService<EOL>"}
{"signature": "fun shlForLong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, <NUM_LIT>L shl <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, <NUM_LIT>L shl <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val singleGroup =", "body": "groupedMainFunctions.asIterable().singleOrNull() ?: return null<EOL>"}
{"signature": "when (val container = containingDeclaration) {", "body": "<EOL><INDENT><INDENT>is DeserializedClassDescriptor -> (container.source as? KotlinJvmBinarySourceElement)?.binaryClass<EOL><INDENT><INDENT>is LazyJavaPackageFragment -> (container.source as? KotlinJvmBinaryPackageSourceElement)?.getRepresentativeBinaryClass()<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val bytesFormat =", "body": "format.bytes<EOL>"}
{"signature": "val isTopLevelClass =", "body": "!it.classId.isNestedClass<EOL>"}
{"signature": "package OpenInheritedMethodClashedWithOtherInheritedMethod<EOL>.", "body": ""}
{"signature": "if (valueParameters.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return valueParameters[<NUM_LIT>].isStringArrayParameter() && isLoweredSuspendFunction<EOL><INDENT><INDENT>}"}
{"signature": "val controller<NUM_LIT> =", "body": "Controller()<EOL>"}
{"signature": "val entries<NUM_LIT> =", "body": "arrayOf(impls<Intf>(Component<NUM_LIT>::class), clazz<Component<NUM_LIT>>())<EOL>"}
{"signature": "val loopStack =", "body": "mutableListOf<IrLoop>()<EOL>"}
{"signature": "if (collectionSize < array.size) {", "body": "<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>array[collectionSize] = null as T<INDENT> }"}
{"signature": "val accessExternalFileUrl =", "body": "<STR_LIT><EOL>"}
{"signature": "val referenceExpected =", "body": "readLinesReference(text, charset)<EOL>"}
{"signature": "val protectedIsAllowed =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>languageVersionSettings.supportsFeature(LanguageFeature.AllowSealedInheritorsInDifferentFilesOfSamePackage)<EOL>"}
{"signature": "val debuggableChrome =", "body": "<STR_LIT><EOL>"}
{"signature": "fun main(x: Column<Long?>, y: Double) {", "body": "<EOL><INDENT>x <!INFERRED_TYPE_VARIABLE_INTO_EMPTY_INTERSECTION_WARNING!>less<!> y }"}
{"signature": "fun testArrayAssignment<NUM_LIT>(array: Array<Any>) {", "body": "<EOL><INDENT>array[<NUM_LIT>] <!UNREACHABLE_CODE!>=<!> todo()<EOL>}"}
{"signature": "val otherPsi =", "body": "fileSource.psi<EOL>"}
{"signature": "val irAnyConstructor =", "body": "declarationStorage.getIrConstructorSymbol(firAnyConstructor)<EOL>"}
{"signature": "if (!overrideCandidate.hasSameValueParameterTypes(baseDeclaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val superReference =", "body": "(expression.calleeReference as? FirSuperReference)?.takeIf { it.hadExplicitTypeInSource() } ?: return<EOL>"}
{"signature": "val BUILT_INS_NATIVE_DIR_WASM =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "fun function(vararg a: Int) {", "body": "}<EOL><EOL>fun call() {<EOL><INDENT><expr>function(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)</expr><EOL>}"}
{"signature": "val myInstance =", "body": "MyClass()<EOL>"}
{"signature": "else if (isInterface && !isSet(access, Opcodes.ACC_STATIC)) {", "body": "<EOL><INDENT><INDENT>flags = flags or ModifierFlags.DEFAULT_MASK<EOL><INDENT>}"}
{"signature": "fun removeUnstableDanglingFileSessions() {", "body": "<EOL><INDENT><INDENT>removeAllSessionsFrom(unstableDanglingFileSessionCache)<EOL><INDENT>}"}
{"signature": "if (approximateArgumentConeType.isSubtypeOf(approximatedConeKotlinFunctionType, session)) {", "body": "<EOL><INDENT><INDENT><INDENT>return argument<EOL><INDENT><INDENT>}"}
{"signature": "if (source == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (diagnostic is ConeSyntaxDiagnostic) return<EOL><INDENT><INDENT><INDENT>if (diagnostic is ConeSimpleDiagnostic && diagnostic.kind == DiagnosticKind.ExpressionExpected) return<EOL><INDENT><INDENT>}"}
{"signature": "if (cached != null && cached.modificationStamp == fileModificationStamp) {", "body": "<EOL><INDENT><INDENT><INDENT>return cached.javaFileStub<EOL><INDENT><INDENT>}"}
{"signature": "val procEnv =", "body": "roundEnv::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "var sumOuter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val deprecatedJvmInterfaceFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "while (i != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT>}"}
{"signature": "fun serializeProperty(<EOL><INDENT><INDENT>property: FirProperty,<EOL><INDENT><INDENT>proto: ProtoBuf.Property.Builder,<EOL><INDENT><INDENT>versionRequirementTable: MutableVersionRequirementTable?,<EOL><INDENT><INDENT>childSerializer: FirElementSerializer<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "val contractDescription =", "body": "outerContractDescription ?: innerContractDescription<EOL>"}
{"signature": "val dirtyFiles =", "body": "cache.invalidateAndGetDirtyFiles(listOf(TEST_DATA_DIR.resolve(<STR_LIT>).absoluteFile), emptyList(), compiledSources)<EOL>"}
{"signature": "for ((i, _) in a.withIndex()) {", "body": "<EOL><INDENT><INDENT>s += <STR_LIT><EOL><INDENT>}"}
{"signature": "if (now.x != <NUM_LIT> && !field.westWall()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>possibleSteps.add(Coordinate(now.x - <NUM_LIT>, now.y))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (argument is ExpressionValueArgument) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>argumentToInferenceNode(it, argument.valueArgument?.asElement() ?: reportOn)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addFakeOverride(fakeOverride: CallableMemberDescriptor)<EOL><EOL><INDENT>abstract fun overrideConflict(fromSuper: CallableMemberDescriptor, fromCurrent: CallableMemberDescriptor)<EOL><EOL><INDENT>abstract fun inheritanceConflict(first: CallableMemberDescriptor, second: CallableMemberDescriptor)<EOL><EOL><INDENT>open fun setOverriddenDescriptors(member: CallableMemberDescriptor, overridden: Collection<CallableMemberDescriptor>) {", "body": "<EOL><INDENT><INDENT>member.overriddenDescriptors = overridden<EOL><INDENT>}"}
{"signature": "val constructorCallee =", "body": "<EOL><INDENT><INDENT><INDENT>KotlinPlaceHolderStubImpl<KtConstructorCalleeExpression>(annotationEntryStubImpl, KtStubElementTypes.CONSTRUCTOR_CALLEE)<EOL>"}
{"signature": "val sourceMapResult =", "body": "SourceMapParser.parse(it)<EOL>"}
{"signature": "fun testAnnotationWithArrayLiteral() {", "body": "<EOL><INDENT><INDENT>val annotations = annotations(<STR_LIT>, TestAnnotation::class)<EOL><INDENT><INDENT><INDENT>.valueOrThrow()<EOL><INDENT><INDENT><INDENT>.filterIsInstance(TestAnnotation::class.java)<EOL><EOL><INDENT><INDENT>assertEquals(annotations.count(), <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(annotations.first().options.toList(), listOf(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "fun parsePos(fileAndPos: String) {", "body": "<EOL><INDENT><INDENT><INDENT>val fileAndPosComponents = fileAndPos.split(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>fileName = fileAndPosComponents[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT>if (fileAndPosComponents.size > <NUM_LIT>) lineNumber = fileAndPosComponents[<NUM_LIT>].toIntOrNull() ?: <NUM_LIT><EOL><INDENT><INDENT><INDENT>if (fileAndPosComponents.size > <NUM_LIT>) columnNumber = fileAndPosComponents[<NUM_LIT>].toIntOrNull() ?: <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val rY =", "body": "bar(y)<EOL>"}
{"signature": "val shouldBreak =", "body": "dec.recordCapture(value)<EOL>"}
{"signature": "if (!arePartiallySpecifiedTypeArgumentsEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.UNSUPPORTED.on(typeReference, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun reportMarkDirtyMember(affectedFiles: Iterable<File>, scope: String, name: String) {", "body": "<EOL><INDENT><INDENT>reportMarkDirty(affectedFiles, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "while (prevSibling != null && prevSibling !is KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (prevSibling is PsiWhiteSpace && prevSibling.textContains('\\n'))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>prevSibling = prevSibling.prevSibling<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun sortInPlace() {", "body": "<EOL><INDENT><INDENT>val data = listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL><EOL><INDENT><INDENT>val asc = data.toMutableList()<EOL><INDENT><INDENT>asc.sort()<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), asc)<EOL><EOL><INDENT><INDENT>val desc = data.toMutableList()<EOL><INDENT><INDENT>desc.sortDescending()<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), desc)<EOL><INDENT>}"}
{"signature": "val sourceArray =", "body": "source.reinterpret<ShortVar>().ptr<EOL>"}
{"signature": "for (entry in JarFile(jar).entries()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertNotEquals(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, entry.name.substringAfterLast(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val newOffset =", "body": "offset<EOL>"}
{"signature": "for ((calleeSymbol, source) in calleeSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT>checkJsModuleUsage(calleeSymbol, context, reporter, source ?: expression.source)<EOL><INDENT><INDENT>}"}
{"signature": "val artifactVersion =", "body": "artifact.version ?: kotlinPluginVersion<EOL>"}
{"signature": "fun foo(base: Array<out Base>) {", "body": "<EOL><INDENT>result = base[<NUM_LIT>].name<EOL>}"}
{"signature": "val konanPropertiesBuildService =", "body": "KonanPropertiesBuildService.registerIfAbsent(project)<EOL>"}
{"signature": "val javaMethod =", "body": "f.javaMethod<EOL>"}
{"signature": "val markerFile =", "body": "File(snapshotsDir.get().asFile, index.asNotExistsMarkerFile)<EOL>"}
{"signature": "for (insn in suspension.unboxInlineClassInstructions) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>insn.accept(this)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun moveAllMyDataTo(trace: BindingTrace) {", "body": "<EOL><INDENT><INDENT>addOwnDataTo(trace, null, true)<EOL><INDENT><INDENT>clear()<EOL><INDENT>}"}
{"signature": "fun interpretField(field: IrField) {", "body": "<EOL><INDENT><INDENT>val irClass = field.parentAsClass<EOL><INDENT><INDENT>val receiver = irClass.thisReceiver!!.symbol<EOL><INDENT><INDENT>val receiverState = callStack.loadState(receiver)<EOL><INDENT><INDENT>receiverState.setField(field.correspondingPropertySymbol!!, callStack.popState())<EOL><INDENT>}"}
{"signature": "val firstParentVar =", "body": "extractIndex(element.parents[i].origin)<EOL>"}
{"signature": "val updater =", "body": "LocalClass()<EOL>"}
{"signature": "if (state is ResolutionState.Installed) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Unit<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (j in <NUM_LIT> downTo continue) {", "body": "}"}
{"signature": "when (a::class) {", "body": "<EOL><INDENT>String::class -> <STR_LIT><EOL><INDENT>Int::class -> <STR_LIT><EOL><INDENT>Boolean::class -> <STR_LIT><EOL><INDENT>else -> <STR_LIT><EOL>}"}
{"signature": "val superContinuation =", "body": "superConstructor.valueParameters.single()<EOL>"}
{"signature": "val externRefToKotlinIntAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "for ((file, fileScope) in filesToScope) {", "body": "<EOL><INDENT><INDENT><INDENT>annotationResolver.resolveAnnotationsWithArguments(fileScope, file.annotationEntries, trace)<EOL><INDENT><INDENT><INDENT>annotationResolver.resolveAnnotationsWithArguments(fileScope, file.danglingAnnotations, trace)<EOL><INDENT><INDENT>}"}
{"signature": "if (localizedUppercase.length > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return if (this == '\\u<NUM_LIT>') localizedUppercase else localizedUppercase[<NUM_LIT>] + localizedUppercase.substring(<NUM_LIT>).lowercase()<EOL><INDENT>}"}
{"signature": "fun registerClass(lightClass: PsiClass) {", "body": "<EOL><INDENT><INDENT>register(lightClass, lightClass.qualifiedNameWithSlashes)<EOL><INDENT>}"}
{"signature": "if (elementGraph in data) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>element.acceptChildren(this, elementGraph.subGraphs.toSet())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val CALL_REF =", "body": "<STR_LIT><EOL>"}
{"signature": "val cHashCode =", "body": "C().hashCode()"}
{"signature": "val metricContainer =", "body": "stringMetrics[MetricDescriptor(metric.name, projectHash)] ?: metric.type.newMetricContainer()<EOL>"}
{"signature": "fun publicFun() {", "body": "}<INDENT> public actual fun internalFun() {}"}
{"signature": "fun foo(p<NUM_LIT> : Any) {", "body": "<EOL><INDENT>val s = p<caret><NUM_LIT> as String<EOL>}"}
{"signature": "val COMMONJS_MODULE =", "body": "<STR_LIT><EOL>"}
{"signature": "val basePrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "if (convertedText is Float) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>buildConstOrErrorExpression(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>sourceElement,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ConstantValueKind.Float,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>convertedText,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ConeSimpleDiagnostic(<STR_LIT>, DiagnosticKind.FloatLiteralOutOfRange)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val targetPsiFile =", "body": "targetModule.file<EOL>"}
{"signature": "for (fileRoot in file) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>library.addRoot(fileRoot, JpsOrderRootType.COMPILED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val delegated =", "body": "<STR_LIT><EOL>"}
{"signature": "var processedLines =", "body": "lines.map { it.drop(minIndent) }<EOL>"}
{"signature": "if (ownerRegularOrAnonymousObjectSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT>dispatchReceiver = thisRef(forDispatchReceiver = true)<EOL><INDENT><INDENT>}"}
{"signature": "val enumEntries =", "body": "getIrClass(FqName.fromSegments(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)))<EOL>"}
{"signature": "if (currentException != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>completion.resumeWithException(currentException!!)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitContinue(x: JsContinue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>invalidateTemporaries()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val operandVariable =", "body": "getOrCreateVariableIfRealAndStable(flow, operand) ?: return<EOL>"}
{"signature": "if (old.getExtensionCount(BuiltInsProtoBuf.propertyGetterAnnotation) != new.getExtensionCount(BuiltInsProtoBuf.propertyGetterAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (annotationClassSymbol.getAnnotationByClassId(OptInNames.REQUIRES_OPT_IN_CLASS_ID, session) == null) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "for (property in script.declarations.filterIsInstance<KtProperty>()) {", "body": "<EOL><INDENT><INDENT><INDENT>membersBuilder<EOL><INDENT><INDENT><INDENT><INDENT>.createPropertyField(property, usedNames, forceStatic = false)<EOL><INDENT><INDENT><INDENT><INDENT>?.let(result::add)<EOL><INDENT><INDENT>}"}
{"signature": "if (node.value == value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val deprecatedSinceAnnotationPsi =", "body": "deprecatedSinceAnnotation.source.getPsi() as? KtAnnotationEntry ?: return<EOL>"}
{"signature": "val argvPtr =", "body": "allocator.allocate(argumentNumber * Int.SIZE_BYTES)<EOL>"}
{"signature": "fun testTotalKotlinOnlyPsi() {", "body": "<EOL><INDENT><INDENT>totalKotlinPsi(true)<EOL><INDENT>}"}
{"signature": "for (x in FloatArray(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>if (x != <NUM_LIT>toFloat()) return <STR_LIT><EOL><INDENT>}"}
{"signature": "val DEPRECATED_ANNOTATION_MESSAGE =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val runManagerComponent =", "body": "rootElement.getOrCreateChild(<STR_LIT>, <STR_LIT> to <STR_LIT>)<EOL>"}
{"signature": "if (opReturnType == PrimitiveType.DOUBLE || opReturnType == PrimitiveType.FLOAT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (var i = <NUM_LIT>; i < str.length; i++) {", "body": "<EOL><INDENT><INDENT>var code  = str.charCodeAt(i);<EOL><INDENT><INDENT>hash  = (hash * <NUM_LIT> + code) | <NUM_LIT>;<EOL><INDENT>}"}
{"signature": "val rpcProfiler =", "body": "if (daemonOptions.reportPerf) WallAndThreadTotalProfiler() else DummyProfiler()<EOL>"}
{"signature": "for (i in 'f' downTo it) {", "body": "sb.append(i) }"}
{"signature": "if (!hasTailCalls && subroutine is KtNamedFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(Errors.NO_TAIL_CALLS_FOUND.on(subroutine))<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.<NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "val dependencyNotation =", "body": "<EOL><INDENT><INDENT><INDENT>if (isPublishedLibrary)<EOL>"}
{"signature": "if (result == stop) {", "body": "<EOL><INDENT><INDENT>return result<EOL><INDENT>}"}
{"signature": "if (platformOverloadsSpecificityComparator.isMoreSpecificShape(call<NUM_LIT>candidateDescriptor(), call<NUM_LIT>candidateDescriptor())) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val compilationFactory =", "body": "TestCompilationFactory()<EOL>"}
{"signature": "fun parseException(e: ParseException, text: String) {", "body": "<EOL><INDENT><INDENT>log.error(<STR_LIT>$text\\<STR_LIT>, e)<EOL><INDENT>}"}
{"signature": "val reversedCastEdges =", "body": "from.reversedCastEdges<EOL>"}
{"signature": "val CONFIG_OPTION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val cacheFiles =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "val scopesBeforeBeforeSnapshot =", "body": "scopesBefore<EOL>"}
{"signature": "if (c.output().mark != mark && c.inputsKnown(mark)) {", "body": "<EOL><INDENT><INDENT>plan.addConstraint(c)<EOL><INDENT><INDENT>c.output().mark = mark<EOL><INDENT><INDENT>addConstraintsConsumingTo(c.output(), todo)<EOL><INDENT>  }"}
{"signature": "if (functionDescriptor.isBuiltinAlwaysEnabledAssertWithLambda()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>v.load(<NUM_LIT>, Type.getObjectType(LAMBDA_INTERNAL_NAME))<EOL><INDENT><INDENT>v.invokeinterface(LAMBDA_INTERNAL_NAME, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>v.store(<NUM_LIT>, AsmTypes.OBJECT_TYPE)<EOL><INDENT><INDENT>v.anew(Type.getObjectType(ASSERTION_ERROR_INTERNAL_NAME))<EOL><INDENT><INDENT>v.dup()<EOL><INDENT><INDENT>v.load(<NUM_LIT>, AsmTypes.OBJECT_TYPE)<EOL><INDENT><INDENT>v.invokespecial(ASSERTION_ERROR_INTERNAL_NAME, <STR_LIT>, <STR_LIT>, false)<EOL><INDENT>}"}
{"signature": "val everyType =", "body": "listOf(classMd, fileFacadeMd, lambdaMd, multiFileFacadeMd, multiFilePartMd, unknown)<EOL>"}
{"signature": "fun usage(foo: <expr>dependency.Foo</expr>.Bar) {", "body": "}<EOL><EOL>package dependency<EOL><EOL>class Foo {<EOL><INDENT>class Bar<EOL>}"}
{"signature": "val overriddenDeclaration =", "body": "overriddenSymbol.owner as? IrOverridableDeclaration<*> ?: continue<EOL>"}
{"signature": "package override<EOL>.", "body": ""}
{"signature": "val testDeclaration =", "body": "testKtFile.declarations.last() as KtCallableDeclaration<EOL>"}
{"signature": "val number<NUM_LIT> =", "body": "first(notNullableNumbersNullableArray() ?: materializeArray())<EOL>"}
{"signature": "if (insertAdditionalImplicitCasts && this is IrTypeOperatorCall && this.operator == IrTypeOperator.IMPLICIT_CAST) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return this.argument.unwrapAdditionalImplicitCastsIfNeeded()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (methodHandlerIndex == it.`var`) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@takeWhile it.opcode == Opcodes.ALOAD<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val returnTarget =", "body": "getReturnExpressionTarget(expression)<EOL>"}
{"signature": "val memberAt =", "body": "accessor.getAnnotation(RuntimeNames.cStructArrayMemberAt)!!<EOL>"}
{"signature": "fun printVariable(isVar: Boolean, name: String, type: IrType) {", "body": "<EOL><INDENT><INDENT>p.printWithNoIndent(if (isVar) <STR_LIT> else <STR_LIT>)<EOL><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT>p.printWithNoIndent(name)<EOL><INDENT><INDENT>p.printWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT>type.printTypeWithNoIndent()<EOL><INDENT>}"}
{"signature": "for (fqName in TYPE_ANNOTATIONS_TO_MERGE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addIfNotNull(other.annotations.findAnnotation(fqName))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import mockito.", "body": "OngoingStubbing<EOL>"}
{"signature": "val FIB_SCRIPT_OUTPUT_TAIL =", "body": "<EOL><INDENT><STR_LIT>\"<EOL>"}
{"signature": "val reportErrorsOnPreReleaseDependencies =", "body": "<EOL><INDENT><INDENT>!skipPrereleaseCheck && !languageVersionSettings.isPreRelease() && !KotlinCompilerVersion.isPreRelease()<EOL>"}
{"signature": "if (f.invoke(args).intValue() != <NUM_LIT> + i) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw new AssertionError(<STR_LIT>);<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val usage =", "body": "LookupNameUsage(symbolOwner, symbolName)<EOL>"}
{"signature": "var unionMembersFlattened =", "body": "unionType.unionMembers<EOL>"}
{"signature": "val reportOnProperty =", "body": "abstractMember.containingDeclaration == descriptor<EOL>"}
{"signature": "if (callableDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>yield(builder.callableBuilder.buildCallableSymbol(callableDeclaration.symbol))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (ignored or ignoredSuite) {", "body": "<EOL><INDENT><INDENT><INDENT>QUnit.skip(name, wrapTest(testFn))<EOL><INDENT><INDENT>}"}
{"signature": "for (s in strings) {", "body": "<EOL><INDENT><INDENT>s.length<EOL><INDENT>}"}
{"signature": "val requiredSymbol =", "body": "getArrayContentEqualsSymbol(type)<EOL>"}
{"signature": "val RETURN =", "body": "<STR_LIT><EOL>"}
{"signature": "val summaryReport =", "body": "SummaryBenchmarksReport(report).getBenchmarksReport()<EOL>"}
{"signature": "package<EOL><INDENT><INDENT><INDENT>classConsumer.", "body": "reset()<EOL>"}
{"signature": "when (locations.first()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is Location.JarFile -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tableHeader(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>is Location.Class -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tableHeader(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>is Location.Method -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tableHeader(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>is Location.Field -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tableHeader(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateDataClassComponentBody(irFunction: IrFunction, klass: FirRegularClass) {", "body": "<EOL><INDENT><INDENT>MyDataClassMethodsGenerator(irFunction.parentAsClass, klass, IrDeclarationOrigin.GENERATED_DATA_CLASS_MEMBER)<EOL><INDENT><INDENT><INDENT>.generateComponentBody(irFunction)<EOL><INDENT>}"}
{"signature": "val revoked =", "body": "<STR_LIT><EOL>"}
{"signature": "if (declaration is IrClass && declaration.isOptionalAnnotationClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declaration.registerOptionalAnnotations()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectType =", "body": "substitutor.safeSubstitute(expectSupertype)<EOL>"}
{"signature": "val renderingContext =", "body": "RenderingContext.Impl(sortedDeclarations)<EOL>"}
{"signature": "val constFromOtherFile =", "body": "<STR_LIT><EOL>"}
{"signature": "val staticMethod =", "body": "getOrCreateStaticMethod(function)<EOL>"}
{"signature": "val ENABLE_X_STDLIB_API =", "body": "<STR_LIT><EOL>"}
{"signature": "val targetPlatform =", "body": "currentModuleTargetPlatform ?: parseModulePlatformByName(moduleName) ?: defaultsProvider.defaultPlatform<EOL>"}
{"signature": "val configFiles =", "body": "EnvironmentConfigFiles.JVM_CONFIG_FILES<EOL>"}
{"signature": "if (typeConstructor.isIntersection()) {", "body": "<EOL><INDENT><INDENT><INDENT>return approximateIntersectionType(type, conf, toSuper, depth)<EOL><INDENT><INDENT>}"}
{"signature": "import J<EOL>.", "body": ""}
{"signature": "val work<NUM_LIT> =", "body": "inlineRun { outerProp + arg }<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>y != null<!>) {", "body": "<EOL><INDENT><INDENT>x<!UNSAFE_CALL!>.<!>length<INDENT><INDENT> y.length<INDENT><INDENT> z<!UNSAFE_CALL!>.<!>length<INDENT> }"}
{"signature": "if (setterImplicitVisibility == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun visit(name: Name?, value: Any?) {", "body": "<EOL><INDENT><INDENT>val constantValue = createConstantValue(value)<EOL><INDENT><INDENT>args[nameOrSpecial(name)] = constantValue<EOL><INDENT>}"}
{"signature": "if (insertBefore >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irClass.file.declarations.add(insertBefore, declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var endOfCentralDirectoryOffset =", "body": "capacity() - END_OF_CENTRAL_DIR_ZIP<NUM_LIT>_SIZE<EOL>"}
{"signature": "val interopObjCRetain =", "body": "interopFunction(<STR_LIT>)<EOL>"}
{"signature": "val currentIsNotFirstWasmExportCall =", "body": "isNotFirstWasmExportCall<EOL>"}
{"signature": "val purgeUserLibs =", "body": "arguments.purgeUserLibs<EOL>"}
{"signature": "val requestClassId =", "body": "ClassId(ownerDescriptor.fqName, request.name)<EOL>"}
{"signature": "if (apiVersion != null && apiVersion > specified) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.NEWER_VERSION_IN_SINCE_KOTLIN.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>annotation.source.getPsi() ?: declaration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>specified.versionString<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val operationReference =", "body": "psi.operationReference<EOL>"}
{"signature": "val containerKotlinType =", "body": "container.defaultType<EOL>"}
{"signature": "for ((componentIndex, entry) in destructuringDeclaration.entries.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>val componentType = resolveInitializer(entry, receiver, initializer, context, componentIndex)<EOL><INDENT><INDENT><INDENT>val variableDescriptor =<EOL><INDENT><INDENT><INDENT><INDENT>localVariableResolver.resolveLocalVariableDescriptorWithType(scope, entry, componentType, context.trace)<EOL><EOL><INDENT><INDENT><INDENT>result.add(variableDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val nestedClass =", "body": "memberScope.getContributedClassifier(extensionFunction.name, NoLookupLocation.WHEN_CHECK_DECLARATION_CONFLICTS)<EOL>"}
{"signature": "val mod =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.mod(<NUM_LIT>u)<!><EOL>"}
{"signature": "if (!isTypeSupportedInJsInterop(upperBound, isInFunctionReturnPosition = false)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val reportOn = this.findPsi() ?: declaration<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsWasm.WRONG_JS_INTEROP_TYPE.on(reportOn, <STR_LIT>, upperBound))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val enclosing =", "body": "y.javaClass.getEnclosingMethod()<EOL>"}
{"signature": "fun visitCase(x: JsCase) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>visitStatements(x.statements)<EOL><INDENT><INDENT><INDENT><INDENT>super.visitCase(x)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (deprecatedAnnotation.argumentValue(Deprecated::level.name) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.DEPRECATED_SINCE_KOTLIN_WITH_DEPRECATED_LEVEL.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deprecatedSinceAnnotationName<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "import diff.", "body": "Base;<EOL>"}
{"signature": "for (i in -range.toLong()..range.toLong()) {", "body": "<EOL><INDENT><INDENT>acc += areSame(i, i).oneIfTrueElseZero()<EOL><INDENT>}"}
{"signature": "else if (candidateDescriptor is FakeCallableDescriptorForObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nestedClass = candidateDescriptor.getReferencedObject()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (checker in configuration.enabledModuleMetadataCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.check(metadata<NUM_LIT>, metadata<NUM_LIT>, report)<EOL><INDENT><INDENT>}"}
{"signature": "val bResult =", "body": "b.foo(x) + b.foo(y)<EOL>"}
{"signature": "fun testOutputNotOverwritten() {", "body": "<EOL><INDENT><INDENT>assertFalse(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>OVERWRITE_EXPECTED_OUTPUT<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val sourceFilesForMetaFile =", "body": "ArrayList(sourceFiles)<EOL>"}
{"signature": "val v<NUM_LIT>StyleInstrumentedTest =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val bundleId =", "body": "computeBundleID(name, mainPackageGuesser, moduleDescriptor)<EOL>"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {", "body": "<EOL><INDENT><INDENT>prop = value<EOL><INDENT>}"}
{"signature": "if (currentException == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this.result = currentResult<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun objCExportTestStatic() {", "body": "<EOL><INDENT><INDENT>objCExportTestImpl(<STR_LIT>, listOf(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>   listOf(<STR_LIT>, <STR_LIT>), true, false)<EOL><INDENT>}"}
{"signature": "val targetOffset =", "body": "target.typeParameters.size - passedTypeParametersSize<EOL>"}
{"signature": "fun testLookupStorageAddAllReversedFiles() {", "body": "<EOL><INDENT><INDENT>val originalRoot = workingDir.resolve(<STR_LIT>)<EOL><INDENT><INDENT>fillLookupStorage(originalRoot, reverseFiles = false, reverseLookups = false)<EOL><INDENT><INDENT>val reversedFilesOrderRoot = workingDir.resolve(<STR_LIT>)<EOL><INDENT><INDENT>fillLookupStorage(reversedFilesOrderRoot, reverseFiles = true, reverseLookups = false)<EOL><INDENT><INDENT>assertEqualDirectories(originalRoot, reversedFilesOrderRoot, forgiveExtraFiles = false)<EOL><INDENT>}"}
{"signature": "val resolutionStrategy =", "body": "KotlinTargetResourcesResolutionStrategy.ResourcesConfiguration<EOL>"}
{"signature": "val currentCatchesLV =", "body": "BitSet()"}
{"signature": "if (classSymbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>firRegularClassesSet.add(classSymbol)<EOL><INDENT><INDENT><INDENT><INDENT>firTypeRefClasses.add(Pair(bound, classSymbol))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONFIGURATION_BUILD_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(name: Name) {", "body": "<EOL><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "fun setFst(v: Int) {", "body": "fst = v }"}
{"signature": "if (names == null || names.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>throw Exception(<STR_LIT>$this\\<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (nextIndex < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TYPE_VARIABLE_NAME_FOR_CR_RETURN_TYPE =", "body": "<STR_LIT><EOL>"}
{"signature": "import <Foundation/NSDate.", "body": "h><EOL>"}
{"signature": "val resultProvider =", "body": "project.tasks.register(name, type, *constructorArgs.toTypedArray())<EOL>"}
{"signature": "fun foo(x: Array<Int>, : Int, w: Int) {", "body": "}<EOL>fun bar(x: Array<Int> : Int, w: Int) {}"}
{"signature": "val referencesToImportedDeclarations =", "body": "jsModuleAndQualifierReferences<EOL>"}
{"signature": "val bazVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in array.size + <NUM_LIT> downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>array[i] = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "for (parameter in declaration.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT>noError = noError and parameter.typeReference?.checkTypePosition(trace, IN_VARIANCE)<EOL><INDENT><INDENT>}"}
{"signature": "val scopeDeclaration =", "body": "DescriptorToSourceUtils.descriptorToDeclaration(scopeContainer)<EOL>"}
{"signature": "val properForInArraySemantics =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>state.languageVersionSettings.supportsFeature(LanguageFeature.ProperForInArrayLoopRangeVariableAssignmentSemantic)<EOL>"}
{"signature": "if (!qualifiedName.isNullOrNotNullQualifiedName) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun test(z: Z) {", "body": "<EOL><INDENT>z <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>foo<!> <!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>newA<!>()<EOL><INDENT>val a: A<Int> = id(z foo newA())<EOL><INDENT>val b: A<Int> = id(z.foo(newA()))<EOL><INDENT>use(a, b)<EOL>}"}
{"signature": "val typeArgumentProjection =", "body": "typeArguments.elementAt(index)<EOL>"}
{"signature": "if (call is FirFunctionCall) {", "body": "<EOL><INDENT><INDENT><INDENT>call.replaceLambdaArgumentInvocationKinds(session)<EOL><INDENT><INDENT>}"}
{"signature": "val argFile =", "body": "Files.createTempFile( <STR_LIT>,  <STR_LIT>).toFile().apply { deleteOnExit() }<EOL>"}
{"signature": "val blockParents =", "body": "hashMapOf<JsBlock, JsBlock>()<EOL>"}
{"signature": "fun serialize(stub: KotlinPlaceHolderWithTextStub<T>, dataStream: StubOutputStream) {", "body": "<EOL><INDENT><INDENT>dataStream.writeUTFFast(stub.text())<EOL><INDENT>}"}
{"signature": "val test_bnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === b<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>b !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== b<!><EOL>"}
{"signature": "val positiveRegexes =", "body": "positivePatterns.map(::fromGTestPattern)<EOL>"}
{"signature": "val cReturnValue =", "body": "CVariable(cType, result)<EOL>"}
{"signature": "var context =", "body": "codegen.getContext()<EOL>"}
{"signature": "fun replaceCalleeReference(newCalleeReference: FirNamedReference) {", "body": "<EOL><INDENT><INDENT>calleeReference = newCalleeReference<EOL><INDENT>}"}
{"signature": "val FAIL_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val propertyStack =", "body": "mutableListOf<Pair<IrProperty, FirProperty?>>()<EOL>"}
{"signature": "val scopesToAdd =", "body": "mutableListOf<FirScope>()<EOL>"}
{"signature": "var expectedArgumentVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "val suspendFunctionType =", "body": "if (referencedFunction.isSuspend || isSuspendConversion) suspendFunctionInterface?.defaultType else null<EOL>"}
{"signature": "fun beforeCallStart() {", "body": "}<EOL><EOL><INDENT>fun afterCallEnd() {}"}
{"signature": "if (!!!!!p) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val partB =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JsInvocation(JsNameRef(shouldEncodeFunc, localOutputRef), serialClassDescRef, JsIntLiteral(index))<EOL>"}
{"signature": "if (lines.size > maxLines) {", "body": "<EOL><INDENT><INDENT>appendLine(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(d: Double) {", "body": "<EOL><INDENT>val x<NUM_LIT> = <NUM_LIT> + d<EOL><INDENT>val x<NUM_LIT> = d + <NUM_LIT><EOL>}"}
{"signature": "val instr =", "body": "if (onTrue) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "var hasAbstract =", "body": "false<EOL>"}
{"signature": "val jvmCompilationConfig =", "body": "compilationService.makeJvmCompilationConfiguration()<EOL>"}
{"signature": "if (expression.statements.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT>}"}
{"signature": "fun exec(): Int<EOL><INDENT>class Plus(left: Int, right: Int): Operation(left, right) {", "body": "<EOL><INDENT><INDENT>override fun exec(): Int = left + right<EOL><INDENT>}"}
{"signature": "val validationFunction =", "body": "secondFeature.config.validationTransformer<EOL>"}
{"signature": "fun visitChildren(visitor: Visitor) {", "body": "<EOL><INDENT><INDENT>walk(type.parameters, visitor)<EOL><INDENT><INDENT>walk(body, visitor)<EOL><INDENT>}"}
{"signature": "val constraintContext =", "body": "ConstraintContext(kind, derivedFrom, inputTypePosition, isNullabilityConstraint)<EOL>"}
{"signature": "if (excludeShadowedByDslMarkers) {", "body": "<EOL><INDENT><INDENT><INDENT>allReceivers - allReceivers.shadowedByDslMarkers()<EOL><INDENT><INDENT>}"}
{"signature": "if (versionKind != defaultInstanceForType.versionKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this.versionKind = versionKind<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val irConstructorSymbol =", "body": "symbolTable.descriptorExtension.referenceConstructor(it)<EOL>"}
{"signature": "val specs =", "body": "this@Module.onlyIf<EOL>"}
{"signature": "val badClasses =", "body": "linkedMapOf<Class<*>, Collection<Field>>()<EOL>"}
{"signature": "val customArrayToList =", "body": "<!EVALUATED: `Some other value`!>arrayOf(<NUM_LIT>, <STR_LIT>, <NUM_LIT>, <STR_LIT>).toList()[<NUM_LIT>] as String<!><EOL>"}
{"signature": "if (main != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val mainFile = dir.resolve(main)<EOL><INDENT><INDENT><INDENT>resolveAsFile(mainFile)<EOL><INDENT><INDENT><INDENT><INDENT>?: resolveIndex(mainFile)<EOL><INDENT><INDENT>}"}
{"signature": "if (JsAstUtils.isUndefinedExpression(arg)) {", "body": "<EOL><INDENT><INDENT><INDENT>defaultParams += param<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "if (receiver.isTrivial()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return this<EOL><INDENT>}"}
{"signature": "fun setStrongReference(value: VALUE, currentTimePeriod: Int) {", "body": "<EOL><INDENT><INDENT>strongRef = value<EOL><INDENT><INDENT>softRef = null<EOL><INDENT><INDENT>lastUsed = currentTimePeriod<EOL><INDENT>}"}
{"signature": "if (!argsBeforeVararg!!.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>concatArguments!!.add(<NUM_LIT>, toArray(null, argsBeforeVararg))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(a: C<Y, Y, Y>) {", "body": "<EOL><INDENT><INDENT>val d: D<X, Y, Y> = <!TYPE_MISMATCH, TYPE_MISMATCH!>D(a)<!><EOL><INDENT>}"}
{"signature": "if (specifierList.entries.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>EditCommaSeparatedListHelper.removeItem<KtElement>(superTypeListEntry)<EOL><INDENT><INDENT>}"}
{"signature": "val crossPlatformLineBreak =", "body": "Pattern.compile(<STR_LIT><STR_LIT><STR_LIT>)<EOL>"}
{"signature": "val newFakeLoops =", "body": "HashSet<JsDoWhile>()<EOL>"}
{"signature": "fun TestIdenticalInternalVisibilityReverse() {", "body": "}<EOL><EOL>class TestDifferencesInPrivateAndPublicVisibilitiesA {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) private constructor()<EOL>}"}
{"signature": "val JAVA_TEST_FIXTURES_PLUGIN_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "val errorMessage =", "body": "renderFileReadingErrorMessage(file)<EOL>"}
{"signature": "val cond =", "body": "<NUM_LIT><EOL>"}
{"signature": "val excludedDeclarations =", "body": "mutableMapOf<FqName, IrPackageFragment>()<EOL>"}
{"signature": "val loopScope =", "body": "LoopScope(loop)<EOL>"}
{"signature": "val BUILDER_ID =", "body": "ClassId.topLevel(BUILDER)<EOL>"}
{"signature": "val copied =", "body": "declaration.copyWithName(newName) as IrSimpleFunction<EOL>"}
{"signature": "if (declaration is FirFunction && !context.isRenamableFunction(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(jvmName.source, FirJvmErrors.INAPPLICABLE_JVM_NAME, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun writeVoidReturn(sw: JvmSignatureWriter) {", "body": "<EOL><INDENT><INDENT><INDENT>sw.writeReturnType()<EOL><INDENT><INDENT><INDENT>sw.writeAsmType(Type.VOID_TYPE)<EOL><INDENT><INDENT><INDENT>sw.writeReturnTypeEnd()<EOL><INDENT><INDENT>}"}
{"signature": "val supportFragmentDescriptor =", "body": "find(AndroidConst.ANDROIDX_SUPPORT_FRAGMENT_FQNAME) ?: find(AndroidConst.SUPPORT_FRAGMENT_FQNAME)<EOL>"}
{"signature": "for (i in (<NUM_LIT> until size)) {", "body": "<EOL><INDENT><INDENT><INDENT>val element: Int? = (<NUM_LIT> until size).random()<EOL><INDENT><INDENT><INDENT>array[i] = element<EOL><INDENT><INDENT>}"}
{"signature": "fun removeRouteById(id: UInt) {", "body": "<EOL><INDENT><INDENT>graph.removeEdge(id)<EOL><INDENT>}"}
{"signature": "val accessorMethodsToRemove =", "body": "HashSet<FunctionDescriptor>()<EOL>"}
{"signature": "if (typeArgumentProto.projection == ProtoBuf.Type.Argument.Projection.STAR) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (parameter == null)<EOL><INDENT><INDENT><INDENT><INDENT>StarProjectionForAbsentTypeParameter(c.components.moduleDescriptor.builtIns)<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>StarProjectionImpl(parameter)<EOL><INDENT><INDENT>}"}
{"signature": "var numDefaults =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun doRun(f: () -> Unit) {", "body": "}<EOL><EOL>inline var lambdaVarProperty: () -> Unit<EOL><INDENT>get() = {}"}
{"signature": "val declaredProperty =", "body": "defaultImpls.getDeclaredMethod(<STR_LIT>, A::class.java, Any::class.java)<EOL>"}
{"signature": "val propB =", "body": "B.id.textView<EOL>"}
{"signature": "val topLevelAnon =", "body": "<!ANONYMOUS_OBJECTS_NOT_SUPPORTED!>@Serializable<!> object {}<EOL>"}
{"signature": "import Klass.", "body": "Nested<EOL>"}
{"signature": "if (!value.type.isNullable()) {", "body": "<EOL><INDENT>block(value) }"}
{"signature": "fun execute(details: CompatibilityCheckDetails<String>) {", "body": "<EOL><INDENT><INDENT><INDENT>details.compatible()<EOL><INDENT><INDENT>}"}
{"signature": "if (equals(existingEntry, currentEntry)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val stableType =", "body": "argument.receiver.stableType<EOL>"}
{"signature": "fun assert() {", "body": "<EOL>}"}
{"signature": "var local<NUM_LIT> =", "body": "null, local<NUM_LIT> = null ...<EOL>"}
{"signature": "package fragments have a different module descriptor.", "body": "The module descriptors are compared<EOL>"}
{"signature": "for (idx in <NUM_LIT>.name.lastIndex) {", "body": "<EOL><INDENT><INDENT>val c = name[idx]<EOL><INDENT><INDENT>builder.append(c.mangleIfNot(Char::isES<NUM_LIT>IdentifierPart))<EOL><INDENT>}"}
{"signature": "val initializerStatement =", "body": "builder.at(initValue).irSetField(null, declaration, initValue)<EOL>"}
{"signature": "var currentFrontends =", "body": "listOf(frontendKind)<EOL>"}
{"signature": "val clauseStart =", "body": "markNewLabel()<EOL>"}
{"signature": "val waitingFor =", "body": "waitingList[socketFd]<EOL>"}
{"signature": "if (annotationFqname != null && annotationFqname in JSPECIFY_DEFAULT_ANNOTATIONS) {", "body": "<EOL><INDENT><INDENT><INDENT>return javaTypeEnhancementState.getReportLevelForAnnotation(annotationFqname)<EOL><INDENT><INDENT>}"}
{"signature": "fun nodejs(body: KotlinJsNodeDsl.() -> Unit) {", "body": "<EOL><INDENT><INDENT>body(nodejs)<EOL><INDENT>}"}
{"signature": "if (other is B) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>other.a.baseFun()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val baseBenchmark =", "body": "BenchmarkResult.create(data)<EOL>"}
{"signature": "val reportOn =", "body": "notTrivialBranches.remove(constant)!!<EOL>"}
{"signature": "if (useComposableLambdaN) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(index++, irBuilder.irInt(argumentCount))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testMultipleFrameworksStatic() {", "body": "<EOL><INDENT><INDENT>val checks = TestRunChecks.Default(testRunSettings.get<Timeouts>().executionTimeout)<EOL><INDENT><INDENT>testMultipleFrameworksImpl(<STR_LIT>, listOf(<STR_LIT>, <STR_LIT>), checks)<EOL><INDENT>}"}
{"signature": "val actualizedOriginalSymbol =", "body": "originalSymbol.actualize()<EOL>"}
{"signature": "if (value) {", "body": "<EOL><INDENT><INDENT>throw IllegalStateException()<EOL><INDENT>}"}
{"signature": "var catchScopeCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (ec) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>A -> true<EOL><INDENT><INDENT><INDENT><INDENT>B -> false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var invalidUrl =", "body": "false<EOL>"}
{"signature": "val innerLambda =", "body": "C().f.javaClass<EOL>"}
{"signature": "if (facade.hasLookupTracker()) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.register(LookupTracker::class.java, RemoteLookupTrackerClient(facade, eventManager, rpcProfiler))<EOL><INDENT><INDENT>}"}
{"signature": "val instanceOfClass =", "body": "instanceClass.getDeclaredConstructor().newInstance()<EOL>"}
{"signature": "val addresses =", "body": "readKlibDeclarationAddresses(providedTestProjectKlib) ?: fail(<STR_LIT>)<EOL>"}
{"signature": "fun set(key: LookupSymbolKey, fileIds: Set<Int>) {", "body": "<EOL><INDENT><INDENT>recordSet(key)<EOL><INDENT><INDENT>lookupMap[key] = fileIds<EOL><INDENT>}"}
{"signature": "if (isRaw) {", "body": "<EOL><INDENT><INDENT><INDENT>RawTypeImpl(lower, upper)<EOL><INDENT><INDENT>}"}
{"signature": "val statBuf =", "body": "nativeHeap.alloc<stat>()<EOL>"}
{"signature": "if (isVersioned(virtualFile)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun matchIgnoreCase() {", "body": "<EOL><INDENT><INDENT>for (input in listOf(<STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>assertTrue(input.uppercase().matches(input.lowercase().toRegex(RegexOption.IGNORE_CASE)))<EOL><INDENT>}"}
{"signature": "val NonExistent =", "body": "<STR_LIT><EOL>"}
{"signature": "if (a is Nothing?) {", "body": "<EOL><INDENT><INDENT>val b = a?.length<EOL><INDENT>}"}
{"signature": "if (insn.opcode in Opcodes.IRETURN..Opcodes.RETURN) {", "body": "<EOL><INDENT><INDENT><INDENT>target.node.instructions.set(insn, JumpInsnNode(Opcodes.GOTO, returnLabel))<EOL><INDENT><INDENT>}"}
{"signature": "val commonToolOptions =", "body": "generateKotlinCommonToolOptions(apiSrcDir, withPrinterToFile)<EOL>"}
{"signature": "if (deprecatedOverrideOfHidden) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.deprecatedOverrideOfHidden = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFailure(failure: Failure?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ok = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>System.out.flush()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>failure?.exception?.printStackTrace()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>System.err.flush()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (it == ' ' || it == '-') {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val NO_INFER_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val listToAdd =", "body": "if (isInclude) includesClassMethods else excludesClassMethods<EOL>"}
{"signature": "if (!node.java.isInterface && !Modifier.isAbstract(node.java.modifiers)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertNodeContainsSerialVersionUID(node)<EOL><INDENT><INDENT>}"}
{"signature": "val lastSubjectVariable =", "body": "conversionScope.lastWhenSubject()<EOL>"}
{"signature": "fun visit(version: Int, access: Int, name: String?, signature: String?, superName: String?, interfaces: Array<out String>?) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visit(version, access, name, signature, superName, interfaces)<EOL><INDENT><INDENT><INDENT>fqname = name<EOL><INDENT><INDENT>}"}
{"signature": "fun extraTargets(vararg targets: KotlinTarget) {", "body": "<EOL><INDENT><INDENT><INDENT>canBeSubstituted = targets.toList()<EOL><INDENT><INDENT>}"}
{"signature": "val impactingClassesResolver =", "body": "AllImpacts.getReverseResolver(allClasses)<EOL>"}
{"signature": "val sizeConstructor =", "body": "arrayInlineToSizeConstructor(context, expression.symbol.owner)<EOL>"}
{"signature": "val normalized =", "body": "(num - min) / rangeDiff<EOL>"}
{"signature": "val sourceBytes =", "body": "allocArrayOf(sourceByteArray)<EOL>"}
{"signature": "val callableReference =", "body": "argumentExpression.statements.lastOrNull() as? KtCallableReferenceExpression ?: return<EOL>"}
{"signature": "val DATA_CONTAINER_VERSION_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testCompare(uv<NUM_LIT>: ULong, uv<NUM_LIT>: ULong, expected<NUM_LIT>: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>testComparison(uv<NUM_LIT>, uv<NUM_LIT>, expected<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>testComparison(uv<NUM_LIT>, uv<NUM_LIT>, -expected<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val enumMissingCases =", "body": "WhenChecker.getEnumMissingCases(element, context, enumClassDescriptor)<EOL>"}
{"signature": "package directives are written in the way to work without renaming.", "body": "<EOL>"}
{"signature": "val initialStorage =", "body": "constraintSystemBuilder.currentStorage()<EOL>"}
{"signature": "val primitiveClassesObject =", "body": "context.intrinsics.primitiveClassesObject<EOL>"}
{"signature": "if (DescriptorUtils.isLocal(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.LOCAL_JVM_RECORD.on(reportOn))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val checkedTypeInfo =", "body": "components.dataFlowAnalyzer.checkType(typeInfo, expression, newContext.replaceExpectedType(booleanType))<EOL>"}
{"signature": "val setMethod =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in x!!) {", "body": "<EOL><INDENT><INDENT>x = null<EOL><INDENT><INDENT>break<EOL><EOL><INDENT>}"}
{"signature": "if (declaration is IrSimpleFunction && declaration.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT>return transformSuspendFunction(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinJsLibOutput =", "body": "File(workDir, <STR_LIT>).path<EOL>"}
{"signature": "val jvmArguments =", "body": "daemonJVMOptions.mappers.flatMap { it.toArgs(<STR_LIT>) }<EOL>"}
{"signature": "val buildAndProjectPath =", "body": "segments.dropLast(<NUM_LIT>).joinToString(<STR_LIT>).split(<STR_LIT>, limit = <NUM_LIT>)<EOL>"}
{"signature": "package fragment provider<EOL>.", "body": ""}
{"signature": "var ok_ =", "body": "<STR_LIT><EOL>"}
{"signature": "var args =", "body": "arrayOf(pathContext.url(sourceRoot.directory))<EOL>"}
{"signature": "val firstLine =", "body": "info.node.node.instructions.asSequence().mapNotNull { it as? LineNumberNode }.firstOrNull()?.line ?: <NUM_LIT><EOL>"}
{"signature": "val intToLong =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val compiledClassesManager =", "body": "testServices.compiledClassesManager<EOL>"}
{"signature": "val buildNeeded =", "body": "project.tasks.named(JavaBasePlugin.BUILD_NEEDED_TASK_NAME)<EOL>"}
{"signature": "var filesCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (!context.isTopLevel) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotation.source, FirWasmErrors.NESTED_WASM_IMPORT, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun a(href: String, init: A.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val a = initTag(A(), init)<EOL><INDENT><INDENT>a.href = href<EOL><INDENT>}"}
{"signature": "if (properties.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val commandReader =", "body": "ConsoleReplCommandReader()<EOL>"}
{"signature": "val nextComma =", "body": "restParams.indexOf(',', startIndex = close)<EOL>"}
{"signature": "val stdSer =", "body": "findStandardKotlinTypeSerializer(module, kType)"}
{"signature": "val labelTargets =", "body": "getLabelTargets(ref, context)<EOL>"}
{"signature": "if (context.config.target.family == Family.ANDROID && context.config.produce == CompilerOutputKind.PROGRAM) {", "body": "<EOL><INDENT><INDENT><INDENT>val configuration = context.config.configuration<EOL><INDENT><INDENT><INDENT>val programType = configuration.get(BinaryOptions.androidProgramType) ?: AndroidProgramType.Default<EOL><INDENT><INDENT><INDENT>overrideRuntimeGlobal(<STR_LIT>, llvm.constInt<NUM_LIT>(if (programType.consolePrintsToLogcat) <NUM_LIT> else <NUM_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (scheduleNextTaskAfter == null) {", "body": "<EOL><INDENT><INDENT><INDENT>block()<EOL><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(t: T?) {", "body": "<EOL><INDENT>t<!UNSAFE_CALL!>.<!><!FUNCTION_EXPECTED!>f<!>(<NUM_LIT>)<INDENT> t?.<!UNSAFE_IMPLICIT_INVOKE_CALL!>f<!>(<NUM_LIT>)<EOL><INDENT>t<!UNSAFE_CALL!>.<!>f?.invoke(<NUM_LIT>)<EOL><INDENT>t?.f?.invoke(<NUM_LIT>)<EOL>}"}
{"signature": "if (!visitedSymbols.add(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Usable<INDENT><INDENT> }"}
{"signature": "if (resolvedVariant !in platformCompilationsByResolvedVariantName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>platformCompilationsByResolvedVariantName[resolvedVariant] = platformCompilationData<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val callWithAllArgs =", "body": "expression.shallowCopy()"}
{"signature": "val opResolvedCall =", "body": "getResolvedCall(ktExpression)!!<EOL>"}
{"signature": "val appendableCollectionExternalizer =", "body": "AppendableCollectionExternalizer(elementExternalizer)<EOL>"}
{"signature": "val intersectionContext =", "body": "<EOL><INDENT><INDENT>FirTypeIntersectionScopeContext(session, overrideChecker, scopes, dispatchReceiverType, forClassUseSiteScope = false)<EOL>"}
{"signature": "var person =", "body": "realm.where(Person::class.java).findFirst() ?: error(<STR_LIT>)<EOL>"}
{"signature": "fun skipTest(testName: String) {", "body": "<EOL><INDENT><INDENT>teamcityReport(<STR_LIT>)<EOL><INDENT><INDENT>teamcityFinish(testName)<EOL><INDENT>}"}
{"signature": "if (proto.annotationCount == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>SIMPLE_DYNAMIC_TYPE<EOL><INDENT><INDENT>}"}
{"signature": "var isJava<NUM_LIT>Module =", "body": "false<EOL>"}
{"signature": "val isRawType =", "body": "this is RawType<EOL>"}
{"signature": "if (expectClassSymbol.isFun && !actualClass.isFun && actualClass.isNotSamInterface()) {", "body": "<EOL><INDENT><INDENT><INDENT>return Incompatible.FunInterfaceModifier<EOL><INDENT><INDENT>}"}
{"signature": "if (!path.regionMatches(<NUM_LIT>, prefix, <NUM_LIT>, prefixLength, ignoreCase = !caseSensitive)) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val value_ =", "body": "HashMap<Nothing, Nothing>(<NUM_LIT>).also { it.isReadOnly = true }<EOL>"}
{"signature": "fun clearCaches() {", "body": "<EOL><INDENT><INDENT>cache.clear()<EOL><INDENT>}"}
{"signature": "fun testDiamondMixedDeclarations() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>val d = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a, c to a, d to b, d to c)<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT><INDENT>doTest(b, setOf(bridge(a, b)))<EOL><INDENT><INDENT>doTest(c, setOf())<EOL><INDENT><INDENT>doTest(d, setOf(bridge(a, d), bridge(b, d), bridge(c, d)))<EOL><INDENT>}"}
{"signature": "val interfaceTable =", "body": "load(interfaceTableRecordPtrType, structGep(runtime.typeInfoType, typeInfo, <NUM_LIT> ))<EOL>"}
{"signature": "package sets are computed and cached separately or with [computePackageNames].", "body": "<EOL>"}
{"signature": "val nonNullFlexibleType =", "body": "valueType.upperIfFlexible().makeNotNullable()<EOL>"}
{"signature": "val superVtableMap =", "body": "superVtableEntries.groupBy { it.function }<EOL>"}
{"signature": "when (val subject = a) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT>else -> <NUM_LIT><EOL><INDENT>}"}
{"signature": "val rowValues =", "body": "valuesByRow[row]?.let { values -> values.sortedBy { it.indent } } ?: emptyList()<EOL>"}
{"signature": "val isForDelegate =", "body": "callableReferenceAccess.source?.kind == KtFakeSourceElementKind.DelegatedPropertyAccessor<EOL>"}
{"signature": "val expectedArgs =", "body": "<STR_LIT> +<EOL>"}
{"signature": "val oneMore =", "body": "indirectPointer<EOL>"}
{"signature": "fun generateBody() {", "body": "<EOL><INDENT><INDENT>genMembers()<EOL><INDENT><INDENT>genFieldsForParameters(v)<EOL><INDENT><INDENT>genConstructor(scriptDescriptor, v, scriptContext.intoFunction(scriptDescriptor.unsubstitutedPrimaryConstructor))<EOL><INDENT>}"}
{"signature": "if (Foo::bar.returnType.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun testFunction(x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any) {", "body": "}"}
{"signature": "for (i in <NUM_LIT>.<expr><NUM_LIT></expr>){", "body": "<EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "val otherFirDump =", "body": "testDataFile.withExtension(otherSpecificExtension)<EOL>"}
{"signature": "if (OVERWRITE_EXPECTED_OUTPUT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>File(<STR_LIT>).writeText(serialized)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val buildScanUrl =", "body": "output<EOL>"}
{"signature": "val JAVAX_TYPE_QUALIFIER_DEFAULT_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val firSourcePsi =", "body": "this.source?.psi<EOL>"}
{"signature": "val expectedFileWithoutPrefix =", "body": "getTestDataFileSiblingPath(extension, testPrefix = null)<EOL>"}
{"signature": "fun jumpIfLessThanZero(v: InstructionAdapter, label: Label) {", "body": "<EOL><INDENT><INDENT>v.lconst(<NUM_LIT>L)<EOL><INDENT><INDENT>v.lcmp()<EOL><INDENT><INDENT>v.iflt(label)<EOL><INDENT>}"}
{"signature": "when (originalFir) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirQualifiedAccessExpression -> originalFir<EOL><INDENT><INDENT><INDENT>is FirWhenSubjectExpression -> originalFir.whenRef.value.subject as? FirQualifiedAccessExpression<EOL><INDENT><INDENT><INDENT>is FirVariableAssignment -> originalFir.unwrapLValue()<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val moduleMetadata =", "body": "projectDir.resolve(<STR_LIT>).readText()<EOL>"}
{"signature": "val irGetValue =", "body": "expression.getValueArgument(<NUM_LIT>) as? IrGetValue<EOL>"}
{"signature": "fun generateCopyFunctionForDataClasses(constructorParameters: List<KtParameter>) {", "body": "<EOL><INDENT><INDENT>val copyFunction = bindingContext.get(BindingContext.DATA_CLASS_COPY_FUNCTION, classDescriptor) ?: return<EOL><INDENT><INDENT>generateCopyFunction(copyFunction, constructorParameters)<EOL><INDENT>}"}
{"signature": "val serializationPluginClasspath =", "body": "System.getProperty(<STR_LIT>)!!<EOL>"}
{"signature": "val ktReturnedValue =", "body": "ktBodyStatements.last()<EOL>"}
{"signature": "for (annotation in descriptor.extensionReceiverParameter?.nonSourceAnnotations.orEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>proto.addExtensionOrNull(extension, annotationSerializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val metadataLibraryOutputFile =", "body": "baseOutputDirectory.resolve(sourceSetMetadataBinary.relativeFile)<EOL>"}
{"signature": "val includesQualifiers =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "var skipDescriptors =", "body": "true<EOL>"}
{"signature": "val DEC =", "body": "OperatorNameConventions.DEC<EOL>"}
{"signature": "val TF_IMMUTABLE =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in typeParameters<NUM_LIT>indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val t<NUM_LIT> = typeParameters<NUM_LIT>[i]<EOL><INDENT><INDENT><INDENT><INDENT>val t<NUM_LIT> = typeParameters<NUM_LIT>[i]<EOL><INDENT><INDENT><INDENT><INDENT>if (t<NUM_LIT>upperBounds != t<NUM_LIT>upperBounds) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun call<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>test()<EOL><INDENT>}"}
{"signature": "if (modelClass.isAssignableFrom(B::class.java)) {", "body": "<EOL><INDENT><INDENT>createViewModel()<EOL><INDENT>}"}
{"signature": "val getterReturnTypeRef =", "body": "getter.returnTypeRef<EOL>"}
{"signature": "val psiBounds =", "body": "mutableListOf<KtTypeReference>()<EOL>"}
{"signature": "val analyzerEngine =", "body": "compilationState.analyzerEngine as IdeLikeReplCodeAnalyzer<EOL>"}
{"signature": "val compressionMethod =", "body": "getShort(currentOffset + <NUM_LIT>).toInt()<EOL>"}
{"signature": "val nameWithDots =", "body": "internalName.replace('/', '.')<EOL>"}
{"signature": "fun useAdditionalServices(vararg serviceRegistrationData: ServiceRegistrationData) {", "body": "<EOL><INDENT><INDENT>additionalServices += serviceRegistrationData<EOL><INDENT>}"}
{"signature": "fun get(result: ByteArray, offset: Int, length: Int) {", "body": "<EOL><INDENT><INDENT><INDENT>val buf = ensureBuffer()<EOL><INDENT><INDENT><INDENT>pos += length<EOL><INDENT><INDENT><INDENT>buf.get(result, offset, length)<EOL><INDENT><INDENT>}"}
{"signature": "val annotationNode =", "body": "AnnotationNode(typeMapper.mapType(annotationDescriptor.type).descriptor)<EOL>"}
{"signature": "val DensityCompositionLocal =", "body": "CompositionLocal.of<Density>()<EOL>"}
{"signature": "fun assign(v: StringProperty) {", "body": "<EOL><INDENT><INDENT>this.v = v.get()<EOL><INDENT>}"}
{"signature": "if (InTextDirectivesUtils.isDirectiveDefined(fileText, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(ForTestCompileRuntime.runtimeJarForTestsWithJdk<NUM_LIT>())<EOL><INDENT><INDENT>}"}
{"signature": "val delegateSource =", "body": "entry.toFirSourceElement(KtFakeSourceElementKind.ClassDelegationField)<EOL>"}
{"signature": "while (type is Typedef) {", "body": "<EOL><INDENT><INDENT><INDENT>if (names.contains(type.def.name)) return true<EOL><INDENT><INDENT><INDENT>type = type.def.aliased<EOL><INDENT><INDENT>}"}
{"signature": "val klibLib =", "body": "compileToLibrary(testCaseLib)<EOL>"}
{"signature": "for (i in (longLow() until longHigh()).reversed().reversed()) {", "body": "<EOL><INDENT><INDENT>sumL = sumL * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "if (overriddenMembers.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>leaves.add(processingSymbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun setValue(thisRef: Any, property: KProperty<*>, value: AA?) {", "body": "<EOL><INDENT><INDENT>super.setValue(thisRef, property, value)<EOL><INDENT>}"}
{"signature": "fun testVarPrefix() {", "body": "<EOL><INDENT>var x = <NUM_LIT><EOL><INDENT>val x<NUM_LIT> = ++x<EOL><INDENT>val x<NUM_LIT> = --x<EOL>}"}
{"signature": "val TEST_DATA_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo(defined: Int) {", "body": "}"}
{"signature": "fun checkRepresentativeTarget(chunk: KotlinChunk) {", "body": "<EOL><INDENT><INDENT>check(chunk.representativeTarget == this)<EOL><INDENT>}"}
{"signature": "val constructorKeywordRendered =", "body": "renderConstructorKeyword || !constructor.isPrimary || visibilityRendered<EOL>"}
{"signature": "if (c.allowBareTypes && projectionFromAllQualifierParts.isEmpty() && isPossibleToSpecifyTypeArgumentsFor(classDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return PossiblyBareType.bare(typeConstructor, false)<EOL><INDENT><INDENT>}"}
{"signature": "val toDumpBoth =", "body": "createPhaseSetFromArguments(arguments.phasesToDump)<EOL>"}
{"signature": "val annotationsRequiringExternal =", "body": "setOf(JsModule, JsQualifier)<EOL>"}
{"signature": "if (functionTypeRef.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (kotlinOrigin) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtProperty -> kotlinOrigin.initializer<EOL><INDENT><INDENT><INDENT><INDENT>is KtParameter -> kotlinOrigin.defaultValue<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val MaxUS =", "body": "UShort.MAX_VALUE<EOL>"}
{"signature": "val actualReport =", "body": "testReports[consumer]!![resolvedConfigurationName]!!.readText()<EOL>"}
{"signature": "if (trueWhenString(x) || falseWhenInt(x)) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>inc<!>()<EOL><INDENT>}"}
{"signature": "val supertypesRefs =", "body": "mutableListOf<JsExpression>()<EOL>"}
{"signature": "if (parent is KtClassBody && grandparent is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return grandparent.toLightClass()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val allowInDifferentFiles =", "body": "analysisContext.resolveSession.languageVersionSettings<EOL>"}
{"signature": "if (compareByDomainCapacity(toIntegral, PrimitiveType.INT) < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT> The resulting `$otherName` value is equal to `this.toInt().to$otherName()`.<EOL><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ints =", "body": "new_list_int()<EOL>"}
{"signature": "for (i in <NUM_LIT>.times) {", "body": "<EOL><INDENT><INDENT>action()<EOL><INDENT>}"}
{"signature": "if (argument == KmTypeProjection.STAR) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val testJvmFieldInInterfaceCompanionObject =", "body": "<NUM_LIT><EOL>"}
{"signature": "val continuationName =", "body": "<STR_LIT><EOL>"}
{"signature": "val qualifiedCallValue =", "body": "evaluate(selectorExpression, expectedType)<EOL>"}
{"signature": "fun replaceSuperTypeRefs(newSuperTypeRefs: List<FirTypeRef>) {", "body": "<EOL><INDENT><INDENT>superTypeRefs.clear()<EOL><INDENT><INDENT>superTypeRefs.addAll(newSuperTypeRefs)<EOL><INDENT>}"}
{"signature": "fun isCompatible() {", "body": "<EOL><INDENT><INDENT>assertTrue(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).isCompatible(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)))<EOL><INDENT><INDENT>assertTrue(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).isCompatible(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)))<EOL><INDENT><INDENT>assertFalse(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).isCompatible(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)))<EOL><INDENT><INDENT>assertFalse(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).isCompatible(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)))<EOL><INDENT><INDENT>assertFalse(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).isCompatible(SchemaVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)))<EOL><INDENT>}"}
{"signature": "if (classDescriptor.isInterface) {", "body": "<EOL><INDENT><INDENT><INDENT>ObjCProtocolType(referenceProtocol(classDescriptor).objCName)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in (logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)).reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "fun push(state: State) {", "body": "<EOL><INDENT><INDENT>stack.add(state)<EOL><INDENT>}"}
{"signature": "val currentGeneration =", "body": "AtomicInteger(REPL_CODE_LINE_FIRST_GEN)<EOL>"}
{"signature": "for (name in referenceFilenames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val file = basedir.resolve(name)<EOL><INDENT><INDENT><INDENT><INDENT>if (file.extension.isEmpty())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>file.createDirectories()<EOL><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>file.createFile()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val trivialExpression =", "body": "meta.isCertain || expr is IrGetValue || expr is IrConst<*><EOL>"}
{"signature": "fun visitKtElement(element: KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>c.trace.report(UNSUPPORTED.on(element, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dString =", "body": "D().toString()"}
{"signature": "for (file in compilerConfiguration.jvmClasspathRoots) {", "body": "<EOL><INDENT><INDENT><INDENT>add(file.absolutePath)<EOL><INDENT><INDENT>}"}
{"signature": "if (x !is String || <!SENSELESS_COMPARISON!>x != null<!>){", "body": "<EOL><INDENT><INDENT>var k: Any? = x<EOL><INDENT>}"}
{"signature": "val arrayOfEnum =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this is IrBasedClassConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return this.owner.getObjCInitMethod()?.descriptor<EOL><INDENT>}"}
{"signature": "val progress =", "body": "DownloadingProgress(currentBytes)<EOL>"}
{"signature": "val effectiveReferencedDescriptors =", "body": "getEffectiveReferencedDescriptors(descriptor)<EOL>"}
{"signature": "var row =", "body": "sourceRangeInfo.startLineNumber - originalInfo.startLineNumber<EOL>"}
{"signature": "val FlexibleArrayElementVariance =", "body": "<STR_LIT>.internalIrId()<EOL>"}
{"signature": "val missingConfigurations =", "body": "expectedConfigurations - project.configurations.names<EOL>"}
{"signature": "if (!Files.exists(outputFile)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for ((index, valueArgument) in resolvedCall.valueArgumentsByIndex!!.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>valueArgumentsToIndex[valueArgument] = index<EOL><INDENT><INDENT>}"}
{"signature": "val methodDesc =", "body": "ois.readUTF()<EOL>"}
{"signature": "fun justFunc() {", "body": "<EOL><INDENT><INDENT>log += <STR_LIT><EOL><INDENT>}"}
{"signature": "val lhsClassFqName =", "body": "classFqName!!<EOL>"}
{"signature": "val headerKlibSameAbi =", "body": "File(getHeaderPath(<STR_LIT>))<EOL>"}
{"signature": "val nonAndroidDslOptions =", "body": "getNonAndroidDslApOptions(ext, project, kotlinSourceDir, null, null)<EOL>"}
{"signature": "val androidTestKotlinSourceDir =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "fun execute(testExecutionSpec: JvmTestExecutionSpec, testResultProcessor: TestResultProcessor) {", "body": "<EOL><INDENT><INDENT><INDENT>delegate.execute(testExecutionSpec, testReporter.createDelegatingTestReportProcessor(testResultProcessor, targetName))<EOL><INDENT><INDENT>}"}
{"signature": "val deprecatedSinceKotlinClassId =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (declaration is IrFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>return lower(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedApiString =", "body": "expected<EOL>"}
{"signature": "val typesCaches =", "body": "hashMapOf<ClassWithAppliedArguments, Set<IrType>>()<EOL>"}
{"signature": "val haveSameClass =", "body": "parentField.typeRef.copy(nullable = false) == existingField.typeRef.copy(nullable = false)<EOL>"}
{"signature": "val isCompatibilityMode =", "body": "<EOL><INDENT><INDENT><INDENT>(jvmDefaultMode == JvmDefaultMode.ALL_COMPATIBILITY && !irClass.hasJvmDefaultNoCompatibilityAnnotation()) ||<EOL>"}
{"signature": "val structPointerFromPosix =", "body": "getStructPointerFromPosix()<EOL>"}
{"signature": "val QualifierOrClassifier =", "body": "kindOf(TowerGroupKind.QualifierOrClassifier)<EOL>"}
{"signature": "fun testNullable(x: NX<String?>?, y: NY<Number?>?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] == ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] === ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "if (serializableClass.isEnumWithLegacyGeneratedSerializer()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>SerializerForEnumsCodegen(codegen, serializableClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val STEP_SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "val kotlinCoroutinesPackageFqn =", "body": "kotlinPackageFqn.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "for (i in <NUM_LIT> until original.typeArgumentsCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>putTypeArgument(i, original.getTypeArgument(i))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (added.compilationName == compilationName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>postConfigureAction?.configure(added.internal.decoratedInstance)<EOL><INDENT><INDENT><INDENT><INDENT>postConfigureAction = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val unresolvedConfigurationRegex =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val diagnosticsPerFile =", "body": "testServices.firDiagnosticCollectorService.getFrontendDiagnosticsForModule(info)<EOL>"}
{"signature": "fun unreachableDeclarationLog() {", "body": "<EOL><INDENT>console.asDynamic().trace(<STR_LIT>)<EOL>}"}
{"signature": "val icEnv =", "body": "config.incrementalCompilationEnvironment ?: error(<STR_LIT>)<EOL>"}
{"signature": "val p<NUM_LIT>Platform =", "body": "createKtModule(<STR_LIT>, directDependsOnDependencies = listOf(p<NUM_LIT>Intermediate))<EOL>"}
{"signature": "val classifyingCapabilities =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>capabilities.filter { capability -> capability.group == group && capability.name.startsWith(module) }<EOL>"}
{"signature": "if (keepClassAsIs || removeClassFromAbi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return method<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(b: Builder<String, *>, bb: Builder<*, *>) {", "body": "<EOL><INDENT>b.test<Builder<*, *>>(bb)<EOL>}"}
{"signature": "fun run(b: () -> Unit) {", "body": "<EOL><INDENT>b()<EOL>}"}
{"signature": "val deprecatedName =", "body": "deprecatedFqName.shortName().asString()<EOL>"}
{"signature": "val taskToExecute =", "body": "<STR_LIT><EOL>"}
{"signature": "val rebuildReason =", "body": "buildMetaInfo.obtainReasonForRebuild(currentCompilerArgumentsMap, previousCompilerArgsMap)<EOL>"}
{"signature": "val shortFloorShort =", "body": "byte.floorDiv(short)<EOL>"}
{"signature": "if (declaration !is KtTypeAlias || descriptor !is TypeAliasDescriptor || !descriptor.isActual) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val hasChildren =", "body": "declaration.declarations.isNotEmpty()<EOL>"}
{"signature": "fun check(<EOL><INDENT><INDENT>declaration: FirCallableDeclaration,<EOL><INDENT><INDENT>containingClass: FirClass,<EOL><INDENT><INDENT>context: CheckerContext,<EOL><INDENT><INDENT>reporter: DiagnosticReporter,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>if (declaration !is FirSimpleFunction && declaration !is FirProperty) return<EOL><INDENT><INDENT>val firTypeScope = containingClass.unsubstitutedScope(context)<EOL><INDENT><INDENT>FirNativeObjCNameUtilities.checkCallableMember(firTypeScope, declaration.symbol, declaration, context, reporter)<EOL><INDENT>}"}
{"signature": "fun testElvis(x: Any?) {", "body": "<EOL><INDENT>val y = x ?: ::<!UNRESOLVED_REFERENCE!>unresolved<!><EOL>}"}
{"signature": "val jsTryBlock =", "body": "aTry.tryResult.accept(this, context).asBlock()<EOL>"}
{"signature": "while (filesWithPendingTopLevels.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val pendingFileDeserializationState = filesWithPendingTopLevels.first()<EOL><EOL><INDENT><INDENT><INDENT><INDENT>pendingFileDeserializationState.fileDeserializer.deserializeFileImplicitDataIfFirstUse()<EOL><INDENT><INDENT><INDENT><INDENT>pendingFileDeserializationState.deserializeAllFileReachableTopLevel()<EOL><EOL><INDENT><INDENT><INDENT><INDENT>filesWithPendingTopLevels.remove(pendingFileDeserializationState)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val dnn = makeDefinitelyNotNull(arg)) {", "body": "<EOL><INDENT><INDENT><!SENSELESS_NULL_IN_WHEN!>null<!> -> false<EOL><INDENT><INDENT>else -> true<EOL><INDENT>}"}
{"signature": "if (old.getExtensionCount(BuiltInsProtoBuf.constructorAnnotation) != new.getExtensionCount(BuiltInsProtoBuf.constructorAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (indexOfLastRealParam != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(indexOfLastRealParam + <NUM_LIT>) - numContextParams<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (initializerNode != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val initializer = resolveExpressionOrNull(initializerNode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: InferenceElementExpression(transformer, initializerNode)<EOL><INDENT><INDENT><INDENT><INDENT>val variable = InferenceVariable(this, declaration)<EOL><INDENT><INDENT><INDENT><INDENT>variableDeclarations[declaration.symbol] = variable<EOL><INDENT><INDENT><INDENT><INDENT>infer.visitVariable(variable, initializer)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val signatureBuilder =", "body": "SignatureBuilder(signatureInputStreams.toTypedArray(), mergedSignaturesOutputStream, logger)<EOL>"}
{"signature": "val irResult =", "body": "builder.withReceivers(functionReceiver, null, emptyList())<EOL>"}
{"signature": "fun method(param: String) {", "body": "<EOL><INDENT><INDENT>adapter.method(param)<EOL><INDENT>}"}
{"signature": "if (declaration.declaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.at(declaration.declaration, context).report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>JsKlibErrors.EXPORTING_JS_NAME_CLASH,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.exportingName,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>clashedWith<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (!isCocoapodsInstalled()) {", "body": "<EOL><INDENT><INDENT>fail(<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Running CocoaPods integration tests requires cocoapods to be installed.<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Please install them manually:<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>gem install cocoapods<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Or re-run the tests with the 'installCocoapods=true' Gradle property.<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val listeners =", "body": "mutableSetOf<TestListener>()<EOL>"}
{"signature": "for (i in path.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (i >= other.path.size)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (path[i].index != other.path[i].index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return path[i].index.compareTo(other.path[i].index)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val yt =", "body": "dy[t]<EOL>"}
{"signature": "fun registerExtensions(extensions: BunchOfRegisteredExtensions) {", "body": "<EOL><INDENT><INDENT>registeredExtensions += extensions<EOL><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>(MinUI + <NUM_LIT>u, MinUI + <NUM_LIT>u, MinUI)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val executionConfig =", "body": "service.makeCompilerExecutionStrategyConfiguration()<EOL>"}
{"signature": "val NoLiveLiteralsAnnotation =", "body": "<EOL><INDENT><INDENT>getTopLevelClass(ComposeClassIds.NoLiveLiterals)<EOL>"}
{"signature": "fun visitRequire(module: String, access: Int, version: String?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>requires.add(Requires(module, (access and ACC_TRANSITIVE) != <NUM_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun regular() {", "body": "<EOL><INDENT><!UNSUPPORTED_CLASS_LITERALS_WITH_EMPTY_LHS!>::class<!> }"}
{"signature": "for (superTypeRef in currentDeclaration.superTypeRefs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val superClassFir = superTypeRef.firClassLike(session) ?: return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (superClassFir is FirRegularClass && containsTypeParameter(superClassFir)) return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (superClassFir is FirTypeAlias && containsTypeParameter(superClassFir.fullyExpandedClass(session))) return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ANY =", "body": "CompileTimeType<Any>()<EOL>"}
{"signature": "if ((xx!!.hashCode() == <NUM_LIT> && y!!.hashCode() == <NUM_LIT>) || z!!.hashCode() == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>xx.length<EOL><INDENT><INDENT>y<!UNSAFE_CALL!>.<!>length<EOL><INDENT><INDENT>z<!UNSAFE_CALL!>.<!>length<EOL><INDENT>}"}
{"signature": "val isLowerAndFlexibleTypeWithDefNotNullLowerBound =", "body": "constraint.isLowerAndFlexibleTypeWithDefNotNullLowerBound()<EOL>"}
{"signature": "if (className != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>className = filterClassName(className)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val labeledReceiver =", "body": "implicitReceiverStack[labelName] as? ImplicitDispatchReceiverValue<EOL>"}
{"signature": "while (i <= settings.iterations || settings.iterations < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>runIteration(i)<EOL><INDENT><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val privateSpecGitRepo =", "body": "<STR_LIT><EOL>"}
{"signature": "val previousFlow =", "body": "node.lastPreviousNode.getFlow(path)<EOL>"}
{"signature": "if (isSigned) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KmAnnotationArgument.LongValue(value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun publishGlobalSourceModuleStateModification() {", "body": "<EOL><INDENT><INDENT>ApplicationManager.getApplication().assertWriteAccessAllowed()<EOL><EOL><INDENT><INDENT>incrementModificationTrackers(includeBinaryTrackers = false)<EOL><INDENT><INDENT>project.analysisMessageBus.syncPublisher(KotlinTopics.GLOBAL_SOURCE_MODULE_STATE_MODIFICATION).onModification()<EOL><INDENT>}"}
{"signature": "package suspendLambdaAssertionsDisabled<EOL>.", "body": ""}
{"signature": "val falseUpperBoundViolation =", "body": "AliasOfNumList<<!UPPER_BOUND_VIOLATED(<STR_LIT>)!>Int<!>>()"}
{"signature": "else if (!isLowerConstraintForPartiallyAnalyzedVariable(constraint, variable)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>properConstraintPresent = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val x =", "body": "foo()"}
{"signature": "val accessThreads =", "body": "List(threads) { thread { barrier.await(); lazy.value } }<EOL>"}
{"signature": "val middle =", "body": "<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>UL.toString()<EOL>"}
{"signature": "if (predicate(newType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>clear()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val listToRemove =", "body": "(head - <NUM_LIT> until tail + <NUM_LIT>).filter { Random.nextBoolean() }<EOL>"}
{"signature": "val modifierListRange =", "body": "markModifier(node, startOffset, endOffset, tree, node)<EOL>"}
{"signature": "fun bFunction() {", "body": "}<EOL><INDENT>fun aFunction() {}"}
{"signature": "val BUILTIN_STUB_VERSION =", "body": "BINARY_STUB_VERSION + <NUM_LIT><EOL>"}
{"signature": "if (prop.optional) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val initializer = initMap.getValue(prop.descriptor) ?: throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val initExpr = Translation.translateAsExpression(initializer, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>TranslationUtils.assignmentToBackingField(context, prop.descriptor, initExpr).makeStmt()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val t<NUM_LIT> = peek()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Test.A -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val publicConst =", "body": "<NUM_LIT><EOL>"}
{"signature": "val Y =", "body": "O.X<EOL>"}
{"signature": "val KOTLIN_NATIVE_DISTRIBUTION =", "body": "<STR_LIT><EOL>"}
{"signature": "val nonMatchingVersionDependencies =", "body": "compilerDependencies<EOL>"}
{"signature": "val POD_SPEC_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val mixedColor =", "body": "regex.splitToSequence(colors)<EOL>"}
{"signature": "if (reader.kind == prefix) {", "body": "<EOL><INDENT><INDENT><INDENT>delimited(prefix, postfix, content)<EOL><INDENT><INDENT>}"}
{"signature": "val eDouble =", "body": "EDouble(<NUM_LIT>)<EOL>"}
{"signature": "fun testExns() {", "body": "<EOL><INDENT><INDENT>Id(<STR_LIT>).testExn()<EOL><INDENT><INDENT>Name(<STR_LIT>).testExn()<EOL><INDENT><INDENT>testExn(Password(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "fun bar(f: Foo) {", "body": "}<EOL><EOL>@JvmName(<STR_LIT>)<EOL>fun baz(r: Result<Int>) {}"}
{"signature": "fun updatePhaseForDeclarationInternals(target: FirElementWithResolveState) {", "body": "<EOL><INDENT><INDENT>LLFirPhaseUpdater.updateDeclarationInternalsPhase(<EOL><INDENT><INDENT><INDENT>target = target,<EOL><INDENT><INDENT><INDENT>newPhase = resolverPhase,<EOL><INDENT><INDENT><INDENT>updateForLocalDeclarations = resolverPhase == FirResolvePhase.BODY_RESOLVE,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (node is EnterNodeMarker) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>enterCluster(color)<EOL><INDENT><INDENT><INDENT><INDENT>color = BLUE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun applyConfiguration() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (value != null) field.defaultValueInBuilder = value<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun createUsingTo() {", "body": "<EOL><INDENT><INDENT>val map = mapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map.size)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map[<STR_LIT>])<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, map[<STR_LIT>])<EOL><INDENT>}"}
{"signature": "fun testLocalDeclarations() {", "body": "<EOL><INDENT><INDENT>val localVariable = intersect(First, Second)<EOL><INDENT><INDENT>fun localFunction() = intersect(First, Second)<EOL><INDENT><INDENT>localVariable<EOL><INDENT><INDENT>localFunction()<EOL><INDENT><INDENT>privateProperty<EOL><INDENT><INDENT>privateMemberFunction()<EOL><INDENT>}"}
{"signature": "when (it.first) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>FIRST -> <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>SECOND -> <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> throw AssertionError()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var checkDone =", "body": "false<EOL>"}
{"signature": "if (m.printer is OKPrinter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>m.printer.print()<EOL><INDENT>}"}
{"signature": "val fileTypeByFileName =", "body": "FileTypeRegistry.getInstance().getFileTypeByFileName(file.name)<EOL>"}
{"signature": "val compilerLibDir =", "body": "getCompilerLib()<EOL>"}
{"signature": "if (rebuildSucceeded) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEqualDirectories(rebuildOutDir, outDir, forgiveExtraFiles = false)<EOL><INDENT><INDENT>}"}
{"signature": "if (was) {", "body": "<EOL><INDENT><INDENT>yield(<NUM_LIT>)<EOL><INDENT><INDENT>return@generate<EOL><INDENT>}"}
{"signature": "val valFromThisFileCompanion =", "body": "<STR_LIT><EOL>"}
{"signature": "when (changedCompilerArguments.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((key, otherFlags) in other.completeNullabilityInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>val thisFlags = getCollectedNullability(key)<EOL><INDENT><INDENT><INDENT>resultNullabilityInfo.put(key, thisFlags.or(otherFlags))<EOL><INDENT><INDENT>}"}
{"signature": "val functionReturnType =", "body": "kotlinType.arguments.last()<EOL>"}
{"signature": "val operationType =", "body": "getOperatorReturnType(type, otherType)<EOL>"}
{"signature": "val NZERO =", "body": "<NUM_LIT> as Comparable<Any><EOL>"}
{"signature": "val isConvertableConstVal =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>callableDescriptor.isConst &&<EOL>"}
{"signature": "val serializableClass =", "body": "getSerializableClassDescriptorBySerializer(codegen.descriptor) ?: return<EOL>"}
{"signature": "fun write(mappings: Map<Int, List<String>>, writer: FileWriter) {", "body": "<EOL><INDENT><INDENT>strategy.beforeWritingRanges(writer)<EOL><INDENT><INDENT>writer.writeMappings(mappings, strategy)<EOL><INDENT><INDENT>strategy.afterWritingRanges(writer)<EOL><INDENT><INDENT>writer.appendLine()<EOL><INDENT><INDENT>writer.appendLine(oneToManyUppercase(mappings.keys.first()))<EOL><INDENT><INDENT>writer.appendLine()<EOL><INDENT><INDENT>writer.appendLine(uppercaseImpl())<EOL><INDENT>}"}
{"signature": "if (nextIterator!!.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>state = State_ManyReady<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentPhase =", "body": "currentTransformerPhase.get() ?: return<EOL>"}
{"signature": "val implParameters =", "body": "collectValueParameters(implFun)<EOL>"}
{"signature": "for ((a: ) in b) {", "body": "}"}
{"signature": "val kotlinRef =", "body": "param(<NUM_LIT>)<EOL>"}
{"signature": "val SERIALIZER_CLASS =", "body": "<STR_LIT><EOL>"}
{"signature": "val fooA =", "body": "file.getClassOrFail(<STR_LIT>).getMemberScope().getFunctionOrFail(<STR_LIT>)<EOL>"}
{"signature": "if (customNameAnnoProvided) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (accessor.isGetter) !JvmAbi.isSetterName(wrapperName) else !JvmAbi.isGetterName(wrapperName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (path == null) {", "body": "<EOL><INDENT><INDENT><INDENT>path = calculatePathRelativeToSourceRoots(file)<EOL><INDENT><INDENT><INDENT>cache[file] = path<EOL><INDENT><INDENT>}"}
{"signature": "val resolversList =", "body": "resolvers.filterNotNull()<EOL>"}
{"signature": "fun notNullShort(x: Short) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "val dependencyFir<NUM_LIT>IrExtensions =", "body": "JvmFir<NUM_LIT>IrExtensions(dependencyConfiguration, jvmIrDeserializer, JvmIrMangler)<EOL>"}
{"signature": "package declaration is exactly {@code fqName}.", "body": "For example, if a file declares<EOL>"}
{"signature": "fun takeAnyFun(function: Function<*>) {", "body": "}<EOL><EOL>fun test(block: () -> Unit) {<EOL><INDENT>takeAnyFun(block)<EOL>}"}
{"signature": "when (m) {", "body": "<EOL><INDENT><INDENT>is OneSealedChild -> <STR_LIT><EOL><INDENT>}"}
{"signature": "val initializers =", "body": "kProperties.values.sortedBy { it.second }.map { it.first }<EOL>"}
{"signature": "val onlyPrivateDeclarationsAndFeatureIsEnabled =", "body": "<EOL><INDENT><INDENT><INDENT>context.config.languageVersionSettings.supportsFeature(LanguageFeature.PackagePrivateFileClassesWithAllPrivateMembers) && fileClassMembers<EOL>"}
{"signature": "var failed =", "body": "false<EOL>"}
{"signature": "for (@[ann]) {", "body": "}"}
{"signature": "if (model != null && !hasModel(gradleProject.path)) {", "body": "<EOL><INDENT><INDENT><INDENT>addModel(gradleProject.path, model)<EOL><INDENT><INDENT>}"}
{"signature": "val suites =", "body": "arrayListOf<Suite>()<EOL>"}
{"signature": "fun test_<NUM_LIT>(a: A<B>) {", "body": "<EOL><INDENT>a[<NUM_LIT>] += B() }"}
{"signature": "if (value is Char && (value == <NUM_LIT>toChar() || value == <NUM_LIT>toChar())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>items.add(Item.constant(value.toString()))<INDENT><INDENT><INDENT><INDENT><INDENT> }"}
{"signature": "for ((a: Int, b) in b) {", "body": "}"}
{"signature": "fun arg(name: Any, vararg values: Any) {", "body": "<EOL><INDENT><INDENT>options.put(name.toString(), values.joinToString(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "var remainingNumberOfDefaultParametersToAdd =", "body": "<EOL><INDENT><INDENT><INDENT>if (numberOfDefaultParametersToAdd >= <NUM_LIT>)<EOL>"}
{"signature": "when (val cls = classifierOrNull) {", "body": "<EOL><INDENT>is IrClassSymbol -> cls<EOL><INDENT>is IrScriptSymbol -> cls.owner.targetClass<EOL><INDENT>is IrTypeParameterSymbol -> cls.owner.representativeUpperBound.classOrUpperBound()<EOL><INDENT>null -> null<EOL>}"}
{"signature": "val resourceDirectoriesFromTask =", "body": "parseResourceRootsProcessedByProcessResourcesTask(project, sourceSet)<EOL>"}
{"signature": "if (canHaveContracts) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.lazyResolveToPhase(FirResolvePhase.CONTRACTS)<EOL><INDENT><INDENT>}"}
{"signature": "val invalid =", "body": "invalidExpr(it.isMemoizedLambda, it.args, it.metas)<EOL>"}
{"signature": "if (declaration.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(annotation.source, FirJvmErrors.SYNCHRONIZED_ON_ABSTRACT, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(m: MyMap<String, Int>) {", "body": "<EOL><INDENT><INDENT><expr>++m[<STR_LIT>]</expr><EOL><INDENT>}"}
{"signature": "val DEFAULT_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in <NUM_LIT>u.toUShort() downTo <NUM_LIT>u.toUShort()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val dummyElement =", "body": "KtPsiFactory(environment.project).createType(<STR_LIT>)<EOL>"}
{"signature": "when (calltype) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> assert(!resolvedCall.isComposableInvocation())<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> assert(resolvedCall.isComposableInvocation())<EOL><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package inferenceagain<EOL>.", "body": ""}
{"signature": "if (ktExpression is KtCallableReferenceExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return createCallableReferenceKotlinCallArgument(<EOL><INDENT><INDENT><INDENT><INDENT>context, ktExpression, startDataFlowInfo, valueArgument, argumentName, outerCallContext, tracingStrategy<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (initVars != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>JsFor(initVars, condition, increment, body)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isInterfaceCompanionWithPublicJvmFieldProperties(containingClassSymbol, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>NOT_PUBLIC_VAL_WITH_JVMFIELD<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val parentType =", "body": "(this.parent as? IrClass)?.defaultType ?: return false<EOL>"}
{"signature": "val trackedEnvironmentVariablesKeys =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val reportForSourceSet =", "body": "dependencyReports.firstOrNull { line -> line.contains(reportMarker) }<EOL>"}
{"signature": "val defaultStatementFromFir =", "body": "firDefaultStatement.psi as? KtExpression ?: return null<EOL>"}
{"signature": "if (erasedType.classOrNull?.owner?.isObjCForwardDeclaration() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>context.irBuiltIns.anyType.mergeNullability(erasedType)<EOL><INDENT><INDENT>}"}
{"signature": "val typeVarOf =", "body": "<STR_LIT><EOL>"}
{"signature": "val missingSupertype =", "body": "checkMissingDependencySuperTypes(symbol.dispatchReceiverType, source, reporter, context)<EOL>"}
{"signature": "fun check(declaration: FirSimpleFunction, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>checkFeatureIsEnabled(declaration, context, reporter)<EOL><INDENT>}"}
{"signature": "val fusMetricsConsumer =", "body": "NonSynchronizedMetricsContainer()<EOL>"}
{"signature": "val stringUppercaseGenerators =", "body": "mutableListOf<StringUppercaseGenerator>()<EOL>"}
{"signature": "val distinctCandidates =", "body": "candidates.distinctBy { it.callableId }<EOL>"}
{"signature": "if (!nopack) {", "body": "<EOL><INDENT><INDENT><INDENT>libraryLayout.unzippedDir.zipDirAs(klibFile)<EOL><INDENT><INDENT><INDENT>libraryLayout.unzippedDir.deleteRecursively()<EOL><INDENT><INDENT>}"}
{"signature": "val linuxArm<NUM_LIT>Main =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "when (operation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Operation.CHANGE -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>touch(file)<EOL><INDENT><INDENT><INDENT><INDENT>Operation.DELETE -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertTrue(<STR_LIT><STR_LIT>\\<STR_LIT>, file.delete())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newCondition =", "body": "loop.condition.transform(expressionTransformer, null)<EOL>"}
{"signature": "val wrapperIrFunction =", "body": "context.irFactory.generateWrapperHeader(target, numDefaultParametersToExpect)<EOL>"}
{"signature": "val ctorCalls =", "body": "lambdaConstructorCalls[primaryConstructor.symbol] ?: return false<EOL>"}
{"signature": "if (!setterReturnType.isUnit) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(setter.returnTypeRef.source, FirErrors.WRONG_SETTER_RETURN_TYPE, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (superTypes.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT> + superTypes.joinToString())<EOL><INDENT><INDENT>}"}
{"signature": "val compilationConfigurationInstance =", "body": "scriptConfigInstance(mainAnnotation.compilationConfiguration)<EOL>"}
{"signature": "if (Directives.RESOLVE_SCRIPT in testServices.moduleStructure.allDirectives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ktFile.script!!<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val internalProperty =", "body": "object : MyClass() { fun invisible() {}}<EOL>"}
{"signature": "val b<NUM_LIT>_<NUM_LIT> =", "body": "ClassString(<STR_LIT>)<EOL>"}
{"signature": "val fourth =", "body": "Outer.Other(third)<EOL>"}
{"signature": "val parentContainer =", "body": "this<EOL>"}
{"signature": "if (isEnum && support.languageVersionSettings.supportsFeature(LanguageFeature.EnumEntries)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(getEnumEntriesPsiMethod(this))<EOL><INDENT><INDENT>}"}
{"signature": "while (!(p == null)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val isMultiReleaseJar =", "body": "manifest.value?.getValue(IS_MULTI_RELEASE)?.equals(<STR_LIT>, ignoreCase = true)<EOL>"}
{"signature": "if (postProcessor != null && symbol != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>postProcessor.invoke(symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (a is String || a is Int) {", "body": "<EOL><INDENT>a.compareTo(<!ARGUMENT_TYPE_MISMATCH!><STR_LIT><!>)<EOL><INDENT>a.toString()<EOL>  }"}
{"signature": "fun setFoo(i: Int) {", "body": "}<EOL><EOL><INDENT>fun `access$getFoo`(a: A): Int = <NUM_LIT><EOL><INDENT>fun `access$setFoo`(a: A, d: Int) {}"}
{"signature": "if (this == '\\u<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (declaration.potentiallyHasDifferentMangledNamesDependingOnBackend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>printCheckMarkerForNewDeclaration()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var foundSamMethod =", "body": "false<EOL>"}
{"signature": "if (qualifier.typeArgumentList.typeArguments.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderSeparated(qualifier.typeArgumentList.typeArguments, visitor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val buildNumber =", "body": "request.params.buildNumber.toString()<EOL>"}
{"signature": "if (!generateCall(expression) && expression.parent !is KtCallExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>createNonSyntheticValue(expression, MagicKind.UNRESOLVED_CALL, generateAndGetReceiverIfAny(expression))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.symbol.hasExplicitReturnType) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.initializer?.checkExpressionForEnhancedTypeMismatch(<EOL><INDENT><INDENT><INDENT><INDENT>declaration.returnTypeRef.coneType,<EOL><INDENT><INDENT><INDENT><INDENT>reporter,<EOL><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT>FirJvmErrors.NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (directNestedClass.kind == ClassKind.ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT>clazz.enumEntries += shortClassName<EOL><INDENT><INDENT><INDENT>clazz.klibEnumEntries += KlibEnumEntry(name = shortClassName, annotations = directNestedClass.annotations)<EOL><INDENT><INDENT>}"}
{"signature": "when (accessedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is FirCallableSymbol<*> -> accessedSymbol.publishedApiEffectiveVisibility ?: accessedSymbol.effectiveVisibility<EOL><INDENT><INDENT><INDENT><INDENT>is FirClassLikeSymbol<*> -> accessedSymbol.publishedApiEffectiveVisibility ?: accessedSymbol.effectiveVisibility<EOL><INDENT><INDENT><INDENT><INDENT>else -> shouldNotBeCalled()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun simpleFoo(s: () -> Unit) {", "body": "<EOL><INDENT><INDENT>s()<EOL><INDENT>}"}
{"signature": "val varargParameter =", "body": "argumentMapping?.values?.firstOrNull { it.isVararg }<EOL>"}
{"signature": "val notDeclaredAsNothing =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@OptIn(UnexpandedTypeCheck::class) !declaration.returnTypeRef.isNothing<EOL>"}
{"signature": "val isConstructorParam =", "body": "(local?.parent as? IrConstructor)?.parent === declaration<EOL>"}
{"signature": "val matchedValues =", "body": "regex.findAll(<STR_LIT>).map { it.value }.toList()<EOL>"}
{"signature": "val variableCache =", "body": "mutableMapOf<FirVariable, IrVariableSymbol>()<EOL>"}
{"signature": "val ordinalProp =", "body": "serializableIrClass.properties.single { it.name == Name.identifier(<STR_LIT>) }.getter!!<EOL>"}
{"signature": "val valueParameter =", "body": "buildValueParameter(this, name, <NUM_LIT>, valueType)<EOL>"}
{"signature": "if (superSource.psi?.parent is KtDelegatedSuperTypeEntry) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(superSource, FirErrors.DELEGATION_IN_INTERFACE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nodeSize =", "body": "node.leavesCount<EOL>"}
{"signature": "val internalNpmDependencies =", "body": "internalDependencies<EOL>"}
{"signature": "val smapCountToDrop =", "body": "smapStack.indexOfLast { it.tryInfo == tryInfo } + <NUM_LIT><EOL>"}
{"signature": "fun testExpectedFun() {", "body": "<EOL>\t\texpectedFun()<EOL>\t}"}
{"signature": "if (ktDeclaration.hasInitializer()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.INAPPLICABLE_LATEINIT_MODIFIER.on(ktDeclaration, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newLoopBody =", "body": "IrBlockImpl(loop.startOffset, loop.endOffset, loop.type, loop.origin)<EOL>"}
{"signature": "val metadataDependencyResolutions =", "body": "transformation.metadataDependencyResolutions<EOL>"}
{"signature": "if (function.needsInlineParameterNullCheckRequirement()) {", "body": "<EOL><INDENT><INDENT><INDENT>versionRequirementTable?.writeInlineParameterNullCheckRequirement(proto::addVersionRequirement)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until Long.MIN_VALUE)  {", "body": "sb.append(i); sb.append(' ') }"}
{"signature": "val redeclarations =", "body": "linkedSetOf<DeclarationDescriptorNonRoot>()<EOL>"}
{"signature": "val enumClassIfEnumEntry =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (descriptor.kind == ClassKind.ENUM_ENTRY)<EOL>"}
{"signature": "val ADHOC_COMPONENT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val KLIB_PROPERTY_CONTAINS_ERROR_CODE =", "body": "<STR_LIT><EOL>"}
{"signature": "val objOffsetsPtr =", "body": "staticData.placeGlobalConstArray(<STR_LIT>, llvm.int<NUM_LIT>Type, objOffsets)<EOL>"}
{"signature": "val coneTypeVariableTypeConstructor =", "body": "type.typeConstructor<EOL>"}
{"signature": "val extensionRegistrars =", "body": "(projectEnvironment as? VfsBasedProjectEnvironment)<EOL>"}
{"signature": "if (descriptor == null || descriptorName?.asString() != method.name) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.name = stringTable.getStringIndex(method.name)<EOL><INDENT><INDENT>}"}
{"signature": "val versionString =", "body": "manifestProperties.getProperty(KLIB_PROPERTY_METADATA_VERSION) ?: return null<EOL>"}
{"signature": "val myScriptDefinitions =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "fun suspendThrowsIllegalStateException<NUM_LIT>() {", "body": "}<EOL><EOL>typealias IllegalStateExceptionAlias = IllegalStateException<EOL><EOL>@Throws(IllegalStateExceptionAlias::class)<EOL>suspend fun suspendThrowsIllegalStateExceptionTypealias() {}"}
{"signature": "val protectedVal<NUM_LIT> =", "body": "object { override fun toString() = <STR_LIT> }<EOL>"}
{"signature": "val baseFirClass =", "body": "ktClass.toFirSymbol(classId, baseKtModule)?.fir as? FirClass ?: return emptyList()<EOL>"}
{"signature": "val keyC =", "body": "extrasKeyOf<Int>(<STR_LIT>)<EOL>"}
{"signature": "val fullMangledNames =", "body": "mutableListOf<ComputedMangledName>()<EOL>"}
{"signature": "val none =", "body": "NullableWrapper(null)<EOL>"}
{"signature": "val variableWithConstraints =", "body": "csBuilder.currentStorage().notFixedTypeVariables[expectedType.constructor] ?: return false<EOL>"}
{"signature": "val cfgOwner =", "body": "container as? FirControlFlowGraphOwner ?: continue<EOL>"}
{"signature": "fun f<NUM_LIT>(a: Any?) {", "body": "<EOL><INDENT>a as String<EOL><INDENT>checkSubtype<String>(a)<EOL>}"}
{"signature": "val expectedTypeWithEstimatedReturnType =", "body": "replaceReturnTypeForCallable(expectedType, estimatedReturnType)<EOL>"}
{"signature": "if (this@lambdaA is Prop && this@lambdaB is Host && this@lambdaC is Invoke) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>foo()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun checkAssumptions() {", "body": "<EOL><INDENT><INDENT>`check for KT<NUM_LIT>`()<EOL><INDENT>}"}
{"signature": "if (--functionsStarted == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>tokenStream.ungetToken(TokenStream.EOF)<EOL><INDENT><INDENT>}"}
{"signature": "while (!handle.compareAndSet(array, index, oldValue, newValue)) {", "body": "<EOL><INDENT><INDENT>Thread.sleep(<NUM_LIT>L)<EOL><INDENT>}"}
{"signature": "var currentBackend =", "body": "TargetBackend.ANY<EOL>"}
{"signature": "val referencesByName =", "body": "functionCall.functionReferenceName ?: return<EOL>"}
{"signature": "val optimizedCode =", "body": "FileUtil.loadFile(File(optimizedName))<EOL>"}
{"signature": "val uintProgression =", "body": "<NUM_LIT>u..<NUM_LIT>u step <NUM_LIT>"}
{"signature": "fun visitTableSwitchInsn(min: Int, max: Int, dflt: Label?, vararg labels: Label?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>skipValidation = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (receiverPseudoValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>receiverValues = receiverValues.plus(receiverPseudoValue, receiver)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (expression.getValueArgument(<NUM_LIT>)?.type?.classOrNull == context.irBuiltIns.stringClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>toStringMethod.enqueue(data, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun newState() {", "body": "<EOL><INDENT><INDENT>val newState = SuspendState(unit)<EOL><INDENT><INDENT>doDispatch(newState)<EOL><INDENT><INDENT>updateState(newState)<EOL><INDENT>}"}
{"signature": "val projectCoordinates =", "body": "dependency.coordinates.project<EOL>"}
{"signature": "if (x is C<NUM_LIT> || x !is B<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>var k: B<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: A<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: C<NUM_LIT> = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: Any? = x<EOL><INDENT>}"}
{"signature": "when (val initializerExpression = field.initializer?.expression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrConst<*> -> callStack.pushSimpleInstruction(initializerExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> callInterceptor.interceptJavaStaticField(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun printElement(element: IrElement) {", "body": "<EOL><INDENT><INDENT>element.accept(this, null)<EOL><INDENT>}"}
{"signature": "fun charCategoryUnassigned() {", "body": "<EOL><INDENT><INDENT>val unassignedChar = '\\u<NUM_LIT>'<EOL><INDENT><INDENT>assertFalse(unassignedChar.isDefined())<EOL><INDENT><INDENT>assertEquals(CharCategory.UNASSIGNED, unassignedChar.category)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, CharCategory.UNASSIGNED.code)<EOL><INDENT>}"}
{"signature": "val objCLLvmDeclarations =", "body": "generationState.llvmDeclarations.forClass(irClass).objCDeclarations!!<EOL>"}
{"signature": "var consumed =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (value in listOf(<NUM_LIT>, Double.MIN_VALUE, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, Double.MAX_VALUE, Double.POSITIVE_INFINITY)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(value, value.absoluteValue)<EOL><INDENT><INDENT><INDENT>assertEquals(value, (-value).absoluteValue)<EOL><INDENT><INDENT><INDENT>assertEquals(value, abs(value))<EOL><INDENT><INDENT><INDENT>assertEquals(value, abs(-value))<EOL><INDENT><INDENT>}"}
{"signature": "fun box(x: dynamic) {", "body": "<EOL><INDENT>x.<!NAME_CONTAINS_ILLEGAL_CHARS!>`foo-bar`<!>()<EOL><INDENT>x.<!NAME_CONTAINS_ILLEGAL_CHARS!>`ba-z`<!><EOL>}"}
{"signature": "if (invisible) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>source = expression.source,<EOL><INDENT><INDENT><INDENT><INDENT>factory = FirErrors.INVISIBLE_REFERENCE,<EOL><INDENT><INDENT><INDENT><INDENT>symbol,<EOL><INDENT><INDENT><INDENT><INDENT>Visibilities.PrivateToThis,<EOL><INDENT><INDENT><INDENT><INDENT>symbol.callableId.classId,<EOL><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun properties() {", "body": "<EOL><INDENT><INDENT>val pattern = <STR_LIT><EOL><INDENT><INDENT>val regex<NUM_LIT> = Regex(pattern, RegexOption.IGNORE_CASE)<EOL><INDENT><INDENT>assertEquals(pattern, regex<NUM_LIT>pattern)<EOL><INDENT><INDENT>assertEquals(setOf(RegexOption.IGNORE_CASE), regex<NUM_LIT>options)<EOL><EOL><INDENT><INDENT>val options<NUM_LIT> = setOf(RegexOption.MULTILINE, RegexOption.IGNORE_CASE)<EOL><INDENT><INDENT>val regex<NUM_LIT> = Regex(pattern, options<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(options<NUM_LIT>, regex<NUM_LIT>options)<EOL><INDENT>}"}
{"signature": "if (!xsComponentClass.equals(x<NUM_LIT>Class)) {", "body": "<EOL><INDENT><INDENT><INDENT>throw new AssertionError(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> + xsComponentClass +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> + xsClass +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> + x<NUM_LIT>Class<EOL><INDENT><INDENT><INDENT>);<EOL><INDENT><INDENT>}"}
{"signature": "if (header != null) {", "body": "<EOL><INDENT><INDENT><INDENT>writeTransformedMetadata(header, classBuilder)<EOL><INDENT><INDENT>}"}
{"signature": "val sourceSetsBySourceSetTree =", "body": "mutableMapOf<KotlinSourceSetTree?, MutableSet<KotlinSourceSet>>()<EOL>"}
{"signature": "fun visitScript(script: FirScript, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitScript(script)<EOL><INDENT>}"}
{"signature": "val xcodebuildVersion =", "body": "xcode.xcodebuildVersion<EOL>"}
{"signature": "fun appJs() {", "body": "<EOL><INDENT>foo()<EOL>}"}
{"signature": "if (result < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>result = surrogates.matches(startIndex, testString, matchResult)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitFunctionExpression(expression: IrFunctionExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionExpression(expression)<EOL><INDENT>}"}
{"signature": "val createdOne =", "body": "OneArg(<STR_LIT>)<EOL>"}
{"signature": "if (constantValue == null) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.badDescription(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT>argumentExpression ?: expression<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun usageUnresolved<NUM_LIT>() {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE!>bar<!>()?.<!SYNTAX!><!><EOL>}"}
{"signature": "import three.", "body": "SecondModuleClass<EOL>"}
{"signature": "var x =", "body": "<NUM_LIT><EOL>"}
{"signature": "val registeredOptionsByName =", "body": "mutableMapOf<String, BinaryOption<*>>()<EOL>"}
{"signature": "fun transform(internalClassName: String, methodNode: MethodNode) {", "body": "<EOL><INDENT><INDENT>TransformerForMethod(methodNode).transform()<EOL><INDENT>}"}
{"signature": "var allowKotlinPackage =", "body": "false<EOL>"}
{"signature": "var info =", "body": "innerClassInfos[name]<EOL>"}
{"signature": "val TABLE_CLASS_ID =", "body": "ClassId.topLevel(TABLE)<EOL>"}
{"signature": "if (parent !is IrClass) {", "body": "<EOL><INDENT><INDENT><INDENT>parent = stubGenerator.generateOrGetFacadeClass(descriptor) ?: return<EOL><INDENT><INDENT>}"}
{"signature": "val DEFAULT_STAR_IMPORT =", "body": "scopeSessionKey<DefaultStarImportKey, FirSingleLevelDefaultStarImportingScope>()<EOL>"}
{"signature": "fun testJavaConstantChangedUsedInKotlin() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val overrideLineNumber =", "body": "smapStack<EOL>"}
{"signature": "val beforeInlineMarker =", "body": "context.openingInlineMethodMarker[afterInlineMarker]<EOL>"}
{"signature": "if (lower == upper) {", "body": "<EOL><INDENT><INDENT>return conditions[middle]<EOL><INDENT>}"}
{"signature": "val containsFunctionN =", "body": "returnType!!.containsFunctionN() ||<EOL>"}
{"signature": "val implementationOwner =", "body": "state.typeMapper.mapImplementationOwner(functionDescriptor)<EOL>"}
{"signature": "if (finallyNode == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentStatements += stateAndJump(successor, x)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun callUseAB() {", "body": "<EOL><INDENT>val b = B()<EOL><INDENT>useAB(b)<EOL>}"}
{"signature": "fun visitPropertySetterDescriptor(descriptor: PropertySetterDescriptor, data: IrDeclarationContainer?) {", "body": "<EOL><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (firFile in info.mainFirFiles.values) {", "body": "<EOL><INDENT><INDENT><INDENT>firFile.acceptChildren(visitor, firFile)<EOL><INDENT><INDENT>}"}
{"signature": "if (alt) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>bits_.or(anotherBits)<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val overwriteReachableNodes =", "body": "java.lang.Boolean.getBoolean(overwriteReachableNodesProperty)<EOL>"}
{"signature": "val unusedDiagnostic =", "body": "asTextDiagnostic(unresolvedReference, <STR_LIT>)<EOL>"}
{"signature": "for (i in <NUM_LIT> until keyResourcePathDepth) {", "body": "<EOL><INDENT><INDENT><INDENT>root = root.parentFile<EOL><INDENT><INDENT>}"}
{"signature": "for (contextReceiver in firClass.contextReceivers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>contextReceiver.transformSingle(transformer, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val candidateParameterType =", "body": "candidateParameter.typeReference ?: return false<EOL>"}
{"signature": "val hashFile =", "body": "tempCacheDirectory?.child(CachedLibraries.HASH_FILE_NAME)<EOL>"}
{"signature": "val otherPlatformExtension =", "body": "specificExtension.replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (matchedText == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>opened.pop().end = effectiveOffset<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (otherFunctionsThatConflictWithIt.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun sideEffects() {", "body": "<EOL><INDENT>x++<EOL>}"}
{"signature": "val objcGenerics =", "body": "configuration.objcGenerics<EOL>"}
{"signature": "val blockOnStack =", "body": "alloca(blockLiteralType)<EOL>"}
{"signature": "if (classOrObject.hasModifier(tokenAndModifier.first)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>psiModifiers.add(tokenAndModifier.second)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultMaxMemoryPerTestWorkerMb =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (input) {", "body": "<EOL><INDENT>!is FirOutput.Full -> null<EOL><INDENT>else -> firSerializerBase(input.firResult, null)<EOL>}"}
{"signature": "val LOW_PRIORITY_IN_OVERLOAD_RESOLUTION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val wasmExportClass =", "body": "getIrClass(FqName(<STR_LIT>))<EOL>"}
{"signature": "if (hasDelegateExpression && !hasDelegate) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinType =", "body": "declaration.getKotlinType() ?: return@lazyPub PsiType.NULL<EOL>"}
{"signature": "val actualNestedClass =", "body": "actualNestedClassesByName[expectNestedClass.name] ?: continue<EOL>"}
{"signature": "val isolatedBInstance =", "body": "isolatedClassLoader.loadClass(BImpl::class.java.name).constructors.single().newInstance()<EOL>"}
{"signature": "package foobar.", "body": "a<EOL>"}
{"signature": "fun report(typeArgumentReference: KtTypeReference, substitutedBound: KotlinType) {", "body": "<EOL><INDENT><INDENT>trace.reportDiagnosticOnce(baseDiagnostic.on(typeArgumentReference, substitutedBound, argumentType))<EOL><INDENT>}"}
{"signature": "val specialSymbolsInTemplate =", "body": "itemForGeneration.filter { it.itemType == ItemType.CONSTANT }.map { it.value }<EOL>"}
{"signature": "val allPresentsLabel =", "body": "Label()<EOL>"}
{"signature": "for (path in kotlinCompileOptions.pluginClasspath) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>xml(<STR_LIT>, <STR_LIT> to path)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (completionNeeded) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val completionResult = callCompleter.completeCall(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>whenExpression,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (whenExpression.isProperlyExhaustive) data else ResolutionMode.ContextIndependent,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>whenExpression = completionResult<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val castedPsiCallArgument =", "body": "callArgument as? PSIKotlinCallArgument<EOL>"}
{"signature": "val testTypes =", "body": "if (oneTypeVariable) getTestTypesForOneTypeVariable() else getTestTypesForTwoTypeVariables()<EOL>"}
{"signature": "var removedAnyLabels =", "body": "false<EOL>"}
{"signature": "val implClassName =", "body": "descriptor.getImplClassNameForDeserialized() ?: error(<STR_LIT>)<EOL>"}
{"signature": "val nullRange<NUM_LIT> =", "body": "npmRange()<EOL>"}
{"signature": "val objectConstructorCall =", "body": "expression.statements.last() as? IrConstructorCall<EOL>"}
{"signature": "val modificationEventKinds =", "body": "testModule.directives[ModificationEventDirectives.MODIFICATION_EVENT]<EOL>"}
{"signature": "val throwArithExc =", "body": "codegen.llvmFunction(context.ir.symbols.throwArithmeticException.owner)<EOL>"}
{"signature": "var protoClass =", "body": "protoDeclaration.irClass<EOL>"}
{"signature": "if (dstClass.isObjCProtocolClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val protocolClass = functionGenerationContext.getObjCClassFromNativeRuntime(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>call(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>llvm.Kotlin_Interop_IsObjectKindOfClass,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>listOf(objCObject, protocolClass)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (needNewLine) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (enhancedFunctionSymbol is FirNamedFunctionSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>enhancedToOriginalFunctions[enhancedFunctionSymbol] = original<EOL><INDENT><INDENT><INDENT><INDENT>processor(enhancedFunctionSymbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val testMessage =", "body": "test.message.format(unmatched.size, <STR_LIT>)<EOL>"}
{"signature": "val ignoredTests =", "body": "mutableListOf<TestName>()<EOL>"}
{"signature": "val DEST_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun copyWasmArray(source: WasmShortArray, destination: WasmShortArray, sourceIndex: Int, destinationIndex: Int, length: Int) {", "body": "<EOL><INDENT>wasm_array_copy<WasmShortArray>(destination, destinationIndex, source, sourceIndex, length)<EOL>}"}
{"signature": "if (expression.elseExpression == null && !isExhaustive) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>branchesDataFlowInfo.or(contextAfterSubject.dataFlowInfo)<EOL><INDENT><INDENT>}"}
{"signature": "val currentModule =", "body": "descriptor.module<EOL>"}
{"signature": "val K_CLASS =", "body": "ClassId.topLevel(StandardNames.FqNames.kClass.toSafe())<EOL>"}
{"signature": "if (origin<NUM_LIT>isSaturated()) {", "body": "<EOL><INDENT><INDENT>return infinityOfSign(origin<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "var xz =", "body": "Z(<NUM_LIT>)<EOL>"}
{"signature": "fun test(list: List<Ref<*>>) {", "body": "<EOL><INDENT>val data: String by <!DELEGATE_SPECIAL_FUNCTION_MISSING, DELEGATE_SPECIAL_FUNCTION_NONE_APPLICABLE!>list.getElement(<NUM_LIT>)<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!><!><EOL><EOL><INDENT>val data<NUM_LIT>: String by list.getElement(<NUM_LIT>)<EOL>}"}
{"signature": "val partType =", "body": "partContext.filePartType<EOL>"}
{"signature": "fun recordInitializationTime() {", "body": "<EOL><INDENT><INDENT>val time = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - initStartNanos)<EOL><INDENT><INDENT>measurements += CompilerInitializationMeasurement(time)<EOL><INDENT>}"}
{"signature": "val jsonText =", "body": "jsonFile.readText()<EOL>"}
{"signature": "fun init(config: KonanBuildingConfig<*>, destinationDir: File, artifactName: String, target: KonanTarget) {", "body": "<EOL><INDENT><INDENT>super.init(config, destinationDir, artifactName, target)<EOL><INDENT><INDENT>this.notCompatibleWithConfigurationCache(<STR_LIT>)<EOL><INDENT><INDENT>this.defFile = project.konanDefaultDefFile(artifactName)<EOL><INDENT>}"}
{"signature": "val idSignature =", "body": "signatureDeserializer.deserializeIdSignature(symbolData.signatureId)<EOL>"}
{"signature": "val Object =", "body": "DummyJavaClass(<STR_LIT>, javaLangName(<STR_LIT>), numberOfTypeParameters = <NUM_LIT>)<EOL>"}
{"signature": "fun addTests(info: List<TestInfo>) {", "body": "<EOL><INDENT><INDENT>infos.addAll(info)<EOL><INDENT>}"}
{"signature": "val WITH_NEW_INFERENCE_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "when (val symbol = symbol) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtFe<NUM_LIT>PsiSymbol<*, *> -> symbol.descriptor<EOL><INDENT><INDENT><INDENT>is KtFe<NUM_LIT>DescSymbol<*> -> symbol.descriptor<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val declarationDeserializer =", "body": "fileDeserializationState.declarationDeserializer<EOL>"}
{"signature": "for (x in <NUM_LIT>downTo(<NUM_LIT>).step(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>result += x<EOL><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(a: MutableList<*>) {", "body": "}"}
{"signature": "val gi =", "body": "::gOfInt.returnType<EOL>"}
{"signature": "if (sum != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return false;<EOL><INDENT>}"}
{"signature": "val DIVISION_OPERATION_NAMES =", "body": "<EOL><INDENT>listOf(OperatorNameConventions.DIV, OperatorNameConventions.REM, OperatorNameConventions.MOD)<EOL>"}
{"signature": "val CONFIGURATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (jsPrimitiveType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun addOneToManyMappingsGenerators(generatedDir: File, target: KotlinTarget) {", "body": "<EOL><INDENT><INDENT>val uppercase = OneToManyMappingsGenerator.forUppercase(generatedDir.resolve(<STR_LIT>), target, bmpUnicodeDataLines)<EOL><INDENT><INDENT>val lowercase = OneToManyMappingsGenerator.forLowercase(generatedDir.resolve(<STR_LIT>), target, bmpUnicodeDataLines)<EOL><INDENT><INDENT>oneToManyMappingsGenerators.add(uppercase)<EOL><INDENT><INDENT>oneToManyMappingsGenerators.add(lowercase)<EOL><INDENT>}"}
{"signature": "import library.", "body": "sample.*<EOL>"}
{"signature": "val outputType =", "body": "functionType.getReturnTypeFromFunctionType().unwrap()<EOL>"}
{"signature": "fun combiningTwoCompilerOptionsCombinesOptionsWithTheSamePluginId() {", "body": "<EOL><INDENT><INDENT>val compilerOptions<NUM_LIT> = CompilerPluginOptions()<EOL><INDENT><INDENT>compilerOptions<NUM_LIT>addPluginArgument(EXAMPLE_PLUGIN_ID, subpluginOption<NUM_LIT>)<EOL><INDENT><INDENT>val compilerOptions<NUM_LIT> = CompilerPluginOptions()<EOL><INDENT><INDENT>compilerOptions<NUM_LIT>addPluginArgument(EXAMPLE_PLUGIN_ID, subpluginOption<NUM_LIT>)<EOL><EOL><INDENT><INDENT>val compilerOptions<NUM_LIT> = compilerOptions<NUM_LIT> + compilerOptions<NUM_LIT><EOL><EOL><INDENT><INDENT>assertEquals(setOf(EXAMPLE_PLUGIN_ID), compilerOptions<NUM_LIT>allOptions().keys)<EOL><INDENT><INDENT>assertEquals(listOf(subpluginOption<NUM_LIT>, subpluginOption<NUM_LIT>), compilerOptions<NUM_LIT>allOptions()[EXAMPLE_PLUGIN_ID])<EOL><INDENT>}"}
{"signature": "var rightIndex =", "body": "median + <NUM_LIT><EOL>"}
{"signature": "fun configureTarget(<EOL><INDENT><INDENT>target: KotlinTargetType,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>target.runKotlinCompilationSideEffects()<EOL><INDENT><INDENT>target.runKotlinTargetSideEffects()<EOL><INDENT>}"}
{"signature": "if (code in <NUM_LIT>x<NUM_LIT>c<NUM_LIT>.<NUM_LIT>x<NUM_LIT>cc || code in <NUM_LIT>x<NUM_LIT>f<NUM_LIT>.<NUM_LIT>x<NUM_LIT>f<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return (<NUM_LIT> * ((code + <NUM_LIT>) / <NUM_LIT>)).toChar()<EOL><INDENT>}"}
{"signature": "if (explicitReceiver == null && data is TowerData.OnlyImplicitReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOf(<EOL><INDENT><INDENT><INDENT><INDENT>candidateFactory.createCandidate(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>invokeCandidateDescriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ExplicitReceiverKind.DISPATCH_RECEIVER,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>data.implicitReceiver<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val delegateFieldReference =", "body": "expression.calleeReference<EOL>"}
{"signature": "val controlFlowGraphReference =", "body": "dataFlowAnalyzer.exitFunction(constructor)<EOL>"}
{"signature": "var previousSourceLine =", "body": "<NUM_LIT><EOL>"}
{"signature": "val defsSrc =", "body": "File(TEST_DATA_DIR, <STR_LIT>)<EOL>"}
{"signature": "val uInt =", "body": "module.findClassAcrossModuleDependencies(StandardNames.FqNames.uInt)?.defaultType ?: return false<EOL>"}
{"signature": "val classifierMatch =", "body": "classifierRegex.matchEntire(classifier) ?: return null<EOL>"}
{"signature": "fun visitLongValue(value: LongValue, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinConstantValueKind.LONG.ordinal)<EOL><INDENT><INDENT>dataStream.writeLong(value.value)<EOL><INDENT>}"}
{"signature": "val superSymbol =", "body": "deserializeTypedSymbolWhen<IrClassSymbol>(proto.hasSuper(), CLASS_SYMBOL) { proto.`super` }<EOL>"}
{"signature": "package <!INVALID_CHARACTERS!>`<`<!><EOL>.", "body": ""}
{"signature": "if (isArrayReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (valueParameters.size < <NUM_LIT>) return false<EOL><INDENT><INDENT><INDENT><INDENT>val atomicArrayClassSymbol = atomicSymbols.getAtomicArrayClassByValueType(receiverValueType)<EOL><INDENT><INDENT><INDENT><INDENT>return valueParameters[<NUM_LIT>].name.asString() == ATOMIC_ARRAY && valueParameters[<NUM_LIT>].type.classOrNull == atomicArrayClassSymbol &&<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>valueParameters[<NUM_LIT>].name.asString() == INDEX && valueParameters[<NUM_LIT>].type == irBuiltIns.intType<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val iteratorResolvedCall =", "body": "getOrFail(BindingContext.LOOP_RANGE_ITERATOR_RESOLVED_CALL, ktLoopRange)<EOL>"}
{"signature": "if (!oldProjection.isStarProjection && oldProjection.projectionKind == Variance.OUT_VARIANCE) {", "body": "<EOL><INDENT><INDENT><INDENT>capturedTypeSupertypes += KotlinTypePreparator.Default.prepareType(oldProjection.type.unwrap())<EOL><INDENT><INDENT>}"}
{"signature": "val additionalClassNames =", "body": "JavacList.from(binaryTypesToReprocess)<EOL>"}
{"signature": "fun executeTest(classLoader: ClassLoader) {", "body": "<EOL><INDENT><INDENT>val clazz = getGeneratedClass(classLoader, className)<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>clazz.getMethodOrNull(testMethod)!!.invoke(null)<EOL><INDENT>}"}
{"signature": "val nonVerticalWhitespaces =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val classAnnotationsTuples =", "body": "classDescriptor.annotationsWithArguments()<EOL>"}
{"signature": "val oldNames =", "body": "oldList.map { compareObject.oldNameResolver.getString(it) }.toSet()<EOL>"}
{"signature": "when (override) {", "body": "}"}
{"signature": "fun test(<EOL><INDENT>a: nullunmarkedpackage.UnannotatedType,<EOL><INDENT>b: unannotatedpackage.NullUnmarkedType,<EOL><INDENT>c: unannotatedpackage.UnannotatedType<EOL>) {", "body": "<EOL><INDENT>a.unannotatedConsume(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>)<EOL><INDENT>b.unannotatedConsume(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>)<EOL><INDENT>c.nullUnmarkedConsume(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>)<EOL><INDENT>unannotatedpackage.UnannotatedTypeWithNullUnmarkedConstructor(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>)<EOL>}"}
{"signature": "val annotationNoCompatibility =", "body": "declaration.getAnnotationByClassId(JVM_DEFAULT_NO_COMPATIBILITY_CLASS_ID, session)<EOL>"}
{"signature": "for (valueParameter in function.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT>recordSamLookupsToClassifier(valueParameter.type.constructor.declarationDescriptor ?: continue, location)<EOL><INDENT><INDENT>}"}
{"signature": "if (safeIsString(x) == null) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "if (cn.toFloat() != <NUM_LIT>.toFloat()) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val buildDependencies =", "body": "arrayListOf<TaskDependency>()<EOL>"}
{"signature": "for ((a: , ) in b) {", "body": "}"}
{"signature": "val genericParameterTypes =", "body": "method.genericParameterTypes<EOL>"}
{"signature": "val constructedObject =", "body": "context.resolutionContext.scope.ownerDescriptor.containingDeclaration as? ClassDescriptor ?: return<EOL>"}
{"signature": "if (lexemes.lookBack == Lexer.CHAR_VERTICAL_BAR) {", "body": "<EOL><INDENT><INDENT><INDENT>children.add(EmptySet(fSet))<EOL><INDENT><INDENT>}"}
{"signature": "val reflections =", "body": "Reflections(<STR_LIT>)<EOL>"}
{"signature": "if (propertySymbol.wasVisited()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return RecursionInInitializer<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(model: FlameGraphModel<CallUsageNode>) {", "body": "<EOL><INDENT><INDENT>val afterCast = model as CallUsageNodeFlameGraphModel<EOL>}"}
{"signature": "val packageOrClassDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT>(resolvedDescriptor as? TypeAliasDescriptor)?.let { it.classDescriptor ?: return null } ?: resolvedDescriptor<EOL>"}
{"signature": "var _baz =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testGList(gl: GList<String>) {", "body": "<EOL><INDENT>if (gl.xs[<NUM_LIT>] != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "package usage<EOL>.", "body": ""}
{"signature": "val outputImage =", "body": "buildDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun visitDeclaration(declaration: FirDeclaration, data: FirElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>normalDeclarations++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.acceptChildren(this, declaration)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val uradix =", "body": "radix.toULong()<EOL>"}
{"signature": "fun toIsoString() {", "body": "<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>nanoseconds.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>.milliseconds.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>.seconds.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>.minutes.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>seconds.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(<NUM_LIT>days.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(Duration.ZERO.toIsoString(), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(Duration.INFINITE.toIsoString(), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun addOuterSystem(outerSystem: ConstraintStorage) {", "body": "<EOL><INDENT><INDENT>require(!storage.usesOuterCs)<EOL><EOL><INDENT><INDENT>storage.usesOuterCs = true<EOL><INDENT><INDENT>storage.outerSystemVariablesPrefixSize = outerSystem.allTypeVariables.size<EOL><INDENT><INDENT>@OptIn(AssertionsOnly::class)<EOL><INDENT><INDENT>storage.outerCS = outerSystem<EOL><EOL><INDENT><INDENT>addOtherSystem(outerSystem, isAddingOuter = true)<EOL><INDENT>}"}
{"signature": "val newCustomAttributes =", "body": "(newAttributes as List<ConeAttribute<*>>).filter { it.isCustomAttribute() }<EOL>"}
{"signature": "fun takeUByte(u: UByte) {", "body": "}<EOL>fun takeUShort(u: UShort) {}"}
{"signature": "if (projection != builder.projection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.projection = projection<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun updateFrom(from: IrDeclaration) {", "body": "<EOL><INDENT><INDENT>super.updateFrom(from)<EOL><EOL><INDENT><INDENT>origin = from.origin<EOL><INDENT><INDENT>visibility = if (from is IrDeclarationWithVisibility) from.visibility else DescriptorVisibilities.PUBLIC<EOL><INDENT>}"}
{"signature": "val testCompanionObjectVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val majorUpgradeVersion =", "body": "SchemaVersion.current.copy(major = SchemaVersion.current.major + <NUM_LIT>)<EOL>"}
{"signature": "val ESC<NUM_LIT>C_MAX =", "body": "<NUM_LIT>x<NUM_LIT><EOL>"}
{"signature": "for ((a, b) in range) {", "body": "<EOL><INDENT><INDENT>i = a<EOL><INDENT><INDENT>s = b<EOL><INDENT>}"}
{"signature": "val earlierScriptField =", "body": "irScriptClass.addEarlierScriptField(irScript)<EOL>"}
{"signature": "val watchosX<NUM_LIT> =", "body": "Unit<EOL>"}
{"signature": "val accessorPsi =", "body": "accessor.psi ?: return null<EOL>"}
{"signature": "val realOverridden =", "body": "extractedOverridden.flatMap { realOverridden(it.member, it.baseScope, processDirectOverridden) }<EOL>"}
{"signature": "if (tagProto.hasExpression()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deserialize(tagProto.expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val stubsForPostponedVariables =", "body": "bindingStubsForPostponedVariables()<EOL>"}
{"signature": "val bridgeFunction =", "body": "createBridgeFunction(function, replacement)<EOL>"}
{"signature": "if (bar !is ICFoo<*>) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val nativeStubs =", "body": "<EOL><INDENT><INDENT><INDENT>arrayOf(<STR_LIT>, File(nativesDir, <STR_LIT>).path)<EOL>"}
{"signature": "val visibilityManager =", "body": "ModuleVisibilityManager.SERVICE.getInstance(environment.project)<EOL>"}
{"signature": "if (!isNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT>return kotlinToJsAdapterIfNeededNotNullable(isReturn)<EOL><INDENT><INDENT>}"}
{"signature": "for (aCatch in aTry.catches) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentCatchesLV.or(aCatch.accept(this, data))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val otherVersion =", "body": "resolveSibling(<STR_LIT>)<EOL>"}
{"signature": "val intersectionSupertypes =", "body": "intersectionUpperType.typeConstructor().supertypes()<EOL>"}
{"signature": "fun extractSignatureFromSymbol(symbolId: Long, isPrivate: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>val signatureId = BinarySymbolData.decode(symbolId).signatureId<EOL><INDENT><INDENT><INDENT>val signature = signatureDeserializer.deserializeIdSignature(signatureId)<EOL><INDENT><INDENT><INDENT>ownDeclarationSignatures[signature] = !isPrivate<EOL><INDENT><INDENT>}"}
{"signature": "val filtered =", "body": "data.filterNotNull()<EOL>"}
{"signature": "for (parent in element.elementParents) {", "body": "<EOL><INDENT><INDENT><INDENT>elementSubclasses.getValue(parent.element) += element<EOL><INDENT><INDENT>}"}
{"signature": "val compatibilityTestClasspath =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "when (testCompilation) {", "body": "<EOL><INDENT><INDENT><INDENT>is DeprecatedKotlinCompilationToRunnableFiles<*> -> configurations.maybeCreateDependencyScope(testCompilation.runtimeOnlyConfigurationName)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val itemForGeneration =", "body": "fitRestrictions(items)<EOL>"}
{"signature": "package parts existing in the package with the given FQ name.", "body": "<EOL>"}
{"signature": "if (oldVersion == null) {", "body": "<EOL><INDENT><INDENT>return newVersion<EOL><INDENT>}"}
{"signature": "if (size >= <NUM_LIT>) {", "body": ".. fast path .. }"}
{"signature": "for (file in moduleFragment.files) {", "body": "<EOL><INDENT><INDENT><INDENT>PowerAssertCallTransformer(SourceFile(file), pluginContext, messageCollector, functions)<EOL><INDENT><INDENT><INDENT><INDENT>.visitFile(file)<EOL><INDENT><INDENT>}"}
{"signature": "val extraArgumentsTail =", "body": "<EOL><INDENT><INDENT><INDENT>(if (isDefault) ((kotlinParameterTypes.sumOf(::typeSize) + Int.SIZE_BITS - <NUM_LIT>) / Int.SIZE_BITS) + <NUM_LIT> else <NUM_LIT>) +<EOL>"}
{"signature": "val accessToField =", "body": "JsReturn(exportedName.makeRef())<EOL>"}
{"signature": "val moduleDeserializer =", "body": "context.irLinker.getCachedDeclarationModuleDeserializer(function)<EOL>"}
{"signature": "val finishTimeNanos =", "body": "System.nanoTime()<EOL>"}
{"signature": "fun foo(j: Int) {", "body": "<EOL><INDENT><INDENT>super<<expr>foo.bar.A</expr>>.foo()<EOL><INDENT>}"}
{"signature": "var taylor_<NUM_LIT>_bound =", "body": "Math.sqrt(epsilon);<EOL>"}
{"signature": "val delegatingConstructor =", "body": "delegatingConstructorCall.symbol.owner<EOL>"}
{"signature": "if (source?.kind is KtRealSourceElementKind) {", "body": "<EOL><INDENT><INDENT><INDENT>val lastStatementHasNothingType = (statements.lastOrNull() as? FirExpression)?.resolvedType?.fullyExpandedType(session)?.isNothing == true<EOL><INDENT><INDENT><INDENT>return statements.convertToIrBlock(source, origin, forceUnitType = origin?.isLoop == true || lastStatementHasNothingType)<EOL><INDENT><INDENT>}"}
{"signature": "if (capturedLambda == null) {", "body": "<EOL><INDENT><INDENT>capturedLambda = lambda<EOL><INDENT>}"}
{"signature": "fun foo(other: MyInterface) {", "body": "<EOL><INDENT><INDENT>saveValue((other as? MyClass)?.value)<EOL><INDENT>}"}
{"signature": "if (f(a) == b) {", "body": "<EOL><INDENT><INDENT>return f(a)<EOL><INDENT>}"}
{"signature": "val annotationCollector =", "body": "AnnotationCollector(irFile)<EOL>"}
{"signature": "if (shouldCallMainFunctionAsCoroutine) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>extensionReceiver = IrRawFunctionReferenceImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>UNDEFINED_OFFSET,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>UNDEFINED_OFFSET,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.irBuiltIns.anyType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>originalFunctionSymbol<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val expandedValueType =", "body": "valueType.fullyExpandedType(session)<EOL>"}
{"signature": "while (index < virtualCallSites.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>processVirtualCall(virtualCallSites[index], inheritor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>++index<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var bodyStatement =", "body": "<EOL><INDENT><INDENT>if (body != null)<EOL>"}
{"signature": "val markerAsThis =", "body": "jsFun.parameters.last().name.makeRef()<EOL>"}
{"signature": "if (source.isSuspend()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(FunctionTypeKind.SuspendFunction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (currentDispatchReceiver.canUseSuperRef(context, klass)) {", "body": "<EOL><INDENT><INDENT><INDENT>return JsInvocation(JsNameRef(context.getNameForMemberFunction(target), JsSuperRef()), arguments)<EOL><INDENT><INDENT>}"}
{"signature": "val ctype =", "body": "maxByDomainCapacity(type, otherType)<EOL>"}
{"signature": "val useProperVisibilityForCompanion =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>languageVersionSettings.supportsFeature(LanguageFeature.ProperVisibilityForCompanionObjectInstanceField)<EOL>"}
{"signature": "val read =", "body": "input.skip(todo.toLong())<EOL>"}
{"signature": "var a_<NUM_LIT> =", "body": "<NUM_LIT>;<EOL>"}
{"signature": "fun test<NUM_LIT>(s : (Int) -> Int) {", "body": "<EOL><EOL>}"}
{"signature": "if (function !is FirAnonymousFunction && dispatchReceiverType != null && !isStatic && !isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiverParameter = declareThisReceiverParameter(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>thisType = dispatchReceiverType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>thisOrigin = thisOrigin<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addImport(import: String) {", "body": "<EOL><INDENT><INDENT>addImportsFromString(import)<EOL><INDENT>}"}
{"signature": "if (!(id in aliveObjectIds)) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "val nullableOptional =", "body": "Optional.ofNullable(nullable)<EOL>"}
{"signature": "if (innerDeclaration is FirProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val symbol = innerDeclaration.symbol<EOL><INDENT><INDENT><INDENT><INDENT>val isDefinitelyAssignedInConstructor = info?.get(symbol)?.isDefinitelyVisited() == true<EOL><INDENT><INDENT><INDENT><INDENT>checkProperty(declaration, innerDeclaration, isDefinitelyAssignedInConstructor, context, reporter, !reachedDeadEnd)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isExpression =", "body": "!aTry.type.isUnit()<EOL>"}
{"signature": "package nonRoot<EOL>.", "body": ""}
{"signature": "val abbreviatedType =", "body": "type.abbreviatedType(c.typeTable)<EOL>"}
{"signature": "fun testKT<NUM_LIT>LoadWeak() {", "body": "<EOL><INDENT>testKT<NUM_LIT>LoadWeak(ObjCWeakReference())<EOL>}"}
{"signature": "val runMethodDescriptor =", "body": "Type.getMethodDescriptor(Type.VOID_TYPE, AsmTypes.JAVA_CLASS_TYPE, mainMethodArgsType)<EOL>"}
{"signature": "val typealiasNames =", "body": "typealiases<EOL>"}
{"signature": "val taskData =", "body": "Gson().fromJson(jsonObject, GradleCompileStatisticsData::class.java)<EOL>"}
{"signature": "if (f is TypeAliasConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return mapSignature(f.underlyingConstructorDescriptor.original, kind, skipGenericSignature)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitExpression(expression: FirExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(expression)<EOL><INDENT>}"}
{"signature": "val specialBridgeSignature =", "body": "signatureByDescriptor(overriddenSpecial)<EOL>"}
{"signature": "val releaseApk =", "body": "projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (expectForActualSymbols.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>candidates<INDENT><INDENT> }"}
{"signature": "fun sss() {", "body": "<EOL><INDENT>val some = <NUM_LIT><EOL><EOL><INDENT><INDENT><INDENT>some()<EOL>}"}
{"signature": "if (!ErrorUtils.isError(candidate)) {", "body": "<EOL><INDENT><INDENT>constraintSystem.addReceiverConstraint(substitutor, dispatchReceiver, candidate.dispatchReceiverParameter, position)<EOL><INDENT><INDENT>constraintSystem.addReceiverConstraint(substitutor, extensionReceiver, candidate.extensionReceiverParameter, position)<EOL><INDENT>}"}
{"signature": "fun goodClassifiers() {", "body": "<EOL><INDENT>A.B.C::class<EOL><INDENT>A.B.C::foo<EOL><EOL><INDENT>A.B.InnerC::class<EOL><INDENT>A.B<Int>.InnerC::foo<EOL>}"}
{"signature": "val baseType =", "body": "createTypeFromInner(nullableType, nullableType.modifierList, innerType)<EOL>"}
{"signature": "val closed<NUM_LIT> =", "body": "bindings.closed(<STR_LIT>)<EOL>"}
{"signature": "val targetNode =", "body": "context.extractNode(target) ?: return<EOL>"}
{"signature": "val sbomTask =", "body": "configureSbom()<EOL>"}
{"signature": "if (!function.propertySymbol.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>function.propertySymbol.source,<EOL><INDENT><INDENT><INDENT><INDENT>ComposeErrors.COMPOSABLE_EXPECTED,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (expression.usesDefaultArguments()) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitFunctionAccess(expression)<EOL><INDENT><INDENT>}"}
{"signature": "if (element.inlineStatus != InlineStatus.Inline) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val FIXED_CONFIGURATION_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val forceRenderArguments =", "body": "FirDiagnosticsDirectives.RENDER_DIAGNOSTICS_MESSAGES in currentModule.directives<EOL>"}
{"signature": "if (!context.inlineClassesUtils.isClassInlineLike(constructedClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>processIrFunction(irConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "val optInAnnotationDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotations.findAnnotation(REQUIRES_OPT_IN_FQ_NAME) ?: return null<EOL>"}
{"signature": "val ownerDescriptor =", "body": "if (!isDebuggerContext) scope.ownerDescriptor else null<EOL>"}
{"signature": "val category =", "body": "ObjCCategoryImpl(name, clazz, getLocation(cursor))<EOL>"}
{"signature": "if (writeProtected) {", "body": "<EOL><INDENT><INDENT>setPosixFilePermissions(setOf(PosixFilePermission.OWNER_READ))<EOL><INDENT>}"}
{"signature": "fun unsafeEnterScope(declaration: IrSymbolOwner) {", "body": "<EOL><INDENT><INDENT>scopeStack.push(createScope(declaration))<EOL><INDENT>}"}
{"signature": "val versionNeededToExtract =", "body": "<EOL><INDENT><INDENT><INDENT>getShort(currentOffset + <NUM_LIT>).toInt()<EOL>"}
{"signature": "val annotationToAddFqName =", "body": "annotationToAddId.asSingleFqName()<EOL>"}
{"signature": "fun Foo(content: ()->Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>content()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val subtypingComponentImpl =", "body": "KtFirSubtypingComponent(this, token)<EOL>"}
{"signature": "val firStatements =", "body": "statements.map { it.unwrap().getOrBuildFirOfType<FirElement>(firResolveSession) }<EOL>"}
{"signature": "val testClasses =", "body": "mutableMapOf<IrClass, TestClass>()<EOL>"}
{"signature": "var importDirectiveStrings =", "body": "LinkedHashSet<String>()<EOL>"}
{"signature": "val visitedConstructors =", "body": "mutableSetOf(this)<EOL>"}
{"signature": "val traceForProvideDelegate =", "body": "TemporaryBindingTrace.create(traceToResolveDelegatedProperty, <STR_LIT>)<EOL>"}
{"signature": "if (arg == FREE_ARGS_DELIMITER) {", "body": "<EOL><INDENT><INDENT><INDENT>freeArgsStarted = true<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "val closing =", "body": "closingRegex.find(text)<EOL>"}
{"signature": "var _candidateDescriptor =", "body": "originalCandidateDescriptor<EOL>"}
{"signature": "fun reportForTypeAliasExpansion(callElement: KtElement, substitutedBound: KotlinType) {", "body": "<EOL><INDENT><INDENT>trace.reportDiagnosticOnce(diagnosticForTypeAliases.on(callElement, substitutedBound, argumentType, typeParameterDescriptor))<EOL><INDENT>}"}
{"signature": "for ((valueParameter, varargElements) in mappedVarargElements) {", "body": "<EOL><INDENT><INDENT><INDENT>mappedArguments[valueParameter] = ResolvedCallArgument.VarargArgument(varargElements)<EOL><INDENT><INDENT>}"}
{"signature": "fun addSignedSuperTypes() {", "body": "<EOL><INDENT><INDENT>checkBoundsAndAddSuperType(value, builtIns.intType)<EOL><INDENT><INDENT>checkBoundsAndAddSuperType(value, builtIns.byteType)<EOL><INDENT><INDENT>checkBoundsAndAddSuperType(value, builtIns.shortType)<EOL><INDENT><INDENT>supertypes.add(builtIns.longType)<EOL><INDENT>}"}
{"signature": "val MutableIterator =", "body": "<STR_LIT>.collectionsId()<EOL>"}
{"signature": "if (multiFileClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>EmptyAnnotationsBox<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (event.isTriggered()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for ((fqName, kotlinPosition) in lineInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>oos.writeUTF(fqName)<EOL><INDENT><INDENT><INDENT>oos.writeUTF(kotlinPosition.path)<EOL><INDENT><INDENT><INDENT>oos.writeBoolean(kotlinPosition.isRelativePath)<EOL><INDENT><INDENT><INDENT>oos.writeInt(kotlinPosition.pos)<EOL><INDENT><INDENT>}"}
{"signature": "if (fir is FirTypeAlias) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fir = (fir.expandedTypeRef.coneType.fullyExpandedType(session).toSymbol(session) as? FirRegularClassSymbol)?.fir<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val JS_PACKAGE_FQNAME =", "body": "KOTLIN_PACKAGE_FQN.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val syntheticArguments =", "body": "buildSyntheticValueArgsForTransformedAtomicExtensionCall(expression, getPropertyReceiver, isArrayReceiver, parentFunction)<EOL>"}
{"signature": "val coercedExpr =", "body": "expr.coerceIfPossible(replacement.owner.valueParameters[valueArgumentOffset].type)<EOL>"}
{"signature": "val getterSelector =", "body": "getter?.getSelector(bridge)<EOL>"}
{"signature": "if (kotlinSourceSet.name == androidSourceSet.name) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val trueBoxNonNull =", "body": "TrueBox(SparseBooleanArray().apply { put(<NUM_LIT>, false) })<EOL>"}
{"signature": "val ideaTcsReflections =", "body": "Reflections(ideaTcsPackage, AllClassScanner, Scanners.SubTypes, Scanners.TypesAnnotated)<EOL>"}
{"signature": "fun test(x: X) {", "body": "<EOL><INDENT>val interface_as_fun = x.<!RESOLUTION_TO_CLASSIFIER!>A<!>()<EOL><INDENT>val interface_as_val = x.<!NESTED_CLASS_ACCESSED_VIA_INSTANCE_REFERENCE, NO_COMPANION_OBJECT!>A<!><EOL><EOL><INDENT>val object_as_fun = x.<!RESOLUTION_TO_CLASSIFIER!>B<!>()<EOL><INDENT>val class_as_val = x.<!NESTED_CLASS_ACCESSED_VIA_INSTANCE_REFERENCE, NO_COMPANION_OBJECT!>C<!><EOL>}"}
{"signature": "val sourcesDirs =", "body": "sourcesJar.entries().asSequence().map { it.name.substringBefore(<STR_LIT>) }.toSet() - <STR_LIT><EOL>"}
{"signature": "val candidatesMap =", "body": "candidateValues.associateBy { it.name }<EOL>"}
{"signature": "val myScriptResolverEnvironment =", "body": "mutableMapOf<String, String?>()<EOL>"}
{"signature": "val containsStdlib =", "body": "config.libraryToCache!!.klib == context.stdlibModule.konanLibrary<EOL>"}
{"signature": "val initialFileContent =", "body": "fileBuilder.stripAdditionalEmptyLines(file).toString()<EOL>"}
{"signature": "fun plusAssign() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>var seq = sequenceOf(<STR_LIT>)<EOL><INDENT><INDENT>seq += <STR_LIT><EOL><INDENT><INDENT>seq += listOf(<STR_LIT>)<EOL><INDENT><INDENT>seq += arrayOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>seq += sequenceOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>), seq.toList())<EOL><INDENT>}"}
{"signature": "fun visitBinaryAndEnterRightOperandNode(node: BinaryAndEnterRightOperandNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryAndEnterRightOperandNode(node)<EOL><INDENT>}"}
{"signature": "if (name == statement.label?.name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>unuseLabel(name)<EOL><INDENT><INDENT><INDENT><INDENT>hasChanges = true<EOL><INDENT><INDENT><INDENT><INDENT>JsEmpty<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultCatchStart =", "body": "markNewLabel()<EOL>"}
{"signature": "package localEA<EOL>.", "body": ""}
{"signature": "if (declaration.isComposableSingletonClass()) {", "body": "<EOL><INDENT><INDENT><INDENT>return declaration<EOL><INDENT><INDENT>}"}
{"signature": "val snd =", "body": "p.getSnd()<EOL>"}
{"signature": "val useSiteMemberScope =", "body": "firClass.unsubstitutedScope(c)<EOL>"}
{"signature": "var hazard =", "body": "false<EOL>"}
{"signature": "val dotDir =", "body": "zipRoot.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (!mapper.shouldBeExposed(classDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return ObjCIdType<EOL><INDENT><INDENT>}"}
{"signature": "fun interpretBody(body: IrBody) {", "body": "<EOL><INDENT><INDENT>if (body.statements.isEmpty()) callStack.pushState(getUnitState())<INDENT> }"}
{"signature": "if (moduleName != JvmProtoBufUtil.DEFAULT_MODULE_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(JvmProtoBuf.packageModuleName, stringTable.getStringIndex(moduleName))<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_PUBLISH_JVM_ENVIRONMENT_ATTRIBUTE =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val fromAliasedClassNode =", "body": "classes[fromTypeAlias.expandedType.classifierId]<EOL>"}
{"signature": "if (getJVMFunctionName(descriptor) != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val INDEX =", "body": "<STR_LIT><EOL>"}
{"signature": "val expectedDest =", "body": "Array(destSize) { -it - <NUM_LIT> }<EOL>"}
{"signature": "if (lastNode !== enterNode || lastNode.previousNodes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addEdgeToSubGraph(lastNode, graph.enterNode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!PropertiesProvider(project).wasmStabilityNoWarn) {", "body": "<EOL><INDENT><INDENT><INDENT>project.reportDiagnosticOncePerBuild(KotlinToolingDiagnostics.WasmStabilityWarning())<EOL><INDENT><INDENT>}"}
{"signature": "val substitutedSamType =", "body": "typeSubstitutor.substitute(samKotlinType, Variance.INVARIANT)<EOL>"}
{"signature": "val savedTypesCache =", "body": "hashMapOf<IrClassSymbol, Set<IrClassSymbol>>()<EOL>"}
{"signature": "fun serializeSingleTarget(<EOL><INDENT><INDENT>node: CirRootNode,<EOL><INDENT><INDENT>targetIndex: Int,<EOL><INDENT><INDENT>statsCollector: StatsCollector?,<EOL><INDENT><INDENT>moduleConsumer: (KlibModuleMetadata) -> Unit<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>node.accept(<EOL><INDENT><INDENT><INDENT>CirTreeSerializationVisitor(statsCollector, moduleConsumer),<EOL><INDENT><INDENT><INDENT>CirTreeSerializationContext.rootContext(node, targetIndex)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val distance =", "body": "(pattern shr <NUM_LIT>) and <NUM_LIT>xf<EOL>"}
{"signature": "fun visitReturnsEffectDeclaration(returnsEffect: ReturnsEffectDeclaration, data: Unit) {", "body": "<EOL><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT>returnsEffect.value.accept(this, data)<EOL><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val visitedElements =", "body": "mutableSetOf<FirElement>()<EOL>"}
{"signature": "if (bit == lookFor) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT> return bitIndex(index, offset)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val parserDefinition =", "body": "KotlinParserDefinition()<EOL>"}
{"signature": "val from =", "body": "expression.getTypeArgument(<NUM_LIT>)!!<EOL>"}
{"signature": "val lCacheIsNull =", "body": "Label()<EOL>"}
{"signature": "val flavor =", "body": "flavorName.lowercase()<EOL>"}
{"signature": "if (receiverParameterDescriptor == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return LabeledReceiverResolutionResult(Code.NO_THIS, null)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val COMPILATION_FAILED =", "body": "<STR_LIT><EOL>"}
{"signature": "if (irClass.isObjCMetaClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isNativeStdlibKey =", "body": "extrasKeyOf<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "val staticsScope =", "body": "staticsScopeOwnerSymbol?.getStaticsScope()<EOL>"}
{"signature": "if (it.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (thisKind != PrimitiveType.BYTE && thisKind != PrimitiveType.SHORT && thisKind == otherKind) {", "body": "<EOL><INDENT><INDENT><INDENT>return setAsExternal(thisKind)<EOL><INDENT><INDENT>}"}
{"signature": "if (target.wasmTargetType == KotlinWasmTargetType.WASI) {", "body": "<EOL><INDENT><INDENT><INDENT>project.objects.fileProperty()<EOL><INDENT><INDENT>}"}
{"signature": "val fooSignature =", "body": "C<String>().foo().javaClass.genericSuperclass.toString()<EOL>"}
{"signature": "if (uniqueName != null) {", "body": "<EOL><INDENT><INDENT>val digest = MessageDigest.getInstance(<STR_LIT>)<EOL><INDENT><INDENT>val hash = digest.digest(uniqueName.toByteArray(StandardCharsets.UTF_<NUM_LIT>)).toHexString()<EOL><INDENT><INDENT>versionCacheDirectory.resolve(hash)<EOL><INDENT>}"}
{"signature": "val aload =", "body": "reifiedInsn.next.next.next as VarInsnNode<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.arrayElementCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getArrayElement(i), new.getArrayElement(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "val groupedBySignature =", "body": "MultiMap.create<RawSignature, JvmDeclarationOrigin>()<EOL>"}
{"signature": "val isUsed =", "body": "field != null<EOL>"}
{"signature": "val originalLines =", "body": "oldFrontendTestDataFile.readLines()<EOL>"}
{"signature": "fun exec() {", "body": "<EOL><INDENT><INDENT>val expirationDate = Instant.now().minus(Duration.ofDays(timeToLiveInDays))<EOL><EOL><INDENT><INDENT>cleanableStoreProvider.get().cleanDir(expirationDate)<EOL><EOL><INDENT>}"}
{"signature": "val annotationCommonizer =", "body": "AnnotationsCommonizer.asCommonizer()<EOL>"}
{"signature": "val mergedAttributes =", "body": "if (shouldAddAttribute) attributes + CompilerConeAttributes.EnhancedNullability else attributes<EOL>"}
{"signature": "val localCommonFile =", "body": "File(localCommonFilePath).takeIf { it.exists() } ?: return globalCommonFiles<EOL>"}
{"signature": "val oldElement =", "body": "internalGet(internalIndex)<EOL>"}
{"signature": "val trueBoxNull =", "body": "TrueBox(null)<EOL>"}
{"signature": "var CREATE_BY_PATTERN_MAY_NOT_REFORMAT =", "body": "false<EOL>"}
{"signature": "if (value.type.isNothing()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isNumericRange) {", "body": "<EOL><INDENT><INDENT><INDENT>lowerExpression = lowerExpression.castIfNecessary(comparisonClass)<EOL><INDENT><INDENT><INDENT>upperExpression = upperExpression.castIfNecessary(comparisonClass)<EOL><INDENT><INDENT>}"}
{"signature": "fun consumeBoxedConcrete(arg: Box<Concrete>) {", "body": "}<EOL>fun consumeBoxedGeneric(arg: Box<Generic<*>>) {}"}
{"signature": "if (functionCall.getExpandedType().classId == StandardClassIds.KClass) {", "body": "<EOL><INDENT><INDENT><INDENT>return ConstantArgumentKind.NOT_KCLASS_LITERAL<EOL><INDENT><INDENT>}"}
{"signature": "val oldFriendPaths =", "body": "<STR_LIT>:lib\\<STR_LIT>libs/lib.klib\\<STR_LIT><EOL>"}
{"signature": "val oChar =", "body": "'O'<EOL>"}
{"signature": "if (newList != null && !hasDifference) {", "body": "<EOL><INDENT><INDENT><INDENT>return this<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until Byte.MIN_VALUE)  {", "body": "sb.append(i); sb.append(' ') }"}
{"signature": "if (hasVoidReturnType(this@computeJvmDescriptorWithoutName)) {", "body": "<EOL><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val PARCELIZE_CLASS_CLASS_IDS =", "body": "createClassIds(<STR_LIT>)<EOL>"}
{"signature": "val currentGeoMean =", "body": "createGeoMeanBenchmark(currentBenchmarks)<EOL>"}
{"signature": "val jvmNameExpression =", "body": "jvmNameEntry.valueArguments.firstOrNull()?.getArgumentExpression() as? KtStringTemplateExpression<EOL>"}
{"signature": "if (isTopLevelBuilderInferenceCall()) {", "body": "<EOL><INDENT><INDENT><INDENT>updateAllCalls(resultingSubstitutor)<EOL><INDENT><INDENT>}"}
{"signature": "val temporaryFilesDir =", "body": "arguments.tempDir<EOL>"}
{"signature": "fun replaceKind(newKind: ConstantValueKind<T>) {", "body": "<EOL><INDENT><INDENT>kind = newKind<EOL><INDENT>}"}
{"signature": "if (!analyzedElements.contains(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nextInlineFunctions.add(declaration)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in it until 'f') {", "body": "sb.append(i) }"}
{"signature": "val effectiveExpansion =", "body": "if (expansion == FOR_TOP_LEVEL_TYPE) FOR_NESTED_TYPE else expansion<EOL>"}
{"signature": "val outerLambda =", "body": "ecInner<EOL>"}
{"signature": "val KLIB_METADATA_FILE_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "fun addSuppressedDiagnosticsToContext(annotationContainer: FirAnnotationContainer) {", "body": "<EOL><INDENT><INDENT>val arguments = AbstractDiagnosticCollector.getDiagnosticsSuppressedForContainer(annotationContainer) ?: return<EOL><INDENT><INDENT>context = context.addSuppressedDiagnostics(<EOL><INDENT><INDENT><INDENT>arguments,<EOL><INDENT><INDENT><INDENT>allInfosSuppressed = AbstractDiagnosticCollector.SUPPRESS_ALL_INFOS in arguments,<EOL><INDENT><INDENT><INDENT>allWarningsSuppressed = AbstractDiagnosticCollector.SUPPRESS_ALL_WARNINGS in arguments,<EOL><INDENT><INDENT><INDENT>allErrorsSuppressed = AbstractDiagnosticCollector.SUPPRESS_ALL_ERRORS in arguments<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val modifierListStub =", "body": "PsiModifierListStubImpl(stub, firClass.packFlags())<EOL>"}
{"signature": "val objTypeOf =", "body": "jsTypeOf(obj)<EOL>"}
{"signature": "val syntheticForwardDeclarationClassCache =", "body": "<EOL><INDENT><INDENT>session.firCachesFactory.createCache(::createSyntheticForwardDeclarationClass)<EOL>"}
{"signature": "if (project.kotlinPropertiesProvider.kotlinExperimentalTryNext.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.reportOncePerGradleBuild(project, KotlinToolingDiagnostics.ExperimentalTryNextWarning())<EOL><INDENT><INDENT>}"}
{"signature": "val irGetVar =", "body": "expression.getSamConvertedGetValue()<EOL>"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.propertyExtensionReceiverAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.propertyExtensionReceiverAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "package test_visibility<EOL>.", "body": ""}
{"signature": "val resourceLoader =", "body": "BuiltInsResourceLoader()<EOL>"}
{"signature": "if (isGetterSupported) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>kind<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun before(s: String) {", "body": "<EOL><INDENT><INDENT>operationsTracer?.before(s)<EOL><INDENT>}"}
{"signature": "val deserializedFuture =", "body": "futureBinary.deserialize() as LenientFuture<*><EOL>"}
{"signature": "val US_START =", "body": "(US_MAX - <NUM_LIT>u).toUShort()<EOL>"}
{"signature": "val REF_AS_NOT_NULL =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this in 'a'..'z') {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val tvosSimulatorArm<NUM_LIT> =", "body": "KonanTarget.TVOS_SIMULATOR_ARM<NUM_LIT><EOL>"}
{"signature": "if (parentContext is ClosureContext && parentContext.originalSuspendLambdaDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>parentContext.originalSuspendLambdaDescriptor!!<EOL><INDENT><INDENT>}"}
{"signature": "val IS_SUSPEND =", "body": "FlagField.booleanAfter(IS_INLINE)<EOL>"}
{"signature": "val enclosingMethod =", "body": "javaClass<NUM_LIT>enclosingMethod<EOL>"}
{"signature": "if (shortName.startsWith(prefix)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val number = shortName.removePrefix(prefix)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return number.isNotEmpty() && number != <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if ((ix or lx.toInt()) == <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><EOL><INDENT><INDENT>x = doubleSetWord(d = x, hi = hy and Int.MIN_VALUE)<INDENT><EOL><INDENT><INDENT>x = doubleSetWord(d = x, lo = <NUM_LIT>)<EOL><INDENT><INDENT>y = x * x<EOL><INDENT><INDENT>if (y == x) return y; else return x<INDENT><EOL><INDENT>}"}
{"signature": "val constModifierPsiElement =", "body": "declaration.modifierList!!.getModifier(KtTokens.CONST_KEYWORD)!!<EOL>"}
{"signature": "if (symbol is IrFakeOverrideSymbolBase<*, *, *>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>remapper(symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!startingFile.module.shouldBeSkipped && visitedDeclarations.add(root)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>root.transformVoid(DeclarationTransformer(startingFile))<EOL><INDENT><INDENT><INDENT><INDENT>root.transformVoid(ExpressionTransformer(startingFile))<EOL><INDENT><INDENT><INDENT><INDENT>root.transformVoid(NonLocalReturnsPatcher(startingFile))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if(twoThirty == nine.toByte().toInt()) {", "body": "<EOL><INDENT>   return <STR_LIT><EOL><INDENT>}"}
{"signature": "val binaryRoots =", "body": "getBinaryRoots()<EOL>"}
{"signature": "var hasExplicitElseBranch =", "body": "false<EOL>"}
{"signature": "val separatedTestCasesUnexpectedBehaviorNumber =", "body": "cases.byNumbers.count { it.value.unexpectedBehavior }<EOL>"}
{"signature": "val packageDir =", "body": "if (packageName.isEmpty()) stubsOutputDir else File(stubsOutputDir, packageName.replace('.', '/'))<EOL>"}
{"signature": "if (line.property == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>otherUpperRanges.add(line.intRange())<EOL><INDENT><INDENT>}"}
{"signature": "val methodEnd =", "body": "Label()<EOL>"}
{"signature": "fun bind(owner: IrExternalPackageFragment) {", "body": "<EOL><INDENT><INDENT>_owner = owner<EOL><INDENT>}"}
{"signature": "var numberOfCallSitesToFunctionsWithGlobalInitializerCall =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visitComponentCall(componentCall: FirComponentCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processFunctionCall(componentCall)<EOL><INDENT><INDENT><INDENT><INDENT>super.visitComponentCall(componentCall)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ks<NUM_LIT>Foo =", "body": "ks<NUM_LIT>(::foo)<EOL>"}
{"signature": "if (intKind == Kind.GLOBAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return@test<NUM_LIT> Global(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val SPECIALIZED_EQUALS_SECOND_PARAMETER_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if ($UINT != '<NUM_LIT>') {", "body": "return <STR_LIT>; }"}
{"signature": "val info =", "body": "decoder.initDecode(file.context, mode.useVideo, mode.useAudio)<EOL>"}
{"signature": "val bitcodeExtension =", "body": "project.extensions.getByType<CompileToBitcodeExtension>()<EOL>"}
{"signature": "val directory =", "body": "file.parent<EOL>"}
{"signature": "val arrayHeaderSlot =", "body": "structGep(arrayType, arraySlot, <NUM_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val fromEntry =", "body": "processSingleClasspathEntry(entry)<EOL>"}
{"signature": "val nameIdentifier =", "body": "ktFunction.nameIdentifier ?: return<EOL>"}
{"signature": "if (symbol is KtFirSyntheticJavaPropertySymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>return symbol.javaSetterSymbol?.name<EOL><INDENT><INDENT>}"}
{"signature": "val fromCompareResult =", "body": "from.compareTo(other.from)<EOL>"}
{"signature": "if (flag and Pattern.UNIX_LINES != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return unixLT<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (androidSourceSet.name) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> COMMON_MAIN_SOURCE_SET_NAME<EOL><INDENT><INDENT><INDENT><STR_LIT> -> COMMON_TEST_SOURCE_SET_NAME<EOL><INDENT><INDENT><INDENT><STR_LIT> -> COMMON_TEST_SOURCE_SET_NAME<EOL><INDENT><INDENT><INDENT>else -> return<EOL><INDENT><INDENT>}"}
{"signature": "val test<NUM_LIT>b =", "body": "Outer.<!RESOLUTION_TO_CLASSIFIER!>TestInner<!>()<EOL>"}
{"signature": "when (typeBridge) {", "body": "<EOL><INDENT><INDENT>is ReferenceBridge -> objCReferenceToKotlin(value, resultLifetime)<EOL><INDENT><INDENT>is BlockPointerBridge -> objCBlockPointerToKotlin(value, typeBridge, resultLifetime)<EOL><INDENT><INDENT>is ValueTypeBridge -> objCToKotlin(value, typeBridge.objCValueType)<EOL><INDENT>}"}
{"signature": "val irExceptions =", "body": "mutableListOf<IrClass>()<EOL>"}
{"signature": "fun visitConditionalJump(instruction: ConditionalJumpInstruction) {", "body": "<EOL><INDENT><INDENT>visitJump(instruction)<EOL><INDENT>}"}
{"signature": "val arrayCopyOf =", "body": "builder.irSymbols.getArraysCopyOfFunction(unwrappedArrayType as IrSimpleType)<EOL>"}
{"signature": "if (isProperTypeForFixation(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>atLeastOneProper = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultBaseName =", "body": "binaryType.defaultBaseName<EOL>"}
{"signature": "if (actualDeclaration.isJavaField) {", "body": "<EOL><INDENT><INDENT><INDENT>return ExpectActualMatchingCompatibility.ActualJavaField<EOL><INDENT><INDENT>}"}
{"signature": "import ${prettyPrinters.", "body": "absolutePath}\"<EOL>"}
{"signature": "val dataChunked =", "body": "data.chunked(size).single()<EOL>"}
{"signature": "val isPrimitiveBoolean =", "body": "type.isPrimitiveBoolean()<EOL>"}
{"signature": "for (i in <NUM_LIT> until minOf(bn.nameCount, pn.nameCount)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (bn.getName(i) != parentPath) break<EOL><INDENT><INDENT><INDENT>if (pn.getName(i) != parentPath) throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun collectMetrics(incrementalCompilation: Boolean, metricsContainer: StatisticsValuesConsumer) {", "body": "<EOL><INDENT><INDENT>metricsContainer.report(BooleanMetrics.JS_KLIB_INCREMENTAL, incrementalCompilation)<EOL><INDENT>}"}
{"signature": "val jdkPropNameRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val rootCoroutineFinished =", "body": "AtomicBoolean()<EOL>"}
{"signature": "val newModality =", "body": "chooseIntersectionOverrideModality(extractedOverrides.flatMap { it.flattenIntersectionsRecursively() }.nonSubsumed())<EOL>"}
{"signature": "val oj =", "body": "JavaClass.id(o)<EOL>"}
{"signature": "val testCasesSet =", "body": "SpecTestCasesSet(mutableMapOf(), mutableMapOf(), mutableMapOf())<EOL>"}
{"signature": "else if (value is StoredValue.Store) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>value.temporaryVal.loads.add(insn as VarInsnNode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val labeledThisPsi =", "body": "thisReference.psi as? KtThisExpression ?: return<EOL>"}
{"signature": "package cases.", "body": "whenMappings<EOL>"}
{"signature": "fun funcTypeReturnType(arg: () -> Any) {", "body": "}<!><EOL><EOL><!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>actual fun funcTypeReceiverType(arg: Any.() -> Unit) {}"}
{"signature": "val LOMBOK_CONFIG_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val startBlock =", "body": "JsBlock()<EOL>"}
{"signature": "val liveLiteralInfoAnnotation =", "body": "<EOL><INDENT><INDENT>getTopLevelClass(ComposeClassIds.LiveLiteralInfo)<EOL>"}
{"signature": "package lib<EOL>.", "body": ""}
{"signature": "var usePsiClassFilesReading =", "body": "false<EOL>"}
{"signature": "val irSignatureBuilder =", "body": "PublicIdSignatureComputer(irMangler)<EOL>"}
{"signature": "fun testMacosNativeDependencies(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testNativeDependencies(<STR_LIT>, <STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "val specialCasing =", "body": "this[index].oneToManyUppercase()<EOL>"}
{"signature": "if (ConfigurationDirectives.WITH_STDLIB in module.directives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result += File(<STR_LIT>).absolutePath<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val useBuilderInferenceWithoutAnnotation =", "body": "<EOL><INDENT><INDENT><INDENT>languageVersionSettings.supportsFeature(LanguageFeature.UseBuilderInferenceWithoutAnnotation)<EOL>"}
{"signature": "val ifNullBranchResult =", "body": "ifNullBranch.result<EOL>"}
{"signature": "val PI_F =", "body": "kotlin.math.PI.toFloat()<EOL>"}
{"signature": "var memberVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (annotation.staticName == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val constructor = classDescriptor.createJavaConstructor(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>valueParameters = valueParameters,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visibility = annotation.visibility<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>partsBuilder.addConstructor(constructor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(s: B) {", "body": "}<EOL><INDENT>fun foo(c: Char) {}"}
{"signature": "if (SerialInfo.ON_ELEMENTS in enum.options.serialInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>$entry\\<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun testPostfixIncr<NUM_LIT>() {", "body": "<EOL><INDENT>var k = <NUM_LIT><EOL><INDENT>val t = k++<EOL><INDENT>use(k)<EOL><INDENT>use(t)<EOL>}"}
{"signature": "val bClasses =", "body": "mapToPlatformIndependentClasses(b, platformToKotlinClassMapper)<EOL>"}
{"signature": "val filteredImprovements =", "body": "filterBenchmarks(detailedReport.improvements)<EOL>"}
{"signature": "val BOX_MAIN_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for (fileRoot in roots) {", "body": "<EOL><INDENT><INDENT><INDENT>library.addRoot(fileRoot, JpsOrderRootType.COMPILED)<EOL><INDENT><INDENT>}"}
{"signature": "val bbNeedInit =", "body": "basicBlock(<STR_LIT>, null)<EOL>"}
{"signature": "fun check(expression: FirLoop, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>if (expression is FirErrorLoop) return<EOL><INDENT><INDENT>val condition = expression.condition<EOL><INDENT><INDENT>checkCondition(condition, context, reporter)<EOL><INDENT>}"}
{"signature": "when (baseKind.isReflectType) {", "body": "<EOL><INDENT><INDENT><INDENT>false -> matchingKind<EOL><INDENT><INDENT><INDENT>true -> matchingKind.reflectKind()<EOL><INDENT><INDENT>}"}
{"signature": "fun visitModuleDeclaration(descriptor: ModuleDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>platformSpecificModule(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val prettyMessage =", "body": "CInteropHints.fmodulesHint<EOL>"}
{"signature": "if (callableReference.getReferencedName().isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!expression.isEmptyLHS) resolveDoubleColonLHS(expression, c)<EOL><INDENT><INDENT><INDENT>c.trace.report(UNRESOLVED_REFERENCE.on(callableReference, callableReference))<EOL><INDENT><INDENT><INDENT>val errorType = ErrorUtils.createErrorType(ErrorTypeKind.EMPTY_CALLABLE_REFERENCE)<EOL><INDENT><INDENT><INDENT>return dataFlowAnalyzer.createCheckedTypeInfo(errorType, c, expression)<EOL><INDENT><INDENT>}"}
{"signature": "fun commonSrcFiles(vararg files: Any) {", "body": "<EOL><INDENT><INDENT>commonSrcFiles_.add(project.files(files))<EOL><INDENT>}"}
{"signature": "if (changes.sourceChanges.isNotEmpty() || impactedTypes.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>impactedTypes.addAll(aggregatingGeneratedTypes)<EOL><INDENT><INDENT>}"}
{"signature": "val commonReturnType =", "body": "NewCommonSuperTypeCalculator.commonSuperType(substitutedTypes)<EOL>"}
{"signature": "val optimized =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (kindFilter.acceptsKinds(DescriptorKindFilter.VARIABLES_MASK)) {", "body": "<EOL><INDENT><INDENT><INDENT>descriptors.addAll(getContributedVariables(aliasName, NoLookupLocation.WHEN_GET_ALL_DESCRIPTORS))<EOL><INDENT><INDENT>}"}
{"signature": "fun visitSimpleFunction(declaration: IrSimpleFunction, data: IrDeclaration?) {", "body": "<EOL><INDENT><INDENT>declaration.printSimpleFunction(<EOL><INDENT><INDENT><INDENT>data,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>declaration.name.asString(),<EOL><INDENT><INDENT><INDENT>printTypeParametersAndExtensionReceiver = true,<EOL><INDENT><INDENT><INDENT>printSignatureAndBody = true,<EOL><INDENT><INDENT><INDENT>printExtraTrailingNewLine = true,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val ma =", "body": "MyArray<Int>(<NUM_LIT>) { <NUM_LIT> }<EOL>"}
{"signature": "if (kotlinType.binaryRepresentationIsNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT>ObjCNullableReferenceType(this)<EOL><INDENT><INDENT>}"}
{"signature": "while (B()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>A(a)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until expression.arguments.size) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.arguments[i] = newArguments[i]!!<EOL><INDENT><INDENT>}"}
{"signature": "if (it is IrProperty && it.isFakeOverride) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>listOfNotNull(it.getter, it.setter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (fir.isHiddenToOvercomeSignatureClash == true && fir.isFinal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CONTENT_METHOD =", "body": "<STR_LIT><EOL>"}
{"signature": "val stepExpression =", "body": "literal.step?.let { Translation.translateAsExpression(it, context, stepBlock) }<EOL>"}
{"signature": "fun generateStepsTxt() {", "body": "<EOL><INDENT><INDENT><INDENT>File(dir, <STR_LIT>).setFileContent(steps.joinToString(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (indexInGroup != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>charIndex = checkContainsAt(charIndex, endIndex, byteSeparator, ignoreCase, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val mainConfigurationCalled =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "import User.", "body": "UserInfo<EOL>"}
{"signature": "val iter =", "body": "listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val LL_FIR_DIVERGENCE_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "import bar<EOL>.", "body": ""}
{"signature": "when (otherKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.BYTE -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.CHAR -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.SHORT -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.LONG -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.FLOAT -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.DOUBLE -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val _platformTypeCheckers =", "body": "ComposedTypeCheckers(MppCheckerKind.Platform)<EOL>"}
{"signature": "val sourceFunctionSubstitutor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CompositionTypeSubstitution(configuration.substitution, fromSourceFunctionTypeParameters).buildSubstitutor()<EOL>"}
{"signature": "val unusableClassifierSymbol =", "body": "unusableClassifier?.symbol ?: return false<EOL>"}
{"signature": "val classpathItems =", "body": "compilerArgsLine.substringAfter(<STR_LIT>).substringBefore(<STR_LIT>).split(File.pathSeparator)<EOL>"}
{"signature": "val fileAnnotationsToCheck =", "body": "arrayListOf<Pair<KtAnnotationEntry, ClassDescriptor>>()<EOL>"}
{"signature": "val superClassClause =", "body": "superClasses.toExtendsClause(indent)<EOL>"}
{"signature": "val libraryToInitializers =", "body": "dependencies.associate { it?.library to mutableListOf<LlvmCallable>() }<EOL>"}
{"signature": "var subjectString =", "body": "this.toString();<EOL>"}
{"signature": "fun testRenameModule() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "package for storing the generated function type interfaces.", "body": "<EOL>"}
{"signature": "val SHOULD_REPORT_MEMORY_USAGE_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in <NUM_LIT> until BENCHMARK_SIZE) {", "body": "<EOL><INDENT><INDENT><INDENT>Blackhole.consume(A.a)<EOL><INDENT><INDENT>}"}
{"signature": "val regressionsGeometricMean =", "body": "report.regressionsGeometricMean<EOL>"}
{"signature": "val additionalLibraryFiles =", "body": "(includedLibraryFiles + listOfNotNull(libraryToCacheFile)).toSet()<EOL>"}
{"signature": "val scopeExpansionMode =", "body": "CompileScopeExpansionMode.ALWAYS<EOL>"}
{"signature": "fun ignoredFun() {", "body": "}<EOL><EOL><INDENT>@KaptIgnored @get:KaptIgnored<EOL><INDENT>const val ignoredProperty: String = <STR_LIT><EOL><EOL><INDENT>fun nonIgnoredFun() {}"}
{"signature": "val ownedHeaders =", "body": "pendingDefFilesToHeaders.values.flatMap { it.ownHeaders }<EOL>"}
{"signature": "val compileTask =", "body": "project.tasks.getByName(taskName) as KotlinCompilationTask<*><EOL>"}
{"signature": "if (!KotlinTypeChecker.DEFAULT.isSubtypeOf(expressionType, actualReturnType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.TYPE_MISMATCH.on(expression, expressionType, actualReturnType))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (skipIfPrivate(member)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (currentElement == null && designation.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>currentElement = designation.next()<EOL><INDENT><INDENT>}"}
{"signature": "if (afterMessage) {", "body": "<EOL><INDENT><INDENT><INDENT>if (text.startsWith(<STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>text.removePrefix(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>text.removePrefix(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (xk + yk == xy) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cntMid++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cnt++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val INLINE_CONST_TRACKER =", "body": "CompilerConfigurationKey.create<InlineConstTracker>(<STR_LIT>)<EOL>"}
{"signature": "fun scheduleLeaveVariable(runnable: Runnable) {", "body": "<EOL><INDENT><INDENT>leaveVariableTasks.add(runnable)<EOL><INDENT>}"}
{"signature": "fun useModuleStructureTransformers(vararg transformers: Constructor<ModuleStructureTransformer>) {", "body": "<EOL><INDENT><INDENT>moduleStructureTransformers += transformers<EOL><INDENT>}"}
{"signature": "fun appendSignature(signature: CirTypeSignature, classifierId: CirEntityId) {", "body": "<EOL><INDENT><INDENT><INDENT>return signature.add(associatedIdsResolver.resolveAssociatedIds(classifierId) ?: classifierId)<EOL><INDENT><INDENT>}"}
{"signature": "val files<NUM_LIT>add =", "body": "allSubtypes.mapNotNull { classFqNameToSourceMap[it] }.filter { !processedFiles.contains(it) }<EOL>"}
{"signature": "val lineToStub =", "body": "ArrayList<Stub>()<EOL>"}
{"signature": "fun otherTest(call: Call<*>, resolvedCall: ResolvedCall<*>) {", "body": "<EOL><INDENT>call.resultingDescriptor.name<EOL><INDENT>resolvedCall.resultingDescriptor.name<EOL>}"}
{"signature": "val mainModuleDependency =", "body": "Dependency(MAIN_MODULE_NAME, mainModuleKlibFile)<EOL>"}
{"signature": "val fileDescriptor =", "body": "DebugProtoBuf.getDescriptor()<EOL>"}
{"signature": "if (a?.returnsNull(s) == null) {", "body": "<EOL><INDENT><INDENT>s.<!UNRESOLVED_REFERENCE!>length<!><INDENT> }"}
{"signature": "val originalAst =", "body": "JsCompositeBlock()<EOL>"}
{"signature": "if (sign < <NUM_LIT> || (<NUM_LIT>f).toBits() == sign.toBits()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>negMagnitudeBits, resultBits)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (data.classShouldBeKept) {", "body": "<EOL><INDENT><INDENT><INDENT>keptDeclarations.add(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (customNativeHome == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(kotlinNativeCompilerEmbeddable!!.files)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (x.name.imported) {", "body": "<EOL><INDENT><INDENT><INDENT>pseudoImports += x<EOL><INDENT><INDENT>}"}
{"signature": "val AssociatedObjectKey =", "body": "<STR_LIT>.reflectId()<EOL>"}
{"signature": "fun t(addCommaWarning: <expr>@Anno</expr> Boolean) {", "body": "<EOL><EOL>}"}
{"signature": "when (val y = id(x!!)) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> x.length<EOL><INDENT><INDENT><STR_LIT> -> y.length<EOL><INDENT>}"}
{"signature": "val exportForCompilerClassId =", "body": "ClassId(kotlinNativeInternalPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "var needsHiddenFake =", "body": "isList && (name == GET_FIRST_NAME || name == GET_LAST_NAME)<EOL>"}
{"signature": "val configurationTimeMetrics =", "body": "MetricContainer()<EOL>"}
{"signature": "if (parameter.defaultValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(parameter.source, FirWasmErrors.WASM_IMPORT_EXPORT_PARAMETER_DEFAULT_VALUE, context)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedDispatchReceiver =", "body": "functionDescriptor.dispatchReceiverParameter<EOL>"}
{"signature": "var newA =", "body": "aOther<EOL>"}
{"signature": "if (classKind == ClassKind.ENUM_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>generateValuesFunction(<EOL><INDENT><INDENT><INDENT><INDENT>moduleData,<EOL><INDENT><INDENT><INDENT><INDENT>classId.packageFqName,<EOL><INDENT><INDENT><INDENT><INDENT>classId.relativeClassName,<EOL><INDENT><INDENT><INDENT><INDENT>origin = initialOrigin<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>generateValueOfFunction(moduleData, classId.packageFqName, classId.relativeClassName, origin = initialOrigin)<EOL><INDENT><INDENT><INDENT>generateEntriesGetter(moduleData, classId.packageFqName, classId.relativeClassName, origin = initialOrigin)<EOL><INDENT><INDENT>}"}
{"signature": "val genericClient =", "body": "descriptor!!.getValue() as TestImplicitGenericClient<EOL>"}
{"signature": "else if (other.isNegative()) {", "body": "<EOL><INDENT><INDENT>return div(other.negate()).negate()<EOL><INDENT>}"}
{"signature": "val addLen =", "body": "toIndex - fromIndex<EOL>"}
{"signature": "val SMAP_NON_SEP_EXT =", "body": "<STR_LIT><EOL>"}
{"signature": "val marker =", "body": "previous as? MethodInsnNode ?: return false<EOL>"}
{"signature": "fun restoreInContextOf() {", "body": "<EOL><INDENT><caret_restoreAt><EOL>}"}
{"signature": "val prevPrintBinary =", "body": "printIntsAsBinary<EOL>"}
{"signature": "val representative =", "body": "returnTypeClass.defaultType.supertypes().firstOrNull() ?: return null<EOL>"}
{"signature": "val possibleCastClass =", "body": "possibleCastType.constructor.declarationDescriptor as? ClassDescriptor ?: continue<EOL>"}
{"signature": "package valid<NUM_LIT><EOL>.", "body": ""}
{"signature": "val nativeTargets =", "body": "addCommonTestClassSettingsTo(enclosingTestClass, this)<EOL>"}
{"signature": "fun foobar(block: (Double) -> Unit) {", "body": "}"}
{"signature": "fun caseJsEq() {", "body": "<EOL><INDENT><INDENT> assertFalse(nullable_<NUM_LIT> == nullable_<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val projectStructureProvider =", "body": "project.getService(ProjectStructureProvider::class.java)<EOL>"}
{"signature": "if (x.isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ctx.removeMe()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>hasChanges = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (field.isFinal && field.fromParent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nextAsConst =", "body": "next.wrapInToStringConcatAndInterpret()<EOL>"}
{"signature": "val assignedValue =", "body": "wrapWithImplicitCastForAssignment(variableAssignment, visitor.convertToIrExpression(variableAssignment.rValue))<EOL>"}
{"signature": "val mainKotlinFile =", "body": "findMainTestKotlinFile(testDirectory).toFile()<EOL>"}
{"signature": "val matchingCompatibilityToMembersMap =", "body": "declaration.symbol.expectForActual.orEmpty()<EOL>"}
{"signature": "fun testUtf<NUM_LIT>Bom() {", "body": "<EOL><INDENT><INDENT>val scriptPath = <STR_LIT><EOL><INDENT><INDENT>Assert.assertTrue(<STR_LIT>, File(scriptPath).readText().startsWith(UTF<NUM_LIT>_BOM))<EOL><INDENT><INDENT>val res = evalFile(File(scriptPath))<EOL><INDENT><INDENT>assertSucceeded(res)<EOL><INDENT>}"}
{"signature": "val lastSlashIndex =", "body": "string.lastIndexOf(<STR_LIT>, if (tickIndex == <NUM_LIT>) string.length else tickIndex)<EOL>"}
{"signature": "if (completion is CoroutineImpl) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>current = completion<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package jvmTest<EOL>.", "body": ""}
{"signature": "while (lexer.tokenType != null && lexer.tokenType != KtTokens.EOF) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (lexer.tokenType == KtTokens.ARROW) return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (lexer.tokenType != KtTokens.WHITE_SPACE) return false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>lexer.advance()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val capturingClasses =", "body": "collectCapturingClasses(irScript, typeRemapper)<EOL>"}
{"signature": "fun containsRegex(vararg otherPatterns: String) {", "body": "}<EOL><EOL>fun main() {<EOL><INDENT>fun<NUM_LIT>(::containsRegex, arrayOf(<STR_LIT>))<EOL>}"}
{"signature": "val valueSameClassCompanion =", "body": "<NUM_LIT><!><EOL>"}
{"signature": "if (needRegisterJavaElementFinder) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>projectEnvironment.registerAsJavaElementFinder(it)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var linkageIssuesLogged =", "body": "<NUM_LIT><EOL>"}
{"signature": "if ($LIB_ULINT != '<NUM_LIT>') {", "body": "return <STR_LIT>; }"}
{"signature": "fun visitWhenBranchResultExitNode(node: WhenBranchResultExitNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitWhenBranchResultExitNode(node)<EOL><INDENT>}"}
{"signature": "val unboundReceiver =", "body": "extensionReceiverParameter ?: dispatchReceiverParameter<EOL>"}
{"signature": "if (recordedCompileTimeConstant != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return recordedCompileTimeConstant<EOL><INDENT><INDENT>}"}
{"signature": "if (originalType !is ConeStubType) {", "body": "<EOL><INDENT><INDENT><INDENT>it += originalType.fullyExpandedType(session)<EOL><INDENT><INDENT>}"}
{"signature": "if (method.isAbstract || !jvmDefaultMode.isEnabled && psiClass.isInterface && !method.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>printlnWithNoIndent(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val capturedStarProjectionOrNull =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>capturedType?.typeConstructorProjection()?.takeIf { it.isStarProjection() }<EOL>"}
{"signature": "val QUANT_STAR_P =", "body": "QMOD_POSSESSIVE or '*'.toInt()<EOL>"}
{"signature": "val minus =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u - <NUM_LIT>u<!><EOL>"}
{"signature": "val aif =", "body": "AIF()<EOL>"}
{"signature": "fun genValueAndPut(<EOL><INDENT><INDENT>valueParameterDescriptor: ValueParameterDescriptor?,<EOL><INDENT><INDENT>argumentExpression: KtExpression,<EOL><INDENT><INDENT>parameterType: JvmKotlinType,<EOL><INDENT><INDENT>parameterIndex: Int<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val needReification =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>instanceInstuction.previous.takeIf { isNeedClassReificationMarker(it) }?.let { toDelete.add(it) } != null<EOL>"}
{"signature": "fun printStackTrace(s: PrintWriter?) {", "body": "<EOL><INDENT><INDENT>super.printStackTrace(s)<EOL><INDENT>}"}
{"signature": "for ((old, new) in parameterMapping.entries) {", "body": "<EOL><INDENT><INDENT>new.defaultValue = old.defaultValue?.transform(VariableRemapper(parameterMapping), null)<EOL><INDENT>}"}
{"signature": "val bitsWithPaddingPtr =", "body": "bitcast(pointerType(bitsWithPaddingType), gep(llvm.int<NUM_LIT>Type, ptr, llvm.int<NUM_LIT>(offset / <NUM_LIT>)))<EOL>"}
{"signature": "val superInterfaceSimpleObjectProperties =", "body": "createJsPlainObjectProperties(superInterface)<EOL>"}
{"signature": "val databaseDir =", "body": "<STR_LIT><EOL>"}
{"signature": "val clashedFakeOverrides =", "body": "mutableMapOf<DeclarationDescriptor, Pair<DeclarationDescriptor, DeclarationDescriptor>>()<EOL>"}
{"signature": "val charArr =", "body": "charArrayOf('d', 'c', 'E', 'a', '\\u<NUM_LIT>', '\\uFFFF')<EOL>"}
{"signature": "for (it in declaration.superTypeRefs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkTypeRef(it, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!konanConfig.produce.isHeaderCache) {", "body": "<EOL><INDENT><INDENT><INDENT>konanConfig.cacheSupport.checkConsistency()<EOL><INDENT><INDENT>}"}
{"signature": "val includeRuntime =", "body": "configuration.get(JVMConfigurationKeys.INCLUDE_RUNTIME, false)<EOL>"}
{"signature": "fun testContextualDeclarationUse() {", "body": "<EOL><INDENT><INDENT>val library = compileLibrary(<STR_LIT>, additionalOptions = listOf(<STR_LIT>))<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(library), additionalOptions = listOf(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val DEPRECATED_TARGET_MESSAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "val T_FUNCTION_EXPRESSION =", "body": "targetList(ANONYMOUS_FUNCTION, FUNCTION, EXPRESSION)<EOL>"}
{"signature": "fun storeRangeStartAndEnd() {", "body": "<EOL><INDENT><INDENT>loopParameter().store(startValue, v)<EOL><INDENT><INDENT><INDENT><INDENT>if (!isStartInclusive) incrementLoopVariable()<EOL><EOL><INDENT><INDENT>StackValue.local(endVar, asmElementType).store(endValue, v)<EOL><INDENT>}"}
{"signature": "for (i in MaxUI..MinUI) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "fun deleteBaseSymlinkToDirectory() {", "body": "<EOL><INDENT><INDENT>val dir = createTestFiles().cleanupRecursively()<EOL><INDENT><INDENT>val link = createTempDirectory().cleanupRecursively().resolve(<STR_LIT>).tryCreateSymbolicLinkTo(dir) ?: return<EOL><EOL><INDENT><INDENT>link.deleteRecursively()<EOL><INDENT><INDENT>assertFalse(link.exists(LinkOption.NOFOLLOW_LINKS))<EOL><INDENT><INDENT>testVisitedFiles(listOf(<STR_LIT>) + referenceFilenames, dir.walkIncludeDirectories(), dir)<EOL><INDENT>}"}
{"signature": "val needInterfaceTable =", "body": "!irClass.isInterface && !irClass.isAbstract() && !irClass.isObjCClass()<EOL>"}
{"signature": "val STATEMENT_LIKE_OPERATORS =", "body": "setOf(SET) + ASSIGNMENT_OPERATIONS<EOL>"}
{"signature": "val dirty =", "body": "metas.find { it.paramRef?.maskParam is IrChangedBitMaskVariable }<EOL>"}
{"signature": "val elemKind =", "body": "b.readByte()<EOL>"}
{"signature": "fun replaceExhaustivenessStatus(newExhaustivenessStatus: ExhaustivenessStatus?) {", "body": "<EOL><INDENT><INDENT>exhaustivenessStatus = newExhaustivenessStatus<EOL><INDENT>}"}
{"signature": "fun fn(f: () -> Unit) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>fn(::foo)<EOL>}"}
{"signature": "if (needDispatchReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>add(Type.getObjectType(thisName) to <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val anotherCurrent =", "body": "KotlinVersion.CURRENT.run { KotlinVersion(major, minor, patch) }<EOL>"}
{"signature": "val javaMainSrcDir =", "body": "javaSourceRootForCompilation(<STR_LIT>)<EOL>"}
{"signature": "if (!scope.isInlinedLambda) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(s: Any) {", "body": "<EOL><INDENT>requireIsTrue(s is String)<EOL><INDENT>s.length<EOL>}"}
{"signature": "var _delegatingProperty =", "body": "GenericDelegate<String>()<EOL>"}
{"signature": "val worker =", "body": "Worker.start()<EOL>"}
{"signature": "var specificValueParameterTypes =", "body": "specific.valueParameterTypes<EOL>"}
{"signature": "val companionProp =", "body": "<STR_LIT><EOL>"}
{"signature": "if (recursively) {", "body": "<EOL><INDENT><INDENT><INDENT>FSOperations.markDirtyRecursively(compileContext, CompilationRound.NEXT, chunk, ::shouldMark)<EOL><INDENT><INDENT>}"}
{"signature": "when (simplePlatforms.size) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> unspecifiedNativePlatform<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> nativePlatformBySingleTarget(simplePlatforms.first().target)<EOL><INDENT><INDENT><INDENT>else -> TargetPlatform(simplePlatforms)<EOL><INDENT><INDENT>}"}
{"signature": "val subSequenceSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>StringBuilder(StringBuilder(MyCharSequence(<STR_LIT>)).subSequence(<NUM_LIT>, <NUM_LIT>)).length<!><EOL>"}
{"signature": "if (it.fir.isPrimary && constructorSymbol == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>constructorSymbol = it<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val strIntegerPart =", "body": "strings[<NUM_LIT>]<EOL>"}
{"signature": "when (reflectionTarget) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is IrConstructorSymbol -> innerClassesSupport.getInnerClassConstructorWithOuterThisParameter(reflectionTarget.owner)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is IrSimpleFunctionSymbol -> null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val currentClassLoader =", "body": "Thread.currentThread().contextClassLoader<EOL>"}
{"signature": "val comments =", "body": "children.takeWhile { it.tokenType in FILLER_TOKENS }<EOL>"}
{"signature": "fun method<NUM_LIT>() {", "body": "}<EOL><INDENT>val prop<NUM_LIT>: String = <STR_LIT><EOL><EOL><INDENT>final fun method<NUM_LIT>() {}"}
{"signature": "val isUninitialized =", "body": "trace.bindingContext.get(IS_UNINITIALIZED, propertyDescriptor) ?: false<EOL>"}
{"signature": "val constructorCapturedVars =", "body": "usageTracker.capturedDescriptors<EOL>"}
{"signature": "fun visitVariable(variable: FirVariable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>indexDeclaration(variable)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visitElement(variable)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeRef.receiverTypeRef != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(CompilerConeAttributes.ExtensionFunctionType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val arityString =", "body": "fqNameAsString.substring(prefix.length)<EOL>"}
{"signature": "if (entry.parent != superTypeList) {", "body": "<EOL><INDENT><INDENT>superTypeList.addEntry(entryToAdd)<EOL><INDENT>}"}
{"signature": "fun test(array: Array<(Int)->Unit>) {", "body": "<EOL><INDENT>array[<NUM_LIT>](<NUM_LIT>)<EOL>}"}
{"signature": "val moduleDescriptorProvider =", "body": "testServices.moduleDescriptorProvider<EOL>"}
{"signature": "val sessionForFile =", "body": "moduleForFile.getFirResolveSession(project)<EOL>"}
{"signature": "val metadataCompilations =", "body": "target.awaitMetadataCompilationsCreated()"}
{"signature": "fun foo<NUM_LIT>(c: MutableSet<Any>) {", "body": "}"}
{"signature": "val callArgsExit =", "body": "node.previousNodes.singleOrNull { it is FunctionCallArgumentsExitNode }<EOL>"}
{"signature": "val closestClassId =", "body": "findMostInnerClassMatchingId(from, candidates)<EOL>"}
{"signature": "val fooVarBR =", "body": "Z(<NUM_LIT>U, <NUM_LIT>)::fooVar<EOL>"}
{"signature": "val intArray =", "body": "uintArray.toIntArray()<EOL>"}
{"signature": "fun replaceBoundSymbol(newBoundSymbol: FirBasedSymbol<*>?) {", "body": "}<EOL><EOL><INDENT>override fun replaceContextReceiverNumber(newContextReceiverNumber: Int) {<EOL><INDENT><INDENT>contextReceiverNumber = newContextReceiverNumber<EOL><INDENT>}"}
{"signature": "val moduleRoot =", "body": "FileUtil.createTempDirectory(module.name, null)<EOL>"}
{"signature": "val buildResult =", "body": "gradleRunnerForBuild.buildAndFail()<EOL>"}
{"signature": "val normalOrdering =", "body": "bean.javaClass.normalOrdering<EOL>"}
{"signature": "val nextExpressionIndexAfterQualifier =", "body": "<EOL><INDENT><INDENT><INDENT>if (nextIndexAfterPrefix == <NUM_LIT>) <NUM_LIT> else nextIndexAfterPrefix - <NUM_LIT><EOL>"}
{"signature": "val singleAnnotation =", "body": "packageFragmentDescriptor.annotations.singleOrNull()<EOL>"}
{"signature": "val anyPrimaryConstructor =", "body": "companionObjectDescriptor.builtIns.any.unsubstitutedPrimaryConstructor!!<EOL>"}
{"signature": "fun forEachNonScopeNode(block: (Node) -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>for (scope in allScopes)<EOL><INDENT><INDENT><INDENT><INDENT>for (node in scope.nodes)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (node !is Node.Scope)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>block(node)<EOL><INDENT><INDENT>}"}
{"signature": "val subnodesIndices =", "body": "subnodes.subnodeIndices<EOL>"}
{"signature": "if (reportingSettings().buildReportMode == BuildReportMode.VERBOSE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>args.reportPerf = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun func() {", "body": "}<EOL><EOL>@<!INAPPLICABLE_FILE_TARGET{PSI}"}
{"signature": "val typeRefsFromSession =", "body": "(getSupertypesComputationStatus(firClass) as? SupertypeComputationStatus.Computed)?.supertypeRefs<EOL>"}
{"signature": "val backupDirectory =", "body": "directory.resolve(<STR_LIT>)<EOL>"}
{"signature": "var box =", "body": "<STR_LIT><EOL>"}
{"signature": "when (val s = name) {", "body": "<EOL><INDENT><INDENT>null -> return<EOL><INDENT>}"}
{"signature": "val rangeExpression =", "body": "expression.loopRange.toFirExpression(<STR_LIT>)<EOL>"}
{"signature": "val fourthActionExecuted =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "for ((contextArgument, contextParameter) in expression.contextReceiverArguments.zip(symbol.resolvedContextReceivers)) {", "body": "<EOL><INDENT><INDENT><INDENT>contextArgument.checkExpressionForEnhancedTypeMismatch(<EOL><INDENT><INDENT><INDENT><INDENT>expectedType = substitutor.substituteOrSelf(contextParameter.typeRef.coneType),<EOL><INDENT><INDENT><INDENT><INDENT>reporter,<EOL><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT>FirJvmErrors.NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitCall(expression: IrCall) {", "body": "<EOL><INDENT><INDENT>expression.symbol = resolver.getReferencedSimpleFunction(expression.symbol)<EOL><INDENT><INDENT>visitElement(expression)<EOL><INDENT>}"}
{"signature": "val irEntry =", "body": "irFactory.createEnumEntry(startOffset, endOffset, origin, descriptor.name, symbol)<EOL>"}
{"signature": "val subTypeParameters =", "body": "subDescriptor.typeParameters<EOL>"}
{"signature": "val symlinkToNotJava =", "body": "Files.createSymbolicLink(File(tempDir, <STR_LIT>).toPath(), notJava.toPath()).toFile()<EOL>"}
{"signature": "val companionObjectFqName =", "body": "companionObjectClassId.asSingleFqName()<EOL>"}
{"signature": "for (i in hiddenParameters.indices.reversed()) {", "body": "<EOL><INDENT><INDENT><INDENT>val (param, offset) = hiddenParameters[i]<EOL><INDENT><INDENT><INDENT>StackValue.local(offset, param.type).store(StackValue.onStack(param.typeOnStack), codegen.visitor)<EOL><INDENT><INDENT>}"}
{"signature": "var variableToResolve =", "body": "<STR_LIT><EOL>"}
{"signature": "fun writeBoolean(boolean: Boolean) {", "body": "<EOL><INDENT><INDENT>output.writeBoolean(boolean)<EOL><INDENT>}"}
{"signature": "if (parentLookupTag != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>@OptIn(UnsafeDuringIrConstructionAPI::class)<EOL><INDENT><INDENT><INDENT>return classifierStorage.getIrClassSymbol(parentLookupTag)?.owner<EOL><INDENT><INDENT>}"}
{"signature": "val oldBody =", "body": "irFunction.body as? IrBlockBody ?: return<EOL>"}
{"signature": "val APPEND =", "body": "<STR_LIT><EOL>"}
{"signature": "val activityDescriptor =", "body": "find(AndroidConst.ACTIVITY_FQNAME) ?: return SyntheticElementResolveContext.ERROR_CONTEXT<EOL>"}
{"signature": "val divisor =", "body": "v<NUM_LIT>toLong()<EOL>"}
{"signature": "import was printed, `false` if no imports were printed.", "body": "<EOL>"}
{"signature": "val loadsCount =", "body": "<STR_LIT><EOL>"}
{"signature": "val original =", "body": "super.visitCall(expression) as IrCall<EOL>"}
{"signature": "if (myAssert(y is Int) == Unit && myAssert(<!USELESS_IS_CHECK!>y is String<!>) == Unit) {", "body": "<EOL><INDENT><INDENT>y.length<EOL><INDENT><INDENT>y.inc()<EOL><INDENT>}"}
{"signature": "val canExtractGlobalInitializerCall =", "body": "isNotOptimizedAwayGlobalInitializerCall<EOL>"}
{"signature": "val byDirectory =", "body": "file.isDirectory && (name in excludeDirs || name in excludeDirsRecursively)<EOL>"}
{"signature": "if (implFun.extensionReceiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT>accessorRef.putValueArgument(accessorArgIndex++, implFunRef.extensionReceiver)<EOL><INDENT><INDENT>}"}
{"signature": "val OPT_IN_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val longBounds =", "body": "<STR_LIT> to <STR_LIT><EOL>"}
{"signature": "val userAttribute =", "body": "Attribute.of(<STR_LIT>, String::class.java)<EOL>"}
{"signature": "when (val z = if (x == null) break@loop else x) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val myGcMetrics =", "body": "HashMap<String, GcMetric>()<EOL>"}
{"signature": "fun visitTypeProjection(typeProjection: FirTypeProjection, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeProjection(typeProjection)<EOL><INDENT>}"}
{"signature": "val iterator<NUM_LIT> =", "body": "stream<NUM_LIT>iterator()<EOL>"}
{"signature": "if (delimiter.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>arrayOf(value as String)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun TestDifferencesInInternalAndPublicVisibilitiesAReverse() {", "body": "}<EOL><EOL>class TestDifferencesInInternalAndPublicVisibilitiesB {<EOL><INDENT>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) public constructor()<EOL>}"}
{"signature": "when (booleanConstantDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>ConeContractConstantValues.TRUE -> KtContractBooleanConstantExpression(true, builder.token)<EOL><INDENT><INDENT><INDENT>ConeContractConstantValues.FALSE -> KtContractBooleanConstantExpression(false, builder.token)<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val actualIterator =", "body": "generateArrayDeque(head, tail, bufferSize).listIterator(index)<EOL>"}
{"signature": "val varargVariable =", "body": "environment.callStack.loadState(elementsSymbol)<EOL>"}
{"signature": "val RIGHT =", "body": "true<EOL>"}
{"signature": "fun doSmth(resultHandler: ResultHandler<Boolean>) {", "body": "<EOL><INDENT>resultHandler.onResult(Result.success(true))<EOL>}"}
{"signature": "package parts like this (search by FQ name of 'p<NUM_LIT>')<EOL>.", "body": ""}
{"signature": "if (messageCollector.hasErrors()) {", "body": "<EOL><INDENT><INDENT>exitProcess(ExitCode.COMPILATION_ERROR.code)<EOL><INDENT>}"}
{"signature": "if (exp <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>resultValue = <NUM_LIT>UL<EOL><INDENT><INDENT>}"}
{"signature": "val headerKlibLib =", "body": "File(getHeaderPath(<STR_LIT>))<EOL>"}
{"signature": "if (target is FirProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>deprecations[target] = target.extractDeprecationInfoPerUseSite(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>session = session,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>customAnnotations = annotationMap[target].orEmpty(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getterAnnotations = target.getter?.let(annotationMap::get).orEmpty(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>setterAnnotations = target.setter?.let(annotationMap::get).orEmpty(),<EOL><INDENT><INDENT><INDENT><INDENT>).toDeprecationsProvider(cacheFactory)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun assertCompileFails(<EOL><INDENT>repl: JvmTestRepl,<EOL><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT>line: String<EOL>) {", "body": "<EOL><INDENT>val compiledSnippet =<EOL><INDENT><INDENT>checkCompile(repl, line)<EOL><EOL><INDENT>TestCase.assertNull(compiledSnippet)<EOL>}"}
{"signature": "fun newDiagnostic(<EOL><INDENT><INDENT>element: KtElement,<EOL><INDENT><INDENT>factory: DebugInfoDiagnosticFactory<NUM_LIT><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>debugAnnotations.add(<EOL><INDENT><INDENT><INDENT>ActualDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT>DebugInfoDiagnostic(element, factory), platform, withNewInference<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val aliasedFunction =", "body": "aliasedFunctionNode.targetDeclarations[targetIndex] ?: return@forEach<EOL>"}
{"signature": "fun visitElement(element: FirElement)<EOL><EOL><INDENT>final override fun visitAnnotationContainer(annotationContainer: FirAnnotationContainer, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnnotationContainer(annotationContainer)<EOL><INDENT>}"}
{"signature": "if (old.hasVersion()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.version != new.version) return false<EOL><INDENT><INDENT>}"}
{"signature": "val PLATFORM_PACKAGE_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun m(@Ann s: String) {", "body": "<EOL><INDENT>}"}
{"signature": "if (stateSnapshot.threadId == Thread.currentThread().id) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return stateSnapshot.value as VALUE<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitExitSafeCallNode(node: ExitSafeCallNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitExitSafeCallNode(node)<EOL><INDENT>}"}
{"signature": "if (status.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun addConstantSymbol(sym: Symbol) {", "body": "<EOL><INDENT><INDENT>val name = sym.name<EOL><INDENT><INDENT>val containingClass = sym.owner<EOL><EOL><INDENT><INDENT>sourceStructure.addMentionedConstant(containingClass.qualifiedName.toString(), name.toString())<EOL><INDENT>}"}
{"signature": "val xmlDoc =", "body": "DocumentBuilderFactory.newInstance().newDocumentBuilder()<EOL>"}
{"signature": "for (stackValue in stackContent.subList(expectedStackSize, stackContent.size)) {", "body": "<EOL><INDENT><INDENT><INDENT>insert(node, InsnNode(stackValue.popOpcode))<EOL><INDENT><INDENT>}"}
{"signature": "val gLocal =", "body": "<STR_LIT><EOL>"}
{"signature": "val methodsList =", "body": "mutableListOf<KtLightMethod>()<EOL>"}
{"signature": "fun testKotlinStdLibJsWithInvalidKlib() {", "body": "<EOL><INDENT><INDENT>doTestKotlinStdLibResolve(<EOL><INDENT><INDENT><INDENT>JsPlatforms.defaultJsPlatform,<EOL><INDENT><INDENT><INDENT>PathUtil.kotlinPathsForDistDirectory.jsStdLibKlibPath.toPath(),<EOL><INDENT><INDENT><INDENT>additionalStdlibRoots = listOf(<EOL><INDENT><INDENT><INDENT><INDENT>Paths.get(System.getProperty(<STR_LIT>)),<INDENT><INDENT><INDENT><INDENT> PathUtil.kotlinPathsForDistDirectory.stdlibPath.toPath(),<INDENT><INDENT><INDENT> )<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val frameAtStart =", "body": "frames[insnList.indexOf(lv.start)] ?: continue<EOL>"}
{"signature": "if (calleeComputationState == ComputationState.PENDING) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>escapeAnalysisResults[callee] = FunctionEscapeAnalysisResult.pessimistic(callee.parameters.size)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ktFileText =", "body": "decompiledText(fileWithMetadata, serializerProtocol(), DynamicTypeDeserializer, renderer)<EOL>"}
{"signature": "if (smartCastTypeToUse != null && result != null) {", "body": "<EOL><INDENT><INDENT><INDENT>KtSmartCastedReceiverValue(result, smartCastTypeToUse.toKtType(analysisContext))<EOL><INDENT><INDENT>}"}
{"signature": "fun notify() {", "body": "}<!><EOL><!ACCIDENTAL_OVERRIDE!>fun notifyAll() {}"}
{"signature": "val DEPTH_MASK =", "body": "<NUM_LIT>xFFFF"}
{"signature": "val Z =", "body": "<STR_LIT><EOL>"}
{"signature": "val actualSources =", "body": "extractCompiledJavaFiles(projectPath.toRealPath().toFile(), output)<EOL>"}
{"signature": "val assignPrototype =", "body": "assignment(prototype, baseClass)<EOL>"}
{"signature": "if (falseWhenString(x) && false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "fun test(d: JavaDerived) {", "body": "<EOL><INDENT>d.abcd }"}
{"signature": "fun main(x: ClassTypeParameterBound<<!UPPER_BOUND_VIOLATED!>String?<!>>, y: ClassTypeParameterBound<String>, a: String?, b: String) {", "body": "<EOL><INDENT>val x<NUM_LIT> = ClassTypeParameterBound<<!UPPER_BOUND_VIOLATED!>String?<!>>()<EOL><INDENT>val y<NUM_LIT> = ClassTypeParameterBound<String>()<EOL><EOL><INDENT>val x<NUM_LIT> = ClassTypeParameterBound(<!TYPE_MISMATCH!>a<!>)<EOL><INDENT>val y<NUM_LIT> = ClassTypeParameterBound(b)<EOL><EOL><INDENT>val x<NUM_LIT>: ClassTypeParameterBound<<!UPPER_BOUND_VIOLATED!>String?<!>> = <!TYPE_MISMATCH!>ClassTypeParameterBound()<!><EOL><INDENT>val y<NUM_LIT>: ClassTypeParameterBound<String> = ClassTypeParameterBound()<EOL>}"}
{"signature": "var baseLowerType =", "body": "position.initialConstraint.a<EOL>"}
{"signature": "var ID_WORKER<INDENT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (this.isCurrentScriptTopLevelDeclaration(data)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>createThisReceiverParameter(context, IrDeclarationOrigin.SCRIPT_THIS_RECEIVER, scriptClassReceiver.type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dynamicCalleeArgument =", "body": "dynamicCall.getValueArgument(i)<EOL>"}
{"signature": "for ((a, b) in map) {", "body": "<EOL><INDENT><INDENT>a + b<EOL><INDENT>}"}
{"signature": "val substitutorForUnderlyingClass =", "body": "typeAliasDescriptor.getTypeSubstitutorForUnderlyingClass() ?: return null<EOL>"}
{"signature": "fun acceptsRestricted(c: suspend Marker.() -> Unit) {", "body": "<EOL><INDENT>lambda = c<EOL>}"}
{"signature": "val JVM_INLINE_ANNOTATION_CLASS_ID =", "body": "ClassId.topLevel(JVM_INLINE_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "var notClosed =", "body": "lexemes.currentChar != Lexer.CHAR_RIGHT_SQUARE_BRACKET<EOL>"}
{"signature": "val reportTarget =", "body": "declarationDescriptor.getJsNameArgument() ?: declaration.getIdentifier()<EOL>"}
{"signature": "if (i < super.getMaxStackSize()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.setStack(i, value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun interceptTestMethod(<EOL><INDENT><INDENT>invocation: InvocationInterceptor.Invocation<Void>,<EOL><INDENT><INDENT>invocationContext: ReflectiveInvocationContext<Method>,<EOL><INDENT><INDENT>extensionContext: ExtensionContext<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>interceptWithMuteInDatabase(invocation, extensionContext)<EOL><INDENT>}"}
{"signature": "val operationName =", "body": "descriptor.name.asString()<EOL>"}
{"signature": "val bodySize =", "body": "LLVMSizeOfTypeInBits(codegen.llvmTargetData, type).toInt() / <NUM_LIT><EOL>"}
{"signature": "if (descriptor.containingDeclaration.isValueClassThatRequiresMangling()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>diagnosticHolder.report(ErrorsJvm.INAPPLICABLE_JVM_NAME.on(annotationEntry))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val shouldNotBeEvaluated<NUM_LIT> =", "body": "EnumClass.OK?.name.toString()<EOL>"}
{"signature": "val paramKotlinType =", "body": "parameterDescriptor.type<EOL>"}
{"signature": "val openingOrClosingRegex =", "body": "<STR_LIT><STR_LIT><STR_LIT>.toRegex()<EOL>"}
{"signature": "val objCMapping =", "body": "if (descriptor.isInterface) objCProtocolNames else objCClassNames<EOL>"}
{"signature": "if (before.statements.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>metrics.recordGroup()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>before.statements.add(irStartReplaceGroup(this, scope))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>after.statements.add(irEndReplaceGroup(scope = scope))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitBlockBody(body: IrBlockBody, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBlockBody(body)<EOL><INDENT>}"}
{"signature": "val gav =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (it.isCompanion()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>processEntryOrObject(it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitLabel(label: FirLabel) {", "body": "<EOL><INDENT><INDENT>visitElement(label)<EOL><INDENT>}"}
{"signature": "if (superInterfaces != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val fileProvider =", "body": "LLFirResolveExtensionsFileProvider(extensions)<EOL>"}
{"signature": "if (declarationDescriptor != null && declarationDescriptor.isDynamic()) {", "body": "<EOL><INDENT><INDENT><INDENT>debugInfoReporter.reportDynamicCall(element, declarationDescriptor)<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "fun my(my: <!OPT_IN_USAGE_ERROR!>My<!>) {", "body": "}<EOL><EOL>fun your(my: <!OPT_IN_USAGE_ERROR!>Some<!>) {}"}
{"signature": "val KAPT_ARTIFACT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val LAZY_FUNC_FQ =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun test(str: String, id: Id<String>) {", "body": "<EOL><INDENT>if (id.id != <STR_LIT> && str != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "if (callbackIfNotSet) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticsCallback = callback<EOL><INDENT><INDENT>}"}
{"signature": "if (useParameterNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>print(name)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun useBox(x: Box<X>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>class Box<T><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>class B <EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias X = B<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun useBox(x: Box<X>) {}"}
{"signature": "val MaxC =", "body": "Char.MAX_VALUE<EOL>"}
{"signature": "val server =", "body": "ChatServer()<EOL>"}
{"signature": "val I<NUM_LIT>_LE_U =", "body": "<STR_LIT><EOL>"}
{"signature": "val operationTypeStr =", "body": "(reifiedInsn.next as LdcInsnNode).cst as String<EOL>"}
{"signature": "val modulePaths =", "body": "artifact.loadKlibFilePaths()<EOL>"}
{"signature": "if (className.internalName == expectedClassName || className.internalName.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>mainLineClassName = className.internalName.replace('/', '.')<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var demoCallCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "var mutablePropWithAnnotationOnSetterParam =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (!declaration.isExpect && declaration.symbol.isKotlinObjCClass(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>checkKotlinObjCClass(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val basedir<NUM_LIT> =", "body": "createTestFiles()<EOL>"}
{"signature": "else if (declared.name == DataClassDescriptorResolver.COPY_METHOD_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkOverrideForCopyFunction(declared)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package typealiases.", "body": "inner<EOL>"}
{"signature": "fun visitInlinedFunctionBlock(inlinedBlock: IrInlinedFunctionBlock, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitInlinedFunctionBlock(inlinedBlock)<EOL><INDENT>}"}
{"signature": "fun main(a: A, o: Out<String>) {", "body": "<EOL><INDENT>a.foo(o)<EOL><INDENT>a.bar(o)<EOL>}"}
{"signature": "fun minusElement() {", "body": "<EOL><INDENT><INDENT>val result = data - <STR_LIT> - <STR_LIT><EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>), result)<EOL><INDENT>}"}
{"signature": "fun useObject() {", "body": "<EOL><INDENT><!DEPRECATION!>Obsolete<!>.use()<EOL><INDENT>val x = <!DEPRECATION!>Obsolete<!><EOL>}"}
{"signature": "val toModuleName =", "body": "toModule.name.asStringStripSpecialMarkers()<EOL>"}
{"signature": "val outerProtoClass =", "body": "protoClasses[protoClasses.size - <NUM_LIT>]<EOL>"}
{"signature": "val expectedKotlinBridge =", "body": "expectedFiles / <STR_LIT><EOL>"}
{"signature": "fun setValue(thisObj: Any?, property: KProperty<*>, value: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>this.value = value<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (m in <NUM_LIT>.<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>if (m == <NUM_LIT>) break@loop<EOL><INDENT><INDENT>j = m<EOL><INDENT>}"}
{"signature": "if (tag != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>statementBuilder.exportedTagId = serialize(tag)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val otherParameter =", "body": "other.valueParameters[it.index]<EOL>"}
{"signature": "if (isMultifileClassOrPart && config.languageVersionSettings.getFlag(JvmAnalysisFlags.inheritMultifileParts)) {", "body": "<EOL><INDENT><INDENT><INDENT>extraFlags = extraFlags or JvmAnnotationNames.METADATA_MULTIFILE_PARTS_INHERIT_FLAG<EOL><INDENT><INDENT>}"}
{"signature": "if (status.isOverride) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (alias != null) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>).append(alias.asString())<EOL><INDENT><INDENT>}"}
{"signature": "val elementName =", "body": "symbolType.simpleName.removePrefix(<STR_LIT>).removeSuffix(<STR_LIT>)<EOL>"}
{"signature": "val trivialPredecessor =", "body": "label.previous<EOL>"}
{"signature": "val STDLIB_KLIB =", "body": "File(System.getProperty(<STR_LIT>) ?: error(<STR_LIT>)).canonicalPath<EOL>"}
{"signature": "while (!check(newId)) {", "body": "<EOL><INDENT><INDENT>attemptsLeft -= <NUM_LIT><EOL><INDENT><INDENT>if (attemptsLeft <= <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>newId = counter.addAndGet(internalRng.nextInt())<EOL><INDENT>}"}
{"signature": "fun set(p: Int) {", "body": "}"}
{"signature": "val libName =", "body": "dependency.substring(<NUM_LIT>, delimiterIndex)<EOL>"}
{"signature": "val cachedResponses =", "body": "mutableMapOf<String, CachedResponse>()<EOL>"}
{"signature": "val maskArgumentsCount =", "body": "(callableDescriptor.valueParameters.size - extraArgsShift + Integer.SIZE - <NUM_LIT>) / Integer.SIZE<EOL>"}
{"signature": "val enumEntryConstructor =", "body": "enumEntryDescriptor.unsubstitutedPrimaryConstructor!!<EOL>"}
{"signature": "var inlineScopeNumberIncrement =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (scopeDiff.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT>Errors.ACTUAL_CLASSIFIER_MUST_HAVE_THE_SAME_MEMBERS_AS_NON_FINAL_EXPECT_CLASSIFIER_WARNING.on(<EOL><INDENT><INDENT><INDENT><INDENT>declaration,<EOL><INDENT><INDENT><INDENT><INDENT>descriptor,<EOL><INDENT><INDENT><INDENT><INDENT>scopeDiff,<EOL><INDENT><INDENT><INDENT><INDENT>scopeDiff.first().expectClass,<INDENT><INDENT><INDENT> )<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val atomCompleter =", "body": "createResolvedAtomCompleter(substitutor, topLevelCallContext)<EOL>"}
{"signature": "var vHead =", "body": "IntArray(vCap) { <NUM_LIT> }<EOL>"}
{"signature": "if (symbolKind == BinarySymbolData.SymbolKind.TYPE_PARAMETER_SYMBOL) {", "body": "<EOL><INDENT><INDENT><INDENT>val composite = idSig as IdSignature.CompositeSignature<EOL><INDENT><INDENT><INDENT>val classSignature = idSig.container<EOL><INDENT><INDENT><INDENT>val classSymbol = resolveFunctionalInterface(classSignature, BinarySymbolData.SymbolKind.CLASS_SYMBOL) as IrClassSymbol<EOL><INDENT><INDENT><INDENT>val typeParameterSig = composite.inner as IdSignature.LocalSignature<EOL><INDENT><INDENT><INDENT>val typeParameterIndex = typeParameterSig.index()<EOL><INDENT><INDENT><INDENT>val typeParameter = classSymbol.owner.typeParameters[typeParameterIndex]<EOL><INDENT><INDENT><INDENT>return typeParameter.symbol<EOL><INDENT><INDENT>}"}
{"signature": "val processedFunctions =", "body": "mutableSetOf<JsFunction>()<EOL>"}
{"signature": "fun PostCardSimple(<EOL><INDENT>navigateToArticle: (String) -> Unit,<EOL><INDENT>isFavorite: Boolean,<EOL><INDENT>onToggleFavorite: () -> Unit<EOL>) {", "body": "<EOL><INDENT>BookmarkButton(<EOL><INDENT><INDENT>isBookmarked = isFavorite,<EOL><INDENT><INDENT>onClick = onToggleFavorite,<EOL><INDENT>)<EOL>}"}
{"signature": "val reportProblems =", "body": "!testServices.codegenSuppressionChecker.failuresInModuleAreIgnored(module)<EOL>"}
{"signature": "for ((i, irIndex) in irIndexExpressions.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>ktExpressionToIrIndexValue[ktIndexExpressions[i]] =<EOL><INDENT><INDENT><INDENT><INDENT>createIndexValue(i, irIndex)<EOL><INDENT><INDENT>}"}
{"signature": "val serializableAsmType =", "body": "codegen.typeMapper.mapClass(serializableClass)<EOL>"}
{"signature": "import s.", "body": "SamConstructor<EOL>"}
{"signature": "val actualArg =", "body": "arg ?: param.defaultValue?.expression<EOL>"}
{"signature": "var ff =", "body": "f<EOL>"}
{"signature": "val embedAndSignTaskPostfix =", "body": "<STR_LIT><EOL>"}
{"signature": "for (linuxSourceSet in listOf(linuxMain, linuxTest)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertConstraint(linuxSourceSet, IdeMultiplatformImport.SourceSetConstraint.isAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(linuxSourceSet, IdeMultiplatformImport.SourceSetConstraint.isJvmAndAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(linuxSourceSet, IdeMultiplatformImport.SourceSetConstraint.isLeaf, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(linuxSourceSet, IdeMultiplatformImport.SourceSetConstraint.isNative, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(linuxSourceSet, IdeMultiplatformImport.SourceSetConstraint.isSinglePlatformType, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(linuxSourceSet, IdeMultiplatformImport.SourceSetConstraint.unconstrained, isMatchExpected = true)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitBlock(x: JsBlock) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>visitStatements(x.statements)<EOL><INDENT><INDENT><INDENT><INDENT>super.visitBlock(x)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (test<NUM_LIT> != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (old.hasDoubleValue()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.doubleValue != new.doubleValue) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (asmElementType.sort == Type.LONG) {", "body": "<EOL><INDENT><INDENT><INDENT>v.lcmp()<EOL><INDENT><INDENT><INDENT>v.ifeq(loopExit)<EOL><INDENT><INDENT>}"}
{"signature": "val sinceKotlinAccessibility =", "body": "isHiddenBecauseOfKotlinVersionAccessibility(descriptor.original)<EOL>"}
{"signature": "val pluginInfos =", "body": "loadRegisteredPluginsInfo(rawPluginConfigurations)<EOL>"}
{"signature": "val usedDeprecatedProperties =", "body": "deprecatedProperties.filter { propertiesBuildService.get(it, project) != null }<EOL>"}
{"signature": "val argumentClassId =", "body": "serializeMethodNames[callableId.callableName] ?: return emptyList()<EOL>"}
{"signature": "if (primaryConstructor == null) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(Errors.ABSENCE_OF_PRIMARY_CONSTRUCTOR_FOR_VALUE_CLASS.on(inlineOrValueKeyword))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun visitAnonymousObject(anonymousObject: FirAnonymousObject, data: Any?) {", "body": "<EOL><INDENT><INDENT>visitClass(anonymousObject, null)<EOL><INDENT>}"}
{"signature": "when (callName) {", "body": "<EOL><INDENT><INDENT><INDENT>OperatorNameConventions.INC -> true<EOL><INDENT><INDENT><INDENT>OperatorNameConventions.DEC -> false<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinCharToExternRefAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val parentSig =", "body": "stageController.currentDeclaration?.let { declarationSignature(it) } ?: return this<EOL>"}
{"signature": "fun visitEnd() {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitPropertyReference(expression: IrPropertyReference) {", "body": "<EOL><INDENT><INDENT>expression.symbol = expression.symbol.let(resolver::getReferencedProperty)<EOL><INDENT><INDENT>expression.getter = expression.getter?.let(resolver::getReferencedSimpleFunction)<EOL><INDENT><INDENT>expression.setter = expression.setter?.let(resolver::getReferencedSimpleFunction)<EOL><INDENT><INDENT>visitElement(expression)<EOL><INDENT>}"}
{"signature": "fun foo(info: StringFlowInfo) {", "body": "<EOL><INDENT><INDENT>keys<EOL><INDENT><INDENT>info.keys<EOL><INDENT>}"}
{"signature": "val expectedListingLines =", "body": "expectedString.split('\\n').toList()<EOL>"}
{"signature": "val diagnosticsForVariableCall =", "body": "if (completedCallAtom.candidateDescriptor is FunctionDescriptor) emptyList() else diagnostics<EOL>"}
{"signature": "val singCompareTo<NUM_LIT> =", "body": "<!EVALUATED(<STR_LIT>)!>twoVal <= byteVal<!><EOL>"}
{"signature": "if (mayResolveSetterBody) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>transformAccessor(it, this, shouldResolveEverything)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val composableLambdaFullName =", "body": "<EOL><INDENT><INDENT>internalFqNameFor(<STR_LIT>)<EOL>"}
{"signature": "val fileContent =", "body": "Files.readAllLines(this).joinToString(<STR_LIT>)<EOL>"}
{"signature": "fun without(name: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>without(listOf(name))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val INTERNAL_ABI_ORIGIN =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "if (runtimeProcType == RuntimeProcType.AGGREGATING) {", "body": "<EOL><INDENT><INDENT><INDENT>generatedToSource[generatedFile] = null<EOL><INDENT><INDENT>}"}
{"signature": "fun set(i: Int, newValue: Short) {", "body": "<EOL><INDENT><INDENT>value = newValue<EOL><INDENT>}"}
{"signature": "val STEP_OUT =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visitRegularClass(regularClass: FirRegularClass, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allRegularClassCheckers.check(regularClass, data)<EOL><INDENT>}"}
{"signature": "fun testBinaryRetainedAnnotation() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val DEFAULT_ANNOTATION_CHECKERS =", "body": "listOf<AdditionalAnnotationChecker>()<EOL>"}
{"signature": "if (isStaticDefault) {", "body": "<EOL><INDENT><INDENT><INDENT>parameterTypes[<NUM_LIT>] = this<EOL><INDENT><INDENT>}"}
{"signature": "val callToDefault =", "body": "it.owner.createCall().apply { environment.irBuiltIns.copyArgs(expression, this) }<EOL>"}
{"signature": "val unownedHeadersToDefFiles =", "body": "mutableMapOf<String, File>()<EOL>"}
{"signature": "if (e is C) {", "body": "<EOL><INDENT><INDENT>(e.f)()<EOL><INDENT>}"}
{"signature": "val valueFieldModifier =", "body": "ValueFieldModifier(config)<EOL>"}
{"signature": "val shouldIncludeThisLine =", "body": "!insideAutomaticallyConfiguredSection<EOL>"}
{"signature": "val kotlinUIntToJsNumber =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "fun Foo(a: Int, b: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(a)<EOL><INDENT><INDENT><INDENT><INDENT>print(b)<EOL><INDENT><INDENT><INDENT><INDENT>Bar(a, b)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (falseWhenString(x) || trueWhenInt(x)) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>inc<!>()<EOL><INDENT>}"}
{"signature": "val perFileCacheFileName =", "body": "File(outputName).absoluteFile.name<EOL>"}
{"signature": "val categoryClassCursor =", "body": "getObjCCategoryClassCursor(childCursor)<EOL>"}
{"signature": "val nameWithoutPrefix =", "body": "name.nameWithoutAccessorPrefix ?: return@filter false<EOL>"}
{"signature": "if (!defaultType().isSubtypeOf(supertype, context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (callKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>FakeCallKind.ITERATOR -> Errors.ITERATOR_MISSING.on(reportErrorsOn)<EOL><INDENT><INDENT><INDENT><INDENT>FakeCallKind.COMPONENT -> if (receiver != null) Errors.COMPONENT_FUNCTION_MISSING.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportErrorsOn,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>receiver.type<EOL><INDENT><INDENT><INDENT><INDENT>) else null<EOL><INDENT><INDENT><INDENT><INDENT>FakeCallKind.OTHER -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val notExportedParentDefault =", "body": "NotExportedParent()<EOL>"}
{"signature": "val oldFileToId =", "body": "fileToId.keys.associateWith { fileToId[it]!! }<EOL>"}
{"signature": "val errorBranch =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!>if (flag) nonConstFlag else false<!><EOL>"}
{"signature": "val processorsAbsentInKaptClasspath =", "body": "processorsFromCompileClasspath.filter { it !in kaptClasspath }<EOL>"}
{"signature": "when (asmType.internalName) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> asmType.internalName<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinOutputPath =", "body": "kotlinClassesDir()<EOL>"}
{"signature": "if (constructor.metadata != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>metadata = constructor.metadata<EOL><INDENT><INDENT><INDENT><INDENT>constructor.metadata = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeAndNameDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return typeAndNameDiff<EOL><INDENT><INDENT>}"}
{"signature": "fun null<NUM_LIT>Boolean(x: Boolean?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "if (descriptor.visibility == JavaDescriptorVisibilities.PACKAGE_VISIBILITY) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.setExtension(JavaClassProtoBuf.isPackagePrivateField, true)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(a: MutableMap<String, String>, x: String?) {", "body": "<EOL><INDENT>a[<!ARGUMENT_TYPE_MISMATCH!>x<!>] = x!!<EOL><INDENT>a[x<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>] = x<EOL>}"}
{"signature": "package some<NUM_LIT>;<EOL>.", "body": ""}
{"signature": "val entryTypesWithAnnotations =", "body": "hashMapOf<FqName, MutableList<AnnotationUseSiteTarget?>>()<EOL>"}
{"signature": "val superValue =", "body": "(SuperClass::stringParam)(SuperClass(<STR_LIT>))<EOL>"}
{"signature": "val protectedfield =", "body": "<STR_LIT>;<EOL>"}
{"signature": "var outputLength =", "body": "<NUM_LIT><EOL>"}
{"signature": "val phaseIdFormatted =", "body": "<STR_LIT>.format(actionState.phaseCount)<EOL>"}
{"signature": "for ((key, value) in metrics) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.appendLine(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val qualifiedReference =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (jsQualifier == null) moduleName.makeRef() else (listOf(moduleName) + jsQualifier).makeRef()<EOL>"}
{"signature": "if (implementation.requiresOptIn) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(implementationOptInAnnotation)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val<!SYNTAX!><!> = <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT>}"}
{"signature": "if (Utils.isEndOfLine(c.code)) {", "body": "<EOL><INDENT><INDENT><INDENT>offsetInLine = <NUM_LIT><EOL><INDENT><INDENT><INDENT>lineCount++<EOL><INDENT><INDENT><INDENT>assert(lineCount <= position.line)<EOL><INDENT><INDENT>}"}
{"signature": "val Deprecated =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "if (trueAndFalse(x is String)) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "for (ch in (<NUM_LIT>).toChar() until bound) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var hasImplicitObjectBound =", "body": "false<EOL>"}
{"signature": "val companionKClass =", "body": "declaringClass.kotlin.companionObject<EOL>"}
{"signature": "var hasSpreadArgs =", "body": "false<EOL>"}
{"signature": "val nextPos =", "body": "positionFinder.findNextPosition(it)<EOL>"}
{"signature": "fun resetModuleStructureTransformers() {", "body": "<EOL><INDENT><INDENT>moduleStructureTransformers.clear()<EOL><INDENT>}"}
{"signature": "val maxStep =", "body": "cp.coerceAtLeast(<NUM_LIT> shl logFactor).takeHighestOneBit() shr logFactor<EOL>"}
{"signature": "if (it != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(it as? JsonString ?: return SourceMapError(<STR_LIT>)).value<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var testPattern =", "body": "<STR_LIT><EOL>"}
{"signature": "val propsMap =", "body": "props.associateBy { it.originalDescriptorName }<EOL>"}
{"signature": "var protectedParentVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "val classFir =", "body": "classId.resolveToClass(context) ?: return<EOL>"}
{"signature": "if (currentExpected == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assert(currentActual != null)<EOL><EOL><INDENT><INDENT><INDENT><INDENT>unexpectedDiagnostics(currentActual!!, callbacks)<EOL><INDENT><INDENT><INDENT><INDENT>currentActual = safeAdvance(actualDiagnostics)<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val environmentVariables =", "body": "EnvironmentalVariables(cocoaPodsEnvironmentVariables())<EOL>"}
{"signature": "val contextJavaSymbolProvider =", "body": "contextSession.nullableJavaSymbolProvider<EOL>"}
{"signature": "val durationInUnit =", "body": "duration.toLong(unit)<EOL>"}
{"signature": "val initializerBlock =", "body": "IrBlockImpl(UNDEFINED_OFFSET, UNDEFINED_OFFSET, type)<EOL>"}
{"signature": "val bridgesToGenerate =", "body": "LinkedHashSet<FunctionDescriptor>()<EOL>"}
{"signature": "val completer =", "body": "ConstraintSystemCompleter(components)<EOL>"}
{"signature": "val unboxedType =", "body": "value.unboxedTypes.single()<EOL>"}
{"signature": "val namePlusImpl =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "for (node in followingNodes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addEdgeToSubGraph(delegatedExit, node)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addEdge(delegatedConstructorCall, node, preferredKind = EdgeKind.DfgForward)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val externalDependencyModule =", "body": "findMatchingExternalDependencyModule(moduleId)<EOL>"}
{"signature": "val internalPackageFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun visitErrorExpression(errorExpression: FirErrorExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicExpressionCheckers.check(errorExpression, data)<EOL><INDENT>}"}
{"signature": "val myBuildAttributes =", "body": "BuildAttributes()<EOL>"}
{"signature": "fun save(output: DataOutput, function: InlineFunction) {", "body": "<EOL><INDENT><INDENT>JvmMethodSignatureExternalizer.save(output, function.jvmMethodSignature)<EOL><INDENT><INDENT>StringExternalizer.save(output, function.kotlinFunctionName)<EOL><INDENT>}"}
{"signature": "val finishedModuleBuildMetrics =", "body": "ConcurrentLinkedQueue<JpsBuilderMetricReporter>()<EOL>"}
{"signature": "val sectionsMapFolder =", "body": "<STR_LIT><EOL>"}
{"signature": "val defaultExpression =", "body": "if (createAsAnnotationMethod && declaration is KtParameter) declaration.defaultValue else null<EOL>"}
{"signature": "val additionalSubstitutor =", "body": "substitutorByMap(substitutionMapForNewParameters, useSiteSession)<EOL>"}
{"signature": "val pi_o_<NUM_LIT> =", "body": "<NUM_LIT>E+<NUM_LIT> <EOL>"}
{"signature": "fun getTopLevelFunctionSymbolsTo(<EOL><INDENT><INDENT>destination: MutableList<FirNamedFunctionSymbol>,<EOL><INDENT><INDENT>callableId: CallableId,<EOL><INDENT><INDENT>functions: Collection<KtNamedFunction>,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>destination += functionCache.getValue(callableId, functions)<EOL><INDENT>}"}
{"signature": "val nativePlatform =", "body": "NativePlatforms.nativePlatformByTargets(listOf(currentArchitectureTarget))<EOL>"}
{"signature": "val effectiveSignature =", "body": "resolveMethodSignature(method, methodTypeParameters, returnType, valueParameters.descriptors)<EOL>"}
{"signature": "val syntheticFieldDescriptor =", "body": "SyntheticFieldDescriptor(accessorDescriptor, accessorDescriptor.correspondingProperty.source)<EOL>"}
{"signature": "val nextTypeParameter =", "body": "it.coneTypeOrNull?.toNextTypeParameter() ?: return@any false<EOL>"}
{"signature": "if (expression !in tailRecursionCalls) {", "body": "<EOL><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT>}"}
{"signature": "fun testReplaceAll() {", "body": "<EOL><INDENT><INDENT>val input = <STR_LIT><EOL><INDENT><INDENT>val pattern = <STR_LIT><EOL><INDENT><INDENT>val regex = Regex(pattern)<EOL><EOL><INDENT><INDENT>assertEquals(<STR_LIT>, regex.replace(input, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "val privateVal<NUM_LIT> =", "body": "run { class A; A() }<EOL>"}
{"signature": "val writePath =", "body": "<STR_LIT><EOL>"}
{"signature": "val image =", "body": "createUniversal(imageType = includedImageType)<EOL>"}
{"signature": "val Repeatable =", "body": "<STR_LIT>.annotationId()<EOL>"}
{"signature": "val envSuffix =", "body": "environment?.let { <STR_LIT> }<EOL>"}
{"signature": "val aload<NUM_LIT>s =", "body": "processingNode.instructions.asSequence().filter { it.opcode == Opcodes.ALOAD && (it as? VarInsnNode)?.`var` == <NUM_LIT> }<EOL>"}
{"signature": "val singletonFieldDeclarations =", "body": "ConcurrentHashMap<IrSymbolOwner, IrField>()<EOL>"}
{"signature": "val context =", "body": "WasmBackendContext(moduleDescriptor, irBuiltIns, symbolTable, moduleFragment, propertyLazyInitialization, configuration)<EOL>"}
{"signature": "var supertypesLocked =", "body": "false<EOL>"}
{"signature": "val thisRef =", "body": "<EOL><INDENT><INDENT><INDENT>if (fromPrimary) JsThisRef() else context.getNameForValueDeclaration(context.currentFunction!!.valueParameters.last()).makeRef()<EOL>"}
{"signature": "if (dir != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import <!PACKAGE_CANNOT_BE_IMPORTED!>a<!><!SYNTAX!>?.", "body": "<!><!SYNTAX!>b<!><EOL>"}
{"signature": "if (androidSourceSet.renderscript.srcDirs.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>androidSourceSet.renderscript.srcDir(KotlinSourceSetFactory.defaultSourceFolder(project, kotlinSourceSet.name, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (localExecutionTimeFreeCompilerArgs != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>args.freeArgs = localExecutionTimeFreeCompilerArgs<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import api.", "body": "*<EOL>"}
{"signature": "fun javaClassTest(a: A<NUM_LIT><*>, b: B<NUM_LIT><*>, c: C<NUM_LIT><*>, d: D<NUM_LIT><*>) {", "body": "<EOL><INDENT>a.foo()<EOL><INDENT>b.foo()<EOL><INDENT>c.foo()<EOL><INDENT>d.foo()<EOL>}"}
{"signature": "val cachedListForMiddle =", "body": "cachedMiddle.contents()<EOL>"}
{"signature": "if (useReceiverType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>listOf(useReceiverType)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val caretName =", "body": "<STR_LIT>_$it<STR_LIT><EOL>"}
{"signature": "if (currentCount >= finalGlobalCount) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "val MaxSmallSize =", "body": "ChunkBucketSize * SmallChunksSizeAlignment<EOL>"}
{"signature": "if (inlineCall.usesDefaultArguments()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lineNumberMapper.resetLineNumber()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun use(s: String) {", "body": "<EOL><INDENT><INDENT>s.foo<EOL><INDENT><INDENT>s.foo()<EOL><INDENT>}"}
{"signature": "if (declarationToCheck.forwardDeclarationKindOrNull() != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>expression.source,<EOL><INDENT><INDENT><INDENT><INDENT>FirNativeErrors.FORWARD_DECLARATION_AS_CLASS_LITERAL,<EOL><INDENT><INDENT><INDENT><INDENT>expression.argument.resolvedType,<EOL><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (boundIndex > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sig.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun registerExtrasSerializationExtension(extension: IdeaKotlinExtrasSerializationExtension) {", "body": "<EOL><INDENT><INDENT>registeredExtrasSerializationExtensions.add(extension)<EOL><INDENT>}"}
{"signature": "if (element is T && predicate(element)) {", "body": "<EOL><INDENT><INDENT><INDENT>return element<EOL><INDENT><INDENT>}"}
{"signature": "val isMarkedTransient =", "body": "descriptor.annotations.serialTransient<EOL>"}
{"signature": "fun processAnnotation(annotation: FirAnnotation, data: T)<EOL><EOL><INDENT><EOL><INDENT>override fun visitElement(element: FirElement, data: T) {", "body": "<EOL><INDENT><INDENT>if (element is FirElementWithResolveState) return<EOL><EOL><INDENT><INDENT>element.acceptChildren(this, data)<EOL><INDENT>}"}
{"signature": "fun testUnreachableExtensionValPropertyDeclaration() {", "body": "<EOL><INDENT><INDENT>val (output, exitCode) = compileKotlin(<STR_LIT>, tmpdir, expectedFileName = null)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, ExitCode.COMPILATION_ERROR, exitCode)<EOL><INDENT>}"}
{"signature": "val isBodyContextCollected =", "body": "bodyElement != null<EOL>"}
{"signature": "val some =", "body": "SomeObject<EOL>"}
{"signature": "val importResolver =", "body": "fileScopeProvider.getImportResolver(importDirective.containingKtFile)<EOL>"}
{"signature": "if (options.bodyPrintingStrategy != BodyPrintingStrategy.NO_BODIES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.printlnWithNoIndent()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nativesDir =", "body": "File(buildDir,<STR_LIT>)<EOL>"}
{"signature": "val varOp =", "body": "op<NUM_LIT> as? IrGetValue ?: op<NUM_LIT> as? IrGetValue ?: return null<EOL>"}
{"signature": "val markerShift =", "body": "calcMarkerShift(parameters, node)<EOL>"}
{"signature": "fun testShortDotCall(c<NUM_LIT>: C<Short>) {", "body": "<EOL><INDENT>c<NUM_LIT>takeT(<!INTEGER_OPERATOR_RESOLVE_WILL_CHANGE!><NUM_LIT>plus(<NUM_LIT>)<!>)<EOL><INDENT>c<NUM_LIT>takeT(<!TYPE_MISMATCH!><NUM_LIT>inc()<!>)<EOL><INDENT>c<NUM_LIT>takeT(<!TYPE_MISMATCH!><NUM_LIT>dec()<!>)<EOL><INDENT>c<NUM_LIT>takeT(<!INTEGER_OPERATOR_RESOLVE_WILL_CHANGE!><NUM_LIT>shr(<NUM_LIT>)<!>)<EOL><INDENT>c<NUM_LIT>takeT(<!INTEGER_OPERATOR_RESOLVE_WILL_CHANGE!><NUM_LIT>inv()<!>)<EOL>}"}
{"signature": "for (deprecation in deprecations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val targetFqNameIfAny = targetDescriptor.fqNameOrNull()<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>createDeprecationDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>element, deprecation, languageVersionSettings,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>forceWarningForSimpleDeprecation = isSuperCall && targetFqNameIfAny in DeprecationResolver.KOTLIN_LIST_FIRST_LAST<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val UPPER_CASE_HEX_DIGITS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (tasks.names.contains(name)) {", "body": "<EOL><INDENT>tasks.named(name)<EOL>}"}
{"signature": "fun visitTypeAlias(declaration: IrTypeAlias, data: Visibles) {", "body": "<EOL><INDENT><INDENT><INDENT>val newVisibles = data.extend(declaration.typeParameters, emptySet())<EOL><INDENT><INDENT><INDENT>newVisibles.visitTypeAccess(declaration, declaration.expandedType)<EOL><INDENT><INDENT><INDENT>super.visitTypeAlias(declaration, newVisibles)<EOL><INDENT><INDENT>}"}
{"signature": "val contextReceiversSupported =", "body": "languageVersionSettings.supportsFeature(ContextReceivers)<EOL>"}
{"signature": "val coroutineConstructor =", "body": "buildConstructor()<EOL>"}
{"signature": "val targetProvider =", "body": "parameters.targetProviders[target] ?: return null<EOL>"}
{"signature": "if (!source.isFakePsiElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val file = source.containingFile<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val offset = source.node.startOffset<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val document = file.viewProvider.document!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>document.getLineNumber(offset)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ComposableTargetMarker =", "body": "fqNameFor(<STR_LIT>)<EOL>"}
{"signature": "val valueDescriptions =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Json.Default.decodeFromJsonElement<List<ValueDescription?>>(evaluationResult.result.value ?: error(<STR_LIT>))<EOL>"}
{"signature": "val conflictingIsLowPriority =", "body": "hasLowPriorityAnnotation(conflicting.annotations)<EOL>"}
{"signature": "if (param.isNoinline || param.isCrossinline) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(param.source, FirErrors.ILLEGAL_INLINE_PARAMETER_MODIFIER, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val thisParam =", "body": "delegate.valueParameters.last()<EOL>"}
{"signature": "fun testEqualToAnythingClass() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val rec = EqualToAnythingClassRec()<EOL><INDENT><INDENT>val result = rec.a.invoke(deepTree(<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, rec.nullCount)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, result.i)<EOL><INDENT>}"}
{"signature": "val interfaceToFunTypeParameters =", "body": "recreateTypeParametersAndReturnMapping(originalParameters, newOwner)<EOL>"}
{"signature": "val anns<NUM_LIT> =", "body": "paramAnnsList<NUM_LIT>getOrElse(i) { emptyList() }.toAnnotations()<EOL>"}
{"signature": "var librariesScope =", "body": "projectEnvironment.getSearchScopeForProjectLibraries()<EOL>"}
{"signature": "fun testC() {", "body": "<EOL><INDENT><INDENT>testA()<EOL><INDENT>}"}
{"signature": "val podPathRun =", "body": "runProcess(listOf(<STR_LIT>, <STR_LIT>), Path(<STR_LIT>).toFile())<EOL>"}
{"signature": "if (declaration.isData) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (needCalculatingLazyBodyForFunction(firConstructor) || firConstructor.delegatedConstructor is FirLazyDelegatedConstructorCall) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "fun markDirty(className: Name) {", "body": "<EOL><INDENT><INDENT>storage[nameTransformer.asString(className)] = true<EOL><INDENT>}"}
{"signature": "val I<NUM_LIT>_STORE<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val defaultLogin =", "body": "Login(<STR_LIT>)<EOL>"}
{"signature": "val levels =", "body": "mutableMapOf(start to <NUM_LIT>)<EOL>"}
{"signature": "if (this[index] == '\\u<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT><INDENT>sb.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "fun assumeCachesAreEnabled() {", "body": "<EOL><INDENT><INDENT>Assumptions.assumeFalse(testRunSettings.get<CacheMode>() == CacheMode.WithoutCache)<EOL><INDENT>}"}
{"signature": "val containerOptions =", "body": "ContainerOptionsProxy.create(receiverClass.descriptor)<EOL>"}
{"signature": "if (!applyConstraintsFromFirstSuccessfulBranchOfTheFork(forkPointData, position)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result = NoSuccessfulFork(position)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import bitfields.", "body": "*<EOL>"}
{"signature": "if (superInterface.hasAnnotation(JsPlainObjectsAnnotations.jsPlainObjectAnnotationClassId, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirJsPlainObjectsErrors.IMPLEMENTING_OF_JS_PLAIN_OBJECT_IS_NOT_SUPPORTED,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classSymbol.classId.asFqNameString(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val linkRegex =", "body": "<EOL><INDENT><INDENT>Regex(<STR_LIT><STR_LIT><STR_LIT>)<EOL>"}
{"signature": "for ((x, y) in J.listOfNotNull()) {", "body": "}"}
{"signature": "val declarationBeingCached =", "body": "packageFragment is IrFile && klib != null && libraryBeingCached?.klib == klib<EOL>"}
{"signature": "package <STR_LIT> first, then for the class <STR_LIT> in the package<EOL>.", "body": ""}
{"signature": "val child =", "body": "stack.popLast()<EOL>"}
{"signature": "if (filterOutJavaGettersAndSetters && kindFilter.kindMask.and(DescriptorKindFilter.FUNCTIONS_MASK) != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>variants = filterOutJavaGettersAndSetters(variants)<EOL><INDENT><INDENT>}"}
{"signature": "package dataClassComponentMethods<EOL>.", "body": ""}
{"signature": "val packagesPath =", "body": "request.packageFqName.pathSegments().map { it.identifierOrNullIfSpecial ?: return null }<EOL>"}
{"signature": "if (startVersion != null || endVersion == null) {", "body": "<EOL><INDENT><INDENT>result.add(<EOL><INDENT><INDENT><INDENT>NpmRange(<EOL><INDENT><INDENT><INDENT><INDENT>endVersion = startVersion,<EOL><INDENT><INDENT><INDENT><INDENT>endInclusive = !startInclusive<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val versionsAnnotation =", "body": "findAnnotation<GradleTestVersions>(context)<EOL>"}
{"signature": "if (iterator<NUM_LIT>hasNext() && iterator<NUM_LIT>hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>setNext(iterator<NUM_LIT>next() to iterator<NUM_LIT>next())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val execResult =", "body": "testDylibCinteropExe(<STR_LIT>)<EOL>"}
{"signature": "val allowFrontendExceptions =", "body": "InTextDirectivesUtils.isDirectiveDefined(wholeFile.readText(), \""}
{"signature": "if (old.hasExtension(KlibMetadataProtoBuf.enumEntryOrdinal)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(KlibMetadataProtoBuf.enumEntryOrdinal) != new.getExtension(KlibMetadataProtoBuf.enumEntryOrdinal)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val kCtorType =", "body": "llvm.structType(llvm.int<NUM_LIT>Type, pointerType(ctorFunctionSignature.llvmFunctionType), llvm.int<NUM_LIT>PtrType)<EOL>"}
{"signature": "val protoFileContents =", "body": "File(protoPath).readLines()<EOL>"}
{"signature": "fun loopJump(condition: StackValue, label: Label, jumpIfFalse: Boolean, iv: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT><INDENT>condJump(condition).loopJump(label, iv, jumpIfFalse)<EOL><INDENT><INDENT>}"}
{"signature": "if (target.isIncrementalCompilationEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedLookupsCacheComponents.add(target.globalLookupCacheId)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val FAT_MAGIC =", "body": "<NUM_LIT>xcafebabeL<EOL>"}
{"signature": "val OptionalExpectation =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val overriddenDescriptorsForCurrent =", "body": "current.overriddenDescriptors<EOL>"}
{"signature": "fun visitUnconditionalJump(instruction: UnconditionalJumpInstruction) {", "body": "<EOL><INDENT><INDENT>visitJump(instruction)<EOL><INDENT>}"}
{"signature": "val filer =", "body": "processingEnvironment.filer as JavacFiler<EOL>"}
{"signature": "val endAddress =", "body": "stringBufferPtr.address + argumentStringSize.toUInt()<EOL>"}
{"signature": "val actualArgument =", "body": "expression.getValueArgument(i)<EOL>"}
{"signature": "val fullyExpandedProjection =", "body": "fullyExpandedType.typeArguments[it]<EOL>"}
{"signature": "val cDeclaration =", "body": "FunctionDecl(name, emptyList(), intType, <STR_LIT>, false, false)<EOL>"}
{"signature": "if (sbom) {", "body": "<EOL><INDENT><INDENT>configureSbom()<EOL><INDENT>}"}
{"signature": "val expectedCategoryCode =", "body": "properties?.categoryCode ?: CharCategory.UNASSIGNED.code<EOL>"}
{"signature": "val MULTIPLATFORM_PROJECT_METADATA_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this is D) {", "body": "<EOL><INDENT><INDENT><INDENT>val d: D = this<EOL><INDENT><INDENT><INDENT>d.test(x - <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val unicodeData =", "body": "arrayOf<Array<CharProperties>>(\")<EOL>"}
{"signature": "fun recordJitCompilationTime() {", "body": "<EOL><INDENT><INDENT>if (!isEnabled) return<EOL><EOL><INDENT><INDENT>val bean = ManagementFactory.getCompilationMXBean() ?: return<EOL><INDENT><INDENT>measurements += JitCompilationMeasurement(bean.totalCompilationTime)<EOL><INDENT>}"}
{"signature": "val newTopLevelDeclarations =", "body": "mutableListOf<IrDeclaration>()<EOL>"}
{"signature": "val sourcesElementsConfiguration =", "body": "project.configurations<EOL>"}
{"signature": "fun invoke(root: CirRootNode) {", "body": "<EOL><INDENT><INDENT>root.modules.values.forEach(::invoke)<EOL><INDENT>}"}
{"signature": "if (state.classBuilderMode == ClassBuilderMode.KAPT<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>mv.visitAnnotation(ANNOTATION_TYPE_DESCRIPTOR_FOR_JVM_OVERLOADS_GENERATED_METHODS, false)<EOL><INDENT><INDENT>}"}
{"signature": "val DEFAULT_CONSTRUCTOR_MARKER =", "body": "Class.forName(<STR_LIT>)<EOL>"}
{"signature": "val LANGUAGE_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (Directives.IGNORE_FIR in directives) {", "body": "<EOL><INDENT><INDENT><INDENT>throwTestIsPassingException(Directives.IGNORE_FIR)<EOL><INDENT><INDENT>}"}
{"signature": "if (Type.BOOLEAN_TYPE != target) {", "body": "<EOL><INDENT><INDENT><INDENT>StackValue.coerce(Type.BOOLEAN_TYPE, target, mv)<EOL><INDENT><INDENT>}"}
{"signature": "val nativeConfig =", "body": "project<EOL>"}
{"signature": "fun useClass() {", "body": "<EOL><INDENT>Foo()<EOL>}"}
{"signature": "fun resolveContainingFileToImports(target: FirElementWithResolveState) {", "body": "<EOL><INDENT><INDENT>if (target.resolvePhase >= FirResolvePhase.IMPORTS) return<EOL><INDENT><INDENT>val firFile = target.getContainingFile() ?: return<EOL><INDENT><INDENT>resolveFileToImportsWithLock(firFile)<EOL><INDENT>}"}
{"signature": "if (function == prop.getter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!optionsBuilder.checkOptions(project, logger, configuration)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val oldBackingField =", "body": "oldProperty.backingFieldIfNotDelegate<EOL>"}
{"signature": "val valid<NUM_LIT> =", "body": "My<Base>(object : Base() {})<EOL>"}
{"signature": "fun localFun() {", "body": "<EOL><INDENT><INDENT><INDENT>result = input.d.value<EOL><INDENT><INDENT>}"}
{"signature": "if (text.endsWith('f') || text.endsWith('F')) {", "body": "<EOL><INDENT><INDENT>return parseFloat(text)<EOL><INDENT>}"}
{"signature": "fun f(x: Char) {", "body": "}<EOL><EOL>fun g(i: Int) {}"}
{"signature": "fun out(line: String) {", "body": "<EOL><INDENT><INDENT>currentBlock().body += line<EOL><INDENT>}"}
{"signature": "val fileComponents =", "body": "file.absolutePath.split(File.separator)<EOL>"}
{"signature": "var nextLineNumberNode =", "body": "nextDefinitelyHitLineNumber(suspension)<EOL>"}
{"signature": "val isConst =", "body": "declaration.correspondingPropertySymbol?.owner?.isConst == true<EOL>"}
{"signature": "if (group == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sortedModules[index] = module<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>root = Node(key, value)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for ((index, valueParameter) in parameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(index, irGet(valueParameter))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val implVersion =", "body": "currentVersion.implementationVersion ?: return false<EOL>"}
{"signature": "fun visitJumpNode(node: JumpNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (result is ResultWithDiagnostics.Success) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnostics.addAll(result.reports)<EOL><INDENT><INDENT><INDENT>values.addAll(result.value)<EOL><INDENT><INDENT>}"}
{"signature": "fun computeNonDeclaredFunctions(result: MutableCollection<SimpleFunctionDescriptor>, name: Name) {", "body": "<EOL><INDENT>}"}
{"signature": "val searcher =", "body": "FirDeclarationForCompiledElementSearcher(session.symbolProvider)<EOL>"}
{"signature": "if (!callEntry.key.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dmax =", "body": "Double.MAX_VALUE<EOL>"}
{"signature": "fun forTestsNotMatching(pattern: Regex, configuration: TestConfigurationBuilder.() -> Unit) {", "body": "<EOL><INDENT><INDENT>configurationsByNegativeTestDataCondition += pattern to configuration<EOL><INDENT>}"}
{"signature": "fun accept(visitor: KmClassExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibClassExtensionVisitor)<EOL><INDENT><INDENT>annotations.forEach(visitor::visitAnnotation)<EOL><INDENT><INDENT>enumEntries.forEach(visitor::visitEnumEntry)<EOL><INDENT><INDENT>uniqId?.let(visitor::visitUniqId)<EOL><INDENT><INDENT>file?.let(visitor::visitFile)<EOL><INDENT>}"}
{"signature": "for (ch in sequence) {", "body": "<EOL><INDENT><INDENT><INDENT>sequenceMap[ch] = i++;<EOL><INDENT><INDENT>}"}
{"signature": "fun visitAnnotation(annotation: FirAnnotation, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnnotation(annotation)<EOL><INDENT>}"}
{"signature": "val componentCall =", "body": "declaration.initializer as? FirComponentCall ?: return<EOL>"}
{"signature": "fun matchEscapeSurrogatePair() {", "body": "<EOL><INDENT><INDENT>if (!supportsEscapeAnyCharInRegex) return<EOL><EOL><INDENT><INDENT>val regex = <STR_LIT>.toRegex()<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val presentDescriptors =", "body": "declaration.declarations.map { it.descriptor }<EOL>"}
{"signature": "fun testSourceSetName() {", "body": "<EOL><INDENT><INDENT>taskApi.sourceSetName.set(<STR_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, taskImpl.sourceSetName.get())<EOL><INDENT>}"}
{"signature": "val catchBlock =", "body": "catchTranslator.translate()<EOL>"}
{"signature": "var sweepStatistics =", "body": "mutableMapOf<String, SweepStatistics>()<EOL>"}
{"signature": "val assignIsSuccessful =", "body": "assignCallReference?.isError == false<EOL>"}
{"signature": "var bVarArray =", "body": "arrayOf(true, false)<EOL>"}
{"signature": "val diagnosticsHolder =", "body": "KotlinDiagnosticsHolder.SimpleHolder()<EOL>"}
{"signature": "when (visitorType.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TypeKind.Interface -> print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>TypeKind.Class -> print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!cached.isKotlinBinary) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitParameter(x: JsParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitParameter(x)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>variables.add(x)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val yyyxxx =", "body": "<NUM_LIT><EOL>"}
{"signature": "val clsKotlinBinaryClassCache =", "body": "ClsKotlinBinaryClassCache.getInstance()<EOL>"}
{"signature": "for (header in headers) {", "body": "<EOL><INDENT><INDENT><INDENT>tag(<STR_LIT>, header)<EOL><INDENT><INDENT>}"}
{"signature": "if (isErrorConstructor && classWrapper.delegatedSuperCalls.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val sourceForTypeArgument =", "body": "argument?.source<EOL>"}
{"signature": "val targetFile =", "body": "File(outputDir, newName)<EOL>"}
{"signature": "fun head(init: () -> Unit) {", "body": "val p = initTag<NUM_LIT>(init); return p}"}
{"signature": "val overriddenSet =", "body": "mutableSetOf<IrSimpleFunctionSymbol>()<EOL>"}
{"signature": "val deserializedIrModule =", "body": "deserializeModule(stdlib<NUM_LIT>, klib)<EOL>"}
{"signature": "val lhsRawType =", "body": "if (lhsBinaryType.nullable) irBuiltins.anyNType else irBuiltins.anyType<EOL>"}
{"signature": "val classThisReceiverSymbol =", "body": "irFunction.parentAsClass.thisReceiver?.symbol<EOL>"}
{"signature": "fun exitWhenSubjectExpression(expression: FirWhenSubjectExpression) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitWhenSubjectExpression(expression).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (declarationDescriptor is PropertyAccessorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>descriptor = (descriptor as PropertyAccessorDescriptor).correspondingProperty<EOL><INDENT><INDENT>}"}
{"signature": "val lastModified =", "body": "file.lastModified()<EOL>"}
{"signature": "fun subtract() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>), listOf(<NUM_LIT>, <NUM_LIT>).subtract(listOf(<NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>), listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).subtract(listOf(<NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertTrue(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).subtract(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)).none())<EOL><INDENT><INDENT>assertTrue(listOf<Int>().subtract(listOf(<NUM_LIT>)).none())<EOL><INDENT>}"}
{"signature": "val treeStructure =", "body": "source.treeStructure<EOL>"}
{"signature": "val labelUsages =", "body": "mutableMapOf<JsName, Int>()<EOL>"}
{"signature": "val familyPrimitives =", "body": "mutableMapOf<Family, Set<Pair<PrimitiveType, PrimitiveType>>>()<EOL>"}
{"signature": "import alias is involved.", "body": "<EOL>"}
{"signature": "if (capturedReceiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val fieldName = closure.getCapturedReceiverFieldName(state.typeMapper.bindingContext, state.languageVersionSettings)<EOL><INDENT><INDENT><INDENT><INDENT>val type = if (isBoundCallableReference)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>state.typeMapper.mapType(capturedReceiver, null, TypeMappingMode.GENERIC_ARGUMENT)<EOL><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>state.typeMapper.mapType(capturedReceiver)<EOL><INDENT><INDENT><INDENT><INDENT>add(capturedParamDesc(fieldName, type, isSuspend = false))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitBranch(branch: IrBranch, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBranch(branch)<EOL><INDENT>}"}
{"signature": "val retentionValue =", "body": "value<EOL>"}
{"signature": "for (argument in value.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkValueParameter(context, targetDescriptor, argument, valueDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val errorCallsInfo =", "body": "arrayListOf<PSIErrorCallInfo<D>>()<EOL>"}
{"signature": "if (hasInlineClassUnderlyingPropertyName()) {", "body": "<EOL><INDENT><INDENT>v.inlineClassUnderlyingPropertyName = c[inlineClassUnderlyingPropertyName]<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until (original.valueParameters.size + <NUM_LIT>) / <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>addValueParameter(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>.synthesizedString,<EOL><INDENT><INDENT><INDENT><INDENT>context.irBuiltIns.intType,<EOL><INDENT><INDENT><INDENT><INDENT>IrDeclarationOrigin.MASK_FOR_DEFAULT_FUNCTION<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_RUNTIME_JAR_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val mangled =", "body": "NameSuggestion.sanitizeName(NameSuggestion().suggest(this, bindingContext)!!.names.last())<EOL>"}
{"signature": "val diagram =", "body": "irDiagramString(sourceFile, prefix, call, variables)<EOL>"}
{"signature": "for (unchanged in unchangedBetweenCompilations) {", "body": "<EOL><INDENT><INDENT><INDENT>dataForFiles[unchanged] = previousSnapshot.dataForFiles[unchanged]!!<EOL><INDENT><INDENT>}"}
{"signature": "val ktFunctionalTypeArguments =", "body": "ktFunctionalType.arguments<EOL>"}
{"signature": "val adaptedMask =", "body": "adaptMask(mask)<EOL>"}
{"signature": "if (typeReference.typeElement?.unwrapNullability() is KtDynamicType) {", "body": "<EOL><INDENT><INDENT><INDENT>return ConeDynamicType.create(moduleData.session)<EOL><INDENT><INDENT>}"}
{"signature": "val classMethodRef =", "body": "(TestCallableReferences)::classMethod<EOL>"}
{"signature": "when (val psi = symbol.psi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtDeclaration -> psi<EOL><INDENT><INDENT><INDENT><INDENT>is KtFile -> psi<EOL><INDENT><INDENT><INDENT><INDENT>is KtObjectLiteralExpression -> psi.objectDeclaration<EOL><INDENT><INDENT><INDENT><INDENT>else -> return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val separateDumpEnabled =", "body": "separateDumpsEnabled()<EOL>"}
{"signature": "if (needToCheck(expectedType)) {", "body": "<EOL><INDENT><INDENT><INDENT>checkArgumentImpl(expectedType.lowerIfFlexible(), KtPsiUtil.deparenthesize(argument)!!, trace, moduleDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val originalFileNames =", "body": "module.files.map { it.name }<EOL>"}
{"signature": "val newConstraintCanAddNullabilityToOtherOne =", "body": "<EOL><INDENT><INDENT><INDENT>newConstraint.isNullableType() && !otherConstraint.isNullableType() && kind == ConstraintKind.UPPER<EOL>"}
{"signature": "if (ind != null) {", "body": "}"}
{"signature": "for (exact in listOf(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, <NUM_LIT>F, Float.MIN_VALUE, -Float.MIN_VALUE, <NUM_LIT>F)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(exact, asinh(sinh(exact)))<EOL><INDENT><INDENT>}"}
{"signature": "if (targetTryDepth < tryStack.size) {", "body": "<EOL><INDENT><INDENT><INDENT>val tryBlock = tryStack[targetTryDepth]<EOL><INDENT><INDENT><INDENT>currentStatements += exceptionState(tryBlock.catchBlock, fromNode)<EOL><INDENT><INDENT>}"}
{"signature": "else if (this[index] == '\\n') {", "body": "<EOL><INDENT><INDENT>index + <NUM_LIT><EOL><INDENT>}"}
{"signature": "val stringKey =", "body": "extrasKeyOf<String>()<EOL>"}
{"signature": "val K<NUM_LIT> =", "body": "B.FOO<EOL>"}
{"signature": "for (invalid in listOf(<NUM_LIT>F, <NUM_LIT>F, <NUM_LIT>F, Float.NaN)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(acosh(invalid).isNaN())<EOL><INDENT><INDENT>}"}
{"signature": "package invalid<NUM_LIT><EOL>.", "body": ""}
{"signature": "fun markDead(varIndex: Int) {", "body": "<EOL><INDENT><INDENT>bitSet.set(varIndex, false)<EOL><INDENT>}"}
{"signature": "var hasDeclarationsToReexport =", "body": "false<EOL>"}
{"signature": "var aFoo =", "body": "a.foo(<STR_LIT>)<EOL>"}
{"signature": "val JS_INTERNAL_PACKAGE_FQNAME =", "body": "JS_PACKAGE_FQNAME.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val toULong =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.toULong()<!><EOL>"}
{"signature": "val SINGLE_MASK_FIELD_MISSING_FUNC_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (accessor is PropertyGetterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val FLOW =", "body": "<STR_LIT><EOL>"}
{"signature": "val ctSym =", "body": "lib.findChild(<STR_LIT>)<EOL>"}
{"signature": "val frameObject =", "body": "it as JsonObject<EOL>"}
{"signature": "import A.", "body": "foo<EOL>"}
{"signature": "val nonConstBool =", "body": "true<EOL>"}
{"signature": "val endDelta =", "body": "tree.getEndOffset(betterTo) - tree.getEndOffset(originalNode)<EOL>"}
{"signature": "val schemaClass =", "body": "callData.schema<EOL>"}
{"signature": "if ((target !is KotlinWithJavaTarget<*, *> || target.platformType != KotlinPlatformType.common)) {", "body": "<EOL><INDENT><INDENT>usesPlatformOf(target)<EOL><INDENT>}"}
{"signature": "if (type.isFlexible()) {", "body": "<EOL><INDENT><INDENT><INDENT>forceResolveTypeContents(type.asFlexibleType().lowerBound)<EOL><INDENT><INDENT><INDENT>forceResolveTypeContents(type.asFlexibleType().upperBound)<EOL><INDENT><INDENT>}"}
{"signature": "val containerSig =", "body": "deserializeIdSignature(proto.containerSig)<EOL>"}
{"signature": "if (title == upperFirst + lowercasedTail) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val byteModInt =", "body": "byte.mod(int)<EOL>"}
{"signature": "val serializerIrClass =", "body": "irClass.classSerializer(compilerContext)!!.owner<EOL>"}
{"signature": "val auxGCThreads =", "body": "configuration.get(BinaryOptions.auxGCThreads)<EOL>"}
{"signature": "fun crossinlineMe(crossinline c: suspend () -> Unit) {", "body": "<EOL><INDENT>c()<EOL><INDENT>c()<EOL>}"}
{"signature": "val keyList =", "body": "extrasKeyOf<MutableList<Dummy>>()<EOL>"}
{"signature": "val curNext =", "body": "curTail.next.value<EOL>"}
{"signature": "if (variableType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>append(variableType)<EOL><INDENT><INDENT>}"}
{"signature": "val dependencyTestDataFileName =", "body": "dependencyTestDataFile.name<EOL>"}
{"signature": "fun foo(z: java.util.zip.ZipFile) {", "body": "<EOL><INDENT>z.entries().asSequence()<EOL>}"}
{"signature": "when (module.frontendKind) {", "body": "<EOL><INDENT><INDENT>FrontendKinds.ClassicFrontend -> CodegenTestDirectives.IGNORE_BACKEND_K<NUM_LIT><EOL><INDENT><INDENT>FrontendKinds.FIR -> CodegenTestDirectives.IGNORE_BACKEND_K<NUM_LIT><EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val allPublishedSources =", "body": "rootModuleSources +<EOL>"}
{"signature": "val isBoxUsed =", "body": "body.replaceThisWithBoxBeforeSuperCall(irClass, boxParameter.symbol)<EOL>"}
{"signature": "val UNKNOWN_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "when (declaration.classKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.CLASS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.INTERFACE -> null<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT> ClassKind.ENUM_CLASS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.ENUM_ENTRY -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.ANNOTATION_CLASS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.OBJECT -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import dummy.", "body": "dummyFunction<EOL>"}
{"signature": "val functionLiteralExpression =", "body": "functionLiteralArgument.getLambdaExpression() ?: continue<EOL>"}
{"signature": "when (deprecationInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>is FutureApiDeprecationInfo -> reportApiNotAvailable(source, deprecationInfo, reporter, context)<EOL><INDENT><INDENT><INDENT>is RequireKotlinDeprecationInfo -> reportVersionRequirementDeprecation(source, referencedSymbol, deprecationInfo, reporter, context)<EOL><INDENT><INDENT><INDENT>else -> reportDeprecation(source, referencedSymbol, isTypealiasExpansion, deprecationInfo, reporter, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun f<NUM_LIT>(s: Int?) {", "body": "<EOL><INDENT>var u = <!INVALID_IF_AS_EXPRESSION!>if<!> (s!! == <NUM_LIT>);<EOL><INDENT>if (u == Unit) u = <!INVALID_IF_AS_EXPRESSION!>if<!> (s == <NUM_LIT>);<EOL><INDENT>return u<EOL>}"}
{"signature": "val allDigits =", "body": "(Char.MIN_VALUE..Char.MAX_VALUE).filter { it.isDigit() }<EOL>"}
{"signature": "if (explicitReceiver is FirResolvedQualifier && explicitReceiver.symbol == null && explicitReceiver.typeArguments.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(explicitReceiver.source, FirErrors.TYPE_ARGUMENTS_NOT_ALLOWED, <STR_LIT>, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val enterState =", "body": "ReadOnlyInitVariableControlFlowInfoImpl(declaredSet, initSet, null)<EOL>"}
{"signature": "fun write(buffer: CharArray, offset: Int, length: Int) {", "body": "<EOL><INDENT><INDENT>if (length == <NUM_LIT> && buffer[<NUM_LIT>] == '\\n') return<EOL><EOL><INDENT><INDENT>messageCollector.report(severity, String(buffer, offset, length))<EOL><INDENT>}"}
{"signature": "val commonPackageName =", "body": "uniquePackageNames.findCommonPackageName()<EOL>"}
{"signature": "if (matcher.group(<NUM_LIT>) == kotlinVariable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>specialFunctions[matcher.group(<NUM_LIT>)] = specialFunctionsByName[matcher.group(<NUM_LIT>)]!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dontSkipRegularMode =", "body": "JsEnvironmentConfigurationDirectives.SKIP_REGULAR_MODE !in module.directives<EOL>"}
{"signature": "fun loadPropertyExtensions(<EOL><INDENT><INDENT>packagePart: PackagePartsCacheData, proto: ProtoBuf.Property, fir: FirProperty,<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "val UNARY_OPERATION_NAMES =", "body": "setOf(INC, DEC, UNARY_PLUS, UNARY_MINUS, NOT, INV)<EOL>"}
{"signature": "val expansiveEdges =", "body": "this@GraphBuilder.expansiveEdges<EOL>"}
{"signature": "package was not reserved for declaration\"<EOL>.", "body": ""}
{"signature": "val superClassInit =", "body": "SuperClassInit(superClass, listOf(GetConstructorParameter(rawPtrConstructorParam)))<EOL>"}
{"signature": "if (a is String && <!USELESS_IS_CHECK!>a is Any<!>) {", "body": "<EOL><INDENT>val i: Int = a.compareTo(<STR_LIT>)<EOL>  }"}
{"signature": "if ($LIB_FLOAT > <NUM_LIT>) {", "body": "return <STR_LIT>; }"}
{"signature": "val TF_SUSPEND_FUNCTION =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!><!REDUNDANT_LABEL_WARNING!>foo@<!> null == x<!>) {", "body": "}"}
{"signature": "val rightBoolean =", "body": "right.unwrapOr<FirLiteralExpression<*>> { return it }?.value as? Boolean ?: return NotEvaluated<EOL>"}
{"signature": "val temporaryBindingTrace =", "body": "<EOL><INDENT><INDENT><INDENT>TemporaryBindingTrace.create(context.trace, <STR_LIT>)<EOL>"}
{"signature": "when (T.getPrimitiveType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.BOOLEAN -> IrConstImpl.boolean(startOffset, endOffset, T, false)<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.CHAR -> IrConstImpl.char(startOffset, endOffset, T, <NUM_LIT>toChar())<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.BYTE -> IrConstImpl.byte(startOffset, endOffset, T, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.SHORT -> IrConstImpl.short(startOffset, endOffset, T, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.INT -> IrConstImpl.int(startOffset, endOffset, T, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.FLOAT -> IrConstImpl.float(startOffset, endOffset, T, <NUM_LIT>f)<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.LONG -> IrConstImpl.long(startOffset, endOffset, T, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>PrimitiveType.DOUBLE -> IrConstImpl.double(startOffset, endOffset, T, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val BOOL =", "body": "<!EVALUATED(<STR_LIT>)!>true<!><EOL>"}
{"signature": "val depsPath =", "body": "config.readSerializedDependencies<EOL>"}
{"signature": "if (gradleNodeModulesProvider != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>task.usesService(gradleNodeModulesProvider)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val newSources =", "body": "sourceDependencies.filterNot { knownSourcePaths.contains(it.virtualFile.path) }<EOL>"}
{"signature": "val xk =", "body": "dx[k]<EOL>"}
{"signature": "when (proto.hasExtension(JvmProtoBuf.isRaw)) {", "body": "<EOL><INDENT><INDENT><INDENT>true -> ConeRawType.create(lowerBound, upperBound)<EOL><INDENT><INDENT><INDENT>false -> ConeFlexibleType(lowerBound, upperBound)<EOL><INDENT><INDENT>}"}
{"signature": "val subtypes =", "body": "kotlinReflections.getSubTypesOf(child.java).map { it.kotlin }<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Out<Number>, list: List<Out<Int>>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL>}"}
{"signature": "val towerElementsForScript =", "body": "holder.collectTowerDataElementsForScript(owner)<EOL>"}
{"signature": "val SharedImmutableAlias =", "body": "ClassId(kotlinNativePackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val fi =", "body": "Fourple::class.typeParameters<EOL>"}
{"signature": "package lib<NUM_LIT><EOL>.", "body": ""}
{"signature": "if (filter.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val byName =", "body": "compareBy<Item> { it.name }<EOL>"}
{"signature": "when (namedReference) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirResolvedNamedReference -> namedReference.resolvedSymbol<EOL><INDENT><INDENT><INDENT>is FirErrorNamedReference -> getSingleUnambiguousCandidate(namedReference)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val TypeName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (expression.subject != null) {", "body": "<EOL><INDENT><INDENT><INDENT>checkDuplicatedLabels(expression, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "fun check(c: KClass<*>, s: String) {", "body": "<EOL><INDENT>if (c.toString() != s) error(<STR_LIT>)<EOL>}"}
{"signature": "val mappingsCache =", "body": "containingCodegen.context.enumEntriesIntrinsicMappingsCache<EOL>"}
{"signature": "if (declaration !is KtClassLikeDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return listOf(kotlinFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testInlineCall() {", "body": "<EOL><INDENT>val x = inlineDemo()<EOL><INDENT>assertEquals(flushDemoCallCounter(), <NUM_LIT>)<EOL><INDENT>assertEquals(x.toString(), <STR_LIT>)<EOL>}"}
{"signature": "val expectedLines =", "body": "<EOL><INDENT><INDENT><INDENT>linesMatcher.groups[<NUM_LIT>]!!.value.split(Regex(<STR_LIT>)).map { if (it == <STR_LIT>) null else it.toInt() }.render()<EOL>"}
{"signature": "fun testReflectWithDx() {", "body": "<EOL><INDENT><INDENT>doTest(ForTestCompileRuntime.reflectJarForTests())<EOL><INDENT>}"}
{"signature": "if (isStandaloneJsVM) {", "body": "<EOL><INDENT><INDENT>const wasmBuffer = read(wasmFilePath, 'binary');<EOL><INDENT><INDENT>const wasmModule = new WebAssembly.Module(wasmBuffer);<EOL><INDENT><INDENT>wasmInstance = new WebAssembly.Instance(wasmModule, importObject);<EOL><INDENT>  }"}
{"signature": "if (!isInsideExpectClass && !hasAbstractModifier && !function.isExternal && !isInsideExternal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.NON_ABSTRACT_FUNCTION_WITH_NO_BODY, functionSymbol, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testKt<NUM_LIT>(gradleVersion: GradleVersion) {", "body": "}<EOL><EOL><INDENT>@Disabled(<STR_LIT>)<EOL><INDENT>@GradleTest<EOL><INDENT>override fun useGeneratedKotlinSourceK<NUM_LIT>(gradleVersion: GradleVersion) {}"}
{"signature": "if (!variableDescriptor.isUnderscoreNamed || !isReferencingToUnderscoreNamedParameterForbidden) {", "body": "<EOL><INDENT><INDENT><INDENT>catchScope.addVariableDescriptor(variableDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val testCallableRef<NUM_LIT> =", "body": "::`__`<EOL>"}
{"signature": "val interopClass =", "body": "Class.forName(<STR_LIT>, true, kotlinNativeClassLoader)<EOL>"}
{"signature": "package p<NUM_LIT>yield<EOL>.", "body": ""}
{"signature": "if (superType.anyBound(this::isMyTypeVariable)) {", "body": "<EOL><INDENT><INDENT><INDENT>answer = simplifyLowerConstraint(superType, subType, isFromNullabilityConstraint)<EOL><INDENT><INDENT>}"}
{"signature": "val subject =", "body": "expressionToMatch ?: return null<EOL>"}
{"signature": "when(crossTarget) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> subproject.kotlin.presets.linuxArm<NUM_LIT><EOL><INDENT><INDENT><STR_LIT> -> subproject.kotlin.presets.linuxX<NUM_LIT><EOL><INDENT><INDENT>else -> throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val extractedBranches =", "body": "mutableListOf<ExtractedWhenBranch<Any>>()<EOL>"}
{"signature": "if (isDynamicAccess) {", "body": "<EOL><INDENT><INDENT><INDENT>return convertToIrSetCallForDynamic(<EOL><INDENT><INDENT><INDENT><INDENT>variableAssignment,<EOL><INDENT><INDENT><INDENT><INDENT>explicitReceiverExpression,<EOL><INDENT><INDENT><INDENT><INDENT>type,<EOL><INDENT><INDENT><INDENT><INDENT>calleeReference,<EOL><INDENT><INDENT><INDENT><INDENT>firSymbol ?: error(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT>assignedValue,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (newLastModified <= oldLastModified) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>file.setLastModified(oldLastModified + <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val COROUTINES_METADATA_LINE_NUMBERS_JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (singleCompilation != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>MultipleSourceSetRootsInCompilation(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>singleCompilation,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>unexpectedSourceSetRoot.name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>expectedSourceSetRoot<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun reportStubsOutputForIC(generatedFile: File) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!reportOutputFiles) return<EOL><INDENT><INDENT><INDENT><INDENT>if (classFilePathWithoutExtension == <STR_LIT>) return<EOL><INDENT><INDENT><INDENT><INDENT>val sourceFiles = (outputFiles?.get(classFilePathWithoutExtension)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)).sourceFiles<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(OUTPUT, OutputMessageUtil.formatOutputMessage(sourceFiles, generatedFile))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun conflict(fromSuper: CallableMemberDescriptor, fromCurrent: CallableMemberDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val _annotations =", "body": "ReflectProperties.lazySoft { descriptor.computeAnnotations() }<EOL>"}
{"signature": "fun addElement(builder: ProtoBuf.TypeTable.Builder, element: ProtoBuf.Type.Builder) {", "body": "<EOL><INDENT><INDENT>builder.addType(element)<EOL><INDENT>}"}
{"signature": "fun exitTryExpression(callCompleted: Boolean) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitTryExpression(callCompleted).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val appSubproject =", "body": "subProject(<STR_LIT>)<EOL>"}
{"signature": "val shortIterator =", "body": "getPrimitiveIterator(PrimitiveType.SHORT)<EOL>"}
{"signature": "if (lessThan(TWO_PWR_<NUM_LIT>_) && other.lessThan(TWO_PWR_<NUM_LIT>_)) {", "body": "<EOL><INDENT><INDENT>return fromNumber(toNumber() * other.toNumber())<EOL><INDENT>}"}
{"signature": "package protected accesses are both only possible from a subclass of the declaration<EOL>.", "body": ""}
{"signature": "if (result is IrConst<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>reportInlinedJavaConst(result)<EOL><INDENT><INDENT>}"}
{"signature": "val workspaceFile =", "body": "File(projectDir, <STR_LIT>)<EOL>"}
{"signature": "val predSuspensionPoints =", "body": "suspensionPoints.associateWith { findSuspensionPointPredecessors(it) }<EOL>"}
{"signature": "if (memberDeclaration !is FirProperty || !memberDeclaration.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(memberDeclaration.visibility.asString())<EOL><INDENT><INDENT><INDENT>renderModifier(memberDeclaration.modalityAsString())<EOL><INDENT><INDENT>}"}
{"signature": "if (unit > DurationUnit.NANOSECONDS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val d = <NUM_LIT>toDuration(unit)<EOL><INDENT><INDENT><INDENT><INDENT>val h = d / <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>val markH<NUM_LIT> = mark + h<EOL><INDENT><INDENT><INDENT><INDENT>val markH<NUM_LIT> = mark + d - h<EOL><INDENT><INDENT><INDENT><INDENT>assertEqualMarks(markH<NUM_LIT>, markH<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in (<NUM_LIT> .. <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "if (target is FirField && target.origin == FirDeclarationOrigin.Synthetic.DelegateField) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>resolveOutsideClassBody(target, transformer::transformDelegateField)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeSymbol != null && webCheckerUtils.isNativeOrExternalInterface(typeSymbol, context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeArgument.source ?: expression.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirWebCommonErrors.EXTERNAL_INTERFACE_AS_REIFIED_TYPE_ARGUMENT,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val valueParamSizeToItsStartCoroutineUninterceptedOrReturn =", "body": "<EOL><INDENT><INDENT>context.intrinsics.startCoroutineUninterceptedOrReturnGeneratorVersion.groupPerValueParamSize()<EOL>"}
{"signature": "if (ch == '.') {", "body": "<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (comp[v] == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>dfs<NUM_LIT>(v, j++)<EOL><INDENT><INDENT>}"}
{"signature": "val signatureCount =", "body": "ois.readInt()<EOL>"}
{"signature": "val returnTargetsInitializedFiles =", "body": "mutableMapOf<IrReturnTargetSymbol, BitSet>()<EOL>"}
{"signature": "if (fileList == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>onFail?.invoke(root, AccessDeniedException(file = root, reason = <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>failed = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in BENCHMARK_SIZE downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val next = a + b<EOL><INDENT><INDENT><INDENT>a = b<EOL><INDENT><INDENT><INDENT>b = next<EOL><INDENT><INDENT>}"}
{"signature": "fun visitPackageDirective(packageDirective: FirPackageDirective) {", "body": "<EOL><INDENT><INDENT>visitElement(packageDirective)<EOL><INDENT>}"}
{"signature": "val colors =", "body": "<STR_LIT><EOL>"}
{"signature": "val jsDir =", "body": "File(workingDir, <STR_LIT>).also { it.invalidateDir() }<EOL>"}
{"signature": "if (!toTypeErased.isSubclassOf(fromTypeErased)) {", "body": "<EOL><INDENT><INDENT><INDENT>return builder.irFalse()<EOL><INDENT><INDENT>}"}
{"signature": "package OpenInheritedMethodClashedWithChildPropertyJsName<EOL>.", "body": ""}
{"signature": "val objCObjectRawPtrFunName =", "body": "<STR_LIT><EOL>"}
{"signature": "val found =", "body": "matcher.find()<EOL>"}
{"signature": "val codeMetaInfos =", "body": "infosPerFile.getValue(file)<EOL>"}
{"signature": "for ((index, x) in sequence.withIndex()) {", "body": "<EOL><INDENT><INDENT>s.append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val GENERATE_SMAP =", "body": "true<EOL>"}
{"signature": "val defaultLanguageSettings =", "body": "kotlinSourceSet.languageSettings as DefaultLanguageSettingsBuilder<EOL>"}
{"signature": "val expectedFailureTxtFile =", "body": "testPathFull.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun write(v: ByteWriter)<EOL><INDENT>abstract fun writeByte(v: Byte)<EOL><INDENT>abstract fun writeBytes(v: ByteArray)<EOL><INDENT>abstract fun createTemp(): ByteWriter<EOL><EOL><INDENT>fun writeUByte(v: UByte) {", "body": "<EOL><INDENT><INDENT>writeByte(v.toByte())<EOL><INDENT>}"}
{"signature": "var rValueType =", "body": "rValue.resolvedType<EOL>"}
{"signature": "fun f(x: Error) {", "body": "throw x }"}
{"signature": "val containersWithInitializedThreadLocals =", "body": "BitSet()<EOL>"}
{"signature": "val firstExpression =", "body": "(this as? KtFunction)?.bodyBlockExpression?.statements?.firstOrNull() ?: return false<EOL>"}
{"signature": "val baseOutputPath =", "body": "JsEnvironmentConfigurator.getJsModuleArtifactPath(testServices, module.name, translationMode)<EOL>"}
{"signature": "val GRADLE_PLUGIN_SRC_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "val componentIndex =", "body": "destructuringParent.entries.indexOf(element) + <NUM_LIT><EOL>"}
{"signature": "if (!irClass.isValue) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>+irIfThenReturnTrue(irEqeqeq(irThis(), irOther()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stableSmartCasts =", "body": "bindingContext[BindingContext.SMARTCAST, expression]<EOL>"}
{"signature": "if (declaration !is FirConstructor && declaration.body != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirJvmErrors.EXTERNAL_DECLARATION_CANNOT_HAVE_BODY, context)<EOL><INDENT><INDENT>}"}
{"signature": "val copyIter =", "body": "reversedCopy.listIterator()<EOL>"}
{"signature": "if (isInlineFunPublicOrPublishedApi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkSuperCalls(calledDescriptor, call, expression, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val enumClassC =", "body": "typeTranslator.translateType(enumClass.defaultType)<EOL>"}
{"signature": "if (receiverInfo.shouldReportUnsafeCall) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticsHolder.addDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT>UnsafeCallError(subCallArgument, isForImplicitInvoke = receiverInfo.reportUnsafeCallAsUnsafeImplicitInvoke)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (n in <NUM_LIT>.b) {", "body": "<EOL><INDENT><INDENT><INDENT><expr>if (a > <NUM_LIT>) throw Exception(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>if (a + b > <NUM_LIT>) break@loop<NUM_LIT><EOL><INDENT><INDENT><INDENT>consume(a - b)<EOL><INDENT><INDENT><INDENT>break@loop<NUM_LIT></expr><EOL><INDENT><INDENT>}"}
{"signature": "if (!regex.matches(absoluteTestDataPath)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.configuration()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val anonymous =", "body": "(object {})::class<EOL>"}
{"signature": "if (propertyProto.name in propertiesOrderFromExtension) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.registeredInSerializationPluginMetadataExtension = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(mr: MyRecord<String>) {", "body": "<EOL><INDENT>takeString(mr.x)<EOL><INDENT>takeString(mr.x())<EOL>}"}
{"signature": "val trueSparseArray =", "body": "parcelableCreator<TrueBox>().createFromParcel(parcel).value<EOL>"}
{"signature": "val intsAsList =", "body": "ints.asList()<EOL>"}
{"signature": "import <!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>kotlin.", "body": "jvm.functions.Function<NUM_LIT><!><EOL>"}
{"signature": "if (boxInlineClassBeforeInvoke) {", "body": "<EOL><INDENT><INDENT><INDENT>StackValue.boxInlineClass(dispatchReceiverKotlinType!!, v, StaticTypeMapperForOldBackend)<EOL><INDENT><INDENT>}"}
{"signature": "val functionTypes =", "body": "<EOL><INDENT><INDENT>ReferencableAndDefinable<IrFunctionSymbol, WasmFunctionType>()<EOL>"}
{"signature": "for (expectNestedClass in expectClass.nestedClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val actualNestedClass = actualNestedClassesByName[expectNestedClass.name] ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>actualClasses[expectNestedClass.classIdOrFail] = actualNestedClass.symbol<EOL><INDENT><INDENT><INDENT><INDENT>recordRecursively(expectNestedClass, actualNestedClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val declarationAdder =", "body": "DeclarationAdder(typeResolver)<EOL>"}
{"signature": "val cPointedName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun addCompatibilityWarning(other: Candidate) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!isBackingFieldAccessible(referencedProperty, context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val diagnostic = chooseDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LATEINIT_INTRINSIC_CALL_ON_NON_ACCESSIBLE_PROPERTY_WARNING,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LATEINIT_INTRINSIC_CALL_ON_NON_ACCESSIBLE_PROPERTY<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(diagnostic.on(reportOn, referencedProperty))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val getRecordComponents =", "body": "cache.getRecordComponents ?: return null<EOL>"}
{"signature": "fun boxDynamic(d: dynamic) {", "body": "<EOL><INDENT>anyExample(<!JS_EXTERNAL_ARGUMENT!>d<!>)<EOL><INDENT>anyOrNullExample(<!JS_EXTERNAL_ARGUMENT!>d<!>)<EOL><INDENT>genericExample(<!JS_EXTERNAL_ARGUMENT!>d<!>)<EOL><INDENT>genericOrNullExample(<!JS_EXTERNAL_ARGUMENT!>d<!>)<EOL><INDENT>dynamicExample(<!JS_EXTERNAL_ARGUMENT!>d<!>)<EOL>}"}
{"signature": "val USE_EXPERIMENTAL_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "fun baa(y: Int) {", "body": "<EOL><INDENT><INDENT>baa(y)<EOL><INDENT>}"}
{"signature": "var hasSelfTypeConstraint =", "body": "false<EOL>"}
{"signature": "val token =", "body": "getMandatoryProperty(<STR_LIT>)<EOL>"}
{"signature": "val lastAssignedVars =", "body": "mutableListOf<Pair<JsName, JsNode>>()<EOL>"}
{"signature": "val projectFoo =", "body": "projectWithCinterops(<STR_LIT>, rootProject)<EOL>"}
{"signature": "if (currentLambdaArgument === lambdaArgument) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>currentValueParameter<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val decodeEnumCall =", "body": "JsInvocation(JsNameRef(decodeEnumF, JsNameRef(jsFun.parameters[<NUM_LIT>].name)), serialClassDescRef)<EOL>"}
{"signature": "val SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "fun shlForULong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>UL, <NUM_LIT>UL shl <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>UL, <NUM_LIT>UL shl <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (valueArgument is VarargValueArgument) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (target in kotlin.targets) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFalse(target.internal.isSourcesPublishable)<EOL><INDENT><INDENT>}"}
{"signature": "if (isMimeScheme) {", "body": "<EOL>"}
{"signature": "val testFunctions =", "body": "mutableMapOf<String, MutableList<String>>()<EOL>"}
{"signature": "val nodesToMark =", "body": "element.lighterASTNode.getLeavesOrReachableChildren(reachable, unreachable)<EOL>"}
{"signature": "for (i in C()) {", "body": "<EOL><INDENT><INDENT><INDENT>foo(i)<EOL><INDENT><INDENT>}"}
{"signature": "if (!nextUsed) {", "body": "<EOL><INDENT>  nextUsed = true<EOL><INDENT>  return next as Byte<EOL><INDENT>}"}
{"signature": "val reducedTypes =", "body": "typesFromSmartCast.filterTo(mutableListOf()) { !it.isKindOfNothing }<EOL>"}
{"signature": "if (HostManager.host == KonanTarget.MACOS_ARM<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val minSupportedMacAArch<NUM_LIT>Version = GradleVersion.version(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>val withDaemon = (GradleVersion.version(wrapperVersion) >= minSupportedMacAArch<NUM_LIT>Version)<EOL><INDENT><INDENT><INDENT>options.copy(withDaemon = withDaemon && options.withDaemon)<EOL><INDENT><INDENT>}"}
{"signature": "val structureFactory =", "body": "ExtTestDataFileStructureFactory(parentDisposable = this)<EOL>"}
{"signature": "if (declaration.hasReifiedTypeArguments(reifiedArguments)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>saveDeclarationsFromStackIntoRegenerationPool()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitFinallyBlockEnterNode(node: FinallyBlockEnterNode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>finallyScopeCount++<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!checkVertexExistance(start)) {", "body": "<EOL><INDENT><INDENT><INDENT>throw(VertexAbsenceMultigraphException(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val localAnnotationProperty =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (open) {", "body": "}"}
{"signature": "if (this is String) {", "body": "<EOL><INDENT><INDENT>length<EOL><INDENT><INDENT>this<!UNNECESSARY_SAFE_CALL!>?.<!>length<EOL><EOL><INDENT><INDENT>bar<NUM_LIT>()<EOL><INDENT><INDENT>bar<NUM_LIT>()<EOL><INDENT><INDENT>bar<NUM_LIT>()<EOL><INDENT>}"}
{"signature": "val moduleStructure =", "body": "ModulesStructure(environmentForJS.project, mainModule, configuration, libraries, friendLibraries)<EOL>"}
{"signature": "if (hasError) {", "body": "<EOL><INDENT><INDENT><INDENT>val descriptor = resolveToPackageOrClass(<EOL><INDENT><INDENT><INDENT><INDENT>qualifierPartList, scope.ownerDescriptor.module, trace, ownerDescriptor, scope, position = QualifierPosition.TYPE<EOL><INDENT><INDENT><INDENT>) as? ClassifierDescriptor<EOL><INDENT><INDENT><INDENT>return TypeQualifierResolutionResult(qualifierPartList, descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (!isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fillDanglingConstraintsTo(it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (usesDirty && metaMaskConsistent) {", "body": "<EOL><INDENT><INDENT><INDENT>functionScope.recordIntrinsicRememberFixUp(<EOL><INDENT><INDENT><INDENT><INDENT>isMemoizedLambda,<EOL><INDENT><INDENT><INDENT><INDENT>inputExprs,<EOL><INDENT><INDENT><INDENT><INDENT>inputArgMetas,<EOL><INDENT><INDENT><INDENT><INDENT>cacheCall<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val MAIN_COMPILATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val companions =", "body": "classes.mapNotNull(IrClass::companionObject)<EOL>"}
{"signature": "fun insertTopDown(index: Int, instance: Unit) {", "body": "}<EOL><INDENT><INDENT>override fun insertBottomUp(index: Int, instance: Unit) {}"}
{"signature": "val executionPointA =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "if (startIndex + charCount > testString.length) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val needsOverride =", "body": "(overriddenExportedGetter && noOverriddenExportedSetter) ||<EOL>"}
{"signature": "if (mode.fqn) {", "body": "<EOL><INDENT><INDENT><INDENT>append(c)<EOL><INDENT><INDENT>}"}
{"signature": "val supplementaryGenerator =", "body": "SupplementaryGenerator(outputRoot)<EOL>"}
{"signature": "val aDouble =", "body": "arrayListOf<Double>(<NUM_LIT>)<EOL>"}
{"signature": "val embeddedModuleName =", "body": "renameTo ?: other.projectName<EOL>"}
{"signature": "while (r != null && r.isWhitespace()) {", "body": "<EOL><INDENT><INDENT>r = nextChar()<EOL><INDENT>}"}
{"signature": "val kexeModuleName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (valueSetterParameter.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val irResultType =", "body": "callGenerator.translateType(resultType)<EOL>"}
{"signature": "fun f(x: Any?) {", "body": "}<EOL>fun f(x: Byte) {}"}
{"signature": "when (PlatformWidthIndex.platformWidthOf(target)) {", "body": "<EOL><INDENT><INDENT><INDENT>PlatformIntWidth.INT -> type.classifierId == intPlatformId || type.classifierId == mixedPlatformId<EOL><INDENT><INDENT><INDENT>PlatformIntWidth.LONG -> type.classifierId == longPlatformId || type.classifierId == mixedPlatformId<EOL><INDENT><INDENT><INDENT>PlatformIntWidth.MIXED -> type.classifierId == mixedPlatformId<EOL><INDENT><INDENT><INDENT>null -> false<EOL><INDENT><INDENT>}"}
{"signature": "if (old.hasReified()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.reified != new.reified) return false<EOL><INDENT><INDENT>}"}
{"signature": "val rawParameters =", "body": "matcher.group(<STR_LIT>)<EOL>"}
{"signature": "val nonLazy =", "body": "MyColor(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "if (containingDeclaration.classKind == ClassKind.ENUM_ENTRY && !declaration.isInner && !declaration.isCompanion) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, NESTED_CLASS_NOT_ALLOWED, declaration.description, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (containingFile is KtCodeFragment) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val HAS_MARGIN =", "body": "<STR_LIT>\"Hello,<EOL>"}
{"signature": "val METADATA_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val catchContext =", "body": "context().innerContextWithAliased(parameterDescriptor, parameterRef)<EOL>"}
{"signature": "val constituents =", "body": "constituentTypes(setOf(typeProjection.type))<EOL>"}
{"signature": "val backingFieldReference =", "body": "expression.calleeReference as? FirBackingFieldReference ?: return<EOL>"}
{"signature": "fun testGroovyDownloadAndImport(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestGit(<EOL><INDENT><INDENT><INDENT>gradleVersion,<EOL><INDENT><INDENT><INDENT>groovyTemplateProjectName,<EOL><INDENT><INDENT><INDENT>tag = <STR_LIT>,<EOL><INDENT><INDENT><INDENT>isGradleBuildScript = true<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val imp =", "body": "generateObjCImp(function, function, methodBridge, isVirtual = false)<EOL>"}
{"signature": "val isolatingOrigin =", "body": "aptCache.getOriginForGeneratedIsolatingType(impactedType, javaCache::getSourceForType)<EOL>"}
{"signature": "if (this is C<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>bindTo(<!ARGUMENT_TYPE_MISMATCH!><STR_LIT><!>)<EOL><INDENT><INDENT>}"}
{"signature": "val myNumber =", "body": "cache.javaCache.getStructure(MY_TEST_DIR.resolve(<STR_LIT>))!! as SourceFileStructure<EOL>"}
{"signature": "val calleeParameters =", "body": "method.getValueParameters()<EOL>"}
{"signature": "val newShift =", "body": "maxOf(shift - <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val orphan<NUM_LIT> =", "body": "kotlin.sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "for (symbol in provider.getTopLevelCallableSymbols(packageFqName, name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>firRenderer.renderElementAsString(symbol.fir)<EOL><INDENT><INDENT><INDENT><INDENT>builder.appendLine()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val bConst =", "body": "aConst + <NUM_LIT><EOL>"}
{"signature": "val publishedConfigurationName =", "body": "publishedConfigurationName(kotlinUsageContext.name)<EOL>"}
{"signature": "val superProps =", "body": "bindingContext!!.serializablePropertiesFor(superClass).serializableProperties<EOL>"}
{"signature": "val lowBytes =", "body": "input.readFixed<NUM_LIT>().toULong()<EOL>"}
{"signature": "val resourcePath =", "body": "clazz.name.replace('.', '/') + <STR_LIT><EOL>"}
{"signature": "val ignoreReturnType =", "body": "isFromSources(me) != isFromSources(other)<EOL>"}
{"signature": "val upperBoundText =", "body": "prettyPrint { renderType(type.upperBound, this@prettyPrint) }<EOL>"}
{"signature": "var ch =", "body": "nextChar()<EOL>"}
{"signature": "import embedStaticLibraries.", "body": "*<EOL>"}
{"signature": "if (test.enabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nodeJs.taskRequirements.addTaskRequirements(test)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newMemScope =", "body": "scope.createTemporaryVariable(irCall(symbols.interopMemScope.owner.constructors.single()))<EOL>"}
{"signature": "val a_x_Long =", "body": "ALong().x as Any as LongArray<EOL>"}
{"signature": "val ptr =", "body": "wasm_i<NUM_LIT>_load(typeInfoPtr + ptrOffset)<EOL>"}
{"signature": "val deprecatedSinceKotlinWarningSince =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val visitorType =", "body": "this.visitorType<EOL>"}
{"signature": "val metadataArtifactFile =", "body": "metadataArtifact.file<EOL>"}
{"signature": "val changedLibKtCacheDir =", "body": "getLibraryFileCache(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val maxCalcAdapter =", "body": "wrapWithMaxLocalCalc(node)<EOL>"}
{"signature": "if (changes && !queued[insn]) {", "body": "<EOL><INDENT><INDENT><INDENT>queued[insn] = true<EOL><INDENT><INDENT><INDENT>queue[top++] = insn<EOL><INDENT><INDENT>}"}
{"signature": "val requestedStdlibVersion =", "body": "coreLibrariesVersion.get()<EOL>"}
{"signature": "when (path) {", "body": "<EOL><INDENT><INDENT><INDENT>FlowPath.Default -> flow<EOL><INDENT><INDENT><INDENT>else -> getAlternateFlow(path) ?: error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!bridge.isInstance) {", "body": "<EOL><INDENT><INDENT>attributes += <STR_LIT><EOL><INDENT>}"}
{"signature": "val CLASS_KIND =", "body": "FlagFieldEx.after<AbiClassKind>(MODALITY)<EOL>"}
{"signature": "val getterProperty =", "body": "<NUM_LIT>let { it + <NUM_LIT> }<EOL>"}
{"signature": "val slotToVariableLocation =", "body": "mutableMapOf<Int, VariableDebugLocation>()<EOL>"}
{"signature": "val actualDeclarations =", "body": "result.output.lines().drop(<NUM_LIT>).dropLast(<NUM_LIT>).map { it.trim() }.toSet()<EOL>"}
{"signature": "val minusLongValue =", "body": "-longValue<EOL>"}
{"signature": "var currentlyMissing =", "body": "required<EOL>"}
{"signature": "val asStarList =", "body": "foo() as List<*><EOL>"}
{"signature": "val isFakeOverrideOfJvmDefault =", "body": "toInlinedErasedClass &&<EOL>"}
{"signature": "val moduleBuildDir =", "body": "buildDir.resolve(moduleName)<EOL>"}
{"signature": "val isInferenceCompatibilityEnabled =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.InferenceCompatibility)<EOL>"}
{"signature": "val matchingAvailableSymbol =", "body": "availableClassifiers.firstOrNull { it.availableSymbol.symbol.classIdIfExists == classId }<EOL>"}
{"signature": "val objOffsets =", "body": "getObjOffsets(bodyType)<EOL>"}
{"signature": "if (isolatedList != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>updateCurrentThreadAffinity(isolatedList)<EOL><INDENT>}"}
{"signature": "val invokeSuspendFunctionSymbol =", "body": "<EOL><INDENT><INDENT><INDENT>symbols.baseContinuationImpl.owner.declarations<EOL>"}
{"signature": "val lastParameterIndex =", "body": "parameters.lastIndex<EOL>"}
{"signature": "if (upperBoundType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val lowerBound = simpleType(typeReference, attributes)<EOL><INDENT><INDENT><INDENT>val upperBound = type(upperBoundType)<EOL><EOL><INDENT><INDENT><INDENT>return ConeFlexibleType(lowerBound!!, upperBound as ConeSimpleKotlinType)<EOL><INDENT><INDENT>}"}
{"signature": "val adapterGenerator =", "body": "AdapterGenerator(c, conversionScope)<EOL>"}
{"signature": "if (!header.metadataVersion.isCompatibleWithCurrentCompilerVersion()) {", "body": "<EOL><INDENT><INDENT><INDENT>return createIncompatibleAbiVersionFileStub()<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_LANGUAGE_VERSION_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (third) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun replaceInlineStatus(newInlineStatus: InlineStatus) {", "body": "<EOL><INDENT><INDENT>inlineStatus = newInlineStatus<EOL><INDENT>}"}
{"signature": "val kotlinOutOfProcessOOMHelperMessage =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testResolveJunit() {", "body": "<EOL><INDENT><INDENT>val res = evalFile(File(<STR_LIT>))<EOL><INDENT><INDENT>assertSucceeded(res)<EOL><INDENT>}"}
{"signature": "val METHOD_MODIFIERS =", "body": "VISIBILITY_MODIFIERS or MODALITY_MODIFIERS or<EOL>"}
{"signature": "fun visitArrayLiteral(arrayLiteral: FirArrayLiteral) {", "body": "<EOL><INDENT><INDENT>visitElement(arrayLiteral)<EOL><INDENT>}"}
{"signature": "if (exceptionClassName != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (useStaticFramework.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (val receiver = element.receiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KtNameReferenceExpression -> receiver.getReferencedName()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> receiver.text<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val invocation =", "body": "expressionStatement?.expression as? JsInvocation<EOL>"}
{"signature": "for (i in <NUM_LIT>.array.size + <NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>array[i] = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val irClassMapEntry =", "body": "irClass.declarations.filterIsInstance<IrClass>().single()<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: String?) {", "body": "<EOL><INDENT>trickyRequireNotNull(x)<EOL><INDENT>x.length<EOL>}"}
{"signature": "fun visitContainerExpression(expression: IrContainerExpression, data: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>handleStatementContainer(expression, data)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val linuxMainSourceFile =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "if (shouldBeRendered) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>actualRender<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (cinteropArtifact.buildDependencies.getDependencies(null) != setOf(project.tasks.getByName(cinterop.interopProcessingTaskName))) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val ANNOTATED_TYPEALIAS_METHOD_NAME_SUFFIX =", "body": "ANNOTATIONS_SUFFIX<EOL>"}
{"signature": "if (other is JsExternalBox) {", "body": "<EOL><INDENT><INDENT><INDENT>externrefEquals(ref, other.ref)<EOL><INDENT><INDENT>}"}
{"signature": "val cached =", "body": "AtomicReference<CachedValue<T>?>(null)<EOL>"}
{"signature": "val sourceInformationPreamble =", "body": "mutableStatementContainer()<EOL>"}
{"signature": "val eagerInitializerBlock =", "body": "JsCompositeBlock()<EOL>"}
{"signature": "val longIterator =", "body": "getPrimitiveIterator(PrimitiveType.LONG)<EOL>"}
{"signature": "val EXAMPLE_ANNOTATION_REGEX =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "if (type.unwrap() is DefinitelyNotNullType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>metDefinitelyNotNullType = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>builder.flags = Flags.getTypeFlags(false, true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun addValue(t: T, weight: Long?) {", "body": "<EOL><INDENT><INDENT>myValue = t<EOL><INDENT>}"}
{"signature": "val typeAliasList =", "body": "if (c.components.configuration.typeAliasesAllowed) typeAliasList else emptyList()<EOL>"}
{"signature": "if (isValidSingleUnderscore && !languageVersionSettings.supportsFeature(LanguageFeature.SingleUnderscoreForParameterName)) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>identifier,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageFeature.SingleUnderscoreForParameterName to languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val shouldGenerateImplicitConstructor =", "body": "<EOL><INDENT><INDENT><INDENT>(classWrapper.isEnumEntry() || !classWrapper.hasSecondaryConstructor) &&<EOL>"}
{"signature": "val anyFqn =", "body": "StandardNames.FqNames.any.toSafe()<EOL>"}
{"signature": "val verificationMetadata =", "body": "mapper.readValue<VerificationMetadata>(File(<STR_LIT>))<EOL>"}
{"signature": "if (javaField.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>containingClassForStaticMemberAttr = classId.toLookupTag()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val PATTERN_SINGLE_WILD =", "body": "<STR_LIT><EOL>"}
{"signature": "val argMapping =", "body": "ktAnnotation?.calleeExpression<EOL>"}
{"signature": "if (ktClassOrObject.isInterface) {", "body": "<EOL><INDENT><INDENT><INDENT>LazyObjCProtocolImpl(name, ktClassOrObject, this)<EOL><INDENT><INDENT>}"}
{"signature": "if (isWrongCallWithExplicitTypeArguments(resolvedCall, outerCall)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.TYPE_ARGUMENTS_NOT_ALLOWED.on(reportOn as KtElement, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val falseVal =", "body": "<!EVALUATED(<STR_LIT>)!>false<!><EOL>"}
{"signature": "if (obj !is Bar<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException()<EOL><INDENT><INDENT>}"}
{"signature": "val returnMap =", "body": "mutableMapOf<IrReturnableBlockSymbol, (IrReturn) -> IrExpression>()<EOL>"}
{"signature": "if (arguments.isEmpty() && function.valueParameters.isEmpty()) {", "body": "<EOL><INDENT><INDENT>return EmptyArgumentMapping<EOL><INDENT>}"}
{"signature": "if (resetTimeAttributes) {", "body": "<EOL><INDENT><INDENT><INDENT>val zero = FileTime.fromMillis(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>Files.getFileAttributeView(newPath, BasicFileAttributeView::class.java).setTimes(zero, zero, zero);<EOL><INDENT><INDENT>}"}
{"signature": "fun newPublishedFun() {", "body": "}<EOL><EOL><EOL>@RequiresOptIn<EOL>@Retention(AnnotationRetention.BINARY)<EOL>annotation class Marker<EOL><EOL>@SinceKotlin(<STR_LIT>)<EOL>@WasExperimental(Marker::class)<EOL>fun newFunExperimentalInThePast() {}"}
{"signature": "if (finallyDeepShift == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((actual, expects) in actualToExpect) {", "body": "<EOL><INDENT><INDENT><INDENT>complementaryFilesMap[actual] = expects.union(complementaryFilesMap[actual].orEmpty())<EOL><INDENT><INDENT>}"}
{"signature": "for (c in sequence) {", "body": "<EOL><INDENT><INDENT>s += c<EOL><INDENT>}"}
{"signature": "val implicitDependencies =", "body": "listOfNotNull(DefaultBuiltIns.Instance.builtInsModule)<EOL>"}
{"signature": "fun visitLambdaExpression(lambdaExpression: KtLambdaExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitLambdaExpression(lambdaExpression)<EOL><INDENT><INDENT><INDENT>block(lambdaExpression)<EOL><INDENT><INDENT>}"}
{"signature": "if (symbol.owner.parentAsClass.hasAnnotationSafe(ComposeFqNames.Immutable)) {", "body": "<EOL><INDENT><INDENT><INDENT>return areAllArgumentsStatic()<EOL><INDENT><INDENT>}"}
{"signature": "val typeRegistry =", "body": "FileTypeRegistry.getInstance()<EOL>"}
{"signature": "val partClassFile =", "body": "facadeKtFile.virtualFile.parent.findChild(partClassFileShortName) ?: return@mapNotNull null<EOL>"}
{"signature": "val errorPolicy =", "body": "configuration[JSConfigurationKeys.ERROR_TOLERANCE_POLICY] ?: ErrorTolerancePolicy.DEFAULT<EOL>"}
{"signature": "fun renderModifiers(backingField: FirBackingField) {", "body": "<EOL><INDENT>}"}
{"signature": "val multiModule =", "body": "testServices.moduleStructure.modules.size > <NUM_LIT><EOL>"}
{"signature": "var array =", "body": "LongArray(<NUM_LIT>)<EOL>"}
{"signature": "if (variableReceiver.hasTypesFromSmartCasts()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return ReceiverExpressionKotlinCallArgument(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>createReceiverValueWithSmartCastInfo(variable),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>isForImplicitInvoke = true<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (parameter in function.valueParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>call.putValueArgument(parameter.index, irGet(parameter))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (<STR_LIT> == method.name) {", "body": "<EOL><INDENT><INDENT><INDENT>v.visitMethodInsn(INVOKESPECIAL, defaultImplOwner.internalName, <STR_LIT>, defaultMethodDesc, false)<EOL><INDENT><INDENT>}"}
{"signature": "val functionContext =", "body": "invokingContext<EOL>"}
{"signature": "val float =", "body": "Long.MAX_VALUE.toFloat() + long.toFloat()<INDENT>"}
{"signature": "val commonScripts =", "body": "ktFiles.filter { it.isScript() && (it.isCommonSource == true || it.hmppModuleName != lastHmppModule?.name) }<EOL>"}
{"signature": "var cChanges =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (x in generic.foo) {", "body": "<EOL><INDENT><INDENT>x.length<INDENT> }"}
{"signature": "val system =", "body": "candidate.system<EOL>"}
{"signature": "val originalMethod =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (descriptor is PropertyGetterDescriptor) syntheticProperty.getMethod else syntheticProperty.setMethod<EOL>"}
{"signature": "val locals =", "body": "mutableSetOf<IrValueDeclaration>()<EOL>"}
{"signature": "fun registerProjectServices(project: MockProject) {", "body": "<EOL><INDENT><INDENT>PluginStructureProvider.registerProjectServices(project, PLUGIN_RELATIVE_PATH)<EOL><INDENT><INDENT>PluginStructureProvider.registerProjectListeners(project, PLUGIN_RELATIVE_PATH)<EOL><INDENT>}"}
{"signature": "val scopeStack =", "body": "mutableListOf<ScopeWithIr>()<EOL>"}
{"signature": "if (trimLines) joinToString(<STR_LIT>) {", "body": "it.trimEnd() }"}
{"signature": "fun testIdempotentAssign(operation: (MutableMap<String, Int>) -> Unit) {", "body": "<EOL><INDENT><INDENT>val original = hashMapOf(<STR_LIT> to <NUM_LIT>, <STR_LIT> to <NUM_LIT>)<EOL><INDENT><INDENT>val result = HashMap(original)<EOL><INDENT><INDENT>operation(result)<EOL><INDENT><INDENT>assertEquals(original, result)<EOL><INDENT>}"}
{"signature": "package aa;<EOL>.", "body": ""}
{"signature": "var parentFromSecondary =", "body": "pckg.ParentWithSecondary.createO()<EOL>"}
{"signature": "if (request.query.after != undefined) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>afterDate = decodeURIComponent(request.query.after)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mutableListRemove<NUM_LIT> =", "body": "<!EVALUATED: `After remove new size is <NUM_LIT>`!>testRemove(mutableListOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), <STR_LIT>)<!><EOL>"}
{"signature": "val enhancedNullability =", "body": "getEnhancedNullability(effectiveQualifiers, position)<EOL>"}
{"signature": "val metadataParameter =", "body": "calleeDescriptor.valueParameters[<NUM_LIT>]<EOL>"}
{"signature": "if (lambdaClassOriginName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>ext.lambdaClassOriginName = c[lambdaClassOriginName]<EOL><INDENT><INDENT>}"}
{"signature": "fun set(index: Int, value: ULong) {", "body": "<EOL><INDENT><INDENT>storage[index] = value.toLong()<EOL><INDENT>}"}
{"signature": "fun phaseSpecificCheckIsResolved(target: FirElementWithResolveState) {", "body": "<EOL><INDENT><INDENT>if (target !is FirMemberDeclaration) return<EOL><INDENT><INDENT>checkDeclarationStatusIsResolved(target)<EOL><INDENT>}"}
{"signature": "fun check(expression: FirThrowExpression, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>expression.exception.checkExpressionForEnhancedTypeMismatch(<EOL><INDENT><INDENT><INDENT>expectedType = context.session.builtinTypes.throwableType.coneType,<EOL><INDENT><INDENT><INDENT>reporter,<EOL><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT>FirJvmErrors.NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (kinds.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (y != null) {", "body": "<EOL><INDENT><INDENT>bar(y)<EOL><INDENT>}"}
{"signature": "fun write(location: NativePtr, value: Any?) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val baseDispatchReceiverType =", "body": "symbol.dispatchReceiverType ?: return@l ProcessorAction.NEXT<EOL>"}
{"signature": "val lightTreeInstance =", "body": "LightTreeSourceNavigator()<EOL>"}
{"signature": "if (info.generateAssertField) {", "body": "<EOL><INDENT><INDENT><INDENT>generateAssertField()<EOL><INDENT><INDENT>}"}
{"signature": "val entriesPath =", "body": "zip.entries().toList().map { Path(it.name).invariantSeparatorsPathString }<EOL>"}
{"signature": "val superClassStubs =", "body": "collectionStubComputer.stubsForCollectionClasses(superClass)<EOL>"}
{"signature": "if (expression.arguments.firstOrNull() !is FirResolvedQualifier) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun testFooJvmAndJs() {", "body": "<EOL><INDENT><INDENT>assertEquals(foo(), fooCommon())<EOL><INDENT><INDENT>fooLinuxAndJs()<EOL><INDENT>}"}
{"signature": "val DIAGNOSTIC_STACKTRACE_REGEX =", "body": "Regex(<STR_LIT><STR_LIT><STR_LIT>)<EOL>"}
{"signature": "val throwKotlinNothingValueException  =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "val bufFloat<NUM_LIT> =", "body": "Float<NUM_LIT>Array(buf).unsafeCast<FloatArray>()<EOL>"}
{"signature": "val beginFunc =", "body": "<EOL><INDENT><INDENT><INDENT>decoderClass.functions.single { it.owner.name.asString() == CallingConventions.begin && it.owner.valueParameters.size == <NUM_LIT> }<EOL>"}
{"signature": "val classesToTranslate =", "body": "mutableListOf<ClassDescriptor>()<EOL>"}
{"signature": "val throwNoWhenBranchMatchedException =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "import<EOL>@SuppressWarnings(<STR_LIT>)<EOL>.", "body": ""}
{"signature": "if (declaration is IrFunction && declaration.fqNameWhenAvailable in exportedFqNames) {", "body": "<EOL><INDENT><INDENT><INDENT>val builder = context.createIrBuilder(irFile.symbol)<EOL><INDENT><INDENT><INDENT>declaration.annotations +=<EOL><INDENT><INDENT><INDENT><INDENT>builder.irCallConstructor(exportConstructor, typeArguments = emptyList())<EOL><INDENT><INDENT>}"}
{"signature": "val methodToInvoke =", "body": "clazz.declaredMethods.findMethod() ?: clazz.methods.findMethod() ?: return null<EOL>"}
{"signature": "val assignment =", "body": "JsAstUtils.decomposeAssignmentToVariable(x)<EOL>"}
{"signature": "val tests =", "body": "mutableListOf<Test>()<EOL>"}
{"signature": "if (type == Library || type == IncludedLibrary) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>staticCacheDependencies.addIfNotNull(klibCompilations.staticCache?.asStaticCacheDependency())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>staticCacheHeaderDependencies.addIfNotNull((klibCompilations.headerCache ?: klibCompilations.staticCache)?.asStaticCacheDependency())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun f(r<NUM_LIT>: Result<Int>?) {", "body": "<EOL><INDENT>r<NUM_LIT> ?: <NUM_LIT><EOL>}"}
{"signature": "if (!kaptExtension.keepJavacAnnotationProcessors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newCompilerArgs.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (symbol.getKind() == ElementKind.ANNOTATION_TYPE) {", "body": "<EOL><INDENT><INDENT><INDENT>sourceStructure.addMentionedAnnotations(qualifiedName)<EOL><INDENT><INDENT>}"}
{"signature": "val overriddenContainingClass =", "body": "<EOL><INDENT><INDENT><INDENT>overridden.containingClassLookupTag()?.toSymbol(session)?.fir as? FirClass ?: return emptyList()<EOL>"}
{"signature": "fun baseFunction()<EOL><EOL><INDENT>override fun baz() {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (test.x != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (extension.project.kotlinPropertiesProvider.enableSlowIdeSourcesJarResolver) {", "body": "<EOL><INDENT><INDENT><INDENT>registerAdditionalArtifactResolver(<EOL><INDENT><INDENT><INDENT><INDENT>resolver = IdeArtifactResolutionQuerySourcesResolver,<EOL><INDENT><INDENT><INDENT><INDENT>constraint = SourceSetConstraint.unconstrained,<EOL><INDENT><INDENT><INDENT><INDENT>phase = IdeMultiplatformImport.AdditionalArtifactResolutionPhase.SourcesAndDocumentationResolution,<EOL><INDENT><INDENT><INDENT><INDENT>priority = IdeMultiplatformImport.Priority.normal<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitClassLiteral(name: Name?, value: ClassLiteralValue) {", "body": "<EOL><INDENT><INDENT>args[nameOrSpecial(name)] = createConstantValue(KClassData(value.classId, value.arrayNestedness))<EOL><INDENT>}"}
{"signature": "val nativeBuildTypeClass =", "body": "typeName(<STR_LIT>)<EOL>"}
{"signature": "if (jarPath.startsWith(JAR_PROTOCOL + <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>jarPath = jarPath.substring(JAR_PROTOCOL.length + <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (declaration.visibility == DescriptorVisibilities.LOCAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>builder.provideFakeOverrides(declaration, CompatibilityMode.CURRENT)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultCinteropTaskName =", "body": "cinteropTaskName + defaultPodName + defaultTarget<EOL>"}
{"signature": "if (a !is ClassWithSixTypeParameters<*, *, *, *, *, *>?) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "fun visitIincInsn(`var`: Int, increment: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.visitIincInsn(getNewIndex(`var`), increment)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val artifactsLibraries =", "body": "artifactsToAddToCache<EOL>"}
{"signature": "val fileChanged =", "body": "lastFile != newFile<EOL>"}
{"signature": "for (builtInPackage in JvmBuiltIns(storageManager, JvmBuiltIns.Kind.FALLBACK).builtInPackagesImportedByDefault) {", "body": "<EOL><INDENT><INDENT><INDENT>addAllClassifiersFromScope(builtInPackage.memberScope)<EOL><INDENT><INDENT>}"}
{"signature": "if (idx > <NUM_LIT> && text[idx - <NUM_LIT>] != '\\n') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val tsStart =", "body": "System.currentTimeMillis()<EOL>"}
{"signature": "val jsModuleKindFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (problems.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(problems.joinToString(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "if (wasRemoved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ref.performCleanup()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val alreadyDeclared =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "if (needToVerifyDiagnostics) {", "body": "<EOL><INDENT><INDENT>testServices.assertions.assertEqualsToFile(<EOL><INDENT><INDENT><INDENT>expectedFile,<EOL><INDENT><INDENT><INDENT>dumper.generateResultingDump()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val subArray =", "body": "bytes.copyOfRange(startIndex, endIndex)<EOL>"}
{"signature": "else if (currentChar == '*' && nextChar() == '/') {", "body": "<EOL><INDENT><INDENT><INDENT>commentLevel = maxOf(<NUM_LIT>, commentLevel - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>index++<EOL><INDENT><INDENT><INDENT>result.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (import is FirResolvedImport) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkOperatorRename(import, context, reporter)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import segment that is [indexFromLast]th from last.", "body": "<EOL>"}
{"signature": "if (x.tryBlock.isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>hasChanges = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ctx.replaceMe(finallyBlock ?: JsEmpty)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in (<NUM_LIT>uL downTo <NUM_LIT>uL).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val APPLICATION_MANAGER_CLASS_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val midPoint =", "body": "(size / <NUM_LIT>) - <NUM_LIT><EOL>"}
{"signature": "var metaInfo =", "body": "false<EOL>"}
{"signature": "package kotlin.", "body": "text<EOL>"}
{"signature": "for ((i, value) in expression.elements.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>value.accept(this, i.toString())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (command is SpecTest.Command.Module) {", "body": "<EOL><INDENT><INDENT><INDENT>val wasmFile = File(testDir, command.filename)<EOL><INDENT><INDENT><INDENT>testWasmFile(wasmFile, testDir.name)<EOL><INDENT><INDENT>}"}
{"signature": "if (value in range) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>possibleTypes.add(createType(classId))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun fooDefault() {", "body": "}<EOL><EOL>@Deprecated(<STR_LIT>)<EOL>@DeprecatedSinceKotlin(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>fun fooEqual() {}"}
{"signature": "val l =", "body": "O.Beta.FromBeta()<EOL>"}
{"signature": "val fieldType =", "body": "typeMapper.mapType(targetField.type)<EOL>"}
{"signature": "val moduleExternalName =", "body": "externalModuleName ?: moduleSafeName<EOL>"}
{"signature": "val annotationArrayType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "val pathsInActual =", "body": "getAllRelativePaths(actual)<EOL>"}
{"signature": "val frameworkConfiguration =", "body": "configurations.findConsumable(binaryFramework.binaryFrameworkConfigurationName)<EOL>"}
{"signature": "val MAGIC_DO_NOT_CHANGE_TEST_JAR_TASK_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitSafeCallExpression(safeCallExpression: FirSafeCallExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitSafeCallExpression(safeCallExpression)<EOL><INDENT>}"}
{"signature": "val numberOfAttempts =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (isNoTargetsInitialized) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.report(project, KotlinToolingDiagnostics.NoKotlinTargetsDeclared(project.name, project.path))<EOL><INDENT><INDENT>}"}
{"signature": "val bInt =", "body": "BoxInt(<NUM_LIT>)<EOL>"}
{"signature": "when (selector()) {", "body": "<EOL><INDENT><NUM_LIT> -> x<EOL><INDENT><NUM_LIT> -> y<EOL><INDENT>else -> z<EOL>}"}
{"signature": "fun renderFrontendIndependentKClassNameOf(instanceOfClassToRender: Any, printer: PrettyPrinter) {", "body": "<EOL><INDENT><INDENT>val apiClass = getFrontendIndependentKClassOf(instanceOfClassToRender)<EOL><INDENT><INDENT>printer.append(apiClass.simpleName).append(':')<EOL><INDENT>}"}
{"signature": "val callableMemberDescriptor =", "body": "descriptor as? CallableMemberDescriptor<EOL>"}
{"signature": "var logs =", "body": "<STR_LIT><EOL>"}
{"signature": "if (defaultStatus.sinceVersion != null && defaultStatus.sinceVersion <= configuredKotlinVersion) {", "body": "<EOL><INDENT><INDENT>defaultStatus.reportLevelAfter<EOL><INDENT>}"}
{"signature": "if (B(b)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>NA()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (classifier in newClassifiersForBreakingLoops) {", "body": "<EOL><INDENT><INDENT><INDENT>breakLoopFor(<EOL><INDENT><INDENT><INDENT><INDENT>declaration = classifier,<EOL><INDENT><INDENT><INDENT><INDENT>session = session,<EOL><INDENT><INDENT><INDENT><INDENT>visited = visitedClassLikeDecls,<EOL><INDENT><INDENT><INDENT><INDENT>looped = loopedClassLikeDecls,<EOL><INDENT><INDENT><INDENT><INDENT>pathSet = pathSet,<EOL><INDENT><INDENT><INDENT><INDENT>path = path,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (translationResult !is TranslationResult.Success) {", "body": "<EOL><INDENT><INDENT><INDENT>return BinaryArtifacts.Js.OldJsArtifact(outputFile, translationResult)<EOL><INDENT><INDENT>}"}
{"signature": "val namesPossibleForRenamedBuiltin =", "body": "JVM_SHORT_NAME_TO_BUILTIN_SHORT_NAMES_MAP.values.toSet()<EOL>"}
{"signature": "fun testNotEqual(uv<NUM_LIT>: ULong, uv<NUM_LIT>: ULong) {", "body": "<EOL><INDENT><INDENT><INDENT>assertNotEquals(uv<NUM_LIT>, uv<NUM_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertTrue(uv<NUM_LIT> != uv<NUM_LIT>, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertNotEquals(uv<NUM_LIT>toString(), uv<NUM_LIT>toString())<EOL><INDENT><INDENT><INDENT>assertNotEquals((uv<NUM_LIT> as Any).toString(), (uv<NUM_LIT> as Any).toString())<EOL><INDENT><INDENT>}"}
{"signature": "val nestedBlocks =", "body": "ArrayList<MyClass<NUM_LIT>>()<EOL>"}
{"signature": "fun test<NUM_LIT>(obj: Any) {", "body": "<EOL><INDENT>val obj<NUM_LIT> = obj as OverrideKotlinMethods<NUM_LIT><*><EOL><INDENT>assertEquals(<NUM_LIT>, obj<NUM_LIT>one())<EOL>}"}
{"signature": "val coroutineContext =", "body": "<STR_LIT>.callableId(BASE_COROUTINES_PACKAGE)<EOL>"}
{"signature": "val maxValue =", "body": "keys.last()<EOL>"}
{"signature": "val fileShortName =", "body": "it.fileEntry.name.takeLastWhile { it != File.separatorChar }<EOL>"}
{"signature": "val deprecations =", "body": "LinkedHashSet<DescriptorBasedDeprecationInfo>()<EOL>"}
{"signature": "val otherTypeAlignment =", "body": "LLVMPreferredAlignmentOfType(llvmTargetData, otherLlvmType)<EOL>"}
{"signature": "val expectedArrayElementType =", "body": "expectedArrayType?.arrayElementType()<EOL>"}
{"signature": "if (inInterface && property.hasModifier(KtTokens.PRIVATE_KEYWORD) && !property.hasModifier(KtTokens.ABSTRACT_KEYWORD)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(PRIVATE_PROPERTY_IN_INTERFACE.on(property))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val varargs =", "body": "args[<NUM_LIT>] as? JsArrayLiteral ?: error(<STR_LIT>)<EOL>"}
{"signature": "var hasBuilderInferenceAnnotation =", "body": "false<EOL>"}
{"signature": "val fieldId =", "body": "metadata.fields.indexOf(field) + <NUM_LIT>"}
{"signature": "val flattenedNonEmptyScopes =", "body": "SmartList<MemberScope>()<EOL>"}
{"signature": "val variantA =", "body": "project.multiplatformExtension.linuxX<NUM_LIT>(<STR_LIT>)<EOL>"}
{"signature": "when (valueParametersTypes.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> isTopLevel && name.asString() == <STR_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> valueParametersTypes.single().coneType.isValidMainFunctionParameter()<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "val effectiveVariance =", "body": "AbstractTypeChecker.effectiveVariance(parameter.getVariance(), argument.getVariance())<EOL>"}
{"signature": "val kotlinFilenameExtensions =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(DEFAULT_KOTLIN_SOURCE_FILES_EXTENSIONS + compilationConfiguration.kotlinScriptFilenameExtensions)<EOL>"}
{"signature": "val directMethodAdapters =", "body": "mutableMapOf<DirectAdapterRequest, ObjCToKotlinMethodAdapter>()<EOL>"}
{"signature": "val scenarioName =", "body": "get(<STR_LIT>).toString()<EOL>"}
{"signature": "if (srcPath == null) {", "body": "<EOL><INDENT><INDENT><INDENT>val t = Path(getProject())<EOL><INDENT><INDENT><INDENT>src = t<EOL><INDENT><INDENT><INDENT>return t<EOL><INDENT><INDENT>}"}
{"signature": "val newNode =", "body": "ANode(BNode(CNode(<NUM_LIT>)))<EOL>"}
{"signature": "val varNumber =", "body": "if (rawParameters != null) parseParameters(rawParameters)[<NUM_LIT>].toInt() else null<EOL>"}
{"signature": "val needLocalTypeApproximation =", "body": "needLocalTypeApproximation(visibilityForApproximation, isInlineFunction, session, useSitePosition)<EOL>"}
{"signature": "when (insnToCheck.opcode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>type.getOpcode(Opcodes.ILOAD) -> true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Opcodes.DUP<NUM_LIT> -> includeDup && type.size == <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Opcodes.DUP -> includeDup && type.size == <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (compilerOptions.usesK<NUM_LIT>get() && multiPlatformEnabled.get()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>args.fragments = multiplatformStructure.fragmentsCompilerArgs<EOL><INDENT><INDENT><INDENT><INDENT>args.fragmentRefines = multiplatformStructure.fragmentRefinesCompilerArgs<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun minusSequence() {", "body": "<EOL><INDENT><INDENT>val result = data - sequenceOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>), result)<EOL><INDENT>}"}
{"signature": "for (i in (Int.MAX_VALUE - <NUM_LIT>) until Int.MIN_VALUE) {", "body": "return <STR_LIT> }"}
{"signature": "val benchmarks =", "body": "output.toString().lines()<EOL>"}
{"signature": "val newModuleName =", "body": "<STR_LIT><EOL>"}
{"signature": "val SCOPE_EXPANDING_LOG =", "body": "<STR_LIT><EOL>"}
{"signature": "val specialJsStringSet =", "body": "HashSet<String>()<EOL>"}
{"signature": "if (toBeOrNot<Int>() && toBeOrNot<Int>()) {", "body": "}"}
{"signature": "fun x(x: A<NUM_LIT><A<NUM_LIT>, A<NUM_LIT>>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>class Triple<T, R, M><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias B<NUM_LIT> = String<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias B<NUM_LIT> = Long<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x(x: Triple<B<NUM_LIT>, String, B<NUM_LIT>>) {}"}
{"signature": "val typeMismatchDueToNullability =", "body": "typeContext.isTypeMismatchDueToNullability(lowerConeType, upperConeType)<EOL>"}
{"signature": "val podspec =", "body": "<STR_LIT><EOL>"}
{"signature": "if (replacement is HasName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>x.name = replacement.name<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(c: C<Int>) {", "body": "}<EOL>fun <T> bar() : C<T> {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}"}
{"signature": "val fakeTypeArguments =", "body": "SmartList<TypeProjection>()<EOL>"}
{"signature": "if (<!TYPE_MISMATCH!>b<!> in <NUM_LIT>.<NUM_LIT>) {", "body": "}"}
{"signature": "if (target is FirFile) {", "body": "<EOL><INDENT><INDENT><INDENT>visitor.performAction(target)<EOL><INDENT><INDENT>}"}
{"signature": "if (varIndex < argumentVarEnd) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val surrogates =", "body": "lowHighSurrogates<EOL>"}
{"signature": "for (block in blocks.asSequence().drop(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>removeNonParentBlocks(block, parents)<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(JsProtoBuf.constructorAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JsProtoBuf.constructorAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val EMPTY =", "body": "TestCompilerArgs(emptyList())<EOL>"}
{"signature": "val argumentForReceiver =", "body": "createOperationArgumentForReceiver(resolvedCall, receiverExpression) ?: return null<EOL>"}
{"signature": "val definitionMatch =", "body": "linkDefinitionRegExp.matchEntire(line)<EOL>"}
{"signature": "val klibEnumEntries =", "body": "LinkedHashMap<CirEntityId, ClassEntry.EnumEntry>()"}
{"signature": "fun blackhole(a: Any) {", "body": "}<EOL><EOL>suspend fun topLevel(a: String, b: String) {<EOL><INDENT>blackhole(a)<INDENT> blackhole(b) }"}
{"signature": "when (scope) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>NORMAL, OPTIONAL -> NpmDependencyExtension::class.java<EOL><INDENT><INDENT><INDENT><INDENT>DEV -> DevNpmDependencyExtension::class.java<EOL><INDENT><INDENT><INDENT><INDENT>PEER -> PeerNpmDependencyExtension::class.java<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val builtinsPackageFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val aInit =", "body": "<!UNINITIALIZED_VARIABLE!>value<!><EOL>"}
{"signature": "val classFindRegex =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val potentiallyCapturedTypeParameters =", "body": "mutableSetOf<IrTypeParameter>()<EOL>"}
{"signature": "var actualLine =", "body": "actualIter.next()<EOL>"}
{"signature": "val hostConfigurationInstance =", "body": "<EOL><INDENT><INDENT>if (singleArgConstructor != null) singleArgConstructor.newInstance(baseHostConfiguration) as ScriptingHostConfiguration<EOL>"}
{"signature": "val JsExport =", "body": "<STR_LIT>.jsId()<EOL>"}
{"signature": "val resourceMap =", "body": "linkedMapOf<String, AndroidResource>()<EOL>"}
{"signature": "if (parentClassLikeSymbol is FirTypeAliasSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>import.source, FirErrors.TYPEALIAS_AS_CALLABLE_QUALIFIER_IN_IMPORT,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parentClassLikeSymbol.name, parentClassSymbol.name, context<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val invocationArgs =", "body": "importedModules.map { makePlainModuleRef(it, program) }<EOL>"}
{"signature": "if (isValid(charsBeforeNewGap, newGap.length) && bits <= TOTAL_BITS) {", "body": "<EOL><INDENT><INDENT><INDENT>gaps.add(newGap)<EOL><INDENT><INDENT><INDENT>end = charCode<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val skew =", "body": "abs(ts.toDouble() - fs.toDouble()) / size<EOL>"}
{"signature": "val byteSeparators =", "body": "numberOfBytes - <NUM_LIT> - lineSeparators - groupSeparators<EOL>"}
{"signature": "val taskOutput =", "body": "getOutputForTask(<STR_LIT>)<EOL>"}
{"signature": "if (annotationClass.symbol.descriptor == ErrorUtils.errorClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return AnnotationDescriptorImpl(type.toKotlinType(), emptyMap(), source)<EOL><INDENT>}"}
{"signature": "if (c.isDigit() && toBeMasked > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>kotlin.io.print('X')<EOL><INDENT><INDENT><INDENT>toBeMasked--<EOL><INDENT><INDENT>}"}
{"signature": "fun bar(param: String) {", "body": "<EOL><INDENT><INDENT><!INVISIBLE_SETTER!>foo<!> = param<EOL><INDENT><INDENT><!INVISIBLE_SETTER!>this.foo<!> = param<EOL><INDENT>}"}
{"signature": "val returnableBlockEndsLV =", "body": "mutableMapOf<IrReturnableBlock, BitSet>()<EOL>"}
{"signature": "if (ktElement.destructuringDeclaration != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>origin = IrDeclarationOrigin.DESTRUCTURED_OBJECT_PARAMETER<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var defaultValueOffset =", "body": "source.startOffset<EOL>"}
{"signature": "var srcIndex =", "body": "srcOffset<EOL>"}
{"signature": "val iterator =", "body": "iterator()<EOL>"}
{"signature": "if (runId >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!validate(runResult))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>invalidResults.add(runId to runResult.toList())<EOL><INDENT><INDENT><INDENT><INDENT>runResult.clear()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import <!DEPRECATION!>third.", "body": "JavaClass.NestedJavaClass<!><EOL>"}
{"signature": "fun generateSyntheticMethods(<EOL><INDENT><INDENT>thisDescriptor: ClassDescriptor,<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>bindingContext: BindingContext,<EOL><INDENT><INDENT>fromSupertypes: List<SimpleFunctionDescriptor>,<EOL><INDENT><INDENT>result: MutableCollection<SimpleFunctionDescriptor><EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun box(a: String, b: String?) {", "body": "<EOL><INDENT>val sb = StringBuilder();<EOL><INDENT>sb.append(<STR_LIT>)<EOL>}"}
{"signature": "if (name != xcfName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>toolingDiagnosticsCollector.get().report(this, KotlinToolingDiagnostics.XCFrameworkDifferentInnerFrameworksName(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>xcFramework = rawXcfName,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>innerFrameworks = name,<EOL><INDENT><INDENT><INDENT><INDENT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setBoundedTypeVariable(value: BTV) {", "body": "storage = value }"}
{"signature": "val car =", "body": "Car()<EOL>"}
{"signature": "fun testAbiChangeInLib_changeMethodSignature_tracked(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>super.testAbiChangeInLib_changeMethodSignature_tracked(gradleVersion)<EOL><INDENT>}"}
{"signature": "when (f) {", "body": "<EOL><INDENT><INDENT><INDENT>is A -> <!FUNCTION_EXPECTED!>f<!>(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>is B -> <!FUNCTION_EXPECTED!>f<!>(<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (modality == Modality.OPEN && (containingDeclaration as? ClassDescriptor)?.modality == Modality.FINAL) {", "body": "<EOL><INDENT><INDENT>true -> Modality.FINAL<EOL><INDENT><INDENT>false -> modality<EOL><INDENT>}"}
{"signature": "val lazyCommonMainCompileDependencies =", "body": "LazyResolvedConfiguration(commonMainCompileDependencies)<EOL>"}
{"signature": "for (resultOfIntersection in getFunctionsFromSupertypesByName(name)) {", "body": "<EOL><INDENT><INDENT><INDENT>resultOfIntersection.collectNonOverriddenDeclarations(explicitlyDeclaredFunctions, destination)<EOL><INDENT><INDENT>}"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.functionAnnotation) != new.getExtensionCount(JsProtoBuf.functionAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val UInt =", "body": "Int.unsignedId()<EOL>"}
{"signature": "val minIndent =", "body": "lines.filter { it.trim().isNotEmpty() }.minOfOrNull { it.calcIndent() } ?: <NUM_LIT><EOL>"}
{"signature": "if (chunk.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return FirKotlinToJvmBytecodeCompiler.compileModulesUsingFrontendIRAndPsi(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>projectEnvironment,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compilerConfiguration,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>messageCollector,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>environment.getSourceFiles(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>buildFile,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>chunk.single()<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val runDate =", "body": "Date()<EOL>"}
{"signature": "val insn =", "body": "insnArray[i]<EOL>"}
{"signature": "fun invalidateAll() {", "body": "<EOL><INDENT><INDENT>sourceCache.clear()<EOL><INDENT>}"}
{"signature": "fun tail() {", "body": "<EOL><INDENT><INDENT>val data = listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val actual = data.drop(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), actual)<EOL><INDENT>}"}
{"signature": "when (currentClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>delegatingClass -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ANDROID_PARCELABLE_CREATOR_CLASS_FQNAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "when(<STR_LIT>) {", "body": "<EOL><INDENT>  !in set -> true<EOL><INDENT>  else -> false<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(x: AnotherClass?) {", "body": "<EOL><INDENT>val baz = x?.baz() ?: return<EOL><INDENT>x.foo<EOL>}"}
{"signature": "fun replaceBody(newBody: FirBlock?) {", "body": "<EOL><INDENT><INDENT>notSupported()<EOL><INDENT>}"}
{"signature": "val INTEROP_READ_PRIMITIVE<INDENT><INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "for (constructor in providedConstructors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.addConstructor(constructorProto(constructor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val originalTargets =", "body": "instruction.targetLabels<EOL>"}
{"signature": "if (fileEntry.getLineNumber(element.startOffset) == lineNumber) {", "body": "<EOL><INDENT><INDENT><INDENT>element.accept(dumper, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (type.isReified) {", "body": "<EOL><INDENT><INDENT><INDENT>val paramNameForType = getNameForDescriptor(type)<EOL><INDENT><INDENT><INDENT>targetList += JsParameter(paramNameForType)<EOL><EOL><INDENT><INDENT><INDENT>val suggestedName = Namer.isInstanceSuggestedName(type)<EOL><INDENT><INDENT><INDENT>val paramName = JsScope.declareTemporaryName(suggestedName)<EOL><INDENT><INDENT><INDENT>targetList += JsParameter(paramName)<EOL><INDENT><INDENT><INDENT>aliases[type] = paramName.makeRef()<EOL><INDENT><INDENT>}"}
{"signature": "val resolutionSequence =", "body": "resolutionPart.asList()<EOL>"}
{"signature": "val MANGLE_FUN_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testBasicOperations() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, str(<STR_LIT>, operation = DESC_TO_CLASS_ID))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, str(<STR_LIT>, operation = INTERNAL_TO_CLASS_ID))<EOL><INDENT>}"}
{"signature": "val includesClassMethods =", "body": "mutableListOf<Pair<String, String>>()<EOL>"}
{"signature": "val returnTargetToCall =", "body": "<EOL><INDENT><INDENT>mutableMapOf<IrReturnTargetSymbol, IrFunctionAccessExpression>()<EOL>"}
{"signature": "val KOTLIN_COMPILER_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val randomSerialized =", "body": "serializeToHex(Random)<EOL>"}
{"signature": "val callableReferenceExpression =", "body": "resolvedCall.call.extractCallableReferenceExpression() ?: return<EOL>"}
{"signature": "val fDouble =", "body": "FooDouble(<NUM_LIT>)<EOL>"}
{"signature": "val kTypeParameterIrClass =", "body": "callInterceptor.environment.kTypeParameterClass.owner<EOL>"}
{"signature": "val anyGenerator =", "body": "MethodsFromAnyGeneratorForLowerings(context, klass, IrDeclarationOrigin.SYNTHETIC_GENERATED_SAM_IMPLEMENTATION)<EOL>"}
{"signature": "val numBits =", "body": "numBits and <NUM_LIT><EOL>"}
{"signature": "if (platformNN) {", "body": "}"}
{"signature": "val LONG_RANGE_FQN =", "body": "<STR_LIT><EOL>"}
{"signature": "val noTestMethods =", "body": "methods.size == <NUM_LIT><EOL>"}
{"signature": "val specialBuiltInInfo =", "body": "specialBridgeMethods.getBuiltInWithDifferentJvmName(function)<EOL>"}
{"signature": "when (declaration.source?.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KtFakeSourceElementKind.PropertyFromParameter -> reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source, FirErrors.INLINE_PROPERTY_WITH_BACKING_FIELD_DEPRECATION, context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>else -> reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source, FirErrors.INLINE_PROPERTY_WITH_BACKING_FIELD, context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val preservedBitsMask =", "body": "LLVMConstNot(discardBitsMask)!!<EOL>"}
{"signature": "val newExpectedType =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>c.buildNewFunctionalExpectedType(argument, parameterTypesInfo, dependencyProvider, topLevelTypeVariables)<EOL>"}
{"signature": "val MinL =", "body": "Long.MIN_VALUE<EOL>"}
{"signature": "val runKotlinCompilerViaBuildToolsApi =", "body": "propertiesProvider.runKotlinCompilerViaBuildToolsApi<EOL>"}
{"signature": "if (testString.startsWith(groupValue, startIndex, ignoreCase)) {", "body": "<EOL><INDENT><INDENT><INDENT>matchResult.setConsumed(consCounter, groupValue.length)<EOL><INDENT><INDENT><INDENT>return next.matches(startIndex + groupValue.length, testString, matchResult)<EOL><INDENT><INDENT>}"}
{"signature": "val packageMemberOwner =", "body": "internalNameForPackageMemberOwner(descriptor as CallableMemberDescriptor, publicFacade)<EOL>"}
{"signature": "if (x < y) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Error()<EOL><INDENT><INDENT>}"}
{"signature": "if (isWasm || moduleKind == JsModuleKind.MODULE_ES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val compileTimeInitializer =", "body": "propertyDescriptor?.compileTimeInitializer<EOL>"}
{"signature": "val currentErrors =", "body": "AtomicReference<LoggedErrors?>(null)<EOL>"}
{"signature": "if (original.isInline && original.hasBody) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>queue.add(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addSuppressedDoesNotThrow() {", "body": "<EOL><INDENT><INDENT>val e<NUM_LIT> = Throwable()<EOL><INDENT><INDENT>val e<NUM_LIT> = Exception(<STR_LIT>)<EOL><EOL><INDENT><INDENT>e<NUM_LIT>addSuppressed(e<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (instance != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return instance!!<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (targetDescriptor.isSynthesizedPropertyFromJavaAccessors()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return KtPartiallyAppliedSymbol(<EOL><INDENT><INDENT><INDENT><INDENT>signature,<EOL><INDENT><INDENT><INDENT><INDENT>extensionReceiver?.toKtReceiverValue(context, this),<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val commandLineArguments =", "body": "extractNativeCompilerCommandLineArguments(taskOutput, toolName)<EOL>"}
{"signature": "fun linkerOpts(values: List<String>) {", "body": "<EOL><INDENT><INDENT>linkerOpts.addAll(values)<EOL><INDENT>}"}
{"signature": "fun processLocalDeclaration(subroutine: KtDeclaration) {", "body": "<EOL><INDENT><INDENT>val afterDeclaration = builder.createUnboundLabel(<STR_LIT>)<EOL><EOL><INDENT><INDENT>builder.nondeterministicJump(afterDeclaration, subroutine, null)<EOL><INDENT><INDENT>generate(subroutine, null)<EOL><INDENT><INDENT>builder.bindLabel(afterDeclaration)<EOL><INDENT>}"}
{"signature": "val elementGraph =", "body": "element.controlFlowGraphReference?.controlFlowGraph<EOL>"}
{"signature": "for (fileToMark in filesToMark) {", "body": "<EOL><INDENT><INDENT><INDENT>FSOperations.markDirty(compileContext, compilationRound, fileToMark)<EOL><INDENT><INDENT>}"}
{"signature": "if (target == returnableBlock) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resultSlot<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firProperty =", "body": "candidates.findDeclarationWithSignatureBySymbols<FirProperty>(signature) ?: return null<EOL>"}
{"signature": "fun visitLoopConditionEnterNode(node: LoopConditionEnterNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (functionDescriptor.isDynamic()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateDynamicFunctionCall(startOffset, endOffset, functionDescriptor, call, dispatchReceiverValue, extensionReceiverValue)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (tmp == null) {", "body": "<EOL><INDENT><INDENT><INDENT>tmp = (packageAccessHandler ?: SimplePackageAccessHandler).loadPackageFragment(library, fqName.asString(), partName)<EOL><INDENT><INDENT><INDENT>protoForNamesStorage = SoftReference(tmp)<EOL><INDENT><INDENT>}"}
{"signature": "val large =", "body": "<NUM_LIT>f.pow(<NUM_LIT>)<EOL>"}
{"signature": "val selfFile =", "body": "this.fileRef.element<EOL>"}
{"signature": "val CUSTOM_TEST_DATA_EXTENSION_PATTERN =", "body": "<STR_LIT><EOL>"}
{"signature": "if (dispatchReceiverOnly) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiver?.type<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var currentExpected =", "body": "safeAdvance(expectedDiagnostics)<EOL>"}
{"signature": "val cachesAreReady =", "body": "checkCaches()<EOL>"}
{"signature": "val valueTypeAliasee =", "body": "baseMirror.valueType<EOL>"}
{"signature": "val commonRunTask =", "body": "registerSubTargetTask<Task>(disambiguateCamelCased(RUN_TASK_NAME)) {}<EOL>"}
{"signature": "val ubyte =", "body": "<NUM_LIT>x<NUM_LIT>ffU<EOL>"}
{"signature": "fun addPropertyDiff(defectType: DefectType, diff: NamedDiffEntry) {", "body": "<EOL><INDENT><INDENT>propertyDiffs.add(diff)<EOL><INDENT><INDENT>defectType.report(VALUE<NUM_LIT>_A to diff.value<NUM_LIT>, VALUE<NUM_LIT>_A to diff.value<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val bug =", "body": "storing { <STR_LIT> }.default(null)<EOL>"}
{"signature": "val customVersion =", "body": "TestVersions.Kotlin.STABLE_RELEASE<EOL>"}
{"signature": "fun addByExplicitReceiver(resolvedCall: ResolvedCall<*>?) {", "body": "<EOL><INDENT><INDENT>val receiverValue = (resolvedCall ?: return).getExplicitReceiverValue()<EOL><INDENT><INDENT>if (receiverValue != null) typePredicates.add(getReceiverTypePredicate(resolvedCall, receiverValue))<EOL><INDENT>}"}
{"signature": "val receiverCall =", "body": "expressionCall.explicitReceiver as? FirQualifiedAccessExpression ?: return null<EOL>"}
{"signature": "if (((value xor result) and (durationInUnit xor result)) < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return if (value < <NUM_LIT>) Long.MIN_VALUE else Long.MAX_VALUE<EOL><INDENT>}"}
{"signature": "val functions =", "body": "<EOL><INDENT><INDENT>ReferencableAndDefinable<IrFunctionSymbol, WasmFunction>()<EOL>"}
{"signature": "fun testSerializeAndDeserializeEquals(value: T) {", "body": "<EOL><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT>normalize(value), deserialize(serialize(value))<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (isDefaultImpls && (isTopLevel || (clazz.fields.isNullOrEmpty() && clazz.methods.isNullOrEmpty()))) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.BENCHMARK_SIZE) {", "body": "<EOL><INDENT><INDENT><INDENT>Blackhole.consume(i)<EOL><INDENT><INDENT>}"}
{"signature": "if (nameDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return nameDiff<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (c in csWithExtIt) {", "body": "<EOL><INDENT><INDENT>csWithExtItResult.append(c)<EOL><INDENT>}"}
{"signature": "var isBackReferenced =", "body": "false<EOL>"}
{"signature": "val filesWithModifiedExportsAndImports =", "body": "KotlinSourceFileMutableMap<UpdatedDependenciesMetadata>()<EOL>"}
{"signature": "var msg =", "body": "arg<NUM_LIT> + arg<NUM_LIT><EOL>"}
{"signature": "val KLIB_PROPERTY_WASM_TARGETS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (javac.isForkedJavac) {", "body": "<EOL><INDENT><INDENT><INDENT>javac.log(<STR_LIT>, MSG_ERR)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val IS_FUNCTON_OF_ARITY_DESCRIPTOR =", "body": "<EOL><INDENT><INDENT><INDENT>Type.getMethodDescriptor(Type.BOOLEAN_TYPE, Type.getObjectType(<STR_LIT>), Type.INT_TYPE)<EOL>"}
{"signature": "val EMPTY_ARRAY =", "body": "arrayOf<Any?>()<EOL>"}
{"signature": "val minusIntMinValue =", "body": "-Int.MIN_VALUE<EOL>"}
{"signature": "val NS_CONSUMED =", "body": "<STR_LIT><EOL>"}
{"signature": "var processingIrInlinedFun =", "body": "false<EOL>"}
{"signature": "val firstBoxed =", "body": "boxed.first().descriptor<EOL>"}
{"signature": "val variableReassignments =", "body": "mutableListOf<VariableReassignment>()<EOL>"}
{"signature": "val distributionPath =", "body": "getMandatory<File, NativeDistributionOptionType>()<EOL>"}
{"signature": "var methodOfAny =", "body": "false<EOL>"}
{"signature": "if (irField.type.binaryTypeIsReference() && irField.storageKind(context) != FieldStorageKind.THREAD_LOCAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val address = staticFieldPtr(irField, functionGenerationContext)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>storeHeapRef(codegen.kNullObjHeaderPtr, address)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val a_x_Float =", "body": "AFloat().x as Any as FloatArray<EOL>"}
{"signature": "val importResolveTransformer =", "body": "FirImportResolveTransformer(session)<EOL>"}
{"signature": "val functionClassId =", "body": "if (isSuspend) StandardNames.getSuspendFunctionClassId(arity) else StandardNames.getFunctionClassId(arity)<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!><!REDUNDANT_LABEL_WARNING!>foo@<!> null != x<!>) {", "body": "}"}
{"signature": "val iteratorsIter =", "body": "iterators.iterator()<EOL>"}
{"signature": "if (start != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>InsnSequence(start.previous, end?.next?.next).forEach(instructions::remove)<EOL><INDENT><INDENT>}"}
{"signature": "val entityB =", "body": "TestEntity(<STR_LIT>)<EOL>"}
{"signature": "fun mainVariant(configure: KotlinAndroidTargetVariantDsl.() -> Unit) {", "body": "<EOL><INDENT><INDENT>mainVariant.configure()<EOL><INDENT>}"}
{"signature": "val ComposableInferredTargetSchemeArgument =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val statements =", "body": "statement.statements<EOL>"}
{"signature": "val nullableDoubleIeee<NUM_LIT>Equals =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (x == null && y != x) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>y<!UNSAFE_CALL!>.<!>hashCode()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var double =", "body": "int + <NUM_LIT><EOL>"}
{"signature": "if (j is My) {", "body": "<EOL><INDENT><INDENT>j.b = <STR_LIT><EOL><INDENT><INDENT>return j.a + j.b<EOL><INDENT>}"}
{"signature": "var nextValueParameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val moduleNamesSet =", "body": "moduleNames.toSet()<EOL>"}
{"signature": "val localExt =", "body": "<STR_LIT>.f() + <STR_LIT>?.f()<EOL>"}
{"signature": "if (this is FirAnonymousFunctionBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this.contractDescription = it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val temporaryDirectoryManager =", "body": "testServices.temporaryDirectoryManager<EOL>"}
{"signature": "fun generateCharProperties() {", "body": "<EOL><INDENT><INDENT>val file = outputFile.resolveSibling(<STR_LIT>)<EOL><INDENT><INDENT>generateFileHeader(file)<EOL><EOL><INDENT><INDENT>writer?.appendLine(<STR_LIT>)<EOL><INDENT><INDENT>writer?.close()<EOL><INDENT>}"}
{"signature": "for (firstIndex in <NUM_LIT>.<secondIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>checkCompatibilityType(modifiers[firstIndex], secondModifier, reporter, reportedNodes, owner, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun clearProjectArtifactDependency() {", "body": "<EOL><INDENT>  _builder.clearProjectArtifactDependency()<EOL><INDENT>}"}
{"signature": "val aliasProto =", "body": "part.proto.getTypeAlias(ids.single())<EOL>"}
{"signature": "val computedName =", "body": "tryCompute(declaration, type)<EOL>"}
{"signature": "val itemsInProgress =", "body": "HashSet<T>()<EOL>"}
{"signature": "fun declareEntryOrObject(entryOrObject: KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT>add(VariableDeclarationInstruction(entryOrObject, currentScope))<EOL><INDENT><INDENT>}"}
{"signature": "val parentsWithSelf =", "body": "sequenceOf(expectDeclaration) + expectDeclaration.parents<EOL>"}
{"signature": "package mypack<EOL>.", "body": ""}
{"signature": "if (index == size) {", "body": "<EOL><INDENT><INDENT><INDENT>return addAll(elements)<EOL><INDENT><INDENT>}"}
{"signature": "else if (multipleImplementations.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(MANY_IMPL_MEMBER_NOT_IMPLEMENTED.on(klass, klass, multipleImplementations.first()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val goldenCopy =", "body": "NonEmptyEnum.values().toList()<EOL>"}
{"signature": "val newLibraryTmpDir =", "body": "KFile(newLibraryFile.path + <STR_LIT>)<EOL>"}
{"signature": "fun fromInterface(name: Name) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "if (arg is String) {", "body": "<EOL><INDENT><INDENT><INDENT>a = arg<EOL><INDENT><INDENT>}"}
{"signature": "fun addArgument(argumentExpression: ConstantValue<*>, parameterName: Name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val argument = ProtoBuf.Annotation.Argument.newBuilder()<EOL><INDENT><INDENT><INDENT><INDENT>argument.nameId = stringTable.getStringIndex(parameterName.asString())<EOL><INDENT><INDENT><INDENT><INDENT>argument.setValue(valueProto(argumentExpression))<EOL><INDENT><INDENT><INDENT><INDENT>addArgument(argument)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration.isConst || declaration.backingField?.hasAnnotationNamedAs(JvmStandardClassIds.Annotations.JvmField, context.session) == true) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(targetSource, FirJvmErrors.JVM_STATIC_ON_CONST_OR_JVM_FIELD, context)<EOL><INDENT><INDENT>}"}
{"signature": "val valueBefore =", "body": "function.getConstantFromExpressionBody()"}
{"signature": "var argCount =", "body": "if (descriptor.containingDeclaration is ClassDescriptor || descriptor.extensionReceiverParameter != null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val lastScriptBlock =", "body": "declarations.lastOrNull() as? FirAnonymousInitializer<EOL>"}
{"signature": "if (hasExplicitBackingField) {", "body": "<EOL><INDENT><INDENT>backingField<EOL><INDENT>}"}
{"signature": "val existingTask =", "body": "project.tasks.locateTask<AssembleHierarchicalResourcesTask>(taskName)<EOL>"}
{"signature": "val keyD =", "body": "extrasKeyOf<Int>()<EOL>"}
{"signature": "for (i in (<NUM_LIT>u.toUByte() downTo <NUM_LIT>u.toUByte() step <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (path.startsWith(base)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return file.toRelativeString(File(base))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stableRef =", "body": "StableRef.create(Any())<EOL>"}
{"signature": "if (proto.hasInitializerBlock()) {", "body": "<EOL><INDENT><INDENT><INDENT>fragment.initializerBlock.statements += deserializeCompositeBlock(proto.initializerBlock).statements<EOL><INDENT><INDENT>}"}
{"signature": "val jcInterfaces =", "body": "mapJList(interfaces) { parseType(it.children.single()) }<EOL>"}
{"signature": "fun receiver(value: String) {", "body": "customReceiver = value }"}
{"signature": "if (this[index] == '\\r') {", "body": "<EOL><INDENT><INDENT>if (index + <NUM_LIT> < endIndex && this[index + <NUM_LIT>] == '\\n') index + <NUM_LIT> else index + <NUM_LIT><EOL><INDENT>}"}
{"signature": "val xValue =", "body": "xProp.get(scriptInstance)<EOL>"}
{"signature": "when (desc[end]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>in <STR_LIT> -> end++<EOL><INDENT><INDENT><INDENT><INDENT>'L' -> end = desc.indexOf(';', begin) + <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> throw KotlinReflectionInternalError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val containerIsAnonymous =", "body": "container.classId.shortClassName == SpecialNames.ANONYMOUS<EOL>"}
{"signature": "val startInclusive =", "body": "if (maxStart == startVersion) this.startInclusive else other.startInclusive<EOL>"}
{"signature": "if (string[index] != word[wordIndex]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>index = originalIndex<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (anonymous && !languageVersionSettings.supportsFeature(LanguageFeature.SingleUnderscoreForParameterName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val thenVar =", "body": "thenStatement.vars[<NUM_LIT>]<EOL>"}
{"signature": "for (module in myProject.modules) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFilesExistInOutput(module, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val needCleanupLandingpadAndLeaveFrame =", "body": "this.needCleanupLandingpadAndLeaveFrame<EOL>"}
{"signature": "val iFooDefaultImpls =", "body": "Class.forName(<STR_LIT>)<EOL>"}
{"signature": "if (starImport != packageName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val basesWithDefaultValues =", "body": "overriddenFunctions.filter { it.valueParameterSymbols[index].hasDefaultValue }<EOL>"}
{"signature": "for ((file, data) in incrementalData.translatedFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>unitsByPath[file.canonicalPath] = TranslationUnit.BinaryAst(data.binaryAst, data.inlineData)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val platformCompilationsByResolvedVariantName =", "body": "mutableMapOf<String, PlatformCompilationData>()<EOL>"}
{"signature": "if (backupValue == null) {", "body": "<EOL><INDENT><INDENT>System.clearProperty(propertyName)<EOL><INDENT>}"}
{"signature": "val affectedCInterops =", "body": "sharedCompilationsWithInterops.values.flatMap { it.interops }.toSet()<EOL>"}
{"signature": "if (!file.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val stub = buildStubByVirtualFile(file, binaryClassCache) ?: return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>put(file, stub)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val uints =", "body": "uint(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>u)<EOL>"}
{"signature": "fun enterLoopBody(expression: KtLoopExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>val info = elementToLoopInfo[expression]!!<EOL><INDENT><INDENT><INDENT>bindLabel(info.bodyEntryPoint)<EOL><INDENT><INDENT><INDENT>loopInfo.push(info)<EOL><INDENT><INDENT><INDENT>allBlocks.push(info)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitDeclarationReference(expression: IrDeclarationReference) {", "body": "<EOL><INDENT><INDENT>expression.symbol.checkBinding(<STR_LIT>, expression)<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(a: A, b: B) {", "body": "<EOL><INDENT>Outer<Int>().Inner<String>().genericFun(a).Inner<Double>().genericFun(b)<EOL>}"}
{"signature": "fun checkLightTree(element: D, source: KtLightSourceElement, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>checkPsiOrLightTree(element, source, context, reporter)<EOL><INDENT>}"}
{"signature": "val kindArgument =", "body": "resolvedCall.valueArgumentsByIndex?.getOrNull(<NUM_LIT>)<EOL>"}
{"signature": "fun doTestWithJavac(ktFilePath: String) {", "body": "<EOL><INDENT><INDENT>doTest(ktFilePath, true)<EOL><INDENT>}"}
{"signature": "when (val receiverReference = dispatchReceiver.toReference(session)) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirThisReference -> receiverReference.boundSymbol != containingClassSymbol<EOL><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT>}"}
{"signature": "val nativeMemoryTracking =", "body": "project.providers.gradleProperty(<STR_LIT>)<EOL>"}
{"signature": "for ((orig, new) in source.typeParameters.zip(target.typeParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>typeParameters[orig.symbol] = new.symbol<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun functionWithoutBoxes(x: D, y: D) {", "body": "<EOL><INDENT>var z: D = x<EOL><INDENT>val t: D = D(C(<NUM_LIT>, B(<NUM_LIT>U), <STR_LIT>))<EOL><INDENT>z = t<EOL><INDENT>require(z == y)<EOL>}"}
{"signature": "if (call != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>report(typeMismatchDiagnostic.on(call, error.upperKotlinType, inferredType))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classToSyntheticPrimaryConstructor =", "body": "DefaultDelegateFactory.newDeclarationToDeclarationMapping<IrClass, IrConstructor>()<EOL>"}
{"signature": "if (target.project.isCompatibilityMetadataVariantEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>jar.archiveClassifier.set(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (DescriptorUtils.getAllOverriddenDescriptors(descriptor).any(::isDeclaredInAny)) {", "body": "<EOL><INDENT><INDENT><INDENT>val target = declaration.modifierList?.getModifier(KtTokens.OVERRIDE_KEYWORD) ?: declaration<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.DATA_OBJECT_CUSTOM_EQUALS_OR_HASH_CODE.on(target))<EOL><INDENT><INDENT>}"}
{"signature": "val substitutionMap =", "body": "calculateTypeSubstitutionMap(typeSubstitutionMap)<EOL>"}
{"signature": "fun threeIsThree() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val dI =", "body": "A().d <!UNRESOLVED_REFERENCE!>+<!> <NUM_LIT><EOL>"}
{"signature": "fun act(action: () -> Unit) {", "body": "<EOL><INDENT><INDENT>return action()<EOL><INDENT>}"}
{"signature": "val requiredProp =", "body": "propertiesNames.singleOrNull()<EOL>"}
{"signature": "val WILDCARD =", "body": "<STR_LIT><EOL>"}
{"signature": "if (owner.name.isSpecial) {", "body": "<EOL><INDENT><INDENT>val oldNameStr = owner.name.asString()<EOL><INDENT><INDENT><STR_LIT> + oldNameStr.substring(<NUM_LIT>, oldNameStr.length - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val expectedFunctionSignature =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(if (isGet) <STR_LIT> else <STR_LIT>) + <STR_LIT>, <STR_LIT><EOL>"}
{"signature": "import FooOperation.", "body": "*<EOL>"}
{"signature": "while (type.isArray()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (type.isPrimitiveArray()) break<EOL><INDENT><INDENT><INDENT>val argument = (type as? IrSimpleType)?.arguments?.singleOrNull()<EOL><INDENT><INDENT><INDENT>type = argument?.typeOrNull ?: break<EOL><INDENT><INDENT><INDENT>arrayDimensions++<EOL><INDENT><INDENT>}"}
{"signature": "val testClassLiteralLHSType =", "body": "<!UNDERSCORE_USAGE_WITHOUT_BACKTICKS!>___<!>::class<EOL>"}
{"signature": "fun markLineNumberAfterInlineIfNeeded(registerLineNumberAfterwards: Boolean) {", "body": "<EOL><INDENT><INDENT>lineNumberMapper.markLineNumberAfterInlineIfNeeded(registerLineNumberAfterwards)<EOL><INDENT>}"}
{"signature": "var bits_ =", "body": "BitSet()<EOL>"}
{"signature": "val toMutableOrEmptyImport =", "body": "ArbitraryImportable(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val useZip =", "body": "HostManager.hostIsMingw<EOL>"}
{"signature": "if (!isCallableWithSpecialBody(variable)) {", "body": "<EOL><INDENT><INDENT><INDENT>add(FirVariable::initializerIfUnresolved, FirVariable::replaceInitializer, ::expressionGuard)<EOL><INDENT><INDENT><INDENT>add(FirVariable::delegateIfUnresolved, FirVariable::replaceDelegate, ::expressionGuard)<EOL><INDENT><INDENT>}"}
{"signature": "fun testCommonTvos(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doCommonNativeTest(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>libTargets = listOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT>appTargets = listOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT>gradleVersion<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val anchorImportingScope =", "body": "processReferenceInContextOf(resolutionAnchor) ?: return primaryImportingScope<EOL>"}
{"signature": "val newThisSymbol =", "body": "symbolMapping.values.last()<EOL>"}
{"signature": "when (val firExpression = wholeExpression.getOrBuildFir(analysisSession.firResolveSession)) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirQualifiedAccessExpression -> firExpression<EOL><INDENT><INDENT><INDENT>is FirSafeCallExpression -> firExpression.selector as? FirQualifiedAccessExpression<EOL><INDENT><INDENT><INDENT>is FirSmartCastExpression -> firExpression.originalExpression as? FirQualifiedAccessExpression<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (!callToModule && callToNonModule) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>diagnosticSink.report(ErrorsJs.CALL_TO_JS_NON_MODULE_WITH_MODULE_SYSTEM.on(reportOn, normalizeDescriptor(callee)))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun putClosureParametersOnStack(next: PsiExpressionLambda, receiverValue: StackValue?) {", "body": "<EOL><INDENT><INDENT>activeLambda = next<EOL><INDENT><INDENT>codegen.pushClosureOnStack(next.classDescriptor, true, this, receiverValue)<EOL><INDENT><INDENT>activeLambda = null<EOL><INDENT>}"}
{"signature": "fun callSendNumber(helper: NoAutoreleaseSendHelper, tracker: KotlinLivenessTracker) {", "body": "<EOL><INDENT>val number = createKotlinNumber()<EOL><EOL><INDENT>helper.sendNumber(number)<EOL><INDENT>helper.sendNumber(number)<EOL><INDENT>tracker.add(number)<EOL>}"}
{"signature": "if (valueParameterApproximated) {", "body": "<EOL><INDENT><INDENT>builder.setValueParameters(newParameters)<EOL><INDENT><INDENT>approximated = true<EOL><INDENT>}"}
{"signature": "val unstableCandidates =", "body": "if (unstableError != null) ArrayList<CandidateWithBoundDispatchReceiver>(<NUM_LIT>) else null<EOL>"}
{"signature": "val branch<NUM_LIT> =", "body": "whenExpr.branches[<NUM_LIT>]<EOL>"}
{"signature": "if (konanDataDir != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return file.startsWith(konanDataDir)<EOL><INDENT><INDENT>}"}
{"signature": "var isVararg =", "body": "false<EOL>"}
{"signature": "val intrinsicConstClass =", "body": "createIntrinsicConstEvaluationClass()<EOL>"}
{"signature": "val modulePrefix =", "body": "System.getProperty(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val violatingInferredType =", "body": "inferredTypeSubstitutor.safeSubstitute(constraintInfo.typeArgument, Variance.INVARIANT)<EOL>"}
{"signature": "fun option(name: Any, value: Any) {", "body": "<EOL><INDENT><INDENT>options.put(name.toString(), value.toString())<EOL><INDENT>}"}
{"signature": "val MinUL =", "body": "ULong.MIN_VALUE<EOL>"}
{"signature": "fun defineClass(<EOL><INDENT><INDENT>origin: PsiElement?, version: Int, access: Int, name: String, signature: String?, superName: String, interfaces: Array<out String><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>generator.defineClass(version, access, name, signature, superName, interfaces)<EOL><INDENT>}"}
{"signature": "fun remove(key: LookupSymbolKey) {", "body": "<EOL><INDENT><INDENT>recordRemove(key)<EOL><INDENT><INDENT>lookupMap.remove(key)<EOL><INDENT>}"}
{"signature": "val beginLabel =", "body": "Label()<EOL>"}
{"signature": "val acceptable =", "body": "enforcedProperties.isAcceptableValue(this, optionName)<EOL>"}
{"signature": "if (projectionKindFromType == ProjectionKind.INVARIANT || projectionKindFromType == projection.kind) {", "body": "<EOL><INDENT><INDENT><INDENT>return substitutedProjection<EOL><INDENT><INDENT>}"}
{"signature": "if (<!EQUALITY_NOT_APPLICABLE!>(a <!USELESS_CAST!>as A<!>) == (a == <NUM_LIT>)<!>) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val bbNext =", "body": "if (it.isUnconditional() || it == expression.branches.last()) null else<EOL>"}
{"signature": "val ktReturnType =", "body": "returnType?.toKtType(analysisContext) ?: return null<EOL>"}
{"signature": "val renderedSymbol =", "body": "FirRenderer.withResolvePhase().renderElementWithTypeAsString(firSymbol.fir)<EOL>"}
{"signature": "val myEnvironment =", "body": "KotlinCoreEnvironment.createForTests(testRootDisposable, configuration, EnvironmentConfigFiles.JVM_CONFIG_FILES)<EOL>"}
{"signature": "val cacheableTargets =", "body": "distribution.properties<EOL>"}
{"signature": "val dceDumpNameCache =", "body": "DceDumpNameCache()<EOL>"}
{"signature": "val valueSeparateFiles =", "body": "<NUM_LIT><!><EOL>"}
{"signature": "for (annotation in accessor.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.append(descriptorRenderer.renderAnnotation(annotation))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val METADATA_FILE_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val retention =", "body": "irClass.getAnnotationRetention()<EOL>"}
{"signature": "val continuationClassSymbol =", "body": "context.ir.symbols.continuationClass<EOL>"}
{"signature": "val INT_PROGRESSION_FQN =", "body": "<STR_LIT><EOL>"}
{"signature": "val actualCHeader =", "body": "cBridgePrinter.print()<EOL>"}
{"signature": "var knownStableArguments =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun bindValue(value: PseudoValue, element: KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT>pseudocode.bindElementToValue(element, value)<EOL><INDENT><INDENT>}"}
{"signature": "if (context.session.languageVersionSettings.supportsFeature(LanguageFeature.JavaTypeParameterDefaultRepresentationWithDNN)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.propertyDelegatedFieldAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.propertyDelegatedFieldAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "if (method is IrSimpleFunction && method.origin == IrDeclarationOrigin.LOWERED_SUSPEND_FUNCTION) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>listOf(symbols.cancellationException.owner)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (kind == ComposableFunction || kind == KComposableFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>expression.source,<EOL><INDENT><INDENT><INDENT><INDENT>ComposeErrors.COMPOSABLE_FUNCTION_REFERENCE,<EOL><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (entry.methodName.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val backingFieldToAssign =", "body": "prop.ir.backingField!!<EOL>"}
{"signature": "val skipCondition =", "body": "if (strongSkippingEnabled)<EOL>"}
{"signature": "val dirPaths =", "body": "walkKtFiles(testTempDir) { it.relativeTo(testTempDir).path }<EOL>"}
{"signature": "fun set(key: FqName, value: ICClassesAttributes) {", "body": "<EOL><INDENT><INDENT>storage[key.asString()] = value<EOL><INDENT>}"}
{"signature": "val rnum =", "body": "list.size - <NUM_LIT> - index<EOL>"}
{"signature": "val annotatedExpression =", "body": "entry.parent as? KtAnnotatedExpression ?: return<EOL>"}
{"signature": "val arrayTypeClassId =", "body": "arrayType.classId<EOL>"}
{"signature": "when (referencedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirClassLikeSymbol<*> -> classShortenStrategy(referencedSymbol)<EOL><INDENT><INDENT><INDENT>is FirCallableSymbol<*> -> callableShortenStrategy(referencedSymbol)<EOL><INDENT><INDENT><INDENT>else -> ShortenStrategy.DO_NOT_SHORTEN<EOL><INDENT><INDENT>}"}
{"signature": "if (inlineArgumentsInPlace) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>codegen.visitor.addInplaceArgumentEndMarker()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun goo(g: G) {", "body": "<EOL><INDENT>val x = g.a.firstOrNullX()<EOL>}"}
{"signature": "if (isTargetCallable(property)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processor(property)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val asserter =", "body": "contributor.contribute()<EOL>"}
{"signature": "val apiElementsDependencies =", "body": "project.configurations<EOL>"}
{"signature": "val sharedDir =", "body": "testDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val suiteFunctionTag =", "body": "definitionSet.computeTag(backendContext.suiteFun!!.owner) ?: error(<STR_LIT>)<EOL>"}
{"signature": "val ownerIsMemberOfDeclaration =", "body": "callableOwner?.getContainingClass(session) == declaration<EOL>"}
{"signature": "val readOnlyFqName =", "body": "readOnlyClassId.asSingleFqName()<EOL>"}
{"signature": "val pixelFormat =", "body": "NSOpenGLPixelFormat()<EOL>"}
{"signature": "val forTarget =", "body": "this.annotations.findAnnotation(retainForTargetAnnotationName)<EOL>"}
{"signature": "val cPrimitiveVarName =", "body": "<STR_LIT><EOL>"}
{"signature": "val completionMode =", "body": "ConstraintSystemCompletionMode.FULL<EOL>"}
{"signature": "var xShort =", "body": "<NUM_LIT>toShort()<EOL>"}
{"signature": "val bitsWithPadding =", "body": "shl(zext(bits, bitsWithPaddingType), prefixBitsNum)<EOL>"}
{"signature": "val libSourceMap<NUM_LIT> =", "body": "projectPath<EOL>"}
{"signature": "val instrumentedTest =", "body": "SourceSetTree(<STR_LIT>)<EOL>"}
{"signature": "while (parent !is IrPackageFragment) {", "body": "<EOL><INDENT><INDENT><INDENT>irClass = parent as? IrClass<EOL><INDENT><INDENT><INDENT>if (irClass != null) break<EOL><INDENT><INDENT><INDENT>parent = (parent as IrDeclaration).parent<EOL><INDENT><INDENT>}"}
{"signature": "if (node.isAlloc) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (lifetime == Lifetime.GLOBAL)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>++stats.globalAllocsCount<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (lifetime == Lifetime.STACK)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>++stats.stackAllocsCount<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lifetimes[it] = lifetime<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (windowIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val packageId =", "body": "packageTableBuilder.jvmPackageNameList.indexOf(packageFqName)<EOL>"}
{"signature": "if (stableName.isPresentInGeneratedCode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(stableName.copy(symbol = targetSymbol))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val x<NUM_LIT> =", "body": "<!INCORRECT_CALLABLE_REFERENCE_RESOLUTION_FOR_COMPANION_LHS!>kotlin.String?::hashCode<!>::hashCode<EOL>"}
{"signature": "if (irField.parent is IrFile || irField.correspondingPropertySymbol?.owner?.parent is IrFile) {", "body": "<EOL><INDENT><INDENT>if (!useLazyFileInitializers()) return true<EOL><INDENT>}"}
{"signature": "if (function.name == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>function.name = jsVar.name<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ctx.replaceMe(function.makeStmt())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val objectConstructorBody =", "body": "objectConstructor.body as? IrBlockBody<EOL>"}
{"signature": "val typeMismatchDiagnostic =", "body": "if (isWarning) TYPE_MISMATCH_WARNING else TYPE_MISMATCH<EOL>"}
{"signature": "val ktFile =", "body": "createPsiFile(FileUtil.getNameWithoutExtension(fileName), fileText) as KtFile<EOL>"}
{"signature": "val existedInfos =", "body": "globalMetadataInfoHandler.getExistingMetaInfosForActualMetadata(file, reportedInfos.first())<EOL>"}
{"signature": "if (vars.size != prevVars.size) {", "body": "<EOL><INDENT><INDENT><INDENT>vars.clear()<EOL><INDENT><INDENT><INDENT>vars.addAll(prevVars)<EOL><INDENT><INDENT><INDENT>x.source = prevVars.first().source<EOL><INDENT><INDENT>}"}
{"signature": "if (results.add(element)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>yield(element)<EOL><INDENT><INDENT><INDENT><INDENT>resolveQueue.add(element)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (compileTimeInitializer != null) {", "body": "<EOL><INDENT><INDENT>return KtConstantInitializerValue(compileTimeInitializer.toKtConstantValue(), initializer)<EOL><INDENT>}"}
{"signature": "val getOwner =", "body": "superClass.functions.single { it.name.asString() == <STR_LIT> }<EOL>"}
{"signature": "fun visitThisReceiverExpression(thisReceiverExpression: FirThisReceiverExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitThisReceiverExpression(thisReceiverExpression)<EOL><INDENT>}"}
{"signature": "package abc<EOL>.", "body": ""}
{"signature": "val isExpectedDynamic =", "body": "expectType is ConeDynamicType<EOL>"}
{"signature": "if (steps == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val curNanos =", "body": "System.nanoTime()<EOL>"}
{"signature": "fun testCircularDependenciesNoKotlinFiles() {", "body": "<EOL><INDENT><INDENT>doTest()<EOL><INDENT>}"}
{"signature": "for (ktStatement in ktBodyStatements.dropLast(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irBlockBody.statements.add(statementGenerator.generateStatement(ktStatement))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun printIndented(print: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>indentation += <NUM_LIT><EOL><INDENT><INDENT><INDENT>print()<EOL><INDENT><INDENT><INDENT>indentation -= <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun writeRangeLength(elements: List<Int>, writer: FileWriter) {", "body": "<EOL><INDENT><INDENT>writer.writeIntArray(<STR_LIT>, elements, strategy)<EOL><INDENT><INDENT>writer.appendLine()<EOL><INDENT>}"}
{"signature": "when (val error = it.constraintSystemError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is NewConstraintError -> error.position.originalPosition()<EOL><INDENT><INDENT><INDENT><INDENT>is CapturedTypeFromSubtyping -> error.position.originalPosition()<EOL><INDENT><INDENT><INDENT><INDENT>is ConstrainingTypeIsError -> error.position.originalPosition()<EOL><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val tickIndex =", "body": "string.indexOf('`')<EOL>"}
{"signature": "for (i in <NUM_LIT> until existingCall.typeArgumentsCount) {", "body": "<EOL><INDENT><INDENT>putTypeArgument(i + offset, existingCall.getTypeArgument(i))<EOL><INDENT>}"}
{"signature": "val reportError =", "body": "languageVersionSettings.supportsFeature(ProhibitRepeatedUseSiteTargetAnnotations)<EOL>"}
{"signature": "var receiverRef =", "body": "explicitReceivers.extensionReceiver<EOL>"}
{"signature": "val layoutBuilders =", "body": "ConcurrentHashMap<IrClass, ClassLayoutBuilder>()<EOL>"}
{"signature": "val inlineArgumentsInPlace =", "body": "canInlineArgumentsInPlace()<EOL>"}
{"signature": "val thisCollection =", "body": "this as java.util.Collection<T><EOL>"}
{"signature": "fun bound(typeProvider: (List<FirTypeParameterRef>) -> ConeKotlinType) {", "body": "<EOL><INDENT><INDENT><INDENT>boundProviders += typeProvider<EOL><INDENT><INDENT>}"}
{"signature": "val typesFromFiles =", "body": "HashSet<String>(files.size)<EOL>"}
{"signature": "if (isOtherUppercase() || isOtherLowercase()) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "if (declaration is IrValueParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>tryCopyDefaultArguments(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (fragment == null) {", "body": "<EOL><INDENT><INDENT><INDENT>emptyList<Pair<SimpleType, SimpleType>>()<EOL><INDENT><INDENT>}"}
{"signature": "if (argument is FirAnonymousFunctionExpression && argument.anonymousFunction.isLambda) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirErrors.NOT_NULL_ASSERTION_ON_LAMBDA_EXPRESSION, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var isOutOfBlock =", "body": "false<EOL>"}
{"signature": "for (declaration in this) {", "body": "<EOL><INDENT><INDENT>collectRealOverrides(declaration)<EOL><INDENT>}"}
{"signature": "val subExtensionReceiver =", "body": "subFunction?.extensionReceiverParameter<EOL>"}
{"signature": "val headerKlibPath =", "body": "config.headerKlibPath<EOL>"}
{"signature": "val collection =", "body": "MyCollection(Arrays.asList(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) as java.util.Collection<*><EOL>"}
{"signature": "when (incrementalChanges) {", "body": "<EOL><INDENT><INDENT><INDENT>is KaptIncrementalChanges.Unknown -> Pair(emptyList<File>(), emptyList<String>())<EOL><INDENT><INDENT><INDENT>is KaptIncrementalChanges.Known -> Pair(incrementalChanges.changedSources.toList(), incrementalChanges.changedClasspathJvmNames)<EOL><INDENT><INDENT>}"}
{"signature": "val FRAMEWORK_PATHS_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val asMutableCollectionMethodName =", "body": "getAsMutableCollectionMethodName(kotlinType)<EOL>"}
{"signature": "fun buildCall(symbol: WasmSymbol<WasmFunction>, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.CALL, location, WasmImmediate.FuncIdx(symbol))<EOL><INDENT>}"}
{"signature": "val instructionSet =", "body": "instructions.toHashSet()<EOL>"}
{"signature": "if (otherRawMetadata.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>metadata.putAll(otherRawMetadata)<EOL><INDENT><INDENT>}"}
{"signature": "when ($size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> emptySet()<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> setOf(this[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT><INDENT>else -> toCollection(LinkedHashSet<T>(mapCapacity($capacity)))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val correspondingImport =", "body": "containingFile.findImportByAlias(it) ?: return@mapType null<EOL>"}
{"signature": "if (capturedTypeConstructor == null) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.error(<EOL><INDENT><INDENT><INDENT><INDENT>debugMessage(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>inferenceErrorData<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT>}"}
{"signature": "val wholeCallableReferenceExpression =", "body": "realPsi as? KtCallableReferenceExpression<EOL>"}
{"signature": "if (name?.isSpecial == false) {", "body": "<EOL><INDENT><INDENT><INDENT>multimap.put(name, symbol!!)<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_STDLIB_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (classId in companionObjects) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>setOf(classId.parentClassId!!)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val newPops =", "body": "makePops(value.unboxedTypes)<EOL>"}
{"signature": "val adhocValueSourceClass =", "body": "AdhocValueSource::class.java as Class<AdhocValueSource<T>><EOL>"}
{"signature": "val KOTLIN_BUILD_REPORT_FILE_DIR =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val resultValue =", "body": "scriptDescriptor.resultValue ?: return null<EOL>"}
{"signature": "for (i in <NUM_LIT> until n) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>localVariables!![i].accept(delegate)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (resolvedCallableReferenceAtom.hasBeenPostponed) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val errorReference = buildReferenceWithErrorCandidate(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>info,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ConeAmbiguityError(info.name, applicability, reducedCandidates),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>calleeReference.source<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resolvedCallableReferenceAtom.resultingReference = errorReference<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return@runCallableReferenceResolution applicability to false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val branchesType =", "body": "branchesTypeInfo.type ?: return noTypeInfo(resultDataFlowInfo)<EOL>"}
{"signature": "if (stackValue.isLocalWithNoBoxing(JvmKotlinType(info.type, kotlinType))) {", "body": "<EOL><INDENT><INDENT><INDENT>info.remapValue = stackValue<EOL><INDENT><INDENT>}"}
{"signature": "val anonymousClass =", "body": "expression.statements.firstOrNull()<EOL>"}
{"signature": "if (isFileClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parent.kotlinFqName<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val irOperator = getPostfixOperator(ktOperator)) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> throw AssertionError(<STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>in INCREMENT_DECREMENT_OPERATORS -><EOL><INDENT><INDENT><INDENT><INDENT>AssignmentGenerator(statementGenerator).generatePostfixIncrementDecrement(expression, irOperator)<EOL><EOL><INDENT><INDENT><INDENT>IrStatementOrigin.EXCLEXCL -> generateExclExclOperator(expression, irOperator)<EOL><EOL><INDENT><INDENT><INDENT>else -> createErrorExpression(expression, ktOperator.toString())<EOL><INDENT><INDENT>}"}
{"signature": "fun hasStrongIncompatibility(arg: Int)<!><EOL><EOL>expect fun hasStrongIncompatibility(arg: Double)<EOL><EOL><!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>actual fun <!ACTUAL_WITHOUT_EXPECT!>hasWeakIncompatibility<!>() {", "body": "}<!><EOL><EOL>actual fun <!ACTUAL_WITHOUT_EXPECT!>hasStrongIncompatibility<!>(arg: Any?) {}"}
{"signature": "when (compare(item, node.value)) {", "body": "<EOL><INDENT><INDENT>EQ -> node<EOL><INDENT><INDENT>LS -> find(node.left)<EOL><INDENT><INDENT>GT -> find(node.right)<EOL><INDENT>  }"}
{"signature": "fun kotlinUsage() {", "body": "<EOL><INDENT>Main.staticMethod()<EOL><INDENT>val s = Main.staticField<EOL><INDENT>Main().regularMethod()<EOL><INDENT>val r = Main().regularField<EOL>}"}
{"signature": "for ((i, overriddenTypeParameter) in keys.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>typeArguments[overriddenTypeParameter] = values[i].defaultType<EOL><INDENT><INDENT>}"}
{"signature": "val DEFAULT_ATTEMPT_INTERVAL_MS =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "var irGenerateInlineAnonymousFunctions =", "body": "false<EOL>"}
{"signature": "val deprecatedParentTargetMap =", "body": "mapOf<KtKeywordToken, Set<KotlinTarget>>()<EOL>"}
{"signature": "val testRoot =", "body": "settings.findTestRoot(testCaseGroupId.dir)<EOL>"}
{"signature": "val BUILD_SESSION_SEPARATOR =", "body": "<STR_LIT><EOL>"}
{"signature": "if (options.enhancedTypes) {", "body": "<EOL><INDENT><INDENT><INDENT>return renderer.renderType(enhancement)<EOL><INDENT><INDENT>}"}
{"signature": "fun InlineNC(lambda: () -> Unit) {", "body": "lambda() }"}
{"signature": "when (qualifiedName) {", "body": "<EOL><INDENT><INDENT><INDENT>brokenClass.qualifiedName -> brokenClass<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val inputDirectory =", "body": "inputDirectoryPath?.File()<EOL>"}
{"signature": "if (includeAdditionalModifiers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderAdditionalModifiers(function, builder)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val INTEROP_NATIVE_PTR_TO_LONG<INDENT>=", "body": "<STR_LIT><EOL>"}
{"signature": "when (read(singleByteBuffer, <NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><INDENT><NUM_LIT> -> singleByteBuffer[<NUM_LIT>].toInt() and <NUM_LIT>xFF<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (it is FirClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@OptIn(PrivateForInline::class)<EOL><INDENT><INDENT><INDENT><INDENT>classDeclarationsStack.add(it)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val oldSignatures =", "body": "dependencySrcMetadata.inverseDependencies[libFile, srcFile] ?: emptySet()<EOL>"}
{"signature": "val folderDateFormat =", "body": "SimpleDateFormat(<STR_LIT>)<EOL>"}
{"signature": "if (JvmCodegenUtil.isConst(closure)) {", "body": "<EOL><INDENT><INDENT><INDENT>generateConstInstance(asmType, wrapperMethod.returnType)<EOL><INDENT><INDENT>}"}
{"signature": "if (hasAnnotation(StandardNames.FqNames.extensionFunctionType)) {", "body": "<EOL><INDENT><INDENT>this<EOL><INDENT>}"}
{"signature": "else if (element !is KtProperty || PsiTreeUtil.getParentOfType(element, KtDeclaration::class.java) !is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsParcelize.INAPPLICABLE_IGNORED_ON_PARCEL.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val holders =", "body": "mutableMapOf<ConfigurationKey, FilesWriter>()<EOL>"}
{"signature": "val MSG =", "body": "<STR_LIT> + <STR_LIT><EOL>"}
{"signature": "if (fromAliasedClassNode != null && !fromTypeAlias.expandedType.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>inlineArtificialMembers(fromAliasedClassNode, intoClassNode, intoArtificialClass, targetIndex)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until defaultParamCount(currentParams)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fn.addValueParameter(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (i == <NUM_LIT>) defaults else <STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context.irBuiltIns.intType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>IrDeclarationOrigin.MASK_FOR_DEFAULT_FUNCTION<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(array : Array<String?>?) {", "body": "<EOL><INDENT>array?.sure<Array<String?>>().<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>length<!>()<EOL>}"}
{"signature": "val FALLBACK_IDEA_BUILD_NUMBER =", "body": "<STR_LIT><EOL>"}
{"signature": "for((stringPattern, intrinsic) in convertOperations) {", "body": "<EOL><INDENT><INDENT><INDENT>add(pattern(stringPattern), intrinsic)<EOL><INDENT><INDENT>}"}
{"signature": "val typeMirror =", "body": "builderResult.bridgeGenerationComponents.enumToTypeMirror.getValue(enum)<EOL>"}
{"signature": "val IMMUTABLE_BLOB_OF =", "body": "<STR_LIT><EOL>"}
{"signature": "val legacySerializer =", "body": "classSymbol.findEnumLegacySerializer()<EOL>"}
{"signature": "fun foo<NUM_LIT>(x: Map<String, Int>) {", "body": "<EOL>}"}
{"signature": "val builtValues =", "body": "hashMapOf<KotlinHierarchy.Node, KotlinHierarchy?>()<EOL>"}
{"signature": "val isDueToNullability =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.session.typeContext.isTypeMismatchDueToNullability(returnExpressionType, functionReturnType)<EOL>"}
{"signature": "if (node is JsExpression && node.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>suspendCalls += node<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val splitPerFile =", "body": "JsEnvironmentConfigurationDirectives.SPLIT_PER_FILE in module.directives<EOL>"}
{"signature": "val kSuspendFunctionType =", "body": "expectedType.immediateSupertypes().first { it.isSuspendFunctionType }.unwrap()<EOL>"}
{"signature": "val skipDefaults =", "body": "mutableStatementContainer()<EOL>"}
{"signature": "if (configuration.withObjCBaseDeclarationStubs) {", "body": "<EOL><INDENT><INDENT><INDENT>headerGenerator.translateBaseDeclarations()<EOL><INDENT><INDENT>}"}
{"signature": "fun sort(c: Comparator<in Int>?) {", "body": "}"}
{"signature": "val TAGS_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (moduleKind != null) {", "body": "<EOL><INDENT><INDENT><INDENT>register(FirJsModuleKind::class, FirJsModuleKind(moduleKind))<EOL><INDENT><INDENT>}"}
{"signature": "val vks =", "body": "<STR_LIT><EOL>"}
{"signature": "var pp =", "body": "p<EOL>"}
{"signature": "val packedFields =", "body": "mutableListOf<IndexedField>()<EOL>"}
{"signature": "if (descriptor is ConstructorDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return Type.VOID_TYPE<EOL><INDENT><INDENT>}"}
{"signature": "fun staticCall(caller: DataFlowIR.FunctionSymbol.Declared, call: DataFlowIR.Node.Call, node: DataFlowIR.Node, callee: DataFlowIR.FunctionSymbol) {", "body": "<EOL><INDENT><INDENT>val resolvedCallee = callee.resolved()<EOL><INDENT><INDENT>val callSite = CallGraphNode.CallSite(call, node, false, resolvedCallee)<EOL><INDENT><INDENT>val function = moduleDFG.functions[resolvedCallee]<EOL><INDENT><INDENT>callGraph.addEdge(caller, callSite)<EOL><INDENT><INDENT>if (function != null)<EOL><INDENT><INDENT><INDENT>functionStack.push(HandleFunctionParams(caller, function))<EOL><INDENT>}"}
{"signature": "if (OperatingSystem.current().isMacOsX) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val hostSpecificMetadataJar = producer.projectPath.resolve(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>hostSpecificMetadataJar.assertZipFileContains(listOf(<STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertTasksExecuted(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val possiblyChangedVariables =", "body": "variableStorage.realVariables.values.filter { it.identifier.symbol in reassigned }<EOL>"}
{"signature": "fun renderSeparated(elements: List<FirElement>, visitor: Visitor) {", "body": "<EOL><INDENT><INDENT>printer.renderSeparated(elements, visitor)<EOL><INDENT>}"}
{"signature": "val typeAliasName =", "body": "identifier.nameAsSafeName()<EOL>"}
{"signature": "val SIMPLE_EFFECT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "package conversions<EOL>.", "body": ""}
{"signature": "val elementToBuild =", "body": "findPsiElement(file) as KtDeclaration<EOL>"}
{"signature": "fun c(c: C<Int>) {", "body": "<EOL>}"}
{"signature": "if (!DescriptorVisibilities.isPrivate(visibility)) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "for (module in sourceModules) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>report(ERROR, <STR_LIT>, module.moduleInfoFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val testProjectDir =", "body": "TemporaryFolder(parentFolder)<EOL>"}
{"signature": "var LOG =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!isBounded) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sb.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isTopLevelContainer(container)) {", "body": "<EOL><INDENT><INDENT><INDENT>getTopLevelPropertyDeclarationName(bridgeBuilderResult.kotlinFile, property)<EOL><INDENT><INDENT>}"}
{"signature": "val MapEntry =", "body": "Map.createNestedClassId(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val char =", "body": "wasm_i<NUM_LIT>_load<NUM_LIT>_u(curAddr).toChar()<EOL>"}
{"signature": "fun testFormatAndParse(bytes: ByteArray, expected: String, format: HexFormat) {", "body": "<EOL><INDENT><INDENT>assertEquals(expected, bytes.toHexString(format))<EOL><INDENT><INDENT>assertContentEquals(bytes, expected.hexToByteArray(format))<EOL><EOL><INDENT><INDENT>assertEquals(expected, bytes.asUByteArray().toHexString(format))<EOL><INDENT><INDENT>assertContentEquals(bytes.asUByteArray(), expected.hexToUByteArray(format))<EOL><INDENT>}"}
{"signature": "if (numberOfTrailingParameters > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>sliceIntrinsicArgs.add(irGet(firstTrailingParameterIndexVar.value))<EOL><INDENT><INDENT><INDENT>sliceIntrinsic = jsSliceArrayLikeFromIndexToIndex<EOL><INDENT><INDENT>}"}
{"signature": "val snippetVal =", "body": "snippet.get()<EOL>"}
{"signature": "for (i in (<NUM_LIT>uL..<NUM_LIT>uL).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val childObj =", "body": "KotlinChildClass()<EOL>"}
{"signature": "val approximatedIntegerLiteralType =", "body": "if (approximateIntegerLiterals) new.approximateIntegerLiteralType() else new<EOL>"}
{"signature": "val realCall =", "body": "expression.callableReference.getPropertyResolvedCallWithAssert(context.bindingContext())<EOL>"}
{"signature": "var function =", "body": "callableReferenceAccess.calleeReference.toResolvedFunctionSymbol()!!.fir<EOL>"}
{"signature": "val statusElement =", "body": "data.getRequiredField(<STR_LIT>)<EOL>"}
{"signature": "val parameterStub =", "body": "PsiTypeParameterStubImpl(listStub, parameter.first)<EOL>"}
{"signature": "val leafParents =", "body": "mutableMapOf<T, Node>()<EOL>"}
{"signature": "val variableDescriptorHolder =", "body": "trace.bindingContext[NEW_INFERENCE_CATCH_EXCEPTION_PARAMETER, ktExpression] ?: return this<EOL>"}
{"signature": "if (character > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>character = Char.toLowerCase(Char.toUpperCase(character))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar(block: suspend (BoxInt) -> Unit) {", "body": "<EOL><INDENT>block(BoxInt(<NUM_LIT>))<EOL><INDENT>block.startCoroutineUninterceptedOrReturn(BoxInt(<NUM_LIT>), EmptyContinuation())<EOL>}"}
{"signature": "for (i in J.listOfNotNull().toTypedArray()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val enumPrimitiveType =", "body": "enumType.getCEnumPrimitiveType()<EOL>"}
{"signature": "val CONCURRENT_VOLATILE_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val resultVariables =", "body": "variables.toMutableList()<EOL>"}
{"signature": "val expectedDependency =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "if (allErrorsAtEof && !element.isAtEof()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>allErrorsAtEof = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val argumentDataFlowInfos =", "body": "ArrayList<DataFlowInfo>()<EOL>"}
{"signature": "if (baseClass is KtLightClassImpl) {", "body": "<EOL><INDENT><INDENT><INDENT>baseClass.getDescriptor()?.let(DescriptorUtils::getFqName)?.asString()<EOL><INDENT><INDENT>}"}
{"signature": "val REFLECT =", "body": "FlavorConfig(TargetBackend.ANDROID, <STR_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "fun baz(xBaz<NUM_LIT>: Int, xBaz<NUM_LIT>: Int, xBaz<NUM_LIT>: Int) {", "body": "<EOL><INDENT>x<NUM_LIT>()<EOL><INDENT>x<NUM_LIT>()<EOL>}"}
{"signature": "val linkCollector =", "body": "ExpectActualLinkCollector()<EOL>"}
{"signature": "var digit =", "body": "value and VLQ_BASE_MASK<EOL>"}
{"signature": "fun foo() {", "body": "<EOL><INDENT><!OPT_IN_MARKER_ON_WRONG_TARGET!>@SomeOptInMarker<!><EOL><INDENT><!OPT_IN_MARKER_ON_WRONG_TARGET!>@OtherOptInMarker<!><EOL><INDENT>val value = <NUM_LIT><EOL>}"}
{"signature": "val javaSymbolProvider =", "body": "LLFirJavaSymbolProvider(this, context.moduleData, project, context.contentScope)<EOL>"}
{"signature": "import libcurl.", "body": "*<EOL>"}
{"signature": "if (b.a == <NUM_LIT> && b.b == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val recreatedGetter =", "body": "recreatedProperty.getter!!<EOL>"}
{"signature": "val sourceSetAOutputDirectory =", "body": "temporaryFolder.newFolder()<EOL>"}
{"signature": "var staticScopes =", "body": "scopes<EOL>"}
{"signature": "if (url.protocol == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>(url.openConnection() as? JarURLConnection)?.jarFileURL?.toFileOrNull()<EOL><INDENT><INDENT>}"}
{"signature": "while (platformNN) {", "body": "}"}
{"signature": "val TEST_DATA_ROOT =", "body": "<STR_LIT><EOL>"}
{"signature": "val jvmPlatforms =", "body": "setOf(KotlinPlatformType.jvm, KotlinPlatformType.androidJvm)<EOL>"}
{"signature": "val memberCodegen =", "body": "createCodegenForDelegatesInMultifileFacade(context)<EOL>"}
{"signature": "import kind $kind\"<EOL>.", "body": ""}
{"signature": "val dispatchReceiverCanBeExplicit =", "body": "candidateSymbol is KtCallableSymbol && !candidateSymbol.isExtension<EOL>"}
{"signature": "val elementType =", "body": "readRefType()<EOL>"}
{"signature": "val descImplType =", "body": "Type.getObjectType(<STR_LIT>)<EOL>"}
{"signature": "else if (buffer.size() + bytesToAppend() >= messageLimitBytes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(messageLimitBytes - buffer.size())<EOL><INDENT><INDENT><INDENT><INDENT>overflow()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val serializerVar =", "body": "irTemporary(irInvoke(null, ctor, typeArgs, ctorArgs), <STR_LIT>)<EOL>"}
{"signature": "fun renderAnnotations(analysisSession: KtAnalysisSession, owner: KtAnnotated, printer: PrettyPrinter) {", "body": "<EOL><INDENT><INDENT>annotationListRenderer.renderAnnotations(analysisSession, owner, this, printer)<EOL><INDENT>}"}
{"signature": "for (property in properties.drop(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val shiftedResult = shiftResultOfHashCode(irResultVar)<EOL><INDENT><INDENT><INDENT><INDENT>val irRhs = irCallOp(context.irBuiltIns.intPlusSymbol, irIntType, shiftedResult, getHashCodeOfProperty(property))<EOL><INDENT><INDENT><INDENT><INDENT>+irSet(irResultVar.symbol, irRhs)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val leftInfo =", "body": "or.left.accept(this)<EOL>"}
{"signature": "fun calculateLazyInitializerForEnumEntry(designation: FirDesignation) {", "body": "<EOL><INDENT>val enumEntry = designation.target as FirEnumEntry<EOL><INDENT>require(enumEntry.initializer is FirLazyExpression)<EOL><EOL><INDENT>val newEnumEntry = revive<FirEnumEntry>(designation)<EOL><INDENT>enumEntry.replaceInitializer(newEnumEntry.initializer)<EOL>}"}
{"signature": "val incr =", "body": "Incrementer()<EOL>"}
{"signature": "val complexType =", "body": "getComplexType(proto)<EOL>"}
{"signature": "val ANALYZED_DEPENDENCIES =", "body": "BODY_RESOLVE<EOL>"}
{"signature": "if (currentModality != Modality.FINAL) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun checkConstructorDeclaration(constructorDescriptor: ClassConstructorDescriptor, declaration: KtConstructor<*>) {", "body": "<EOL><INDENT><INDENT>modifiersChecker.checkModifiersForDeclaration(declaration, constructorDescriptor)<EOL><INDENT><INDENT>identifierChecker.checkDeclaration(declaration, trace)<EOL><INDENT><INDENT>checkVarargParameters(trace, constructorDescriptor)<EOL><INDENT><INDENT>checkConstructorVisibility(constructorDescriptor, declaration)<EOL><INDENT><INDENT>checkExpectedClassConstructor(constructorDescriptor, declaration)<EOL><INDENT>}"}
{"signature": "val withDependsOnClosureImpl =", "body": "MutableObservableSetImpl<KotlinSourceSet>(this)<EOL>"}
{"signature": "for(i in <NUM_LIT>.multiFieldValueClassUnderlyingTypeIdCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeById(getMultiFieldValueClassUnderlyingTypeId(i)).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val partOfErroneousOuterCall =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>containingElements.any { it is FirFunctionCall && it.calleeReference is FirResolvedErrorReference } &&<EOL>"}
{"signature": "val propertyTypeArguments =", "body": "propertyDescriptor.typeParameters.associateWith { it.defaultType }<EOL>"}
{"signature": "val pro =", "body": "<STR_LIT><EOL>"}
{"signature": "package MyPackage<EOL>.", "body": ""}
{"signature": "val buildNumberOnlyClassifierRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val dispatchReceiversNumber =", "body": "context.dispatchReceiverTypesStack.size<EOL>"}
{"signature": "if (compileTimeValue == null || compileTimeValue.usesNonConstValAsConstant) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "when (symbol.owner.name) {", "body": "<EOL><INDENT><INDENT><INDENT>Name.identifier(<STR_LIT>) -> if (doNotIntrinsify) call else transformCompareToMethodCall(call)<EOL><INDENT><INDENT><INDENT>Name.identifier(<STR_LIT>) -> transformEqualsMethodCall(call as IrCall)<EOL><INDENT><INDENT><INDENT>else -> call<EOL><INDENT><INDENT>}"}
{"signature": "import m<NUM_LIT>ConfigurationException;<EOL>.", "body": ""}
{"signature": "val isSubtypingInvolved =", "body": "wasSubtypingInvolved || isSubtypingCurrentlyInvolved<EOL>"}
{"signature": "val k<NUM_LIT>PlatformArgs =", "body": "compiler.createArguments()<EOL>"}
{"signature": "val flagName =", "body": "m.group(<NUM_LIT>)<EOL>"}
{"signature": "fun visitValueAccess(expression: IrValueAccessExpression, data: Visibles) {", "body": "<EOL><INDENT><INDENT><INDENT>data.visitValueAccess(expression, expression.symbol.owner)<EOL><INDENT><INDENT><INDENT>super.visitValueAccess(expression, data)<EOL><INDENT><INDENT>}"}
{"signature": "val uv =", "body": "value.toBits()<EOL>"}
{"signature": "if (onlyKotlinTask && !(buildOperationRecord is TaskRecord && buildOperationRecord.isFromKotlinPlugin)) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "val whenResultValue =", "body": "<EOL><INDENT><INDENT><INDENT>whenReturnType?.let { facade.components.dataFlowValueFactory.createDataFlowValue(expression, it, contextAfterSubject) }<EOL>"}
{"signature": "fun setupEnvironment(<EOL><INDENT><INDENT>environment: KotlinCoreEnvironment,<EOL><INDENT><INDENT>testDataFile: File,<EOL><INDENT><INDENT>files: List<BaseDiagnosticsTest.TestFile><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>setupEnvironment(environment)<EOL><INDENT>}"}
{"signature": "val executableAbsolutePath =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!used) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>element.acceptChildrenVoid(this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dependsOnSourceSets =", "body": "allVisibleSourceSetNames<EOL>"}
{"signature": "val pathToDist =", "body": "match.groups[<NUM_LIT>]!!.value<EOL>"}
{"signature": "if (typeArgumentList != null) {", "body": "<EOL><INDENT><INDENT><INDENT>resolveTypeProjections(c, ErrorUtils.createErrorType(ErrorTypeKind.ERROR_TYPE_PARAMETER).constructor, typeArgumentList.arguments)<EOL><INDENT><INDENT><INDENT>c.trace.report(TYPE_ARGUMENTS_NOT_ALLOWED.on(typeArgumentList, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "for ((key, v<NUM_LIT>) in m<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val v<NUM_LIT> = m<NUM_LIT>getValue(key)<EOL><INDENT><INDENT><INDENT>if (!v<NUM_LIT>isEqualTo(v<NUM_LIT>, session)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val sealedClassDescriptor =", "body": "WhenChecker.getClassDescriptorOfTypeIfSealed(subjectType)<EOL>"}
{"signature": "val macosFirst =", "body": "CommonizerTarget(MACOS_X<NUM_LIT>, LINUX_X<NUM_LIT>)<EOL>"}
{"signature": "fun testTrue(f: () -> Boolean) {", "body": "<EOL><INDENT>assertTrue(f(), f.toString())<EOL>}"}
{"signature": "fun Foo(string: String?) {", "body": "}<EOL><EOL><INDENT><INDENT>class Foo(val str: String)<EOL><EOL><INDENT><INDENT>fun Bar(string: String) {}"}
{"signature": "val sortedMap =", "body": "map.toSortedMap(nullsLast())<EOL>"}
{"signature": "if (pathStr.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ImportPath(FqName(pathStr.substring(<NUM_LIT>, pathStr.length - <NUM_LIT>)), isAllUnder = true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var allTasksTimeMs =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun foo(fooParam: Int, block: (Int) -> Unit) {", "body": "<EOL><INDENT>val fooVar = <NUM_LIT><EOL><INDENT>baz(<NUM_LIT>)<EOL><INDENT>block(<NUM_LIT>)<EOL>}"}
{"signature": "val u_threshold =", "body": "<NUM_LIT>e+<NUM_LIT>  <EOL>"}
{"signature": "var sourcesWereUpdated =", "body": "false<EOL>"}
{"signature": "fun foo(j: MyJavaClass) {", "body": "<EOL><INDENT>j.bar()<EOL>}"}
{"signature": "if (CompileTimeConstantUtils.isArrayFunctionCall(call)) {", "body": "<EOL><INDENT><INDENT><INDENT>return createConstantValueForArrayFunctionCall(call)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlin =", "body": "project.applyMultiplatformPlugin()<EOL>"}
{"signature": "val totalParams =", "body": "realValueParams + thisParams<EOL>"}
{"signature": "val descriptorGetterSymbol =", "body": "irAnySerialDescProperty?.getter!!.symbol<EOL>"}
{"signature": "val aFunction =", "body": "pkg.functions.getValue(aKey)<EOL>"}
{"signature": "val importedClass =", "body": "helper.findImport(pathSegments)<EOL>"}
{"signature": "val listenerClass =", "body": "loadClass<Any>(descriptor.listenerClassName, descriptor.pluginDescriptor)<EOL>"}
{"signature": "if (nonScriptId(fileName)) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "if (callInfo !is PSIErrorCallInfo<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (metadata) {", "body": "<EOL><INDENT><INDENT><INDENT>is MetadataSource.Class -> metadata.serializedIr<EOL><INDENT><INDENT><INDENT>is MetadataSource.File -> metadata.serializedIr<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "if (rootMarker !is ConeClassLikeType) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val singleSimplePlatform =", "body": "field?.componentPlatforms?.singleOrNull()<EOL>"}
{"signature": "fun emit(composable: @Composable () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>composable()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val diagnosticName =", "body": "actualDiagnostic.name<EOL>"}
{"signature": "if (supertypeWithVariables != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val solution = TypeUnifier.unify(<EOL><INDENT><INDENT><INDENT><INDENT>TypeProjectionImpl(supertype), TypeProjectionImpl(supertypeWithVariables), variableConstructors::contains<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>Maps.newHashMap(solution.substitution)<EOL><INDENT><INDENT>}"}
{"signature": "val func<NUM_LIT> =", "body": "func<NUM_LIT>()<EOL>"}
{"signature": "if (declaration.classId.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>checkLocalDeclaration(declaration, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "if (!application.isHeadlessEnvironment) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.error(Throwable(<STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val firTxtFile =", "body": "File(file.path.replace(<STR_LIT>.toRegex(), <STR_LIT>))<EOL>"}
{"signature": "val kotlinNativeVersion =", "body": "<EOL><INDENT><INDENT><INDENT>if (overriddenKonanHome.isPresent)<EOL>"}
{"signature": "package lt.", "body": "neworld.compiler.bar<EOL>"}
{"signature": "if (nameRef.qualifier != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!extractImportTagImpl(nameRef.qualifier!!, sb)) return false<EOL><INDENT><INDENT><INDENT><INDENT>sb.append('.')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun set(index: Int, value: T) {", "body": "this.value = value }"}
{"signature": "for ((prev, next) in sorted.zip(sorted.drop(<NUM_LIT>))) {", "body": "<INDENT><INDENT><INDENT> val message = <STR_LIT><EOL><INDENT><INDENT><INDENT>assertTrue(next > prev, message)<EOL><INDENT><INDENT><INDENT>assertTrue(next.isAtLeast(prev.major, prev.minor, prev.patch), message)<EOL><INDENT><INDENT><INDENT>assertTrue(next.isAtLeast(prev.major, prev.minor), message)<EOL><INDENT><INDENT><INDENT>assertTrue(next.isAtLeast(next.major, next.minor, next.patch), message)<EOL><INDENT><INDENT><INDENT>assertTrue(next.isAtLeast(next.major, next.minor), message)<EOL><INDENT><INDENT><INDENT>assertFalse(prev.isAtLeast(next.major, next.minor, next.patch), message)<EOL><INDENT><INDENT>}"}
{"signature": "val actualListingLines =", "body": "actualString.split('\\n').toList()<EOL>"}
{"signature": "while (b < a) {", "body": "<EOL><INDENT><INDENT>b = b + <NUM_LIT>;<EOL><INDENT><INDENT>c = c + <NUM_LIT>;<EOL><INDENT>}"}
{"signature": "if (projection.kind == ProjectionKind.INVARIANT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return convertProjectionKindToConeTypeProjection(mappedProjection.kind)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var inBoxMethod =", "body": "false<EOL>"}
{"signature": "val webpackLocalDelimiterIndex =", "body": "line.indexOf(WEBPACK_LOCAL_DELIMITER)<EOL>"}
{"signature": "while (psiClass != null && psiClass.name == null || psiClass is PsiTypeParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>psiClass = PsiTreeUtil.getContextOfType(psiClass, PsiClass::class.java, true)<EOL><INDENT><INDENT>}"}
{"signature": "if (anno == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val supportsCache = container.kind == ClassKind.CLASS<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>&& container.source is KotlinSourceElement<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>&& containerType.doesSupportCache<EOL><EOL><INDENT><INDENT><INDENT><INDENT>return ContainerOptionsProxy(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>containerType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (supportsCache) null else NO_CACHE)<INDENT><INDENT><INDENT> }"}
{"signature": "for (fn in selectors) {", "body": "<EOL><INDENT><INDENT>val v<NUM_LIT> = fn(a)<EOL><INDENT><INDENT>val v<NUM_LIT> = fn(b)<EOL><INDENT><INDENT>val diff = compareValues(v<NUM_LIT>, v<NUM_LIT>)<EOL><INDENT><INDENT>if (diff != <NUM_LIT>) return diff<EOL><INDENT>}"}
{"signature": "for (el in arr) {", "body": "<EOL><INDENT><INDENT>sum += el.arg<EOL><INDENT>}"}
{"signature": "fun incCounter() {", "body": "<EOL><INDENT><INDENT>cancelledTracker.andIncrement<EOL><INDENT>}"}
{"signature": "if ((expectedReceiverType != null) != (actualReceiverType != null)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Incompatible.ParameterShape<EOL><INDENT><INDENT>}"}
{"signature": "val deserializer =", "body": "CompilerArgumentsDeserializerV<NUM_LIT>(newInstance)<EOL>"}
{"signature": "if (!expression.type.needsMfvcFlattening()) {", "body": "<EOL><INDENT><INDENT><INDENT>return listOf(expression.transform(this@JvmMultiFieldValueClassLowering, null))<EOL><INDENT><INDENT>}"}
{"signature": "val registrationMap =", "body": "hashMapOf<Type, Any>()<EOL>"}
{"signature": "if (components.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>lineNumber = components.removeAt(components.size - <NUM_LIT>).toIntOrNull()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitElement(element: IrElement, data: MatchingContext) {", "body": "<EOL><INDENT><INDENT><INDENT>element.acceptChildren(this, data)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinClassFinder =", "body": "ReflectKotlinClassFinder(classLoader)<EOL>"}
{"signature": "val otherJar =", "body": "findJarByClass(otherClass)!!<EOL>"}
{"signature": "fun f<NUM_LIT>(a: Any) {", "body": "<EOL><INDENT>a as String<EOL><INDENT>checkSubtype<String>(a)<EOL>}"}
{"signature": "val REGULAR_ARGUMENT_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val TF_REFLECTION_SHOW_PKG_NAME =", "body": "<NUM_LIT><EOL>"}
{"signature": "import { WASI } from 'wasi';<EOL>.", "body": ""}
{"signature": "for (i in <NUM_LIT> until params - args) {", "body": "<EOL><INDENT><INDENT><INDENT>val parameter = parameters[i]<EOL><INDENT><INDENT><INDENT>val kind = parameter.kind<EOL><INDENT><INDENT><INDENT>if (kind == JvmMethodParameterKind.ENUM_NAME_OR_ORDINAL) continue<EOL><INDENT><INDENT><INDENT>if (hasOuter && kind == JvmMethodParameterKind.OUTER) continue<EOL><EOL><INDENT><INDENT><INDENT>writeParameter(sw, JvmMethodParameterKind.SUPER_CALL_PARAM, parameter.asmType)<EOL><INDENT><INDENT>}"}
{"signature": "fun add(index: Int, element: T) {", "body": "<EOL><INDENT><INDENT>delegate.add(reversePositionIndex(index), element)<EOL><INDENT>}"}
{"signature": "fun testNonTransitiveDoesNotAffectExplicitDependency() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val a = module(<STR_LIT>)<EOL><INDENT><INDENT>val b = module(<STR_LIT>, listOf(a))<EOL><INDENT><INDENT>val c = module(<STR_LIT>, listOf(a, b))<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(c, b, a))<EOL><INDENT>}"}
{"signature": "if (data !is JsonObject) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!(a > <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "if (signature != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return JvmPropertySignature.KotlinProperty(property, proto, signature, property.nameResolver, property.typeTable)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val SCRIPT_FILE_LOCATION_DEFAULT_VARIABLE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val manifestDump =", "body": "removeCommonLines(abiDumpWithoutManifest, abiDumpWithManifest)<EOL>"}
{"signature": "val waitStreamsDuration =", "body": "if (HostManager.hostIsMingw) <NUM_LIT>seconds else Duration.INFINITE<EOL>"}
{"signature": "fun foo(x: Inv<String?>) {", "body": "}"}
{"signature": "for (objCName in objCNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(objCName.annotation.source, INAPPLICABLE_OBJC_NAME, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(a: <!NONE_APPLICABLE!>A<!>) {", "body": "<EOL><INDENT>a.<!UNRESOLVED_REFERENCE!>v<NUM_LIT><!><EOL><INDENT>a.<!UNRESOLVED_REFERENCE!>v<NUM_LIT><!><EOL><INDENT>a.<!UNRESOLVED_REFERENCE!>v<NUM_LIT><!><EOL>}"}
{"signature": "val countBefore =", "body": "nodes.size<EOL>"}
{"signature": "fun foo(tree: BaseClass) {", "body": "<EOL><INDENT><INDENT>val ui = tree.<!INVISIBLE_REFERENCE!>ui<!><EOL><INDENT>}"}
{"signature": "val basePointedTypeName =", "body": "typeMirror.pointedType.render(kotlinFile)<EOL>"}
{"signature": "val enumClass =", "body": "expectedTypes.asSequence().mapNotNull { it.getEnumClass() }.firstOrNull()<EOL>"}
{"signature": "fun klibFiles(collection: FileCollection) {", "body": "klibFiles.add(collection) }"}
{"signature": "val JVM_DEFAULT_NO_COMPATIBILITY_CLASS_ID =", "body": "ClassId.topLevel(JVM_DEFAULT_NO_COMPATIBILITY_FQ_NAME)<EOL>"}
{"signature": "fun testFunImportedFromObjectHasNoDispatchReceiver(l: a.S) {", "body": "<EOL><INDENT>l.<!UNRESOLVED_REFERENCE!>renamed<!><EOL><INDENT>l.prop<EOL><INDENT>renamed<EOL>}"}
{"signature": "if (text.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>diagnostic = DiagnosticKind.WrongLongSuffix<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>number = null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val SKIPPED_ARGUMENTS_WITH_VALUE =", "body": "<EOL><INDENT><INDENT><INDENT>listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun visitCallsEffectDeclaration(callsEffect: KtCallsEffectDeclaration<KotlinTypeBean, Nothing?>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinContractEffectType.CALLS.ordinal)<EOL><INDENT><INDENT>dataStream.writeInt(callsEffect.valueParameterReference.parameterIndex)<EOL><INDENT><INDENT>dataStream.writeInt(callsEffect.kind.ordinal)<EOL><INDENT>}"}
{"signature": "fun foo(v: String) {", "body": "<EOL><INDENT><INDENT>result = v<EOL><INDENT>}"}
{"signature": "val constructorParams =", "body": "classStub.explicitPrimaryConstructor?.parameters?.let(this::renderConstructorParams) ?: <STR_LIT><EOL>"}
{"signature": "fun testUnitIncDec() {", "body": "<EOL><INDENT>var x = UnitIncDec()<EOL><INDENT>x = <warning>x<error>++</error></warning><EOL>}"}
{"signature": "val funBox =", "body": "FunBox { called.value = true }<EOL>"}
{"signature": "if ((funcClass?.isCompanion == true) && ((funcClass.parent as? IrClass)?.hasAnnotation(RuntimeNames.managedType) ?: false)) {", "body": "<EOL><INDENT><INDENT><INDENT>return transformManagedCompanionCall(expression)<EOL><INDENT><INDENT>}"}
{"signature": "val redundantSpreadWarningFactory =", "body": "<EOL><INDENT><INDENT><INDENT>if (isAnnotation) FirErrors.REDUNDANT_SPREAD_OPERATOR_IN_NAMED_FORM_IN_ANNOTATION<EOL>"}
{"signature": "val argumentsAreOrdered =", "body": "resolvedCall.call.valueArguments.withIndex().none { (index, arg) -> resolvedOrder[arg] != index }<EOL>"}
{"signature": "fun funWithCtor(ctor: KFunction<NUM_LIT><Param, Base>) {", "body": "}<EOL><EOL>fun main() {<EOL><INDENT>funWithCtor(::Outer)<EOL><INDENT>funWithCtor(::Nested)<EOL><INDENT>funWithCtor(Outer::Nested)<EOL><INDENT>funWithCtor(Outer::Nested::invoke)<EOL>}"}
{"signature": "val testCallableRef =", "body": "::<!UNDERSCORE_USAGE_WITHOUT_BACKTICKS!>__<!><EOL>"}
{"signature": "val mutableResult =", "body": "data.drop(<NUM_LIT>).associateWithTo(result.toMutableMap()) { it - <NUM_LIT> }<EOL>"}
{"signature": "fun print(s: Any) {", "body": "<EOL><INDENT><INDENT>out.write(s.toString())<EOL><INDENT>}"}
{"signature": "val elementSubclasses =", "body": "elements.associateWith { mutableSetOf<Element>() }<EOL>"}
{"signature": "when (ktDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtClassOrObject -><EOL><INDENT><INDENT><INDENT><INDENT>processClassOrObject(ktDeclaration)<EOL><INDENT><INDENT>}"}
{"signature": "val blockGenerator =", "body": "BlockGenerator(this.codegen)<EOL>"}
{"signature": "val unsubstitutedDescriptor =", "body": "wrapperDescriptor.unwrapInitialDescriptorForSuspendFunction()<EOL>"}
{"signature": "if (freeArgsStarted) {", "body": "<EOL><INDENT><INDENT><INDENT>freeArgs.add(arg)<EOL><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT>}"}
{"signature": "val dA =", "body": "DoubleArray(<NUM_LIT>)<EOL>"}
{"signature": "val NOASSERTION =", "body": "URI.create(<STR_LIT>)<EOL>"}
{"signature": "if (element is ClassStub.Companion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>listOf(ConstructorStub(isPrimary = true, visibility = VisibilityModifier.PRIVATE, origin = StubOrigin.Synthetic.DefaultConstructor))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useMetaTestConfigurators(vararg configurators: Constructor<MetaTestConfigurator>) {", "body": "<EOL><INDENT><INDENT>metaTestConfigurators += configurators<EOL><INDENT>}"}
{"signature": "val MH_BILYD =", "body": "<NUM_LIT>x<NUM_LIT>L"}
{"signature": "val statementTransformer =", "body": "StatementTransformer()<EOL>"}
{"signature": "val arrayGet =", "body": "compilerContext.irBuiltIns.arrayClass.owner.declarations.filterIsInstance<IrSimpleFunction>()<EOL>"}
{"signature": "if (isDispatchReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>candidateCall.setSmartCastDispatchReceiverType(smartCastResult.resultType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val articleId =", "body": "url.substringAfterLast('-').hexToLong()<EOL>"}
{"signature": "fun foo(a : Int) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException()<EOL><INDENT>}"}
{"signature": "val functionInterface =", "body": "typeArgument.getClass()!!<EOL>"}
{"signature": "val SIGNED_COMPARE_TO<INDENT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val BASE_ENUMS_PACKAGE =", "body": "BASE_KOTLIN_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val dependenciesNode =", "body": "(pomXml.asNode().get(<STR_LIT>) as NodeList).filterIsInstance<Node>().singleOrNull() ?: return<EOL>"}
{"signature": "if (explicitReceiverVariable is RealVariable) {", "body": "<EOL><INDENT><INDENT><INDENT>explicitReceiverVariable.dependentVariables.add(this)<EOL><INDENT><INDENT>}"}
{"signature": "val returnTypeCommonizer =", "body": "returnTypeCommonizer.asCommonizer()<EOL>"}
{"signature": "val mutableSetSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>mutableSetOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).size<!><EOL>"}
{"signature": "val symbolBuffer =", "body": "ByteArray(<NUM_LIT>)<EOL>"}
{"signature": "val nodeJsWorldDir =", "body": "rootPackageJsonFile.parentFile<EOL>"}
{"signature": "val KOTLIN_STDLIB_JS_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!firstFileInModule) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>linesOfCurrentFile = mutableListOf()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(id: Id) {", "body": "<EOL><INDENT>throws()<EOL>}"}
{"signature": "val serialReturnType =", "body": "<EOL><INDENT><INDENT><INDENT>KotlinTypeFactory.simpleNotNullType(TypeAttributes.Empty, serializerClass, listOf(TypeProjectionImpl(newSerializableType)))<EOL>"}
{"signature": "val DEFAULT_REQUIRES_TO_BUILDER =", "body": "false<EOL>"}
{"signature": "if (element is FirFile) {", "body": "<EOL><INDENT>element in this<EOL>}"}
{"signature": "val indexed =", "body": "data.withIndex().map { it.value.substring(<NUM_LIT>.it.index) }.toList()<EOL>"}
{"signature": "if (outputFile.createNewFile()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return outputFile<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (kind == ClassKind.CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>IrNoParameterClassParcelSerializer(this)<EOL><INDENT><INDENT>}"}
{"signature": "val compileTimeConstants =", "body": "resolveAnnotationValueArguments(resolvedArgument, constantType!!, expectedType, trace)<EOL>"}
{"signature": "val allSetters =", "body": "listOfNotNull(specialSetter) + setters.filterNot { it == specialSetter }<EOL>"}
{"signature": "val compiledKLibRoot =", "body": "compileCommonKlib(testDataPath(root).resolve(<STR_LIT>))<EOL>"}
{"signature": "val toString =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.toString()<!><EOL>"}
{"signature": "val unprocessedType =", "body": "iterator.next()<EOL>"}
{"signature": "fun test(val a: Int var b: Int val c: Int) {", "body": "<EOL><EOL>}"}
{"signature": "val COROUTINES_METADATA_CLASS_NAME_JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val newReceiver =", "body": "oldReceiver.copyTo(irFunction, type = context.irBuiltIns.anyType)<EOL>"}
{"signature": "fun test(tr: Tr<String>) {", "body": "<EOL><INDENT>val v = tr as G?<EOL><INDENT><INDENT>checkSubtype<G<String>>(v!!)<EOL>}"}
{"signature": "fun setupLanguageVersionSettingsForCompilerTests(originalFileText: String, environment: KotlinCoreEnvironment) {", "body": "<EOL><INDENT>val directives = KotlinTestUtils.parseDirectives(originalFileText)<EOL><INDENT>val languageVersionSettings = parseLanguageVersionSettingsOrDefault(directives)<EOL><INDENT>environment.configuration.languageVersionSettings = languageVersionSettings<EOL>}"}
{"signature": "val ALL_BINARY_OPERATION_NAMES =", "body": "BINARY_OPERATION_NAMES + BITWISE_OPERATION_NAMES + setOf(EQUALS, CONTAINS, COMPARE_TO)<EOL>"}
{"signature": "if (topLevelCallContext.inferenceSession.callCompleted(resolvedAtom)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val codegenInputs =", "body": "ArrayList<CodegenFactory.CodegenInput>(chunk.size)<EOL>"}
{"signature": "val indexOfConstructorArgumentFromTopOfStack =", "body": "Type.getArgumentTypes((insn as MethodInsnNode).desc).size<EOL>"}
{"signature": "val targetPathPsi =", "body": "targetPathDeclaration.psi ?: return null<EOL>"}
{"signature": "val validityToken =", "body": "tokenFactory.create(project, firResolveSession.useSiteFirSession.createValidityTracker())<EOL>"}
{"signature": "val argsSize =", "body": "serializableIrClass.typeParameters.size<EOL>"}
{"signature": "if (descriptor is PackageViewDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val fqName = descriptor.fqName<EOL><INDENT><INDENT><INDENT><INDENT>return@Predicate fqName.isRoot || fqName.pathSegments().first() in packagesNames<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val runnableReference =", "body": "::annotatedRunnable<EOL>"}
{"signature": "if (type == AsmTypes.OBJECT_TYPE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>initialSpilledVariablesCount = count<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedSelfPathSuffix =", "body": "<STR_LIT><EOL>"}
{"signature": "val headerInfo =", "body": "receiver?.accept(headerInfoBuilder, expression)<EOL>"}
{"signature": "if (dataParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>append(dataParameter.name)<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>append(transformerParameter.name)<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (p in s) {", "body": "<EOL><INDENT><INDENT>res += p()<EOL><INDENT>}"}
{"signature": "fun withLimit(limit: Long) {", "body": "<EOL><INDENT>res = limit<EOL>}"}
{"signature": "var parameterValues =", "body": "parameterValuesArg<EOL>"}
{"signature": "val HAS_DEFAULT_ARG =", "body": "FlagField.booleanAfter(IS_VARARG)<EOL>"}
{"signature": "val countFilesAndLines =", "body": "if (performanceManager == null) null else performanceManager::addSourcesStats<EOL>"}
{"signature": "if (modifier == PROTECTED_KEYWORD && isFinalExpectClass(parentDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.WRONG_MODIFIER_CONTAINING_DECLARATION.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>node.psi,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>modifier,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val directoryPath =", "body": "substringBeforeLast(delimiter)<EOL>"}
{"signature": "when (val byteValue = input.readByte().toInt()) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> true<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> false<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val memberInfo =", "body": "abiInfo.memberInfo<EOL>"}
{"signature": "import<EOL> */<EOL>.", "body": ""}
{"signature": "var end =", "body": "<NUM_LIT><EOL>"}
{"signature": "val perfCounter =", "body": "PerformanceCounter.create(<STR_LIT>)<EOL>"}
{"signature": "fun testInlineClassesAndRelevantDeclarations<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>doTest(<EOL><INDENT><INDENT><INDENT>VersionRequirement.Version(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), DeprecationLevel.ERROR, null,<EOL><INDENT><INDENT><INDENT>ProtoBuf.VersionRequirement.VersionKind.COMPILER_VERSION, null,<EOL><INDENT><INDENT><INDENT>fqNamesWithRequirements = listOf(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>),<EOL><INDENT><INDENT><INDENT>shouldBeSingleRequirement = false<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (old.hasSetterFlags()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.setterFlags != new.setterFlags) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun visitProperty(property: FirProperty, data: Any?) {", "body": "<EOL><INDENT><INDENT>visitCallableDeclaration(property, null)<EOL><INDENT>}"}
{"signature": "fun callsFunFromSuperInterface() {", "body": "<EOL><INDENT><INDENT>super.bar()<EOL><INDENT>}"}
{"signature": "fun publicKFun() {", "body": "}<EOL><INDENT>private fun privateKFun() {}"}
{"signature": "val directiveRegex =", "body": "<EOL><INDENT><INDENT><STR_LIT><STR_LIT><STR_LIT>[\\w\\s]+:<STR_LIT><STR_LIT><STR_LIT> $ASTERISK_REGEX [\\w\\s]+:[\\s\\S]*?<STR_LIT><STR_LIT><STR_LIT><EOL>"}
{"signature": "val subfragments =", "body": "descriptor.module.getSubPackagesOf(FqName.ROOT) { true }<EOL>"}
{"signature": "val fromPrimary =", "body": "context.currentFunction is IrConstructor<EOL>"}
{"signature": "val targetsProvider =", "body": "originalPsi.containingFile?.virtualFile?.navigationTargetsProvider ?: return emptyList()<EOL>"}
{"signature": "val variablesInScope =", "body": "linkedSetOf<VariableDescriptor>()<EOL>"}
{"signature": "val throwableType =", "body": "context.irBuiltIns.throwableType<EOL>"}
{"signature": "fun hashCodeIdentity() {", "body": "<EOL><INDENT><INDENT>val a = ArrayList(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>).hashCode(), a.hashCode())<EOL><INDENT>}"}
{"signature": "fun takeLong(x: Long) {", "body": "}<EOL><EOL>fun test_<NUM_LIT>() {<EOL><INDENT>val x = getNullableLong() ?: <NUM_LIT> * <NUM_LIT><EOL><INDENT>takeLong(x)<EOL><INDENT><INDENT>}"}
{"signature": "fun testCommonIos(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doCommonNativeTest(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>libTargets = listOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT>appTargets = listOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT><INDENT>gradleVersion<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "package org<EOL>.", "body": ""}
{"signature": "fun dependency(vararg path: Path) {", "body": "<EOL><INDENT><INDENT><INDENT>filtersMap.getValue(binaryModuleData.regular) += path<EOL><INDENT><INDENT>}"}
{"signature": "var mr =", "body": "currentResult<EOL>"}
{"signature": "val preprocessed =", "body": "preprocessCommandLineArguments(args, errors)<EOL>"}
{"signature": "if (this is KtClassOrObjectSymbol && this.classKind == KtClassKind.INTERFACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "if (old.hasClassId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkClassIdEquals(old.classId, new.classId)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val TRANSFORM_HEADER =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val generatedNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun coerceAtMostComparable() {", "body": "<EOL><INDENT><INDENT>assertPrints(DayOfWeek.FRIDAY.coerceAtMost(DayOfWeek.SATURDAY), <STR_LIT>)<EOL><INDENT><INDENT>assertPrints(DayOfWeek.FRIDAY.coerceAtMost(DayOfWeek.WEDNESDAY), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val isDefaultImpls =", "body": "clazz.name.endsWith(<STR_LIT>)<EOL>"}
{"signature": "for (index in initArray.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(index.toULong(), initArray[index])<EOL><INDENT><INDENT>}"}
{"signature": "for (i in diff.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (i == <NUM_LIT>) start[i] = diff[i]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else start[i] = start[i - <NUM_LIT>] + diff[i]<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (a<NUM_LIT> != a<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (!fileBoundaryReached and !whiteSpaceAfter.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>parent.addAfter(KtPsiFactory(project).createWhiteSpace(<STR_LIT>), this)<EOL><INDENT>}"}
{"signature": "if (isReportDeprecatedSinceKotlinWithUnorderedVersions) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.DEPRECATED_SINCE_KOTLIN_WITH_UNORDERED_VERSIONS, context)<EOL><INDENT><INDENT>}"}
{"signature": "when (val y = x) {", "body": "<EOL><INDENT><INDENT>!is Double -> <NUM_LIT><EOL><INDENT><INDENT><NUM_LIT> -> <NUM_LIT><INDENT><INDENT> else -> y.toInt()<EOL><INDENT>}"}
{"signature": "val functionOrProperty =", "body": "functionOrPropertyBaseCommonizer(values) ?: return null<EOL>"}
{"signature": "fun test(a: Any, actualType: Int) {", "body": "<EOL><INDENT>assertEquals(actualType == NUMBER, a is Int, <STR_LIT>)<EOL><INDENT>assertEquals(actualType == NUMBER, a is Number, <STR_LIT>)<EOL><INDENT>assertEquals(actualType == NUMBER, a is Double, <STR_LIT>)<EOL><INDENT>assertEquals(actualType == BOOLEAN, a is Boolean, <STR_LIT>)<EOL><INDENT>assertEquals(actualType == STRING, a is String, <STR_LIT>)<EOL><INDENT>assertEquals(actualType == FUNCTION<NUM_LIT>, a is Function<NUM_LIT><*>, <STR_LIT>)<EOL><INDENT>assertEquals(actualType == FUNCTION || actualType == FUNCTION<NUM_LIT>, a is Function<*>, <STR_LIT>)<EOL>}"}
{"signature": "fun foo(x: Int, y: Int) {", "body": "<EOL><INDENT><INDENT>z = x<EOL><INDENT><INDENT>q = y<EOL><INDENT>}"}
{"signature": "val intCases =", "body": "unsortedIntCases.sortedBy { it.value as Int }<EOL>"}
{"signature": "val containingClassOrObject =", "body": "ktDeclaration.containingClassOrObject<EOL>"}
{"signature": "val compiledScriptClass =", "body": "runBlocking { compiledScript.getClass(null).throwOnFailure().valueOrNull()!! }<EOL>"}
{"signature": "val bytePrefix =", "body": "bytesFormat.bytePrefix<EOL>"}
{"signature": "val nameToBinary =", "body": "mutableMapOf<String, NativeBinary>()<EOL>"}
{"signature": "package gh<NUM_LIT>sync<EOL>.", "body": ""}
{"signature": "if (implicitReceiver.isContextReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>).appendLine(implicitReceiver.contextReceiverNumber)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ktFileStub =", "body": "builtInDecompiler.stubBuilder.buildFileStub(fileContent) as? KotlinFileStubImpl ?: return null<EOL>"}
{"signature": "if (entryIndex == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>proto.addEnumEntry(entryProto.build())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val highestBit =", "body": "if (leadingZeroes < ULong.SIZE_BITS) <NUM_LIT>uL.shl(ULong.SIZE_BITS - leadingZeroes - <NUM_LIT>).toULong() else <NUM_LIT>u<EOL>"}
{"signature": "for ((methodReplacement, original) in multiFieldValueClassReplacements.originalFunctionForMethodReplacement) {", "body": "<EOL><INDENT><INDENT><INDENT>if (methodReplacement !is IrSimpleFunction) continue<EOL><INDENT><INDENT><INDENT>val newOriginal = functionSymbolMap[original.symbol]?.owner ?: continue<EOL><INDENT><INDENT><INDENT>val newMethodReplacement = multiFieldValueClassReplacements.getReplacementFunction(newOriginal) ?: continue<EOL><INDENT><INDENT><INDENT>functionSymbolMap[methodReplacement.symbol] = newMethodReplacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "if (testRunSettings.get<GCScheduler>() == GCScheduler.AGGRESSIVE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val il<NUM_LIT> =", "body": "i.local<NUM_LIT>(<STR_LIT>)<EOL>"}
{"signature": "if (!languageVersionSettings.supportsFeature(LanguageFeature.YieldIsNoMoreReserved)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkReservedYield(referenceExpression, c.trace)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasCompanionObjectName()) {", "body": "<EOL><INDENT><INDENT>v.companionObject = c[companionObjectName]<EOL><INDENT>}"}
{"signature": "val stdlibFqNames =", "body": "mapOf<KClass<*>, String>()<EOL>"}
{"signature": "import userSetupNoHint.", "body": "*<EOL>"}
{"signature": "val argBean =", "body": "typeArgumentBean.type!!<EOL>"}
{"signature": "fun compareStructurally(expected: CheckerContext, actual: CheckerContext) {", "body": "<EOL><INDENT><INDENT><INDENT>assertions.assertEquals(expected.implicitReceiverStack.asString(), actual.implicitReceiverStack.asString())<EOL><INDENT><INDENT><INDENT>assertions.assertEquals(expected.containingDeclarations.asString(), actual.containingDeclarations.asString())<EOL><INDENT><INDENT>}"}
{"signature": "if (flags != thisFlags) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resultNullabilityInfo.put(key, flags)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (ErrorUtils.isError(annotationClass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (type.presentableName in ignoredAnnotationShortNames) return null<EOL><INDENT><INDENT><INDENT><INDENT>return ClassId.fromString(resolveUnresolvedType(type))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addDiagnostic(diagnostic: ScriptDiagnostic) {", "body": "<EOL><INDENT><INDENT>diagnostics.add(diagnostic)<EOL><INDENT>}"}
{"signature": "val refinesInSwiftSupportedTargets =", "body": "arrayOf(KotlinTarget.FUNCTION, KotlinTarget.PROPERTY)<EOL>"}
{"signature": "fun fillCompilerArguments(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerToolOptions,<EOL><INDENT><INDENT>args: org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>args.allWarningsAsErrors = from.allWarningsAsErrors.get()<EOL><INDENT><INDENT>args.suppressWarnings = from.suppressWarnings.get()<EOL><INDENT><INDENT>args.verbose = from.verbose.get()<EOL><INDENT><INDENT>args.freeArgs += from.freeCompilerArgs.get()<EOL><INDENT>}"}
{"signature": "val ERROR_CONTEXT =", "body": "SyntheticElementResolveContext(errorType(), errorType(), null, errorType(), null, null, null)<EOL>"}
{"signature": "fun beyondLimit() {", "body": "<EOL><INDENT><INDENT>val limitedList = LimitedLinkedList<Int>(<NUM_LIT>)<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertTrue(limitedList.add(<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), limitedList)<EOL><INDENT>}"}
{"signature": "val artifactNameAppendix =", "body": "(compilation.target as KotlinJsIrTarget).wasmDecamelizedDefaultNameOrNull()<EOL>"}
{"signature": "fun firstOrNullInEmptyRange() {", "body": "<EOL><INDENT><INDENT>assertNull(UIntRange.EMPTY.firstOrNull())<EOL><INDENT><INDENT>assertNull(ULongRange.EMPTY.firstOrNull())<EOL><INDENT><INDENT>assertNull(UIntProgression.fromClosedRange(<NUM_LIT>u, <NUM_LIT>u, <NUM_LIT>).firstOrNull())<EOL><INDENT>}"}
{"signature": "when (me) {", "body": "<EOL><INDENT><INDENT>MyEnum.SINGLE -> <STR_LIT><EOL><INDENT><INDENT>else -> <STR_LIT><INDENT> }"}
{"signature": "val lambdaClassOriginName =", "body": "proto.getExtensionOrNull(JvmProtoBuf.lambdaClassOriginName)<EOL>"}
{"signature": "val arrayHeader =", "body": "arrayHeader(typeInfo, elements.size)<EOL>"}
{"signature": "fun visitMultiDelegatedConstructorCall(multiDelegatedConstructorCall: FirMultiDelegatedConstructorCall) {", "body": "<EOL><INDENT><INDENT>visitElement(multiDelegatedConstructorCall)<EOL><INDENT>}"}
{"signature": "fun Framework(configure: Action<KotlinNativeFrameworkConfig>) {", "body": "<EOL><INDENT><INDENT>addKotlinArtifact<KotlinNativeFrameworkConfigImpl>(configure)<EOL><INDENT>}"}
{"signature": "fun typeInferenceFailed(context: ResolutionContext<*>, data: InferenceErrorData) {", "body": "<EOL><INDENT><INDENT>unexpectedError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val typeParameterTypeRef =", "body": "buildResolvedTypeRef { type = ConeTypeParameterTypeImpl(typeParameterSymbol.toLookupTag(), false) }<EOL>"}
{"signature": "if (!isStatic(function)) {", "body": "<EOL><INDENT><INDENT>throw IllegalArgumentException(errorMessage)<EOL><INDENT>}"}
{"signature": "var compositeCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun exitBlockScope(block: KtElement) {", "body": "<EOL><INDENT><INDENT>delegateBuilder.exitBlockScope(block)<EOL><INDENT>}"}
{"signature": "val main =", "body": "Worker.current<EOL>"}
{"signature": "if (kaptContext.logger.isVerbose) {", "body": "<EOL><INDENT><INDENT><INDENT>dumpDeclarationOrigins()<EOL><INDENT><INDENT>}"}
{"signature": "val head =", "body": "listOf(module, expectedByModule)<EOL>"}
{"signature": "fun visitBinaryOrEnterRightOperandNode(node: BinaryOrEnterRightOperandNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryOrEnterRightOperandNode(node)<EOL><INDENT>}"}
{"signature": "val checkedLibs =", "body": "mutableSetOf<KotlinLibraryFile>()<EOL>"}
{"signature": "val groupsPerLine =", "body": "bytesPerLine / bytesPerGroup<EOL>"}
{"signature": "var word =", "body": "input.toLong() and <NUM_LIT>x<NUM_LIT>FFFFFFFFL<EOL>"}
{"signature": "fun goToTarget(visitor: LLFirResolveTargetVisitor) {", "body": "<EOL><INDENT><INDENT>val pathIterator = path.iterator()<EOL><INDENT><INDENT>goToTarget(pathIterator, visitor)<EOL><INDENT>}"}
{"signature": "for (preset in samWithReceiverExtension.myPresets) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>options += SubpluginOption(PRESET_ARG_NAME, preset)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isGetter == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resultSymbol<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val receiverState =", "body": "callStack.loadState(receiver)<EOL>"}
{"signature": "val resolvedVersion =", "body": "mutableMapOf<String, ResolvedNpmDependency>()<EOL>"}
{"signature": "if (parameterIndex < <NUM_LIT> || valueParameter.parent != originalFunction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return super.visitGetValue(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!shouldFail) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val b_x_Long =", "body": "BLong().x as Any as LongArray<EOL>"}
{"signature": "if (index < <NUM_LIT> || index < leftLimit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val END =", "body": "<STR_LIT><EOL>"}
{"signature": "val visitedAndToVisitNodes =", "body": "nodes.toMutableSet()<EOL>"}
{"signature": "val topLevel =", "body": "mutableListOf<KtCallableDeclaration>()<EOL>"}
{"signature": "val allSubprojects =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "if (valueParameters.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.reportCompilationError(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, irFile, this<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var collectors =", "body": "mutableListOf<CaptureCollector>()<EOL>"}
{"signature": "for ((parameter, newParameter) in source.explicitParameters.zip(target.explicitParameters)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>putArgument(newParameter, irGet(parameter))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val canHaveAbstractMembers =", "body": "classCanHaveAbstractFakeOverride(classDescriptor)<EOL>"}
{"signature": "val notNullable =", "body": "makeNotNull()<EOL>"}
{"signature": "if (isLambda) {", "body": "<EOL><INDENT><INDENT><INDENT>codegen.propagateChildReifiedTypeParametersUsages(parentCodegen.reifiedTypeParametersUsages)<EOL><INDENT><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>((MinUS + <NUM_LIT>u).toUInt(), (MinUS + <NUM_LIT>u).toUInt())) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val INIT_THREAD_LOCAL_GLOBALS =", "body": "<NUM_LIT><EOL>"}
{"signature": "val jvmPom =", "body": "fileInWorkingDir(jvmModuleDir + <STR_LIT>).readText().replace(<STR_LIT>.toRegex(), <STR_LIT>)<EOL>"}
{"signature": "val classDeclarations =", "body": "(containingClass.metadata as? KonanMetadata.Class)?.llvm<EOL>"}
{"signature": "fun zzz(a: A<Int, Int>) {", "body": "<EOL><INDENT>a.foo(<NUM_LIT>, <NUM_LIT>)<EOL>}"}
{"signature": "fun test(u<NUM_LIT>: UInt, u<NUM_LIT>: UInt) {", "body": "<EOL><INDENT>val a = u<NUM_LIT>value<EOL><EOL><INDENT>val b = u<NUM_LIT>value.hashCode()<EOL><INDENT>val c = u<NUM_LIT>value + u<NUM_LIT>value<EOL>}"}
{"signature": "fun testReassignmentWithStaticCalls(d: dynamic) {", "body": "<EOL><INDENT><!VAL_REASSIGNMENT!>(d as String).onStringVal<!> = <NUM_LIT><EOL><INDENT><!VAL_REASSIGNMENT!>(d as Any).onAnyVal<!> = <NUM_LIT><EOL><INDENT><!VAL_REASSIGNMENT!>(d as Any?).onNullableAnyVal<!> = <NUM_LIT><EOL><INDENT>(d as Any).<!UNRESOLVED_REFERENCE!>onDynamicVal<!> = <NUM_LIT><EOL>}"}
{"signature": "fun notifyAnalysisStarted() {", "body": "<EOL><INDENT><INDENT>analysisStart = PerformanceCounter.currentTime()<EOL><INDENT>}"}
{"signature": "val irFakeOverrides =", "body": "clazz.declarations.asSequence()<EOL>"}
{"signature": "val applicableTargetsWithoutUseSiteTarget =", "body": "applicableTargets.intersect(TARGET_PRIORITIES)<EOL>"}
{"signature": "val qualifiedExpressionText =", "body": "parts.joinToString(separator = <STR_LIT>)<EOL>"}
{"signature": "val union =", "body": "alloc<Packed>()<EOL>"}
{"signature": "fun testClassIsRemovedNonIC(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>doTestClassIsRemoved(gradleVersion, defaultBuildOptions)<EOL><INDENT>}"}
{"signature": "val runPlainBoxFunction =", "body": "RUN_PLAIN_BOX_FUNCTION in testServices.moduleStructure.allDirectives<EOL>"}
{"signature": "val resultingAnnotation =", "body": "findParameterNameAnnotation() ?: return null<EOL>"}
{"signature": "val descriptorToLibrary =", "body": "mutableMapOf<ModuleDescriptor, KotlinLibrary>()<EOL>"}
{"signature": "fun visitAnonymousObject(anonymousObject: FirAnonymousObject) {", "body": "<EOL><INDENT><INDENT>visitElement(anonymousObject)<EOL><INDENT>}"}
{"signature": "if (descriptor !is PackageFragmentDescriptor && !DescriptorUtils.isTopLevelDeclaration(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJs.NESTED_JS_EXPORT.on(jsExportPsi))<EOL><INDENT><INDENT>}"}
{"signature": "fun Leaf() {", "body": "}"}
{"signature": "val AT_LEAST_ONCE_KIND =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val functionCandidate =", "body": "candidates.firstOrNull { firElementByPsiElementChooser.isMatchingCallableDeclaration(declaration, it.fir) }<EOL>"}
{"signature": "val hasImplicitNothing =", "body": "inferredReturnType.isNothingOrNullableNothing()<EOL>"}
{"signature": "if (useStaticGetters) {", "body": "<EOL><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val expectedTypeProjectionForLHS =", "body": "expectedType.arguments.first()<EOL>"}
{"signature": "fun test<NUM_LIT>(i: <!WRONG_ANNOTATION_TARGET_WITH_USE_SITE_TARGET_ON_TYPE!>@setparam:Suppress<!> Int) {", "body": "}<EOL>fun test<NUM_LIT>(i: <!WRONG_ANNOTATION_TARGET_WITH_USE_SITE_TARGET_ON_TYPE!>@param:Suppress<!> Int) {}"}
{"signature": "if (<!SENSELESS_COMPARISON!>x != null<!>) {", "body": "}"}
{"signature": "for (i in (logged(<STR_LIT>, <NUM_LIT>) downTo logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "for (diagnostic in descriptor.diagnostics) {", "body": "<EOL><INDENT><INDENT><INDENT>if (hasExplicitDefinitionOnlyOption(diagnostic))<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><EOL><INDENT><INDENT><INDENT>callbacks.unexpectedDiagnostic(TextDiagnostic.asTextDiagnostic(diagnostic), descriptor.start, descriptor.end)<EOL><INDENT><INDENT>}"}
{"signature": "fun setStartTime(value: Long) {", "body": "<EOL><INDENT><INDENT>startTimeNs = value<EOL><INDENT>}"}
{"signature": "val psiSourceElement =", "body": "element.unwrapToKtPsiSourceElement()<EOL>"}
{"signature": "val taskInputs =", "body": "MetadataDependencyTransformationTaskInputs(project, kotlinSourceSet)<EOL>"}
{"signature": "var completionText =", "body": "<STR_LIT><EOL>"}
{"signature": "when (javaFilesChanges) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ChangesEither.Known -> javaFilesChanges.lookupSymbols<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ChangesEither.Unknown -> return CompilationMode.Rebuild(javaFilesChanges.reason)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (<STR_LIT> !in project.multiplatformExtension.sourceSets.names) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val anotherText =", "body": "SimpleWithPureProperty.text<EOL>"}
{"signature": "val possibleTryCatchBlockStart =", "body": "suspension.tryCatchBlocksContinuationLabel<EOL>"}
{"signature": "val REF_ELEMENT_FIELD =", "body": "<STR_LIT><EOL>"}
{"signature": "val appendToInitalizersTail =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "if (alreadyDelegated != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (classOrObject is KtClassOrObject)<INDENT><INDENT><INDENT><INDENT> trace.report(MANY_IMPL_MEMBER_NOT_IMPLEMENTED.on(classOrObject, classOrObject, alreadyDelegated))<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (!isComputingDeferredType(type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(type.constructor.declarationDescriptor as? ClassDescriptor)?.let(::consider)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!CompileTimeConstantUtils.canBeReducedToBooleanConstant(condition, trace.bindingContext, true)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.jumpOnTrue(loopInfo.entryPoint, expression, builder.getBoundValue(expression.condition))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val enumEntrySource =", "body": "toFirSourceElement(KtFakeSourceElementKind.EnumInitializer)<EOL>"}
{"signature": "val longArray =", "body": "ulongArray.toLongArray()<EOL>"}
{"signature": "if (trueWhenString(x) || trueWhenInt(x)) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>inc<!>()<EOL><INDENT>}"}
{"signature": "val applyAbiChange =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val javacOptionsActions =", "body": "<EOL><INDENT><INDENT>mutableListOf<(KaptJavacOption) -> Unit>()<EOL>"}
{"signature": "val hasAnyUnstableParams =", "body": "unstableMask.any { it }<EOL>"}
{"signature": "if (isNative() && hasSpreadOperator()) {", "body": "<EOL><INDENT><INDENT><INDENT>return nativeSpreadFunWithDispatchOrExtensionReceiver(argumentsInfo, functionName)<EOL><INDENT><INDENT>}"}
{"signature": "for ((key, value) in c.declaredClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>checkOverridesInAClass(value, key)<EOL><INDENT><INDENT>}"}
{"signature": "val flowFromRight =", "body": "rightOperandNode.getFlow(path)<EOL>"}
{"signature": "package MultipleInterfaceInheritanceWithSameJsNameClash<EOL>.", "body": ""}
{"signature": "if (shouldProcess) {", "body": "<EOL><INDENT><INDENT><INDENT>testingLogger?.markedAsDirtyBeforeRound(listOf(file))<EOL><INDENT><INDENT>}"}
{"signature": "val jvmMainDependencies =", "body": "targetsDependencies[<STR_LIT>]?.asSourceSetDependenciesBlock(<STR_LIT>)<EOL>"}
{"signature": "fun passProcessArgvToMainFunction() {", "body": "<EOL><INDENT><INDENT>target.passAsArgumentToMainFunction(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (name != JvmProtoBufUtil.DEFAULT_MODULE_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>proto.setExtension(JvmProtoBuf.packageModuleName, c[name])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allCachedBitcodeDependencies =", "body": "CachedBitcodeDependenciesComputer().allDependencies<EOL>"}
{"signature": "if (satisfyPred) {", "body": "<EOL><INDENT><INDENT><INDENT>result = reduceFun(result, element)<EOL><INDENT><INDENT>}"}
{"signature": "if (c != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val containingClassModuleData =", "body": "classSymbol.moduleData<EOL>"}
{"signature": "val scriptArgs =", "body": "<EOL><INDENT><INDENT><INDENT>if (arguments.script) arguments.freeArgs.subList(<NUM_LIT>, arguments.freeArgs.size)<EOL>"}
{"signature": "val nextChunkRef =", "body": "unsafe.getInt(chunk)<EOL>"}
{"signature": "val setD =", "body": "HashSet<Holder<Dat>>()<EOL>"}
{"signature": "for (i in <NUM_LIT>u.toUShort() until MinUS step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val creationTraceMap =", "body": "ContainerUtil.createConcurrentWeakMap<MockComponentManager, Throwable>()<EOL>"}
{"signature": "val propertySource =", "body": "toFirSourceElement()<EOL>"}
{"signature": "var data =", "body": "Data(<NUM_LIT>)<EOL>"}
{"signature": "val finderFactory =", "body": "CliVirtualFileFinderFactory(rootsIndex, false)<EOL>"}
{"signature": "val hasMax =", "body": "b.readVarUInt<NUM_LIT>()<EOL>"}
{"signature": "val preferParamsToExpressions =", "body": "lexer.tokenType == KtTokens.COMMA || lexer.tokenType == KtTokens.COLON<EOL>"}
{"signature": "else if (finalResult == OverrideCompatibilityInfo.Result.CONFLICT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>iterator.remove()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val numCores =", "body": "Runtime.getRuntime().availableProcessors()<EOL>"}
{"signature": "if (value !== UNINITIALIZED_VALUE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return value as T<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var cursor =", "body": "irFunction.parentAsClass.parent<EOL>"}
{"signature": "if (id.packageName != null && resolve(id.packageName + <STR_LIT>) == null) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "if (entryName.endsWith(KotlinJavascriptMetadataUtils.JS_MAP_EXT)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val correspondingJsPath = entryName.removeSuffix(KotlinJavascriptMetadataUtils.JS_MAP_EXT) +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  KotlinJavascriptMetadataUtils.JS_EXT<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>possibleMapFiles[correspondingJsPath] = entry<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (unit !in interpreter.unspillableUnitValues && unit !in suspensionPoints) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>toDelete += unit<EOL><INDENT><INDENT><INDENT><INDENT>toDelete += uses<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var listPhases =", "body": "false<EOL>"}
{"signature": "fun call(x: (notMe: @ParameterName(<STR_LIT>) Int, meNeither: @ParameterName(<STR_LIT>) String) -> Unit) {", "body": "<EOL><INDENT><expr>x(<NUM_LIT>, <STR_LIT>)</expr><EOL>}"}
{"signature": "if (!processedRoots.contains(rootElement)) {", "body": "<EOL><INDENT><INDENT><INDENT>val visitor = PrecomputingVisitor(storage, BindingContextSuppressCache(context))<EOL><INDENT><INDENT><INDENT>rootElement.accept(visitor, null)<EOL><INDENT><INDENT><INDENT>processedRoots.add(rootElement)<EOL><INDENT><INDENT>}"}
{"signature": "val initSelector =", "body": "it.getAnnotationStringValue(<STR_LIT>)<EOL>"}
{"signature": "if (b || true) {", "body": "<EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "val getContinuationSymbol =", "body": "context.ir.symbols.getContinuation<EOL>"}
{"signature": "import p<NUM_LIT>bar<EOL>.", "body": ""}
{"signature": "fun foo(param: String) {", "body": "<EOL><INDENT>}"}
{"signature": "val configurables =", "body": "configurables<EOL>"}
{"signature": "val conditionVariable =", "body": "getVariableIfStable(flow, loop.condition) ?: return@mergeIncomingFlow<EOL>"}
{"signature": "val SKIP_METADATA_VERSION_CHECK =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this@KtLightAnnotationForSourceEntry.kotlinOrigin.valueArguments.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@lazyPub emptyArray()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val halfMax =", "body": "(<NUM_LIT> shl <NUM_LIT>) + <NUM_LIT><EOL>"}
{"signature": "if (varargParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val varargParameterTypeRef = varargParameter.returnTypeRef<EOL><INDENT><INDENT><INDENT>val resolvedArrayType = varargParameterTypeRef.substitute(this)<EOL><INDENT><INDENT><INDENT>val argumentMappingWithAllArgs =<EOL><INDENT><INDENT><INDENT><INDENT>remapArgumentsWithVararg(varargParameter, resolvedArrayType, argumentMapping, argumentList)<EOL><INDENT><INDENT><INDENT>this.argumentMapping = argumentMappingWithAllArgs.filterValuesNotNull()<EOL><INDENT><INDENT><INDENT>argumentMappingWithAllArgs<EOL><INDENT><INDENT>}"}
{"signature": "val causes =", "body": "assertFails { project.evaluate() }.withLinearClosure { it.cause }<EOL>"}
{"signature": "fun include(f: Family, primitives: Collection<Pair<PrimitiveType, PrimitiveType>>) {", "body": "<EOL><INDENT><INDENT>familyPrimitives[f] = primitives.toSet()<EOL><INDENT>}"}
{"signature": "when (classpathSourceDirName) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> granularity.first<EOL><INDENT><INDENT><INDENT><STR_LIT> -> granularity.second<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (body.statements.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> (body.statements[<NUM_LIT>] as? IrReturn)?.value?.type?.isUnit() == true<EOL><INDENT><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val srcIsDirectory =", "body": "src.isDirectory(*options)<EOL>"}
{"signature": "val includes =", "body": "arguments.includes?.toList().orEmpty()<EOL>"}
{"signature": "val thirdActionExecuted =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "val prototypeNode =", "body": "context.extractNode(arg) ?: return<EOL>"}
{"signature": "for (descriptor in descriptors) {", "body": "<EOL><INDENT><INDENT><INDENT>val substitute = substitute(descriptor)<EOL><INDENT><INDENT><INDENT>result.add(substitute)<EOL><INDENT><INDENT>}"}
{"signature": "val MinUI =", "body": "UInt.MIN_VALUE<EOL>"}
{"signature": "if (function.name.isSpecial) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val accessorName = if (function.isGetter) JvmAbi.getterName(propertyName) else JvmAbi.setterName(propertyName)<EOL><INDENT><INDENT><INDENT><INDENT>return mangleMemberNameIfRequired(accessorName, function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DUMP_MEMORY =", "body": "System.getProperty(<STR_LIT>, <STR_LIT>).toBooleanLenient()!!<EOL>"}
{"signature": "val functionParameterStub =", "body": "FunctionParameterStub(parameterName, type, annotations)<EOL>"}
{"signature": "if (isRepeatableGetter()) {", "body": "<EOL><INDENT><INDENT><INDENT>PureExpression(this)<EOL><INDENT><INDENT>}"}
{"signature": "fun fromClass(name: Name) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "if (options.debug) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (fileSymbol in fileSymbols) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>loadFieldsFromFile(fileSymbol.getFileScope(), nameGenerator, result)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testY() {", "body": "<EOL><INDENT>val interface_as_fun = Y.<!RESOLUTION_TO_CLASSIFIER!>A<!>()<EOL><INDENT>val interface_as_val = Y.<!NO_COMPANION_OBJECT!>A<!><EOL><EOL><INDENT>val object_as_fun = Y.<!FUNCTION_EXPECTED!>B<!>()<EOL><INDENT>val class_as_val = Y.<!NO_COMPANION_OBJECT!>C<!><EOL>}"}
{"signature": "fun buildRefTestStatic(toType: WasmSymbolReadOnly<WasmTypeDeclaration>, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.REF_TEST, location, WasmImmediate.HeapType(WasmHeapType.Type(toType)))<EOL><INDENT>}"}
{"signature": "if (!project.kotlinPropertiesProvider.suppressExperimentalArtifactsDslWarning) {", "body": "<EOL><INDENT><INDENT><INDENT>project.reportDiagnosticOncePerProject(KotlinToolingDiagnostics.ExperimentalArtifactsDslUsed())<EOL><INDENT><INDENT>}"}
{"signature": "val firstCondition =", "body": "callToLabels[<NUM_LIT>].call<EOL>"}
{"signature": "if (!(superClass.isExpect || (superClass.module == currentModule && !superClass.isFromCommonSource))) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.SEALED_INHERITOR_IN_DIFFERENT_MODULE.on(typeReference))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (anonymousInitializer.body is FirLazyBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>val designation = FirDesignation(data, anonymousInitializer)<EOL><INDENT><INDENT><INDENT>calculateLazyBodyForAnonymousInitializer(designation)<EOL><INDENT><INDENT>}"}
{"signature": "val operatorGenerator =", "body": "OperatorExpressionGenerator(c, this, conversionScope)<EOL>"}
{"signature": "fun foo(a: String, b: Int)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>call.diagnostics.mapNotNullTo(this) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (it !is NoValueForParameter) return@mapNotNullTo null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it.valueParameter.toTypeWithConversion(session, call)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val trueClause =", "body": "ConditionalEffect(effect.condition, ESReturns(ESConstants.booleanValue(isNegated.not())))<EOL>"}
{"signature": "if (deprecated == null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(deprecatedSinceKotlin.source, FirErrors.DEPRECATED_SINCE_KOTLIN_WITHOUT_DEPRECATED, context)<EOL><INDENT><INDENT>}"}
{"signature": "val PACKAGE_TYPE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val superTypeSymbol =", "body": "superTypeRef.type.toRegularClassSymbol(session)<EOL>"}
{"signature": "val refinedType =", "body": "callData.type<EOL>"}
{"signature": "if ((x as? B)?.cond == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>x.foo()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (extensionRegistrar in extensionRegistrars) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>registerExtensions(extensionRegistrar.configure())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (parameterPosition > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return super.referenceValueParameter(fi.methodDescriptor.valueParameters[parameterPosition])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DeprecatedSinceKotlin =", "body": "<STR_LIT>.baseId()<EOL>"}
{"signature": "val localReturnsNormalizer =", "body": "LocalReturnsNormalizer()<EOL>"}
{"signature": "fun testFlagInMapDoesNotAppearsIfPresent() {", "body": "<EOL><INDENT><INDENT>val options = makeExternalDependenciesResolverOptions(emptyMap())<EOL><INDENT><INDENT>assertNull(options.flag(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val embeddedProject =", "body": "Project(<STR_LIT>, directoryPrefix = <STR_LIT>)<EOL>"}
{"signature": "if (this < '\\u<NUM_LIT>df') {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "val isAnyMethod =", "body": "callee.target.parentAsClass.isAny()<EOL>"}
{"signature": "val firResolveSession =", "body": "analysisSession.firResolveSession<EOL>"}
{"signature": "while (leftIterator.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>add(leftIterator.next() to rightDefault())<EOL><INDENT><INDENT>}"}
{"signature": "val ubytes<NUM_LIT> =", "body": "subject.nextUBytes(UByteArray(size))<EOL>"}
{"signature": "val convertedFiles =", "body": "getJavaFiles(info)<EOL>"}
{"signature": "val additionalLabelName =", "body": "type?.labelName(holder.session)<EOL>"}
{"signature": "val benchmarkReport =", "body": "JsonTreeParser.parse(execBenchmarkOnce(benchmark, <NUM_LIT>, <NUM_LIT>)).jsonObject<EOL>"}
{"signature": "fun printBoolean(v: Boolean) {", "body": "<EOL><INDENT>println(v)<EOL>}"}
{"signature": "val innerNestedLast =", "body": "B<EOL>"}
{"signature": "if (mapper.isObjCProperty(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>propertiesBuffer += it<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val whenExpr =", "body": "this.statements[<NUM_LIT>] as? IrWhen ?: return null<EOL>"}
{"signature": "fun setValue(thisRef: Any?, desc: KProperty<*>, svalue : T) {", "body": "<EOL><INDENT><INDENT>value = svalue<EOL><INDENT>}"}
{"signature": "for ((key, value) in setupFile.properties) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, properties[key])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (modality === Modality.ABSTRACT || modality === Modality.SEALED) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return Opcodes.ACC_ABSTRACT<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is PsiModifierListOwner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.modifierList?.accept(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!DescriptorBasedFunctionHandleForJvm(overridden, state).isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>commonBridges.removeAll(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>findAllReachableDeclarations(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overridden,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>state<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>).map(signatureByDescriptor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val unresolvedSimpleNames =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val directSuperTypes =", "body": "expectedType.getDirectSuperTypes()<EOL>"}
{"signature": "val shouldNotMemoize =", "body": "x::qux<EOL>"}
{"signature": "val declarationAnchor =", "body": "if (this is KtPropertyAccessor) property else this<EOL>"}
{"signature": "for ((i, arg) in expression.arguments.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>arg.accept(this, i.toString())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun checkTypeAliasExpansion(declaration: KtTypeAlias, typeAliasDescriptor: TypeAliasDescriptor) {", "body": "<EOL><INDENT><INDENT>val typeAliasExpansion = TypeAliasExpansion.createWithFormalArguments(typeAliasDescriptor)<EOL><INDENT><INDENT>val reportStrategy = TypeAliasDeclarationCheckingReportStrategy(trace, typeAliasDescriptor, declaration, upperBoundChecker)<EOL><INDENT><INDENT>TypeAliasExpander(reportStrategy, true).expandWithoutAbbreviation(typeAliasExpansion, TypeAttributes.Empty)<EOL><INDENT>}"}
{"signature": "import First<EOL>.", "body": ""}
{"signature": "val remapValue =", "body": "remapper.remap(parameters.argsSizeOnStack + <NUM_LIT>).value<EOL>"}
{"signature": "fun addSignedPossibleTypes() {", "body": "<EOL><INDENT><INDENT><INDENT>checkBoundsAndAddPossibleType(value, builtIns.intType)<EOL><INDENT><INDENT><INDENT>possibleTypes.add(builtIns.longType)<EOL><INDENT><INDENT><INDENT>checkBoundsAndAddPossibleType(value, builtIns.byteType)<EOL><INDENT><INDENT><INDENT>checkBoundsAndAddPossibleType(value, builtIns.shortType)<EOL><INDENT><INDENT>}"}
{"signature": "if (superType.isAny) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val componentTypeProjection =", "body": "type.arguments[<NUM_LIT>]<EOL>"}
{"signature": "if (x is A) {", "body": "<EOL><INDENT><INDENT>val k = x.foo()<EOL><INDENT><INDENT>if (k != <STR_LIT>) return <STR_LIT><EOL><INDENT>}"}
{"signature": "val expanded =", "body": "actualSymbol.expandToRegularClass() ?: return null<EOL>"}
{"signature": "val filteredExceptions =", "body": "failedAssertions.filterNot { it.cause is FirLazyResolveContractViolationException }<EOL>"}
{"signature": "if (outputFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertions.assertEqualsToFile(outputFile, result)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (child.stubType) {", "body": "<EOL><INDENT><INDENT><INDENT>KtNodeTypes.ANNOTATION_ENTRY -> listOf(child.psi as KtAnnotationEntry)<EOL><INDENT><INDENT><INDENT>KtNodeTypes.ANNOTATION -> (child.psi as KtAnnotation).entries<EOL><INDENT><INDENT><INDENT>else -> emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val serializableSerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelReadSerializable, symbols.parcelWriteSerializable)<EOL>"}
{"signature": "val fragmentEndLine =", "body": "fragmentStartLine + fragmentText.count { it == '\\n' }<EOL>"}
{"signature": "val myProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (psi is LeafPsiElement && psi.elementType == KtTokens.IDENTIFIER) {", "body": "<EOL><INDENT><INDENT><INDENT>psi.chars<EOL><INDENT><INDENT>}"}
{"signature": "if (containingKtFile.isCompiled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val irSamConvertedVarInitializer =", "body": "createSamConvertedVarInitializer(irIndexVar, mostSpecificSamConversion)<EOL>"}
{"signature": "import has no receiver for receiver kdoc declaration:<EOL>.", "body": ""}
{"signature": "val expressionProto =", "body": "proto.expression<EOL>"}
{"signature": "val lowSixBits =", "body": "oldFlags and <NUM_LIT>x<NUM_LIT>f<EOL>"}
{"signature": "when(stub) {", "body": "<EOL><INDENT><INDENT><INDENT>is ClassStub -> classes += stub<EOL><INDENT><INDENT><INDENT>is FunctionStub -> functions += stub<EOL><INDENT><INDENT><INDENT>is PropertyStub -> globals += stub<EOL><INDENT><INDENT><INDENT>is TypealiasStub -> typealiases += stub<EOL><INDENT><INDENT><INDENT>is SimpleStubContainer -> containers += stub<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun consumeAny(value: Any) {", "body": "}<EOL><EOL>fun consumeDifferentType(value: DifferentType) {}"}
{"signature": "val typeText =", "body": "TypeInfo.createTypeText(typeInfo) ?: return PsiType.NULL<EOL>"}
{"signature": "val extraLength =", "body": "getUnsignedShort(currentOffset + <NUM_LIT>)<EOL>"}
{"signature": "if (irStatement !is IrErrorCallExpression && irStatement is IrExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>statements[i] = coerceToUnitIfNeeded(irStatement, irBuiltIns)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var hasError =", "body": "false<EOL>"}
{"signature": "val BOOL_OR =", "body": "<!EVALUATED(<STR_LIT>)!>false && BOOL<!><EOL>"}
{"signature": "val F<NUM_LIT>_NEG =", "body": "<STR_LIT><EOL>"}
{"signature": "var hasReturnWithoutExpression =", "body": "false<EOL>"}
{"signature": "val NODEFAULTLIBS_DEPRECATED =", "body": "<STR_LIT><EOL>"}
{"signature": "fun fields() {", "body": "<EOL><INDENT>val foo = Foo()<EOL><INDENT>foo.more()<EOL><INDENT>sb.appendLine(foo.i)<EOL><INDENT>foo.less()<EOL><INDENT>sb.appendLine(foo.i)<EOL>}"}
{"signature": "val argumentDependent =", "body": "arguments.map { it.type.dependentDescriptors(types + this, RelationToType.ARGUMENT) }.flatten()<EOL>"}
{"signature": "val newFacades =", "body": "SmartSet.create<JvmClassName>()<EOL>"}
{"signature": "for (file in basedir.walkBottomUp().onEnter(::enter).onLeave(::leave)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>visit(file)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualFakeOverride =", "body": "createFakeOverrideMember(actualizedOverrides, parent as IrClass)<EOL>"}
{"signature": "if ((a<NUM_LIT>?.i() != <NUM_LIT>) || (a<NUM_LIT>?.c != <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val originalTrimmed =", "body": "originalLines.getOrNull(index)?.trim()<EOL>"}
{"signature": "val systemModules =", "body": "systemModules.associateBy(JavaModule::name)<EOL>"}
{"signature": "if (needToReinstall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>project.logger.debug(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor.kind == ClassKind.CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>hasObjCClassSupertype = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package array_test<EOL>.", "body": ""}
{"signature": "import src.", "body": "srcAndTests<EOL>"}
{"signature": "val dependencyKlibFile =", "body": "compileOneFile(dependencySource)<EOL>"}
{"signature": "val protocolGetter =", "body": "annotationStub.protocolGetter.quoteAsKotlinLiteral()<EOL>"}
{"signature": "if (REQUIRES_SEPARATE_PROCESS !in module.directives && module.directives.singleOrZeroValue(JDK_KIND)?.requiresSeparateProcess != true) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val inheritedDefaults =", "body": "ancestor.elementParents<EOL>"}
{"signature": "val copiedParameter =", "body": "originalParameter.deepCopyWithSymbols(this)<EOL>"}
{"signature": "val GaugeSpecTmsIntegrationServiceId =", "body": "ServiceId(<STR_LIT>)<EOL>"}
{"signature": "val substitutedUnderlyingConstructor =", "body": "underlyingConstructorDescriptor.original.substitute(underlyingConstructorSubstitutor)<EOL>"}
{"signature": "val extrasKey =", "body": "extrasKeyOf<AndroidKotlinSourceSet>()<EOL>"}
{"signature": "if (classCallArgument is FirClassReferenceExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>val type = classCallArgument.classTypeRef.coneType.lowerBoundIfFlexible() as? ConeClassLikeType ?: return null<EOL><INDENT><INDENT><INDENT>return type.lookupTag.classId<EOL><INDENT><INDENT>}"}
{"signature": "fun null<NUM_LIT>Float(x: Float?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "val localProperty =", "body": "Obj.explicitType()<EOL>"}
{"signature": "val scriptingEvaluator =", "body": "ScriptEvaluationExtension.getInstances(projectEnvironment.project).find { it.isAccepted(arguments) }<EOL>"}
{"signature": "fun generateMethod(debugString: String, access: Int, method: Method, generate: InstructionAdapter.() -> Unit) {", "body": "<EOL><INDENT><INDENT>v.generateMethod(debugString, access, method, element, JvmDeclarationOrigin.NO_ORIGIN, state, generate)<EOL><INDENT>}"}
{"signature": "if (qualifiedName == null && renderedAttributesString.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val dumpedModules =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun visitExternalPackageFragment(declaration: IrExternalPackageFragment) {", "body": "<EOL><INDENT><INDENT>visitPackageFragment(declaration)<EOL><INDENT>}"}
{"signature": "val identifiers =", "body": "arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (classId !in data.state.classifierMap) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.state.classifierMap[classId] = classLike<EOL><INDENT><INDENT><INDENT><INDENT>data.state.classifierContainerFileMap[classId] = data.file<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (typeParameter in descriptor.declaredTypeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeParameter.checkJsInteropTypeParameter()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(lambda: Function<Int, Int>?) {", "body": "}"}
{"signature": "if (checkResult != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return CheckResult.IllegalSignature(checkResult)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var devirtualizedCallSitesCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (parent is KtFile) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "when (val typeArgument = getSubstitutionArgument(classifier)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is IrStarProjection -> typeArgument<EOL><INDENT><INDENT><INDENT><INDENT>is IrTypeProjection -> makeTypeProjection(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeArgument.type.mergeNullability(irType).addAnnotations(irType.annotations),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeArgument.variance,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (project.isIntransitiveMetadataConfigurationEnabled) {", "body": "<EOL><INDENT><INDENT>intransitiveMetadataConfigurationName<EOL><INDENT>}"}
{"signature": "val annotationProcessorClasspathEntries=", "body": "cacheDir.resolve(ANNOTATION_PROCESSOR_CLASSPATH_ENTRIES_FILE)<EOL>"}
{"signature": "var yy =", "body": "y<EOL>"}
{"signature": "val Default =", "body": "TypeAttributeTranslators(listOf(DefaultTypeAttributeTranslator))<EOL>"}
{"signature": "val innerThisProp =", "body": "this@Outer.property<EOL>"}
{"signature": "val intFloorByte =", "body": "byte.floorDiv(byte)<EOL>"}
{"signature": "if (!distNode.types[type.index] && !visited[distNode.id]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>distNode.types.set(type.index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>visited.set(distNode.id)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>stack.push(distNode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val returnStatement =", "body": "IrReturnImpl(<NUM_LIT>, <NUM_LIT>, irBuiltIns.nothingType, function.symbol, const)<EOL>"}
{"signature": "if (expectModality != Modality.FINAL) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>compare == <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "for (snippet in snippets) {", "body": "<EOL><INDENT><INDENT><INDENT>val res = host.compile(snippet)<EOL><INDENT><INDENT><INDENT>assertTrue(res is ResultWithDiagnostics.Success)<EOL><INDENT><INDENT>}"}
{"signature": "val maxArity =", "body": "<NUM_LIT>"}
{"signature": "fun assertKotlinSourceSetNameEquals(<EOL><INDENT><INDENT><INDENT>androidSourceSetName: String, kotlinSourceSetName: String<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val androidSourceSet = android.sourceSets.getByName(androidSourceSetName)<EOL><INDENT><INDENT><INDENT>val kotlinSourceSet = project.getKotlinSourceSetOrFail(androidSourceSet)<EOL><INDENT><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT><INDENT>kotlinSourceSetName, kotlinSourceSet.name,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun testSList(sl: SList) {", "body": "<EOL><INDENT>if (sl.ss[<NUM_LIT>] != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val objCDirectClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val allFragments =", "body": "(classifierFragments + callableFragments).toList()<EOL>"}
{"signature": "if (b.p) {", "body": "<EOL><INDENT><INDENT>b.o() + b.k()<EOL><INDENT>}"}
{"signature": "for (diagnostic in currentExpected.getDiagnostics()) {", "body": "<EOL><INDENT><INDENT><INDENT>callbacks.missingDiagnostic(diagnostic, currentExpected.start, currentExpected.end)<EOL><INDENT><INDENT>}"}
{"signature": "val superTypeList =", "body": "classOrObject.getSuperTypeList()<EOL>"}
{"signature": "val moduleBindings =", "body": "HashMap<TestModule?, BindingContext>()<EOL>"}
{"signature": "if ($FLOAT > <NUM_LIT>) {", "body": "return <STR_LIT>; }"}
{"signature": "import paths.", "body": "<EOL>"}
{"signature": "fun outputIfNotEnabled(phaseConfig: PhaseConfigurationService, phaserState: PhaserState<Any>, context: PhaseContext, input: Any) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (key != MODULE_MAPPING_FILE_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>changesCollector.collectProtoChanges(oldData = oldValue.toProtoData(className.packageFqName), newData = null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val UNRESOLVED =", "body": "QualifiedExpressionResolveResult(null, null)<EOL>"}
{"signature": "fun booOpen(y: Int) {", "body": "<EOL><INDENT><INDENT>booOpen(y)<EOL><INDENT>}"}
{"signature": "val sectionsPath =", "body": "setOf(*test.mainLink.sections.toTypedArray(), test.mainLink.paragraphNumber).joinToString()<EOL>"}
{"signature": "val variableInstance =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>root.createInstanceFromBox(scope, typeArguments, scope.irGet(asVariable), accessType, saveVariable)<EOL>"}
{"signature": "var maxResult =", "body": "CompileTimeResult(<STR_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "package abitestutils<EOL>.", "body": ""}
{"signature": "val konanPackage =", "body": "context.builtIns.builtInsModule.getPackage(FQ_NAME_KONAN).memberScope<EOL>"}
{"signature": "val subprojectPodspecTask =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testMapToMutableMapEntriesContainsMapEntry() {", "body": "<EOL><INDENT><INDENT>testMapEntriesContainsMapEntry(mapOfLetterToIndex.toMutableMap(), <STR_LIT>, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val changedPaths =", "body": "commonPaths<EOL>"}
{"signature": "when (rangeType) {", "body": "<EOL><INDENT><INDENT><INDENT>RangeType.INT -> translateAsIntRangeCheck(lower, upper, rangeKind, subject)<EOL><INDENT><INDENT><INDENT>RangeType.LONG -> translateAsLongRangeCheck(lower, upper, rangeKind, subject)<EOL><INDENT><INDENT>}"}
{"signature": "if (type is CapturedType) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.badDescription(<STR_LIT>, typeReference)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (!fromConstructor && (decl.hasBackingField || decl.delegateFieldSymbol != null)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(decl.source, FirJvmErrors.FIELD_IN_JVM_RECORD, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (superClass in psiClass.interfaces) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processClass(superClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val visibleSourceSetNames =", "body": "visiblePlatformVariantNames<EOL>"}
{"signature": "fun clearCacheForApproximationResults() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>typeApproximator.clearCache()<EOL><INDENT>}"}
{"signature": "if (ownData.unreadWrites.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>ownData.writesByNode = data.graph.traverseToFixedPoint(FindVisibleWrites(data.properties))<EOL><INDENT><INDENT>}"}
{"signature": "val continueState =", "body": "SuspendState(unit)<EOL>"}
{"signature": "val nonConstructorContext =", "body": "context.withUsageTrackerIfNecessary(descriptor)<EOL>"}
{"signature": "val erased =", "body": "erase(type) ?: return null<EOL>"}
{"signature": "val fromExpansion =", "body": "from.expandedType()<EOL>"}
{"signature": "if (!specificClassId.isUnsigned && generalClassId.isUnsigned) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun usage(foo: Foo, action: Foo.() -> Unit) {", "body": "<EOL><INDENT>foo.acti<caret>on()<EOL>}"}
{"signature": "fun newMethod(exceptions: JvmMethodExceptionTypes) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun check(declaration: FirRegularClass, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!declaration.isExpect) return<EOL><INDENT><INDENT><INDENT>super.check(declaration, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitTypeAliasDescriptor(descriptor: TypeAliasDescriptor, data: Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>extractSignatureFromDeclaration(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (functionDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return getFunctionTypeForAbstractMethod(functionDescriptor, false).toKtType(analysisContext)<EOL><INDENT><INDENT>}"}
{"signature": "var reader =", "body": "StringReader(<STR_LIT>).buffered()<EOL>"}
{"signature": "val interopCValuesRef =", "body": "interopClass(InteropFqNames.cValuesRefName)<EOL>"}
{"signature": "fun createAndAddView() {", "body": "<EOL><EOL><INDENT><INDENT>val container = activityTestRule.activity.findViewById<ViewGroup>(android.R.id.content)<EOL><INDENT><INDENT>val testView = TestView(activityTestRule.activity)<EOL><EOL><INDENT><INDENT>container.addView(testView)<EOL><EOL><INDENT>}"}
{"signature": "fun completeExpression(resolvedAtom: ResolvedExpressionAtom) {", "body": "<EOL><INDENT><INDENT>val argumentExpression = resolvedAtom.atom.psiExpression<EOL><INDENT><INDENT>val inferenceSession = topLevelCallContext.inferenceSession<EOL><EOL><INDENT><INDENT>if (argumentExpression !is KtBlockExpression || inferenceSession !is BuilderInferenceSession) return<EOL><EOL><INDENT><INDENT>val callableReference = argumentExpression.statements.lastOrNull() as? KtCallableReferenceExpression ?: return<EOL><EOL><INDENT><INDENT>inferenceSession.completeDoubleColonExpression(callableReference, inferenceSession.getNotFixedToInferredTypesSubstitutor())<EOL><INDENT>}"}
{"signature": "if (fullPath.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>currentStatements += updateFinallyPath(fullPath.drop(<NUM_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val multiFieldValueClassRepresentation =", "body": "parentAsClass.multiFieldValueClassRepresentation<EOL>"}
{"signature": "val KOTLIN_SUSPEND_BUILT_IN_FUNCTION_FQ_NAME_CALLABLE_ID =", "body": "CallableId(StandardNames.BUILT_INS_PACKAGE_FQ_NAME, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (condition.isTrueConstant()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>caseCount++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cases += SwitchBranchData.SwitchDefaultData(branch.result)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>break@l<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (((hx - <NUM_LIT>x<NUM_LIT>ff<NUM_LIT>) or __LO(x)) == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT><INDENT><INDENT><INDENT><EOL><INDENT>}"}
{"signature": "val checkedResult =", "body": "checkBinaryOp(name, receiverType, toBigInteger(receiverValue), parameterType, toBigInteger(parameterValue))<EOL>"}
{"signature": "val fieldInfo =", "body": "generationState.llvmDeclarations.forField(value)<EOL>"}
{"signature": "val toRename =", "body": "kotlinOrigin as? PsiNamedElement ?: cannotModify()<EOL>"}
{"signature": "val call =", "body": "node as? Call ?: (node as? ResolvedExpression)?.node as? Call ?: return<EOL>"}
{"signature": "val kaptClasspathConfiguration =", "body": "project.configurations.createResolvable(<STR_LIT>)<EOL>"}
{"signature": "if (isInPrimaryConstructor || topLevel && !startFromName) {", "body": "<EOL><INDENT><INDENT><INDENT>renderValVarPrefix(variable, builder, isInPrimaryConstructor)<EOL><INDENT><INDENT>}"}
{"signature": "if (abs(list_front_float(floats) - benachmarkSize.toFloat()) > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package base;<EOL>.", "body": ""}
{"signature": "val nativeHostTargetName =", "body": "MPPNativeTargets.current<EOL>"}
{"signature": "val textifier =", "body": "Textifier()<EOL>"}
{"signature": "if (instruction.calcSideEffectFree()) {", "body": "<EOL><INDENT><INDENT><INDENT>sideEffectFree.add(instruction)<EOL><INDENT><INDENT>}"}
{"signature": "if (returnTypeFromOriginalExpected?.isTypeParameter() != true) {", "body": "<EOL><INDENT><INDENT><INDENT>expectedFunctionExpressionReturnType[function.descriptor] = returnTypeFromExpected.toIrType()<EOL><INDENT><INDENT>}"}
{"signature": "val w<NUM_LIT>a =", "body": "W<NUM_LIT> { i, s -> i + s.length }"}
{"signature": "fun interpretSetValue(expression: IrSetValue) {", "body": "<EOL><INDENT><INDENT>callStack.rewriteState(expression.symbol, callStack.popState())<EOL><INDENT><INDENT>callStack.pushState(getUnitState())<EOL><INDENT>}"}
{"signature": "for (s in e.ss) {", "body": "<EOL><INDENT><INDENT>result += s<EOL><INDENT>}"}
{"signature": "fun testSamConversionOnAdapted() {", "body": "<EOL><INDENT>use(::foo<NUM_LIT>)<EOL>}"}
{"signature": "fun check(klass: KClass<*>, expectedName: String) {", "body": "<EOL><INDENT>assertEquals(expectedName, klass.simpleName)<EOL>}"}
{"signature": "if (targetMachineDelegate.isInitialized()) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMDisposeTargetMachine(targetMachine)<EOL><INDENT><INDENT>}"}
{"signature": "val methodEntryReq =", "body": "manager.createMethodEntryRequest()<EOL>"}
{"signature": "val innerCache =", "body": "ResolutionResultsCacheImpl()<EOL>"}
{"signature": "for (i in xs.indices) {", "body": "<EOL><INDENT><INDENT>if (i % <NUM_LIT> == <NUM_LIT>) continue<EOL><INDENT><INDENT>r += xs[i]<EOL><INDENT>}"}
{"signature": "fun charCategorySpaceSeparator() {", "body": "<EOL><INDENT><INDENT>val superscriptTwo = ' '<INDENT><INDENT> assertTrue(superscriptTwo.isWhitespace())<EOL><INDENT><INDENT>assertEquals(CharCategory.SPACE_SEPARATOR, superscriptTwo.category)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, CharCategory.SPACE_SEPARATOR.code)<EOL><INDENT>}"}
{"signature": "var wasmKClassFqn =", "body": "false<EOL>"}
{"signature": "if (initializerOrTypeReference != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>elementToComment[initializerOrTypeReference] = comment<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val irInterface =", "body": "symbols.functionN(bridge.numberOfParameters).owner<EOL>"}
{"signature": "val tailIndex =", "body": "index + insertSize<EOL>"}
{"signature": "val idOfB =", "body": "CirEntityId.create(<STR_LIT>)<EOL>"}
{"signature": "fun testKotlinProjectWithEmptyOutputDirInSomeModules() {", "body": "<EOL><INDENT><INDENT>doTest()<EOL><INDENT>}"}
{"signature": "val synchronizedAnnotation =", "body": "descriptor.findSynchronizedAnnotation()<EOL>"}
{"signature": "if (constructor.constructedClass.isExternalObjCClass() || constructor.constructedClass.isAny()) {", "body": "<EOL><INDENT><INDENT><INDENT>assert(args.isEmpty())<EOL><INDENT><INDENT><INDENT>return codegen.theUnitInstanceRef.llvm<EOL><INDENT><INDENT>}"}
{"signature": "val refWeak =", "body": "WeakReference(ref)<EOL>"}
{"signature": "val isK<NUM_LIT> =", "body": "System.getProperty(SCRIPT_BASE_COMPILER_ARGUMENTS_PROPERTY)?.contains(<STR_LIT>) != true &&<EOL>"}
{"signature": "if (descriptor is ConstructorDescriptor && kind != OwnerKind.ERASED_INLINE_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT>val method = mapSignatureSkipGeneric(descriptor.original)<EOL><INDENT><INDENT><INDENT>val owner = mapOwner(descriptor)<EOL><INDENT><INDENT><INDENT>val originalDescriptor = descriptor.original<EOL><INDENT><INDENT><INDENT>return CallableMethod(<EOL><INDENT><INDENT><INDENT><INDENT>owner, owner, mapDefaultCallback(originalDescriptor, OwnerKind.IMPLEMENTATION), method, INVOKESPECIAL,<EOL><INDENT><INDENT><INDENT><INDENT>null, null, null, null, null, originalDescriptor.returnType, isInterfaceMethod = false, isDefaultMethodInInterface = false,<EOL><INDENT><INDENT><INDENT><INDENT>boxInlineClassBeforeInvoke = false<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!thereIsStrongerConstraint) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>usefulConstraints.add(constraint)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (state<NUM_LIT>history.size > state<NUM_LIT>history.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>adjustHistories()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assert(state<NUM_LIT>history.size == state<NUM_LIT>history.size)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val REPORT_CSS =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "when (q<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>iq[jz - <NUM_LIT>] = iq[jz - <NUM_LIT>] and <NUM_LIT>x<NUM_LIT>fffff<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>iq[jz - <NUM_LIT>] = iq[jz - <NUM_LIT>] and <NUM_LIT>x<NUM_LIT>fffff<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val followingNodes =", "body": "delegatedConstructorCall.followingNodes.toList()<EOL>"}
{"signature": "if (visited.add(alias.id)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>queue.add(alias.id)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val importedScript =", "body": "File(TEST_DATA_DIR, <STR_LIT>)<EOL>"}
{"signature": "val exhaustive =", "body": "expression.branches.any { it.condition.isTrueConst() } && !expression.type.isUnit()<EOL>"}
{"signature": "val INVOKE_SUSPEND_METHOD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "var isCompleted =", "body": "false<EOL>"}
{"signature": "while (a) {", "body": "}"}
{"signature": "fun visitConditionalEffectDeclaration(conditionalEffect: KtConditionalEffectDeclaration<KotlinTypeBean, Nothing?>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>conditionalEffect.effect.accept(this, data)<EOL><INDENT><INDENT>buffer.append(<STR_LIT>)<EOL><INDENT><INDENT>conditionalEffect.condition.accept(this, data)<EOL><INDENT>}"}
{"signature": "if (stdlibDependency != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val depVersion = stdlibDependency.version ?: coreLibrariesVersion.get()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (!isAtLeast<NUM_LIT>_<NUM_LIT>_<NUM_LIT>(depVersion)) return@withDependencies<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinc =", "body": "Kotlin<NUM_LIT>JvmTask()<EOL>"}
{"signature": "val allInitMethodsInfo =", "body": "irClass.getSuperClassNotAny()!!.constructors<EOL>"}
{"signature": "val detectedStubTypesParents =", "body": "mutableSetOf<FirElement>()<EOL>"}
{"signature": "val toStringDouble<NUM_LIT> =", "body": "<NUM_LIT>.<!EVALUATED(<STR_LIT>)!>toString()<!><EOL>"}
{"signature": "fun testTrimIndent() {", "body": "<EOL><INDENT>js(<!JSCODE_ARGUMENT_SHOULD_BE_CONSTANT!><STR_LIT>\"<EOL><INDENT><INDENT>var x = <NUM_LIT>;<EOL><INDENT><STR_LIT>\".trimIndent()<!>)<EOL>}"}
{"signature": "if (!isValidJavaFqName(value)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJvm.JVM_PACKAGE_NAME_MUST_BE_VALID_NAME.on(entry))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitLabel(label: FirLabel, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitLabel(label)<EOL><INDENT>}"}
{"signature": "for (worker in bWorkers) {", "body": "<EOL><INDENT><INDENT>worker.requestTermination().result<EOL><INDENT>}"}
{"signature": "if (primaryConstructor.visibility == Visibilities.Public) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var isClassPattern =", "body": "false<EOL>"}
{"signature": "fun testWrapperEquality() {", "body": "<EOL><INDENT><INDENT>val we<NUM_LIT> = WrapperElement(<STR_LIT>)<EOL><INDENT><INDENT>val we<NUM_LIT> = WrapperElement(<STR_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>, we<NUM_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>, we<NUM_LIT>)<EOL><INDENT><INDENT>val we<NUM_LIT>we<NUM_LIT> = we<NUM_LIT> + we<NUM_LIT><EOL><INDENT><INDENT>checkContents(we<NUM_LIT>we<NUM_LIT>, we<NUM_LIT>, we<NUM_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>we<NUM_LIT>minusKey(WrapperKey(<STR_LIT>)), we<NUM_LIT>)<EOL><INDENT><INDENT>checkContents(we<NUM_LIT>we<NUM_LIT>minusKey(WrapperKey(<STR_LIT>)), we<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val isSuspendLambda =", "body": "transformingFunction.parent === coroutineClass<EOL>"}
{"signature": "if (isLocal && parentClassOrNull?.origin != JvmLoweredDeclarationOrigin.LAMBDA_IMPL) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun jsArrayPush(array: ExternalInterfaceType, element: ExternalInterfaceType) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "for ((nested, outer) in localClassesNavigationInfo.parentForClass) {", "body": "<EOL><INDENT><INDENT>if (outer == null) continue<EOL><INDENT><INDENT>components.context.outerLocalClassForNested[nested.symbol] = outer.symbol<EOL><INDENT>}"}
{"signature": "val JVM_DEFAULT_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val KAPT_SUBPLUGIN_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "val exportedInner =", "body": "exportedParent.Inner(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val test_sa =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s === a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a === s<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>s !== a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a !== s<!><EOL>"}
{"signature": "val testRun =", "body": "createTestRun(testRunName, testName = null)<EOL>"}
{"signature": "val fullTestPath =", "body": "<STR_LIT> + directory?.let { <STR_LIT> }.orEmpty()<EOL>"}
{"signature": "val scopeCompare =", "body": "scope.compareTo(other.scope)<EOL>"}
{"signature": "val definitionSources =", "body": "compilerConfiguration.getList(ScriptingConfigurationKeys.SCRIPT_DEFINITIONS_SOURCES)<EOL>"}
{"signature": "if (isElse) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val inlineEncoder =", "body": "irTemporary(encodeInlineCall, nameHint = <STR_LIT>)<EOL>"}
{"signature": "if (data != null && !data.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>nonEmpty.add(data)<EOL><INDENT><INDENT>}"}
{"signature": "val versionExpr =", "body": "versionClass<EOL>"}
{"signature": "when (e.ordinal()) {", "body": "<NUM_LIT> -> <NUM_LIT> }"}
{"signature": "val samFirType =", "body": "argument.resolvedType.let { it.removeExternalProjections() ?: it }<EOL>"}
{"signature": "while (current is IrContainerExpression) {", "body": "<EOL><INDENT><INDENT>block = current<EOL><INDENT><INDENT>current = current.statements.last() as IrExpression<EOL><INDENT>}"}
{"signature": "if (isMoreSpecificThenAllOf(overridable, overridables)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidates.add(overridable)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (log(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>null -> log(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var offset<NUM_LIT> =", "body": "<NUM_LIT>L"}
{"signature": "if (declaration !is FirCallableDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val intArraySerializer =", "body": "IrSimpleParcelSerializer(symbols.parcelCreateIntArray, symbols.parcelWriteIntArray)<EOL>"}
{"signature": "val cpuCores =", "body": "Runtime.getRuntime().availableProcessors()<EOL>"}
{"signature": "if (isBaseMethod(descriptor)) {", "body": "<EOL><INDENT><INDENT>listOf(descriptor)<EOL><INDENT>}"}
{"signature": "val upperBoundsCount =", "body": "typeParameter.upperBounds.size<EOL>"}
{"signature": "val additionalCommonizerSettings =", "body": "project.additionalCommonizerSettings<EOL>"}
{"signature": "if (useExperimentalFqNames.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collector.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>WARNING, <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val inlineMap =", "body": "IC<NUM_LIT>(mutableMapOf(<STR_LIT> to <STR_LIT>)).also { it.putAll(mapOf(<STR_LIT> to <STR_LIT>, <STR_LIT> to <STR_LIT>)) }<EOL>"}
{"signature": "if ((isString(x) && y is String) || (!notIsString(x) && !notIsInt(y))) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT><INDENT>y.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>y.<!UNRESOLVED_REFERENCE!>inc<!>()<EOL><INDENT>}"}
{"signature": "val inputIter =", "body": "inputsToExpectedOutputs.iterator()<EOL>"}
{"signature": "fun markAsUnsafeToRemove() {", "body": "<EOL><INDENT><INDENT>isSafeToRemove = false<EOL><INDENT>}"}
{"signature": "if (memberDeclaration.isConst) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val partiallyAppliedSymbol =", "body": "KtPartiallyAppliedFunctionSymbol(constructor.asSignature(), null, null)<EOL>"}
{"signature": "val usageE =", "body": "Math.<!EVALUATED(<STR_LIT>)!>E<!><EOL>"}
{"signature": "val existingState =", "body": "file.danglingFileResolutionModeState<EOL>"}
{"signature": "val wxx<NUM_LIT> =", "body": "<STR_LIT> + <!NO_ELSE_IN_WHEN!>when<!> { true -> <NUM_LIT> }<EOL>"}
{"signature": "val analysisContext =", "body": "this@KtPsiFactory.context<EOL>"}
{"signature": "val Capability =", "body": "ModuleCapability<ModuleInfo>(<STR_LIT>)<EOL>"}
{"signature": "when (x.operator) {", "body": "<EOL><INDENT><INDENT><INDENT>JsBinaryOperator.AND,<EOL><INDENT><INDENT><INDENT>JsBinaryOperator.OR -> x.processOrAnd(ctx)<EOL><INDENT><INDENT><INDENT>else -> x.process()<EOL><INDENT><INDENT>}"}
{"signature": "fun testParserAcceptsSpecialSymbols() {", "body": "<EOL><INDENT><INDENT>val parser = SimpleExternalDependenciesResolverOptionsParser<EOL><INDENT><INDENT>val options = parser(<STR_LIT>).valueOrThrow()<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(options.value(<STR_LIT>), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val checkNotNullSymbol =", "body": "context.irBuiltIns.checkNotNullSymbol<EOL>"}
{"signature": "if (this is ConeTypeParameterType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return !this.lookupTag.typeParameterSymbol.variance.allowsPosition(requiredVariance)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitQualifiedErrorAccessExpression(qualifiedErrorAccessExpression: FirQualifiedErrorAccessExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(qualifiedErrorAccessExpression)<EOL><INDENT>}"}
{"signature": "fun f(): String<EOL><EOL>expect class A() {", "body": "<EOL><INDENT>fun g(): Int<EOL>}"}
{"signature": "val objCClassClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val cFoo =", "body": "C()::foo<EOL>"}
{"signature": "val SCRIPT_ORIGIN =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val MAIN_PUBLICATION_NAME_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val START_PATTERN =", "body": "Pattern.compile(<STR_LIT>)<EOL>"}
{"signature": "val customNameAnnoProvided =", "body": "<EOL><INDENT><INDENT><INDENT>accessor.annotationEntries.find { JvmStandardClassIds.JVM_NAME.shortName() == it.shortName } != null || property.isSpecialNameProvided()<EOL>"}
{"signature": "val irGetTempVar =", "body": "JsIrBuilder.buildGetValue(irTempVar.symbol)<EOL>"}
{"signature": "if (hasName()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(name)<EOL><INDENT>}"}
{"signature": "val deserialized =", "body": "KotlinToolingMetadata.parseJsonOrThrow(json)<EOL>"}
{"signature": "fun error(f: Inv<out Parent>, w: Inv<Child>) {", "body": "<EOL><INDENT>consume(select(f, wrapper<Child>()))<EOL>}"}
{"signature": "val executableFileName =", "body": "if (SystemInfo.isWindows) <STR_LIT> else executableName<EOL>"}
{"signature": "val nullableRes =", "body": "testNullable()<EOL>"}
{"signature": "val inner_bar =", "body": "local_val + fun_param<EOL>"}
{"signature": "val literalExpression =", "body": "(psi as? KtObjectDeclaration)?.parent as? KtObjectLiteralExpression<EOL>"}
{"signature": "fun appendCatch(catch: WasmImmediate.Catch) {", "body": "<EOL><INDENT><INDENT>appendElement(catch.type.mnemonic)<EOL><INDENT><INDENT>catch.immediates.forEach(this::appendImmediate)<EOL><INDENT>}"}
{"signature": "val baseFile =", "body": "testDataFile.withExtension(extension)<EOL>"}
{"signature": "if (connection is HttpURLConnection && tmpFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>resumeDownload(url, connection, tmpFile)<EOL><INDENT><INDENT>}"}
{"signature": "if (classAnnotationsTuples.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>aconst(null)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testInnerClass(a: Any, b: Any, c: Any) {", "body": "<EOL><INDENT>a as Outer<Int>.Inner<String><EOL><INDENT>b as Int<EOL><INDENT>c as String<EOL><INDENT>a.use(b, c)<EOL>}"}
{"signature": "if (moduleName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return sequenceOf(moduleName, compilationName)<EOL><INDENT><INDENT><INDENT><INDENT>.filterNotNull()<EOL><INDENT><INDENT><INDENT><INDENT>.joinToString(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (isMultiModuleTest && module.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>packageText.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var complexCondition =", "body": "false<EOL>"}
{"signature": "fun test(l: List<Int>) {", "body": "<EOL><INDENT><!NONE_APPLICABLE!>f<!>(<NUM_LIT>, <STR_LIT>, l)<EOL>}"}
{"signature": "val propertyState =", "body": "KPropertyState(propertyReference, receiver)<EOL>"}
{"signature": "val moduleForTestCase =", "body": "TestModule.Exclusive(testName, emptySet(), emptySet(), emptySet())<EOL>"}
{"signature": "if (a is FloatArray) {", "body": "<EOL><INDENT><INDENT>a.get(<NUM_LIT>)<EOL><INDENT><INDENT>a.set(<NUM_LIT>, <NUM_LIT>toFloat())<EOL><INDENT><INDENT>a.iterator()<EOL><INDENT><INDENT>return a.size<EOL><INDENT>}"}
{"signature": "if (longVal == null) {", "body": "<EOL><INDENT><INDENT>null<EOL><INDENT>}"}
{"signature": "if (nextCall is IrCall) {", "body": "<EOL><INDENT><INDENT><INDENT>nextCall.symbol = next.symbol<EOL><INDENT><INDENT><INDENT>nextCall.dispatchReceiver?.type = receiverType<EOL><INDENT><INDENT>}"}
{"signature": "val wholeClassId =", "body": "typeRef.resolvedClassId ?: return null<EOL>"}
{"signature": "val rememberComposable =", "body": "rememberComposableLambdaFunction ?: composableLambdaFunction<EOL>"}
{"signature": "fun addMetric(metric: P, value: Long) {", "body": "<EOL><INDENT><INDENT>myBuildMetrics.add(metric, value)<EOL><INDENT>}"}
{"signature": "if (!javaMethod.isStatic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dispatchReceiverType = dispatchReceiver<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var currentModuleIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val suffixPathSegments =", "body": "suffix.pathSegments()<EOL>"}
{"signature": "val isForLoop =", "body": "whileLoop.source?.elementType == KtNodeTypes.FOR<EOL>"}
{"signature": "if (a?.returnsFalse(s) == false && b) {", "body": "<EOL><INDENT><INDENT>s.length<EOL><INDENT>}"}
{"signature": "for (prefix in taskPrefixes) {", "body": "<EOL><INDENT><INDENT><INDENT>assertContainsRegex(<STR_LIT>.toRegex())<EOL><INDENT><INDENT>}"}
{"signature": "val oldDeclaration =", "body": "constructorContext.declaration<EOL>"}
{"signature": "var valueArgumentOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "val filesQueue =", "body": "ArrayDeque(dirtyFiles)<EOL>"}
{"signature": "val resField =", "body": "resVal.scriptInstance!!::class.java.getDeclaredField(<STR_LIT>)<EOL>"}
{"signature": "when (A.foo()) {", "body": "<EOL><INDENT>null -> <STR_LIT><EOL><INDENT>else -> <STR_LIT><EOL>}"}
{"signature": "val actualPathImported =", "body": "value[<NUM_LIT>].toString().replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val redirectorScript =", "body": "Paths.get(<STR_LIT>)<EOL>"}
{"signature": "val hasFileDescriptorAnywhere =", "body": "propertiesToSerialize.any { it.type.containsFileDescriptor() }<EOL>"}
{"signature": "val CONFIG_FILE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (cachedRequest.acceptedRootTypes == acceptedRootTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>findClassGivenDirectory(cachedResult.packageDirectory, cachedResult.root.type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (reportUnsafeCall || nullableImplicitInvokeReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>tracing.unsafeCall(trace, receiverArgumentType, implicitInvokeCheck)<EOL><INDENT><INDENT><INDENT>return UNSAFE_CALL_ERROR<EOL><INDENT><INDENT>}"}
{"signature": "fun serializeFlexibleType(type: ConeFlexibleType, lowerProto: ProtoBuf.Type.Builder, upperProto: ProtoBuf.Type.Builder) {", "body": "<EOL><INDENT>}"}
{"signature": "else if (declaration.origin == IrDeclarationOrigin.IR_EXTERNAL_JAVA_DECLARATION_STUB) {", "body": "<EOL><INDENT><INDENT><INDENT>return Stability.Unstable<EOL><INDENT><INDENT>}"}
{"signature": "var isInlineFunctionContext =", "body": "false<EOL>"}
{"signature": "if (!declaration.symbol.isPresentInGeneratedCode(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for ((i: Any,) in listOf(Pair(<NUM_LIT>,<NUM_LIT>))) {", "body": "}"}
{"signature": "val isGeneric =", "body": "family in listOf(Iterables, Sequences, ArraysOfObjects)<EOL>"}
{"signature": "for (checker in configuration.enabledPackageMetadataCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.check(metadata<NUM_LIT>, metadata<NUM_LIT>, report)<EOL><INDENT><INDENT>}"}
{"signature": "val mayResolveSetter =", "body": "shouldResolveEverything || hasDefaultAccessors<EOL>"}
{"signature": "if (!isRootScope()) {", "body": "<EOL><INDENT><INDENT><INDENT>clean(stackLocal, false)<EOL><INDENT><INDENT>}"}
{"signature": "val doubleUnderscoreThisName =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val cast =", "body": "casts[i]<EOL>"}
{"signature": "fun function(a: Int, b: String) {", "body": "}<EOL><EOL>fun call() {<EOL><INDENT><expr>function(b = <STR_LIT>, a = <NUM_LIT>)</expr><EOL>}"}
{"signature": "fun consume(value: Any) {", "body": "}<EOL>fun consume(value: DifferentType) {}"}
{"signature": "while (i < s) {", "body": "<EOL><INDENT><INDENT><INDENT>Blackhole.consume(array[i])<EOL><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT>}"}
{"signature": "val myNamedFunction =", "body": "function as KtNamedFunction<EOL>"}
{"signature": "if (!disposed) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val seq = CachingSequence(originalSequence)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>_cachedDefinitions = seq<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>seq<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val PREFIXES =", "body": "listOf(K_PROPERTY_PREFIX, K_MUTABLE_PROPERTY_PREFIX, K_FUNCTION_PREFIX, K_SUSPEND_FUNCTION_PREFIX)<EOL>"}
{"signature": "fun syncMutedTests(<EOL><INDENT>remotelyMutedTests: Map<String, MuteTestJson>,<EOL><INDENT>locallyMutedTests: Map<String, MuteTestJson>,<EOL>) {", "body": "<EOL><INDENT>val deleteList = remotelyMutedTests - locallyMutedTests.keys<EOL><INDENT>val uploadList = locallyMutedTests - remotelyMutedTests.keys<EOL><INDENT>deleteMutedTests(deleteList)<EOL><INDENT>uploadMutedTests(uploadList)<EOL>}"}
{"signature": "fun test(d: D) {", "body": "<EOL><INDENT>val name = d.name<EOL>}"}
{"signature": "val storageProvider =", "body": "JpsLookupStorageProvider(icContext)<EOL>"}
{"signature": "val thisFRef =", "body": "JsNameRef(context.scope().declareName(<STR_LIT>), thiz)<EOL>"}
{"signature": "if (propertyName.endsWith(JvmAbi.DELEGATED_PROPERTY_NAME_SUFFIX)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>propertyName = propertyName.dropLast(JvmAbi.DELEGATED_PROPERTY_NAME_SUFFIX.length)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (d.checkIsOwnerR<String>(s)) {", "body": "<EOL><INDENT><INDENT>s.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val peerDep =", "body": "<STR_LIT><EOL>"}
{"signature": "val comparePreRelease =", "body": "compareValues(preRelease, other.preRelease)<EOL>"}
{"signature": "for (valueArgument in resolvedValueArgument.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val originalType = candidate.resolvedCall.argumentsWithConversion[valueArgument]?.originalParameterType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val resultType = candidate.resolvedCall.argumentsWithConversion[valueArgument]?.convertedTypeByOriginParameter<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: valueArgument.getExpectedType(originalValueParameter, candidate.callComponents.languageVersionSettings)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>valueArgumentToParameterType[valueArgument] = TypeWithConversion(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>resultType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (isEliminationAmbiguitiesOnInheritedSamInterfacesEnabled) originalType else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val memoryUsage =", "body": "MemoryUsage(totalObjectsSize)<EOL>"}
{"signature": "val newCall =", "body": "irCall(expression, newCallee, receiversAsArguments = true)<EOL>"}
{"signature": "if (resolvedArgument.callArgument.isSpread) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addDiagnostic(NonVarargSpread(resolvedArgument.callArgument))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val Mask =", "body": "<NUM_LIT>b<NUM_LIT><EOL>"}
{"signature": "val classifierDescriptorChain =", "body": "classifierDescriptor.classifierDescriptorsFromInnerToOuter()<EOL>"}
{"signature": "val cfgNode =", "body": "getClosestControlFlowNode(fir)<EOL>"}
{"signature": "val doubleList<NUM_LIT> =", "body": "listOf(listOf(<NUM_LIT>, Double.NaN), listOf(<NUM_LIT>, <NUM_LIT>))<EOL>"}
{"signature": "val resolutionScopesSupport =", "body": "ClassResolutionScopesSupport(thisDescriptor, c.storageManager, c.languageVersionSettings, { outerScope })<EOL>"}
{"signature": "when (val expression = KtPsiUtil.safeDeparenthesize(rawExpression)) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtIsExpression -> true<EOL><INDENT><INDENT><INDENT>is KtBinaryExpression -> expression.operationToken in prohibitedTokens<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "fun expect(setup: (Expected).() -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>_expected = Expected(this)<EOL><INDENT><INDENT><INDENT>_expected.setup()<EOL><INDENT><INDENT>}"}
{"signature": "if (symbolPsi != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return analysisSession.getModule(symbolPsi)<EOL><INDENT><INDENT>}"}
{"signature": "val inferredTypeVariablesSubstitutor =", "body": "substitutor ?: FreshVariableNewTypeSubstitutor.Empty<EOL>"}
{"signature": "if (shouldReportParameterNameOverrideWarning(descriptor, parameterFromSuperclass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>DIFFERENT_NAMES_FOR_THE_SAME_PARAMETER_IN_SUPERTYPES.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classElement,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>containingFunction.overriddenDescriptors,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parameterFromSuperclass.index + <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var topStringVar =", "body": "<STR_LIT><EOL>"}
{"signature": "val dependentSrcFileMetadata =", "body": "dependentCache.fetchSourceFileFullMetadata(dependentFile)<EOL>"}
{"signature": "val tmpdir =", "body": "File(KotlinTestUtils.tmpDirForTest(this), <STR_LIT>)<EOL>"}
{"signature": "var stackAllocsCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (call.getValueArgument(<NUM_LIT>)!!.type.isNullable() || call.getValueArgument(<NUM_LIT>)!!.type.isNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return irCall(call, symbols.nullableDoubleIeee<NUM_LIT>Equals)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!flags.containsFalse) {", "body": "<EOL><INDENT><INDENT><INDENT>destination.add(WhenMissingCase.BooleanIsMissing.FalseIsMissing)<EOL><INDENT><INDENT>}"}
{"signature": "var invoked =", "body": "false<EOL>"}
{"signature": "if (objectSymbol == rootCause.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>objectUses().unacceptableClassifier().via()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (anonymous) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>report(UNUSED_ANONYMOUS_PARAMETER.on(element, variableDescriptor), ctxt)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val jvmStaticAnnotation =", "body": "AnnotationDescriptorImpl(jvmStaticClass.defaultType, mapOf(), jvmStaticClass.source)<EOL>"}
{"signature": "val typeParametersList =", "body": "declaration.typeParameterList<EOL>"}
{"signature": "if (isolationModeStr == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>logger.warn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun write(location: NativePtr, value: CEnum) {", "body": "<EOL><INDENT><INDENT>rawValueCType.write(location, value.value)<EOL><INDENT>}"}
{"signature": "if (includer == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>topLevelHeaders += IncludeInfo(file.path, clang_Module_getFullName(module).convertAndDispose())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (baseClass is KtLightClassForSourceDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.isInheritor(baseClass, checkDeep)<EOL><INDENT><INDENT>}"}
{"signature": "val startNs =", "body": "myBuildTimeStartNs.remove(time) ?: error(<STR_LIT>)<EOL>"}
{"signature": "val producerValue =", "body": "parseCommonizerTarget(details.producerValue ?: return) as? SharedCommonizerTarget ?: return<EOL>"}
{"signature": "val memSizes =", "body": "mutableListOf<Int>(wasmMemorySize())<EOL>"}
{"signature": "val nameField =", "body": "user.enclosedElements.filterIsInstance<VariableElement>().single()<EOL>"}
{"signature": "val FOREIGN_EXCEPTION_MODE =", "body": "<STR_LIT><EOL>"}
{"signature": "val candidateSpecs =", "body": "propertyList(<STR_LIT>)<EOL>"}
{"signature": "if (fn is IFoo) {", "body": "<EOL><INDENT><INDENT>A[fn] += <NUM_LIT><EOL><INDENT>}"}
{"signature": "if (a is UInt) {", "body": "<EOL><INDENT><INDENT>a.member()<EOL><INDENT>}"}
{"signature": "val dependenciesProvider =", "body": "ScriptDependenciesProvider.getInstance(context.environment.project)<EOL>"}
{"signature": "for (call in methodContext.calls) {", "body": "<EOL><INDENT><INDENT><INDENT>transformCall(methodContext, call)<EOL><INDENT><INDENT>}"}
{"signature": "val packageFqNames =", "body": "packageFragmentProtos.mapNotNullTo(mutableSetOf()) { it.fqName }<EOL>"}
{"signature": "for (lib in loadedIr.loadedFragments.keys) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val libDirtySrcFiles = dirtySrcFiles[lib]?.keys ?: emptySet()<EOL><INDENT><INDENT><INDENT><INDENT>val symbolProviders = loadedIr.getSignatureProvidersForLib(lib)<EOL><INDENT><INDENT><INDENT><INDENT>idSignatureToFile += updatedMetadata.getExportedSignaturesAndAddMetadata(symbolProviders, lib, libDirtySrcFiles)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (equalityOperatorCall.operation == FirOperation.IDENTITY || equalityOperatorCall.operation == FirOperation.NOT_IDENTITY) {", "body": "<EOL><INDENT><INDENT><INDENT>return ConstantArgumentKind.NOT_CONST<EOL><INDENT><INDENT>}"}
{"signature": "val synth<NUM_LIT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "val REPLACE_WITH_ANNOTATION_TYPE =", "body": "buildAnnotationType(CirEntityId.create(<STR_LIT>))<EOL>"}
{"signature": "fun topLevel() {", "body": "}<EOL><EOL>fun Int.ext(vararg o: Any) {}"}
{"signature": "if (!parameters.compilationViaBuildToolsApi.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>checkVersionConsistency()<EOL><INDENT><INDENT>}"}
{"signature": "if (!builders.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>builders.peek()<EOL><INDENT><INDENT>}"}
{"signature": "val newCodeFragment =", "body": "revive<FirCodeFragment>(designation)<EOL>"}
{"signature": "val localX =", "body": "x<EOL>"}
{"signature": "if (needsCompanionProperty) {", "body": "<EOL><INDENT><INDENT><INDENT>this += buildCompanionProperty()<EOL><INDENT><INDENT>}"}
{"signature": "while(false) {", "body": "<EOL><INDENT><INDENT><INDENT>val x = <expr>break@outer</expr><EOL><INDENT><INDENT>}"}
{"signature": "val lazyInitializers =", "body": "mutableListOf<Lazy<*>>()<EOL>"}
{"signature": "val keyValue =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "val referenceQueue =", "body": "ReferenceQueue<V>()<EOL>"}
{"signature": "val lhsMask =", "body": "if (strongSkippingEnabled) <NUM_LIT>b<NUM_LIT> else <NUM_LIT>b<NUM_LIT><EOL>"}
{"signature": "var thereAreChanges =", "body": "false<EOL>"}
{"signature": "val elemOther =", "body": "otherIterator.next()<EOL>"}
{"signature": "val evaluationStatementsFromDefault =", "body": "mutableListOf<IrVariable>()<EOL>"}
{"signature": "var stubList =", "body": "ktFile.getUserData(STUBS_KEY)?.get()<EOL>"}
{"signature": "val initializerStatements =", "body": "mutableListOf<JsStatement>()<EOL>"}
{"signature": "if (JvmEnvironmentConfigurationDirectives.USE_PSI_CLASS_FILES_READING in module.directives) {", "body": "<EOL><INDENT><INDENT><INDENT>configuration.put(JVMConfigurationKeys.USE_PSI_CLASS_FILES_READING, true)<EOL><INDENT><INDENT>}"}
{"signature": "val sourceRangeInfo =", "body": "containingFile.fileEntry.getSourceRangeInfo(startOffset, endOffset)<EOL>"}
{"signature": "for (branch in element.branches) {", "body": "<EOL><INDENT><INDENT><INDENT>if (branch.condition is FirElseIfTrueCondition) continue<EOL><INDENT><INDENT><INDENT>checkCommaInBranchCondition(branch, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "if (ktFile.isCommonSource != true && !targetDescriptor.platform.isCommon()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.OPTIONAL_DECLARATION_USAGE_IN_NON_COMMON_SOURCE.on(element))<EOL><INDENT><INDENT>}"}
{"signature": "val foreignExceptionBlock =", "body": "basicBlock(<STR_LIT>, position()?.start)<EOL>"}
{"signature": "val isDeprecatedCategoryProperty =", "body": "<EOL><INDENT><INDENT><INDENT>container is ObjCCategory && container in container.clazz.includedCategories<EOL>"}
{"signature": "val aName =", "body": "a.target.safeToken<EOL>"}
{"signature": "fun test<NUM_LIT>(c: InlineNotNullReference) {", "body": "<EOL><INDENT>val c<NUM_LIT> = c<EOL><INDENT>val c<NUM_LIT>: Any = c<EOL><INDENT>val c<NUM_LIT>: Any? = c<EOL><INDENT>val c<NUM_LIT>: InlineNotNullReference = c<EOL><INDENT>val c<NUM_LIT>: InlineNotNullReference? = c<EOL>}"}
{"signature": "if (AbstractTypeChecker.equalTypes(this, argumentType, approximatedSuperType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>newArguments[index] = approximatedSuperType.asTypeArgument()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (fqName != REQUIRES_OPT_IN_FQ_NAME.asString()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkAnnotation(fqName)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (Kapt<NUM_LIT>GradleSubplugin.isEnabled(project)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val kaptClassesDir = project.getKaptGeneratedClassesDirectory(getVariantName(variantData))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(kaptClassesDir.get().asFile)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val delegateCall =", "body": "property.delegate as FirFunctionCall<EOL>"}
{"signature": "fun visitWhenBranch(whenBranch: FirWhenBranch, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitWhenBranch(whenBranch)<EOL><INDENT>}"}
{"signature": "if ((alreadyGenerated && alreadyCached) || !defDirectory.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val L =", "body": "LBase + SIndex / NCount<EOL>"}
{"signature": "fun test(t : T) {", "body": "<EOL><INDENT><!TYPE_PARAMETER_ON_LHS_OF_DOT!>T<!>.<!UNRESOLVED_REFERENCE!>foo<!>()<EOL><INDENT><!TYPE_PARAMETER_ON_LHS_OF_DOT!>T<!>.<!UNRESOLVED_REFERENCE!>bar<!>()<EOL><INDENT>t.foo()<EOL><INDENT>t.bar()<EOL>  }"}
{"signature": "val postponedAnonymousFunctionNodes =", "body": "<EOL><INDENT><INDENT>mutableMapOf<FirFunctionSymbol<*>, Pair<CFGNode<*>, PostponedLambdaExitNode?>>()<EOL>"}
{"signature": "for(i in <NUM_LIT>.versionRequirementCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getVersionRequirement(i)<EOL><INDENT>}"}
{"signature": "when (cacheImpl) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CacheImplementation.HASH_MAP -> HashMapCacheMechanism(iv, containerType)<EOL><INDENT><INDENT><INDENT><INDENT>CacheImplementation.SPARSE_ARRAY -> SparseArrayCacheMechanism(iv, containerType)<EOL><INDENT><INDENT><INDENT><INDENT>CacheImplementation.NO_CACHE -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (calleeReference.candidate.doesResolutionResultOverrideOtherToPreserveCompatibility()) {", "body": "<EOL><INDENT><INDENT><INDENT>addNonFatalDiagnostic(ConeResolutionResultOverridesOtherToPreserveCompatibility)<EOL><INDENT><INDENT>}"}
{"signature": "if (!signKeyId.isNullOrBlank()) {", "body": "<EOL><INDENT><INDENT><INDENT>val signKeyPrivate = project.getSensitiveProperty(<STR_LIT>) ?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>val signKeyPassphrase = project.getSensitiveProperty(<STR_LIT>) ?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>useInMemoryPgpKeys(signKeyId, signKeyPrivate, signKeyPassphrase)<EOL><INDENT><INDENT>}"}
{"signature": "for (nativeSharedSourceSet in listOf(linuxMain, linuxTest, nativeMain, nativeTest)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeSharedSourceSet, IdeMultiplatformImport.SourceSetConstraint.isAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeSharedSourceSet, IdeMultiplatformImport.SourceSetConstraint.isJvmAndAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeSharedSourceSet, IdeMultiplatformImport.SourceSetConstraint.isLeaf, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeSharedSourceSet, IdeMultiplatformImport.SourceSetConstraint.isNative, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeSharedSourceSet, IdeMultiplatformImport.SourceSetConstraint.isSinglePlatformType, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeSharedSourceSet, IdeMultiplatformImport.SourceSetConstraint.unconstrained, isMatchExpected = true)<EOL><INDENT><INDENT>}"}
{"signature": "if (resolvedFromCommonDependencies != null) {", "body": "<EOL><INDENT><INDENT>return generateUnderlyingTypeSequence(classifiers.commonDependencies, resolvedFromCommonDependencies)<EOL><INDENT>}"}
{"signature": "if (isEnumEntryWithoutBody(this)) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val fakeSource =", "body": "expression.toKtPsiSourceElement(KtFakeSourceElementKind.DesugaredForLoop)<EOL>"}
{"signature": "if (hasExtension(JavaClassProtoBuf.isPackagePrivateClass)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JavaClassProtoBuf.isPackagePrivateClass).hashCode()<EOL><INDENT>}"}
{"signature": "val annotationsByClass =", "body": "annotations.groupByTo(mutableMapOf()) { it.symbol.owner.constructedClass }<EOL>"}
{"signature": "if (nextStart == range.start) {", "body": "<EOL><INDENT><INDENT><INDENT>nextStart++<EOL><INDENT><INDENT>}"}
{"signature": "if (contextModule is KtSourceModule) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>registerCompilerPluginServices(project, contextModule)<EOL><INDENT><INDENT><INDENT><INDENT>registerCompilerPluginExtensions(project, contextModule)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun baz(x: (String) -> Unit) {", "body": "}<EOL><EOL>fun bar() {<EOL><INDENT>baz(A::foo)<EOL>}"}
{"signature": "package provider.", "body": "<EOL>"}
{"signature": "val ERROR_TYPE_STUB =", "body": "CommonClassNames.JAVA_LANG_OBJECT<EOL>"}
{"signature": "val LEAKING_THIS =", "body": "DebugInfoDiagnosticFactory<NUM_LIT>(<STR_LIT>, Severity.INFO)<EOL>"}
{"signature": "for ((i, ui) in uis.withIndex().reversed()) {", "body": "<EOL><INDENT><INDENT>s += <STR_LIT><EOL><INDENT>}"}
{"signature": "val matchedItem =", "body": "findMatchLine(path, isDirectory = false, parentMatch)<EOL>"}
{"signature": "val primitivesToSpillBySuspensionPointIndex =", "body": "arrayListOf<List<PrimitiveToSpill>>()<EOL>"}
{"signature": "val constrDesc =", "body": "superClass.constructors.single(ClassConstructorDescriptor::isSerializationCtor)<EOL>"}
{"signature": "val SOURCE_TO_JS_OUTPUT =", "body": "<STR_LIT><EOL>"}
{"signature": "if (decodeThrowsFilter(throwsAnnotation) != overriddenThrows) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsNative.INCOMPATIBLE_THROWS_OVERRIDE.on(reportLocation, overriddenMember.containingDeclaration))<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val parentIndex =", "body": "element.elementParents.indexOfFirst { it.element == parent }<EOL>"}
{"signature": "val successfulRebuildCacheFiles =", "body": "readCacheFiles()<EOL>"}
{"signature": "when (nullabilityFromQualifiers) {", "body": "<EOL><INDENT><INDENT>NullabilityQualifier.NULLABLE -> true<EOL><INDENT><INDENT>NullabilityQualifier.NOT_NULL -> false<EOL><INDENT><INDENT>else -> isNullable<EOL><INDENT>}"}
{"signature": "val mavenPublication =", "body": "publications.maybeCreate(builtArtifact, MavenPublication::class.java)<EOL>"}
{"signature": "val subprojectPodImportTask =", "body": "<STR_LIT><EOL>"}
{"signature": "val whenExpressionFilePathToEnumClass =", "body": "ConcurrentHashMap<String, MutableSet<String>>()<EOL>"}
{"signature": "val elseValue =", "body": "elseStatement.expression<EOL>"}
{"signature": "val currentClassOptimizationDecision =", "body": "currentClass.possibilityToOptimizeForEsClass<EOL>"}
{"signature": "val benchmarksList =", "body": "parseBenchmarksArray(benchmarksObj)<EOL>"}
{"signature": "if (!isArrayElementGetter()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val field = getBackingField()<EOL><INDENT><INDENT><INDENT><INDENT>listOf(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.buildFieldAccessor(field, dispatchReceiver, false),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.buildFieldAccessor(field, dispatchReceiver, true)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val superSource =", "body": "superTypeRef.source ?: continue<EOL>"}
{"signature": "if (skipMetadataVersionCheck || klass.classHeader.metadataVersion.isCompatible(ownMetadataVersion)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw e<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualResolvePhase =", "body": "declaration.resolvePhase<EOL>"}
{"signature": "fun visitFunctionTypeParameter(functionTypeParameter: FirFunctionTypeParameter, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitFunctionTypeParameter(functionTypeParameter)<EOL><INDENT>}"}
{"signature": "if (hasExtension(JavaClassProtoBuf.isPackagePrivateConstructor)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JavaClassProtoBuf.isPackagePrivateConstructor).hashCode()<EOL><INDENT>}"}
{"signature": "val irSuspendFunReturnType =", "body": "suspendFunType.arguments.last().type.toIrType()<EOL>"}
{"signature": "fun consumeA(base: BaseBuildee<TargetType>) {", "body": "}<EOL><EOL>fun consumeB(base: BaseBuildee<TargetType>) {}"}
{"signature": "fun f<NUM_LIT>(a: List<out <!ELEMENT!>>) {", "body": "}<EOL><EOL>fun f<NUM_LIT>(a: List<List<List<<!ELEMENT!>?>>>) {}"}
{"signature": "if (isInvoke) {", "body": "<EOL><INDENT><INDENT>val returnType = expression.getTypeArgument(expression.typeArgumentsCount - <NUM_LIT>)!!<EOL><INDENT><INDENT>mapReturnType(returnType, expression, signature = null)<EOL><INDENT>}"}
{"signature": "if (!visitedDependencies.add(componentId)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val buildReportService =", "body": "buildMetricServiceProvider.map { it.buildReportService }.get()<EOL>"}
{"signature": "fun aaa() {", "body": "}<EOL><EOL>fun test<NUM_LIT>(aaa: String): String? {<EOL><INDENT>return js(<STR_LIT>)<EOL>}"}
{"signature": "if (local != merged) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>setLocal(i, merged)<EOL><INDENT><INDENT><INDENT><INDENT>changed = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isConstructorRequiringAccessor(implFun)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>functionHazard = true<EOL><INDENT><INDENT>}"}
{"signature": "val isUpcast =", "body": "isUpcast(context, supertype, subtype)<EOL>"}
{"signature": "fun foo<NUM_LIT>(x: Int, y: Comparable<Float>,) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(x: Int = <NUM_LIT>,) {}"}
{"signature": "val customFile =", "body": "parameters.propertiesFile.get().asFile<EOL>"}
{"signature": "fun visitDeclaration(declaration: IrDeclarationBase, data: IrDeclarationParent?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitDeclaration(declaration, declaration as? IrDeclarationParent ?: data)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val actualValues =", "body": "ArrayList<Int>()<EOL>"}
{"signature": "fun testMembersFromSupertypes() {", "body": "<EOL><INDENT>f()<EOL><INDENT>g(<STR_LIT>)<EOL><INDENT>p<EOL><INDENT>fromI()<EOL><EOL><INDENT>genericFromI(<NUM_LIT>)<EOL><INDENT>genericFromI(<!TYPE_MISMATCH!><STR_LIT><!>)<EOL><EOL><INDENT>own<EOL>}"}
{"signature": "if (arg !is JsIntLiteral) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val wasmTarget =", "body": "arguments.wasmTarget?.let { WasmTarget.fromName(it) }<EOL>"}
{"signature": "when (val firExpression = possibleFunctionCall.getOrBuildFir(analysisSession.firResolveSession)) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirSmartCastExpression -> firExpression<EOL><INDENT><INDENT><INDENT>is FirSafeCallExpression -> firExpression.selector as? FirSmartCastExpression<EOL><INDENT><INDENT><INDENT>is FirImplicitInvokeCall -> firExpression.explicitReceiver as? FirSmartCastExpression<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val any_internal =", "body": "atomic<Any?>(null)<EOL>"}
{"signature": "val otherFile =", "body": "expectedFile.withExtension(otherExtension)<EOL>"}
{"signature": "if (KotlinBuiltIns.isArray(type)) {", "body": "<EOL><INDENT><INDENT><INDENT>val componentTypeProjection = type.arguments[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT>val arguments = listOf(<EOL><INDENT><INDENT><INDENT><INDENT>TypeProjectionImpl(componentTypeProjection.projectionKind, eraseType(componentTypeProjection.type, attr))<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return KotlinTypeFactory.simpleType(<EOL><INDENT><INDENT><INDENT><INDENT>type.attributes, type.constructor, arguments, type.isMarkedNullable<EOL><INDENT><INDENT><INDENT>) to false<EOL><INDENT><INDENT>}"}
{"signature": "val currentEvalConfig =", "body": "evaluationConfiguration ?: ScriptEvaluationConfiguration()<EOL>"}
{"signature": "val testSuiteVal =", "body": "irTemporary(constructorCall, <STR_LIT>)<EOL>"}
{"signature": "val containersWithInitializedGlobals =", "body": "BitSet()<EOL>"}
{"signature": "if (expression.origin == IrStatementOrigin.ANDAND) {", "body": "<EOL><INDENT><INDENT><INDENT>return JsBinaryOperation(<EOL><INDENT><INDENT><INDENT><INDENT>JsBinaryOperator.AND,<EOL><INDENT><INDENT><INDENT><INDENT>expression.branches[<NUM_LIT>].condition.accept(this, context),<EOL><INDENT><INDENT><INDENT><INDENT>expression.branches[<NUM_LIT>].result.accept(this, context)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val def<NUM_LIT>File =", "body": "testPathFull.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun useTypeAlias<NUM_LIT>(x: TypeAlias<NUM_LIT>) {", "body": "<EOL><INDENT>x.toString()<EOL>}"}
{"signature": "val returnExpressionType =", "body": "resultExpression.resolvedType<EOL>"}
{"signature": "val LIB_DOUBLE =", "body": "<NUM_LIT><EOL>"}
{"signature": "val declaredTypeParameter =", "body": "typeParameter.symbol.fir<EOL>"}
{"signature": "fun test(<!UNUSED_PARAMETER!>x<!>: Int)  {", "body": "<EOL><INDENT>while (true)<EOL><INDENT><INDENT><!UNREACHABLE_CODE!>x =<!> break<EOL>}"}
{"signature": "val THE_UNIT_INSTANCE<INDENT><INDENT><INDENT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val defaultPodRepo =", "body": "\"https:"}
{"signature": "for ((i, col) in row.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>maxLengths[i] = max(maxLengths[i], col.length)<EOL><INDENT><INDENT>}"}
{"signature": "val cliArgs =", "body": "testCommand.cliArgs(<STR_LIT>, checkExitCode, includePatterns, excludePatterns, args)<EOL>"}
{"signature": "val isNonReifiedTypeParameter =", "body": "subtype.isNonReifiedTypeParameter()<EOL>"}
{"signature": "if (descriptor is FunctionDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.addAll(getContributedFunctions(descriptor.name, location))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testPlanExecutionFinished(testPlan: TestPlan) {", "body": "<EOL><INDENT><INDENT>KotlinCoreEnvironment.disposeApplicationEnvironment()<EOL><INDENT><INDENT>Disposer.dispose(ROOT_DISPOSABLE)<EOL><INDENT><INDENT>KotlinCoreEnvironment.resetApplicationManager()<EOL><INDENT>}"}
{"signature": "val setterSymbol =", "body": "if (mutable) descriptor.setter?.let { context.symbolTable.descriptorExtension.referenceSimpleFunction(it) } else null<EOL>"}
{"signature": "val kilobytes =", "body": "bytes.toDouble() / <NUM_LIT><EOL>"}
{"signature": "fun unfoldBranch(branch: IrBranch, callStack: CallStack) {", "body": "<EOL><INDENT>callStack.pushSimpleInstruction(branch)<EOL><INDENT>callStack.pushCompoundInstruction(branch.condition)<EOL>}"}
{"signature": "val lastNode =", "body": "lastNodes.pop()<EOL>"}
{"signature": "fun foo(x: Array<out Enum<*>>) {", "body": "<EOL><INDENT>val y = Foo(x)<EOL>}"}
{"signature": "val partsNames =", "body": "incrementalCache.getStableMultifileFacadeParts(facadeName.internalName) ?: return null<EOL>"}
{"signature": "val selfNode =", "body": "getControlFlowNode(fir)<EOL>"}
{"signature": "val halfInUnit =", "body": "half.toLong(unit)<EOL>"}
{"signature": "if (correspondingProperty?.isConst == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>usedConstants += correspondingProperty<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var hasEntry =", "body": "false<EOL>"}
{"signature": "val place =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "val InlineOnly =", "body": "<STR_LIT>.internalId()<EOL>"}
{"signature": "if (arguments.verbose) {", "body": "<EOL><INDENT><INDENT><INDENT>reportCompiledSourcesList(messageCollector, sourcesFiles)<EOL><INDENT><INDENT>}"}
{"signature": "val parentConstraintSystem =", "body": "<EOL><INDENT><INDENT>delegateCandidate?.system<EOL>"}
{"signature": "val WAS_EXPERIMENTAL_CLASS_ID =", "body": "ClassId.topLevel(WAS_EXPERIMENTAL_FQ_NAME)<EOL>"}
{"signature": "for (preset in allOpenExtension.myPresets) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>options += SubpluginOption(PRESET_ARG_NAME, preset)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testSourcelessSmartcastSourcefullOriginalExpression() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>module(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val cNamesStructsPackage =", "body": "cNamesPackage.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "fun runAction(a: Action) {", "body": "<EOL><INDENT>a.run()<EOL>}"}
{"signature": "if (!compilerModeAllowsUsingPartialLinkage && resolvedMode.isEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>onWarning(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>PartialLinkageMode.DISABLE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testObject() {", "body": "<EOL><INDENT>use<NUM_LIT>(Obj::foo)<EOL>}"}
{"signature": "val effect =", "body": "contractParserDispatcher.parseEffect((resolvedCall.dispatchReceiver as? ExpressionReceiver)?.expression)<EOL>"}
{"signature": "if (forIde) {", "body": "<EOL><INDENT><INDENT><INDENT>intellijSdkVersionForIde()<EOL><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var len =", "body": "sign<EOL>"}
{"signature": "if (unifiedNullChecks) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add(writeVersionRequirement(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, ProtoBuf.VersionRequirement.VersionKind.COMPILER_VERSION, this))<EOL><INDENT><INDENT>}"}
{"signature": "val internalLongConst =", "body": "<NUM_LIT> * <NUM_LIT>L<EOL>"}
{"signature": "for (value in Rainbow.values()) {", "body": "<EOL><INDENT><INDENT><INDENT>append(sym(value))<EOL><INDENT><INDENT>}"}
{"signature": "fun nonInlineFun() {", "body": "}"}
{"signature": "fun together() {", "body": "<EOL><INDENT><INDENT>A.f()<EOL><INDENT><INDENT>C.h()<EOL><INDENT><INDENT>B.g()<EOL><INDENT>}"}
{"signature": "fun handleEvent(event: Event) {", "body": "<EOL><INDENT><INDENT>handler(event)<EOL><INDENT>}"}
{"signature": "val lazyModePublicationEnumEntry =", "body": "<EOL><INDENT><INDENT>lazyModeClass.enumEntries().single { it.name == SerializationDependencies.LAZY_PUBLICATION_MODE_NAME }<EOL>"}
{"signature": "fun x<NUM_LIT>(x: X<Int, String>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>class X<T, R><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun<T, R> x<NUM_LIT>(x: X<T, R>) {}"}
{"signature": "val delegateTo =", "body": "call.symbol.owner<EOL>"}
{"signature": "val METHOD_FOR_FIR_FUNCTION =", "body": "JvmSerializationBindings.SerializationMappingSlice.create<FirFunction, Method>()<EOL>"}
{"signature": "val ATOMICFU_INLINE_FUNCTIONS =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val fakeContinuations =", "body": "methodNode.instructions.asSequence().filter(::isFakeContinuationMarker).toList()<EOL>"}
{"signature": "val mainCompilationKlibName =", "body": "if (version != <STR_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (parentCall !is KtSafeQualifiedExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return receiverExpression.getOrBuildFirOfType<FirExpression>(firResolveSession)<EOL><INDENT><INDENT>}"}
{"signature": "val mainJsFile =", "body": "File(parentDir, <STR_LIT>).path<EOL>"}
{"signature": "if (!doTypeParameters(member, ktNamedFunction)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (r.left == null) {", "body": "<EOL><INDENT><INDENT><INDENT>root = r.right<EOL><INDENT><INDENT>}"}
{"signature": "if (kotlinCache != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>append(kotlinCache.dump())<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val gitOperationsPrinter =", "body": "TextProgressMonitor()<EOL>"}
{"signature": "if (descriptor is FunctionDescriptor && forceBoxedReturnType(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return mapType(descriptor.getReturnType()!!, sw, TypeMappingMode.RETURN_TYPE_BOXED)<EOL><INDENT><INDENT>}"}
{"signature": "fun testCaptured(cSub: SubInv<out Number>, cInv: Inv<out Number>) {", "body": "<EOL><INDENT>val c<NUM_LIT> = select(cInv, SubInv())<EOL><EOL><INDENT>c<NUM_LIT><EOL><EOL><INDENT>val c<NUM_LIT> = select(cSub, Inv())<EOL><EOL><INDENT>c<NUM_LIT><EOL>}"}
{"signature": "package ${CodegenTestsOnAndroidGenerator.", "body": "testClassPackage};<EOL>"}
{"signature": "fun foo(t: Double?) {", "body": "}"}
{"signature": "val kotlinVersion =", "body": "if (kotlinVersionString != null) KotlinToolingVersion(kotlinVersionString) else null<EOL>"}
{"signature": "val functionTypeParameterToJavaTypeParameter =", "body": "typeParameters.zip(javaTypeParametersFromClass)<EOL>"}
{"signature": "val typeCheckerContext =", "body": "newTypeCheckerState(errorTypesEqualToAnything = false, stubTypesEqualToAnything = true)<EOL>"}
{"signature": "val newArguments =", "body": "arguments.enhanceTypeArguments()<EOL>"}
{"signature": "if ((shouldRenderAsPrettyFunctionType(this) && !TypeUtils.isNullableType(this)) || this is DefinitelyNotNullType) {", "body": "<EOL><INDENT><INDENT><INDENT>result = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val traversedInstructions =", "body": "linkedSetOf<Instruction>()<EOL>"}
{"signature": "val arrayOfCallTransformer =", "body": "FirArrayOfCallTransformer()<EOL>"}
{"signature": "if (labeledElement is FirErrorFunction && (labeledElement.diagnostic as? ConeSimpleDiagnostic)?.kind == DiagnosticKind.NotAFunctionLabel) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.NOT_A_FUNCTION_LABEL, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (ktArgument != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irErrorCall.arguments.add(ktArgument.genExpr())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val testsAmount =", "body": "if (ignored == <NUM_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val unboxMethodCall =", "body": "insn as MethodInsnNode<EOL>"}
{"signature": "var elements =", "body": "intArrayOf(first, second)<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Inv<out Number>, list: List<Inv<Int>>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL>}"}
{"signature": "if (classType.getAttachment<OptimisticNumbersTypeCommonizer.OptimisticCommonizationMarker>() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>isOptimisticallyCommonizedType = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var superInterfaceIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun kotlinReflect() {", "body": "<EOL><INDENT><INDENT>snapshotAPIAndCompare(<STR_LIT>, <STR_LIT>, nonPublicPackages = listOf(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val asmAnnotationArgs =", "body": "pairedListToMap(asm.values)<EOL>"}
{"signature": "val unfulfilled =", "body": "arrayListOf<Pair<DeclarationSymbolMarker, Map<Incompatible<*>, List<DeclarationSymbolMarker?>>>>()<EOL>"}
{"signature": "for (case in x.cases) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processStatements(case.statements)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package was introduced to mitigate this problem.", "body": "<EOL>"}
{"signature": "val dirCanonicalPaths =", "body": "walkKtFiles(testTempDir)<EOL>"}
{"signature": "for (i in <NUM_LIT> until RUNS) {", "body": "<EOL><INDENT><INDENT><INDENT>x += a.a()<EOL><INDENT><INDENT><INDENT>x += b.a<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>x += c.b<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>x += d.c<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>x += e.d<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>x += f.e<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>x += g.f<NUM_LIT>()<EOL><INDENT><INDENT><INDENT>x += g.g<NUM_LIT>()<EOL><INDENT><INDENT>}"}
{"signature": "fun testFindGreedy() {", "body": "<EOL><INDENT><INDENT>val regex = Regex(<STR_LIT>, RegexOption.DOT_MATCHES_ALL)<EOL><INDENT><INDENT>val result = regex.matchEntire(<STR_LIT>)<EOL><INDENT><INDENT>assertNotNull(result)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, result!!.range.endInclusive)<EOL><INDENT>}"}
{"signature": "if (configuration.get(CommonConfigurationKeys.USE_FIR) == true) {", "body": "<EOL><INDENT><INDENT><INDENT>processSourceModuleWithK<NUM_LIT>(environmentForJS, libraries, friendLibraries, arguments, outputKlibPath)<EOL><INDENT><INDENT>}"}
{"signature": "fun printShort(v: Short) {", "body": "<EOL><INDENT>println(v)<EOL>}"}
{"signature": "val snipetsLimited =", "body": "if (limit == <NUM_LIT>) snippets else snippets.take(limit)<EOL>"}
{"signature": "if (firDispatchReceiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it.dispatchReceiver = visitor.convertToIrExpression(firDispatchReceiver)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun generateDataClassCopyBody(irFunction: IrFunction, klass: FirRegularClass) {", "body": "<EOL><INDENT><INDENT>MyDataClassMethodsGenerator(irFunction.parentAsClass, klass, IrDeclarationOrigin.GENERATED_DATA_CLASS_MEMBER)<EOL><INDENT><INDENT><INDENT>.generateCopyBody(irFunction)<EOL><INDENT>}"}
{"signature": "val taskPathToMetricsReporter =", "body": "ConcurrentHashMap<String, BuildMetricsReporter<GradleBuildTime, GradleBuildPerformanceMetric>>()<EOL>"}
{"signature": "val testGroupDirPrefix =", "body": "allDirectives[WasmEnvironmentConfigurationDirectives.TEST_GROUP_OUTPUT_DIR_PREFIX].first()<EOL>"}
{"signature": "val FIRST_FUN_LABEL =", "body": "<STR_LIT><EOL>"}
{"signature": "if (notErrorKotlinType.isTypeParameter()) {", "body": "<EOL><INDENT><INDENT>if (!TypeUtils.hasNullableSuperType(notErrorKotlinType)) return JvmAnnotationNames.JETBRAINS_NOT_NULL_ANNOTATION.asString()<EOL><INDENT><INDENT>if (!notErrorKotlinType.isMarkedNullable) return null<EOL><INDENT>}"}
{"signature": "if (inlinedNodeLocalVariables.isEmpty() || resultNodeLocalVariables.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun set(index: Int, value: UShort) {", "body": "<EOL><INDENT><INDENT>storage[index] = value.toShort()<EOL><INDENT>}"}
{"signature": "while (i < max && index < length && digit != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>result *= <NUM_LIT><EOL><INDENT><INDENT><INDENT>result += digit<EOL><INDENT><INDENT><INDENT>nextIndex()<EOL><INDENT><INDENT><INDENT>digit = digitOf(pattern[index], <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT>}"}
{"signature": "if (jump.loop != loop) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.markJump(extraEndLocation)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun throwsSpreadEmptyArrayOf() {", "body": "}<EOL><EOL>@Throws(exceptionClasses = <!NON_CONST_VAL_USED_IN_CONSTANT_EXPRESSION!>[<!ANNOTATION_ARGUMENT_MUST_BE_CONST!><!UNRESOLVED_REFERENCE!>UE<!>::class<!>]<!>)<EOL>fun throwsNamedLiteralWithUnresolved() {}"}
{"signature": "val doubleVal =", "body": "<!EVALUATED(<STR_LIT>)!><NUM_LIT><!><EOL>"}
{"signature": "val workingDirFile =", "body": "workingPath.toFile().also { assert(it.isDirectory) }<EOL>"}
{"signature": "val filteredArgs =", "body": "args.asIterable().filterExtractProps(compilerId, daemonOptions, prefix = COMPILE_DAEMON_CMDLINE_OPTIONS_PREFIX)<EOL>"}
{"signature": "var expectedLog =", "body": "<STR_LIT><EOL>"}
{"signature": "val typeCastExpression =", "body": "<EOL><INDENT><INDENT><INDENT>expression.unwrapQualified<KtBinaryExpressionWithTypeRHS> { castExpr, expr -> castExpr.left == expr } ?: return null<EOL>"}
{"signature": "if (notFromAny || notAnInterface) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>baseDispatchReceiver<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val rangesThatAreNotSupposedToBeRendered =", "body": "testFile.extractRangesWithoutRender()<EOL>"}
{"signature": "fun dceTask(body: Action<KotlinJsDce>) {", "body": "<EOL><INDENT><INDENT>project.logger.warn(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val privateTypes =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun setA(t: Any?) {", "body": "}"}
{"signature": "val matchingKind =", "body": "matchingExtensionKinds.singleOrNull() ?: return null<EOL>"}
{"signature": "fun hashCodeOfBool() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, true.hashCode())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, false.hashCode())<EOL><INDENT>}"}
{"signature": "val Shared =", "body": "<STR_LIT><EOL>"}
{"signature": "val sanitizedCollector =", "body": "FilteringMessageCollector(messageCollector, VERBOSE::contains)<EOL>"}
{"signature": "var openMarker =", "body": "false<EOL>"}
{"signature": "val nonAbstractMethodsByNameAndArity =", "body": "nonAbstractMethods.groupBy { it.nameAndArity }<EOL>"}
{"signature": "val CurrentComposerIntrinsic =", "body": "ComposeFqNames.fqNameFor(<STR_LIT>)<EOL>"}
{"signature": "for (i in MS + <NUM_LIT> downTo MS) {", "body": "<EOL><INDENT><INDENT>++t<EOL><INDENT><INDENT>s += i<EOL><INDENT><INDENT>if (t > <NUM_LIT>) throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var innerClass =", "body": "irClass<EOL>"}
{"signature": "for (i in <NUM_LIT>.<NUM_LIT> step <NUM_LIT> step <NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun invariantSeparators() {", "body": "<EOL><INDENT><INDENT>val path = Path(<STR_LIT>) / <STR_LIT> / <STR_LIT><EOL><INDENT><INDENT>assertEquals(<STR_LIT>, path.invariantSeparatorsPathString)<EOL><EOL><INDENT><INDENT>val path<NUM_LIT> = Path(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, path<NUM_LIT>invariantSeparatorsPathString)<EOL><INDENT>}"}
{"signature": "val MEMORY_FILL =", "body": "<STR_LIT><EOL>"}
{"signature": "val capFieldName =", "body": "this.name.javaName.replaceFirstChar(Char::uppercaseChar)<EOL>"}
{"signature": "val isSuperPrimitive =", "body": "mapValueParameterType(superDescriptor, superParameter) is JvmType.Primitive<EOL>"}
{"signature": "val exportedLibraries =", "body": "arguments.exportedLibraries?.toList().orEmpty()<EOL>"}
{"signature": "val commonPsis =", "body": "commonPath.listAllFiles().mapNotNull { createPsiFile(it.path, true) }<EOL>"}
{"signature": "val sharedScripts =", "body": "sharedConfiguration[ScriptEvaluationConfiguration.jvm.scriptsInstancesSharingMap]<EOL>"}
{"signature": "if (checkIsString(x)) {", "body": "<EOL><INDENT><INDENT>x.length<INDENT> }"}
{"signature": "when (argumentExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtCallExpression -> getArgumentExpressionsForArrayCall(argumentExpression, trace)<EOL><INDENT><INDENT><INDENT>is KtCollectionLiteralExpression -> getArgumentExpressionsForCollectionLiteralCall(argumentExpression, trace)<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val fileCollectionDependencies =", "body": "mutableSetOf<FileCollectionExternalGradleDependency>()<EOL>"}
{"signature": "val deploySourceSet =", "body": "sourceSets.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "if (typeArguments[i].type?.isExportable(session, currentlyProcessed) != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (project.isConfigurationCacheEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>additionalTags.add(StatTag.CONFIGURATION_CACHE)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun unfoldGetClass(element: IrGetClass, callStack: CallStack) {", "body": "<EOL><INDENT>callStack.pushSimpleInstruction(element)<EOL><INDENT>callStack.pushCompoundInstruction(element.argument)<EOL>}"}
{"signature": "val cacheMaxSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "val upperBoundBean =", "body": "createKotlinTypeBean(type.flexibleUpperBound(c.typeTable))<EOL>"}
{"signature": "fun visitDanglingModifierList(danglingModifierList: FirDanglingModifierList, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicDeclarationCheckers.check(danglingModifierList, data)<EOL><INDENT>}"}
{"signature": "if (isNativeObject(descriptor) && isCompanionObject(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return suggest(descriptor.containingDeclaration!!, bindingContext)<EOL><INDENT><INDENT>}"}
{"signature": "for (tcb in methodNode.tryCatchBlocks) {", "body": "<EOL><INDENT><INDENT><INDENT>usedLabels.add(tcb.start)<EOL><INDENT><INDENT><INDENT>usedLabels.add(tcb.end)<EOL><INDENT><INDENT><INDENT>addCfgEdgeToLabel(tcb.start, tcb.handler)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(jr: JRecord) {", "body": "<EOL><INDENT>JRecord(<NUM_LIT>, <STR_LIT>)<EOL><EOL><INDENT>jr.x()<EOL><INDENT>jr.y()<EOL><EOL><INDENT>jr.<!FUNCTION_CALL_EXPECTED!>x<!><EOL><INDENT>jr.<!FUNCTION_CALL_EXPECTED!>y<!><EOL>}"}
{"signature": "val expectedText =", "body": "expectedFile.readText()<EOL>"}
{"signature": "val ratioConfInt =", "body": "min(abs(minRatio - mean), abs(maxRatio - mean))<EOL>"}
{"signature": "val declarationResolveState =", "body": "resolveState<EOL>"}
{"signature": "val encodedBytes =", "body": "ByteArray(encodedText.length) { encodedText[it].code.toByte() }<EOL>"}
{"signature": "if (current == to) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val valuesFunction =", "body": "irClass.findStaticMethod(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "fun commonSourceSet(sourceSetName: String) {", "body": "<EOL><INDENT><INDENT>commonSourceSets = listOf(sourceSetName)<EOL><INDENT><INDENT>enableMultiplatform(true)<EOL><INDENT>}"}
{"signature": "val previousDataValue =", "body": "edgesMap[instruction]<EOL>"}
{"signature": "if (type.argumentsCount() > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.replaceType(type.replaceArgumentsDeeply(replacement))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val buildData =", "body": "Gson().fromJson(jsonObject, BuildFinishStatisticsData::class.java)<EOL>"}
{"signature": "if (k < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>t = doubleSetWord(d = t, hi = <NUM_LIT>x<NUM_LIT>ff<NUM_LIT> - (<NUM_LIT>x<NUM_LIT> shr k))  <EOL><INDENT><INDENT><INDENT>y = t - (e - x)<EOL><INDENT><INDENT><INDENT>y = doubleSetWord(d = y, hi = __HI(y) + (k shl <NUM_LIT>)) <EOL><INDENT><INDENT>}"}
{"signature": "if (annotation.annotations.hasAnnotation(StandardClassIds.Annotations.AssociatedObjectKey.asSingleFqName())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsWasm.ASSOCIATED_OBJECT_INVALID_BINDING.on(annotationCall.source.getPsi() ?: declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val INLINE_MARKER_BEFORE_SUSPEND_ID =", "body": "<NUM_LIT><EOL>"}
{"signature": "val psiTypeProviderImpl =", "body": "KtFirPsiTypeProvider(this, token)<EOL>"}
{"signature": "var cOrDCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val RETURNS_EFFECT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (trivialConstraintTypeInferenceOracle.isSuitableResultedType(constraint.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>properConstraintPresent = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>nonNothingProperConstraintPresent = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (o ?: true) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (<!SENSELESS_COMPARISON!>x != (null)<!>) {", "body": "}"}
{"signature": "var approximated =", "body": "false<EOL>"}
{"signature": "var fieldInlinedClass =", "body": "erased<EOL>"}
{"signature": "val tempRootDir =", "body": "System.getProperty(<STR_LIT>) ?: System.getProperty(<STR_LIT>) ?: <STR_LIT><EOL>"}
{"signature": "if (right != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateInstructions(right)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kaptStubs =", "body": "converter.convert()<EOL>"}
{"signature": "val debugAnnotations =", "body": "mutableListOf<ActualDiagnostic>()<EOL>"}
{"signature": "if (expectedClass != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertions.assertEquals(expectedClass, containingClass)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val pathSeparatorChars =", "body": "<STR_LIT>.let { if (File.separatorChar == '/') it else it + File.separator }.toCharArray()<EOL>"}
{"signature": "for ((groupDescription, frameworkGroup) in frameworkGroups) {", "body": "<EOL><INDENT><INDENT>project.createFatFramework(groupDescription, frameworkGroup)<EOL><INDENT>}"}
{"signature": "for (i in NA .. NB) {", "body": "<EOL><INDENT><INDENT>xs.add(i)<EOL><INDENT><INDENT>if (xs.size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val BYTE_SIZE_BYTES =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun fqName() {", "body": "<EOL><EOL>}"}
{"signature": "val I<NUM_LIT>_ADD =", "body": "<STR_LIT><EOL>"}
{"signature": "for (j in <NUM_LIT> until n) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val s = d[i][k] + d[k][j]<EOL><INDENT><INDENT><INDENT><INDENT>if (s < d[i][j]) d[i][j] = s<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun doSomethingNew() {", "body": "<EOL><INDENT>properFunctionWasClled = true<EOL>}"}
{"signature": "val methodOrigin =", "body": "this.kotlinOrigin<EOL>"}
{"signature": "when (val name = descriptor.name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>SpecialNames.IMPLICIT_SET_PARAMETER -> Name.identifier(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>else -> name<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!withJdk && !isJava<NUM_LIT>OrLater()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>put(Option.valueOf(<STR_LIT>), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val sharedApiClassesClassLoader =", "body": "SharedApiClassesClassLoader()<EOL>"}
{"signature": "val exitPoints =", "body": "firTargets<EOL>"}
{"signature": "if (string == null) {", "body": "<EOL><INDENT><INDENT>NullPointer(runtime.objHeaderType)<EOL><INDENT>}"}
{"signature": "val startMemberWithScope =", "body": "MemberWithBaseScope(classMemberSymbol, this)<EOL>"}
{"signature": "val expectedDeclarationsString =", "body": "expectedDeclarations.joinToString(separator = <STR_LIT>, prefix = <STR_LIT>)<EOL>"}
{"signature": "if (hasSubject) {", "body": "<EOL><INDENT><INDENT><INDENT>WhenConditionConvertedResults(result, false)<EOL><INDENT><INDENT>}"}
{"signature": "var rootVisited =", "body": "false<EOL>"}
{"signature": "val cliOptions =", "body": "KaptCliOption.values().mapNotNull { Option(it.cliToolOption ?: return@mapNotNull null, it) }<EOL>"}
{"signature": "while (predicate(str[i]) && i < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>i++<EOL><INDENT>}"}
{"signature": "val FQ_NAMES_IN_TYPES_ANNOTATIONS_WHITELIST =", "body": "DescriptorRenderer.FQ_NAMES_IN_TYPES_WITH_ANNOTATIONS.withAnnotationsWhitelist()<EOL>"}
{"signature": "val makeResult =", "body": "make(name)<EOL>"}
{"signature": "fun callsIntTailCall() {", "body": "returnsInt() }"}
{"signature": "val enabledOnCI =", "body": "annotation.enabledOnCI<EOL>"}
{"signature": "val llvmBin =", "body": "<STR_LIT><EOL>"}
{"signature": "package doesn't need to correspond to a directory structure like in Java.", "body": "<EOL>"}
{"signature": "val metadata =", "body": "getClassMetadata(klass.symbol)<EOL>"}
{"signature": "var subjectEvaluated =", "body": "<NUM_LIT><EOL>"}
{"signature": "val intStubType =", "body": "ClassifierStubType(Classifier.topLevel(<STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "val sinceKotlinFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val safeReceiverCondition =", "body": "foldedWhen.branches[<NUM_LIT>].condition<EOL>"}
{"signature": "val loweredHeader =", "body": "lowerHeader(iteratorVariable, loopHeader)<EOL>"}
{"signature": "val PRESET_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun enterBlock(block: FirBlock) {", "body": "<EOL><INDENT><INDENT>graphBuilder.enterBlock(block).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "if (target.family.isAppleFamily) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolveToolchainExecutable(target, executable)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nextBodyEndLV =", "body": "loop.condition.accept(this, curBodyStartLV)<EOL>"}
{"signature": "val newHash =", "body": "signatureHashCalculator[it.key]<EOL>"}
{"signature": "val freeArgsBackup =", "body": "args.freeArgs.toList()<EOL>"}
{"signature": "val declarationAtCaret =", "body": "testServices.expressionMarkerProvider.getElementOfTypeAtCaret<KtDeclaration>(ktFile)<EOL>"}
{"signature": "fun testNullableC(foo: C?, bar: C?) {", "body": "<EOL><INDENT>if (foo != null && foo == bar) bar.c()<EOL>}"}
{"signature": "val create<NUM_LIT>Function =", "body": "coroutineBaseClass.owner.simpleFunctions()<EOL>"}
{"signature": "val typeInfoProviderImpl =", "body": "KtFirTypeInfoProvider(this, token)<EOL>"}
{"signature": "fun resetToResolved() {", "body": "<EOL><INDENT><INDENT>lowestApplicability = CandidateApplicability.RESOLVED<EOL><INDENT><INDENT>_diagnostics.clear()<EOL><INDENT>}"}
{"signature": "var xb =", "body": "<NUM_LIT>toByte()<EOL>"}
{"signature": "val errRes =", "body": "evalFile(File(<STR_LIT>))<EOL>"}
{"signature": "val KOTLIN_MODULE_GROUP =", "body": "<STR_LIT><EOL>"}
{"signature": "var modified =", "body": "false<EOL>"}
{"signature": "fun runOnModule(module: LLVMModuleRef, isSafepointInliningAllowed: Boolean) {", "body": "<EOL><INDENT><INDENT>LLVMKotlinRemoveRedundantSafepoints(module, if (isSafepointInliningAllowed) <NUM_LIT> else <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val publicIdSignatureComputer =", "body": "PublicIdSignatureComputer(mangler)<EOL>"}
{"signature": "val exceptionMessage =", "body": "irConcat()<EOL>"}
{"signature": "val testingMatchers =", "body": "configuration.get(ComposeConfiguration.TEST_STABILITY_CONFIG_KEY)<EOL>"}
{"signature": "val dependencyTransformationTaskOutputs =", "body": "project.files(dependencyTransformationTask.map { it.outputLibraryFiles })<EOL>"}
{"signature": "val selfSymbols =", "body": "CodeFragmentDeclarationCollector().apply { codeFragment.accept(this) }.symbols.toSet()<EOL>"}
{"signature": "val types =", "body": "mapVector { readValueType() }<EOL>"}
{"signature": "val androidSdkPath =", "body": "project.configurations.findByName(<STR_LIT>)?.singleFile<EOL>"}
{"signature": "if (cs != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(cs)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>buffer = <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((firParameter, irParameter) in function.valueParameters.zip(valueParameters.drop(contextReceivers.size))) {", "body": "<EOL><INDENT><INDENT><INDENT>localStorage.putParameter(firParameter, irParameter.symbol)<EOL><INDENT><INDENT>}"}
{"signature": "val sortedRandomInts =", "body": "randomInts.sorted()<EOL>"}
{"signature": "val UNDER_MIGRATION_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val ANONYMOUS_PARAMETER_NAME_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val epic =", "body": "expression.getIntConstArgumentOrNull(<NUM_LIT>) ?: return super.visitCall(expression, data) as IrExpression<EOL>"}
{"signature": "fun visitPackageDirective(packageDirective: KtPackageDirective) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitPackageDirective(packageDirective)<EOL><INDENT><INDENT><INDENT>block(packageDirective)<EOL><INDENT><INDENT>}"}
{"signature": "if (fileData != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>field = ResourceTable()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!outputFile.exists() || lockFileAutoReplace.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>super.copy()<EOL><INDENT><INDENT>}"}
{"signature": "val allJsFiles =", "body": "additionalFiles + inputJsFilesBefore + artifactsPaths + commonFiles + additionalMainFiles + inputJsFilesAfter<EOL>"}
{"signature": "val joinedCParameters =", "body": "cFunctionParameters.joinToString { (name, type) -> <STR_LIT> }<EOL>"}
{"signature": "val allVars =", "body": "<EOL><INDENT><INDENT><INDENT>if (nonTrivialVariables.isEmpty())<EOL>"}
{"signature": "val descendingByDomainCapacityUnsigned =", "body": "listOf(ULong, UInt, UShort, UByte)<EOL>"}
{"signature": "fun bar(a: A<*>) {", "body": "<EOL><INDENT><INDENT>a.<!INVISIBLE_REFERENCE!>t<!><INDENT> }"}
{"signature": "if (value is BoxedBasicValue && insn.opcode == Opcodes.ASTORE) {", "body": "<EOL><INDENT><INDENT><INDENT>value.descriptor.addVariableIndex((insn as VarInsnNode).`var`)<EOL><INDENT><INDENT>}"}
{"signature": "val shortModuleName =", "body": "arguments.shortModuleName<EOL>"}
{"signature": "if (setterSignature != null) {", "body": "<EOL><INDENT><INDENT><INDENT>hasSignature = true<EOL><INDENT><INDENT><INDENT>composedSignature.setter = setterSignature!!.toJvmMethodSignature(c)<EOL><INDENT><INDENT>}"}
{"signature": "val jsClosureCallerCall =", "body": "irCall(jsClosureCaller)<EOL>"}
{"signature": "val sourceSetName =", "body": "this<EOL>"}
{"signature": "if (type.unwrapTypedefs() is RecordType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>BridgeTypedNativeValue(BridgedType.NATIVE_PTR, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun used(a: Any) {", "body": "}"}
{"signature": "if (compiler is K<NUM_LIT>JSCompiler) {", "body": "<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>args.add((classpath + PathUtil.kotlinPathsForCompiler.jsStdLibKlibPath).joinToString(File.pathSeparator))<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>args.add(output.path)<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>args.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (opcode == Opcodes.GETSTATIC && isInlineParameterLikeOwner(owner)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>onAnonymousConstructorCallOrSingletonAccess(owner)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (kind == Kind.VALUE_OF) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addReference(java.lang.IllegalArgumentException::class.qualifiedName)<EOL><INDENT><INDENT><INDENT><INDENT>addReference(java.lang.NullPointerException::class.qualifiedName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (finallyBlockInfo in finallyBlocks) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>finallyBlockInfo.generateFinallyBlock()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (name in inlineFuns) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>x.isInline = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (reports.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return ResultWithDiagnostics.Failure(reports)<EOL><INDENT><INDENT>}"}
{"signature": "val transformedResult =", "body": "aTry.tryResult.transform(transformer, null)<EOL>"}
{"signature": "fun resumeWith(value: Result<Consumer>) {", "body": "<EOL><INDENT><INDENT><INDENT>res = value.getOrThrow()<EOL><INDENT><INDENT>}"}
{"signature": "val insertIndex =", "body": "extractedUnder?.let { newContainer.statements.indexOf(it) } ?: <NUM_LIT><EOL>"}
{"signature": "if (languageVersion != null && VersionComparatorUtil.compare(languageVersion, apiVersion) < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>apiVersion = languageVersion<EOL><INDENT>}"}
{"signature": "val smapStack =", "body": "mutableListOf<DataForIrInlinedFunction>()<EOL>"}
{"signature": "val frontendKey =", "body": "if (frontend.key == <STR_LIT>) <STR_LIT> else frontend.key<EOL>"}
{"signature": "val visitedMultifileFacades =", "body": "linkedSetOf<String>()<EOL>"}
{"signature": "val eMask =", "body": "<NUM_LIT>x<NUM_LIT>F<NUM_LIT>"}
{"signature": "val NOT_DEFINED =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testRandomFlagArgumentsMetadata() {", "body": "<EOL><INDENT><INDENT>doRandomFlagArgumentsTest<K<NUM_LIT>MetadataCompilerArguments>()<EOL><INDENT>}"}
{"signature": "fun testFirstSerializer() {", "body": "<EOL><INDENT>FirstSerializer.serializeA(A())<EOL><INDENT>FirstSerializer.serializeB(B())<EOL><INDENT>FirstSerializer.serializeC(C())<EOL><INDENT>FirstSerializer.serializeD(D())<EOL>}"}
{"signature": "fun test_<NUM_LIT>(b: B<Int>, x: Int, inv: Inv<Int>) {", "body": "<EOL><INDENT>b.<!OVERLOAD_RESOLUTION_AMBIGUITY!>take<!>(x)<EOL><INDENT>b.<!NONE_APPLICABLE!>take<!>(null)<EOL><INDENT>b.<!OVERLOAD_RESOLUTION_AMBIGUITY!>takeInv<!>(inv)<EOL>}"}
{"signature": "val storage =", "body": "LockBasedStorageManager(<STR_LIT>)<EOL>"}
{"signature": "if (continueTargetStatement != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>defaultContinueTarget = continueTargetStatement<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsonFile =", "body": "File(specTestsDir, jsonFileName)<EOL>"}
{"signature": "val UNKNOWN =", "body": "listOf(Person(<STR_LIT>, <STR_LIT>), Person(<STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "val beforeParamsKey =", "body": "noQuoteKey.substringBefore(<STR_LIT>)<EOL>"}
{"signature": "for (superType in classDeclaration.resolvedSuperTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collectDslMarkerAnnotations(context, superType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val F<NUM_LIT>_MAX =", "body": "<STR_LIT><EOL>"}
{"signature": "val containingDeclarationId =", "body": "ClassId(classId.packageFqName, parentId, isLocal = false)<EOL>"}
{"signature": "if (!includeLocalInheritors && candidate.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val firParser =", "body": "module.directives.singleOrZeroValue(FirDiagnosticsDirectives.FIR_PARSER)<EOL>"}
{"signature": "val sourcesProperty =", "body": "it as? JsonArray ?:<EOL>"}
{"signature": "val JAVA_ENHANCEMENT_FOR_ALL_DECLARED_MEMBERS =", "body": "scopeSessionKey<FirRegularClassSymbol, FirContainingNamesAwareScope>()<EOL>"}
{"signature": "val fragments =", "body": "backendEngine.splitIntoFragments(irModule)<EOL>"}
{"signature": "val dataOutputStream =", "body": "DataOutputStream(memoryStream)<EOL>"}
{"signature": "val STRUCTURE_ENCODER_CLASS =", "body": "<STR_LIT><EOL>"}
{"signature": "fun Layout(content: @Composable () -> Unit) {", "body": "}<EOL><INDENT><INDENT><INDENT>@Composable fun Box() {}"}
{"signature": "fun translateClass(classId: ClassId) {", "body": "<EOL><INDENT><INDENT>val classOrObjectSymbol = getClassOrObjectSymbolByClassId(classId) ?: return<EOL><INDENT><INDENT>translateClassOrObjectSymbol(classOrObjectSymbol)<EOL><INDENT>}"}
{"signature": "val enumEntryProtos =", "body": "classProto.enumEntryList.associateBy { c.nameResolver.getName(it.name) }<EOL>"}
{"signature": "fun resolveToExtension() {", "body": "<EOL><INDENT>val (<!PROPERTY_AS_OPERATOR!>uwu<!>) = X() }"}
{"signature": "if (element.endOffset < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sourceRangeInfo = sourceRangeInfo.copy(endLineNumber = <NUM_LIT>, endColumnNumber = <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val invokeFunction =", "body": "invocableFunctionClass.functions.single { it.name == OperatorNameConventions.INVOKE }<EOL>"}
{"signature": "val HEX_SIGNIFICANT =", "body": "<STR_LIT>"}
{"signature": "val multiplatform =", "body": "multiplatformExtensionOrNull ?: return@KotlinProjectSetupCoroutine<EOL>"}
{"signature": "if (index < rightBound) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>curSymb = testString[index]<EOL><INDENT><INDENT><INDENT><INDENT>TIndex = curSymb.toInt() - Lexer.TBase<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val loopedSuperTypeRefs =", "body": "supertypeComputationSession.findLoopFor(declaration)<EOL>"}
{"signature": "val hadCommentsMode =", "body": "commentsMode<EOL>"}
{"signature": "val emptyCollection =", "body": "listOf<Any>()<EOL>"}
{"signature": "for (variable in node.variables) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>variable.name = computeNewVariableName(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>variable.name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.scopeNumber + inlinedScopes,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (exact in listOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(abs(exact), acosh(cosh(exact)))<EOL><INDENT><INDENT>}"}
{"signature": "if (!testDataDir.exists() && !testDataDir.mkdirs()) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val classNestingLevel =", "body": "generateSequence(classId, ClassId::outerClassId).count()<EOL>"}
{"signature": "val DIST_FOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "val filteredErr =", "body": "err.linesSplitTrim().filterNot { it.startsWith(<STR_LIT>) }<EOL>"}
{"signature": "val jsc<NUM_LIT> =", "body": "JavaSingletonCollection<NUM_LIT>(<NUM_LIT>) as java.util.Collection<Int><EOL>"}
{"signature": "if (base<NUM_LIT>DecodeMap[symbol] != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return sourceIndex<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setupSettingsGradle() {", "body": "<EOL><INDENT><INDENT>addFileWithContent(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT>include ':app'<EOL><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.enumEntryAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.enumEntryAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val adaptedType =", "body": "callableReferenceAccess.resolvedType.toIrType() as IrSimpleType<EOL>"}
{"signature": "if (parameter.getVariance() != TypeVariance.INV) {", "body": "<EOL><INDENT><INDENT><INDENT>asOut = parameter.getVariance() == TypeVariance.OUT<EOL><INDENT><INDENT>}"}
{"signature": "val valueSymbols =", "body": "function.valueParameters.zip(valueParameters)<EOL>"}
{"signature": "val MULTIFILE_CLASS_FACADES =", "body": "<STR_LIT><EOL>"}
{"signature": "if (foo<NUM_LIT>x != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val isBaseOrOtherCapturedType =", "body": "otherConstraint.type.isCapturedType() || causeOfIncorporationConstraint.type.isCapturedType()<EOL>"}
{"signature": "for (i in <NUM_LIT>.nonConstOne) {", "body": "<EOL><INDENT><INDENT><INDENT>if (<STR_LIT>.length > <NUM_LIT>) continue<EOL><INDENT><INDENT>}"}
{"signature": "if (config.omitFrameworkBinary) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val innerCollector =", "body": "PrintingMessageCollector(compilerMessagesStream, MessageRenderer.WITHOUT_PATHS, false)<EOL>"}
{"signature": "val fqnPath =", "body": "file.fqName<EOL>"}
{"signature": "val branchResult =", "body": "branch.result.accept(this, conditionsResult)<EOL>"}
{"signature": "if (!result) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = predicate(sym)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val abstractMember =", "body": "getSingleAbstractMethodOrNull(descriptor) ?: return<EOL>"}
{"signature": "if (call.symbol === irBuiltins.eqeqSymbol && !lhsType.isNullable() && !lhsType.isNothing()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return irCall(call, lhsType.findEqualsMethod().symbol, argumentsAsReceivers = true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.multiFieldValueClassUnderlyingNameCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkStringEquals(old.getMultiFieldValueClassUnderlyingName(i), new.getMultiFieldValueClassUnderlyingName(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun fn<NUM_LIT>(x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any, x<NUM_LIT>: Any) {", "body": "}<EOL><EOL>val fns = arrayOf<Any>(::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>   ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>   ::fn<NUM_LIT>, ::fn<NUM_LIT>, ::fn<NUM_LIT>)<EOL><EOL>inline fun <reified T> reifiedAsSucceeds(x: Any, operation: String) {<EOL><INDENT>x as T<EOL>}"}
{"signature": "val testPath =", "body": "path.replace('\\\\', '/')<EOL>"}
{"signature": "val serializerSymbol =", "body": "customSerializerType?.toRegularClassSymbol(session)<EOL>"}
{"signature": "var useParameterNames =", "body": "forceParameterNames<EOL>"}
{"signature": "val typeOperand =", "body": "effectiveCheckType(expression.typeOperand)<EOL>"}
{"signature": "fun resumeContinuation(continuation: Continuation<Any?>, value: Any?) {", "body": "<EOL><INDENT>continuation.resume(value)<EOL>}"}
{"signature": "val ARCHITECTURE_NAMES =", "body": "Architecture.entries.map { it.name }<EOL>"}
{"signature": "for (r in rs) {", "body": "<EOL><INDENT><INDENT>r.run()<EOL><INDENT>}"}
{"signature": "val asmType =", "body": "mapping.asmType.reify(reificationArgument)<EOL>"}
{"signature": "fun dependent() {", "body": "<EOL><INDENT>val y = <NUM_LIT><EOL>}"}
{"signature": "fun runInInverseOrder(x: Any?, a: () -> Unit, b: () -> Unit) {", "body": "<EOL><INDENT>b()<EOL><INDENT>a()<EOL>}"}
{"signature": "if (overridesAnyBase(klass)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>baseDescendants += klass<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!AbstractTypeChecker.isSubtypeOf(context.session.typeContext, returnedExpressionType, expectedReturnType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>returnedExpression.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirJvmErrors.TYPE_MISMATCH_WHEN_FLEXIBILITY_CHANGES,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedReturnType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>returnedExpressionType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (f() != null) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val iosX<NUM_LIT>Test =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val betterFrom =", "body": "from.nonFillerFirstChildOrSelf(tree)<EOL>"}
{"signature": "fun foo(y: T) {", "body": "<EOL><INDENT><INDENT>x = y<EOL><INDENT>}"}
{"signature": "fun assertCountOverflow(f: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>val ex = assertFailsWith<ArithmeticException>(block = f)<EOL><INDENT><INDENT><INDENT>assertTrue(ex.message!!.contains(<STR_LIT>, ignoreCase = true))<EOL><INDENT><INDENT>}"}
{"signature": "if (breakTarget in nodes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nodes += x<EOL><INDENT><INDENT><INDENT><INDENT>childrenInSet = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val LINE =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val stringProperties =", "body": "CompilerArgumentsContentProspector.getStringCompilerArgumentProperties(T::class)<EOL>"}
{"signature": "fun commonThrow() {", "body": "<EOL><INDENT>throw RuntimeException(<STR_LIT>)<EOL>}"}
{"signature": "val jsSliceArrayLikeFromIndex =", "body": "context.intrinsics.jsSliceArrayLikeFromIndex<EOL>"}
{"signature": "val expectedWalk =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>).map { <STR_LIT> }.toSet()<EOL>"}
{"signature": "fun doTestByMainModuleAndOptionalMainFile(mainFile: KtFile?, mainModule: KtTestModule, testServices: TestServices) {", "body": "<EOL><INDENT><INDENT>val ktFiles = mainModule.ktFiles<EOL><INDENT><INDENT>doLightClassTest(ktFiles, mainModule, testServices)<EOL><INDENT>}"}
{"signature": "package ext.", "body": "jspackage.name<EOL>"}
{"signature": "if (<STR_LIT> !in project.javaSourceSets.names) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val stdlibBuiltInsModule =", "body": "runtimeKlibs.single { it.name == Name.special(<STR_LIT>) }.builtIns.builtInsModule<EOL>"}
{"signature": "val lamO =", "body": "{ <STR_LIT> }<EOL>"}
{"signature": "val MinUS =", "body": "UShort.MIN_VALUE<EOL>"}
{"signature": "val afterMarker =", "body": "beforeMarker.findNextOrNull { isAfterUnboxInlineClassMarker(it) }<EOL>"}
{"signature": "val withModuleSystem =", "body": "testWithModuleSystem(testServices)<EOL>"}
{"signature": "val getImplMethodName =", "body": "irClass.addFunction(<STR_LIT>, irBuiltIns.stringType)<EOL>"}
{"signature": "val apiElements =", "body": "project.configurations.getByName(apiElementsConfigurationName)<EOL>"}
{"signature": "if (classValue.arrayDimensions > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>data.builder.arrayDimensionCount = classValue.arrayDimensions<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun f(o: Out<Out<*>>, i: In<In<*>>, inv: Inv<Inv<*>>) {", "body": "<EOL><INDENT>choose<NUM_LIT>(o)<EOL><INDENT><!NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>choose<NUM_LIT><!>(i)<EOL><INDENT>choose<NUM_LIT>(<!TYPE_MISMATCH!>inv<!>)<EOL>}"}
{"signature": "val boxMethod =", "body": "container.findMethodBySignature(<STR_LIT>, constructorDesc.removeSuffix(<STR_LIT>) + container.jClass.desc)!!<EOL>"}
{"signature": "val containingBlock =", "body": "classOrObject.parent as? KtBlockExpression<EOL>"}
{"signature": "var indexInGroup =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun renderType(type: ConeKotlinType?) {", "body": "<EOL><INDENT><INDENT>if (type == null) return<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>typeRenderer.render(type)<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (parameters.snapshotsDir.isPresent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TaskOutputsBackup(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fileSystemOperations,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameters.buildDir,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameters.snapshotsDir,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameters.taskOutputsToRestore.get(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>logger,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(a: Any) {", "body": "}<EOL><INDENT>suspend fun suspendFoo() {}"}
{"signature": "if (hasFlexibleArrayElementVariance) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>typeAnnotations += specialAnnotationsProvider.generateFlexibleArrayElementVarianceAnnotationCall()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(p: String) {", "body": "<EOL><INDENT>val s = <STR_LIT><EOL><INDENT>foo(s)<EOL>}"}
{"signature": "val thenBranchCondition =", "body": "expression.branches[<NUM_LIT>].condition<EOL>"}
{"signature": "val jsCatchBlock =", "body": "it.result.accept(this, context)<EOL>"}
{"signature": "if (containingClass != null && ktFunction != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkParcelableClassMethod(descriptor, containingClass, ktFunction, trace)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lastUpdate =", "body": "AtomicLong(<NUM_LIT>)<EOL>"}
{"signature": "val _typeParameterIdToIndex =", "body": "HashMap<Int, Int>()<EOL>"}
{"signature": "fun visitSimpleFunction(simpleFunction: FirSimpleFunction, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitSimpleFunction(simpleFunction)<EOL><INDENT>}"}
{"signature": "fun onFinish(<EOL><INDENT><INDENT>event: TaskFinishEvent, buildOperation: BuildOperationRecord,<EOL><INDENT><INDENT>parameters: BuildReportParameters,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>addHttpReport(event, buildOperation, parameters)<EOL><INDENT>}"}
{"signature": "fun contains() {", "body": "<EOL><INDENT><INDENT>assertTrue(data.contains(<STR_LIT>))<EOL><INDENT><INDENT>assertTrue(data.contains(<STR_LIT>))<EOL><INDENT><INDENT>assertFalse(data.contains(<STR_LIT>))<EOL><INDENT><INDENT>assertFalse(data.contains<Any>(<NUM_LIT>))<EOL><INDENT><INDENT>assertFalse(empty.contains(<STR_LIT>))<EOL><INDENT><INDENT>assertFalse(empty.contains(<STR_LIT>))<EOL><INDENT><INDENT>assertFalse(empty.contains(<STR_LIT>))<EOL><INDENT><INDENT>assertFalse(empty.contains<Any>(<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "if (!suiteFunction.body.isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT>val suiteName = JsStringLiteral(classDescriptor.name.toString())<EOL><EOL><INDENT><INDENT><INDENT>parentFun.body.statements += JsInvocation(suiteRef, suiteName, JsBooleanLiteral(classDescriptor.isIgnored), suiteFunction).makeStmt()<EOL><INDENT><INDENT>}"}
{"signature": "val DECLARATION_ORIGIN_STATIC_STANDALONE_THREAD_LOCAL_INITIALIZER =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "if (property.returnType.isSubtypeOf(typeOf<Array<*>?>())) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>assertContentEquals(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedValue as Array<Any?>?, actualValue as Array<Any?>?,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>message<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (javaVersion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>JavaVersion.VERSION_<NUM_LIT>_<NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>JavaVersion.VERSION_<NUM_LIT>_<NUM_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>else -> javaVersion.toString()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val UNRESOLVED_MARKER =", "body": "<STR_LIT><EOL>"}
{"signature": "val nameFromParents =", "body": "parents.joinToString(separator = <STR_LIT>) { suggestLocalName(it as IrDeclarationWithName) }<EOL>"}
{"signature": "val superAsmType =", "body": "typeMapper.mapClass(classDescriptor.getSuperClassNotAny().sure { <STR_LIT> })<EOL>"}
{"signature": "val typeIndex =", "body": "serializeIrType(type)<EOL>"}
{"signature": "val paramsCount =", "body": "declaration.valueParameters.size<EOL>"}
{"signature": "fun visitInitBlockEnterNode(node: InitBlockEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitInitBlockEnterNode(node)<EOL><INDENT>}"}
{"signature": "val frontendKind =", "body": "currentModuleFrontendKind ?: defaultsProvider.defaultFrontend<EOL>"}
{"signature": "if (declaration.kind == ClassKind.ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>classFqnSegments.add(MangleConstant.ENUM_ENTRY_CLASS_NAME)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isConstGetter =", "body": "expression.symbol.owner.property.isConst<EOL>"}
{"signature": "val appBuildGradleKts =", "body": "subProject(<STR_LIT>).buildGradleKts<EOL>"}
{"signature": "fun beforeCollectingForElement(element: FirElement) {", "body": "}<EOL><INDENT>open fun beforeGoingNestedDeclaration(declaration: FirDeclaration, context: CheckerContext) {}"}
{"signature": "var entries =", "body": "ArrayDeque<PathNode>()<EOL>"}
{"signature": "val SECTIONS_IN_FILE_REGEX =", "body": "<STR_LIT><STR_LIT><STR_LIT><EOL>"}
{"signature": "fun testExtensionBoth() {", "body": "<EOL><INDENT>use(C::extensionBoth)<EOL>}"}
{"signature": "val obsoleteMultifileClasses =", "body": "linkedSetOf<String>()<EOL>"}
{"signature": "when (argument) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrStarProjection -> Stability.Unstable<EOL><INDENT><INDENT><INDENT>is IrTypeProjection -> stabilityOf(argument.type, substitutions, currentlyAnalyzing)<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var sealed =", "body": "false<EOL>"}
{"signature": "val unusableSymbols =", "body": "HashMap<IrClassifierSymbol, ExploredClassifier.Unusable>()<EOL>"}
{"signature": "fun visit(stm: Stm?) {", "body": "<EOL><INDENT><INDENT><INDENT>if (stm?.o is Operand) visit(stm.o)<EOL><INDENT><INDENT>}"}
{"signature": "fun deleteDirectory() {", "body": "<EOL><INDENT><INDENT>val dir = createTestFiles()<EOL><EOL><INDENT><INDENT>assertTrue(dir.exists())<EOL><INDENT><INDENT>dir.deleteRecursively()<EOL><INDENT><INDENT>assertFalse(dir.exists())<EOL><INDENT><INDENT>dir.deleteRecursively()<INDENT> }"}
{"signature": "fun setValue(thisRef: HasMutableExtras, property: KProperty<*>, value: T) {", "body": "<EOL><INDENT><INDENT>thisRef.extras[key] = value<EOL><INDENT>}"}
{"signature": "fun set(i: Int, newValue: Float) {", "body": "<EOL><INDENT><INDENT>value = newValue<EOL><INDENT>}"}
{"signature": "val isJvmOrMetadata =", "body": "!session.moduleData.platform.run { isNative() || isJs() || isWasm() }<EOL>"}
{"signature": "val missedConstraints =", "body": "processConstraints(c, typeCheckerState)<EOL>"}
{"signature": "fun scriptDefinitions(vararg fqNames: String) {", "body": "<EOL><INDENT><INDENT>myScriptDefinitions.addAll(fqNames)<EOL><INDENT>}"}
{"signature": "when (val arch = System.getProperty(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT>else -> throw TargetSupportException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val nameSuffix =", "body": "moduleName.substringAfterLast(<STR_LIT>, <STR_LIT>).uppercase()<EOL>"}
{"signature": "if (sourceNode.access and Opcodes.ACC_STATIC == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.addThis(oldObjectType, skipped = false)<EOL><INDENT><INDENT>}"}
{"signature": "val autoCacheableFrom =", "body": "configuration.get(KonanConfigKeys.AUTO_CACHEABLE_FROM)!!<EOL>"}
{"signature": "if (explicitlyDeclaredFunctions[getterName]?.valueParameterSymbols?.isEmpty() == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@mapNotNull null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isSet(access, Opcodes.ACC_NATIVE)) {", "body": "<EOL><INDENT><INDENT>flags = flags or ModifierFlags.NATIVE_MASK<EOL><INDENT>}"}
{"signature": "val receiverDebugKinds =", "body": "receiverGroup?.debugKinds ?: emptyArray()<EOL>"}
{"signature": "val deadCode =", "body": "ArrayList<AbstractInsnNode>()<EOL>"}
{"signature": "fun scopeTest() {", "body": "<EOL><INDENT><INDENT>val a = AA(<NUM_LIT>)<EOL><INDENT><INDENT>val affected: Any = AtomicState(a)<EOL><INDENT><INDENT>check(a.updateToB(affected))<EOL><INDENT><INDENT>val a<NUM_LIT> = AA(<NUM_LIT>)<EOL><INDENT><INDENT>val affected<NUM_LIT>: Any = AtomicState(a<NUM_LIT>)<EOL><INDENT><INDENT>check(a<NUM_LIT>manyProperties(affected<NUM_LIT>))<EOL><INDENT>}"}
{"signature": "import client.", "body": "*<EOL>"}
{"signature": "val typeParameterRef =", "body": "classLike.typeParameters.getOrNull(index)<EOL>"}
{"signature": "val bay =", "body": "Bay()<EOL>"}
{"signature": "val forwardSubstitutionAllowed =", "body": "typeCommonizer.context.enableForwardTypeAliasSubstitution<EOL>"}
{"signature": "val failureMessages =", "body": "ConcurrentLinkedQueue<String>()<EOL>"}
{"signature": "val EXPECTED =", "body": "<STR_LIT>\"Hello, World<EOL>"}
{"signature": "for ((moduleName, _, _) in module.dependsOnDependencies) {", "body": "<EOL><INDENT><INDENT><INDENT>val dependantModule = testServices.dependencyProvider.getTestModule(moduleName)<EOL><INDENT><INDENT><INDENT>processModule(dependantModule)<EOL><INDENT><INDENT>}"}
{"signature": "for (<!NAME_SHADOWING!>i<!> in lastIndex downTo <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this@l<NUM_LIT>add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val par<NUM_LIT> =", "body": "( @bar() (foo())) as String<EOL>"}
{"signature": "fun visitBackingField(backingField: FirBackingField, data: T) {", "body": "<EOL><INDENT><INDENT>visitVariable(backingField, data)<EOL><INDENT>}"}
{"signature": "val irFieldSymbol =", "body": "fieldSymbol.toSymbolForCall() as? IrFieldSymbol ?: return null<EOL>"}
{"signature": "val singleClassSymbol =", "body": "candidateSymbols.singleOrNull() as? FirClassLikeSymbol<EOL>"}
{"signature": "fun serializeFileStub(stub: KotlinFileStub, dataStream: StubOutputStream) {", "body": "<EOL><INDENT><INDENT>dataStream.writeName(stub.getPackageFqName().asString())<EOL><INDENT><INDENT>dataStream.writeBoolean(stub.isScript())<EOL><INDENT>}"}
{"signature": "else if (!fromConstructor && (decl.hasBackingField || decl.delegateFieldSymbol != null)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(decl.source, FirJvmErrors.FIELD_IN_JVM_RECORD, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var symbolBufferLength =", "body": "<NUM_LIT><EOL>"}
{"signature": "val jsCache =", "body": "jpsIncrementalCache as IncrementalJsCache<EOL>"}
{"signature": "val fileSize =", "body": "Random.nextLong(until = <NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>)<EOL>"}
{"signature": "val ROOT_PREFIX_FOR_IDE_RESOLUTION_MODE =", "body": "<STR_LIT><EOL>"}
{"signature": "val declaredParameter =", "body": "stubFunction.valueParameters[i]<EOL>"}
{"signature": "fun dumbWith(obj: Any?, block: Any?.() -> Unit) {", "body": "<EOL><INDENT>obj.block()<EOL>}"}
{"signature": "val propName =", "body": "match.groups[<NUM_LIT>]?.value.orEmpty().trim()<EOL>"}
{"signature": "val linuxMainCompilation =", "body": "kotlin.metadata().compilations.getByName(<STR_LIT>) as KotlinSharedNativeCompilation<EOL>"}
{"signature": "if (projection.isStarProjection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (number == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return listOf(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val namespaceName =", "body": "sanitizeName(name, withHash = false)<EOL>"}
{"signature": "val mutableUsageContexts =", "body": "createUsageContexts(mainCompilation).toMutableSet()<EOL>"}
{"signature": "for ((source, outputs) in sourceToOutput.entrySet()) {", "body": "<EOL><INDENT><INDENT><INDENT>sourceToOutputMap[source] = outputs.toSet()<EOL><INDENT><INDENT>}"}
{"signature": "fun preprocessFile(file: KtFile) {", "body": "<EOL><INDENT><INDENT>if (!file.hasTopLevelCallables()) return<EOL><EOL><INDENT><INDENT>trace.addElementToSlice(FACADE_FILES_BY_FQ_NAME, file.javaFileFacadeFqName, file)<EOL><INDENT><INDENT>trace.addElementToSlice(FACADE_FILES_BY_PACKAGE_NAME, file.javaFileFacadeFqName.parent(), file)<EOL><INDENT>}"}
{"signature": "if (visibility == Visibilities.Local) {", "body": "<EOL><INDENT><INDENT><INDENT>return created<EOL><INDENT><INDENT>}"}
{"signature": "val NO_FLAG_LOCAL =", "body": "<NUM_LIT><EOL>"}
{"signature": "val importString =", "body": "<STR_LIT> + KtCodeFragment.IMPORT_SEPARATOR + <STR_LIT><EOL>"}
{"signature": "val crashedModuleGroups =", "body": "crashedModules.groupBy { it.exceptionMessage.take(<NUM_LIT>) }<EOL>"}
{"signature": "if (hasDispatchReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.addThis(lambdaClassType, skipped = true).functionalArgument = this<EOL><INDENT><INDENT>}"}
{"signature": "val signatureSerializer =", "body": "JvmSignatureSerializerImpl(stringTable)<EOL>"}
{"signature": "for (angle in listOf(Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(sin(angle).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertTrue(cos(angle).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertTrue(tan(angle).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (this is FirResolvedQualifier && callableReferenceAccess.hasQuestionMarkAtLHS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>replaceIsNullableLHSForCallableReference(true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val conventionMethodResolvedCall =", "body": "getOrFail(BindingContext.DELEGATED_PROPERTY_RESOLVED_CALL, setterDescriptor)<EOL>"}
{"signature": "val contextGetter =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continuationClass.owner.declarations.filterIsInstance<IrSimpleFunction>()<EOL>"}
{"signature": "if (b!!) {", "body": "<EOL><INDENT><INDENT>val m = Class::fun_<NUM_LIT><EOL><INDENT>}"}
{"signature": "fun visitExpressionBody(body: IrExpressionBody) {", "body": "<EOL><INDENT><INDENT>body.expression.accept(this, null)<EOL><INDENT>}"}
{"signature": "val simpleIdentifierRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val filePath =", "body": "KtTestUtil.getFilePath(source.file) + if (source.file.isDirectory) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val REFINE =", "body": "ClassId(FqName.ROOT, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val TEST_ANNOTATIONS =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "if (function is IrSimpleFunction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>function.overriddenSymbols = replacements.replaceOverriddenSymbols(function)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val filesWithAtLeastWeaklyCompatibleExpects =", "body": "compatibility[ExpectActualMatchingCompatibility.MatchedSuccessfully]<EOL>"}
{"signature": "val currentPrefixes =", "body": "prefixesToPrint<EOL>"}
{"signature": "if (!TypeUtils.noExpectedType(expectedType) && !expectedType.isMarkedNullable && !expectedType.isFlexible()) {", "body": "<EOL><INDENT><INDENT><INDENT>report(UNSAFE_CALL_ON_PARTIALLY_DEFINED_RESOURCE.on(calleeExpression))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var transitiveHash =", "body": "inlineFunctionFlatHash<EOL>"}
{"signature": "var bodyDependent =", "body": "ctor + <NUM_LIT><EOL>"}
{"signature": "val matchedReportedInfos =", "body": "mutableSetOf<CodeMetaInfo>()<EOL>"}
{"signature": "val somethingElse =", "body": "<NUM_LIT><EOL>"}
{"signature": "val candidateFinder =", "body": "SubstitutionCandidateFinder()<EOL>"}
{"signature": "if (hasExtension(KlibMetadataProtoBuf.packageFqName)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.packageFqName)<EOL><INDENT>}"}
{"signature": "if (disposeOnSuccess || failed) {", "body": "<EOL><INDENT><INDENT><INDENT>Disposer.dispose(disposable)<EOL><INDENT><INDENT>}"}
{"signature": "val optionLength =", "body": "prefix.length + matchingOption!!.length<EOL>"}
{"signature": "val newWhen =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.run { IrWhenImpl(startOffset, endOffset, unitType, origin, newBranches) }<EOL>"}
{"signature": "val countersFile =", "body": "<STR_LIT>.storageFile<EOL>"}
{"signature": "import using the MPP import mechanism\",<EOL>.", "body": ""}
{"signature": "val nullable =", "body": "::nullable.returnType<EOL>"}
{"signature": "fun withCopy() {", "body": "<EOL><INDENT><INDENT><INDENT>builder.wantsCopy = true<EOL><INDENT><INDENT>}"}
{"signature": "if (suppressApiVersionGreaterThanLanguageVersionError) {", "body": "<EOL><INDENT><INDENT><INDENT>collector.report(WARNING, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (valueParameter.name != SpecialNames.NO_NAME_PROVIDED) {", "body": "<EOL><INDENT><INDENT><INDENT>printer.print(valueParameter.name.toString() + <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (it == null && javaVersion < JavaVersion.VERSION_<NUM_LIT>_<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw GradleException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val renderedDescriptor =", "body": "DescriptorRenderer.COMPACT_WITH_SHORT_TYPES.render(badSignatureOverriddenDescriptor)<EOL>"}
{"signature": "val classFromStdlib =", "body": "stdlib.getEntry(KotlinVersion::class.java.name.replace(<STR_LIT>, <STR_LIT>) + <STR_LIT>)<EOL>"}
{"signature": "val profile =", "body": "profiler.execute(<STR_LIT>)<EOL>"}
{"signature": "val kPropertyType =", "body": "getKPropertyTypeForLocalDelegatedProperty(variableDescriptor)<EOL>"}
{"signature": "if (BackReferenceHandling.captureLargestValidIndex) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val match = pattern.toRegex().find(<STR_LIT>)!!<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, match.value)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, match.groups[<NUM_LIT>]?.value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TYPE_VARIABLE_NAME_PREFIX_FOR_CR_PARAMETER_TYPE =", "body": "<STR_LIT><EOL>"}
{"signature": "val containingSymbolOrSelf =", "body": "symbol.containingSymbolOrSelf as KtSymbolWithKind<EOL>"}
{"signature": "val dynamicCacheInstallName =", "body": "File(outputName).cacheBinaryPart().child(cacheFileName).absolutePath<EOL>"}
{"signature": "for ((index, cell) in row.cells.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(cell.padText(colSize[index]))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(VLINE)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>out.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val threadStateLeftLock =", "body": "<NUM_LIT><EOL>"}
{"signature": "val serialDescImplConstructor =", "body": "baseSerialDescImplClass.unsubstitutedPrimaryConstructor!!<EOL>"}
{"signature": "val classAttributesMap =", "body": "registerMap(ClassAttributesMap(CLASS_ATTRIBUTES.storageFile, icContext))<EOL>"}
{"signature": "val varUsedIn =", "body": "localVariables.associate { it to mutableSetOf<Int>() }<EOL>"}
{"signature": "val forceBoxOtherValueParameterType =", "body": "forceSingleValueParameterBoxing(other)<EOL>"}
{"signature": "fun generateFunctionsFromAnyForValueClass(<EOL><INDENT><INDENT>result: MutableCollection<SimpleFunctionDescriptor>,<EOL><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT>fromSupertypes: List<SimpleFunctionDescriptor><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>if (!thisDescriptor.isValueClass()) return<EOL><INDENT><INDENT>FunctionsFromAny.addFunctionFromAnyIfNeeded(thisDescriptor, result, name, fromSupertypes)<EOL><INDENT>}"}
{"signature": "fun UseText() {", "body": "<EOL><INDENT><INDENT>   BasicText(<STR_LIT>)<EOL><INDENT><INDENT>   <!COMPOSE_APPLIER_CALL_MISMATCH!>Invalid<!>()<EOL><INDENT><INDENT>}"}
{"signature": "when (val obj = field.get(continuation)) {", "body": "<EOL><INDENT><INDENT><INDENT>is Array<*> -> obj.joinToString(prefix = <STR_LIT>, postfix = <STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> obj<EOL><INDENT><INDENT>}"}
{"signature": "val vId =", "body": "variance.ordinal + <NUM_LIT><EOL>"}
{"signature": "if (type is DynamicType || type is RawType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val charMin =", "body": "<!EVALUATED: `<NUM_LIT>`!>{ java.lang.Character.MIN_VALUE }().toInt()<!><EOL>"}
{"signature": "val parentDeclaration =", "body": "KtStubbedPsiUtil.getContainingDeclaration(declaration)<EOL>"}
{"signature": "val unboundValues =", "body": "pseudocode.instructions<EOL>"}
{"signature": "fun visitProperty(property: FirProperty, data: T) {", "body": "<EOL><INDENT><INDENT>visitVariable(property, data)<EOL><INDENT>}"}
{"signature": "val MA =", "body": "M - <NUM_LIT>UL<EOL>"}
{"signature": "val enumEntryToGetInstanceFun =", "body": "DefaultDelegateFactory.newDeclarationToDeclarationMapping<IrEnumEntry, IrSimpleFunction>()<EOL>"}
{"signature": "if (originalSuspendDescriptor.isInline) {", "body": "<EOL><INDENT><INDENT><INDENT>return SuspendForInlineCopyingMethodVisitor(<EOL><INDENT><INDENT><INDENT><INDENT>stateMachineBuilder, access, name, desc, functionCodegen::newMethod, keepAccess = false<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitContextReceiver(contextReceiver: FirContextReceiver, data: T) {", "body": "<EOL><INDENT><INDENT>contextReceiver.acceptChildren(this, data)<EOL><INDENT>}"}
{"signature": "var consumersCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (index in <NUM_LIT> until dequeSize) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(elements[index], deque[index])<EOL><INDENT><INDENT>}"}
{"signature": "val ourFinders =", "body": "PsiElementFinder.EP.getPoint(project).extensions.filterIsInstance<FirJavaElementFinder>()<EOL>"}
{"signature": "if (lastStatement is IrConstructorCall) {", "body": "<EOL><INDENT><INDENT><INDENT>block.statements[block.statements.lastIndex] = newConstructorCall<EOL><INDENT><INDENT>}"}
{"signature": "if (!project.useCustomDist) {", "body": "<EOL><INDENT><INDENT><INDENT>project.setProperty(ProjectProperty.KONAN_HOME, project.konanCompilerDownloadDir())<EOL><INDENT><INDENT><INDENT>project.setProperty(ProjectProperty.DOWNLOAD_COMPILER, true)<EOL><INDENT><INDENT>}"}
{"signature": "fun serializeTypeAlias(typeAlias: TypeAliasDescriptor, proto: ProtoBuf.TypeAlias.Builder) {", "body": "<EOL><INDENT>}"}
{"signature": "val j<NUM_LIT> =", "body": "id<L<NUM_LIT>> { this }"}
{"signature": "val chunkRef =", "body": "getChunkRef(chunk)<EOL>"}
{"signature": "val classKind =", "body": "expandedClassSymbol?.classKind<EOL>"}
{"signature": "val importedScriptsFiles =", "body": "ScriptDependenciesProvider.getInstance(scriptInfo.script.project)<EOL>"}
{"signature": "fun visitComponentCall(componentCall: FirComponentCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitComponentCall(componentCall)<EOL><INDENT>}"}
{"signature": "fun enterTryExpression(tryExpression: FirTryExpression) {", "body": "<EOL><INDENT><INDENT>val (tryExpressionEnterNode, tryMainBlockEnterNode) = graphBuilder.enterTryExpression(tryExpression)<EOL><INDENT><INDENT>tryExpressionEnterNode.mergeIncomingFlow()<EOL><INDENT><INDENT>tryMainBlockEnterNode.mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val K =", "body": "<STR_LIT><EOL>"}
{"signature": "val isDumb =", "body": "this is KtAnnotationApplicationInfo<EOL>"}
{"signature": "for (fqName in fqNamesWithoutRequirement) {", "body": "<EOL><INDENT><INDENT><INDENT>val descriptor = module.findUnambiguousDescriptorByFqName(fqName)<EOL><EOL><INDENT><INDENT><INDENT>val requirement = extractRequirement(descriptor)<EOL><INDENT><INDENT><INDENT>assertTrue(<STR_LIT>, requirement.isEmpty())<EOL><INDENT><INDENT>}"}
{"signature": "for (checker in configuration.enabledAllSyntheticClassMetadataCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.check(metadata<NUM_LIT>, metadata<NUM_LIT>, report)<EOL><INDENT><INDENT>}"}
{"signature": "val includeOrExcludeBinaryFilesFilter =", "body": "(bySources && !binaryFilesFilter) || (!bySources && binaryFilesFilter)<EOL>"}
{"signature": "val KOTLIN_PROJECT_PERSISTENT_DIR =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (exception == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>FileVisitResult.CONTINUE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val parentFun =", "body": "parent as? IrSimpleFunction<EOL>"}
{"signature": "val expectedSingleCandidate =", "body": "<EOL><INDENT><INDENT><INDENT>matchingCompatibilityToMembersMap[ExpectActualMatchingCompatibility.MatchedSuccessfully]?.singleOrNull()<EOL>"}
{"signature": "val callShapeData =", "body": "k.fir.callShapeData ?: return@createCache null<EOL>"}
{"signature": "var sc =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (this.isInit && this.parameters.isEmpty() && this.selector != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val parameterName = this.selector.removePrefix(<STR_LIT>).removePrefix(<STR_LIT>).replaceFirstChar(Char::lowercaseChar)<EOL><INDENT><INDENT>return listOf(FunctionParameterStub(parameterName, KotlinTypes.unit.toStubIrType()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val pathConverter =", "body": "RelocatableFileToPathConverter((workingDir.canonicalFile))<EOL>"}
{"signature": "var printedActualMangledNameAndSignature =", "body": "false<EOL>"}
{"signature": "fun foo(t: Any) {", "body": "}"}
{"signature": "fun loadLibclang() {", "body": "System.load(libclang) }"}
{"signature": "if (type.constructor.supertypes.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>replaceAnonymousTypeWithSuperType(type.constructor.supertypes.iterator().next())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (continuationDescriptor != null) {", "body": "<EOL><INDENT><INDENT>val jsParameter = JsParameter(getNameForDescriptor(continuationDescriptor))<EOL><INDENT><INDENT>targetList += jsParameter<EOL><INDENT><INDENT>aliases[continuationDescriptor] = JsAstUtils.stateMachineReceiver()<EOL><INDENT>}"}
{"signature": "for (directionForVariable in fixationDirectionsFromType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>updateDirection(directionForVariable)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>enqueueTypesFromConstraints(directionForVariable.variable)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun src<NUM_LIT>() {", "body": "<EOL><INDENT>src()<EOL>}"}
{"signature": "if ((resultValue and <NUM_LIT>xF<NUM_LIT>_<NUM_LIT>UL) == <NUM_LIT>UL) {", "body": "resultValue = resultValue shl <NUM_LIT>; exp -= <NUM_LIT> }"}
{"signature": "fun storeLazyScheme(node: Node, value: LazyScheme) {", "body": "<EOL><INDENT><INDENT><INDENT>map[node.storageNode()] = value<EOL><INDENT><INDENT>}"}
{"signature": "val extrenalFileName =", "body": "if (target == <STR_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "fun processEachWith(action: Action<AcIdentity>) {", "body": "<EOL><INDENT><INDENT>action.execute(id)<EOL><INDENT>}"}
{"signature": "var builtKeys =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "val atomicSetFieldIntrinsic =", "body": "<EOL><INDENT><INDENT>context.referenceFunctions(CallableId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))).single()<EOL>"}
{"signature": "val superFunction =", "body": "baseClassSuite.simpleFunctions()<EOL>"}
{"signature": "while (left != right) {", "body": "<EOL><INDENT><INDENT><INDENT>left = left.previousFlow ?: return null<EOL><INDENT><INDENT><INDENT>right = right.previousFlow ?: return null<EOL><INDENT><INDENT>}"}
{"signature": "fun visitBinaryOrEnterNode(node: BinaryOrEnterNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryOrEnterNode(node)<EOL><INDENT>}"}
{"signature": "if (type.isSingleFieldValueClass(session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return isForbiddenTypeForLateinit(type.getInlineClassUnderlyingType(session))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val optionNameColumnWidth =", "body": "options.maxOf { it.nameArgs.length } + <NUM_LIT><EOL>"}
{"signature": "val clashedDescriptors =", "body": "mutableSetOf<Pair<DeclarationDescriptor, String>>()<EOL>"}
{"signature": "if (nullable) {", "body": "<EOL><INDENT><INDENT>appendable.append('?')<EOL><INDENT>}"}
{"signature": "fun ok(x: Int, y: String) {", "body": "}<EOL><EOL>fun ok(x: Int, y: Long = <NUM_LIT>L) {}"}
{"signature": "if (response == FilterResponse.STOP) {", "body": "<EOL><INDENT><INDENT><INDENT>isActive = false<EOL><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(x: Int, y: Comparable<Float><!UNSUPPORTED_FEATURE!>,<!>) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(x: Int = <NUM_LIT><!UNSUPPORTED_FEATURE!>,<!>) {}"}
{"signature": "val existingFileDirs =", "body": "if (complete) fileDirs else fileDirs.filter { it.exists }<EOL>"}
{"signature": "val bSymbol =", "body": "file.getClassOrFail(<STR_LIT>)<EOL>"}
{"signature": "if (type is PsiArrayType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>recordErrorTypes(type.componentType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val perModuleOnly =", "body": "JsEnvironmentConfigurationDirectives.SPLIT_PER_MODULE in module.directives<EOL>"}
{"signature": "if (irClass.kind == ClassKind.INTERFACE) {", "body": "<EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "fun suspendThrowsCancellationException<NUM_LIT>() {", "body": "}<EOL><EOL>@Throws(CancellationException::class, Exception<NUM_LIT>::class)<EOL>suspend fun suspendThrowsCancellationException<NUM_LIT>() {}"}
{"signature": "val notYetShrunkClasses =", "body": "currentClasspath.filter { it.classId !in shrunkClasses }<EOL>"}
{"signature": "val eqeqeqSymbol =", "body": "context.irBuiltIns.eqeqeqSymbol<EOL>"}
{"signature": "val gradlew =", "body": "File(projectRoot, <STR_LIT>)<EOL>"}
{"signature": "fun main(default: PolicyFromDefault, nickname: PolicyFromNickname) {", "body": "<EOL><INDENT>default.foo(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>).length<EOL><INDENT>default.foo(<STR_LIT>).length<EOL><EOL><INDENT>nickname.foo(<!NULL_FOR_NONNULL_TYPE!>null<!>).length<EOL><INDENT>nickname.foo(<STR_LIT>).length<EOL>}"}
{"signature": "val V<NUM_LIT>_MAX_OLD_SPACE_SIZE_MB =", "body": "<NUM_LIT><EOL>"}
{"signature": "for ((tag, name) in jsIrHeader.nameBindings) {", "body": "<EOL><INDENT><INDENT><INDENT>names[tag] = NameType.NAME_BINDINGS.typeMask to name<EOL><INDENT><INDENT>}"}
{"signature": "if (!kind.isInterface && !kind.isClass) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (target.supportsMimallocAllocator()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>AllocationMode.MIMALLOC<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val startCaretPosition =", "body": "match.range.first<EOL>"}
{"signature": "if (!isLocalDelegatedProperty) {", "body": "<EOL><INDENT><INDENT><INDENT>generateAccessors()<EOL><INDENT><INDENT>}"}
{"signature": "package and relative names in KClass.", "body": "[simpleName|qualifiedName].<EOL>"}
{"signature": "if (index < <NUM_LIT> || pattern == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return description<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val wholeUserType =", "body": "psi.typeElement?.unwrapNullability() as? KtUserType ?: return null<EOL>"}
{"signature": "val processedJavaClasses =", "body": "mutableSetOf<FirJavaClass>()<EOL>"}
{"signature": "fun replaceTypeArguments(newTypeArguments: List<FirTypeProjection>) {", "body": "<EOL><INDENT><INDENT>typeArguments = newTypeArguments.toMutableOrEmpty()<EOL><INDENT>}"}
{"signature": "val total =", "body": "SimplePerfCounters()<EOL>"}
{"signature": "fun testCheckUnreachableCode() {", "body": "<EOL><INDENT>check(false)<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL>}"}
{"signature": "val mustBeRegenerated =", "body": "expression.collectDeclarationsThatMustBeRegenerated()<EOL>"}
{"signature": "val calleeSession =", "body": "callee.moduleData.session<EOL>"}
{"signature": "if (bridge.returnsVoid) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ret(null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val conflicting =", "body": "conflictingSymbol.fir<EOL>"}
{"signature": "if (argument is IrFunctionReference) {", "body": "<EOL><INDENT><INDENT><INDENT>return argument<EOL><INDENT><INDENT>}"}
{"signature": "val firCall =", "body": "infixCallExpression.getOrBuildFirSafe<FirFunctionCall>(firResolveSession) ?: return null<EOL>"}
{"signature": "for (child in childrenFqNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>cache.supertypesMap.removeValues(child, removedFqNames)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val stableHolder<NUM_LIT> =", "body": "StableRef.create((<STR_LIT> to <STR_LIT>))<EOL>"}
{"signature": "val sourceSetsByTarget =", "body": "multiplatformExtension.sourceSets.groupBy { sourceSet -> sourceSet.commonizerTarget.getOrThrow() }<EOL>"}
{"signature": "val defaultOutputFile =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitLoopConditionExitNode(node: LoopConditionExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "var tmp =", "body": "bar[<STR_LIT>]<EOL>"}
{"signature": "val ANNOTATED_ENUM_SERIALIZER_FACTORY_FUNC_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (!result.add(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT>}"}
{"signature": "val ktParameter =", "body": "(parameter.source.getPsi() as? KtParameter) ?: continue<EOL>"}
{"signature": "fun foo(arg: T) {", "body": "<EOL><INDENT><INDENT>arg.toString()<EOL><INDENT>}"}
{"signature": "fun testAnnotatedEnumEntry() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun visitTryExpression(tryExpression: FirTryExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(tryExpression)<EOL><INDENT>}"}
{"signature": "val isMemberFieldSet =", "body": "expression.symbol.owner.parent == klass<EOL>"}
{"signature": "val opReturnType =", "body": "maxByDomainCapacity(maxByDomainCapacity(thisKind, otherKind), PrimitiveType.INT)<EOL>"}
{"signature": "val TOO_LOW =", "body": "<STR_LIT><EOL>"}
{"signature": "val scopeHash =", "body": "input.readInt()<EOL>"}
{"signature": "val USE_OLD_MANGLING_SCHEME =", "body": "emptySet<String>()<EOL>"}
{"signature": "if (a != b) {", "body": "}"}
{"signature": "val propertyDescriptor =", "body": "variableDescriptor as PropertyDescriptor<EOL>"}
{"signature": "val arrayOf =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val myBuildTimes =", "body": "BuildTimes<B>()<EOL>"}
{"signature": "for (info in localVarsMetaInfo.getMeaningfulIntervals()) {", "body": "<EOL><INDENT><INDENT><INDENT>node.localVariables.add(info.node)<EOL><INDENT><INDENT>}"}
{"signature": "if (!context.propertyLazyInitialization.enabled) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (getterDescriptor is PropertyAccessorDescriptor && getterDescriptor.correspondingProperty.isLateInit) {", "body": "<EOL><INDENT><INDENT><INDENT>val throwFunction = context().getReferenceToIntrinsic(Namer.THROW_UNINITIALIZED_PROPERTY_ACCESS_EXCEPTION)<EOL><INDENT><INDENT><INDENT>function.body.statements += JsIf(JsBinaryOperation(JsBinaryOperator.EQ, result, JsNullLiteral()),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT> JsReturn(JsInvocation(throwFunction,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>   JsStringLiteral(getterDescriptor.correspondingProperty.name.asString()))))<EOL><INDENT><INDENT>}"}
{"signature": "val configureJavaClassFinder =", "body": "<EOL><INDENT><INDENT><INDENT>if (configuration.getBoolean(JVMConfigurationKeys.USE_JAVAC)) StorageComponentContainer::useJavac<EOL>"}
{"signature": "if (kind != EdgeKind.Forward || label != NormalPath) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>to.insertIncomingEdge(from, Edge.create(label, kind))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(a: Int?, b: G) {", "body": "<EOL><INDENT>val r = b[<NUM_LIT>, a!!]<EOL><INDENT>checkSubtype<Int>(a)<EOL><INDENT>checkSubtype<Int>(r)<EOL>}"}
{"signature": "val PARALLEL_BACKEND_THREADS =", "body": "<EOL><INDENT><INDENT>CompilerConfigurationKey.create<Int>(<STR_LIT>)<EOL>"}
{"signature": "val jsTarget =", "body": "compilation.target as KotlinJsIrTarget<EOL>"}
{"signature": "fun remAssign(other: C) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun addEmpty(variable: IrValueDeclaration, loop: IrLoop?) {", "body": "<EOL><INDENT><INDENT>elementData[variable] = Variable(loop, mutableSetOf())<EOL><INDENT>}"}
{"signature": "val PART_CLASS_NAME_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if ($ULINT != '<NUM_LIT>') {", "body": "return <STR_LIT>; }"}
{"signature": "val NoLiveLiterals =", "body": "classIdFor(<STR_LIT>)<EOL>"}
{"signature": "fun testClsStubsForFile(classFile: VirtualFile, testData: TestData) {", "body": "<EOL><INDENT><INDENT>val stub = getStubToTest(classFile)<EOL><INDENT><INDENT>KotlinTestUtils.assertEqualsToFile(testData.getExpectedFile(useK<NUM_LIT>ToCompileCode), stub.serializeToString())<EOL><INDENT><INDENT>testData.checkIfIdentical(useK<NUM_LIT>ToCompileCode)<EOL><INDENT>}"}
{"signature": "val teamCityPassword =", "body": "buildProperties.getProperty(<STR_LIT>)<EOL>"}
{"signature": "import <!SYNTAX!>.", "body": "a.B<!><EOL>"}
{"signature": "val javaSourceSet =", "body": "project<EOL>"}
{"signature": "val clInit =", "body": "classCodegen.createOrGetClInitCodegen()<EOL>"}
{"signature": "val PRODUCE_UNZIPPED_KLIB =", "body": "<STR_LIT><EOL>"}
{"signature": "fun charCategoryTitlecaseLetter() {", "body": "<EOL><INDENT><INDENT>val latinCapitalLetterDz = '\u01c5'<INDENT><INDENT> assertTrue(latinCapitalLetterDz.isLetterOrDigit())<EOL><INDENT><INDENT>assertTrue(latinCapitalLetterDz.isLetter())<EOL><INDENT><INDENT>assertTrue(latinCapitalLetterDz.isTitleCase())<EOL><INDENT><INDENT>assertEquals(CharCategory.TITLECASE_LETTER, latinCapitalLetterDz.category)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, CharCategory.TITLECASE_LETTER.code)<EOL><INDENT>}"}
{"signature": "val Transparent =", "body": "Color(<NUM_LIT>x<NUM_LIT>)<EOL>"}
{"signature": "val SWIFT_EXPORT_EMBEDDABLE_MODULE =", "body": "<STR_LIT><EOL>"}
{"signature": "val excludingConfigurations =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun modifySelectedElement(element: PsiElement) {", "body": "<EOL><INDENT><INDENT>assertSelectedElementType<KtDotQualifiedExpression>(element)<EOL><INDENT><INDENT>element.checkConsistency()<EOL><EOL><INDENT><INDENT>element.firstChild.delete()<EOL><INDENT><INDENT>element.operationTokenNode.psi.delete()<EOL><INDENT>}"}
{"signature": "val NULL_OBJECT =", "body": "Any()<EOL>"}
{"signature": "val circle =", "body": "Circle(<NUM_LIT>)<EOL>"}
{"signature": "val expectedFinishStrategy =", "body": "if (testFallbackStrategy) KotlinCompilerExecutionStrategy.OUT_OF_PROCESS else executionStrategy<EOL>"}
{"signature": "val anyProperty =", "body": "Property<Any>()<EOL>"}
{"signature": "fun missingReceiver(trace: BindingTrace, expectedReceiver: ReceiverParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>unexpectedError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val headerProto =", "body": "parseModuleHeader(library.moduleHeaderData)<EOL>"}
{"signature": "fun invoker() {", "body": "<EOL><INDENT>val invocable = Invocable()<EOL><INDENT><!DEPRECATION!>invocable<!>()<EOL><INDENT>InvocableHolder.<!DEPRECATION!>invocable<!>()<EOL>}"}
{"signature": "fun test<NUM_LIT>(myJClass: MyJClass<NUM_LIT>) {", "body": "<EOL><INDENT>myJClass.meth(<!TYPE_MISMATCH!><STR_LIT><!>)<EOL>}"}
{"signature": "val commentBuilder =", "body": "JsAstProtoBuf.DocComment.newBuilder()<EOL>"}
{"signature": "else if (result == CallToPotentiallyHiddenSymbolResult.VisibleWithDeprecation) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deprecated = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val generatedConstructors =", "body": "mutableMapOf<IrClass, IrConstructor>()<EOL>"}
{"signature": "val result<NUM_LIT> =", "body": "if (s == null) SomeEnum.ENTRY else s.let { valueOfOrNull(it) }<EOL>"}
{"signature": "val x  =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitCallableDeclaration(callableDeclaration: FirCallableDeclaration, data: Any?) {", "body": "<EOL><INDENT><INDENT>if (callableDeclaration.returnTypeRef !is FirImplicitTypeRef) return<EOL><INDENT><INDENT>resultingMap[callableDeclaration] = currentPath.last()<EOL><INDENT>}"}
{"signature": "if (getContainingDeclaration() is PackageFragmentDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val visibility = visibility<EOL><INDENT><INDENT><INDENT>if (visibility.isPublicAPI || visibility === DescriptorVisibilities.INTERNAL) return true<EOL><INDENT><INDENT><INDENT>if (visibility === DescriptorVisibilities.LOCAL) return false<EOL><INDENT><INDENT><INDENT>return annotations.hasAnnotation(publishedApiAnnotation) || isPlatformSpecificExported()<EOL><INDENT><INDENT>}"}
{"signature": "if (!argument.isStarProjection) {", "body": "<INDENT><INDENT><INDENT><INDENT> addUsedTypeParameters(argument.type)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val hasCachedLibs =", "body": "explicitCacheFiles.isNotEmpty() || implicitCacheDirectories.isNotEmpty()<EOL>"}
{"signature": "fun invokeSuspend(fn: suspend () -> Unit) {", "body": "fn() }"}
{"signature": "fun visitDelegateExpressionExitNode(node: DelegateExpressionExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val serializedIrParts =", "body": "BitEncoding.encodeBytes(serializedIr)<EOL>"}
{"signature": "val groupNameToIndex =", "body": "hashMapOf<String, Int>()<EOL>"}
{"signature": "var m<NUM_LIT> =", "body": "++m<EOL>"}
{"signature": "val inKt =", "body": "File(depDir, <STR_LIT>).apply { writeText(<STR_LIT>) }<EOL>"}
{"signature": "val manglerDesc =", "body": "KonanManglerDesc<EOL>"}
{"signature": "fun t<NUM_LIT>(<!UNUSED_PARAMETER!>a<!>: A) {", "body": "<EOL><INDENT><!UNUSED_VALUE!><!VAL_REASSIGNMENT!>a<!> =<!> A()<EOL>}"}
{"signature": "val newScope =", "body": "subGraph.declaration?.takeIf { !it.evaluatedInPlace } ?: scope<EOL>"}
{"signature": "if (typeWithParameters is ConeErrorType) {", "body": "<EOL><INDENT><INDENT>return true<INDENT> }"}
{"signature": "val unboundStringProperty =", "body": "J::stringProperty<EOL>"}
{"signature": "fun testRandomArrayArgumentsJS() {", "body": "<EOL><INDENT><INDENT>doRandomArrayArgumentsTest<K<NUM_LIT>JSCompilerArguments>()<EOL><INDENT>}"}
{"signature": "val restrictedFile =", "body": "dst.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun set(value: String) {", "body": "x = value }"}
{"signature": "val constValue =", "body": "(constCoercion.getValueArgument(<NUM_LIT>) as IrConst<*>).value<EOL>"}
{"signature": "val oneLessParameterInDeclarationThanInConstraints =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parametersFromConstraints.first().size == parametersFromDeclaration.size + <NUM_LIT><EOL>"}
{"signature": "for (@Volatile var x in <NUM_LIT>.<NUM_LIT>) {", "body": "}"}
{"signature": "fun fromClass(id: Id) {", "body": "<EOL><INDENT><INDENT>if (id.id != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "fun markAsMain() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>extTestFile.module.isMain = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val oldPlatformLibsNames =", "body": "oldPlatformLibs.list().toSet()<EOL>"}
{"signature": "fun subListClear() {", "body": "<EOL><INDENT><INDENT>val a = ArrayList(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>val s = a.subList(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), s)<EOL><EOL><INDENT><INDENT>s.clear()<EOL><INDENT><INDENT>assertEquals(listOf<String>(), s)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), a)<EOL><INDENT>}"}
{"signature": "val TABLE_GROW =", "body": "<STR_LIT><EOL>"}
{"signature": "val expectSymbols =", "body": "hashMapOf<IdSignature, IrSymbol>()<EOL>"}
{"signature": "val visibleVariablesAtSuspensionPoints =", "body": "mutableMapOf<IrSuspensionPoint, List<IrVariable>>()<EOL>"}
{"signature": "if (!directory.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>Files.createDirectories(directory.toPath())<EOL><INDENT><INDENT>}"}
{"signature": "val targetScope =", "body": "currentScope as? Scope.BlockScope ?: functionScope<EOL>"}
{"signature": "val flagEnabled =", "body": "<STR_LIT> != m.group(<NUM_LIT>)<EOL>"}
{"signature": "for (i in indices) {", "body": "<EOL><INDENT><INDENT>result.append(get(i))<EOL><INDENT>}"}
{"signature": "for (index in cfg.getSuccessorsIndices(insn)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val succ = methodNode.instructions[index]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (isBeforeSuspendMarker(succ)) return true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (collectSuspensionPointEnds(succ, visited, ends)) return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun otherLowercaseProperty() {", "body": "<EOL><INDENT><INDENT>val feminineOrdinalIndicator = '\\u<NUM_LIT>AA'<EOL><INDENT><INDENT>assertTrue(feminineOrdinalIndicator.isLowerCase())<EOL><INDENT><INDENT>assertTrue(feminineOrdinalIndicator.isLetter())<EOL><INDENT><INDENT>assertFalse(feminineOrdinalIndicator.isUpperCase())<EOL><EOL><INDENT><INDENT>val circledLatinSmallLetterA = '\\u<NUM_LIT>D<NUM_LIT>'<EOL><INDENT><INDENT>assertTrue(circledLatinSmallLetterA.isLowerCase())<EOL><INDENT><INDENT>assertFalse(circledLatinSmallLetterA.isLetter())<EOL><INDENT><INDENT>assertFalse(circledLatinSmallLetterA.isUpperCase())<EOL><INDENT>}"}
{"signature": "val includedFragments =", "body": "params.fragmentsToInclude.map(textFragments::get)<EOL>"}
{"signature": "val cluster =", "body": "clusters.getOrPut(interval, { TryBlockCluster(arrayListOf()) })<EOL>"}
{"signature": "package com<EOL>.", "body": ""}
{"signature": "if (x !is String?){", "body": "<EOL><INDENT><INDENT>var k: Any = <!TYPE_MISMATCH!>x<!><EOL><INDENT>}"}
{"signature": "val matchedStringConstant =", "body": "tryMatchCaseToNullableStringConstant(condition) ?: return visitedWhen<EOL>"}
{"signature": "val typeParamsNode =", "body": "source.treeStructure.typeParametersList(source.lighterASTNode)<EOL>"}
{"signature": "val MEMORY_GROW =", "body": "<STR_LIT><EOL>"}
{"signature": "if (modularJdkRoot != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>put(JVMConfigurationKeys.JDK_HOME, File(modularJdkRoot))<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(long: Long) {", "body": "<EOL><INDENT><INDENT><INDENT>createAssert(long).isGreaterThanOrEqualTo(<NUM_LIT> * <NUM_LIT>)<EOL>}"}
{"signature": "val mapClear =", "body": "pluginContext.irBuiltIns.mutableMapClass.owner.functions<EOL>"}
{"signature": "if (c.foo() == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val comparisonOperatorTokens =", "body": "setOf(KtTokens.EQEQ, KtTokens.EXCLEQ, KtTokens.LT, KtTokens.LTEQ, KtTokens.GT, KtTokens.GTEQ)<EOL>"}
{"signature": "val defaultPodGenTaskName =", "body": "podGenFullTaskName()<EOL>"}
{"signature": "for (parameter in primaryConstructor?.valueParameters.orEmpty<KtParameter>()) {", "body": "<EOL><INDENT><INDENT><INDENT>checkParcelableClassProperty(parameter, descriptor, diagnosticHolder, typeMapper)<EOL><INDENT><INDENT>}"}
{"signature": "fun y(a: Int){", "body": "}<EOL><EOL>fun x() {<EOL><INDENT>y(<expr><NUM_LIT></expr>)<EOL>}"}
{"signature": "if (!arguments.noStdlib) {", "body": "<EOL><INDENT><INDENT>addRoot(<STR_LIT>, PathUtil.KOTLIN_JAVA_STDLIB_JAR, stdlibPath, <STR_LIT>)<EOL><INDENT><INDENT>addRoot(<STR_LIT>, PathUtil.KOTLIN_JAVA_SCRIPT_RUNTIME_JAR, scriptRuntimePath, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (availableDiagnostics == null || debugFactory.name !in availableDiagnostics) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val companionField =", "body": "declaringClass.getDeclaredFieldOrNull(name)<EOL>"}
{"signature": "fun done() {", "body": "<EOL><INDENT><INDENT>computedNext = true<EOL><INDENT><INDENT>nextStep = null<EOL><INDENT>}"}
{"signature": "val hashAndSwitchLabels =", "body": "ArrayList<ValueToLabel>()<EOL>"}
{"signature": "if (Directives.BODY_RESOLVE in testServices.moduleStructure.allDirectives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolver.invoke(FirResolvePhase.BODY_RESOLVE)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (expectedIterator.hasPrevious()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedIterator.previous()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>actualIterator.previous()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val srcFiles_ =", "body": "mutableSetOf<FileCollection>()<EOL>"}
{"signature": "val thisPackage =", "body": "ShouldBeVisibleFromScript::class.java.`package`.name<EOL>"}
{"signature": "if (<STR_LIT> == shortName) {", "body": "<EOL><INDENT><INDENT><INDENT>return parentFile<EOL><INDENT><INDENT>}"}
{"signature": "val javaOnly =", "body": "JavaOnly<EOL>"}
{"signature": "var irNewIr<NUM_LIT>Js =", "body": "true<EOL>"}
{"signature": "val lazyTypeConstructorParameters =", "body": "<EOL><INDENT><INDENT>storageManager.createRecursionTolerantLazyValue({ this.computeConstructorTypeParameters() }, emptyList())<EOL>"}
{"signature": "if (list<NUM_LIT> != listOf<ULong>(MaxUL - <NUM_LIT>u, MaxUL)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (a<NUM_LIT>?.c != null) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT>;<EOL><INDENT>}"}
{"signature": "val containingClassId =", "body": "classInNestedClass.getClassId()<EOL>"}
{"signature": "fun cleanupOnNullReceiver(v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT>v.mark(safeReceiverIsNull)<EOL><INDENT><INDENT>AsmUtil.pop(v, safeReceiverType)<EOL><INDENT><INDENT>AsmUtil.pop(v, arg<NUM_LIT>type)<EOL><INDENT>}"}
{"signature": "val objCStubs =", "body": "mutableListOf<ObjCTopLevel>()<EOL>"}
{"signature": "val errorFile =", "body": "task.errorFileProvider.get()<EOL>"}
{"signature": "val feminineOrdinalIndicator =", "body": "'\\u<NUM_LIT>AA'<EOL>"}
{"signature": "for (superInterface in superClasses + superInterfaces) {", "body": "<EOL><INDENT><INDENT><INDENT>t = ExportedType.IntersectionType(t, superInterface)<EOL><INDENT><INDENT>}"}
{"signature": "if (ix > <NUM_LIT>x<NUM_LIT>b<NUM_LIT>) {", "body": "<INDENT><EOL><INDENT><INDENT>w = __ieee<NUM_LIT>_log(fabs(x)) + ln<NUM_LIT><EOL><INDENT>}"}
{"signature": "val uc =", "body": "<NUM_LIT>UL<EOL>"}
{"signature": "if (isImplicitTypedProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>property.resolveSetter(mayResolveSetterBody = true, shouldResolveEverything = shouldResolveEverything)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val splitMatches =", "body": "splitRe.findAll(value)<EOL>"}
{"signature": "if (useLazyNestedClassifierScope) {", "body": "<EOL><INDENT><INDENT>lazyNestedClassifierScope(klass.symbol.classId, existingNames!!, symbolProvider!!)<EOL><INDENT>}"}
{"signature": "val projectJs =", "body": "environmentForJS.project<EOL>"}
{"signature": "val card =", "body": "view.findViewById(R.id.card) as CardView<EOL>"}
{"signature": "if (returnType == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>returnType =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (block != null || !hasEqToken) implicitUnitType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else implicitType<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun fooInlined(uuu: Box<*>) {", "body": "<EOL>"}
{"signature": "val firstResult =", "body": "first.substitute(type)<EOL>"}
{"signature": "val DEFAULT_ADDITIONAL_ARGUMENTS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (inlineLambda != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val lambdaInfo = IrExpressionLambdaImpl(codegen, inlineLambda)<EOL><INDENT><INDENT><INDENT>lambdaInfo.generateLambdaBody(sourceCompiler)<EOL><INDENT><INDENT><INDENT>codegen.context.typeToCachedSMAP[lambdaInfo.lambdaClassType] = lambdaInfo.node.classSMAP<EOL><INDENT><INDENT>}"}
{"signature": "val taskGroupName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testFallbackRuleMatchEverything() {", "body": "<EOL><INDENT><INDENT>val fallbackRule = owners.patterns.first()<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>, fallbackRule.pattern)<EOL><INDENT><INDENT>assertIs<OwnershipPattern.Pattern>(fallbackRule, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (statement is KtConstructorDelegationReferenceExpression && statement.textLength == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun visitPostponedLambdaExitNode(node: PostponedLambdaExitNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "if (target is KotlinWithJavaTarget<*, *>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val jar = project.tasks.getByName(target.artifactsTaskName) as Jar<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>jarToClassListFile[jar.archivePathCompatible.normalize().absoluteFile] =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>target.defaultArtifactClassesListFile.get()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>jarToAbiSnapshot[jar.archivePathCompatible.normalize().absoluteFile] =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>target.buildDir.get().file(kotlinTask.abiSnapshotRelativePath).get().asFile<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitResolvedQualifier(resolvedQualifier: FirResolvedQualifier, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedQualifier(resolvedQualifier)<EOL><INDENT>}"}
{"signature": "if (ih == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>y[<NUM_LIT>] = fq[<NUM_LIT>]; y[<NUM_LIT>] = fq[<NUM_LIT>]; y[<NUM_LIT>] = fw<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var asUint =", "body": "x >>> <NUM_LIT>;<EOL>"}
{"signature": "import references other valid source file, it is simply compiled along with script<EOL>.", "body": ""}
{"signature": "if (parentInVisitor != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(parentInVisitor.visitFunctionName, <STR_LIT>, element.visitorParameterName, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun reportCallError(node: InferenceNode, expected: String, received: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testIntermediateSourceSetWithOnlyOneNativeTarget(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testSingleNativePlatform(<STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "val decodeEnum =", "body": "<STR_LIT><EOL>"}
{"signature": "fun usageBar(bar: Bar) {", "body": "<EOL><INDENT><expr>bar[<NUM_LIT>] *= <STR_LIT></expr><EOL>}"}
{"signature": "package apt<EOL>.", "body": ""}
{"signature": "val dummyHeaderPath =", "body": "projectPath.resolve(<STR_LIT>).resolve(<STR_LIT>).resolve(<STR_LIT>).toFile().canonicalPath<EOL>"}
{"signature": "val compileServices =", "body": "mutableSetOf<CompileService>()<EOL>"}
{"signature": "val scriptOut =", "body": "captureOut { scriptClass.constructors.first().newInstance(arguments) }<EOL>"}
{"signature": "val lp =", "body": "IcLong(<NUM_LIT>L)<EOL>"}
{"signature": "val newLoopOrigin =", "body": "if (preferJavaLikeCounterLoop)<EOL>"}
{"signature": "val ChunkBucketSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun print(text: String) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>.repeat(indentation))<EOL><INDENT><INDENT><INDENT>builder.append(text)<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val leftHandSide =", "body": "expression.leftHandSide<EOL>"}
{"signature": "val enclosingSuspendFunctionDispatchReceiverOwnerSymbol =", "body": "<EOL><INDENT><INDENT><INDENT>(enclosingSuspendFunction.dispatchReceiverType as? ConeClassLikeType)?.lookupTag?.toFirRegularClassSymbol(session)<EOL>"}
{"signature": "fun testSimpleDifferentClassLoaders() {", "body": "<EOL><INDENT><INDENT>loadFile(<STR_LIT>)<EOL><EOL><INDENT><INDENT>doTest(<EOL><INDENT><INDENT><INDENT>createClassLoader(),<EOL><INDENT><INDENT><INDENT>createClassLoader()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (sourcesPath != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ZipUtil.addDirToZipRecursively(zip, jarFile, File(sourcesPath), <STR_LIT>, null, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (val (a) in b) {", "body": "}"}
{"signature": "fun test<NUM_LIT>(<!EXPOSED_FROM_PRIVATE_IN_FILE!>p: NestedPrivate<!>) {", "body": "}<EOL><INDENT>fun <!EXPOSED_FROM_PRIVATE_IN_FILE!>NestedPrivate<!>.test<NUM_LIT>() {}"}
{"signature": "fun dumpTree(out: PrintWriter, body: TextTreeBuilderContext.() -> Unit) {", "body": "<EOL><INDENT>TextTreeBuilderContext(<STR_LIT>, out).also(body)<EOL><INDENT>out.flush()<EOL>}"}
{"signature": "val ifNullBranch =", "body": "whenExpr.branches[<NUM_LIT>]<EOL>"}
{"signature": "if (!phaseConfig.isEnabled(this)) {", "body": "<EOL><INDENT><INDENT><INDENT>return outputIfNotEnabled(phaseConfig, phaserState, context, input)<EOL><INDENT><INDENT>}"}
{"signature": "if (this is ErrorType) {", "body": "<EOL><INDENT><INDENT>return replaceArguments(newArguments)<EOL><INDENT>}"}
{"signature": "fun exitGetClassCall(getClassCall: FirGetClassCall) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitGetClassCall(getClassCall).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val builtFakeOverridesClasses =", "body": "mutableSetOf<IrClass>()<EOL>"}
{"signature": "if (!declaration.hasExplicitBackingField) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (classLikeDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirTypeAlias -> listOf(classLikeDeclaration.expandedTypeRef)<EOL><INDENT><INDENT><INDENT>is FirClass -> classLikeDeclaration.superTypeRefs<EOL><INDENT><INDENT>}"}
{"signature": "if (checkNotNull(x)) {", "body": "<EOL><INDENT><INDENT>x.length<INDENT> }"}
{"signature": "if (candidateDescriptor.isNotSimpleCall()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>candidateDescriptor.substituteInferredVariablesAndApproximate(substitutor)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val PUBLIC_METHOD_NAMES_IN_ANY =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (b.args != null) {", "body": "<EOL><INDENT><INDENT>A().foo(<NUM_LIT>, <!SPREAD_OF_NULLABLE!>*<!>b.args)<EOL><INDENT>}"}
{"signature": "val specVersionKey =", "body": "<STR_LIT><EOL>"}
{"signature": "var declareCheckType =", "body": "false<EOL>"}
{"signature": "val preDeclarationBlock =", "body": "JsCompositeBlock()<EOL>"}
{"signature": "if (next.owner != this) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (classDescriptor.kind == ClassKind.ANNOTATION_CLASS && DescriptorUtils.isLocal(classDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(LOCAL_ANNOTATION_CLASS.on(languageVersionSettings, classOrObject))<EOL><INDENT><INDENT>}"}
{"signature": "package l<EOL>.", "body": ""}
{"signature": "val mutableSetName =", "body": "<STR_LIT>.toSpecialStandardClassOrProtocolName()<EOL>"}
{"signature": "val INVALID_OBJC_NAME_CHARS =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement, String>(Severity.ERROR)<EOL>"}
{"signature": "if (callableSymbol.origin == FirDeclarationOrigin.RenamedForOverride) {", "body": "<EOL><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>callableSymbol.fir.initialSignatureAttr?.symbol as? S ?: callableSymbol<EOL><INDENT><INDENT>}"}
{"signature": "val PATH_TO_ROOT_TOKEN =", "body": "<STR_LIT><EOL>"}
{"signature": "val warningFactory =", "body": "KtDiagnosticFactory<NUM_LIT><A, B, C, D>(<STR_LIT>, Severity.WARNING, positioningStrategy, psiType)<EOL>"}
{"signature": "fun withOverloads(i: Int) {", "body": "}<EOL>fun withOverloads(i: String) {}"}
{"signature": "val columnToLookups =", "body": "lookupsFromLine.groupBy { it.position.column }.toList().sortedBy { it.first }<EOL>"}
{"signature": "val parameterToBase =", "body": "irFunction.allParameters.zip(baseIrFunction.allParameters).toMap()<EOL>"}
{"signature": "val ignoreDirective =", "body": "testServices.tryRetrieveIgnoredInliner(directive)<EOL>"}
{"signature": "fun Open() {", "body": "}"}
{"signature": "val MANIFEST_RESOURCE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun extensionReceiverType(typeProvider: (List<FirTypeParameter>) -> ConeKotlinType) {", "body": "<EOL><INDENT><INDENT>extensionReceiverTypeProvider = typeProvider<EOL><INDENT>}"}
{"signature": "var flagOuter =", "body": "false<EOL>"}
{"signature": "if (expression is FirAnonymousFunctionExpression && expression.isTrailingLambda) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>expression.anonymousFunction.accept(this)<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val STABILITY_WILDCARD_SINGLE =", "body": "'*'<EOL>"}
{"signature": "val commonDependencies =", "body": "createCirProvidedClassifiers { commonDependencySources() }<EOL>"}
{"signature": "if (!varControlFlowState.isDeclared) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>isDeclared = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val intercepted =", "body": "_intercepted<EOL>"}
{"signature": "val staticFile =", "body": "cacheBinaryPartDir.child(getArtifactName(target, baseName, CompilerOutputKind.STATIC_CACHE))<EOL>"}
{"signature": "val initializerExpression =", "body": "firSymbol.fir.initializer<EOL>"}
{"signature": "if (isTopLevel && fqName == null) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (kvp.second) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>done = false;<EOL><INDENT><INDENT><INDENT><INDENT>break;<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val staticProperty =", "body": "<NUM_LIT><EOL>"}
{"signature": "val afterLast =", "body": "last!!.nextSibling<EOL>"}
{"signature": "val extraInt =", "body": "metadata.javaClass.methods.single { it.name == JvmAnnotationNames.METADATA_EXTRA_INT_FIELD_NAME }<EOL>"}
{"signature": "val utilContext =", "body": "constraintInjector.constraintIncorporator.utilContext<EOL>"}
{"signature": "val classesToLoadByParentFromRegistry =", "body": "<EOL><INDENT><INDENT><INDENT>System.getProperty(<STR_LIT>)?.split(',')?.map { it.trim() } ?: emptyList()<EOL>"}
{"signature": "if (containingFile.analysisContext != null || containingFile.originalFile.virtualFile != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return LightClassCachedValue(createInstanceOfLightClass(classOrObject), outOfBlockModificationTracker(classOrObject))<EOL><INDENT><INDENT>}"}
{"signature": "val irDispatchReceiverParameter =", "body": "irFunction.dispatchReceiverParameter!!<EOL>"}
{"signature": "fun makeFieldPrinter(printer: ImportCollectingPrinter): AbstractFieldPrinter<ImplementationField><EOL><EOL><INDENT>protected open fun ImportCollectingPrinter.printAdditionalMethods(implementation: Implementation) {", "body": "<EOL><INDENT>}"}
{"signature": "val simpleType =", "body": "type.asSimpleType()<EOL>"}
{"signature": "val jdkAnnotation =", "body": "findAnnotation<JdkVersions>(context)<EOL>"}
{"signature": "val autoCacheDirectory =", "body": "autoCacheRootDirectory.child(userCacheFlavorString).also { it.mkdirs() }<EOL>"}
{"signature": "for (i in <NUM_LIT>u..<MinUI step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (typeof regularPropertyGetter.set !== <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val publicXRef =", "body": "Z<NUM_LIT>_<NUM_LIT>::publicX<EOL>"}
{"signature": "val declarationToOwners =", "body": "hashMapOf<FirDeclaration, List<FirBasedSymbol<*>>>()<EOL>"}
{"signature": "val returnTypeDesc =", "body": "(if (returnType == null) <STR_LIT> else mapTypeDefault(returnType)) ?: return true<EOL>"}
{"signature": "var methodsFound =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val thisVar =", "body": "irTemporary(irType = replacement.returnType, nameHint = <STR_LIT>)<EOL>"}
{"signature": "fun exitExcludedMethod() {", "body": "<EOL><INDENT><INDENT>incrementTime(callStack.pop(false))<EOL><INDENT>}"}
{"signature": "var noReturnError =", "body": "false<EOL>"}
{"signature": "val externRef =", "body": "getExternRef()<EOL>"}
{"signature": "val weakRefs =", "body": "mutableListOf<WeakReference<Any>>()<EOL>"}
{"signature": "val constraintErrors =", "body": "inferenceErrorData.constraintSystem.status.constraintErrors<EOL>"}
{"signature": "val jsExceptionType =", "body": "context.wasmSymbols.jsRelatedSymbols.jsException.defaultType<EOL>"}
{"signature": "val methodInsn =", "body": "insn as MethodInsnNode<EOL>"}
{"signature": "val javaClassesTracker =", "body": "configuration[JAVA_CLASSES_TRACKER]<EOL>"}
{"signature": "var returnValue =", "body": "<NUM_LIT><EOL>"}
{"signature": "val nextInvoke =", "body": "translateMethodInvocation(iteratorVar, getNextFunction(context.bindingContext(), loopRange), nextBlock)<EOL>"}
{"signature": "if (psi.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>KtFe<NUM_LIT>PsiLocalVariableSymbol(psi, analysisContext)<EOL><INDENT><INDENT>}"}
{"signature": "val outerTransformer =", "body": "(returnTypeCalculator as ReturnTypeCalculatorWithJump).outerTransformer<EOL>"}
{"signature": "val OLD_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val trimIndent =", "body": "<STR_LIT>.<!EVALUATED(<STR_LIT>)!>trimIndent()<!><EOL>"}
{"signature": "val closestElement =", "body": "elementsByLabel.firstOrNull()<EOL>"}
{"signature": "if (specTest is LinkedSpecTest) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collectInfoFromTest(testsMap, specTest, file)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(c: suspend () -> Unit) {", "body": "<EOL><INDENT>c()<EOL>}"}
{"signature": "val unifiedNullChecks =", "body": "state.config.unifiedNullChecks<EOL>"}
{"signature": "for (node in allNodes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (node !in nodeIds) continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val visited = mutableSetOf<PointsToGraphNode>()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>findReachable(node, visited, true, null)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val visitedInInterestingSubgraph = mutableSetOf<PointsToGraphNode>()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>findReachable(node, visitedInInterestingSubgraph, true, nodeIds)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>visited.removeAll(visitedInInterestingSubgraph)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>for (reachable in visited)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (reachable in nodeIds)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>node.addAssignmentEdge(reachable)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val casedAfter =", "body": "cased().repeat((mask shr <NUM_LIT>) and <NUM_LIT>)<EOL>"}
{"signature": "val reachableNodesImpl =", "body": "mutableListOf<Node>()<EOL>"}
{"signature": "if (isMyTypeVariable(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addConstraintEdgeForDeepDependency(from, it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasSuperClass && declaration.isInner) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.addToClassListWhichNeedBoxParameter()<EOL><INDENT><INDENT>}"}
{"signature": "val isNonEmptyIntersectionInK<NUM_LIT> =", "body": "isCaseMissedByK<NUM_LIT>Intersector(l, r)<EOL>"}
{"signature": "val loopExitNode =", "body": "loopExitNodes.remove(loop)!!<EOL>"}
{"signature": "val lightModifierListOwner =", "body": "lightModifierList.parent<EOL>"}
{"signature": "val test_jnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>j === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === j<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>j !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== j<!><EOL>"}
{"signature": "var expected =", "body": "test();<EOL>"}
{"signature": "fun annotationProcessor(fqName: String) {", "body": "<EOL><INDENT><INDENT>val oldProcessors = this.processors<EOL><INDENT><INDENT>this.processors = if (oldProcessors.isEmpty()) fqName else <STR_LIT><EOL><INDENT>}"}
{"signature": "val capitalize<NUM_LIT> =", "body": "identifier.capitalizeFirstWord(asciiOnly = true)<EOL>"}
{"signature": "fun clearCause() {", "body": "<EOL><INDENT>  _builder.clearCause()<EOL><INDENT>}"}
{"signature": "fun stopDebugProcess() {", "body": "<EOL><INDENT><INDENT><INDENT>testServerProcess.destroy()<EOL><INDENT><INDENT>}"}
{"signature": "val isPackageViewScope =", "body": "scopeOwner is PackageViewDescriptor<EOL>"}
{"signature": "val externalLibrariesToCache =", "body": "mutableListOf<KotlinLibrary>()<EOL>"}
{"signature": "val additionalCheckResult =", "body": "additionalCheck(functionDescriptor)<EOL>"}
{"signature": "import kt<NUM_LIT>_fmodules.", "body": "*<EOL>"}
{"signature": "val currentCompilerVersion =", "body": "NativeCompilerDownloader.DEFAULT_KONAN_VERSION<EOL>"}
{"signature": "fun f(a: String) {", "body": "<EOL><INDENT>}"}
{"signature": "fun usage(foo: Foo?, action: Foo.() -> Unit) {", "body": "<EOL><INDENT>foo?.acti<caret>on()<EOL>}"}
{"signature": "val postponedExpression =", "body": "if (expression is KtFunctionLiteral) expression.getParentOfType<KtLambdaExpression>(true) else expression<EOL>"}
{"signature": "val endPos =", "body": "indexOf(end)<EOL>"}
{"signature": "val variableContainingDeclaration =", "body": "this.containingDeclaration<EOL>"}
{"signature": "val METHOD_INDEX_FOR_SCRIPT_MAIN =", "body": "<NUM_LIT><EOL>"}
{"signature": "val sparseBooleanArraySerializer =", "body": "<EOL><INDENT><INDENT>IrSimpleParcelSerializer(symbols.parcelReadSparseBooleanArray, symbols.parcelWriteSparseBooleanArray)<EOL>"}
{"signature": "val instance =", "body": "PsiElementFactory.getInstance(parent.project)<EOL>"}
{"signature": "val sameDefaultArgument =", "body": "defaultArgument<EOL>"}
{"signature": "package manager API<EOL>.", "body": ""}
{"signature": "if (stringifiedResult != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun addMetadataDiff(diff: ListEntryDiff) {", "body": "<EOL><INDENT><INDENT>metadataDiffs.add(diff.toDiffEntry())<EOL><INDENT><INDENT>val missing<NUM_LIT>Defect = DefectType(<STR_LIT>, <STR_LIT>, METADATA_A)<EOL><INDENT><INDENT>val missing<NUM_LIT>Defect = DefectType(<STR_LIT>, <STR_LIT>, METADATA_A)<EOL><INDENT><INDENT>reportMissing(diff, missing<NUM_LIT>Defect, missing<NUM_LIT>Defect, METADATA_A)<EOL><INDENT>}"}
{"signature": "var nsVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun serializeFlexibleType(flexibleType: FlexibleType, lowerProto: ProtoBuf.Type.Builder, upperProto: ProtoBuf.Type.Builder) {", "body": "<EOL><INDENT>}"}
{"signature": "val classMap =", "body": "mutableMapOf<IrClass, Type>()<EOL>"}
{"signature": "if (current.containingDeclaration is FunctionDescriptor && current !is TypeParameterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val outerFunctionName = suggest(current.containingDeclaration as FunctionDescriptor, bindingContext)!!<EOL><INDENT><INDENT><INDENT>parts += outerFunctionName.names.single()<EOL><INDENT><INDENT><INDENT>current = outerFunctionName.scope<EOL><INDENT><INDENT>}"}
{"signature": "fun check(typeRef: FirFunctionTypeParameter, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>val name = typeRef.name ?: return<EOL><INDENT><INDENT>val typeRefSource = typeRef.source ?: return<EOL><INDENT><INDENT>FirJvmNamesChecker.checkNameAndReport(name, typeRefSource, context, reporter)<EOL><INDENT>}"}
{"signature": "if (memberFunction.isPublic() && isExtensionFunctionShadowedByMemberFunction(extensionFunction, memberFunction)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.EXTENSION_SHADOWED_BY_MEMBER.on(declaration, memberFunction))<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((bt, timeNs) in other.myBuildMetrics) {", "body": "<EOL><INDENT><INDENT><INDENT>add(bt, timeNs)<EOL><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(i: <!WRONG_ANNOTATION_TARGET_WITH_USE_SITE_TARGET!>@setparam:Suppress<!> Int) {", "body": "}<EOL>fun test<NUM_LIT>(i: <!WRONG_ANNOTATION_TARGET_WITH_USE_SITE_TARGET!>@param:Suppress<!> Int) {}"}
{"signature": "package org.", "body": "jetbrains.kotlin.gradle.unitTests<EOL>"}
{"signature": "val testBuildDir =", "body": "File(EnvironmentVariable.PROJECT_BUILD_DIR.readValue()).resolve(<STR_LIT>)<EOL>"}
{"signature": "fun acceptComposable(composable: @Composable () -> Unit) {", "body": "<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>  }"}
{"signature": "if (visited.add(dependencyModuleName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val moduleExists = dfs(dependencyModuleName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (!moduleExists && !isTransitive && module.isJdkModuleFromCtSym) visited.remove(dependencyModuleName)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val answerProperty =", "body": "pkg.properties.single { it.name.toStrippedString() == <STR_LIT> }<EOL>"}
{"signature": "val PER_FILE_CACHE_IR_LEVEL_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val deserializedInlineFunctions =", "body": "mutableMapOf<IrFunction, InlineFunctionOriginInfo>()<EOL>"}
{"signature": "val moduleDataForHmppModule =", "body": "LinkedHashMap<HmppCliModule, FirModuleData>()<EOL>"}
{"signature": "if (memberDeclaration.isOperator) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val skipSourceAnnotations =", "body": "actualSymbol.hasSourceAnnotationsErased<EOL>"}
{"signature": "val reducedCandidates =", "body": "result.candidates<EOL>"}
{"signature": "val Target =", "body": "<STR_LIT>.annotationId()<EOL>"}
{"signature": "val resultSet =", "body": "EnumSet.noneOf(AnnotationTarget::class.java)<EOL>"}
{"signature": "val escapedModuleId =", "body": "StringUtil.escapeStringCharacters(moduleId)<EOL>"}
{"signature": "if (nearestOptimizationDecision == null) {", "body": "<EOL><INDENT><INDENT><INDENT>nearestOptimizationDecision = mutableReferenceOf(true)<EOL><INDENT><INDENT>}"}
{"signature": "for ((token, name) in OperatorConventions.UNARY_OPERATION_NAMES) {", "body": "<EOL><INDENT><INDENT><INDENT>check(token, name)<EOL><INDENT><INDENT>}"}
{"signature": "val gt =", "body": "(<NUM_LIT>.elementMapping.size * <NUM_LIT>).map { mutableListOf<Int>() }<EOL>"}
{"signature": "val propertyTypeResolver =", "body": "typeResolver.create(property.typeParameters)<EOL>"}
{"signature": "val fieldExpectations =", "body": "ArrayList<SignatureExpectation>()<EOL>"}
{"signature": "fun checkEqual(x: Any, y: Any) {", "body": "<EOL><INDENT>if (x != y || y != x) throw AssertionError(<STR_LIT>)<EOL><INDENT>if (x.hashCode() != y.hashCode()) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "fun visitReceiverParameter(receiverParameter: FirReceiverParameter, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitReceiverParameter(receiverParameter)<EOL><INDENT>}"}
{"signature": "val inlinableKtParameters =", "body": "inlinableParameters.mapNotNull { (it.source as? KotlinSourceElement)?.psi }<EOL>"}
{"signature": "val init =", "body": "it.backingField?.initializer?.expression as? IrGetValue<EOL>"}
{"signature": "if (anonymousObjectOriginName != null) {", "body": "<EOL><INDENT><INDENT><INDENT>ext.anonymousObjectOriginName = c[anonymousObjectOriginName]<EOL><INDENT><INDENT>}"}
{"signature": "val realDescriptor =", "body": "unwrapFakeOverride(descriptor)<EOL>"}
{"signature": "val oldResult =", "body": "moduleResults.put(moduleResult.libraryName, moduleResult)<EOL>"}
{"signature": "val functionFile =", "body": "function.containingKtFile<EOL>"}
{"signature": "if (descriptorOverridden && serializeOverridden && deserializeOverridden) {", "body": "<EOL><INDENT><INDENT><INDENT>val entry = classDescriptor.findAnnotationDeclaration(SerializationAnnotations.serializerAnnotationFqName)<EOL><INDENT><INDENT><INDENT>trace.report(EXTERNAL_SERIALIZER_USELESS.on(entry ?: declaration, classDescriptor.defaultType))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val isSave =", "body": "name == SerialEntityNames.SAVE_NAME &&<EOL>"}
{"signature": "for (val i in data.size / <NUM_LIT> .. <NUM_LIT>) {", "body": "<EOL>"}
{"signature": "if (compilation.name != KotlinCompilation.MAIN_COMPILATION_NAME) {", "body": "<EOL><INDENT><INDENT><INDENT>compilation.name<EOL><INDENT><INDENT>}"}
{"signature": "val jvmPackagePartSource =", "body": "container.source as JvmPackagePartSource<EOL>"}
{"signature": "val accessFileUrl =", "body": "<STR_LIT><EOL>"}
{"signature": "val brResult =", "body": "evaluateExpression(branch.result, resultSlot)<EOL>"}
{"signature": "if (function.parent.parent is KtObjectDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitNamedFunction(function)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitDanglingModifierList(danglingModifierList: FirDanglingModifierList, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDanglingModifierList(danglingModifierList)<EOL><INDENT>}"}
{"signature": "val _diagnostics =", "body": "arrayListOf<ScriptDiagnostic>()<EOL>"}
{"signature": "fun visitScript(script: KtScript) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c.scripts.put(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>script,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lazyDeclarationResolver.getScriptDescriptor(script, KotlinLookupLocation(script))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>registerDeclarations(script.declarations)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun writeSourceFile(fileName: String, content: String, targetDir: File) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val tmpFile = File(targetDir, fileName)<EOL><INDENT><INDENT><INDENT><INDENT>KtTestUtil.mkdirs(tmpFile.parentFile)<EOL><INDENT><INDENT><INDENT><INDENT>tmpFile.writeText(content, Charsets.UTF_<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val loadedInProjectsPropertyName =", "body": "getPropertyName(kotlinPluginVersion)<EOL>"}
{"signature": "fun takeLambda<NUM_LIT>(f: String.() -> String) {", "body": "}<EOL>fun takeLambda<NUM_LIT>(f: String.(String) -> String) {}"}
{"signature": "if (containingDeclaration !is ConstructorDescriptor || !containingDeclaration.isPrimary) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>report(INAPPLICABLE_PARAM_TARGET.on(annotation))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT><INDENT>Bar.Companion.bar<NUM_LIT>()<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(arg: Any?) {", "body": "<EOL><INDENT>val x = arg <!USELESS_CAST!>as? Any<!> ?: return<EOL><INDENT>arg.hashCode()<EOL><INDENT>x.hashCode()<EOL>}"}
{"signature": "val label<NUM_LIT>Next =", "body": "label<NUM_LIT>next ?: continue<EOL>"}
{"signature": "fun print(message : String) {", "body": "System.out?.print(message) }"}
{"signature": "val isDefinitelyAssignedInConstructor =", "body": "info?.get(symbol)?.isDefinitelyVisited() == true<EOL>"}
{"signature": "fun disableDownloadingKonanFromMavenCentral(project: Project) {", "body": "<EOL><INDENT>project.extraProperties.set(<STR_LIT>, <STR_LIT>)<EOL>}"}
{"signature": "val cachedTestCaseGroups =", "body": "ThreadSafeCache<TestCaseGroupId.TestDataDir, TestCaseGroup?>()<EOL>"}
{"signature": "if (substitutor == null && it.nullability() == TypeNullability.NULLABLE && extensionReceiverType.nullability() == TypeNullability.NOT_NULL) {", "body": "<EOL><INDENT><INDENT><INDENT>substitutor = extensionReceiverType.checkIsSuperTypeOf(it.makeNotNullable())<EOL><INDENT><INDENT>}"}
{"signature": "val INTERFACE_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "if (allElements.add(element) && levelElements.add(element)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dequeue.addAll(edges(element))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val EmbedBitcodeMode =", "body": "BitcodeEmbeddingModeDsl()<EOL>"}
{"signature": "var paramOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (deparenthesizedExpression is KtCallableReferenceExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>psiCallResolver.createCallableReferenceKotlinCallArgument(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>newContext, deparenthesizedExpression, DataFlowInfo.EMPTY,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CallMaker.makeExternalValueArgument(deparenthesizedExpression),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>argumentName = null,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>outerCallContext,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tracingStrategy = TracingStrategyImpl.create(deparenthesizedExpression.callableReference, newContext.call)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (objectToCreate.isPureObject()) {", "body": "<EOL><INDENT><INDENT><INDENT>val body = (body as? IrBlockBody) ?: return null<EOL><INDENT><INDENT><INDENT>val instanceField = objectToCreate.instanceField ?: error(<STR_LIT>)<EOL><EOL><INDENT><INDENT><INDENT>body.statements.clear()<EOL><INDENT><INDENT><INDENT>body.statements += JsIrBuilder.buildReturn(<EOL><INDENT><INDENT><INDENT><INDENT>symbol,<EOL><INDENT><INDENT><INDENT><INDENT>JsIrBuilder.buildGetField(instanceField.symbol),<EOL><INDENT><INDENT><INDENT><INDENT>objectToCreate.defaultType<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitEnumEntry(enumEntry: FirEnumEntry, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allEnumEntryCheckers.check(enumEntry, data)<EOL><INDENT>}"}
{"signature": "val externName =", "body": "annotation.properValue(<STR_LIT>)<EOL>"}
{"signature": "if (buildNumberOnlyClassifierRegex.matches(classifier)) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "if (edge.label != PostponedPath) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>statementFlows.add(flow)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun resetApplicationToNull(old: Application?) {", "body": "<EOL><INDENT>if (old != null) return<EOL><INDENT>resetApplicationToNull()<EOL>}"}
{"signature": "if (isBoxUsed) {", "body": "<EOL><INDENT><INDENT><INDENT>body.statements.add(<NUM_LIT>, boxParameter.generateDefaultResolution())<EOL><INDENT><INDENT>}"}
{"signature": "val io =", "body": "ib as IOther<EOL>"}
{"signature": "if (typeOperatorCall.conversionTypeRef.coneType.isNullable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>data.containsNull = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (clang_Cursor_isNull(definitionCursor) == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>decl.def = createStructDef(definitionCursor, definitionCursor.type, decl)<EOL><INDENT><INDENT>}"}
{"signature": "fun useAdditionalSourceProviders(vararg providers: Constructor<AdditionalSourceProvider>) {", "body": "<EOL><INDENT><INDENT>additionalSourceProviders += providers<EOL><INDENT>}"}
{"signature": "val compilerState =", "body": "state.asState(GenericReplCompilerState::class.java)<EOL>"}
{"signature": "val sourceCompatibility =", "body": "<STR_LIT><EOL>"}
{"signature": "val uninitializedInstanceCall =", "body": "irCallWithSubstitutedType(symbols.createUninitializedInstance, listOf(declaration.defaultType))<EOL>"}
{"signature": "val typeParameterListCommonizer =", "body": "TypeParameterListCommonizer(typeCommonizer)<EOL>"}
{"signature": "val resolutionStrategyProvider =", "body": "createResolutionStrategyProvider(module, moduleProvider)<EOL>"}
{"signature": "else if (resolvedArgument.callArgument.isSpread) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addDiagnostic(NonVarargSpread(resolvedArgument.callArgument))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val rttiGenerator =", "body": "RTTIGenerator(generationState, referencedFunctions = null)<EOL>"}
{"signature": "val resolvedKotlinVersion =", "body": "<STR_LIT><EOL>"}
{"signature": "val enumInstanceFunction =", "body": "context.createRootScopedFunction(descriptor)<EOL>"}
{"signature": "val TRANSIENT_ANNOTATION_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val kniRetVal =", "body": "<STR_LIT><EOL>"}
{"signature": "val testVisitor =", "body": "createTestVisitor(lightClasses.first().project, testServices.assertions)<EOL>"}
{"signature": "if (classifier is KClass<*> && classifier.isSubclassOf(CStructVar::class)) {", "body": "<EOL><INDENT><INDENT>return getStructCType(classifier)<EOL><INDENT>}"}
{"signature": "val cacheManager =", "body": "attributesDiff.manager<EOL>"}
{"signature": "val firstNotInnerClassIndex =", "body": "outerClasses.indexOfLast { !it.isInner }<EOL>"}
{"signature": "val onlyNew =", "body": "OnlyNew()<EOL>"}
{"signature": "fun testFriendPaths() {", "body": "<EOL><INDENT><INDENT>val friendPath = tmpDir.newFolder()<EOL><INDENT><INDENT>taskApi.friendPaths.from(friendPath)<EOL><INDENT><INDENT>assertEquals(setOf(friendPath), taskImpl.friendPaths.files)<EOL><INDENT>}"}
{"signature": "val DUMMY =", "body": "ClassGlobalHierarchyInfo(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "fun builderUnit(c: suspend () -> Unit) {", "body": "<EOL><INDENT>c.startCoroutine(EmptyContinuation)<EOL>}"}
{"signature": "if (!(a <= <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val indexOfStart =", "body": "content.indexOf(startEvaluation, indexOfStop).takeIf { it != <NUM_LIT> } ?: content.length<EOL>"}
{"signature": "fun tripleToList() {", "body": "<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>), (Triple(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, null, <NUM_LIT>), (Triple(<NUM_LIT>, null, <NUM_LIT>)).toList())<EOL><INDENT><INDENT>assertEquals(listOf(<NUM_LIT>, <NUM_LIT>, <STR_LIT>), (Triple(<NUM_LIT>, <NUM_LIT>, <STR_LIT>)).toList())<EOL><INDENT>}"}
{"signature": "if (this in 'a'..'z' || this in 'A'..'Z' || this in '<NUM_LIT>'..'<NUM_LIT>') {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val keptOriginalDependencyResolutionIds =", "body": "sourceSet.resolveMetadata<MetadataDependencyResolution.KeepOriginalDependency>()<EOL>"}
{"signature": "for (testModule in groupedByModule.keys) {", "body": "<EOL><INDENT><INDENT><INDENT>val module = if (testModule == null)<EOL><INDENT><INDENT><INDENT><INDENT>createSealedModule()<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>createModule(testModule.name)<EOL><EOL><INDENT><INDENT><INDENT>modules[testModule] = module<EOL><INDENT><INDENT>}"}
{"signature": "val SPECIAL_FUNCTION_PATTERN =", "body": "Regex(<STR_LIT>).toPattern()<EOL>"}
{"signature": "val existingLambdaType =", "body": "topLevelTrace.getType(ktArgumentExpression)<EOL>"}
{"signature": "var hasWildcard =", "body": "false<EOL>"}
{"signature": "var argumentIndex =", "body": "typeArgumentIndex<EOL>"}
{"signature": "val setterImpl =", "body": "actualImplementation.setter<EOL>"}
{"signature": "val entryExpression =", "body": "whenEntry.expression ?: continue<EOL>"}
{"signature": "var time =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "val currentCP =", "body": "configuration.getList(ScriptingConfigurationKeys.SCRIPT_DEFINITIONS_CLASSPATH).toMutableList()<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.orArgumentCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getOrArgument(i), new.getOrArgument(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (scopeType.isError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overriddenDescriptor<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val elseEntryBlock =", "body": "CoroutineBlock()<EOL>"}
{"signature": "if (byteStart == -bitsPerByte + bitsPerSymbol) {", "body": "<INDENT><INDENT><INDENT> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (val sourcePsi = psi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KtDotQualifiedExpression -> sourcePsi.selectorExpression<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> sourcePsi<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val finalizers =", "body": "ClassFileFactoryFinalizerExtension.getInstances(project)<EOL>"}
{"signature": "if (this is PSIFunctionKotlinCallArgument) {", "body": "<EOL><INDENT><INDENT>lambdaInitialDataFlowInfo = resultDataFlowInfo<EOL><INDENT>}"}
{"signature": "if (container is KtObjectDeclaration && memberName == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return container<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun writeToParcel(dest: Parcel, flags: Int) {", "body": "<EOL><INDENT><INDENT>dest.writeInt(data)<EOL><INDENT>}"}
{"signature": "val nullableTopLevel =", "body": "::nullableTopLevel.apply { isAccessible = true }<EOL>"}
{"signature": "val crashMe =", "body": "crashMe { result = <STR_LIT> }<EOL>"}
{"signature": "val calledConstructorSymbol =", "body": "statement.symbol<EOL>"}
{"signature": "val leftValue =", "body": "irTemporary(leftArgument)<EOL>"}
{"signature": "fun visitWhenConditionIsPattern(condition: KtWhenConditionIsPattern) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>mark(condition)<EOL><INDENT><INDENT><INDENT><INDENT>createNonSyntheticValue(condition, MagicKind.IS, getSubjectExpression(condition))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (TypeIntersector.isIntersectionEmpty(leftType, rightType)) {", "body": "<EOL><INDENT><INDENT><INDENT>val isProperEqualityChecksEnabled =<EOL><INDENT><INDENT><INDENT><INDENT>context.languageVersionSettings.supportsFeature(LanguageFeature.ProperEqualityChecksInBuilderInferenceCalls)<EOL><INDENT><INDENT><INDENT>val shouldReportWarnings = !isProperEqualityChecksEnabled<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>&& context.inferenceSession is BuilderInferenceSession<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>&& context.trace.get(BindingContext.MARKED_EQUALIY_CALL_PROPER_IN_BUILDER_INFERENCE, expression) != null<EOL><INDENT><INDENT><INDENT>val diagnostic = if (shouldReportWarnings) Errors.EQUALITY_NOT_APPLICABLE_WARNING else Errors.EQUALITY_NOT_APPLICABLE<EOL><EOL><INDENT><INDENT><INDENT>context.trace.report(diagnostic.on(expression, expression.operationReference, leftType, rightType))<EOL><INDENT><INDENT>}"}
{"signature": "if (!methodNode.hasOptimizableConditions()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val inductionVariableUpdate =", "body": "forLoopNextBlock.statements.last() as? IrSetValue<EOL>"}
{"signature": "if (firstConflictingVariable == null) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.error(debugMessage(<STR_LIT>, inferenceErrorData))<EOL><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT>}"}
{"signature": "val errorSubstitutor =", "body": "substitutorByMap(errorSubstitution, session)<EOL>"}
{"signature": "val oldWarnings =", "body": "nwarnings<EOL>"}
{"signature": "for (bitsDenormNaN in listOf(<NUM_LIT>xFFF<NUM_LIT>L shl <NUM_LIT>, bitsNaN or <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertTrue(Double.fromBits(bitsDenormNaN).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>assertEquals(bitsNaN, Double.fromBits(bitsDenormNaN).toBits())<EOL><INDENT><INDENT>}"}
{"signature": "if (JsEnvironmentConfigurationDirectives.ES<NUM_LIT>_MODE in module.directives) {", "body": "<EOL><INDENT><INDENT>configuration.put(JSConfigurationKeys.USE_ES<NUM_LIT>_CLASSES, true)<EOL><INDENT><INDENT>configuration.put(JSConfigurationKeys.COMPILE_SUSPEND_AS_JS_GENERATOR, true)<EOL><INDENT>}"}
{"signature": "val benchmarksObj =", "body": "data.getRequiredField(<STR_LIT>)<EOL>"}
{"signature": "val functionType =", "body": "functionTypes[b.readVarUInt<NUM_LIT>AsInt()]<EOL>"}
{"signature": "if (valueParameter.isCrossinline) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun apply(result: T?, exception: Throwable?) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun f(vararg t: Int, f: () -> Unit) {", "body": "}<EOL><EOL>fun f(vararg t: String, f: () -> Unit) {}"}
{"signature": "val leftNode =", "body": "if (leftArgument.type.needsMfvcFlattening()) replacements.getRootMfvcNodeOrNull(leftClass) else null<EOL>"}
{"signature": "when (val myParent = parent) {", "body": "<EOL><INDENT><INDENT>is IrFile -> myParent<EOL><INDENT><INDENT>is IrDeclaration -> myParent.fileParentOrNull<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "fun testNativeTargetsOverwriteUnknownTargetName() {", "body": "<EOL><INDENT><INDENT>doManifestTest(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val promotedParameters =", "body": "mutableMapOf<IrValueParameterSymbol, IrValueParameterSymbol>()<EOL>"}
{"signature": "if (<NUM_LIT> ..< n .. n ..< n ..< n) {", "body": "}"}
{"signature": "val filePathToIndex =", "body": "fileProtos.withIndex().associate { it.value.fileEntry.name to it.index }<EOL>"}
{"signature": "val sinceIndexToRemoveConstraints =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>beforeConstraintCountByVariables[variableWithConstraint.typeVariable.freshTypeConstructor()]<EOL>"}
{"signature": "if (!scope.hasComposableCalls && !scope.hasReturn && !scope.hasJump) {", "body": "<EOL><INDENT><INDENT><INDENT>return wrap(<EOL><INDENT><INDENT><INDENT><INDENT>before = listOf(makeStart()),<EOL><INDENT><INDENT><INDENT><INDENT>after = listOf(makeEnd()),<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (parameter in ktSymbol.typeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>yieldAll(parameter.withImplicitSymbols())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val interopsDirectoryName =", "body": "group.interops.map { it.interopName }.toSet().joinToString(<STR_LIT>)<EOL>"}
{"signature": "val addedChars =", "body": "<STR_LIT>.repeat(<NUM_LIT>)<EOL>"}
{"signature": "for (group in diagnosticList.groups) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>printDiagnosticGroup(group.name, group.diagnostics)<EOL><INDENT><INDENT><INDENT><INDENT>println()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val processedSources =", "body": "HashSet<KtFile>()<EOL>"}
{"signature": "var payload =", "body": "generatePayloadTree(payloadDepth, <STR_LIT>)<EOL>"}
{"signature": "fun layout(builder: KotlinHierarchyBuilder.Root) {", "body": "<EOL><INDENT><INDENT>describe(builder)<EOL><INDENT>}"}
{"signature": "val appliedSubplugins =", "body": "subplugins.filter { it.isApplicable(kotlinCompilation) }<EOL>"}
{"signature": "val supertypeGenerationExtensions =", "body": "session.extensionService.supertypeGenerators<EOL>"}
{"signature": "fun add(line: String) {", "body": "<EOL><INDENT><INDENT>lastPrintedLines.add(line)<EOL><INDENT><INDENT>totalCount++<EOL><INDENT>}"}
{"signature": "val elementsWithImpl =", "body": "mutableSetOf<Element>()<EOL>"}
{"signature": "if (objTypeOf == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>return obj.`$arity`.unsafeCast<Int>() === arity<EOL><INDENT>}"}
{"signature": "if (type === KtTokens.RBRACE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>balance--<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val initialReturnTypeRef =", "body": "lambda.returnTypeRef as? FirResolvedTypeRef<EOL>"}
{"signature": "val fileProto =", "body": "serializer.packagePartProto(firFile, null)<EOL>"}
{"signature": "if (it !is FirClassLikeSymbol<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (irFile in filteredIrFiles) {", "body": "<EOL><INDENT><INDENT>builder.append(irFile.dumpKotlinLike(modifiedOptions))<EOL><INDENT>}"}
{"signature": "val classPathFromProp =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val fResult =", "body": "(ForTest::f.annotations.first() as Anno).u"}
{"signature": "val translationModes =", "body": "TranslationMode.values()<EOL>"}
{"signature": "val inputRelativePath =", "body": "baseDir.toPath().relativize(inputFile.get().asFile.toPath())<EOL>"}
{"signature": "val allLeafModules =", "body": "allActualizationPaths.map { it.nodes.last() }.toSet()<EOL>"}
{"signature": "val usedAsExpression =", "body": "element.isUsedAsExpression(trace.bindingContext)<EOL>"}
{"signature": "if (newSyntheticCallType != null && !newSyntheticCallType.hasError()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>syntheticCall.replaceConeTypeOrNull(newSyntheticCallType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val incrementProp =", "body": "rangeKotlinType.memberScope.getContributedVariables(Name.identifier(<STR_LIT>), NoLookupLocation.FROM_BACKEND)<EOL>"}
{"signature": "val fnan =", "body": "Float.NaN<EOL>"}
{"signature": "fun ensureAllMessagesPresent() {", "body": "<EOL><INDENT><INDENT>KtDefaultErrorMessagesParcelize.MAP.verifyMessages(KtErrorsParcelize)<EOL><INDENT>}"}
{"signature": "val mapAndMap =", "body": "mapOf(<STR_LIT> to <NUM_LIT>) + mapOf(<STR_LIT> to <NUM_LIT>)<EOL>"}
{"signature": "val securedOrder =", "body": "Order().<!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>secured<!>()<EOL>"}
{"signature": "val numberOfArgs =", "body": "dataStream.readInt() - <NUM_LIT><EOL>"}
{"signature": "val mutable =", "body": "ReflectionTypes.isNumberedKMutablePropertyType(type)<EOL>"}
{"signature": "var extensionFunctionsInExternals =", "body": "false<EOL>"}
{"signature": "var handlers =", "body": "emptyList<EventHandler<T>>()<EOL>"}
{"signature": "if (path.fir != this.fir && edge.label != NormalPath) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if ((constructor.isFromEnumClass || constructor.returnTypeRef.isEnum) && this.isSuper) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IrEnumConstructorCallImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>startOffset, endOffset,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>constructedIrType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irConstructorSymbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeArgumentsCount = constructor.typeParameters.size,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>valueArgumentsCount = constructor.valueParameters.size<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (noArgConstructorSymbol == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classSymbol.serializableOrMetaAnnotationSource(session),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FirSerializationErrors.NON_SERIALIZABLE_PARENT_MUST_HAVE_NOARG_CTOR,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val readonlyWithDefault =", "body": "(data as Map<String, Int>).withDefault { it.length }<EOL>"}
{"signature": "val podLocation =", "body": "pod.source<EOL>"}
{"signature": "if (theirModule == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return JavaModuleResolver.AccessError.ModuleDoesNotReadUnnamedModule<EOL><INDENT><INDENT>}"}
{"signature": "for (c in s) {", "body": "<EOL><INDENT><INDENT><INDENT>val d = c - '<NUM_LIT>'<EOL><INDENT><INDENT><INDENT>if (d !in <NUM_LIT>.<NUM_LIT>) return null<EOL><INDENT><INDENT><INDENT>result = result * <NUM_LIT> + d<EOL><INDENT><INDENT>}"}
{"signature": "val reversed =", "body": "original.asReversed()<EOL>"}
{"signature": "if (dependency !in allDependencies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>allDependencies += dependency<EOL><INDENT><INDENT><INDENT><INDENT>traverseDependencies(dependency)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mainJar =", "body": "target.sourcesJarTask(mainCompilation)<EOL>"}
{"signature": "if (callMode == CallMode.POSITIONAL_CALL && origin == Origin.JAVA && (parameterNames - <STR_LIT>).isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>throw UnsupportedOperationException(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>value\\<STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (!(notIsString(x) || notIsInt(x))) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT><INDENT>x.inc()<EOL><INDENT>}"}
{"signature": "val title =", "body": "titlecaseMapping.map { it.hexToInt().toChar() }.joinToString(separator = <STR_LIT>)<EOL>"}
{"signature": "val secondKey<NUM_LIT> =", "body": "Key(<NUM_LIT>)<EOL>"}
{"signature": "fun deleteSymlinkPointingToItself() {", "body": "<EOL><INDENT><INDENT>val basedir = createTempDirectory().cleanupRecursively()<EOL><INDENT><INDENT>val link = basedir.resolve(<STR_LIT>)<EOL><INDENT><INDENT>link.tryCreateSymbolicLinkTo(link) ?: return<EOL><EOL><INDENT><INDENT>basedir.deleteRecursively()<EOL><INDENT><INDENT>assertFalse(basedir.exists())<EOL><INDENT>}"}
{"signature": "val parameter<NUM_LIT>expression =", "body": "typedArgumentList(originalFunction, original)<EOL>"}
{"signature": "val nextDirective =", "body": "matcher.group(<STR_LIT>) ?: matcher.group(<STR_LIT>)<EOL>"}
{"signature": "val fileToDeclarationMap =", "body": "mutableMapOf<Int, DeclarationIrTableFileReader>()<EOL>"}
{"signature": "val conclusion =", "body": "loadExpression(proto.conclusionOfConditionalEffect, owner) ?: return null<EOL>"}
{"signature": "val KAPT_KOTLIN_GENERATED =", "body": "<STR_LIT><EOL>"}
{"signature": "if (project != project.rootProject) {", "body": "<EOL><INDENT><INDENT><INDENT>(rootProjectName + project.path).replace(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val TEST_MODE_NAMES =", "body": "TestMode.entries.map { it.name }<EOL>"}
{"signature": "if (descriptor !is ConstructorDescriptor && declaration is KtDeclarationWithBody && declaration.hasBody()) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJvm.EXTERNAL_DECLARATION_CANNOT_HAVE_BODY.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "var newParameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val SCRIPT_DEFINITION_MARKERS_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo(t: Number) {", "body": "}"}
{"signature": "when (outputTarget.allLeaves().size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> logger.errorAndExitJvmProcess(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> logger.errorAndExitJvmProcess(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (pathLength == prefixLength) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "if (index != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>out.writeInt<NUM_LIT>NoTag(IdSignatureProtoType.DECLARED_SIGNATURE.id)<EOL><INDENT><INDENT><INDENT><INDENT>out.writeInt<NUM_LIT>NoTag(index)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotationMethod =", "body": "method.containingClass.isAnnotationType<EOL>"}
{"signature": "if (it.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>configuration.put(ScriptingConfigurationKeys.LEGACY_SCRIPT_RESOLVER_ENVIRONMENT_OPTION, envName, it)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (argument in postponedArgumentsWithRevisableType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val argumentWasTransformed = transformToAtomWithNewFunctionalExpectedType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this, argument, diagnosticsHolder<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (argumentWasTransformed)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue@completion<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val hm =", "body": "java.util.concurrent.ConcurrentHashMap<String, Int>()<EOL>"}
{"signature": "val apOptionsActions =", "body": "<EOL><INDENT><INDENT>mutableListOf<(KaptArguments) -> Unit>()<EOL>"}
{"signature": "for (value in savedStackDescriptor.savedValues) {", "body": "<EOL><INDENT><INDENT>methodNode.instructions.insertBefore(location, VarInsnNode(value.loadOpcode, localVarIndex))<EOL><INDENT><INDENT>localVarIndex += value.size<EOL><INDENT>}"}
{"signature": "for (i in (MinUS + <NUM_LIT>u).toUShort() downTo MinUS step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "when (specificMangle) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SpecificMangle.Inline -> function.signatureRequiresMangling(includeInline = true, includeMFVC = false)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SpecificMangle.MultiField -> function.signatureRequiresMangling(includeInline = false, includeMFVC = true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package hiddenfromobjc<EOL>.", "body": ""}
{"signature": "var raw =", "body": "false<EOL>"}
{"signature": "val sourceSetNamesString =", "body": "sourceSetNames.joinToString(<STR_LIT>) { <STR_LIT> }<EOL>"}
{"signature": "if (context.config.enableIrInliner) {", "body": "<EOL><INDENT><INDENT><INDENT>irFile.transformChildren(RemoveDuplicatedInlinedLocalClassesTransformer(context), Data())<EOL><INDENT><INDENT>}"}
{"signature": "val CODE_SNIPPET_FUNCTION_NAME_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "for (input in codegenInputs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>outputs += runCodegen(input, input.state, codegenFactory, diagnosticsReporter, compilerConfiguration)<EOL><INDENT><INDENT>}"}
{"signature": "val defaultMinCapacity =", "body": "<NUM_LIT><EOL>"}
{"signature": "while (copyCount > <NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT> val segmentLength = minOf(copyCount, elementData.size - copyFromIndex, elementData.size - copyToIndex)<EOL><INDENT><INDENT><INDENT>elementData.copyInto(elementData, copyToIndex, copyFromIndex, copyFromIndex + segmentLength)<EOL><EOL><INDENT><INDENT><INDENT>copyFromIndex = positiveMod(copyFromIndex + segmentLength)<EOL><INDENT><INDENT><INDENT>copyToIndex = positiveMod(copyToIndex + segmentLength)<EOL><INDENT><INDENT><INDENT>copyCount -= segmentLength<EOL><INDENT><INDENT>}"}
{"signature": "for (i in FiveTimes) {", "body": "<EOL><INDENT><INDENT>println(i)<EOL><INDENT>}"}
{"signature": "var varOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ENUM =", "body": "Flags.ENUM.toLong()<EOL>"}
{"signature": "fun testWithBoundReceiver() {", "body": "useSuspend(C()::bar) }"}
{"signature": "val FUNCTIONAL_TYPE_KINDS =", "body": "KtDiagnosticRenderers.COLLECTION(FUNCTIONAL_TYPE_KIND)<EOL>"}
{"signature": "val interopObjCObjectRawValueGetter =", "body": "interopFunction(InteropFqNames.objCObjectRawPtrFunName)<EOL>"}
{"signature": "fun A(a: Int, b: Int, c: Int) {", "body": "}"}
{"signature": "val singleByteBuffer =", "body": "ByteArray(<NUM_LIT>)<EOL>"}
{"signature": "fun visitLoadUnitValue(instruction: LoadUnitValueInstruction) {", "body": "<EOL><INDENT><INDENT>visitInstructionWithNext(instruction)<EOL><INDENT>}"}
{"signature": "val finder =", "body": "KlibMetadataClassDataFinder(fragment, nameResolver)<EOL>"}
{"signature": "val lowerCompFun =", "body": "builtIns.lessOrEqualFunByOperandType.getValue(if (useCompareTo) builtIns.intClass else comparisonClass.symbol)<EOL>"}
{"signature": "if (defaultValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sb.append(<STR_LIT>).append(defaultValue)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun Compose() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>OpenTarget()<EOL><INDENT><INDENT><INDENT>  }"}
{"signature": "if (typeBounds.bounds.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>renderedTypeVariable<EOL><INDENT><INDENT>}"}
{"signature": "if (c.toByte() != <NUM_LIT>toByte()) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val buildLogSteps =", "body": "parseTestBuildLog(buildLogFile)<EOL>"}
{"signature": "val jvmJarName =", "body": "<STR_LIT><EOL>"}
{"signature": "val exceptionRecord =", "body": "extractValue(landingpadResult, <NUM_LIT>, <STR_LIT>)<EOL>"}
{"signature": "var receiverArgumentType =", "body": "receiverArgument.type<EOL>"}
{"signature": "package first<EOL>.", "body": ""}
{"signature": "fun covariantProperties() {", "body": "<EOL><INDENT><INDENT>checkDelegate<NUM_LIT><Number>(::covariantVal, ::topVal)<EOL><INDENT><INDENT>checkDelegate<NUM_LIT><CharSequence>(data::extCovariantVal, data::builderVar)<EOL><INDENT>}"}
{"signature": "if (e is RemoteException) {", "body": "<EOL><INDENT><INDENT>throw DaemonCrashedException(e)<EOL><INDENT>}"}
{"signature": "fun bind(value: Any) {", "body": "<EOL><INDENT><INDENT>_owner = value as T<EOL><INDENT>}"}
{"signature": "val isFromVariableFixation =", "body": "otherConstraint.position.from is FixVariableConstraintPosition<*><EOL>"}
{"signature": "if (shouldEnforceFramePointer(context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>enforceFramePointer(llvmFunction, context)<EOL><INDENT>}"}
{"signature": "val fileDataHash =", "body": "cityHash<NUM_LIT>(lib.file(fileIndex))<EOL>"}
{"signature": "val public_in_trait_b =", "body": "{ obj: TestPublicInTrait -> obj.boo() + obj.boo }<EOL>"}
{"signature": "if (projectRoot != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.put(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ScriptingConfigurationKeys.LEGACY_SCRIPT_RESOLVER_ENVIRONMENT_OPTION,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>projectRoot<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val lambda = expression.getValueArgument(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is IrBlock -> (lambda.statements.last() as IrFunctionReference).acceptVoid(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is IrFunctionExpression -> lambda.function.acceptVoid(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> lambda?.acceptVoid(this)<INDENT><INDENT><INDENT><INDENT><INDENT> }"}
{"signature": "if (DescriptorVisibilities.isPrivate(visibility)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return field<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun setValue(thisRef: Node, property: KProperty<*>, value: E) {", "body": "<EOL><INDENT><INDENT>flags.set(thisRef, flagValues[value.ordinal] + flags.get(thisRef))<EOL><INDENT>}"}
{"signature": "val receiverOfReceiver =", "body": "receiver.explicitReceiver as? FirQualifiedAccessExpression ?: return false<EOL>"}
{"signature": "val nonDeclaredPropertiesStartIndex =", "body": "declaredDescriptorsWithSameName.size<EOL>"}
{"signature": "fun lazyResolve(target: FirElementWithResolveState, toPhase: FirResolvePhase) {", "body": "<EOL><INDENT><INDENT>if (target.resolvePhase >= toPhase) return<EOL><EOL><INDENT><INDENT>lazyResolve(target, toPhase, LLFirResolveDesignationCollector::getDesignationToResolve)<EOL><INDENT>}"}
{"signature": "var endArgumentOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "val gravity =", "body": "<NUM_LIT>f<EOL>"}
{"signature": "fun testMember(c: C) {", "body": "<EOL><INDENT>c.x[<NUM_LIT>]++<EOL>}"}
{"signature": "val knmFile =", "body": "knmFiles.singleOrNull { <STR_LIT> !in it.path }<EOL>"}
{"signature": "fun setValue(thisRef: Any?, desc: KProperty<*>, svalue : Int) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun objCExportTestLegacySuspendUnit() {", "body": "<EOL><INDENT><INDENT>objCExportTestImpl(<STR_LIT>, listOf(<STR_LIT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>   listOf(<STR_LIT>, <STR_LIT>), false, true)<EOL><INDENT>}"}
{"signature": "fun noMain(flag: Boolean) {", "body": "<EOL><INDENT><INDENT>noMain = flag<EOL><INDENT>}"}
{"signature": "val gotoCallee =", "body": "!directEdges.containsKey(callee)<EOL>"}
{"signature": "val aVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ANDROIDX_SUPPORT_FRAGMENT_FQNAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val profilerClass =", "body": "loadAsyncProfilerClass(libPath)<EOL>"}
{"signature": "fun visitImplicitTypeRef(implicitTypeRef: FirImplicitTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitImplicitTypeRef(implicitTypeRef)<EOL><INDENT>}"}
{"signature": "val _irFileData =", "body": "hashMapOf<File, IrTranslationResultValue>()<EOL>"}
{"signature": "fun foo(f: (Mutable) -> Unit) {", "body": "}<EOL>fun foo(f: T.(Mutable) -> Unit) {}"}
{"signature": "if (extensionReceiver !== explicitReceiver && extensionReceiver !== dispatchReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>extensionReceiver = extensionReceiver?.transform(transformer, data)<EOL><INDENT><INDENT>}"}
{"signature": "val removedKeys =", "body": "if (trackChanges) mutableSetOf<LookupSymbolKey>() else null<EOL>"}
{"signature": "val preliminaryVisitor =", "body": "PreliminaryDeclarationVisitor.getVisitorByVariable(this, bindingContext)<EOL>"}
{"signature": "package zzz<EOL>.", "body": ""}
{"signature": "val chooseVisibleSourceSets =", "body": "transformation.metadataDependencyResolutions.resolutionsToTransform()<EOL>"}
{"signature": "val _foo<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo<NUM_LIT>(c: IntArray) {", "body": "}"}
{"signature": "import okio.", "body": "FileSystem<EOL>"}
{"signature": "val moduleNameQualifier =", "body": "outputDir.substringAfterLast(<STR_LIT>)<EOL>"}
{"signature": "val globalDeclarationTable =", "body": "KonanGlobalDeclarationTable(irBuiltIns)<EOL>"}
{"signature": "val arrL =", "body": "arrayOf(l)<EOL>"}
{"signature": "fun test(x: Int) {", "body": "}\")<EOL><INDENT><INDENT>assertSignature(<STR_LIT>, \"fun test(x: Int, y: Long) {}"}
{"signature": "fun serializeScript(<EOL><INDENT><INDENT>script: FirScript,<EOL><INDENT><INDENT>proto: ProtoBuf.Class.Builder,<EOL><INDENT><INDENT>versionRequirementTable: MutableVersionRequirementTable,<EOL><INDENT><INDENT>childSerializer: FirElementSerializer<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (expression.isBoxOrUnboxCall()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val coercion = expression as IrCall<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val argument = coercion.getValueArgument(<NUM_LIT>)!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val symbol = coercion.symbol<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (tempName != null)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>PossiblyCoercedValue.OverVariable(irTemporary(parent, argument, tempName, symbol.owner.explicitParameters.single().type), symbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else PossiblyCoercedValue.OverExpression(argument, symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val firFileContent =", "body": "readContent(firFile, trimLines)<EOL>"}
{"signature": "fun clearExtras() {", "body": "<EOL><INDENT>  _builder.clearExtras()<EOL><INDENT>}"}
{"signature": "val startAddress =", "body": "(argvPtr + <NUM_LIT> * Int.SIZE_BYTES).loadInt().toUInt()<EOL>"}
{"signature": "val qualifierPsi =", "body": "resolvedQualifier.psi ?: return<EOL>"}
{"signature": "fun XCFramework(configure: Action<KotlinNativeXCFrameworkConfig>) {", "body": "<EOL><INDENT><INDENT>addKotlinArtifact<KotlinNativeXCFrameworkConfigImpl>(configure)<EOL><INDENT>}"}
{"signature": "val oldSnapshot =", "body": "fileSnapshotProvider[file]<EOL>"}
{"signature": "val isSubclassOptIn =", "body": "classId == OptInNames.SUBCLASS_OPT_IN_REQUIRED_CLASS_ID<EOL>"}
{"signature": "val generatedHeaders =", "body": "generator.generateHeaders(root)<EOL>"}
{"signature": "var inMultilineComment =", "body": "false<EOL>"}
{"signature": "val ownerClassId =", "body": "if (publicFacade)<EOL>"}
{"signature": "if (receiver.type.isResultType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context.trace.report(Errors.RESULT_CLASS_WITH_NULLABLE_OPERATOR.on(operationNode!!.psi, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val cancellationExceptionFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val defaultLambdasInfo =", "body": "extractDefaultLambdasInfo(extractable, toDelete, toInsert)<EOL>"}
{"signature": "val renderPsiClassName =", "body": "Directives.RENDER_PSI_CLASS_NAME in mainModule.testModule.directives<EOL>"}
{"signature": "val fromSource =", "body": "getSourceElement(from)<EOL>"}
{"signature": "for (element in sideEffect(intArray)) {", "body": "<EOL><INDENT><INDENT>sb.append(element.toString())<EOL><INDENT>}"}
{"signature": "for (annotation in fe<NUM_LIT>Annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val classId = annotation.classIdForAnnotation ?: continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (classId in annotationsToIgnore) continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result += classId<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val messageParameter =", "body": "parameters.last()<EOL>"}
{"signature": "val testRunnerType =", "body": "testCase.extras<WithTestRunnerExtras>().runnerType<EOL>"}
{"signature": "fun checkBaseName(name: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assertEquals(baseName, name)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assertEquals(nameProvider.get(), name)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val entryById =", "body": "values().associateBy(Kind::id)<EOL>"}
{"signature": "val resultAndGenerationState =", "body": "context.compileModule() ?: return false<EOL>"}
{"signature": "val searchScope =", "body": "GlobalSearchScope.allScope(project)<EOL>"}
{"signature": "val hasExplicitDynamicReceiver =", "body": "receiverType(session) is ConeDynamicType<EOL>"}
{"signature": "if (hasUnderlyingType()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + underlyingType.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "if (classifier is TypeAliasDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return getTypeAliasSamConstructor(classifier)<EOL><INDENT><INDENT>}"}
{"signature": "while (fizz(c) % <NUM_LIT> == <NUM_LIT> || buzz(c) % <NUM_LIT> == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>if (c > <NUM_LIT>) throw Exception(<STR_LIT>)<EOL><INDENT><INDENT>c++<EOL><INDENT>}"}
{"signature": "if (!isBound) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "fun createFatFramework() {", "body": "<EOL><INDENT><INDENT>val outFramework = FrameworkLayout(fatFramework, getFatFrameworkFamily() == Family.OSX)<EOL><INDENT><INDENT>if (outFramework.exists()) outFramework.rootDir.deleteRecursively()<EOL><EOL><INDENT><INDENT>outFramework.mkdirs()<EOL><INDENT><INDENT>mergeBinaries(outFramework.binary)<EOL><INDENT><INDENT>mergeHeaders(outFramework.header)<EOL><INDENT><INDENT>createModuleFile(outFramework.moduleFile, fatFrameworkName)<EOL><INDENT><INDENT>mergePlists(outFramework.infoPlist, fatFrameworkName)<EOL><INDENT><INDENT>mergeDSYM(outFramework.dSYM)<EOL><INDENT>}"}
{"signature": "val widened =", "body": "builder.irConvertInteger(source, signedTarget, valueToConvert)<EOL>"}
{"signature": "fun setTypeVariable(value: TV) {", "body": "storage = value }"}
{"signature": "val genericSignature =", "body": "if (synthetic) null else signature.genericsSignature<EOL>"}
{"signature": "val baseClassFqn =", "body": "FqName.fromSegments(baseClass.typeName.split(<STR_LIT>))<EOL>"}
{"signature": "fun genericType() {", "body": "<EOL><INDENT>a<b>::c<EOL><INDENT>a<b>::c.d<EOL><INDENT>a.b<c>::d<EOL><INDENT>a.b<c>::d.e<EOL><INDENT>a.b<c.d>::e<EOL><INDENT>a.b<c.d>::e.d<EOL><INDENT>a.b<c.d<e.f>>::g.h<EOL><EOL><INDENT>a.b.c<d>.e<f>.g::h<EOL>}"}
{"signature": "fun registerModuleComponents(<EOL><INDENT><INDENT>container: StorageComponentContainer, platform: TargetPlatform, moduleDescriptor: ModuleDescriptor<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>if (!platform.isJvm()) return<EOL><EOL><INDENT><INDENT>container.useInstance(CliNoArgDeclarationChecker(annotations, useIr))<EOL><INDENT>}"}
{"signature": "val progressionClassesTypes =", "body": "context.ir.symbols.progressionClasses.map { it.defaultType }.toSet()<EOL>"}
{"signature": "if (keptClass) {", "body": "<EOL><INDENT><INDENT><INDENT>keptDeclarations.add(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(b: Byte) {", "body": "<EOL><INDENT>select(arrayData(<NUM_LIT>), b)<EOL><INDENT>select(id(<NUM_LIT>), b)<EOL><INDENT>select(id(arrayData(<NUM_LIT>)), b)<EOL><INDENT>select(arrayDataNoBound(<NUM_LIT>), b)<EOL>}"}
{"signature": "if (intersectionType.isNullableNothing() && !intersectionType.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>return intersectionType.makeNullable().unwrap()<EOL><INDENT><INDENT>}"}
{"signature": "val DEFAULT_OUTPUT_DIRECTORY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (KotlinTypeChecker.DEFAULT.isSubtypeOf(expressionType, expectedType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>checkCompileTimeConstant(argumentExpression, expressionType, trace, useDeprecationWarning = true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((methodReplacement, original) in inlineClassReplacements.originalFunctionForMethodReplacement) {", "body": "<EOL><INDENT><INDENT><INDENT>if (methodReplacement !is IrSimpleFunction) continue<EOL><INDENT><INDENT><INDENT>val newOriginal = functionSymbolMap[original.symbol]?.owner ?: continue<EOL><INDENT><INDENT><INDENT>val newMethodReplacement = inlineClassReplacements.getReplacementFunction(newOriginal) ?: continue<EOL><INDENT><INDENT><INDENT>functionSymbolMap[methodReplacement.symbol] = newMethodReplacement.symbol<EOL><INDENT><INDENT>}"}
{"signature": "var toolsJar =", "body": "javaHome.resolve(<STR_LIT>)<EOL>"}
{"signature": "val deprecatedProperty =", "body": "get(deprecatedPropName)<EOL>"}
{"signature": "if (!filesWithResolvedImports.add(file)) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in sequenceOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>s += i.toString()<EOL><INDENT><INDENT>}"}
{"signature": "val stackArrayCandidates =", "body": "mutableListOf<ArrayStaticAllocation>()<EOL>"}
{"signature": "val ENUM_VALUES =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val println =", "body": "irBuiltIns.findFunctions(Name.identifier(<STR_LIT>), <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val incorrectTransient =", "body": "prop.descriptor.backingField?.annotations?.findAnnotation(TRANSIENT_ANNOTATION_FQ_NAME)<EOL>"}
{"signature": "if (declaration is FirConstructor && !declaration.isPrimary && !hasJsName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportWrongExportedDeclaration(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val CREATE_FROM_PARCEL_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "when (capturedType.captureStatus()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CaptureStatus.FROM_EXPRESSION -> false<EOL><INDENT><INDENT><INDENT><INDENT>CaptureStatus.FOR_SUBTYPING -> true<EOL><INDENT><INDENT><INDENT><INDENT>CaptureStatus.FOR_INCORPORATION -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT> + renderBaseConstraint())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nearestBlocks =", "body": "findNearestBlocksForVariables(variables, this)<EOL>"}
{"signature": "fun main(args: Array<String>?) {", "body": "<EOL><EOL>}"}
{"signature": "for (x in MyIterator()) {", "body": "<EOL><INDENT><INDENT>k+=x<EOL><INDENT>}"}
{"signature": "val npmRange =", "body": "if (acc == null) null else acc intersect next<EOL>"}
{"signature": "for (capture in captures) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>collector.recordCapture(capture)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (any is <!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>Iterator<*><!>) {", "body": "<EOL><INDENT><INDENT>checkSubtype<<!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>Iterator<*><!>>(any)<EOL><INDENT>}"}
{"signature": "if (leftIsNullable && rightIsNullable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "import util.", "body": "HashSet<EOL>"}
{"signature": "if (classifier.topLevelName in declaredProperties) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val qualifiedAccessCandidates =", "body": "findCandidatesForPropertyAccess(classSymbol.annotations, typeArguments, name, element)<EOL>"}
{"signature": "val possibleDrains =", "body": "mutableListOf<PointsToGraphNode>()<EOL>"}
{"signature": "val targetIds =", "body": "configuration.get(JVMConfigurationKeys.MODULES)?.map(::TargetId)<EOL>"}
{"signature": "val irTypeAlias =", "body": "classifierStorage.getCachedTypeAlias(typeAlias)!!<EOL>"}
{"signature": "var isReified =", "body": "false<EOL>"}
{"signature": "for (extension in irGenerationExtensions) {", "body": "<EOL><INDENT><INDENT>extension.generate(irModuleFragment, this)<EOL><INDENT>}"}
{"signature": "if (e.message != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT> + e.message<EOL><INDENT><INDENT>}"}
{"signature": "val sf<NUM_LIT> =", "body": "::suspendFn<NUM_LIT> as Any<EOL>"}
{"signature": "for ((mode, jsFiles) in allJsFiles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val entryModulePath = extractEntryModulePath(mode, testServices)<EOL><INDENT><INDENT><INDENT><INDENT>runGeneratedCode(entryModulePath, jsFiles, testModuleName, testPackage, withModuleSystem)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val MODULE_MAPPING_FILE_NAME =", "body": "<STR_LIT> + ModuleMapping.MAPPING_FILE_EXT<EOL>"}
{"signature": "val writeMethod =", "body": "WRITE_METHOD_NAMES[asmType] ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (size.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>if (size.isNotEmpty())<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT>null<EOL><INDENT>}"}
{"signature": "val lambdasString =", "body": "directives[<STR_LIT>]<EOL>"}
{"signature": "fun usage(<EOL><INDENT>foo: _root_ide_package_.dependency.Foo<EOL>) {", "body": "<EOL><INDENT><expr><STR_LIT></expr><EOL><EOL><INDENT>_root_ide_package_.dependency.Foo.bar()<EOL>}"}
{"signature": "for ((parameter, type) in typeArguments.entries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val name = parameter.getName().identifier<EOL><INDENT><INDENT><INDENT><INDENT>val sw = BothSignatureWriter(BothSignatureWriter.Mode.TYPE)<EOL><INDENT><INDENT><INDENT><INDENT>mappingsByName[name] = TypeParameterMapping(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type, mapType(type, sw), sw.toString(), allReified || parameter.isReified(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeSystem.extractReificationArgument(type)?.second,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeSystem.extractUsedReifiedParameters(type)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun boxApply(self: dynamic, box: dynamic) {", "body": "<EOL><INDENT>if (box !== VOID) js(<STR_LIT>)<EOL>}"}
{"signature": "val moduleIdWithVersion =", "body": "allModules.getValue(moduleId).moduleIdWithVersion<EOL>"}
{"signature": "when (shrinkMode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ShrinkMode.ChangedLookupsUnchangedClasspath -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>CachedClasspathSnapshotSerializer<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.load(classpathChanges.classpathSnapshotFiles.currentClasspathEntrySnapshotFiles, reporter)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.removeDuplicateAndInaccessibleClasses()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is ShrinkMode.ChangedLookupsChangedClasspath -> shrinkMode.currentClasspathSnapshot<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val invocationsToSkip =", "body": "mutableSetOf<JsInvocation>()<EOL>"}
{"signature": "val isMultifileClassOrPart =", "body": "kind == KotlinClassHeader.Kind.MULTIFILE_CLASS || kind == KotlinClassHeader.Kind.MULTIFILE_CLASS_PART<EOL>"}
{"signature": "val prevValue =", "body": "value<EOL>"}
{"signature": "val NEED_CLASS_REIFICATION_MARKER_METHOD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val invs =", "body": "invOf(A, B)<EOL>"}
{"signature": "val needsPhi =", "body": "expression.branches.last().isUnconditional() && !expression.type.isUnit()<EOL>"}
{"signature": "val fragmentTypes =", "body": "context.fragmentTypes<EOL>"}
{"signature": "val globalVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val builtBoxUnboxFunctions =", "body": "mutableListOf<IrFunction>()<EOL>"}
{"signature": "if (usePreciseJavaTracking) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val changesTracker = JavaClassesTrackerImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>caches.platformCache, changedUntrackedJavaClasses.toSet(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compilerConfiguration.languageVersionSettings,<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>changedUntrackedJavaClasses.clear()<EOL><INDENT><INDENT><INDENT><INDENT>register(JavaClassesTracker::class.java, changesTracker)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var catchBlockTest =", "body": "<STR_LIT><EOL>"}
{"signature": "if (i == strDecimalPart.length) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun call(x: (a: Int, b: String) -> Unit) {", "body": "<EOL><INDENT><expr>x(<NUM_LIT>, <STR_LIT>)</expr><EOL>}"}
{"signature": "fun testCompilePatternWithTerminatorMark() {", "body": "<EOL><INDENT><INDENT>val regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val dependencyIdentifier =", "body": "resolution.dependency.id<EOL>"}
{"signature": "val shiftLeft =", "body": "<!EVALUATED: `<NUM_LIT>`!>shl(<NUM_LIT>L, <NUM_LIT>)<!><EOL>"}
{"signature": "fun test(box: Box<in String>) {", "body": "<EOL><INDENT>box.value.<!UNRESOLVED_REFERENCE!>length<!><EOL>}"}
{"signature": "val CFLAGS_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "when (it.name) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>KotlinSourceSet.COMMON_MAIN_SOURCE_SET_NAME -> it.registerReporting(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>KotlinSourceSet.COMMON_TEST_SOURCE_SET_NAME -> it.registerReporting(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!hasCreatorField()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeCreatorAccessField(codegen, parcelableClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val specificityComparator =", "body": "JvmTypeSpecificityComparator(components.session.typeContext)<EOL>"}
{"signature": "val expectedStackSize =", "body": "if (isReturnWithValue) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val lexerResult =", "body": "printTokens(StringUtil.convertLineSeparators(text), <NUM_LIT>, lexer)<EOL>"}
{"signature": "fun visitAnonymousFunction(anonymousFunction: FirAnonymousFunction) {", "body": "<EOL><INDENT><INDENT>visitElement(anonymousFunction)<EOL><INDENT>}"}
{"signature": "if (x is A || x is B) {", "body": "<EOL><INDENT><INDENT>var k: B = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: A = <!TYPE_MISMATCH!>x<!><EOL><INDENT><INDENT>var k<NUM_LIT>: Any = x<EOL><INDENT>}"}
{"signature": "package value_parameters.", "body": "test<EOL>"}
{"signature": "val podGenTaskName =", "body": "<STR_LIT><EOL>"}
{"signature": "val oldSession =", "body": "this.inferenceSession<EOL>"}
{"signature": "val ERRORS_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val filteredOverridden =", "body": "filterOutOverridden(realOverridden, processDirectOverridden)<EOL>"}
{"signature": "import data.", "body": "PodcastWithExtraInfo<EOL>"}
{"signature": "if (!currentPhase.isItAllowedToCallLazyResolveTo(requestedPhase)) {", "body": "<EOL><INDENT><INDENT><INDENT>exceptions += FirLazyResolveContractViolationException(<EOL><INDENT><INDENT><INDENT><INDENT>currentPhase = currentPhase,<EOL><INDENT><INDENT><INDENT><INDENT>requestedPhase = requestedPhase,<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitSimpleFunction(declaration: IrSimpleFunction, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitSimpleFunction(declaration)<EOL><INDENT>}"}
{"signature": "val bytesToEncode =", "body": "groupsToEncode * bytesPerGroup<EOL>"}
{"signature": "val skipRegularMode =", "body": "JsEnvironmentConfigurationDirectives.SKIP_REGULAR_MODE in module.directives<EOL>"}
{"signature": "val longVal =", "body": "<!EVALUATED(<STR_LIT>)!><NUM_LIT>L<!><EOL>"}
{"signature": "if (hasAbbreviatedType()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + abbreviatedType.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "fun enterCallable() {", "body": "<EOL><INDENT><INDENT>cacheStack += Fir<NUM_LIT>IrScopeCache()<EOL><INDENT>}"}
{"signature": "val packageOrClass =", "body": "<EOL><INDENT><INDENT><INDENT>(resolveToPackageOrClass(firSession.symbolProvider, fqNameToImport) as? PackageResolutionResult.PackageOrClass) ?: return null<EOL>"}
{"signature": "if (a?.returnsNotNull(s) != null && b) {", "body": "<EOL><INDENT><INDENT>s.length<EOL><INDENT>}"}
{"signature": "val preVisit =", "body": "hashSetOf<Path>()<EOL>"}
{"signature": "if (allFieldsInFilePure) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val classifier<NUM_LIT> =", "body": "scope<NUM_LIT>?.getContributedClassifier(name, location)<EOL>"}
{"signature": "if (dependency.platform.isCommon()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val files = dependency.getCapability(MODULE_FILES)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>result.addAll(files)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val childrenBlocks =", "body": "mutableMapOf<BlockOrBody, MutableList<BlockOrBody>>()<EOL>"}
{"signature": "fun configuredV<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>val project = buildProjectWithMPP()<EOL><EOL><INDENT><INDENT>project.setMultiplatformAndroidSourceSetLayoutVersion(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(multiplatformAndroidSourceSetLayoutV<NUM_LIT>, project.kotlinAndroidSourceSetLayout)<EOL><INDENT>}"}
{"signature": "if (valueParameter.defaultValue is FirLazyExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>valueParameter.replaceDefaultValue(newValueParameter.defaultValue)<EOL><INDENT><INDENT>}"}
{"signature": "fun testLocalVarUse() {", "body": "<EOL><INDENT>val ns = J.nullString()<EOL><INDENT>J.use(ns)<EOL><EOL><INDENT>val nns = J.notNullString()<EOL><INDENT>J.use(nns)<EOL>}"}
{"signature": "fun myDelay(timeMillis: Long) {", "body": "}<EOL><EOL>fun myLaunch(<EOL><INDENT>block: suspend MyCoroutineScope.() -> Unit<EOL>) {}"}
{"signature": "val containingClassDescriptor =", "body": "descriptor.containingDeclaration as? ClassDescriptor ?: return false<EOL>"}
{"signature": "for (annotation in annotations.filterOutSourceAnnotations()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fileProto.addAnnotation(serializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitMultiLineComment(comment: JsMultiLineComment) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>writeByte(StatementIds.MULTI_LINE_COMMENT)<EOL><INDENT><INDENT><INDENT><INDENT>writeString(comment.text)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val directParentClassName =", "body": "<EOL><INDENT><INDENT><INDENT>superTypes.lastOrNull { !it.isInterface() }<EOL>"}
{"signature": "fun testOtherLiteralValues() {", "body": "<EOL><INDENT><INDENT>val values: Map<KmAnnotationArgument, String> = mapOf(<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.StringValue(<STR_LIT>) to <STR_LIT>foo\\<STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.CharValue('a') to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.FloatValue(<NUM_LIT>f) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.DoubleValue(<NUM_LIT>) to <STR_LIT>,<EOL><INDENT><INDENT><INDENT>KmAnnotationArgument.BooleanValue(true) to <STR_LIT>,<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>doTest(values)<EOL><INDENT>}"}
{"signature": "val typeToCheck =", "body": "parameter.varargElementType ?: parameter.type<EOL>"}
{"signature": "else if (lastInPlaceExit !== enterNode || !isLocalClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>addEdgeToSubGraph(lastInPlaceExit, graph.enterNode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useMetaInfoProcessors(vararg updaters: Constructor<AdditionalMetaInfoProcessor>) {", "body": "<EOL><INDENT><INDENT>additionalMetaInfoProcessors += updaters<EOL><INDENT>}"}
{"signature": "when (val contractDescription = owner.contractDescription) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is FirLegacyRawContractDescription -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>transformLegacyRawContractDescriptionOwner(owner, contractDescription, hasBodyContract = true)<EOL><INDENT><INDENT><INDENT><INDENT>is FirRawContractDescription -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>transformRawContractDescriptionOwner(owner, contractDescription)<EOL><INDENT><INDENT><INDENT><INDENT>else -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val testObjectVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val KAPT_KOTLIN_GENERATED_OPTION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val primitiveValueParameters =", "body": "args.map { it as Primitive<*> }<EOL>"}
{"signature": "if (upperBound != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>appendFlexibleTypeInfo(builder, upperBound)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allSuperTypes =", "body": "expectedType.getAllSuperTypes()<EOL>"}
{"signature": "if (firAdaptee.receiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irCall.extensionReceiver = adaptedReceiverValue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (classSymbol != null && javaClass != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>javaFacade.convertJavaClassToFir(classSymbol, parentClassSymbol, javaClass)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val traceVisitor =", "body": "TraceClassVisitor(PrintWriter(out))<EOL>"}
{"signature": "val topLevelMethod =", "body": "TreeMaker::class.java.declaredMethods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val androidProgramType =", "body": "configuration.get(BinaryOptions.androidProgramType)<EOL>"}
{"signature": "if (last != null) {", "body": "<EOL><INDENT><INDENT><INDENT>lexemes.next()<EOL><INDENT><INDENT>}"}
{"signature": "fun function(name: String, block: FunctionContext.() -> Unit) {", "body": "<EOL><INDENT><INDENT>functions[name] = block<EOL><INDENT>}"}
{"signature": "val WRITE_TO_PARCEL_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun tf<NUM_LIT>(k: Int) {", "body": "test = k * <NUM_LIT> }"}
{"signature": "val projectionComputer =", "body": "RawProjectionComputer()<EOL>"}
{"signature": "val classVisitor =", "body": "visitor.visitor<EOL>"}
{"signature": "fun renderAnnotations(annotationContainer: FirAnnotationContainer) {", "body": "<EOL><INDENT><INDENT>annotationRenderer?.render(annotationContainer)<EOL><INDENT>}"}
{"signature": "val psiToResolve =", "body": "(psi as? KtCallExpression)?.calleeExpression ?: psi<EOL>"}
{"signature": "val operationRefExpression =", "body": "call.calleeExpression as? KtOperationReferenceExpression ?: return false<EOL>"}
{"signature": "if (nonAbstractCountInInterface > <NUM_LIT> && abstractCountInInterface > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val baseProperty =", "body": "it.fir<EOL>"}
{"signature": "val callableQualifier =", "body": "qualifier<EOL>"}
{"signature": "if (flag) {", "body": "<EOL><INDENT><INDENT><INDENT>test.plusOne(<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val newSubstitutorMap =", "body": "currentSubstitutor.map.toMutableMap()<EOL>"}
{"signature": "val otherArraysStr =", "body": "C().four().toString()<EOL>"}
{"signature": "val fileStream =", "body": "FileOutputStream(path)<EOL>"}
{"signature": "if (script.locationId == null || nonScriptId(script.locationId!!)) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "val packagePartsReports =", "body": "ArrayList<MetadataPropertyReport>()<EOL>"}
{"signature": "val IMPLICIT_LAMBDA_PARAMETER_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (current is IrDeclarationWithVisibility) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (current.visibility == DescriptorVisibilities.LOCAL) return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var typeAnnotations =", "body": "annotations<EOL>"}
{"signature": "fun markAsNotHeld() {", "body": "<EOL><INDENT><INDENT>this.state = this.state and STATE_NOT_HELD<EOL><INDENT>}"}
{"signature": "for (j in expectedRes.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(expectedRes[j], res[j])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val IGNORE_ERRORS_PATTERN =", "body": "Regex(<STR_LIT>\""}
{"signature": "var className =", "body": "<STR_LIT><EOL>"}
{"signature": "for (p in HashSet(properties)) {", "body": "<EOL><INDENT><INDENT><EOL><INDENT><INDENT>(p as? KProperty<NUM_LIT><String>)?.get()<EOL><INDENT><INDENT>(p as? KProperty<NUM_LIT><O, String>)?.get(O)<EOL><INDENT><INDENT>(p as? KProperty<NUM_LIT><O, O, String>)?.get(O, O)<EOL><EOL><INDENT><INDENT>(p as? KMutableProperty<NUM_LIT><String>)?.set(<STR_LIT>)<EOL><INDENT><INDENT>(p as? KMutableProperty<NUM_LIT><O, String>)?.set(O, <STR_LIT>)<EOL><INDENT><INDENT>(p as? KMutableProperty<NUM_LIT><O, O, String>)?.set(O, O, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (konanTarget in listOf(KonanTarget.MACOS_ARM<NUM_LIT>, KonanTarget.MACOS_X<NUM_LIT>, KonanTarget.LINUX_X<NUM_LIT>, KonanTarget.MINGW_X<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>lowerCamelCaseName(<STR_LIT>, name, compilation.target.targetName)<EOL><INDENT><INDENT>}"}
{"signature": "fun acceptVoid(visitor: DeclarationDescriptorVisitor<Void, Void>?) {", "body": "<EOL><INDENT>}"}
{"signature": "if (target.isBrowserConfigured) {", "body": "<EOL><INDENT><INDENT><INDENT>add(target.browser.getChildTestExecution())<EOL><INDENT><INDENT>}"}
{"signature": "fun testSimpleAbstractDeclarationOverridesAbstractThroughFakeOverride() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a, c to b)<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT><INDENT>doTest(c, setOf())<EOL><INDENT>}"}
{"signature": "fun leaveCounter(counter: ReenterableCounter) {", "body": "<EOL><INDENT><INDENT><INDENT>enteredCounters.get()?.remove(counter)<EOL><INDENT><INDENT>}"}
{"signature": "if (name == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>Logger.getInstance(KotlinClassInnerStuffCache::class.java).error(psiClass)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (target.architecture) {", "body": "<EOL><INDENT><INDENT>Architecture.ARM<NUM_LIT> -> DarwinArm<NUM_LIT>AbiInfo()<EOL><EOL><INDENT><INDENT>Architecture.X<NUM_LIT> -> DarwinX<NUM_LIT>AbiInfo()<EOL><EOL><INDENT><INDENT>Architecture.X<NUM_LIT> -> DarwinX<NUM_LIT>AbiInfo()<EOL><EOL><INDENT><INDENT>Architecture.ARM<NUM_LIT> -> DarwinArm<NUM_LIT>AbiInfo(target)<EOL><EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val contractCall =", "body": "this as? FirFunctionCall ?: return false<EOL>"}
{"signature": "val dc =", "body": "DC(<STR_LIT>)<EOL>"}
{"signature": "import plugin.", "body": "PluginShouldRefineInSwift<EOL>"}
{"signature": "if (cacheSettings.icEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>executionContext.logger.warn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var folded =", "body": "false<EOL>"}
{"signature": "val existingFilesFromReports =", "body": "reports.flatMap { it.useFiles }.filter { it.isFile }<EOL>"}
{"signature": "val constructorTypeParametersCount =", "body": "constructor.typeParameters.size<EOL>"}
{"signature": "val typeSymbol =", "body": "(constructorSymbol.resolvedReturnTypeRef.coneType.fullyExpandedType(context.session) as? ConeClassLikeType)<EOL>"}
{"signature": "fun acceptInt(p: Int, action: (Int) -> Unit) {", "body": "<EOL><INDENT>action(p)<EOL>}"}
{"signature": "fun x(x: Box<X>) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimIndent()<EOL><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT>simpleSingleSourceTarget(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>class B<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typealias X = B<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x(x: Box<B>) {}"}
{"signature": "if (compositeExpression == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>singleCheckExpr<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val test_dd =", "body": "<!DEPRECATED_IDENTITY_EQUALS!>d === d<!> || <!DEPRECATED_IDENTITY_EQUALS!>d !== d<!><EOL>"}
{"signature": "val sessionId =", "body": "leaseSessionResult.get()<EOL>"}
{"signature": "val arrayExpression =", "body": "expression.arrayExpression<EOL>"}
{"signature": "val namedCompanionFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (additionalCheckResult != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return CheckResult.IllegalSignature(additionalCheckResult)<EOL><INDENT><INDENT>}"}
{"signature": "val linuxAMain =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "for (item in list) {", "body": "<EOL><INDENT><INDENT>if (!isFirst) append(separator)<EOL><INDENT><INDENT>renderItem(item)<EOL><INDENT><INDENT>isFirst = false<EOL><INDENT>}"}
{"signature": "val a_x_UByte =", "body": "AUByte().x as Any as UByteArray<EOL>"}
{"signature": "val createInvariantKTypeProjection =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (overridden.modality === Modality.ABSTRACT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overridesAbstractInBaseClass = overridden<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val cirExpandedType =", "body": "computeExpandedType(underlyingType)<EOL>"}
{"signature": "val intListMin =", "body": "intList.minByOrNull { it } ?: <NUM_LIT><EOL>"}
{"signature": "import l.", "body": "*<EOL>"}
{"signature": "fun testFunction(a: Any, b: Any) {", "body": "<EOL><INDENT>a as MutableList<String><EOL><INDENT>b as String<EOL><INDENT>a.add(b)<EOL>}"}
{"signature": "if (!predicate(this)) {", "body": "<EOL><INDENT><INDENT>throwUnixError()<EOL><INDENT>}"}
{"signature": "var expectedResult =", "body": "CompilationResult.COMPILATION_SUCCESS<EOL>"}
{"signature": "package part*/<EOL>.", "body": ""}
{"signature": "for (index in <NUM_LIT>.lastIndex) {", "body": "<EOL><INDENT><INDENT>accumulator = operation(accumulator, this[index])<EOL><INDENT>}"}
{"signature": "val setterName =", "body": "computeMethodName(auxiliaryOrigin, JvmAbi.setterName(propertyName), MethodType.SETTER)<EOL>"}
{"signature": "val discoveryResultsConfigurationName =", "body": "getDiscoveryResultsConfigurationName(sourceSetName)<EOL>"}
{"signature": "val currentArgGlobalIndex =", "body": "globalArgIndex.also { globalArgIndex += subtreeSizes[it] }<EOL>"}
{"signature": "fun visitDeclarationStatus(declarationStatus: FirDeclarationStatus, data: Any?) {", "body": "<EOL><INDENT><INDENT>require(declarationStatus is FirResolvedDeclarationStatus)<EOL><INDENT>}"}
{"signature": "val invalidFirstChars =", "body": "setOfNotNull(invalidNameFirstChar, invalidSwiftNameFirstChar)<EOL>"}
{"signature": "val FLEXIBLE_TYPE_COMMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "if (isUnsigned) {", "body": "<EOL><INDENT><INDENT><INDENT>java.lang.Long.parseUnsignedLong(number, radix)<EOL><INDENT><INDENT>}"}
{"signature": "val storageType =", "body": "type.asSigned.capitalized<EOL>"}
{"signature": "val lvs =", "body": "configuration.languageVersionSettings<EOL>"}
{"signature": "if (configurationKind.withRuntime) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(testServices.standardLibrariesPathProvider.runtimeJarForTests().path)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (innerExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateInstructions(innerExpression)<EOL><INDENT><INDENT><INDENT><INDENT>copyValue(innerExpression, expression)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val expressionResolutionExtensions =", "body": "session.extensionService.expressionResolutionExtensions.takeIf { it.isNotEmpty() }<EOL>"}
{"signature": "val flagsForwardDeclaration =", "body": "<NUM_LIT><EOL>"}
{"signature": "val base<NUM_LIT>RangeCategory =", "body": "rangeCategory.toVarLenBase<NUM_LIT>()<EOL>"}
{"signature": "if (!isRelevant(iterator.next().value, overriddenByParent.values, allFilteredOverriddenDeclarations)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>iterator.remove()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (source?.kind !is KtRealSourceElementKind) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var sayResult =", "body": "<STR_LIT><EOL>"}
{"signature": "val lastIsOk =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>valueParameters.lastOrNull()?.let { !it.declaresOrInheritsDefaultValue() && it.varargElementType == null } == true<EOL>"}
{"signature": "fun visitBinaryLogicExpression(binaryLogicExpression: FirBinaryLogicExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitBinaryLogicExpression(binaryLogicExpression)<EOL><INDENT>}"}
{"signature": "if (expandedExpectedReturnType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>expectedReturnType<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val irGetObject =", "body": "expression.type.classOrNull?.owner!!.createGetObject()<EOL>"}
{"signature": "val specialJsNumberMap =", "body": "HashMap<Int, Any>(<NUM_LIT>)<EOL>"}
{"signature": "for (i in (logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>)).reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val proto =", "body": "nameTable.getQualifiedName(fqNameIndex)<EOL>"}
{"signature": "var RUN_SLOW_ASSERTIONS =", "body": "false<EOL>"}
{"signature": "val listOfLetterIndexPairs =", "body": "('a'..'z').withIndex().map { (i, c) -> <STR_LIT> to i }<EOL>"}
{"signature": "if (hasGetterFlags()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getterFlags<EOL><INDENT>}"}
{"signature": "package frontend<EOL>.", "body": ""}
{"signature": "val originalIsInterface =", "body": "isJvmInterface(declarationOwner)<EOL>"}
{"signature": "if (symbol == null) {", "body": "<EOL><INDENT><INDENT><INDENT>rawReport(<EOL><INDENT><INDENT><INDENT><INDENT>false,<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val aArg =", "body": "a.getArgument(i)<EOL>"}
{"signature": "val kPropertyImplType =", "body": "symbols.kProperty<NUM_LIT>Impl.typeWith(anyType, anyType)<EOL>"}
{"signature": "fun set(x: String, y: Boolean, value: Int) {", "body": "}<EOL><EOL><INDENT>fun d(x: Int) {<EOL><INDENT><INDENT><!NO_VALUE_FOR_PARAMETER(<STR_LIT>)!>this[<STR_LIT>]<!> = <NUM_LIT><EOL><INDENT>}"}
{"signature": "val clientFlag =", "body": "FileUtil.createTempFile(getTestName(true), <STR_LIT>)<EOL>"}
{"signature": "if (container?.evaluatedInPlace == false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val importsProvider =", "body": "ScriptDependenciesProvider.getInstance(project)<EOL>"}
{"signature": "fun recordLookups() {", "body": "<EOL><INDENT><INDENT><INDENT>processor.recordLookups(skippedDataForLookup, name)<EOL><INDENT><INDENT>}"}
{"signature": "val enableCInteropCommonizationSetByExternalPluginKey =", "body": "<STR_LIT><EOL>"}
{"signature": "if (rhs.isNullConst()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return irEqeqNull(lhs)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (companionObjectNode.commonDeclaration() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>commonClass.companion = companionObjectName<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val diagnosticDescriptors =", "body": "groupDiagnosticsByTextRange(validDiagnostics, uncheckedDiagnostics)<EOL>"}
{"signature": "val minusIntConstParenthesized =", "body": "-(intConst)<EOL>"}
{"signature": "val messageLogger =", "body": "configuration.irMessageLogger<EOL>"}
{"signature": "val unsignedPrimitives =", "body": "setOf(UInt, ULong, UByte, UShort)<EOL>"}
{"signature": "val originalProperty =", "body": "task.input<EOL>"}
{"signature": "if (classifierDescriptor is MemberDescriptor && classifierDescriptor.isEffectivelyExternal()) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val jdk<NUM_LIT>Home =", "body": "File(System.getProperty(<STR_LIT>))<EOL>"}
{"signature": "fun setter(s: String) {", "body": "tokenPosition = s }"}
{"signature": "val dependenciesTrackingResult =", "body": "generationState.dependenciesTracker.collectResult()<EOL>"}
{"signature": "val dataPathRoot =", "body": "testClassModel.dataPathRoot<EOL>"}
{"signature": "when (componentIdentifier) {", "body": "<EOL><INDENT><INDENT><INDENT>is ProjectComponentIdentifier -> idOfRootModuleByProjectPath(thisProject, componentIdentifier.projectPath)<EOL><INDENT><INDENT><INDENT>is ModuleComponentIdentifier -> ModuleDependencyIdentifier(componentIdentifier.group, componentIdentifier.module)<EOL><INDENT><INDENT><INDENT>else -> idFromName(componentIdentifier.displayName)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinPtr =", "body": "passThroughBridge(<STR_LIT>, CTypes.voidPtr, symbols.nativePtrType)<EOL>"}
{"signature": "when (compilerOutputInterceptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CompilerOutputInterceptor.DEFAULT -> callCompiler(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compilerArgs = compilerArgs,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinNativeClassLoader = classLoader.classLoader<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>CompilerOutputInterceptor.NONE -> callCompilerWithoutOutputInterceptor(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compilerArgs = compilerArgs,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>kotlinNativeClassLoader = classLoader.classLoader<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val classWithCallback =", "body": "ClassWithCallback()<EOL>"}
{"signature": "if (expr.typetag == TypeTag.BOOLEAN) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expr.value != <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val BUNDLE =", "body": "<STR_LIT><EOL>"}
{"signature": "val fileInfos =", "body": "info.fileInfos.ifEmpty { return }<EOL>"}
{"signature": "if (task.classpath.files.size <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitResolvedContractDescription(resolvedContractDescription: FirResolvedContractDescription) {", "body": "<EOL><INDENT><INDENT>visitElement(resolvedContractDescription)<EOL><INDENT>}"}
{"signature": "val gaps =", "body": "length - size<EOL>"}
{"signature": "val newLibraryLayout =", "body": "KotlinLibraryLayoutForWriter(newLibraryFile, newLibraryTmpDir)<EOL>"}
{"signature": "if (declaration !is FirFile && !context.isTopLevel) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(jsExport.source, FirWebCommonErrors.NESTED_JS_EXPORT, context)<EOL><INDENT><INDENT>}"}
{"signature": "var i<NUM_LIT> =", "body": "getT<I>()<EOL>"}
{"signature": "val oldFqNames =", "body": "snapshot.protos.keys<EOL>"}
{"signature": "val nativeTestTransformationTask =", "body": "locateOrRegisterCInteropMetadataDependencyTransformationTask(nativeTest)<EOL>"}
{"signature": "fun testSimpleAbstractDeclarationSameSignature() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a)<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT>}"}
{"signature": "val closureCallExports =", "body": "mutableMapOf<String, IrSimpleFunction>()<EOL>"}
{"signature": "for (directive in declarationsOrPackageDirectives) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val reportAt = (directive as? KtPackageDirective)?.nameIdentifier ?: directive<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.PACKAGE_OR_CLASSIFIER_REDECLARATION.on(reportAt, fqName.shortName().asString()))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isArrayType =", "body": "info.type.sort == Type.ARRAY<EOL>"}
{"signature": "val timeZone =", "body": "currentTime.getTimezoneOffset() / <NUM_LIT><INDENT>"}
{"signature": "val bodyVisitor =", "body": "DeclarationBodyVisitor(descriptor, nonConstructorContext, enumInitFunction)<EOL>"}
{"signature": "var queueCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val userProvidedLibraries =", "body": "unresolvedLibraries.asSequence()<EOL>"}
{"signature": "val nextRoundChecker =", "body": "compilerConfiguration.get(JSConfigurationKeys.INCREMENTAL_NEXT_ROUND_CHECKER) ?: return false<EOL>"}
{"signature": "val newDirtySources =", "body": "HashSet<File>()<EOL>"}
{"signature": "val MPP_PACKAGE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (this is IrFileImpl && isInsideModule) {", "body": "<EOL><INDENT><INDENT>module.descriptor<EOL><INDENT>}"}
{"signature": "if (c == a) {", "body": "<EOL><INDENT><INDENT>foo()<EOL><INDENT>}"}
{"signature": "val commonArgumentsElement =", "body": "compilerInfoElement?.getOptionBody(<STR_LIT>)<EOL>"}
{"signature": "var xs =", "body": "intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val wrapperClass =", "body": "getWrappingClass(declaration) ?: return emptySequence()<EOL>"}
{"signature": "if (useZip) {", "body": "<EOL><INDENT><INDENT><INDENT>project.zipTree(archive)<EOL><INDENT><INDENT>}"}
{"signature": "val newNonStaticDefaultSymbol =", "body": "functionSymbolMap[nonStaticDefaultSymbol] ?: continue<EOL>"}
{"signature": "for (catchClause in element.catchClauses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>catchClause.catchBody?.recordUsedAsExpression()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (z in zs) {", "body": "<EOL><INDENT><INDENT>a.z()<EOL><INDENT>}"}
{"signature": "val parenthesesOrBlank =", "body": "if (isFunction) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (assignmentIndex[variable] != index) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reassignedVariables[variable] = max(index, reassignedVariables[variable] ?: <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!existingAnnotation.hasSameArguments(superAnnotation, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>existingAnnotation.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FirSerializationErrors.INCONSISTENT_INHERITABLE_SERIALINFO,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>existingAnnotation.annotationTypeRef.coneType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classSymbol.defaultType(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (newBody != null && loopBodyTransformer != null) {", "body": "<EOL><INDENT><INDENT><INDENT>loopBodyTransformer.transform(context, newBody, mainLoopVariable, loopHeader, loopVariableComponents)<EOL><INDENT><INDENT>}"}
{"signature": "val WEBPACK_INFRASTRUCTURE_REGEX =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val linesOfCode =", "body": "metricsMap[GradleBuildPerformanceMetric.ANALYZED_LINES_NUMBER]<EOL>"}
{"signature": "if (!isSatisfied()) {", "body": "<EOL><INDENT>  if (strength == Strength.REQUIRED) alert(<STR_LIT>)<EOL><INDENT>  return null<EOL><INDENT>}"}
{"signature": "if (this.nullable == nullable) {", "body": "<EOL><INDENT><INDENT>this<EOL><INDENT>}"}
{"signature": "val nullabilitySuffix =", "body": "if (this !is ConeErrorType && this !is ConeErrorType) nullability.suffix else <STR_LIT><EOL>"}
{"signature": "val annotatedTypes =", "body": "allTypes.filter(::hasAnnotationOnType)<EOL>"}
{"signature": "val dtsFile =", "body": "outputJsFile.dtsForJsFile<EOL>"}
{"signature": "for (i in <NUM_LIT> until stub.valueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>call.putValueArgument(i, JsIrBuilder.buildGetValue(stub.valueParameters[i].symbol))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val CONTINUATION_RESULT_FIELD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val dependedOnByRiskyCode =", "body": "<NUM_LIT><EOL>"}
{"signature": "val DECLARATION_ORIGIN_STATIC_GLOBAL_INITIALIZER =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val classTask =", "body": "ClassTask(checkerConfiguration, class<NUM_LIT>, class<NUM_LIT>, classReport)<EOL>"}
{"signature": "while (generators.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>val (libFile, srcFile, fragmentGenerator) = generators.removeFirst()<EOL><INDENT><INDENT><INDENT>rebuiltFragments[libFile, srcFile] = fragmentGenerator()<EOL><INDENT><INDENT>}"}
{"signature": "val ktReceiver =", "body": "expressionReceiver.expression<EOL>"}
{"signature": "if (!functionExpression.function.returnType.isUnit()) {", "body": "<EOL><INDENT><INDENT><INDENT>metrics.recordLambda(<EOL><INDENT><INDENT><INDENT><INDENT>composable = true,<EOL><INDENT><INDENT><INDENT><INDENT>memoized = !collector.hasCaptures,<EOL><INDENT><INDENT><INDENT><INDENT>singleton = !collector.hasCaptures<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return functionExpression<EOL><INDENT><INDENT>}"}
{"signature": "val nonPrivates =", "body": "members.filter { !it.isPrivate() }<EOL>"}
{"signature": "val closer =", "body": "Closer.create()<EOL>"}
{"signature": "for (e in uLongArray) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += e<EOL><INDENT><INDENT>}"}
{"signature": "if (x is Int) {", "body": "<EOL><INDENT><INDENT>val b = x as? Int<EOL><INDENT>}"}
{"signature": "if (BaseTest.compilerVersion < KotlinToolingVersion(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>options.useOutputDirs(setOf(icCachesDir.toFile(), outputDirectory.toFile()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val iteratorFun =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sequenceClassSymbol!!.getSimpleFunction(OperatorNameConventions.ITERATOR.asString())!!.owner<EOL>"}
{"signature": "fun checkBeforeLayoutApplied(<EOL><INDENT><INDENT>diagnosticsCollector: KotlinToolingDiagnosticsCollector,<EOL><INDENT><INDENT>target: KotlinAndroidTarget,<EOL><INDENT><INDENT>layout: KotlinAndroidSourceSetLayout<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>diagnosticsCollector.reportOncePerGradleBuild(<EOL><INDENT><INDENT><INDENT>target.project, KotlinToolingDiagnostics.AndroidSourceSetLayoutV<NUM_LIT>Deprecation()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun add(other: Statistics) {", "body": "<EOL><INDENT><INDENT>passed += other.passed<EOL><INDENT><INDENT>failed += other.failed<EOL><INDENT><INDENT>error += other.error<EOL><INDENT><INDENT>skipped += other.skipped<EOL><INDENT>}"}
{"signature": "fun add(bridge: FunctionBridge) {", "body": "<EOL><INDENT><INDENT>functions += bridge.kotlinFunctionBridge.lines<EOL><INDENT><INDENT>imports += bridge.kotlinFunctionBridge.packageDependencies<EOL><INDENT>}"}
{"signature": "val dependentCache =", "body": "dataManager.getKotlinCache(it)<EOL>"}
{"signature": "val superClassGenerics =", "body": "superClassGenerics(genericExportScope)<EOL>"}
{"signature": "if (irClass.symbol == context.irBuiltIns.anyClass || currentConstructor.hasStrictSignature(context)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return super.visitConstructorCall(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val testExpr =", "body": "ifStmt?.ifExpression<EOL>"}
{"signature": "when (val extensionReceiver = expression.extensionReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrClassReference -> extensionReceiver.generateDirectValueUsage() ?: super.visitCall(expression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrGetClass -> extensionReceiver.generateDirectConstructorUsage()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> super.visitCall(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasFlexibleUpperBoundId()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeById(flexibleUpperBoundId).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "if (context is JsIrBackendContext && context.es<NUM_LIT>mode) {", "body": "<EOL><INDENT><INDENT><INDENT>irEqeqeqWithoutBox(irGetField(null, instanceField), context.getVoid())<EOL><INDENT><INDENT>}"}
{"signature": "val smallArray =", "body": "smallFoo.array<EOL>"}
{"signature": "if (dataString != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.println(<STR_LIT><STR_LIT>\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val QUANT_PLUS_P =", "body": "QMOD_POSSESSIVE or '+'.toInt()<EOL>"}
{"signature": "if (listeners.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>for (listener in listeners.toMutableList())<EOL><INDENT><INDENT><INDENT><INDENT>listener()<EOL><INDENT><INDENT>}"}
{"signature": "import pvar.", "body": "*<EOL>"}
{"signature": "val shouldRewritePomDependencies =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>project.provider { PropertiesProvider(project).keepMppDependenciesIntactInPoms != true }<EOL>"}
{"signature": "val labelProto =", "body": "proto.label<EOL>"}
{"signature": "val inlinePrefix =", "body": "if (wrapperVisibility == DescriptorVisibilities.PUBLIC) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (!localPropertiesFile.exists()) {", "body": "<EOL><INDENT><INDENT>localPropertiesFile.createNewFile()<EOL><INDENT>}"}
{"signature": "if (!result && it != this && it in set) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (argumentExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(INVISIBLE_MEMBER.on(argumentExpression, invisibleMember, invisibleMember.visibility, invisibleMember))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (metadataDependencyResolution) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is MetadataDependencyResolution.ChooseVisibleSourceSets -> resolveMultiplatformSourceSets(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>metadataDependencyResolution.projectDependency(sourceSet.project) ?: return@flatMap emptyList()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is MetadataDependencyResolution.KeepOriginalDependency -> resolveJvmSourceSets(sourceSet)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> emptyList()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val namesAfter =", "body": "domainObjectCollectionsToCheck.associateWith { it.names.toSet() }<EOL>"}
{"signature": "for ((a: Int, b: Int) in b) {", "body": "}"}
{"signature": "val NonRestartableComposable =", "body": "fqNameFor(<STR_LIT>)<EOL>"}
{"signature": "val innerClassForOuter =", "body": "clazz.innerClasses.firstOrNull { it.name == clazz.name } ?: return null<EOL>"}
{"signature": "val envSign =", "body": "XcodeEnvironment.sign<EOL>"}
{"signature": "if (binaryModuleData.friends in pathFiltersMap) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>allFriendsDependencies += binaryModuleData.friends<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val iii =", "body": "<NUM_LIT><EOL>"}
{"signature": "val unchangedOrModifiedClasses =", "body": "currentClasses.keys - addedClasses<EOL>"}
{"signature": "val kFunctionClass =", "body": "<EOL><INDENT><INDENT>symbolTable.descriptorExtension.referenceClass(irBuiltIns.builtIns.getBuiltInClassByFqName(FqName(<STR_LIT>)))<EOL>"}
{"signature": "val globalState =", "body": "getGlobalState()<EOL>"}
{"signature": "val actualPretty =", "body": "data.pointersForPrettyRendering.renderDeclarations()<EOL>"}
{"signature": "if (!bodyResolved) {", "body": "<EOL><INDENT><INDENT><INDENT>function.replaceControlFlowGraphReference(controlFlowGraphReference)<EOL><INDENT><INDENT>}"}
{"signature": "val kaptClasspath =", "body": "kaptJars<EOL>"}
{"signature": "val isTransformedLambda =", "body": "with(transformer) { element.hasTransformedLambda() }<EOL>"}
{"signature": "for ((index, property) in serializableProperties.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val propertyType = codegen.typeMapper.mapType(property.type)<EOL><INDENT><INDENT><INDENT><INDENT>callReadProperty(expressionCodegen, property, propertyType, index, inputVar, descVar, propVar)<EOL><INDENT><INDENT><INDENT><INDENT>propVar += propertyType.size<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var nameIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val binaryOperatorCache =", "body": "mutableMapOf<Triple<Name, IrType, IrType>, IrSimpleFunctionSymbol>()<EOL>"}
{"signature": "fun testDelegatedAtomicRef() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, ref.b.n)<EOL><INDENT><INDENT>_ref.lazySet(A(B(<NUM_LIT>)))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, ref.b.n)<EOL><INDENT><INDENT>assertTrue(_ref.compareAndSet(_ref.value, A(B(<NUM_LIT>))))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, ref.b.n)<EOL><INDENT><INDENT>ref = A(B(<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, _ref.value.b.n)<EOL><INDENT>}"}
{"signature": "val refernece =", "body": "if (true) ::forReference else null<EOL>"}
{"signature": "val fakeLineNumber =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>sourceMapper.parent.mapSyntheticLineNumber(SourceMapper.LOCAL_VARIABLE_INLINE_ARGUMENT_SYNTHETIC_LINE_NUMBER)<EOL>"}
{"signature": "when (it.changeType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ChangeType.ADDED, ChangeType.MODIFIED -> modified.add(it.file)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ChangeType.REMOVED -> removed.add(it.file)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> Unit<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val something =", "body": "<STR_LIT><EOL>"}
{"signature": "val asList =", "body": "substitution.split(<STR_LIT>).map { it.trim() }<EOL>"}
{"signature": "if (mainPackage.isRoot) {", "body": "<EOL><INDENT><INDENT><INDENT>configuration.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>CompilerMessageSeverity.STRONG_WARNING,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "while (containingClassLookUp != null && containingClassLookUp.classId.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>val currentClass = containingClassLookUp.toFirRegularClass(moduleData.session) ?: break<EOL><INDENT><INDENT><INDENT>designation.add(currentClass)<EOL><INDENT><INDENT><INDENT>containingClassLookUp = currentClass.containingClassForLocal()<EOL><INDENT><INDENT>}"}
{"signature": "val defaultSourceSet =", "body": "target.project.kotlinExtension.sourceSets.maybeCreate(defaultSourceSetName)<EOL>"}
{"signature": "if (isIncremental) {", "body": "<EOL><INDENT><INDENT><INDENT>findClasspathChanges(inputChanges)<EOL><INDENT><INDENT>}"}
{"signature": "if (typeParameterIndex < explicitTypeArgumentsNumber) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addKotlinToJava(kotlinFqNameUnsafe: FqName, javaClassId: ClassId) {", "body": "<EOL><INDENT><INDENT>kotlinToJava[kotlinFqNameUnsafe.toUnsafe()] = javaClassId<EOL><INDENT>}"}
{"signature": "val toAdd =", "body": "logicSystem.or(loopEnterAndContinueFlows.map { it.getTypeStatement(variable) ?: return@forEach })<EOL>"}
{"signature": "val thinMachOMagic =", "body": "listOf(<NUM_LIT>xfe, <NUM_LIT>xed, <NUM_LIT>xfa, <NUM_LIT>xcf).reversed()<EOL>"}
{"signature": "val STRING_ELEMENT_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun foo(a: A<Any>) {", "body": "}<EOL><INDENT> *<EOL><INDENT> * The type of the `foo`'s parameter in the metadata is actually `MutableList<Any>`, and its abbreviation is `A<Any>`.<EOL><INDENT> */<EOL><INDENT>public var abbreviatedType: KmType? = null<EOL><EOL><INDENT>/**<EOL><INDENT> * Outer type of this type, if this type's classifier is an inner class. For example:<EOL><INDENT> *<EOL><INDENT> *<INDENT> class A<T> { inner class B<U> }"}
{"signature": "val dexMethodCount =", "body": "tasks.register(<STR_LIT>, DexMethodCount::class.java, action)<EOL>"}
{"signature": "fun mavenPublication(action: Action<MavenPublication>) {", "body": "<EOL><INDENT><INDENT>mavenPublicationActions.add(action)<EOL><INDENT>}"}
{"signature": "fun assertEquals(expected: T, actual: T?, input: String, operation: String) {", "body": "<EOL><INDENT><INDENT>assertTrue(equality(expected, actual), <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (!DescriptorAsmUtil.isStaticMethod((sourceCompiler as PsiSourceCompilerForInline).context.contextKind, functionDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>hiddenParameters += invocationParamBuilder.addNextParameter(methodOwner, false, actualDispatchReceiver) to<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>codegen.frameMap.enterTemp(methodOwner)<EOL><INDENT><INDENT>}"}
{"signature": "val classProto =", "body": "serializer.classProto(scriptDescriptor).build()<EOL>"}
{"signature": "val aliasedName =", "body": "importDirectiveForReferencedSymbol.alias?.name<EOL>"}
{"signature": "fun testAgainstFirWithStableAbi() {", "body": "<EOL><INDENT><INDENT>val library = compileLibrary(<STR_LIT>, additionalOptions = listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(library))<EOL><INDENT>}"}
{"signature": "val alreadyPresent =", "body": "computeStubsForSuperClasses(irClass)<EOL>"}
{"signature": "fun foo<NUM_LIT>(m: TwoAbstract) {", "body": "}<EOL>fun foo<NUM_LIT>(m: Derived) {}"}
{"signature": "val scriptFileLocation =", "body": "compilationConfiguration[ScriptCompilationConfiguration.scriptFileLocation]<EOL>"}
{"signature": "if (!checkCallableDeclaration(context, psiElement, descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>recordPrivateToThis(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "fun reread() {", "body": "<EOL><INDENT><INDENT>lookAhead = currentChar<EOL><INDENT><INDENT>lookAheadSpecialToken = curSpecialToken<EOL><INDENT><INDENT>index = lookAheadTokenIndex<EOL><INDENT><INDENT>lookAheadTokenIndex = curTokenIndex<EOL><INDENT><INDENT>movePointer()<EOL><INDENT>}"}
{"signature": "val MULTIPLATFORM_RESOURCES_DIRECTORY =", "body": "<STR_LIT><EOL>"}
{"signature": "if (returnCrossesTryCatchBoundary(expression)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateJumpsToCatchAndFinally()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rawFlags =", "body": "module.directives[ConfigurationDirectives.KOTLIN_CONFIGURATION_FLAGS]<EOL>"}
{"signature": "val annotationRetention =", "body": "annotationClass.getAnnotationRetention() ?: KotlinRetention.RUNTIME<EOL>"}
{"signature": "if (coneAttributes === constructor.attributes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>constructor<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var arguments =", "body": "getArguments()<EOL>"}
{"signature": "fun abstractIterable() {", "body": "<EOL><INDENT><INDENT>Blackhole.consume(sum(iterable))<EOL><INDENT>}"}
{"signature": "val fmodules =", "body": "false<EOL>"}
{"signature": "val c<NUM_LIT>p<NUM_LIT> =", "body": "c<NUM_LIT>p<NUM_LIT><EOL>"}
{"signature": "fun test<NUM_LIT>(ab_c: a.b.c) {", "body": "<EOL><INDENT>ab_c.ab_c()<EOL>}"}
{"signature": "fun addTimeNs(buildTime: T, timeNs: Long) {", "body": "<EOL><INDENT><INDENT>buildTimesNs[buildTime] = buildTimesNs.getOrDefault(buildTime, <NUM_LIT>) + timeNs<EOL><INDENT>}"}
{"signature": "fun byteGlobal_setField() {", "body": "byteGlobal = <NUM_LIT> }"}
{"signature": "else if (section == ObjCDataGenerator.classNameGenerator.section) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (index in result.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(result[index], sb[index])<EOL><INDENT><INDENT><INDENT>assertEquals(result[index], cs[index])<EOL><INDENT><INDENT>}"}
{"signature": "val elapsedTimeMillis =", "body": "formatTime((finishTimeNanos - startTimeNanos) / <NUM_LIT>_<NUM_LIT>L)<EOL>"}
{"signature": "fun setRootSet(threadLocalReferences: Long, stackReferences: Long, globalReferences: Long, stableReferences: Long) {", "body": "<EOL><INDENT><INDENT>rootSet = RootSetStatistics(threadLocalReferences, stackReferences, globalReferences, stableReferences)<EOL><INDENT>}"}
{"signature": "val daemon<NUM_LIT> =", "body": "KotlinCompilerClient.connectToCompileService(compilerId, clientFlag<NUM_LIT>, daemonJVMOptions, daemonOptions, DaemonReportingTargets(out = System.err), autostart = true)<EOL>"}
{"signature": "val leadingArgs =", "body": "commonLeadingArgs.toMutableList()<EOL>"}
{"signature": "if (value is FromSuspensionPointValue && insn.opcode == Opcodes.CHECKCAST) {", "body": "<EOL><INDENT><INDENT><INDENT>return value<EOL><INDENT><INDENT>}"}
{"signature": "val lookupInterfaceTableRecord =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "val Continuation =", "body": "<STR_LIT>.coroutinesId()<EOL>"}
{"signature": "if (isExpected) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>testServices.assertions.assertNotNull(psiAnnotation)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun consume(value: TargetType) {", "body": "}<EOL>fun consume(value: DifferentType) {}"}
{"signature": "if (lastQuestion != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return markRange((prevQuestion ?: lastQuestion).psi, lastQuestion.psi)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package j<EOL>.", "body": ""}
{"signature": "val int<NUM_LIT>PtrPtrType =", "body": "pointerType(int<NUM_LIT>PtrType)<EOL>"}
{"signature": "val listToRetain =", "body": "(head..tail).filter { Random.nextBoolean() }<EOL>"}
{"signature": "val reflectKotlinClassFinder =", "body": "ReflectKotlinClassFinder(classLoader)<EOL>"}
{"signature": "if (isSamWrapper(type.internalName) || isAnonymousClass(type.internalName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>handleAnonymousObjectRegeneration()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val cachedCacheLookupFuns =", "body": "mutableMapOf<IrClass, IrSimpleFunction>()<EOL>"}
{"signature": "val testsByParagraph =", "body": "testsBySection.getOrCreate<JsonObject>(specPlace.paragraphNumber.toString())<EOL>"}
{"signature": "val readOnlyId =", "body": "classId.mutableToReadOnly()<EOL>"}
{"signature": "val castInsnsListener =", "body": "MethodNode(Opcodes.API_VERSION)<EOL>"}
{"signature": "val SERVICE_DIRECTORY_LOCATION =", "body": "<STR_LIT><EOL>"}
{"signature": "val safeCallWhen =", "body": "right.statements[<NUM_LIT>] as IrWhen<EOL>"}
{"signature": "fun plusAssign(other: A) {", "body": "<EOL><INDENT><INDENT>value = suspendThere(A(value + other.value)).value<EOL><INDENT>}"}
{"signature": "if (fromClass in signedIntegerClasses && toClass in unsignedIntegerClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irBuiltIns.getNonBuiltInFunctionsByExtensionReceiver(name, <STR_LIT>)[fromClass]!!<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val samePackageResult =", "body": "samePackageCall()<EOL>"}
{"signature": "if (arguments.sourceMapPrefix != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(WARNING, <STR_LIT>, null)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val friendNames =", "body": "(moduleData.friendDependencies + dependsOnTransitive).map { it.friendsMapName() }<EOL>"}
{"signature": "fun renderModality(modality: Modality, builder: StringBuilder, defaultModality: Modality) {", "body": "<EOL><INDENT><INDENT>if (!renderDefaultModality && modality == defaultModality) return<EOL><INDENT><INDENT>renderModifier(builder, DescriptorRendererModifier.MODALITY in modifiers, modality.name.toLowerCaseAsciiOnly())<EOL><INDENT>}"}
{"signature": "val objCFactoryFqName =", "body": "NativeStandardInteropNames.objCFactoryClassId.asSingleFqName()<EOL>"}
{"signature": "val CLASS_DECL_TOKENS =", "body": "TokenSet.create(KtTokens.CLASS_KEYWORD, KtTokens.INTERFACE_KEYWORD)<EOL>"}
{"signature": "val expectedInvokeOrder =", "body": "<STR_LIT><EOL>"}
{"signature": "if (fragments.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lookupStorage =", "body": "LookupStorage(storageRoot, icContext)<EOL>"}
{"signature": "val bodiesResult =", "body": "firstBranch.result.accept(this, firstConditionResult)<EOL>"}
{"signature": "val nonPublishedVariants =", "body": "MPPNativeTargets.unsupported<EOL>"}
{"signature": "if ((callableStub as KotlinPropertyStub).hasInitializer()) {", "body": "<EOL><INDENT><INDENT><INDENT>KotlinNameReferenceExpressionStubImpl(callableStub, StringRef.fromString(COMPILED_DEFAULT_INITIALIZER))<EOL><INDENT><INDENT>}"}
{"signature": "for (key in listOf(argument.value, argument.shortName, argument.deprecatedName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (key.isNotEmpty()) put(key, argumentField)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitGetObjectValue(expression: IrGetObjectValue) {", "body": "<EOL><INDENT><INDENT>print(expression.symbol.owner.name)<EOL><INDENT>}"}
{"signature": "val avSampleFormat =", "body": "sampleFormat.toAVSampleFormat() ?: return null<EOL>"}
{"signature": "package foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT>foo<NUM_LIT><EOL>.", "body": ""}
{"signature": "val returnExpression =", "body": "IrReturnImpl(<NUM_LIT>, <NUM_LIT>, irBuiltIns.nothingType, function.symbol, const)<EOL>"}
{"signature": "fun visitVariableDeclarationNode(node: VariableDeclarationNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val classInternalName =", "body": "input.readUTF()<EOL>"}
{"signature": "if (insnOpcode != Opcodes.ATHROW && (insnOpcode < Opcodes.IRETURN || insnOpcode > Opcodes.RETURN)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>visitOpInsn(insn)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (value in element.values) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>require(value is WasmTable.Value.Function)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>appendModuleFieldReference(value.function.owner)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(a: A, out<NUM_LIT>: Out<NUM_LIT><A>, out<NUM_LIT>: Out<NUM_LIT><<!CONFLICTING_PROJECTION_IN_TYPEALIAS_EXPANSION!>in<!> A>, out<NUM_LIT>: Out<NUM_LIT><<!REDUNDANT_PROJECTION!>out<!> A>) {", "body": "<EOL><INDENT>out<NUM_LIT>value().foo()<EOL><INDENT>out<NUM_LIT><!UNRESOLVED_REFERENCE!>value<!>().foo()<EOL><INDENT>out<NUM_LIT>value().foo()<EOL>}"}
{"signature": "fun withDefaultImpl(name: Name<String>) {", "body": "<EOL><INDENT><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "val constantValue =", "body": "propertyStub.constantInitializer ?: return null<EOL>"}
{"signature": "val classifiersIds =", "body": "group.nodes.map { rootNode -> rootNode.allNodes.map { it.type.classifierId }.toSet() }<EOL>"}
{"signature": "fun visitInlinedLocalFunctionDeclarationInstruction(instruction: InlinedLocalFunctionDeclarationInstruction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val body = instruction.body as PseudocodeImpl<EOL><INDENT><INDENT><INDENT><INDENT>body.parent = this@PseudocodeImpl<EOL><INDENT><INDENT><INDENT><INDENT>body.postProcess()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>instruction.next =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (body.instructions.contains(body.exitInstruction)) getNextPosition(currentPosition) else sinkInstruction<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val distinctNames =", "body": "computedMangledNames.distinctBy { it.value }<EOL>"}
{"signature": "val otherLowerBound =", "body": "other.type.lowerBoundIfFlexible()<EOL>"}
{"signature": "val tableId =", "body": "mode.table.id!!<EOL>"}
{"signature": "fun readObject(input: ObjectInputStream) {", "body": "<EOL><INDENT><INDENT>input.defaultReadObject()<EOL><INDENT><INDENT>lock = NativeDistributionCommonizerLock(outputDirectory, ::logInfo)<EOL><INDENT>}"}
{"signature": "if (<!USELESS_IS_CHECK!>temp is <!IS_ENUM_ENTRY!>Color.<!ENUM_ENTRY_AS_TYPE!>RED<!><!><!>) {", "body": "<EOL><INDENT><INDENT>return temp <!USELESS_CAST!>as Color.<!ENUM_ENTRY_AS_TYPE!>RED<!><!><EOL><INDENT>}"}
{"signature": "val continuationPsiType =", "body": "psiType(StandardNames.CONTINUATION_INTERFACE_FQ_NAME.asString(), this)<EOL>"}
{"signature": "val operationNode =", "body": "resolvedCall.call.callOperationNode ?: return<EOL>"}
{"signature": "val log<NUM_LIT>_<NUM_LIT>lo =", "body": "<NUM_LIT>e<NUM_LIT> <EOL>"}
{"signature": "val sourceInformationMarkerEnd =", "body": "<EOL><INDENT><INDENT>topLevelCallableId(KtxNameConventions.SOURCEINFORMATIONMARKEREND)<EOL>"}
{"signature": "if (header.associatedModule == null && cachedInfo.crossModuleReferencesHash != actualCrossModuleHash) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>header.associatedModule = cachedInfo.artifact.loadJsIrModule()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun manglePropertyAccessor(accessor: PropertyAccessorDescriptor) {", "body": "<EOL><INDENT><INDENT>val property = accessor.correspondingProperty<EOL><INDENT><INDENT>accessor.mangleFunction(<EOL><INDENT><INDENT><INDENT>name = accessor.name,<EOL><INDENT><INDENT><INDENT>isConstructor = false,<EOL><INDENT><INDENT><INDENT>isStatic = property.isRealStatic,<EOL><INDENT><INDENT><INDENT>container = property,<EOL><INDENT><INDENT><INDENT>session = null<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun initChildrenArrayFromList() {", "body": "<EOL><INDENT><INDENT>myChildrenArray = myChildrenList.toTypedArray()<EOL><INDENT><INDENT>myChildrenList.clear()<EOL><INDENT>}"}
{"signature": "if (ktDeclaration.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>specialSetter != null && specialGetter != null<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>UL downTo <NUM_LIT>UL) {", "body": "<EOL><INDENT><INDENT>s = s*<NUM_LIT> + i.toInt()<EOL><INDENT>}"}
{"signature": "val overrideFqn =", "body": "nameSuggestion.suggest(override, bindingContext)!!<EOL>"}
{"signature": "if (memberScope is ErrorScope && memberScope !is ThrowingScope) {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (testCasesOfFile[testCaseNumber] != null) {", "body": "<EOL><INDENT><INDENT><INDENT>testCasesOfFile[testCaseNumber]!! += this<EOL><INDENT><INDENT><INDENT>testCasesByNumbers[testCaseNumber]!! += this<EOL><INDENT><INDENT>}"}
{"signature": "var token =", "body": "<STR_LIT><EOL>"}
{"signature": "val SHORT_NAMES_IN_TYPES =", "body": "DescriptorRenderer.SHORT_NAMES_IN_TYPES.asRenderer()<EOL>"}
{"signature": "if (idSig.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>symbol.privateSignature = IdSignature.CompositeSignature(IdSignature.FileSignature(fileSymbol), idSig)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration is FirSyntheticProperty) {", "body": "<EOL><INDENT><INDENT><INDENT>return tryCalculateReturnType(declaration.getter.delegate)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(<EOL><INDENT>x: Int,<EOL><INDENT>y: Number<EOL><INDENT>,<EOL>) {", "body": "}<EOL><EOL>val foo: (Int, Int) -> Int = fun(x,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT> y, ): Int {<EOL><INDENT>return x + y<EOL>}"}
{"signature": "val dirToSkip =", "body": "basedir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val problemSymbols =", "body": "problemNodes.mapNotNullTo(mutableSetOf()) { it.toSymbol(context.session) as? FirTypeParameterSymbol }<EOL>"}
{"signature": "val uIntBound =", "body": "UInt.MIN_VALUE<EOL>"}
{"signature": "if (thisBuildNumber != null && otherBuildNumber == null) {", "body": "<EOL><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val json =", "body": "js(<STR_LIT>)<EOL>"}
{"signature": "val jtMaxDuration =", "body": "JTDuration.ofSeconds(Long.MAX_VALUE, <NUM_LIT>_<NUM_LIT>_<NUM_LIT>)<EOL>"}
{"signature": "when (<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>a -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>b -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>c -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val reportedPsiParent =", "body": "reportedPsi.parent<EOL>"}
{"signature": "val CLASS_FIELDS_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for (annotation in descriptor.backingField?.nonSourceAnnotations.orEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>proto.addExtensionOrNull(extension, annotationSerializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val linuxX<NUM_LIT>ModuleSources =", "body": "listOf(<STR_LIT>)<EOL>"}
{"signature": "fun setValue(thisRef: Receiver, property: KProperty<*>, value: T) {", "body": "<EOL><INDENT><INDENT>thisRef.extras[key] = value<EOL><INDENT>}"}
{"signature": "val FLOATING_POINT_BINARY_OPERATION_LONG =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "if (value == null) {", "body": "<EOL><INDENT><INDENT>val answer = defaultValue(key)<EOL><INDENT><INDENT>put(key, answer)<EOL><INDENT><INDENT>postCompute(answer)<EOL><INDENT><INDENT>answer<EOL><INDENT>}"}
{"signature": "fun testCtorStar() {", "body": "useKCallableStar(::C) }"}
{"signature": "val objectArray =", "body": "arrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val enterNode =", "body": "createEnterSafeCallNode(safeCall)<EOL>"}
{"signature": "if (declaration.isDecoy()) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitSimpleFunction(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "if (option == null) {", "body": "<EOL><INDENT><INDENT><INDENT>configuration.report(STRONG_WARNING, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "fun putByteArray(source: ByteArray, dest: NativePointed, length: Int) {", "body": "<EOL><INDENT><INDENT>unsafe.copyMemory(source, byteArrayBaseOffset, null, dest.address, length.toLong())<EOL><INDENT>}"}
{"signature": "fun testLambdaClosureOrdering() {", "body": "<EOL><INDENT>}"}
{"signature": "var typeParameterSymbols =", "body": "correspondingDeclaration.typeParameterSymbols.filter { it.containingDeclarationSymbol is FirClassLikeSymbol }<EOL>"}
{"signature": "val newVisibility =", "body": "if (function.isLocal) DescriptorVisibilities.LOCAL else function.visibility<EOL>"}
{"signature": "if (instruction is ReadValueInstruction) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>enterResult.put(variableDescriptor, VariableUseState.READ)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val firTypeRefClasses =", "body": "mutableListOf<Pair<FirTypeRef, FirRegularClassSymbol>>()<EOL>"}
{"signature": "val fieldStability =", "body": "stabilityOf(field.type)<EOL>"}
{"signature": "val _commonExpressionCheckers =", "body": "ComposedExpressionCheckers(MppCheckerKind.Common)<EOL>"}
{"signature": "if (prefixesToPrint.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>prefixesToPrint = currentPrefixes<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val outerState =", "body": "<NUM_LIT><EOL>"}
{"signature": "val isNonLocal =", "body": "containingDeclaration is FirFile || containingDeclaration is FirClass<EOL>"}
{"signature": "val lightTree<NUM_LIT>Fir =", "body": "LightTree<NUM_LIT>Fir(session, firProvider.kotlinScopeProvider, diagnosticsReporter = null)<EOL>"}
{"signature": "val composableLambdaNInstance =", "body": "<EOL><INDENT><INDENT>internalTopLevelCallableId(<STR_LIT>)<EOL>"}
{"signature": "fun embedBitcode(mode: org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode) {", "body": "<EOL><INDENT><INDENT>embedBitcodeMode.set(mode)<EOL><INDENT>}"}
{"signature": "if (field.owner.correspondingPropertySymbol?.owner?.isConst == true || (field.owner.isFromJava() && field.owner.isFinal)) {", "body": "<EOL><INDENT><INDENT><INDENT>generateThrowIllegalAccessException(expression)<EOL><INDENT><INDENT>}"}
{"signature": "if (lowerResult?.constructor == constructor && !javaType.isRaw && isNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>return lowerResult.makeNullableAsSpecified(true)<EOL><INDENT><INDENT>}"}
{"signature": "if (it.matches(startIndex, testString, matchResult) >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val CHAR_END_OF_INPUT<INDENT><INDENT> =", "body": "<NUM_LIT>x<NUM_LIT>toInt() or 'z'.toInt()<EOL>"}
{"signature": "if (result.dts != null) {", "body": "<EOL><INDENT><INDENT>File(dir, <STR_LIT>).writeText(result.dts)<EOL><INDENT>}"}
{"signature": "val edgeLists =", "body": "hashMapOf<TypeParameterDescriptor, MutableSet<TypeParameterDescriptor>>()<EOL>"}
{"signature": "if (evaluated) {", "body": "<EOL><INDENT><INDENT><INDENT>execute()<EOL><INDENT><INDENT>}"}
{"signature": "fun testFunctionNoArgs() {", "body": "<EOL><INDENT>val callable: () -> String? = ::funNoArgs<EOL><INDENT>assertEquals(callable(), <STR_LIT>)<EOL>}"}
{"signature": "val varName =", "body": "context.getNameForValueDeclaration(declaration)<EOL>"}
{"signature": "val dependenciesClassLoader =", "body": "scriptDependency.getClassLoader(compilationConfiguration)<EOL>"}
{"signature": "val resultOfIntersection =", "body": "callablesFromSupertypes[callableSymbol.name]<EOL>"}
{"signature": "val fqNameUnsafe =", "body": "FqNameUnsafe(fqNameString)<EOL>"}
{"signature": "val debugConfiguration =", "body": "<STR_LIT><EOL>"}
{"signature": "var functionIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val asmStringBytes =", "body": "asmString.toByteArray()<EOL>"}
{"signature": "val nodebug =", "body": "f is IrConstructor && f.parentAsClass.isSubclassOf(context.irBuiltIns.throwableClass.owner)<EOL>"}
{"signature": "fun test_<NUM_LIT>(d: NoOverride, s: String) {", "body": "<EOL><INDENT><!VAL_REASSIGNMENT!>d.foo<!> = s<EOL>}"}
{"signature": "val receivedDescription =", "body": "descriptionFrom(received)<EOL>"}
{"signature": "val shouldRun =", "body": "attributes.get().isNotEmpty() || rawStatements.get().isNotEmpty()<EOL>"}
{"signature": "val hashSize =", "body": "input.readInt()<EOL>"}
{"signature": "if (resultReceiverType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>receiverParameter.replaceTypeRef(receiverParameter.typeRef.resolvedTypeFromPrototype(resultReceiverType))<EOL><INDENT><INDENT><INDENT>needUpdateLambdaType = true<EOL><INDENT><INDENT>}"}
{"signature": "fun stopCounting() {", "body": "<EOL><INDENT><INDENT><INDENT>shouldCount = false<EOL><INDENT><INDENT>}"}
{"signature": "if (lookAheadChar == '\\\\') {", "body": "<EOL><INDENT><INDENT><INDENT>return processEscapedChar()<EOL><INDENT><INDENT>}"}
{"signature": "var processedRootsUpTo =", "body": "<NUM_LIT><EOL>"}
{"signature": "var availableAddress =", "body": "startAddress<EOL>"}
{"signature": "val abiTypesSize =", "body": "input.readInt()<EOL>"}
{"signature": "val callerStackTrace =", "body": "context.messageContinuations.values.singleOrNull()?.stackTrace ?: context.waitingOnPredicate?.stackTrace<EOL>"}
{"signature": "if (my == null) {", "body": "<EOL><INDENT><INDENT>my<!UNSAFE_CALL!>.<!>foo()<EOL><INDENT>}"}
{"signature": "val digestWrapper =", "body": "MessageDigest.getInstance(<STR_LIT>)<EOL>"}
{"signature": "val failedBenchmarks =", "body": "report.failedBenchmarks<EOL>"}
{"signature": "if (!this.isBound && expression.type !is IrDynamicType) {", "body": "<EOL><INDENT><INDENT><INDENT>reportError(expression, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val comparisonType =", "body": "comparisonInfo.comparisonType<EOL>"}
{"signature": "val numRecGroups =", "body": "if (recGroupTypes.isEmpty()) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val dstFullClassName =", "body": "dstClass.fqNameWhenAvailable?.toString() ?: dstClass.name.toString()<EOL>"}
{"signature": "val ownerForDefault =", "body": "baseMethodDescriptor.containingDeclaration as ClassDescriptor<EOL>"}
{"signature": "fun notTailCall() {", "body": "empty(); empty() }"}
{"signature": "fun foo(block: (A, B) -> Unit) {", "body": "}"}
{"signature": "package use<EOL>.", "body": ""}
{"signature": "val requestsBuilder =", "body": "ArtifactRequestBuilder(classifier, extension)<EOL>"}
{"signature": "for (postponedCall in candidate.postponedPCLACalls) {", "body": "<EOL><INDENT><INDENT><INDENT>postponedCall.transformSingle(this, null)<EOL><INDENT><INDENT>}"}
{"signature": "if (element is FirRegularClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>path.removeLast()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (returnType.successBridge == MethodBridge.ReturnValue.Instance.InitResult) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>objcReleaseFromRunnableThreadState(param(<NUM_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val spreadArgs =", "body": "create(<NUM_LIT>, *arrayOf(<STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "fun visitWhenExpression(whenExpression: KtWhenExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitWhenExpression(whenExpression)<EOL><INDENT><INDENT><INDENT>block(whenExpression)<EOL><INDENT><INDENT>}"}
{"signature": "fun setConstant(value: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMSetGlobalConstant(llvmGlobal, if (value) <NUM_LIT> else <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "var parentCodegen =", "body": "codegen.parentCodegen<EOL>"}
{"signature": "import pcg.", "body": "Foo<EOL>"}
{"signature": "val projectStructureNode =", "body": "getRoot()<EOL>"}
{"signature": "if (serializableClass.shouldHaveGeneratedMethodsInCompanion) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>SerializableCompanionIrGenerator(irClass, getSerializableClassByCompanion(irClass)!!, context).generate()<EOL><INDENT><INDENT><INDENT><INDENT>irClass.addDefaultConstructorBodyIfAbsent(context)<EOL><INDENT><INDENT><INDENT><INDENT>irClass.patchDeclarationParents(irClass.parent)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fieldValue =", "body": "if (isExtensionField) <STR_LIT> else fieldName<EOL>"}
{"signature": "if (useBuilderInferenceOnlyIfNeeded) {", "body": "<EOL><INDENT><INDENT><INDENT>findPostponedArgumentWithFixedInputTypes(postponedArguments)<EOL><INDENT><INDENT>}"}
{"signature": "var disambiguatedName =", "body": "baseName<EOL>"}
{"signature": "val facades =", "body": "SmartSet.create<JvmClassName>()<EOL>"}
{"signature": "val insertionIndex =", "body": "listOfNotNull(lastImportIndex, pluginBlockEndIndex).maxOrNull() ?: return blockToInsert + this<EOL>"}
{"signature": "fun usage(data: Data) {", "body": "<EOL><INDENT>data.copy()<EOL>}"}
{"signature": "val testFixesProperties =", "body": "TestFixesProperties(target)<EOL>"}
{"signature": "val ktAnnotationEntry =", "body": "annotationCall.psi as KtAnnotationEntry<EOL>"}
{"signature": "val testAsFunction =", "body": "<!RESOLUTION_TO_CLASSIFIER!>Test<!>()<EOL>"}
{"signature": "val jsDceImplFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val delegatingConstructorCallIndex =", "body": "statements.indexOfLast { it is IrDelegatingConstructorCall }<EOL>"}
{"signature": "val unwrap =", "body": "generateSequence(type, Class<*>::getComponentType)<EOL>"}
{"signature": "if (frames[index] != newFrame) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>frames[index] = newFrame<EOL><INDENT><INDENT><INDENT><INDENT>wereChanges = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val apConfigurations =", "body": "project.configurations<EOL>"}
{"signature": "val evalScriptWithResult =", "body": "evalScriptWithResult(<STR_LIT>)<EOL>"}
{"signature": "val immThreeIntPtrType =", "body": "LLVMConstInt(intPtrType, <NUM_LIT>, <NUM_LIT>)!!<EOL>"}
{"signature": "var pointsToGraphs =", "body": "mutableMapOf<DataFlowIR.FunctionSymbol.Declared, PointsToGraph>()<EOL>"}
{"signature": "val diagnosticSeverityStats =", "body": "mutableMapOf<Int, MutableMap<Severity, Int>>()<EOL>"}
{"signature": "val REF_GETTER =", "body": "<STR_LIT><EOL>"}
{"signature": "if (instructions.last is LabelNode) {", "body": "<EOL><INDENT><INDENT><INDENT>isLive[instructions.last.indexOf] = true<EOL><INDENT><INDENT>}"}
{"signature": "if (returnType.isSuspendFunctionType) {", "body": "<EOL><INDENT><INDENT>return MethodBridge.ReturnValue.Suspend<EOL><INDENT>}"}
{"signature": "if (hx < <NUM_LIT>x<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>t = doubleSetWord(d = t, hi = <NUM_LIT>x<NUM_LIT>) <EOL><INDENT><INDENT>t *= x<EOL><INDENT><INDENT>t = doubleSetWord(d = t, hi = __HI(t) / <NUM_LIT> + B<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val intersectedType =", "body": "ConeTypeIntersector.intersectTypes(session.typeContext, allTypes)<EOL>"}
{"signature": "val compilationOut =", "body": "transformer.generateModule(loweredIr.allModules, translationModes, isEsModules)<EOL>"}
{"signature": "val inlineFunctionBodies =", "body": "mutableListOf<SerializedInlineFunctionReference>()<EOL>"}
{"signature": "when(T... methodCall) {", "body": "<EOL><INDENT><INDENT>return null;<EOL><INDENT>}"}
{"signature": "fun setFoo(newFoo: Int) {", "body": "<EOL><INDENT>foo_ = newFoo<EOL>}"}
{"signature": "val fileCopy =", "body": "originalContainingFile.copy() as KtFile<EOL>"}
{"signature": "val getPropertyReference =", "body": "getVolatilePropertyReference(getPropertyReceiver, parentFunction)<EOL>"}
{"signature": "if (newPattern.append(charCode, categoryCode, mapping)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return newPattern<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (LanguageVersion.LATEST_STABLE.major < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.languageVersion = <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val lightElements =", "body": "declaration.toLightElements()<EOL>"}
{"signature": "fun noValueForParameter(trace: BindingTrace, valueParameter: ValueParameterDescriptor) {", "body": "<EOL><INDENT><INDENT>reportError(trace)<EOL><INDENT>}"}
{"signature": "if (containingDescriptor !is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val containingClass = getParentOfType(containingDescriptor, ClassDescriptor::class.java, false)<EOL><INDENT><INDENT><INDENT>if (containingClass == container) return false<EOL><INDENT><INDENT>}"}
{"signature": "val kSerializerClassId =", "body": "ClassId(SerializationPackages.packageFqName, SerialEntityNames.KSERIALIZER_NAME)<EOL>"}
{"signature": "fun foo(i<NUM_LIT>: Int) {", "body": "}<EOL><EOL>fun test() {<EOL><INDENT>foo(<!TYPE_MISMATCH!><STR_LIT><!>,<EOL><INDENT><INDENT><!TOO_MANY_ARGUMENTS!><NUM_LIT><!><EOL><INDENT>)<EOL>}"}
{"signature": "val int<NUM_LIT>Type =", "body": "LLVMInt<NUM_LIT>TypeInContext(llvmContext)!!<EOL>"}
{"signature": "val rhsAlwaysExecuted =", "body": "<EOL><INDENT><INDENT><INDENT>binaryLogicExpression.leftOperand.booleanLiteralValue == (binaryLogicExpression.kind == LogicOperationKind.AND)<EOL>"}
{"signature": "var bOrCCounter =", "body": "<NUM_LIT><EOL>"}
{"signature": "val encodedPrefix =", "body": "prefix.encodeToByteArray(charset)<EOL>"}
{"signature": "val throwIrLinkageError =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "val ulong =", "body": "Long.MAX_VALUE.toULong() + long.toULong()<EOL>"}
{"signature": "val subcommands =", "body": "mutableMapOf<String, Subcommand>()<EOL>"}
{"signature": "if (!isGetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>valueParameters += firValueParameters<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val argument = annotationCall.argumentMapping.mapping.values.firstOrNull() ?: return null) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirVarargArgumentsExpression -> argument.arguments.firstOrNull()<EOL><INDENT><INDENT><INDENT>is FirArrayLiteral -> argument.arguments.firstOrNull()<EOL><INDENT><INDENT><INDENT>is FirNamedArgumentExpression -> argument.expression<EOL><INDENT><INDENT><INDENT>else -> argument<EOL><INDENT><INDENT>}"}
{"signature": "val bbCheckLocalState =", "body": "basicBlock(<STR_LIT>, null)<EOL>"}
{"signature": "val arrayName =", "body": "StandardNames.FqNames.array.shortName()<EOL>"}
{"signature": "val attributesWithParameterNameAnnotation =", "body": "<EOL><INDENT><INDENT>ConeAttributes.create(listOf(CustomAnnotationTypeAttribute(listOf(parameterNameAnnotationCall))))<EOL>"}
{"signature": "if (this is ErrorTypeConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>return ErrorUtils.createErrorType(kind, this, *formatParams)<EOL><INDENT><INDENT>}"}
{"signature": "var COUNT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val modifiedSrc =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "val oldKotlinVersion =", "body": "<STR_LIT><EOL>"}
{"signature": "val variableId =", "body": "getVariableId(expression.suspensionPointIdParameter)<EOL>"}
{"signature": "val characters =", "body": "data.flatMap { it.toList() }<EOL>"}
{"signature": "if (!candidate.resolvedCall.isSuitableForBuilderInference()) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "for (value in listOf(Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertEquals(value, ceil(value))<EOL><INDENT><INDENT><INDENT>assertEquals(value, floor(value))<EOL><INDENT><INDENT><INDENT>assertEquals(value, truncate(value))<EOL><INDENT><INDENT><INDENT>assertEquals(value, round(value))<EOL><INDENT><INDENT>}"}
{"signature": "when (e) {", "body": "<EOL><INDENT>- -> foo<EOL>  }"}
{"signature": "val FILE_DESCRIPTOR_FQNAME =", "body": "FqName(FileDescriptor::class.java.canonicalName)<EOL>"}
{"signature": "val templateBuilder =", "body": "StringBuilder()<EOL>"}
{"signature": "val exceptionRawPtr =", "body": "call(llvm.cxaBeginCatchFunction, listOf(exceptionRecord))<EOL>"}
{"signature": "var backend =", "body": "TargetBackend.ANY<EOL>"}
{"signature": "if (descriptor is DeclarationDescriptorWithSource) {", "body": "<EOL><INDENT><INDENT>return ObjCExportStubOrigin.Source(descriptor.name, descriptor.findKDocString(), (descriptor.source as? PsiSourceElement)?.psi)<EOL><INDENT>}"}
{"signature": "val dataString =", "body": "testDataSource.dataString<EOL>"}
{"signature": "val kotlinNumberName =", "body": "<STR_LIT>.toSpecialStandardClassOrProtocolName()<EOL>"}
{"signature": "val finallyBlocksInProgressSet =", "body": "mutableSetOf<FirElement>()<EOL>"}
{"signature": "val rightOperand =", "body": "elvisExpression.right ?: return null<EOL>"}
{"signature": "fun visitBinaryAndEnterRightOperandNode(node: BinaryAndEnterRightOperandNode) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val runAppMethod =", "body": "appClass.getMethod(<STR_LIT>)<EOL>"}
{"signature": "if (type?.isErrorLike() == true) {", "body": "<EOL><INDENT><INDENT><INDENT>errors.add(actualText.clearAnsiColor())<EOL><INDENT><INDENT>}"}
{"signature": "var classValue =", "body": "ComputableClassValue(compute)<EOL>"}
{"signature": "fun myLetExplicit<NUM_LIT>(block: (Int) -> Unit) {", "body": "}<EOL>fun myLetExplicit<NUM_LIT>(block: (IntArray) -> Unit) {}"}
{"signature": "val isImplementationTest =", "body": "testOrigin == TestOrigin.IMPLEMENTATION<EOL>"}
{"signature": "if (prop === <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>var size = listSize();<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>var newSize = type === <STR_LIT> || type === <STR_LIT> ? +prop : undefined<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (isNaN(newSize)) throw new RangeError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (newSize < size) listDecreaseSize(size - newSize)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else listIncreaseSize(newSize - size)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val pomFile =", "body": "publishingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (!enrichWithNotNull || getCollectedNullability(key).canBeNull()) {", "body": "<EOL><INDENT><INDENT><INDENT>return types.toJavaSet()<EOL><INDENT><INDENT>}"}
{"signature": "if (a?.returnsFalse(s) == false) {", "body": "<EOL><INDENT><INDENT>s.length<EOL><INDENT>}"}
{"signature": "if (declaration is T) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addIfNotNull(declaration.nameAsName)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (k<NUM_LIT>ModuleFile == null && k<NUM_LIT>ModuleFile != null) {", "body": "<EOL><INDENT><INDENT><INDENT>missingInK<NUM_LIT>add(k<NUM_LIT>ModuleFile.relativePath)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitDesugaredAssignmentValueReferenceExpression(desugaredAssignmentValueReferenceExpression: FirDesugaredAssignmentValueReferenceExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDesugaredAssignmentValueReferenceExpression(desugaredAssignmentValueReferenceExpression)<EOL><INDENT>}"}
{"signature": "fun lowerInitializers() {", "body": "<EOL><INDENT><INDENT><INDENT>collectAndRemoveInitializers()<EOL><INDENT><INDENT><INDENT>val initializeMethodSymbol = createInitializerMethod()<EOL><INDENT><INDENT><INDENT>lowerConstructors(initializeMethodSymbol)<EOL><INDENT><INDENT>}"}
{"signature": "val delegatingClassName =", "body": "symbol.safeParentClassName<EOL>"}
{"signature": "val rootedBase =", "body": "root.resolve(base)<EOL>"}
{"signature": "if (line > <NUM_LIT> && column > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var checkFromIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun C<NUM_LIT>(lambda: @Composable () -> Unit) {", "body": "lambda() }"}
{"signature": "val boundExtension =", "body": "S(<NUM_LIT>U, <STR_LIT>)::extension<EOL>"}
{"signature": "val typeClassifier =", "body": "expression.typeOperand.classifierOrFail<EOL>"}
{"signature": "val forwardDeclarationsDir =", "body": "testDataDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "when (data.analysisSessionMode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>AnalysisSessionMode.Normal -> AnalysisApiFirCodeFragmentTestConfigurator(analyseInDependentSession = false)<EOL><INDENT><INDENT><INDENT><INDENT>AnalysisSessionMode.Dependent -> AnalysisApiFirCodeFragmentTestConfigurator(analyseInDependentSession = true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitConstantExpression(expression: KtConstantExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>val constant = ConstantExpressionEvaluator.getConstant(expression, trace.bindingContext)<EOL><INDENT><INDENT><INDENT>builder.loadConstant(expression, constant)<EOL><INDENT><INDENT>}"}
{"signature": "val MaxUB =", "body": "UByte.MAX_VALUE<EOL>"}
{"signature": "fun testNativeBinaryKotlinDSL(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testNativeBinaryDsl(<STR_LIT>, gradleVersion)<EOL><INDENT>}"}
{"signature": "val traceCleaners =", "body": "false<EOL>"}
{"signature": "val BASE_COLLECTIONS_PACKAGE =", "body": "BASE_KOTLIN_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val interfaceTableEntries =", "body": "interfaceTableRecords(irClass, interfaceTableSkeleton)<EOL>"}
{"signature": "fun started(e: TaskEvent) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val replaceWith =", "body": "<STR_LIT><EOL>"}
{"signature": "val contributors =", "body": "ServiceLoader.load(AsserterContributor::class.java).toList()<EOL>"}
{"signature": "var intersectionFakeOverrideDescriptor =", "body": "candidateDescriptor<EOL>"}
{"signature": "val superQName =", "body": "DescriptorUtils.getFqName(superDescriptor).asString()<EOL>"}
{"signature": "val classLoader =", "body": "URLClassLoader(arrayOf(file.toURI().toURL()), parentClassLoader)<EOL>"}
{"signature": "fun builder<NUM_LIT>(c: suspend () -> Unit) {", "body": "<EOL><INDENT>(c as Continuation<Unit>).resume(Unit)<EOL>}"}
{"signature": "val expectedLinesCount =", "body": "sourceMapConfig.lines().count()<EOL>"}
{"signature": "val qualifiedExpressions =", "body": "unrollToLeftMostQualifiedExpression(expression)<EOL>"}
{"signature": "val ALL_METADATA_JAR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val internalNameToSource =", "body": "registerMap(InternalNameToSourcesMap(INTERNAL_NAME_TO_SOURCE.storageFile, icContext))<EOL>"}
{"signature": "val LONG_BIT_SHIFTS =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "val lazyConfiguration =", "body": "LazyResolvedConfiguration(configuration)<EOL>"}
{"signature": "if (!matchLineTerminator && lt.isLineTerminator(high)) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (result is String && result.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return result<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun g(x: () -> Unit) {", "body": "<EOL><INDENT><INDENT>x()<EOL><INDENT><INDENT>f()<EOL><INDENT>}"}
{"signature": "val nextInitNode =", "body": "LLVMConstNull(pointerType(kNodeInitType))<EOL>"}
{"signature": "val actualTypeForComparison =", "body": "enhancedActualType ?: actualType<EOL>"}
{"signature": "val topmostClassParentName =", "body": "typeMapper.classInternalName(topmostClassParent).replace('/', '.')<EOL>"}
{"signature": "if (list.parent == ktFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>structureElements += getStructureElementFor(list)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val lhsJsType =", "body": "lhs.type.getPrimitiveType()<EOL>"}
{"signature": "val previousFile =", "body": "_currentFile<EOL>"}
{"signature": "val REPLACE_WITH_CONSTRUCTOR_EXPRESSION_FIELD_FQN =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val requestsBySubproject =", "body": "requests.groupBy { it.subproject }<EOL>"}
{"signature": "for (symbol in provider.getTopLevelPropertySymbols(import.packageFqName, name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processor(symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val delimiterIndex =", "body": "dependency.lastIndexOf(DEPENDENCIES_DELIMITER)<EOL>"}
{"signature": "val kotlinClassDescriptors =", "body": "j<NUM_LIT>kClassMapper.mapPlatformClass(javaAnalogueDescriptor.fqNameSafe, FallbackBuiltIns.Instance)<EOL>"}
{"signature": "fun checkForComodification() {", "body": "<EOL><INDENT><INDENT><INDENT>if (map.modCount != expectedModCount)<EOL><INDENT><INDENT><INDENT><INDENT>throw ConcurrentModificationException()<EOL><INDENT><INDENT>}"}
{"signature": "val cr =", "body": "::local<EOL>"}
{"signature": "val parentId =", "body": "classLikeDeclaration.symbol.classId.relativeClassName.parent()<EOL>"}
{"signature": "if (comment.tokenType == KtTokens.BLOCK_COMMENT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val podXcConfig =", "body": "if (publishing.get() || extraSpecAttributes.get().containsKey(<STR_LIT>)) <STR_LIT> else<EOL>"}
{"signature": "val parentNameSuffix =", "body": "declaration.parentNameSuffixForExtensionReceiver<EOL>"}
{"signature": "for(u in a) {", "body": "<EOL><INDENT><INDENT>result += f(u)<EOL><INDENT>}"}
{"signature": "val relativeFinallyPath =", "body": "relativeFinallyPath(targetTryDepth)<EOL>"}
{"signature": "val rangeResolvedCall =", "body": "rangeExpression.getResolvedCall(c.trace.bindingContext) ?: continue<EOL>"}
{"signature": "fun t(t: ExpectClass) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (index >= endIndex) {", "body": "<EOL><INDENT><INDENT>malformed(<NUM_LIT>, index, throwOnMalformed)<EOL><INDENT>}"}
{"signature": "when (val sizeInBits = type.sizeInBits()) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> LLVMConstInt(type, Int.MIN_VALUE.toLong(), <NUM_LIT>)!!<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> LLVMConstInt(type, Long.MIN_VALUE, <NUM_LIT>)!!<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val openingMatch =", "body": "Opening(counter++, opening.groups[<NUM_LIT>]!!.value, opening.range.first)<EOL>"}
{"signature": "fun bar(a: Int, b: (Int) -> Int) {", "body": "<EOL><INDENT>b(a)<EOL>}"}
{"signature": "val rhsValue =", "body": "rhsDeferredValue.invoke()<EOL>"}
{"signature": "for ((_, a) in arrayOf(a<NUM_LIT>, a<NUM_LIT>).withIndex()) {", "body": "<EOL><INDENT><INDENT>result += a.values[<NUM_LIT>]<EOL><INDENT>}"}
{"signature": "val compiledScriptList =", "body": "(compileResult.data as? LinkedSnippetImpl<*>)<EOL>"}
{"signature": "val elementVisitor =", "body": "createLightElementsVisitor(module.testModule.directives, testServices.assertions)<EOL>"}
{"signature": "if (scopeFqName != prevScopeFqName) {", "body": "<EOL><INDENT><INDENT><INDENT>prevScopeFqName = interner.intern(scopeFqName)<EOL><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT>}"}
{"signature": "val areThereConstraintsWithUninferredTypeParameter =", "body": "constraints.any { c -> c.type.contains { it.isUninferredParameter() } }<EOL>"}
{"signature": "val disabledTypes =", "body": "mutableSetOf<String?>()<EOL>"}
{"signature": "val TIMES_ASSIGN =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val isolating =", "body": "listOf(ReportTwoOriginElements().toIsolating())<EOL>"}
{"signature": "val calleeFunction =", "body": "expression.calleeReference.toResolvedCallableSymbol() as? FirFunctionSymbol<*> ?: return<EOL>"}
{"signature": "if (SystemInfoRt.isFileSystemCaseSensitive) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (kgpVersion != buildToolsImplVersion) {", "body": "<EOL><INDENT><INDENT><INDENT>reportDiagnostic(KotlinToolingDiagnostics.BuildToolsApiVersionInconsistency(kgpVersion, buildToolsImplVersion))<EOL><INDENT><INDENT>}"}
{"signature": "package overrideKotlinMethods<EOL>.", "body": ""}
{"signature": "for ((index, topLevelScope) in importingScopes.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>processHideMembersLevel(<EOL><INDENT><INDENT><INDENT><INDENT>receiverValue, topLevelScope, info, index,<EOL><INDENT><INDENT><INDENT><INDENT>explicitReceiverKind, parentGroup<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_MPP_RESOURCES_RESOLUTION_STRATEGY =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val builtinsSession =", "body": "LLFirBuiltinsSessionFactory.getInstance(project).getBuiltinsSession(platform)<EOL>"}
{"signature": "if (!declaration.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (searchForRPAR && lexer.tokenType == KtTokens.RPAR) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return !advanceWhitespacesCheckIsEndOrArrow(lexer)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (newList == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newList = this.toMutableList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val NegativeClassId =", "body": "ClassId(PACKAGE_FQN, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (x != null) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>}"}
{"signature": "fun traverse(v: JsVisitorWithContext, ctx: JsContext<*>) {", "body": "<EOL><INDENT><INDENT>v.visit(this, ctx)<EOL><INDENT><INDENT>v.endVisit(this, ctx)<EOL><INDENT>}"}
{"signature": "val labeledExpression =", "body": "element.labeledExpression<EOL>"}
{"signature": "for ((index, variableWithConstraint) in constraints.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val (typeVariable, constraint) = variableWithConstraint<EOL><INDENT><INDENT><INDENT><INDENT>constraints[index] = typeVariable to constraint.replaceType(substitutor.safeSubstitute(constraint.type))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val parameterTypeConstructor =", "body": "parameters[index].typeConstructor<EOL>"}
{"signature": "if (disabled) {", "body": "<EOL><INDENT><INDENT>return action()<EOL><INDENT>}"}
{"signature": "for (javaField in javaClass.fields) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declarations += convertJavaFieldToFir(javaField, classId, javaTypeParameterStack, dispatchReceiver, moduleData)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val systemModulesCache =", "body": "mutableMapOf<String, JavaModule.Explicit>()<EOL>"}
{"signature": "fun Vector(content: @Composable @ComposableTarget(<STR_LIT>) () -> Unit) {", "body": "}"}
{"signature": "if (metadata is MetadataSource.Script) {", "body": "<EOL><INDENT><INDENT><INDENT>extraFlags = extraFlags or JvmAnnotationNames.METADATA_SCRIPT_FLAG<EOL><INDENT><INDENT>}"}
{"signature": "val ubyteSerializer =", "body": "IrUnsafeCoerceWrappedSerializer(byteSerializer, symbols.kotlinUByte.defaultType, irBuiltIns.byteType)<EOL>"}
{"signature": "if (expectTypeArgument !is FirTypeProjectionWithVariance || actualTypeArgument !is FirTypeProjectionWithVariance) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val resolvedCalls =", "body": "mutableListOf(operatorCall)<EOL>"}
{"signature": "val containter =", "body": "function.calledInitializer ?: return@forEach<EOL>"}
{"signature": "fun test(s: Double) {", "body": "<EOL><EOL>}"}
{"signature": "val contextSerializerId =", "body": "ClassId(SerializationPackages.packageFqName, Name.identifier(SpecialBuiltins.contextSerializer))<EOL>"}
{"signature": "fun testSubDerivedWithDifferentBaseOverrides() {", "body": "<EOL><INDENT><INDENT>val key = SubDerivedWithKey<EOL><INDENT><INDENT>testSubDerivedOverrides<SubDerivedWithKey>(DerivedWithoutKey() + SubDerivedWithKey(), key)<EOL><INDENT><INDENT>testSubDerivedOverrides<SubDerivedWithKey>(DerivedWithKey() + SubDerivedWithKey(), key)<EOL><INDENT><INDENT>testSubDerivedOverrides<SubDerivedWithKey>(SubDerivedWithKeyAndDifferentBase() + SubDerivedWithKey(), key)<EOL><INDENT>}"}
{"signature": "if (localVar in parameters) {", "body": "<EOL><INDENT><INDENT><INDENT>varUsedIn[localVar]!!.isEmpty() && varDefinedIn[localVar]!!.isEmpty() && varDeclaredIn[localVar]!!.isEmpty()<EOL><INDENT><INDENT>}"}
{"signature": "val startElement =", "body": "windowIndex * <NUM_LIT><EOL>"}
{"signature": "val replCompilerState =", "body": "state.asState(JvmReplCompilerState::class.java)<EOL>"}
{"signature": "val metaInfoProcessors =", "body": "additionalMetaInfoProcessors.map { it.invoke(this) }<EOL>"}
{"signature": "fun nullBoolean(x: Boolean?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "val platformConstDeserializer =", "body": "<EOL><INDENT><INDENT>session.deserializationExtension?.createConstDeserializer(containerSource, session, serializerExtensionProtocol)<EOL>"}
{"signature": "if (oldName == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>currentScope -= ident<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val unstableMask =", "body": "bitMask(*unstable.sliceArray(start until end))<EOL>"}
{"signature": "val stubsOutputDir =", "body": "this.stubsOutputDir ?: error(<STR_LIT>)<EOL>"}
{"signature": "val smallChunks =", "body": "LongArray(ChunkBucketSize)<EOL>"}
{"signature": "for (k in <NUM_LIT>.n) {", "body": "<EOL><INDENT><INDENT>i = indexOf(s, i)<EOL><INDENT><INDENT>if (i == <NUM_LIT>) return <NUM_LIT><EOL><INDENT><INDENT>i += s.length<EOL><INDENT>}"}
{"signature": "val bFoo =", "body": "module.findClassAcrossModuleDependencies(ClassId.fromString(<STR_LIT>))!!<EOL>"}
{"signature": "val ONE_FLOAT =", "body": "<NUM_LIT>f<EOL>"}
{"signature": "if (equalToEachOtherType == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>createTypeArgument(commonSuperType(argumentTypes, depth + <NUM_LIT>), TypeVariance.OUT)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isSubclass =", "body": "subclassesOnly && getParentOfType<KtSuperTypeListEntry>(strict = true) != null<EOL>"}
{"signature": "when (val unwrappedArg = if (arg is FirNamedArgumentExpression) arg.expression else arg) {", "body": "<EOL><INDENT><INDENT>is FirNamedArgumentExpression -> setOf()<EOL><INDENT><INDENT>else -> setOf()<EOL><INDENT>}"}
{"signature": "val projectArtifactsClasspathKey =", "body": "extrasKeyOf<IdeaKotlinClasspath>(<STR_LIT>)<EOL>"}
{"signature": "val notNull =", "body": "sequence.requireNoNulls()<EOL>"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.classAnnotation) != new.getExtensionCount(JsProtoBuf.classAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(ProtoBufClassKind.JS_EXT_CLASS_ANNOTATION_LIST)<EOL><INDENT><INDENT>}"}
{"signature": "val lineInfoCount =", "body": "ois.readInt()<EOL>"}
{"signature": "val keyTransformation =", "body": "mappingConversionForKeys.convertExpression(keyName, context.increaseIndent())<EOL>"}
{"signature": "fun visitOuterClassTypeParameterRef(outerClassTypeParameterRef: FirOuterClassTypeParameterRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitOuterClassTypeParameterRef(outerClassTypeParameterRef)<EOL><INDENT>}"}
{"signature": "val metaInfos =", "body": "it.toMetaInfos(module, testFile, globalMetadataInfoHandler, lightTreeEnabled, lightTreeComparingModeEnabled)<EOL>"}
{"signature": "val sourcesElementsPublishedConfiguration =", "body": "project.configurations<EOL>"}
{"signature": "else if (statement is JsBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>removeDuplicateImports(statement.statements, existingImports, replacements)<EOL><INDENT><INDENT>}"}
{"signature": "var fixBrokenSymLinks =", "body": "false<EOL>"}
{"signature": "val ktElement =", "body": "kotlinOrigin?.navigationElement ?: this<EOL>"}
{"signature": "val singleParameterReturnTypeRef =", "body": "typedEquals.valueParameters.single().returnTypeRef<EOL>"}
{"signature": "val defaultContext =", "body": "Context { null }<EOL>"}
{"signature": "if (configurationKind.withReflection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>files.add(provider.reflectJarForTests())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useICString(x: ICI) {", "body": "}<EOL>fun useI(x: I) {}"}
{"signature": "var wasHandleResultCalled =", "body": "false<EOL>"}
{"signature": "val testClassPackage =", "body": "<STR_LIT><EOL>"}
{"signature": "val actualContext =", "body": "context<EOL>"}
{"signature": "fun visitClassConstructorNode(node: CirClassConstructorNode, data: Unit) {", "body": "<EOL><INDENT><INDENT>node.commonDeclaration()<INDENT> }"}
{"signature": "val manifestAddendProperties =", "body": "properties.duplicate()<EOL>"}
{"signature": "if (selectorExpression === expression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parent = parent.parent as? KtDotQualifiedExpression<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val cachedSymbolBasedPackage =", "body": "symbolBasedPackagesCache[fqName]<EOL>"}
{"signature": "if (descriptor !in allMessages && !descriptor.shouldSkip) {", "body": "<EOL><INDENT><INDENT><INDENT>allMessages.add(descriptor)<EOL><INDENT><INDENT><INDENT>messagesToProcess.add(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (functionDescriptor.isOperator && functionName in OperatorNameConventions.DELEGATED_PROPERTY_OPERATORS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.record(UNUSED_DELEGATED_PROPERTY_OPERATOR_PARAMETER, variableDescriptor, true)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (doc != null) {", "body": "<EOL><INDENT><INDENT>appendLine(doc)<EOL><INDENT><INDENT>appendLine()<EOL><INDENT>}"}
{"signature": "val changedFilesOption =", "body": "changedFiles.map { SubpluginOption(<STR_LIT>, it.normalize().absolutePath) }<EOL>"}
{"signature": "val COMPILER_PLUGIN_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "if (tag.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val blockScopeVariableInfo =", "body": "pseudocodeVariableDataCollector.blockScopeVariableInfo<EOL>"}
{"signature": "val INLINE_FUN_VAR_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val supertypeWithVariables =", "body": "TypeCheckingProcedure.findCorrespondingSupertype(subtypeWithVariables, supertype)<EOL>"}
{"signature": "val jrtFsJar =", "body": "loadJrtFsJar(jdkHome) ?: return@createMap null<EOL>"}
{"signature": "when (val result = parseJson(value)) {", "body": "<EOL><INDENT><INDENT>is Success -> result.value<EOL><INDENT><INDENT>is Failure -> throw IllegalArgumentException(result.reason)<EOL><INDENT>}"}
{"signature": "if (sanitizedName.length > COMPRESSED_PACKAGE_FQN_MAX_LENGTH) {", "body": "<EOL><INDENT><INDENT><INDENT>val suffix = <STR_LIT> + prettyHash(sanitizedName.hashCode())<EOL><INDENT><INDENT><INDENT>sanitizedName.substring(<NUM_LIT>, COMPRESSED_PACKAGE_FQN_MAX_LENGTH - suffix.length) + suffix<EOL><INDENT><INDENT>}"}
{"signature": "if (!callElement.isFirstStatement() && inFunctionBodyBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>contractNotAllowed(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val what =", "body": "(if (accessor.isGetter) <STR_LIT> else <STR_LIT>)<EOL>"}
{"signature": "val typeAliasIsExpect =", "body": "typeAlias.hasExpectModifier() || context.containerIsExpect<EOL>"}
{"signature": "val greeter =", "body": "Greeter(<STR_LIT>)<EOL>"}
{"signature": "val F<NUM_LIT>_CEIL =", "body": "<STR_LIT><EOL>"}
{"signature": "fun kt<NUM_LIT>_<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>val mainThreadData = MutableData(<NUM_LIT>_<NUM_LIT>)<EOL><INDENT><INDENT>val bytes = byteArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>mainThreadData.append(bytes, <NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, mainThreadData.size)<EOL><EOL><INDENT><INDENT>assertContentsEquals(bytes, mainThreadData)<EOL><INDENT>}"}
{"signature": "val fortyTwo =", "body": "ext.get(j, <NUM_LIT>)<EOL>"}
{"signature": "val visitedTimes =", "body": "mutableMapOf<FirElement, Int>()<EOL>"}
{"signature": "val ctorExplicitParametersStart =", "body": "if (scriptDescriptor.earlierScriptsConstructorParameter == null) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "val SECONDARY_LINKS =", "body": "<STR_LIT><EOL>"}
{"signature": "val toUByte =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u.toUByte()<!><EOL>"}
{"signature": "val digitsStartIndex =", "body": "checkContainsAt(startIndex, endIndex, prefix, ignoreCase, <STR_LIT>)<EOL>"}
{"signature": "when (val symbolKind = symbolKind) {", "body": "<EOL><INDENT><INDENT><INDENT>KtSymbolKind.LOCAL -><EOL><INDENT><INDENT><INDENT><INDENT>throw CanNotCreateSymbolPointerForLocalLibraryDeclarationException(classIdIfNonLocal?.asString() ?: name.asString())<EOL><EOL><INDENT><INDENT><INDENT>KtSymbolKind.CLASS_MEMBER, KtSymbolKind.TOP_LEVEL -> KtFirClassLikeSymbolPointer(classIdIfNonLocal!!, KtTypeAliasSymbol::class)<EOL><INDENT><INDENT><INDENT>else -> throw UnsupportedSymbolKind(this::class, symbolKind)<EOL><INDENT><INDENT>}"}
{"signature": "val bridgeParameters =", "body": "bridgeParameters()<EOL>"}
{"signature": "when (flag) {", "body": "<EOL><INDENT><INDENT>A.A<NUM_LIT> -> B()<EOL><INDENT><INDENT>A.A<NUM_LIT> -> B()<EOL><INDENT><INDENT>else -> B()<EOL><INDENT>}"}
{"signature": "val synthesizedSuperFun =", "body": "createSynthesizedFunctionWithFirstParameterAsReceiver(invokeDeclaration)<EOL>"}
{"signature": "fun i(j: () -> Unit) {", "body": "<EOL><INDENT><INDENT>j()<EOL><INDENT>}"}
{"signature": "val unwrappedKtSymbol =", "body": "analysisSession.firSymbolBuilder.callableBuilder.buildCallableSymbol(unwrappedFirSymbol)<EOL>"}
{"signature": "val correspondingInit =", "body": "irClass.companionObject()!!<EOL>"}
{"signature": "val nameSource =", "body": "referenceExpression.toFirSourceElement()<EOL>"}
{"signature": "for (gap in it.gaps) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>mv.visitLocalVariable(it.declaration.name.asString(), it.type.descriptor, null, start, gap.start, it.index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>start = gap.end<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isThisOrNoDispatchReceiver =", "body": "PseudocodeUtil.isThisOrNoDispatchReceiver(writeValueInstruction, trace.bindingContext)<EOL>"}
{"signature": "if (!info.isSkippedOrRemapped) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>remapValues[shift] = StackValue.local(realSize, AsmTypes.OBJECT_TYPE)<EOL><INDENT><INDENT><INDENT><INDENT>realSize += info.type.size<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useR<NUM_LIT>(r: R<String>, fn: (R<String>) -> R<String>) {", "body": "<EOL><INDENT>useR(fn(r))<EOL>}"}
{"signature": "for (i in <NUM_LIT>.shortArray.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>sum += shortArray[i]<EOL><INDENT>}"}
{"signature": "if (<!USELESS_IS_CHECK, USELESS_IS_CHECK!>a is Int<!>) {", "body": "<EOL><INDENT><INDENT><INDENT>a = <!TYPE_MISMATCH!><NUM_LIT><!><EOL><INDENT><INDENT>}"}
{"signature": "if (cachedFile.isFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cacheFiles[cachedFile.absolutePath] = cachedFile.readBytes().contentHashCode()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (LOG.isDebugEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.debug(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val baseScope =", "body": "super.getSearchScope(analysisSession, owner) as? FirTypeScope ?: return null<EOL>"}
{"signature": "fun doTestByMainFile(mainFile: KtFile, mainModule: KtTestModule, testServices: TestServices) {", "body": "<EOL><INDENT><INDENT>doTestByKtFile(mainFile, testServices)<EOL><INDENT>}"}
{"signature": "val debugProtoFile =", "body": "File(protoPath.file.replace(<STR_LIT>, <STR_LIT>))<EOL>"}
{"signature": "val o<NUM_LIT> =", "body": "object : G<Int>(), I<NUM_LIT> {}<EOL>"}
{"signature": "if (fields.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>appendLine().appendLine()<EOL><INDENT><INDENT>}"}
{"signature": "val newItem =", "body": "Item(value)<EOL>"}
{"signature": "val hLocal =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testFunImportedFromObjectHasNoDispatchReceiver(l: a.C<NUM_LIT>S) {", "body": "<EOL><INDENT>l.<!UNRESOLVED_REFERENCE!>renamed<!><EOL><INDENT>l.prop<EOL><INDENT>renamed<EOL>}"}
{"signature": "val hiddenParameters =", "body": "mutableListOf<Pair<ParameterInfo, Int>>()<EOL>"}
{"signature": "if (csBuilder.hasContradiction) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.yieldDiagnostic(InapplicableCandidate)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (referenced in collectReferencedNames(function)) {", "body": "<EOL><INDENT><INDENT><INDENT>tracker.markReachable(referenced)<EOL><INDENT><INDENT>}"}
{"signature": "for (edgeData in incomingEdgesData) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>variablesInScope.addAll(edgeData.keySet())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var anyFilePatched =", "body": "false<EOL>"}
{"signature": "val EXPLICIT_FLEXIBLE_PACKAGE =", "body": "InternalFlexibleTypeTransformer.FLEXIBLE_TYPE_CLASSIFIER.packageFqName.asString()<EOL>"}
{"signature": "val removeOptionalJvmInlineAnnotation =", "body": "ReplacingSourceTransformer(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val invocationProto =", "body": "proto.invocation<EOL>"}
{"signature": "while (scopeDescriptor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (scopeDescriptor == classDescriptor) return true<EOL><INDENT><INDENT><INDENT>if (scopeDescriptor is ClassDescriptor && !scopeDescriptor.isInner) return false<EOL><INDENT><INDENT><INDENT>scopeDescriptor = scopeDescriptor.containingDeclaration<EOL><INDENT><INDENT>}"}
{"signature": "val gradleNodeModules =", "body": "GradleNodeModulesCache.registerIfAbsent(project, null, null)<EOL>"}
{"signature": "fun a(arg: LongArray) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT>fun p(arg: LongProgression) {}"}
{"signature": "val generatedIrDeclarationsByFileByOffset =", "body": "mutableMapOf<String, MutableMap<Pair<Int, Int>, MutableList<IrConstructorCall>>>()<EOL>"}
{"signature": "fun visitWrappedArgumentExpression(wrappedArgumentExpression: FirWrappedArgumentExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allBasicExpressionCheckers.check(wrappedArgumentExpression, data)<EOL><INDENT>}"}
{"signature": "val stackStart =", "body": "stack.indexOf(shortInfo).let { if (it < <NUM_LIT>) <NUM_LIT> else it + shortInfo.length }<EOL>"}
{"signature": "val libJsFile =", "body": "File(parentDir, <STR_LIT>).path<EOL>"}
{"signature": "val decodeSize =", "body": "decodeSize(source, startIndex, endIndex)<EOL>"}
{"signature": "if (samInterface == null || getSingleAbstractMethodOrNull(samInterface) == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "package<EOL>val x = { <!TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM, TYPECHECKER_HAS_RUN_INTO_RECURSIVE_PROBLEM!>x<!> }<EOL>.", "body": ""}
{"signature": "val jvmMain =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val fastValue =", "body": "fastPath()<EOL>"}
{"signature": "val makeNullable =", "body": "it.defaultValue != null && it.type.hasNullAsUndefinedValue()<EOL>"}
{"signature": "fun updateFrom(from: IrElement) {", "body": "<EOL><INDENT><INDENT>startOffset = from.startOffset<EOL><INDENT><INDENT>endOffset = from.endOffset<EOL><INDENT>}"}
{"signature": "import templates.", "body": "TypeParameter.*<EOL>"}
{"signature": "if (label != null || !findBreakInNestedLoop(guard, guard.name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>guardLabels += guard.name<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>loopGuardMap[x] = guard<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>guardToLoopLabel[guard.name] = label<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ARRAY_GET =", "body": "<STR_LIT><EOL>"}
{"signature": "if (newGroupStarted) {", "body": "<EOL><INDENT><INDENT><INDENT>previousGeneratedColumn = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(c: C<out A, out B<*>>) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(c: C<*, B<*>>) {}"}
{"signature": "var dumpText =", "body": "<STR_LIT><EOL>"}
{"signature": "import first.", "body": "*<EOL>"}
{"signature": "fun registerMethod(clazz: ClassNode, method: MethodNode) {", "body": "<EOL><INDENT><INDENT>register(method, clazz.name + <STR_LIT> + method.name + method.desc)<EOL><INDENT>}"}
{"signature": "val naming =", "body": "ConfigurationNaming.Default(target, compilationName)<EOL>"}
{"signature": "var numberOfBrackets =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (hasNext) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>hasNext = false<EOL><INDENT><INDENT><INDENT><INDENT>element<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitAnnotation(annotation: KmAnnotation) {", "body": "<EOL><INDENT><INDENT>annotations += annotation<EOL><INDENT>}"}
{"signature": "val baseTypeMirror =", "body": "context.mirror(enumDef.baseType)<EOL>"}
{"signature": "var relativeEnd =", "body": "end === undefined ?<EOL>"}
{"signature": "if (lastPos == startPos + <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this.offset = lastPos<EOL><INDENT><INDENT><INDENT>this.length = curPos - lastPos<EOL><INDENT><INDENT>}"}
{"signature": "val isArrayReceiver =", "body": "isArrayElementGetter()<EOL>"}
{"signature": "var reports =", "body": "convert(jsonReport, currentBuildNumber, target)<EOL>"}
{"signature": "val textAfterModification =", "body": "declarationToRender.render()<EOL>"}
{"signature": "val isExecutable =", "body": "binary is AbstractExecutable<EOL>"}
{"signature": "val taskProvider =", "body": "project.tasks.register(taskName, KotlinJvmRun::class.java)<EOL>"}
{"signature": "fun runMe(args: Array<String>) {", "body": "<EOL><INDENT>val x: Int = <NUM_LIT><EOL><INDENT>foo(x.convert())<EOL>}"}
{"signature": "if (this is IrTypeOperatorCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return this.argument.isUnitRead()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (arg.endsWith(JavaFileType.DOT_DEFAULT_EXTENSION)) {", "body": "<EOL><INDENT><INDENT><INDENT>addJavaSourceRoot(JavaRootPath(arg, args.javaPackagePrefix))<EOL><INDENT><INDENT>}"}
{"signature": "val originalDestructuringDeclarationOrInitializerSource =", "body": "originalDestructuringDeclarationOrInitializer.source ?: return<EOL>"}
{"signature": "if (ix < <NUM_LIT>x<NUM_LIT>CE || (ix == <NUM_LIT>x<NUM_LIT>ce) && (lx <= <NUM_LIT>x<NUM_LIT>fb<NUM_LIT>f<NUM_LIT>d.toUInt())) {", "body": "<EOL><INDENT><INDENT>w = __ieee<NUM_LIT>_exp(<NUM_LIT> * fabs(x))<EOL><INDENT><INDENT>t = h * w<EOL><INDENT><INDENT>return t * w<EOL><INDENT>}"}
{"signature": "fun addCompletedCallInfo(callInfo: CompletedCallInfo) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newExpr =", "body": "expression<EOL>"}
{"signature": "val PACKAGE_MEMBER =", "body": "scopeSessionKey<FqName, FirPackageMemberScope>()<EOL>"}
{"signature": "val pluginIntrinsicsMarkerSignature =", "body": "<STR_LIT><EOL>"}
{"signature": "fun forTestsNotMatching(pattern: String, configuration: TestConfigurationBuilder.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val regex = pattern.toMatchingRegexString().toRegex()<EOL><INDENT><INDENT>forTestsNotMatching(regex, configuration)<EOL><INDENT>}"}
{"signature": "val commonizer =", "body": "GradleCliCommonizer(commonizerRunner)<EOL>"}
{"signature": "if (!isUnaryOperator && !isBinaryOperator) {", "body": "<EOL><INDENT><INDENT><INDENT>return baseScope.processFunctionsByName(name, processor)<EOL><INDENT><INDENT>}"}
{"signature": "val elementParent =", "body": "element.parent<EOL>"}
{"signature": "val fileMap =", "body": "mutableMapOf<PackageFragmentDescriptor, IrFile>()<EOL>"}
{"signature": "val printWriter =", "body": "PrintWriter(stringWriter)<EOL>"}
{"signature": "val kotlinTargetHierarchyBuilderInterface =", "body": "KotlinHierarchyBuilder::class.java<EOL>"}
{"signature": "if (allFragments.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parts<EOL><INDENT><INDENT>}"}
{"signature": "val mainSource =", "body": "<STR_LIT><EOL>"}
{"signature": "if (e.cause is ClassNotFoundException) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT>, e.cause)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (wereSourcesFakeOverridesBound) {", "body": "<EOL><INDENT><INDENT><INDENT>fakeOverrideGenerator.bindOverriddenSymbols(declarations)<EOL><INDENT><INDENT>}"}
{"signature": "val normalZeroRange =", "body": "<NUM_LIT>F..<NUM_LIT>F<EOL>"}
{"signature": "else if (path.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>compiledJavaFiles.add(path)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val gradleModuleMetadata =", "body": "projectDir.resolve(<STR_LIT>).readText()<EOL>"}
{"signature": "val annotationA =", "body": "cache.javaCache.getStructure(MY_TEST_DIR.resolve(<STR_LIT>))!! as SourceFileStructure<EOL>"}
{"signature": "if (ix >= <NUM_LIT>x<NUM_LIT>ff<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>if (jx >= <NUM_LIT>) return one / x + one<INDENT><EOL><INDENT><INDENT>else return one / x - one<INDENT><EOL><INDENT>}"}
{"signature": "fun visitULongValue(value: ULongValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.LONG<EOL><INDENT><INDENT>data.builder.intValue = value.value<EOL><INDENT><INDENT>data.builder.flags = Flags.IS_UNSIGNED.toFlags(true)<EOL><INDENT>}"}
{"signature": "val initMeasurement =", "body": "measurements.filterIsInstance<CompilerInitializationMeasurement>().firstOrNull()<EOL>"}
{"signature": "fun funWithVarargParam(c: Int, vararg v: Int) {", "body": "<EOL>}"}
{"signature": "fun foo(<EOL><INDENT><INDENT>p<NUM_LIT>: Array<String> ,<EOL><INDENT><INDENT>p<NUM_LIT>: <!PLATFORM_CLASS_MAPPED_TO_KOTLIN!>List<String><!> ) {", "body": "}"}
{"signature": "fun test(subIn: SubIn) {", "body": "<EOL><INDENT>transform(subIn, materialize()) }"}
{"signature": "while (iterator.hasNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>val next = iterator.next()<EOL><INDENT><INDENT><INDENT>yield(transform(current, next))<EOL><INDENT><INDENT><INDENT>current = next<EOL><INDENT><INDENT>}"}
{"signature": "fun report(element: PsiElement, context: CallCheckerContext) {", "body": "<EOL><INDENT><INDENT>context.trace.report(NO_REFLECTION_IN_CLASS_PATH.on(element))<EOL><INDENT>}"}
{"signature": "val jvmCompileTime =", "body": "getJvmCompileTime(project, applicationName)<EOL>"}
{"signature": "fun doTest(k<NUM_LIT>: KClass<*>, k<NUM_LIT>: KClass<*>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(k<NUM_LIT>, k<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val serialProperty =", "body": "serialPropertiesMap[propertyDescriptor]<EOL>"}
{"signature": "val memberVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val calleeReferenceForExessiveDelegate =", "body": "oldExcessiveDelegate.calleeReference<EOL>"}
{"signature": "val isDelegated =", "body": "(propertySymbol as? KtKotlinPropertySymbol)?.isDelegatedProperty == true<EOL>"}
{"signature": "import <Foundation/Foundation.", "body": "h><EOL>"}
{"signature": "val iarr<NUM_LIT> =", "body": "copyIntArray(*iarr)<EOL>"}
{"signature": "for ((i, v) in ((<NUM_LIT>.<NUM_LIT>).reversed() step <NUM_LIT>).withIndex()) {", "body": "<EOL><INDENT>}"}
{"signature": "val ulongList =", "body": "mutableListOf<ULong>()<EOL>"}
{"signature": "val PRIVATE_KEYWORD =", "body": "JetToken()<EOL>"}
{"signature": "val originalLabelsForInstruction =", "body": "HashMultimap.create<Instruction, Label>()<EOL>"}
{"signature": "fun Example() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>foo()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasTypeParameter()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + typeParameter<EOL><INDENT>}"}
{"signature": "val rootDirPath =", "body": "target.project.rootDir.toPath()<EOL>"}
{"signature": "var androidCompilationSpecificStuff =", "body": "<NUM_LIT><EOL>"}
{"signature": "when (val firstByte = b.readByte().toInt()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> WasmDataMode.Active(<NUM_LIT>, readExpression())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> WasmDataMode.Passive<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><NUM_LIT> -> WasmDataMode.Active(b.readVarUInt<NUM_LIT>AsInt(), readExpression())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (name in configuration.nonStrictEnums) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "else if (isExternal) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(targetSource, FirJvmErrors.JVM_STATIC_ON_EXTERNAL_IN_INTERFACE, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (asLiteral && KT_<NUM_LIT>_AFFECTED_FILENAMES.contains(fileName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>println(KT_<NUM_LIT>_HEADER)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val customDefaultTarget =", "body": "JvmTarget.fromString(DEFAULT_JVM_TARGET_FROM_PROPERTY)<EOL>"}
{"signature": "val myTypeVariable =", "body": "getMyTypeVariable(type)<EOL>"}
{"signature": "val isExpectClass =", "body": "containingDescriptor.isExpect<EOL>"}
{"signature": "fun assertEquals(expected: String, actual: Any) {", "body": "<EOL><INDENT>if (<STR_LIT> != expected)<EOL><INDENT><INDENT>throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "val serializationExceptionUnknownIndexName =", "body": "<STR_LIT><EOL>"}
{"signature": "val KOTLIN_PACKAGE_FQN =", "body": "FqName.fromSegments(listOf(<STR_LIT>))<EOL>"}
{"signature": "val originalSnapshot =", "body": "sourceFile.compileAndSnapshot()<EOL>"}
{"signature": "val aToken =", "body": "ap.target.token<EOL>"}
{"signature": "else if (configurationKind.withMockRuntime) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>files.add(provider.minimalRuntimeJarForTests())<EOL><INDENT><INDENT><INDENT><INDENT>files.add(provider.scriptRuntimeJarForTests())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun parseLongFromSubstring() {", "body": "<EOL><INDENT><INDENT>val url = \"https:<INDENT><INDENT>val articleId = url.substringAfterLast('-').hexToLong()<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>xc<NUM_LIT>bbde<NUM_LIT>e<NUM_LIT>d<NUM_LIT>, articleId)<EOL><INDENT>}"}
{"signature": "val prefixPathSegments =", "body": "pathRoot.prefixFqName?.pathSegments()<EOL>"}
{"signature": "val jvmTarget =", "body": "configuration.get(JVMConfigurationKeys.JVM_TARGET, JvmTarget.DEFAULT)<EOL>"}
{"signature": "val baseClassSuite   =", "body": "getKonanTestClass(<STR_LIT>)<EOL>"}
{"signature": "val JS_POLYFILLS_PACKAGE =", "body": "JS_PACKAGE_FQNAME.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val inputChars =", "body": "input.toCharArray()<EOL>"}
{"signature": "val fmax =", "body": "Float.MAX_VALUE<EOL>"}
{"signature": "val interopStubsName =", "body": "<STR_LIT><EOL>"}
{"signature": "for (kotlinErrorPath in kotlinErrorPaths) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertDirectoryDoesNotExist(kotlinErrorPath)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val unboxed =", "body": "value.valueArguments.singleOrNull()<EOL>"}
{"signature": "fun visitTypeAliasDescriptor(descriptor: TypeAliasDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>collectParents(descriptor)<EOL><INDENT><INDENT><INDENT>isTopLevelPrivate = isTopLevelPrivate or descriptor.isTopLevelPrivate<EOL><INDENT><INDENT><INDENT>setExpected(descriptor.isExpect)<EOL><INDENT><INDENT><INDENT>platformSpecificAlias(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val readableString =", "body": "StringBuilder()<EOL>"}
{"signature": "val nodeToVisit =", "body": "nodesToVisit.removeFirst()<EOL>"}
{"signature": "if (!putRehash(i++)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw IllegalStateException(<STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DEFAULT_PARAMS_IMPL_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "if (argument is FirCallableReferenceAccess) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.source, FirErrors.NOT_NULL_ASSERTION_ON_CALLABLE_REFERENCE, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (resolvedSymbol is FirPropertySymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>if (expression is FirVariableAssignment)<EOL><INDENT><INDENT><INDENT><INDENT>resolvedSymbol.setterSymbol?.visibility ?: resolvedSymbol.visibility<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>resolvedSymbol.getterSymbol?.visibility ?: resolvedSymbol.visibility<EOL><INDENT><INDENT>}"}
{"signature": "if (initialLookupsCacheStateDiff.actual != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>markAllKotlinForRebuild(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>clearLookupCache()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val unambiguousFqName =", "body": "ClassId(fqName, name)<EOL>"}
{"signature": "val packageSegment =", "body": "pathSegment.name<EOL>"}
{"signature": "val functionJvmDescriptor =", "body": "parseJvmDescriptor(desc, parseReturnType = true)<EOL>"}
{"signature": "val varWithoutInitDeclarations =", "body": "hashSetOf<JsName>()<EOL>"}
{"signature": "if (printMetrics) {", "body": "<EOL><INDENT><INDENT><INDENT>printMetrics(<EOL><INDENT><INDENT><INDENT><INDENT>taskData.getBuildTimesMetrics(), taskData.getPerformanceMetrics(), taskData.getNonIncrementalAttributes(),<EOL><INDENT><INDENT><INDENT><INDENT>taskData.getGcTimeMetrics(), taskData.getGcCountMetrics()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>printCustomTaskMetrics(taskData)<EOL><INDENT><INDENT>}"}
{"signature": "val rootClassLoader =", "body": "findRootClassLoader()<EOL>"}
{"signature": "if (_functionFactory != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val sourceKt =", "body": "tempDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "for (i in UInt.MIN_VALUE until UInt.MAX_VALUE step Int.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT>uintList += i<EOL><INDENT>}"}
{"signature": "if (!x.isNullOrBlank()) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "if (hasExtension(JvmProtoBuf.classModuleName)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(getExtension(JvmProtoBuf.classModuleName))<EOL><INDENT>}"}
{"signature": "val previousExcludePredicate =", "body": "this.excludePredicate<EOL>"}
{"signature": "for (annotationEntry in ktParameter.annotationEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this.annotations += annotationEntry.convert<FirAnnotation>()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val dispatchCallableReceiver =", "body": "<EOL><INDENT><INDENT><INDENT>towerCandidate.dispatchReceiver?.let { toCallableReceiver(it, explicitReceiverKind == ExplicitReceiverKind.DISPATCH_RECEIVER) }<EOL>"}
{"signature": "for (stmt in initBlock.body.statements) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>+stmt.transformStatement(this@JvmInlineClassLowering).patchDeclarationParents(function)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val permittedTypes =", "body": "javaClass.permittedTypes<EOL>"}
{"signature": "fun go() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>  this@MainActivity<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package at runtime can't know what classes it has and has not<EOL>.", "body": ""}
{"signature": "var foo<NUM_LIT> =", "body": "bar<EOL>"}
{"signature": "val knownKindsByPackageFqName =", "body": "kinds.groupBy { it.packageFqName }<EOL>"}
{"signature": "if (library.language != Language.CPP) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>getStructDeclAt(cursor)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val isClass =", "body": "solution[index]<EOL>"}
{"signature": "if (c == '\\n'.toByte()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append()<EOL><INDENT><INDENT><INDENT><INDENT>flushLine()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (schemeNames.contains(pod.schemeName)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@all<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val defaultExpressionInfo =", "body": "computeDefaultExpression(defaultStatement, firDefaultStatement, firValuedReturnExpressions)<EOL>"}
{"signature": "val internedFilePath =", "body": "interner.intern(filePath)<EOL>"}
{"signature": "fun testInt() {", "body": "<EOL><INDENT>notNullInt(<NUM_LIT>)<EOL><INDENT>nullInt(<NUM_LIT>)<EOL><INDENT>null<NUM_LIT>Int(null)<EOL>}"}
{"signature": "if (declaration.hasAnnotation(KonanFqNames.noReorderFields)) {", "body": "<EOL><INDENT><INDENT><INDENT>return fields<EOL><INDENT><INDENT>}"}
{"signature": "fun test(a: Int, b: Boolean) {", "body": "<EOL><INDENT>bar(a.foo(<!TYPE_MISMATCH!>b<!>))<EOL>}"}
{"signature": "val inKeyword =", "body": "expression.inKeyword ?: return TextRange.EMPTY_RANGE<EOL>"}
{"signature": "if (testLogger != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fileSystems =", "body": "directories.mapTo(hashSetOf(), VirtualFile::getFileSystem)<EOL>"}
{"signature": "val progressiveArg =", "body": "compilerArgs.find { it.trim() == expectedArg }<EOL>"}
{"signature": "if (expectedFile.exists()) {", "body": "<EOL><INDENT><INDENT><INDENT>val resultDump = dumper.generateResultingDump()<EOL><INDENT><INDENT><INDENT>assertions.assertEqualsToFile(expectedFile, resultDump)<EOL><INDENT><INDENT>}"}
{"signature": "val dslMarkerClassId =", "body": "ClassId.fromString(<STR_LIT>)<EOL>"}
{"signature": "if (reportingSettings.experimentalTryNextConsoleOutput) {", "body": "<EOL><INDENT><INDENT><INDENT>reportTryNextToConsole(buildData)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitCatch(catch: FirCatch) {", "body": "<EOL><INDENT><INDENT>visitElement(catch)<EOL><INDENT>}"}
{"signature": "if (additionalPluginExtension != null) {", "body": "<EOL><INDENT><INDENT><INDENT>IrGenerationExtension.registerExtension(project, additionalPluginExtension)<EOL><INDENT><INDENT>}"}
{"signature": "if (!declaredProperty.isCollectable()) {", "body": "<EOL><INDENT><INDENT><INDENT>return@processAllProperties<EOL><INDENT><INDENT>}"}
{"signature": "for (type in targetArgs.reversed()) {", "body": "<EOL><INDENT><INDENT>offset -= type.size<EOL><INDENT><INDENT>instructions.insertBefore(invokeInsn, VarInsnNode(type.getOpcode(Opcodes.ISTORE), offset))<EOL><INDENT>}"}
{"signature": "val argSize =", "body": "getLoadStoreArgSize(curInstr.opcode)<EOL>"}
{"signature": "val bitcodeDependenciesFile =", "body": "tempCacheDirectory?.cacheBinaryPart()?.child(CachedLibraries.BITCODE_DEPENDENCIES_FILE_NAME)<EOL>"}
{"signature": "when (i) {", "body": "<EOL><INDENT><NUM_LIT> -> value = <NUM_LIT><EOL><INDENT><NUM_LIT> -> value = <NUM_LIT><EOL><INDENT><NUM_LIT> -> value = <NUM_LIT><EOL>  }"}
{"signature": "for (nestedClassSymbol in nestedClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collectFunctions(nestedClassSymbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val excludedPaths =", "body": "listOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val dumpFiles =", "body": "dumpDirectory.resolve(module.name).listFiles()?.filter { it.name.contains(AFTER_PREFIX) } ?: return<EOL>"}
{"signature": "val argsBlock =", "body": "JsBlock()<EOL>"}
{"signature": "fun foo(z: Boolean, c: C, b: B, s: String, d: D) {", "body": "<EOL><INDENT>val v = if(z) c.g else b.f<EOL><INDENT>v.h = s<EOL><INDENT>d.o = v<EOL><INDENT>val u = v<EOL><INDENT>u.p = c<EOL>}"}
{"signature": "if (rhs.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ACTUAL_TYPE_ALIAS_TO_NULLABLE_TYPE.on(declaration))<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val composables =", "body": "linkedMapOf<String, @Composable () -> Unit>()<EOL>"}
{"signature": "val samFunctionType =", "body": "getFunctionTypeForPossibleSamType(unwrappedParameterType)<EOL>"}
{"signature": "import <!UNRESOLVED_IMPORT!>unr<!>.", "body": "unr.unr<EOL>"}
{"signature": "val candidateKtModule =", "body": "ProjectStructureProvider.getModule(project, candidate, contextualModule = null)<EOL>"}
{"signature": "if (overridden == gMember) {", "body": "<EOL><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT>ProcessorAction.STOP<EOL><INDENT><INDENT>}"}
{"signature": "val topLevelTypeAliases =", "body": "mutableListOf<KmTypeAlias>()<EOL>"}
{"signature": "if (!declaration.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(fieldAnnotation.source, FirErrors.VOLATILE_ON_VALUE, context)<EOL><INDENT><INDENT>}"}
{"signature": "val cacheKey =", "body": "KlibCacheKey(sourceModules, freeCompilerArgs, useHeaders)<EOL>"}
{"signature": "val SHORTCUTS_DEPRECATION_MESSAGE =", "body": "<STR_LIT> +<EOL>"}
{"signature": "val TYPE_INFO_TYPE_SIMPLE_NAME_PRT_OFFSET =", "body": "TYPE_INFO_TYPE_SIMPLE_NAME_ID_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "val kotlinTestKLib =", "body": "testServices.standardLibrariesPathProvider.kotlinTestJsKLib()<EOL>"}
{"signature": "fun doGenerateBody(codegen: ExpressionCodegen, signature: JvmMethodSignature) {", "body": "<EOL><INDENT><INDENT>this.codegen = codegen<EOL><INDENT><INDENT>codegen.returnExpression(declaration.bodyExpression ?: error(<STR_LIT> + declaration.getElementTextWithContext()))<EOL><INDENT>}"}
{"signature": "val foobar =", "body": "<NUM_LIT><EOL>"}
{"signature": "val irFun<NUM_LIT>SignatureCalculation =", "body": "makeWithSymbol(IrSimpleFunctionSymbolImpl())<EOL>"}
{"signature": "fun visitTypeOperator(expression: IrTypeOperatorCall, data: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>expression.acceptChildren(this, data)<INDENT><INDENT><INDENT> }"}
{"signature": "val shouldAdd =", "body": "p.getter?.hasComposableAnnotation() ?: false ||<EOL>"}
{"signature": "val callImplicitReceivers =", "body": "resolvedCall.getImplicitReceivers()<EOL>"}
{"signature": "val commentRegex =", "body": "Regex(<STR_LIT><STR_LIT><STR_LIT>)<EOL>"}
{"signature": "fun testRequireUnreachableCode() {", "body": "<EOL><INDENT>require(false)<EOL><INDENT>println(<STR_LIT>)<EOL>}"}
{"signature": "val DECLARATION_STARTS_WITH =", "body": "DECLARATION_KEYWORDS.map { it + <STR_LIT> }<EOL>"}
{"signature": "fun reportCallableReferenceConstraintError(<EOL><INDENT><INDENT>error: NewConstraintMismatch,<EOL><INDENT><INDENT>rhsExpression: KtSimpleNameExpression<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>trace.report(TYPE_MISMATCH.on(rhsExpression, error.lowerKotlinType, error.upperKotlinType))<EOL><INDENT>}"}
{"signature": "val classOrObjectDeclarations =", "body": "kotlinAsJavaSupport.findClassOrObjectDeclarations(qualifiedName, scope)<EOL>"}
{"signature": "if (skipFirstKotlinParameter) {", "body": "<EOL><INDENT><INDENT>kotlinParameters.next()<EOL><INDENT>}"}
{"signature": "if (accessor is FirDefaultPropertyAccessor || accessor.body == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>transformFunction(accessor, ResolutionMode.ContextIndependent, shouldResolveEverything)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val greaterOrEqualFunByOperandType =", "body": "<EOL><INDENT><INDENT>primitiveIrTypesWithComparisons.defineComparisonOperatorForEachIrType(BuiltInOperatorNames.GREATER_OR_EQUAL)<EOL>"}
{"signature": "for (o in operations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val result = array.arrayTransform()<EOL><INDENT><INDENT><INDENT><INDENT>result.fill(o.element.elementTransform(), o.fromIndex, o.toIndex)<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(o.expectedResult.arrayTransform().contentEquals(result))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testAcceptedAnnotationsSync() {", "body": "<EOL><INDENT><INDENT>val messageCollector = TestMessageCollector()<EOL><INDENT><INDENT>val aClass = compileScript(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>ScriptWithAcceptedAnnotationsSyncResolver::class,<EOL><INDENT><INDENT><INDENT>null,<EOL><INDENT><INDENT><INDENT>messageCollector = messageCollector<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>Assert.assertNotNull(<STR_LIT>, aClass)<EOL><INDENT>}"}
{"signature": "val SUCCESS =", "body": "DependencyState(conflictReason = null)<EOL>"}
{"signature": "var used =", "body": "false<EOL>"}
{"signature": "fun visitClass(klass: FirClass, data: Any?) {", "body": "<EOL><INDENT><INDENT>parentForClass[klass] = currentPath.lastOrNull()<EOL><INDENT><INDENT>currentPath.add(klass)<EOL><EOL><INDENT><INDENT>klass.acceptChildren(this, null)<EOL><EOL><INDENT><INDENT>currentPath.removeAt(currentPath.size - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val DIAGNOSTIC_IN_TESTDATA_PATTERN =", "body": "Regex(<STR_LIT>.*?\\<STR_LIT>)<EOL>"}
{"signature": "val isKotlinCompilerClasspath =", "body": "variant.attributes.keySet().isEmpty()<EOL>"}
{"signature": "val sub =", "body": "expr.getTypeArgument(index)<EOL>"}
{"signature": "if (rightTokenType == KtTokens.GET_KEYWORD || rightTokenType == KtTokens.SET_KEYWORD) {", "body": "<EOL><INDENT><INDENT><INDENT>return MUST_LINE_BREAK<EOL><INDENT><INDENT>}"}
{"signature": "if (call.typeArgumentsCount != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assert(call.typeArgumentsCount == <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>call.putTypeArgument(<NUM_LIT>, arrayElementType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val rootDir =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val KOTLIN_JAVA_SCRIPT_RUNTIME_JAR =", "body": "<STR_LIT><EOL>"}
{"signature": "val myDirtyFiles =", "body": "HashSet<File>()<EOL>"}
{"signature": "val addressTimestamp =", "body": "outputDir.resolve(<STR_LIT>).lastModified()<EOL>"}
{"signature": "import testscase<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "if (derivedClassId == null) {", "body": "<EOL><INDENT><INDENT><INDENT>FirPropertySymbol(baseSymbol.callableId)<EOL><INDENT><INDENT>}"}
{"signature": "val suspensionBlock =", "body": "JsIrBuilder.buildBlock(unit, listOf(irReturn))<EOL>"}
{"signature": "val fooException<NUM_LIT> =", "body": "java.lang.Exception(<STR_LIT>)<EOL>"}
{"signature": "fun deleteSymlinkTwoPointingToEachOther() {", "body": "<EOL><INDENT><INDENT>val basedir = createTempDirectory().cleanupRecursively()<EOL><INDENT><INDENT>val link<NUM_LIT> = basedir.resolve(<STR_LIT>)<EOL><INDENT><INDENT>val link<NUM_LIT> = basedir.resolve(<STR_LIT>).tryCreateSymbolicLinkTo(link<NUM_LIT>) ?: return<EOL><INDENT><INDENT>link<NUM_LIT>tryCreateSymbolicLinkTo(link<NUM_LIT>) ?: return<EOL><EOL><INDENT><INDENT>basedir.deleteRecursively()<EOL><INDENT><INDENT>assertFalse(basedir.exists())<EOL><INDENT>}"}
{"signature": "val getterDesc =", "body": "propDesc.getter!!<EOL>"}
{"signature": "val resumeResult =", "body": "evaluateExpression(expression.resumeResult)<EOL>"}
{"signature": "fun Receiver(value: Any?) {", "body": "}<EOL><EOL><INDENT><INDENT><INDENT>@Composable fun CompositionContext() {<EOL><INDENT><INDENT><INDENT><INDENT>Receiver(value = $expression)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun collectInnerScopeName(innerScope: ExportedElementScope) {", "body": "<EOL><INDENT><INDENT>scopeNames += innerScope.name<EOL><INDENT>}"}
{"signature": "val isThisInner =", "body": "this.isInner<EOL>"}
{"signature": "val languageFeatureName =", "body": "tail.substring(<NUM_LIT>)<EOL>"}
{"signature": "fun invokeRegularFunction() {", "body": "<EOL><INDENT><INDENT>regularCompanionObjectFunction(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (bytesFormat.shortByteSeparatorNoPrefixAndSuffix) {", "body": "<EOL><INDENT><INDENT>return hexToByteArrayShortByteSeparatorNoPrefixAndSuffix(startIndex, endIndex, bytesFormat)<EOL><INDENT>}"}
{"signature": "val MULTILINE =", "body": "<NUM_LIT> shl <NUM_LIT><EOL>"}
{"signature": "val objRef =", "body": "JsNameRef(jsFun.parameters[<NUM_LIT>].name)<EOL>"}
{"signature": "val isInlineClassExpected =", "body": "context.inlineClassesUtils.getInlinedClass(expectedType) != null<EOL>"}
{"signature": "fun useJ() {", "body": "<EOL><INDENT>getAChild().j()<EOL>}"}
{"signature": "if (state.executed) {", "body": "<EOL><INDENT><INDENT>fn()<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "import Class.", "body": "C.genericFromSuper<EOL>"}
{"signature": "val OLD_PARCELER_FQN =", "body": "OLD_PARCELER_ID.asSingleFqName()<EOL>"}
{"signature": "fun testBreakNoinline() {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, testBreak(), <STR_LIT>)<EOL>}"}
{"signature": "if (chosenSupertype != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val capturedType = captureFromExpression(chosenSupertype.unwrap())<EOL><INDENT><INDENT><INDENT>return if (capturedType != null && argumentType.isDefinitelyNotNullType)<EOL><INDENT><INDENT><INDENT><INDENT>capturedType.makeDefinitelyNotNullOrNotNull()<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>capturedType ?: argumentType<EOL><INDENT><INDENT>}"}
{"signature": "fun visitVariableDeclarationNode(node: VariableDeclarationNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitVariableDeclarationNode(node)<EOL><INDENT>}"}
{"signature": "val kotlinResultGetOrThrow =", "body": "irBuiltIns.findFunctions(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val annotationFqName =", "body": "FqName(annotationNameString)<EOL>"}
{"signature": "if (nativeBacked in excludedClients) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val testContainerFuns =", "body": "mutableMapOf<IrModuleFragment, IrSimpleFunction>()<EOL>"}
{"signature": "if (classMember is FirClassLikeDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>jsStableNames.addIfNotNull(FirJsStableName.createStableNameOrNull(classMember.symbol, context.session))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (x: Comparable<*> in doubleArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>test = <STR_LIT><EOL><INDENT><INDENT>useDoubleAsComparable(x)<EOL><INDENT>}"}
{"signature": "if (results.add(resolvedEdge)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>yield(resolvedEdge)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resolveQueue.add(resolvedEdge)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var interupted =", "body": "false<EOL>"}
{"signature": "if (firstStatement !is IrContainerExpression || firstStatement.statements.size != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "val B<NUM_LIT> =", "body": "<NUM_LIT> <EOL>"}
{"signature": "val firContainer =", "body": "containingDeclaration.firSymbol.fir<EOL>"}
{"signature": "fun freezeIsNoopForObjects() {", "body": "<EOL><INDENT><INDENT>val a = A(<NUM_LIT>)<EOL><INDENT><INDENT>a.freeze()<EOL><INDENT><INDENT>a.x = <NUM_LIT><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, a.x)<EOL><INDENT>}"}
{"signature": "if (import.isAllUnder && isClassIdPointingToEnumEntry(parentClassId, symbolProvider)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.CANNOT_ALL_UNDER_IMPORT_FROM_SINGLETON,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parentClassId.shortClassName,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>context,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val logFiles =", "body": "arrayOfNulls<File>(ParallelStartParams.threads)<EOL>"}
{"signature": "val stackTopTarget =", "body": "context.firLoopTargets.removeLast()<EOL>"}
{"signature": "fun test<NUM_LIT>(a: Inv<*>?, b: Inv<*>) {", "body": "<EOL><INDENT>generic(a ?: b)<EOL><INDENT>generic(if (a != null) a else b)<EOL><INDENT>generic(a!!)<EOL>}"}
{"signature": "fun testSingletonCollectionSerialization(value: Any) {", "body": "<EOL><INDENT><INDENT>val deserialized = checkSerializeAndDeserialize(value)<EOL><INDENT><INDENT>assertReadOnly(deserialized)<EOL><INDENT>}"}
{"signature": "val inFile =", "body": "subProject(<STR_LIT>).projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun build(c: suspend () -> Unit) {", "body": "<EOL><INDENT>c.startCoroutine(EmptyContinuation)<EOL>}"}
{"signature": "if (isRootPackage == true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>SirCallableKind.FUNCTION<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(x: A.() -> Unit) {", "body": "}<EOL>fun bar(x: B.() -> Unit) {}"}
{"signature": "if (reachableInstructions.contains(instruction)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>instructions.add(instruction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!context.session.moduleData.isCommon) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.OPTIONAL_DECLARATION_USAGE_IN_NON_COMMON_SOURCE, context)<EOL><INDENT><INDENT>}"}
{"signature": "val inheritableSerialInfoFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (cls<NUM_LIT> != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val zzz = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val idSignatureDeserializer =", "body": "IdSignatureDeserializer(libFile, fileSignature, interner)<EOL>"}
{"signature": "val CONTENTS =", "body": "<STR_LIT>.split(<STR_LIT>)<EOL>"}
{"signature": "val compilationsIncompatibleWithCompileOnly =", "body": "target.compilations<EOL>"}
{"signature": "val JAVA_ENHANCEMENT_FOR_DECLARED_MEMBERS =", "body": "scopeSessionKey<FirRegularClassSymbol, FirContainingNamesAwareScope>()<EOL>"}
{"signature": "val topLevelFqNames =", "body": "HashMultimap.create<FqName, KtElement>()<EOL>"}
{"signature": "val superInterface =", "body": "it.fullyExpandedType(session)<EOL>"}
{"signature": "when (val sourceSetBaseName = sourceSet.baseName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>SourceSet.MAIN_SOURCE_SET_NAME -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> sourceSetBaseName + <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val systemTempRoot =", "body": "<EOL><INDENT><INDENT><INDENT>"}
{"signature": "val exportForCompilerAnnotation =", "body": "NativeRuntimeNames.Annotations.exportForCompilerClassId.asSingleFqName()<EOL>"}
{"signature": "if (filter.runCommonCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticByCommonCheckers.forEach(action)<EOL><INDENT><INDENT>}"}
{"signature": "import d.", "body": "A.Companion.C<EOL>"}
{"signature": "val kaptOptions =", "body": "testServices.kaptOptionsProvider[module]<EOL>"}
{"signature": "val thisReceiver =", "body": "IrGetValueImpl(expression.startOffset, expression.endOffset, klass.thisReceiver!!.symbol)<EOL>"}
{"signature": "val valueDirectivesMap =", "body": "mutableMapOf<ValueDirective<*>, CompilerConfigurationKey<*>>()<EOL>"}
{"signature": "val directoryMatch =", "body": "findMatchLine(path, isDirectory = true, parentMatch)<EOL>"}
{"signature": "var sumC =", "body": "<NUM_LIT><EOL>"}
{"signature": "val getScriptingClass =", "body": "hostConfiguration[ScriptingHostConfiguration.getScriptingClass]<EOL>"}
{"signature": "val moduleFile =", "body": "<STR_LIT><EOL>"}
{"signature": "val currentIrModule =", "body": "loadedIr.loadedFragments[libFile] ?: notFoundIcError(<STR_LIT>, libFile)<EOL>"}
{"signature": "val librariesWithoutSourceMaps =", "body": "mutableListOf<JsLibrary>()<EOL>"}
{"signature": "if (isMarkedNullable()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append('?')<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((i, v) in (<NUM_LIT>.<NUM_LIT> step <NUM_LIT>).reversed().withIndex()) {", "body": "<EOL><INDENT>}"}
{"signature": "val provideDelegateReference =", "body": "provideDelegateCall.calleeReference<EOL>"}
{"signature": "if (mask and (<NUM_LIT>b<NUM_LIT> shl index) != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val sub = expr.getTypeArgument(index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (sub != null)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>stabilityOf(sub)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Stability.Unstable<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "import app.", "body": "*<EOL>"}
{"signature": "val failuresFromIdeaSyncClasspathMode =", "body": "if (ideaSyncClasspathModeUtil.isClasspathModeActive) ideaSyncClasspathModeUtil.exceptions<EOL>"}
{"signature": "for (i in <NUM_LIT>.<NUM_LIT> step one() step one()) {", "body": "<EOL><INDENT>}"}
{"signature": "if (!outputDirectory.exists) {", "body": "<EOL><INDENT><INDENT>outputDirectory.mkdirs()<EOL><INDENT>}"}
{"signature": "val checkNotNullName =", "body": "IrBuiltIns.KOTLIN_INTERNAL_IR_FQN.child(Name.identifier(BuiltInOperatorNames.CHECK_NOT_NULL)).asString()<EOL>"}
{"signature": "while (currentSession != null) {", "body": "<EOL><INDENT><INDENT><INDENT>add(currentSession)<EOL><INDENT><INDENT><INDENT>currentSession = currentSession.findParentBuildInferenceSession()<EOL><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(x: C<in String?>) {", "body": "<EOL><INDENT>val y = x.data<EOL><INDENT>require(y is String)<EOL><INDENT>x.data.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>y.length<EOL>}"}
{"signature": "val max =", "body": "<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>_<NUM_LIT>UL.toString()<EOL>"}
{"signature": "fun visitNondeterministicJump(instruction: NondeterministicJumpInstruction) {", "body": "<EOL><INDENT><INDENT>visitInstruction(instruction)<EOL><INDENT>}"}
{"signature": "if (expression.origin == FINALLY_EXPRESSION) {", "body": "<EOL><INDENT><INDENT><INDENT>catchBlockStack.peek()?.let(::setupExceptionState)<EOL><INDENT><INDENT>}"}
{"signature": "if (origin == IrStatementOrigin.NOT_IN && expression.symbol == context.irBuiltIns.booleanNotSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitCall(expression)<INDENT><INDENT>  }"}
{"signature": "val allFiles =", "body": "listOf(absolute, relative) + if (isBackslashSeparator) listOf(networkShare<NUM_LIT>, networkShare<NUM_LIT>) else emptyList()<EOL>"}
{"signature": "if (parent is KtDeclaration && parent !is KtDestructuringDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return parent.originalDeclaration ?: parent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val linesMatcher =", "body": "module.files<EOL>"}
{"signature": "if (debugMode) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>renderName(fragment.containingDeclaration, builder, false)<EOL><INDENT><INDENT>}"}
{"signature": "if (!validateQualifier(string)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(expression.argumentList.arguments.first().source, FirWebCommonErrors.WRONG_JS_QUALIFIER, context)<EOL><INDENT><INDENT>}"}
{"signature": "package `/`<EOL>.", "body": ""}
{"signature": "val newGap =", "body": "Gap(start = end + <NUM_LIT>, length = charCode - end - <NUM_LIT>)<EOL>"}
{"signature": "val superVisitor =", "body": "super.visitAnnotation(desc, visible)<EOL>"}
{"signature": "fun useNullableUnit() {", "body": "<EOL><INDENT>nullableUnit()<EOL>}"}
{"signature": "if (target is GeneratedSubclass) {", "body": "<EOL><INDENT><INDENT>return target.publicType().canonicalName<EOL><INDENT>}"}
{"signature": "fun applyChanges(modified: JpsKotlinFacetModuleExtension) {", "body": "<EOL><INDENT><INDENT>this.settings = modified.settings<EOL><INDENT>}"}
{"signature": "if (!descriptor.fqName.isRoot) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SuggestedName(descriptor.fqName.pathSegments().map(Name::asString), true, descriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  descriptor.containingDeclaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val consumesLoopVariableComponents =", "body": "true<EOL>"}
{"signature": "if (extensionReceiver != null && callComponents.statelessCallbacks.isSuperExpression(extensionReceiver)) {", "body": "<EOL><INDENT><INDENT><INDENT>addDiagnostic(SuperAsExtensionReceiver(extensionReceiver))<EOL><INDENT><INDENT>}"}
{"signature": "if (classpathSourceDir.listFiles()!!.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>listOf(classpathSourceDir)<EOL><INDENT>}"}
{"signature": "when (proto) {", "body": "<EOL><INDENT><INDENT>ProtoSimpleTypeNullablity.MARKED_NULLABLE -> SimpleTypeNullability.MARKED_NULLABLE<EOL><INDENT><INDENT>ProtoSimpleTypeNullablity.NOT_SPECIFIED -> SimpleTypeNullability.NOT_SPECIFIED<EOL><INDENT><INDENT>ProtoSimpleTypeNullablity.DEFINITELY_NOT_NULL -> SimpleTypeNullability.DEFINITELY_NOT_NULL<EOL><INDENT>}"}
{"signature": "var processed =", "body": "false<EOL>"}
{"signature": "val originalContents =", "body": "destFile.readText()<EOL>"}
{"signature": "when (sourceRoot.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>PSourceRoot.Kind.PRODUCTION -> (<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>PSourceRoot.Kind.TEST -> (<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>PSourceRoot.Kind.RESOURCES -> (<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>PSourceRoot.Kind.TEST_RESOURCES -> (<STR_LIT> to <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val savedClasspathProperty =", "body": "System.setProperty(<STR_LIT>, classpath.joinToString(File.pathSeparator))<EOL>"}
{"signature": "if (nonBitSet == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return alt xor bits_.get(ch)<EOL><INDENT><INDENT>}"}
{"signature": "val allIOExceptions =", "body": "actionExceptions.all { it is IOException }<EOL>"}
{"signature": "if (assignableParams.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return super.visitFunction(declaration)<EOL><INDENT><INDENT>}"}
{"signature": "val visitedBuildTimes =", "body": "HashSet<BuildTime>()<EOL>"}
{"signature": "val kotlinUnsafeFqName =", "body": "classId.asSingleFqName().toUnsafe()<EOL>"}
{"signature": "fun c(p: () -> Unit) {", "body": "<EOL><INDENT>p()<EOL>}"}
{"signature": "val commonMemberStorage =", "body": "Fir<NUM_LIT>IrCommonMemberStorage(FirBasedSignatureComposer.create(firMangler, fir<NUM_LIT>IrConfiguration))<EOL>"}
{"signature": "val NAME_POINTS_TO =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "import kotlin.", "body": "random.*<EOL>"}
{"signature": "fun slice() {", "body": "<EOL><INDENT><INDENT>val iter = listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.substring(<NUM_LIT>.<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.slice(<NUM_LIT> downTo <NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <STR_LIT>.slice(iter))<EOL><INDENT>}"}
{"signature": "for (parent in element.parents) {", "body": "<EOL><INDENT><INDENT><INDENT>val parentVar = extractIndex(parent.origin)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>g[parentVar.direct()] += elementVar.direct()<EOL><INDENT><INDENT><INDENT>g[elementVar.invert()] += parentVar.invert()<EOL><INDENT><INDENT>}"}
{"signature": "val actualElement =", "body": "actual.get(index)<EOL>"}
{"signature": "val BINARY_OUTPUT_DIR_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val containingClassOrPackage =", "body": "DescriptorUtils.getParentOfType(descriptor, ClassOrPackageFragmentDescriptor::class.java)<EOL>"}
{"signature": "if (currentSize > maxSize) {", "body": "<EOL><INDENT><INDENT><INDENT>maxSize = currentSize<EOL><INDENT><INDENT>}"}
{"signature": "val remainingNotAnalyzedPostponedArgument =", "body": "postponedArguments.firstOrNull { !it.analyzed }<EOL>"}
{"signature": "val goldenTransformRule =", "body": "<EOL><INDENT><INDENT>GoldenTransformRule(<STR_LIT>)<EOL>"}
{"signature": "val sessionsBeforeModification =", "body": "getSessions(ktModules)<EOL>"}
{"signature": "if (<!USELESS_IS_CHECK!>i is Int<!>) {", "body": "<EOL><INDENT><INDENT>return;<EOL><INDENT>}"}
{"signature": "fun cleanUp(value: ValueWithCleanup?) {", "body": "<EOL><INDENT><INDENT>isCleanedUp = true<EOL><INDENT>}"}
{"signature": "fun createErr() {", "body": "<EOL><INDENT>Err(<STR_LIT>)<EOL>}"}
{"signature": "val STDLIB_DIR =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "if (isEmpty() && whenExpression.branches.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(WhenMissingCase.Unknown)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun doTestWithoutAPT(ktFilePath: String) {", "body": "<EOL><INDENT><INDENT>doTest(ktFilePath, aptMode = false)<EOL><INDENT>}"}
{"signature": "val friendLibraries =", "body": "emptyList<String>()<EOL>"}
{"signature": "if (i > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>sb.appendLine()<EOL><INDENT><INDENT>}"}
{"signature": "val D =", "body": "<NUM_LIT>e<NUM_LIT> <EOL>"}
{"signature": "val jdkKind =", "body": "JvmEnvironmentConfigurator.extractJdkKind(testModule.directives)<EOL>"}
{"signature": "val jdkRelease =", "body": "get(JVMConfigurationKeys.JDK_RELEASE)<EOL>"}
{"signature": "val returnTypeWithParameter =", "body": "{ <!COMPONENT_FUNCTION_MISSING!>(b: Int): Int<!> -> <NUM_LIT> }<EOL>"}
{"signature": "val llvmGlobal =", "body": "LLVMGetNamedGlobal(module, name) ?: return null<EOL>"}
{"signature": "val expectedVariance =", "body": "<NUM_LIT><EOL>"}
{"signature": "val shouldRename =", "body": "!topLevelInCrossinlineLambda && isThis<NUM_LIT>(fieldName) &&<EOL>"}
{"signature": "fun setValue(name: String, value: String) {", "body": "<EOL><INDENT><INDENT>state[normalizeKey(name)] = listOf(value)<EOL><INDENT>}"}
{"signature": "fun N() {", "body": "}"}
{"signature": "if (significand.length > MAX_SIGNIFICANT_LENGTH) {", "body": "<EOL><INDENT><INDENT><INDENT>abandonedNumber = significand.substring(MAX_SIGNIFICANT_LENGTH)<EOL><INDENT><INDENT><INDENT>significand = significand.substring(<NUM_LIT>, MAX_SIGNIFICANT_LENGTH)<EOL><INDENT><INDENT>}"}
{"signature": "var jumpFlowInfo =", "body": "resultFlowInfo<EOL>"}
{"signature": "val isImportOptional =", "body": "moduleKind == ModuleKind.ES<EOL>"}
{"signature": "if (!branch.isUnconditional()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val condition = evaluateExpression(branch.condition)<EOL><INDENT><INDENT><INDENT><INDENT>functionGenerationContext.condBr(condition, bbCase, bbNext ?: whenEmittingContext.bbExit.value)<EOL><INDENT><INDENT><INDENT><INDENT>functionGenerationContext.positionAtEnd(bbCase!!)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasExtension(JvmProtoBuf.methodSignature)) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(JvmProtoBuf.methodSignature).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val moduleFragmentToExternalName =", "body": "ModuleFragmentToExternalName(emptyMap())<EOL>"}
{"signature": "fun extendsKClassifier() {", "body": "<EOL><INDENT><INDENT>assertStaticAndRuntimeTypeIs<KClassifier>(KClassTest::class)<EOL><INDENT>}"}
{"signature": "if (member.typeParameter != null || !sourceSet.containsType(member.name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>failedToResolveUnionTypes += unionType.name<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor.valueParameters.isEmpty()) {", "body": "<EOL><INDENT>descriptor.name.asString()<EOL>}"}
{"signature": "val psi<NUM_LIT>IrContext =", "body": "preparePsi<NUM_LIT>Ir(depsDescriptors, errorPolicy, symbolTable, partialLinkageEnabled)<EOL>"}
{"signature": "val shouldEnhanceArguments =", "body": "!isSuperTypesEnhancement || !isBoundOfRawType<EOL>"}
{"signature": "if (context.config.useFir) {", "body": "<EOL><INDENT><INDENT><INDENT>processClassFir()<EOL><INDENT><INDENT>}"}
{"signature": "if (fatFrameworkTaskName in tasks.names) {", "body": "<EOL><INDENT><INDENT>tasks.named(fatFrameworkTaskName, FatFrameworkTask::class.java)<EOL><INDENT>}"}
{"signature": "val setIsSuccessful =", "body": "setCallReference?.isError == false<EOL>"}
{"signature": "fun initialize(<EOL><INDENT><INDENT>index: JvmDependenciesIndex,<EOL><INDENT><INDENT>packagePartProviders: List<JvmPackagePartProvider>,<EOL><INDENT><INDENT>singleJavaFileRootsIndex: SingleJavaFileRootsIndex,<EOL><INDENT><INDENT>usePsiClassFilesReading: Boolean<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>this.index = index<EOL><INDENT><INDENT>this.packagePartProviders = packagePartProviders<EOL><INDENT><INDENT>this.singleJavaFileRootsIndex = singleJavaFileRootsIndex<EOL><INDENT><INDENT>this.usePsiClassFilesReading = usePsiClassFilesReading<EOL><INDENT>}"}
{"signature": "fun getMessenger(superClass: NativePtr): COpaquePointer?<EOL><EOL>@PublishedApi<EOL>@TypedIntrinsic(IntrinsicType.OBJC_GET_MESSENGER_STRET)<EOL>internal external fun getMessengerStret(superClass: NativePtr): COpaquePointer?<EOL><EOL><EOL>internal class ObjCWeakReferenceImpl : kotlin.native.ref.WeakReferenceImpl() {", "body": "<EOL><INDENT>@GCUnsafeCall(<STR_LIT>)<EOL><INDENT>external override fun get(): Any?<EOL>}"}
{"signature": "val objCProtocolNames =", "body": "GlobalNameMapping<ClassDescriptor, String>()<EOL>"}
{"signature": "fun testFullForm() {", "body": "<EOL><INDENT><INDENT>val argParser = ArgParser(<STR_LIT>)<EOL><INDENT><INDENT>val output by argParser.option(ArgType.String, shortName = <STR_LIT>, description = <STR_LIT>)<EOL><INDENT><INDENT>val input by argParser.option(ArgType.String, shortName = <STR_LIT>, description = <STR_LIT>)<EOL><INDENT><INDENT>argParser.parse(arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, output)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, input)<EOL><INDENT>}"}
{"signature": "val TO_LONG =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val applyAndroidResourceValueChange =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val lockFile =", "body": "yarnRootExtension.lockFileDirectory.resolve(yarnRootExtension.lockFileName)<EOL>"}
{"signature": "val inlineScopesGenerator =", "body": "inliningContext.inlineScopesGenerator<EOL>"}
{"signature": "val nextIndex =", "body": "matchNext()<EOL>"}
{"signature": "fun place() {", "body": "content() }"}
{"signature": "val diagnostic =", "body": "<EOL><INDENT><INDENT><INDENT>if (reportWarning)<EOL>"}
{"signature": "var foo_ =", "body": "<NUM_LIT><EOL>"}
{"signature": "var valueParameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val unwrappedParameter =", "body": "unwrappedFunction.symbol.valueParameterSymbols[originalIndex]<EOL>"}
{"signature": "if (analysisGoal == AnalysisGoal.ComputeInitializedAfterCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!node.symbol.isStaticFieldInitializer)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>initializedContainers.afterCall[irDeclaration as IrFunction] = returnTargetsInitializedFiles[irDeclaration.symbol] ?: callerResult<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (l.argument !is FirSmartCastExpression && r.argument !is FirSmartCastExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "while (index < length) {", "body": "<EOL><INDENT><INDENT>chars[index] = nativeBytes[index].toInt().toChar()<EOL><INDENT><INDENT>++index<EOL><INDENT>}"}
{"signature": "val tokenType =", "body": "it.tokenType<EOL>"}
{"signature": "val RANGE_UNTIL =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val valueClassInExternalDiagnostic =", "body": "<EOL><INDENT><INDENT><INDENT>if (context.languageVersionSettings.supportsFeature(LanguageFeature.JsAllowValueClassesInExternals))<EOL>"}
{"signature": "val builderSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "val functionsFromAnyByName =", "body": "generatedFunctionsFromAny.associateBy { it.name }<EOL>"}
{"signature": "import <!UNRESOLVED_REFERENCE!>some<!>.", "body": "<!SYNTAX!><!><EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>null != platformNN<!>) {", "body": "}"}
{"signature": "when (level) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DCELogLevel.ERROR -> CompilerMessageSeverity.ERROR<EOL><INDENT><INDENT><INDENT><INDENT>DCELogLevel.WARN -> CompilerMessageSeverity.WARNING<EOL><INDENT><INDENT><INDENT><INDENT>DCELogLevel.INFO -> CompilerMessageSeverity.LOGGING<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fakeOverrideFunctions =", "body": "mutableListOf<TestFunction>()<EOL>"}
{"signature": "if (remoteDependencies.isEmpty()) {", "body": "return }"}
{"signature": "fun visitInnerClass(name: String, outerName: String?, innerName: String?, access: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>innerClassInfos[name] = InnerClassInfo(name, outerName, innerName, access)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val javaClassifier =", "body": "javaScope.getContributedClassifier(name, location)<EOL>"}
{"signature": "val existingSessions =", "body": "output.findAllStringsPrefixed(EXISTING_SESSION_FILE_PREFIX)<EOL>"}
{"signature": "if (lineCount == position.line && offsetInLine == position.offset) {", "body": "<EOL><INDENT><INDENT><INDENT>return i<EOL><INDENT><INDENT>}"}
{"signature": "if (childRange.endOffset <= rangeInsideHost.startOffset) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_KLIBS_KT<NUM_LIT>_WORKAROUND_ENABLED =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "if (other is BoxedBasicValue) {", "body": "<EOL><INDENT><INDENT><INDENT>onMergeFail(other)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(x: (String) -> Int) {", "body": "}<EOL><EOL>fun bar(x: String): Int {<!NO_RETURN_IN_FUNCTION_WITH_BLOCK_BODY!>}"}
{"signature": "if (mayResolveGetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.resolveAccessors(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>mayResolveSetterBody = mayResolveSetter,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>shouldResolveEverything,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property.replaceBodyResolveState(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (mayResolveSetter) FirPropertyBodyResolveState.ALL_BODIES_RESOLVED<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else FirPropertyBodyResolveState.INITIALIZER_AND_GETTER_RESOLVED<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val containingClassIsExpectClass =", "body": "hasExpectModifier() || this@PsiRawFirBuilder.context.containerIsExpect<EOL>"}
{"signature": "fun objCExportTest() {", "body": "<EOL><INDENT><INDENT>objCExportTestImpl(<STR_LIT>, emptyList(), emptyList(), false, true)<EOL><INDENT>}"}
{"signature": "fun foo(a: List<*>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (!library.headerExclusionPolicy.excludeAll(headerId)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>included.add(value)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(block: () -> Unit) {", "body": "<EOL><INDENT><!USAGE_IS_NOT_INLINABLE_WARNING!>block<!>.call()<EOL>}"}
{"signature": "val prototypeRef =", "body": "JsAstUtils.prototypeOf(context.getInnerReference(containingClass))<EOL>"}
{"signature": "val oldParameters =", "body": "<EOL><INDENT><INDENT><INDENT>listOfNotNull(function.extensionReceiverParameter, function.dispatchReceiverParameter) + function.valueParameters<EOL>"}
{"signature": "val actualForExpected =", "body": "function.findActualForExpected()<EOL>"}
{"signature": "val isES<NUM_LIT> =", "body": "targetVersion == EcmaVersion.es<NUM_LIT><EOL>"}
{"signature": "val currentConstraintSetForForkPointBranch =", "body": "stackForConstraintSetFromCurrentForkPointBranch?.lastOrNull()<EOL>"}
{"signature": "val licenseReferenceRegexp =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "if (this.buildId != buildId) {", "body": "<EOL><INDENT><INDENT><INDENT>IdeaKotlinProjectCoordinates(<EOL><INDENT><INDENT><INDENT><INDENT>buildId = buildId,<EOL><INDENT><INDENT><INDENT><INDENT>projectPath = projectPath,<EOL><INDENT><INDENT><INDENT><INDENT>projectName = projectName<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "var srcStartIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val emptyFormat =", "body": "HexFormat {}<EOL>"}
{"signature": "val isFeatureEnabled =", "body": "<EOL><INDENT><INDENT><INDENT>considerExtensionReceiverFromConstrainsInLambda()<EOL>"}
{"signature": "val actualContainingClass =", "body": "context.containingDeclarations.lastOrNull()?.symbol as? FirRegularClassSymbol<EOL>"}
{"signature": "val aaFoo =", "body": "aa::foo<EOL>"}
{"signature": "fun internalOpenFun() {", "body": "}<EOL><EOL><INDENT><!INAPPLICABLE_JVM_NAME!>@JvmName(<STR_LIT>)<!><EOL><INDENT>internal abstract fun internalAbstractFun()<EOL><EOL><INDENT>@JvmName(<STR_LIT>)<EOL><INDENT>private fun privateFinalFun() {}"}
{"signature": "var currentNamespace =", "body": "<STR_LIT><EOL>"}
{"signature": "when (HostManager.host.family) {", "body": "<EOL><INDENT><INDENT><INDENT>Family.MINGW -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val constantInfo =", "body": "context.bindingContext.get(BindingContext.COMPILE_TIME_VALUE, ktInitializer)<EOL>"}
{"signature": "for (propertyParameter in getConstructorProhibitedPropertyParameters(declaration, lastClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(propertyParameter.source, FirErrors.EXPECTED_CLASS_CONSTRUCTOR_PROPERTY_PARAMETER, context)<EOL><INDENT><INDENT>}"}
{"signature": "val mapOfLetterToIndex =", "body": "listOfLetterIndexPairs.toMap()<EOL>"}
{"signature": "val existNames =", "body": "fieldNames.getOrPut(name) { LinkedList() }<EOL>"}
{"signature": "fun visitConstructorDescriptor(constructorDescriptor: ConstructorDescriptor, data: Nothing?) {", "body": "<EOL><INDENT><INDENT><INDENT>collectParents(constructorDescriptor)<EOL><INDENT><INDENT><INDENT>setHashIdAndDescriptionFor(constructorDescriptor, isPropertyAccessor = false)<EOL><INDENT><INDENT><INDENT>platformSpecificConstructor(constructorDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val homePath =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "var allowFilesWithSameNames =", "body": "false<EOL>"}
{"signature": "val valueDescColumnWidth =", "body": "valueDescriptions.values.maxOf { it.length }<EOL>"}
{"signature": "val parameterAlias =", "body": "JsScope.declareTemporaryName(parameterName.ident)<EOL>"}
{"signature": "val referencedJsClassesFromExpressions =", "body": "hashSetOf<IrClass>()<EOL>"}
{"signature": "val removedModulesInfo =", "body": "(projectInfo.modules - projStep.order.toSet()).map { setupTestStep(projStep, it) }<EOL>"}
{"signature": "fun condJump(jumpLabel: Label, v: InstructionAdapter, jumpIfFalse: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>invokeFunction(v)<EOL><INDENT><INDENT><INDENT><INDENT>v.<!UNRESOLVED_REFERENCE!>visitJumpInsn<!>(if (jumpIfFalse) <!UNRESOLVED_REFERENCE!>Opcodes<!>.IFEQ else <!UNRESOLVED_REFERENCE!>Opcodes<!>.IFNE, jumpLabel)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val MARKER_INPLACE_ARGUMENT_END =", "body": "<STR_LIT><EOL>"}
{"signature": "val containerRetention =", "body": "containerClass.getAnnotationRetention() ?: KotlinRetention.RUNTIME<EOL>"}
{"signature": "fun onUseAsTainted() {", "body": "<EOL><INDENT><INDENT><INDENT>hazard = true<EOL><INDENT><INDENT>}"}
{"signature": "if (klassSymbol.owner.isInterface) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>interfaceId--<EOL><INDENT><INDENT><INDENT><INDENT>wasmSymbol.bind(interfaceId)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val clp =", "body": "<STR_LIT><EOL>"}
{"signature": "val baseProjectsDir =", "body": "tempDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun reportWrongExportedDeclaration(kind: String) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(ErrorsJs.WRONG_EXPORTED_DECLARATION.on(declaration, kind))<EOL><INDENT><INDENT>}"}
{"signature": "val IntComparisonGenerator =", "body": "IntegerComparisonGenerator(Type.INT_TYPE)<EOL>"}
{"signature": "fun main(x: Bar<NUM_LIT><String>?) {", "body": "<EOL><INDENT>x?.value(<NUM_LIT>)<EOL><INDENT>x?.value<!UNSAFE_CALL!>.<!>invoke(<NUM_LIT>)<EOL>}"}
{"signature": "fun commonThrow(t: Throwable) {", "body": "<EOL><INDENT>throw t<EOL>}"}
{"signature": "fun visitContextReceiverList(contextReceiverList: KtContextReceiverList) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkContextReceiversAreEnabled(c.trace, languageVersionSettings, contextReceiverList)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lookupLocation =", "body": "(scope.ownerDescriptor.toSourceElement.getPsi() as? KtElement)?.let { KotlinLookupLocation(it) }<EOL>"}
{"signature": "val subjectClassSymbol =", "body": "subjectType?.toRegularClassSymbol(context.session)<EOL>"}
{"signature": "val importedSources =", "body": "linkedMapOf<String, Pair<File, String>>()<EOL>"}
{"signature": "val DIAGNOSTICS_DIRECTIVE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!(unwrappedProperty.getter?.allowsToHaveFakeOverride ?: unwrappedProperty.allowsToHaveFakeOverride)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getter = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!declaration.isFakeOverride && declaration.annotations.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>add(createSyntheticMethodForAnnotations(declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val directDependencySymbols =", "body": "match.groupValues[<NUM_LIT>].split(',').filter(String::isNotEmpty).toSet()<EOL>"}
{"signature": "if (copyTaskFromVariantName[variantName] != null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (clazz is IrLazyDeclarationBase) {", "body": "<EOL><INDENT><INDENT><INDENT>resolveOverridenSymbolsInLazyClass(clazz as Fir<NUM_LIT>IrLazyClass, resolver)<EOL><INDENT><INDENT>}"}
{"signature": "val toInlinedErasedClass =", "body": "functionParent.isInlineClass() &&<EOL>"}
{"signature": "fun add(index: Int, element: String) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException()<EOL><INDENT>}"}
{"signature": "fun bottom() {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val SHADOW_PLUGIN_VERSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val BITCODE =", "body": "org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode.BITCODE<EOL>"}
{"signature": "val kotlinAndroidExtension =", "body": "project.kotlinExtension as KotlinAndroidProjectExtension<EOL>"}
{"signature": "val innerContext =", "body": "this.contextWithPropertyMetadataCreationIntrinsified(provideDelegateCall, propertyDescriptor, JsThisRef())<EOL>"}
{"signature": "val changedIndex =", "body": "composerIndex + <NUM_LIT><EOL>"}
{"signature": "val savedClassLoader =", "body": "URLClassLoader(arrayOf(tmpdir.toURI().toURL()), aClass!!.classLoader)<EOL>"}
{"signature": "for ((key, values) in entrySet().reversedSet()) {", "body": "<EOL><INDENT><INDENT><INDENT>newMap.putValues(key, values.reversed())<EOL><INDENT><INDENT>}"}
{"signature": "val REQUESTED_VERSION_BY_INCOMING_DEPENDENCY_REGEX =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val deserializedModuleFragments =", "body": "deserializedModuleFragmentsToLib.keys.toList()<EOL>"}
{"signature": "if (current in descriptors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return descriptors.getValue(current)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (x in list) {", "body": "...body...}"}
{"signature": "val resultingArgument =", "body": "<EOL><INDENT><INDENT><INDENT>computeNonTrivialTypeArgumentForScopeSubstitutor(typeParameterSymbol, originalTypeArgument, session, capturedTypeArgument)<EOL>"}
{"signature": "if (<!USELESS_IS_CHECK!>(x as Int) is Int<!>) {", "body": "<EOL><INDENT><INDENT>checkSubtype<Int>(x)<EOL><INDENT>}"}
{"signature": "val not =", "body": "<STR_LIT>.callableId(Boolean)<EOL>"}
{"signature": "import your.", "body": "ContainerUtil.find<EOL>"}
{"signature": "fun returnValue(returnExpression: KtExpression, returnValue: PseudoValue, subroutine: KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT>val exitPoint = getSubroutineExitPoint(subroutine) ?: return<EOL><INDENT><INDENT><INDENT>handleJumpInsideTryFinally(exitPoint)<EOL><INDENT><INDENT><INDENT>add(ReturnValueInstruction(returnExpression, currentScope, exitPoint, returnValue, subroutine))<EOL><INDENT><INDENT>}"}
{"signature": "if (fn is IrSimpleFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>return fn.sourceKey()<EOL><INDENT><INDENT>}"}
{"signature": "var colspan =", "body": "Natural(<NUM_LIT>)<EOL>"}
{"signature": "val jsToKotlinShortAdapter =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "if (modified) {", "body": "<EOL><INDENT><INDENT><INDENT>registerModification()<EOL><INDENT><INDENT><INDENT>size = negativeMod(newTail - head)<EOL><INDENT><INDENT>}"}
{"signature": "var last =", "body": "iterator.next()<EOL>"}
{"signature": "fun renderUseSiteTarget(<EOL><INDENT><INDENT><INDENT>analysisSession: KtAnalysisSession,<EOL><INDENT><INDENT><INDENT>annotation: KtAnnotationApplication,<EOL><INDENT><INDENT><INDENT>owner: KtAnnotated,<EOL><INDENT><INDENT><INDENT>annotationRenderer: KtAnnotationRenderer,<EOL><INDENT><INDENT><INDENT>printer: PrettyPrinter,<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT>val useSite = annotation.useSiteTarget ?: return<EOL><INDENT><INDENT><INDENT>printer.append(useSite.renderName)<EOL><INDENT><INDENT><INDENT>printer.append(':')<EOL><INDENT><INDENT>}"}
{"signature": "val tpIndex =", "body": "inner.index()<EOL>"}
{"signature": "val generatorCoroutineImpl =", "body": "continuation.unsafeCast<GeneratorCoroutineImpl>()<EOL>"}
{"signature": "val postProcessedXml =", "body": "output.outputString(document)<EOL>"}
{"signature": "if (fileReportSettings == null && httpReportSettings == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>DummyJpsStatisticsReportService<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val mainModuleFragment =", "body": "loadedIr.loadedFragments[mainLibraryFile] ?: notFoundIcError(<STR_LIT>, mainLibraryFile)<EOL>"}
{"signature": "if (arg == null || arg.loadOpcode != insn.opcode) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>insn = insn.next<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(a: Any, s: String) {", "body": "<EOL><INDENT>val b = foo(a, s)<EOL><INDENT>checkItIsExactlyAny(a, arrayListOf(b))<EOL><INDENT>val c = bar(a, s)<EOL><INDENT>checkItIsExactlyAny(a, arrayListOf(c))<EOL>}"}
{"signature": "var currentShouldAnnotateClass =", "body": "false<EOL>"}
{"signature": "var rootsToFilter =", "body": "emptySet<File>()<EOL>"}
{"signature": "if (wasStatic && currentArguments.isNotEmpty() && declaredTypeParameters.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>c.trace.report(TYPE_ARGUMENTS_FOR_OUTER_CLASS_WHEN_NESTED_REFERENCED.on(qualifierPart.typeArguments!!))<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFiltersPositiveNegativeGlob() {", "body": "<EOL><INDENT><INDENT>doTestFilters(Filter(listOf(<STR_LIT>), listOf(<STR_LIT>), listOf(<STR_LIT>)))<EOL><INDENT>}"}
{"signature": "val prettyPrinter =", "body": "PrettyPrinter(indentSize = <NUM_LIT>)<EOL>"}
{"signature": "val delegateInitExpr =", "body": "Translation.translateAsExpression(expression, context)<EOL>"}
{"signature": "for (i in ((logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)).reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val multiFieldValueClassReplacements =", "body": "MemoizedMultiFieldValueClassReplacements(irFactory, this)<EOL>"}
{"signature": "for (phase in lower) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>phase.invoke(phaseConfig, filePhaserState, context, irFile)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (foo is D && foo == bar) {", "body": "<EOL><INDENT><INDENT>bar.<!UNRESOLVED_REFERENCE!>d<!>()<EOL><INDENT>}"}
{"signature": "for (i in ((Int.MAX_VALUE - <NUM_LIT>) until Int.MIN_VALUE).reversed()) {", "body": "return <STR_LIT> }"}
{"signature": "import wrong.", "body": "*<EOL>"}
{"signature": "val arrayOfString =", "body": "<STR_LIT><EOL>"}
{"signature": "if (other.target is Open) {", "body": "<EOL><INDENT><INDENT><INDENT>target is Open && other.target.index == target.index<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(x: () -> Unit) {", "body": "}<EOL><EOL>fun String.id(s: String = this, vararg xs: Int): String = s<EOL><EOL>fun test() {<EOL><INDENT>foo(<STR_LIT>::id)<EOL>}"}
{"signature": "val outputsCollector =", "body": "{ x: File, y: List<File> -> println(<STR_LIT>) }<EOL>"}
{"signature": "for (catchEnterNode in nextCatch) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addEdge(node, catchEnterNode, preferredKind = kind, propagateDeadness = false)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testGSList(sl: GSList<String>) {", "body": "<EOL><INDENT>if (sl.ss[<NUM_LIT>] != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "val staticContext =", "body": "JsStaticContext(backendContext, nameGenerator, globalNameScope, mode)<EOL>"}
{"signature": "val temporaryTraceAndCache =", "body": "<EOL><INDENT><INDENT><INDENT>TemporaryTraceAndCache.create(c, <STR_LIT>, newExpression)<EOL>"}
{"signature": "val ExperimentalForeignApi =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val typeMismatch<NUM_LIT> =", "body": "diagnostics[<NUM_LIT>]<EOL>"}
{"signature": "for (i in (<NUM_LIT>L until <NUM_LIT>L).reversed()) {", "body": "<EOL><INDENT><INDENT>sumL = sumL * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "for ((k, v) in this@copyValueIfNeeded.entries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(k?.copyValueIfNeeded(), v?.copyValueIfNeeded())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val previousVersionIntArray =", "body": "BinaryVersion.parseVersionArray(previousValue)<EOL>"}
{"signature": "val lastQualifiedAccess =", "body": "context.callsOrAssignments.lastOrNull() as? FirQualifiedAccessExpression<EOL>"}
{"signature": "var curBytePos =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (classOrObject is KtClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkClassHeader(classOrObject)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val scopeOwnerElement = scopeOwnerSymbol.owner) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrDeclarationParent -> scopeOwnerElement<EOL><INDENT><INDENT><INDENT>!is IrDeclaration -> throw AssertionError(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> scopeOwnerElement.parent<EOL><INDENT><INDENT>}"}
{"signature": "if (strictA == strictB) {", "body": "<EOL><INDENT><INDENT><INDENT>val rA = a.render()<EOL><INDENT><INDENT><INDENT>val rB = b.render()<EOL><INDENT><INDENT><INDENT>rA.compareTo(rB)<EOL><INDENT><INDENT>}"}
{"signature": "var propertyWithAnnotations =", "body": "genericCall<SCHEME>()<EOL>"}
{"signature": "if (it == Modality.OPEN && containingClass?.classKind == ClassKind.INTERFACE && !(declaration.hasOwnBodyOrAccessorBody() || status.isExpect)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Modality.ABSTRACT<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val malformedMetadata =", "body": "<EOL><INDENT><INDENT><INDENT>Metadata(KotlinClassMetadata.CLASS_KIND, CompilerMetadataVersion.INSTANCE.toArray(), arrayOf(malformedInput))<EOL>"}
{"signature": "val parcelParameter =", "body": "addValueParameter(<STR_LIT>, androidSymbols.androidOsParcel.defaultType)<EOL>"}
{"signature": "if (existingTask != null) {", "body": "<EOL><INDENT><INDENT>project.reportDiagnostic(KotlinToolingDiagnostics.ResourcePublishedMoreThanOncePerTarget(targetNamePrefix))<EOL><INDENT><INDENT>return existingTask<EOL><INDENT>}"}
{"signature": "val INVALID_OBJC_NAME =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "if (psiType is PsiWildcardType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>psiType.bound?.let(::recursiveAnnotator)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (cls in classes.keys) {", "body": "<EOL><INDENT><INDENT><INDENT>addClassPostDeclarations(cls, visited, statements)<EOL><INDENT><INDENT>}"}
{"signature": "val windowed<NUM_LIT> =", "body": "data.windowed(Int.MAX_VALUE, Int.MAX_VALUE, partialWindows)<EOL>"}
{"signature": "val DEFAULT_VERSION =", "body": "<NUM_LIT><EOL>"}
{"signature": "val objCObjectFqName =", "body": "NativeStandardInteropNames.objCObjectClassId.asSingleFqName()<EOL>"}
{"signature": "val superSubstitutor =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(superType as? ConeLookupTagBasedType)?.let { createSubstitutionForSupertype(it, session) } ?: ConeSubstitutor.Empty<EOL>"}
{"signature": "if (falseWhenString(x) && true) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val aDirTarget =", "body": "root.resolve(<STR_LIT>)<EOL>"}
{"signature": "if (Files.isDirectory(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Files.createDirectories(outputPath.resolve(it.normalizedToBeRelative))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun refresh(asynchronous: Boolean) {", "body": "}<EOL><INDENT>override fun refreshAndFindFileByPath(path: String): VirtualFile? {<EOL><INDENT><INDENT>return findFileByPath(path)<EOL><INDENT>}"}
{"signature": "fun printStackTraceOnRuntimeException() {", "body": "<EOL><INDENT><INDENT>assertPrintStackTrace(RuntimeException(<STR_LIT>))<EOL><INDENT><INDENT>assertPrintStackTraceStream(RuntimeException(<STR_LIT>))<EOL><INDENT><INDENT>assertToStringWithTrace(RuntimeException(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "if (value == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return if (value.toRawBits() == <NUM_LIT>L) <STR_LIT> else <STR_LIT><EOL><INDENT>}"}
{"signature": "val explicitlyDesignatedInitializers =", "body": "this.methods.filter { it.isExplicitlyDesignatedInitializer && !it.isClass }<EOL>"}
{"signature": "if (!hasAnnotationsToResolve()) {", "body": "<EOL><INDENT><INDENT><INDENT>return (AnnotationTransformer(mutableMapOf()))<EOL><INDENT><INDENT>}"}
{"signature": "val cPointerName =", "body": "<STR_LIT><EOL>"}
{"signature": "val overriddenFromInterface =", "body": "findImplementationFromInterface(descriptor) ?: return false<EOL>"}
{"signature": "val serializerFactory =", "body": "IrParcelSerializerFactory(androidSymbols, parcelizeAnnotations)<EOL>"}
{"signature": "if (shouldRenderDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>resultBuilder.append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderer.renderElementAsString(elementToResolve)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val innerTestClasses =", "body": "testClassModel.innerTestClasses<EOL>"}
{"signature": "for (i in typeArguments.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>val typeArgument = typeArguments[i]<EOL><INDENT><INDENT><INDENT>irCall.putTypeArgument(i, typeArgument.type.toIrType())<EOL><INDENT><INDENT>}"}
{"signature": "val unboundMemberReflect =", "body": "C::class.memberProperties.single { it.name == <STR_LIT> } as KMutableProperty<NUM_LIT><EOL>"}
{"signature": "if (targetSymbol == inlineFunction.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.RECURSION_IN_INLINE, targetSymbol, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val itT =", "body": "iterator()<EOL>"}
{"signature": "val callSites =", "body": "callGraph.directEdges[function]!!.callSites<EOL>"}
{"signature": "val kTypeImpl =", "body": "internalClass(<STR_LIT>)<EOL>"}
{"signature": "fun resolveScriptTypes(firScript: FirScript) {", "body": "<EOL><INDENT><INDENT>firScript.transformAnnotations(transformer, null)<EOL><INDENT><INDENT>firScript.transformContextReceivers(transformer, null)<EOL><INDENT>}"}
{"signature": "package wrong<EOL>.", "body": ""}
{"signature": "if (valueParameters.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(primaryConstructor.source, FirErrors.DATA_CLASS_WITHOUT_PARAMETERS, context)<EOL><INDENT><INDENT>}"}
{"signature": "val orderedSourceContentSuppliers =", "body": "mutableListOf<Supplier<Reader?>>()<EOL>"}
{"signature": "val GENERIC_ARGUMENT =", "body": "TypeMappingMode()<EOL>"}
{"signature": "val defaultImpl =", "body": "createDefaultImpl(function)<EOL>"}
{"signature": "if (fromType.eraseToClassOrInterface.isSubclassOf(expression.type.eraseToClassOrInterface)) {", "body": "<EOL><INDENT><INDENT><INDENT>return narrowType(fromType, expression.type, expression.argument)<EOL><INDENT><INDENT>}"}
{"signature": "fun longGlobal_setField() {", "body": "longGlobal = <NUM_LIT> }"}
{"signature": "val LOCKS =", "body": "<STR_LIT><EOL>"}
{"signature": "val firText =", "body": "testDataFileK<NUM_LIT>readText().trimEnd()<EOL>"}
{"signature": "val ATOMIC_ARRAY_TYPES =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val ENUM_WHEN_TRACKER =", "body": "CompilerConfigurationKey.create<EnumWhenTracker>(<STR_LIT>)<EOL>"}
{"signature": "val yielder =", "body": "select(x where { it%<NUM_LIT>==<NUM_LIT> }, { it.toString() })<EOL>"}
{"signature": "val diagnosticsFromPartiallyResolvedCall =", "body": "extractDiagnosticsFromPartiallyResolvedCall(resolvedCallAtom)<EOL>"}
{"signature": "val regularDelimiter =", "body": "<STR_LIT><EOL>"}
{"signature": "fun assertFailEquals(expected: () -> Unit, actual: () -> Unit) {", "body": "<EOL><INDENT><INDENT>val expectedFail = assertFails(expected)<EOL><INDENT><INDENT>val actualFail = assertFails(actual)<EOL><INDENT><INDENT><INDENT><INDENT>assertTypeEquals(expectedFail, actualFail)<EOL><INDENT>}"}
{"signature": "if (!isVisible(declaration, callInfo, candidate.dispatchReceiver, skipCheckForContainingClassVisibility = true)) {", "body": "<EOL><INDENT><INDENT><INDENT>candidate.dispatchReceiver = dispatchReceiverWithoutSmartCastType<EOL><INDENT><INDENT>}"}
{"signature": "val transform =", "body": "transform(Array(<NUM_LIT>) { BooleanArray(<NUM_LIT>) })<EOL>"}
{"signature": "val expectedModuleName =", "body": "<STR_LIT><EOL>"}
{"signature": "val INDIVIDUAL_DIAGNOSTIC =", "body": "<STR_LIT><STR_LIT>.*?<STR_LIT>.*?<STR_LIT><STR_LIT><EOL>"}
{"signature": "else if (delegatedConstructorCall.isThis) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (a == null && platformN == a) {", "body": "}"}
{"signature": "val headerPathToId =", "body": "mutableMapOf<String, HeaderId>()<EOL>"}
{"signature": "if (severity != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>severityMap[severity] = enabled<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val someVal =", "body": "<expr>Array<String></expr>::class.java<EOL>"}
{"signature": "fun printAll(vararg values: Any?) {", "body": "}<EOL><EOL>fun main() {<EOL><INDENT>var a: ReadonlyArray<String> = arrayOf(<STR_LIT>)<EOL><INDENT>printAll(values = a)<EOL>}"}
{"signature": "fun checkThroughWeakRef() {", "body": "<EOL><INDENT><INDENT>checkThroughWeakRef(checkWeakRefBeforeReset = false)<EOL><INDENT>}"}
{"signature": "val newFieldName =", "body": "if (shouldRename) addUniqueField(fieldName + INLINE_FUN_THIS_<NUM_LIT>_SUFFIX) else fieldName<EOL>"}
{"signature": "var exceptionWasThrown =", "body": "false<EOL>"}
{"signature": "if (<STR_LIT> in rootProject.tasks.names) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dependsOn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasErrorType) {", "body": "<EOL><INDENT><INDENT>return ErrorUtils.createErrorType(ErrorTypeKind.INTERSECTION_OF_ERROR_TYPES, types.toString())<EOL><INDENT>}"}
{"signature": "val completeWriter =", "body": "System.out.writer()"}
{"signature": "if (resolvedCall.shouldBeSubstituteWithStubTypes()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolvedCall.setResolvedCallSubstitutor(oldSubstitutor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fake =", "body": "!functionHandle.isDeclaration<EOL>"}
{"signature": "val selfName =", "body": "this.name ?: return null<EOL>"}
{"signature": "fun useOverloaded() {", "body": "<EOL><INDENT>overloaded(<STR_LIT>)<EOL>}"}
{"signature": "if (classPath.isNotEmpty()) {", "body": "<EOL><EOL><INDENT><INDENT><INDENT>val actualClasspath = environment.configuration.jvmClasspathRoots<EOL><EOL><INDENT><INDENT><INDENT>TestCase.assertTrue(<STR_LIT>, actualClasspath.containsAll(classPath))<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_STDLIB_JDK<NUM_LIT>_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun buildRefCastNullStatic(toType: WasmSymbolReadOnly<WasmTypeDeclaration>, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.REF_CAST_NULL, location, WasmImmediate.HeapType(WasmHeapType.Type(toType)))<EOL><INDENT>}"}
{"signature": "else if (descriptor is TypeParameterDescriptor && descriptor.isReified) {", "body": "<EOL><INDENT><INDENT><INDENT>captureIfNeed(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (superName.isCoroutineSuperClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>inliningContext.isContinuation = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val byReceiver =", "body": "byName[receiverFqName] ?: return null<EOL>"}
{"signature": "if (container is FileSignature) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>file = PathUtil.getFileName(container.fileName).takeIf(String::isNotEmpty) ?: UNKNOWN_FILE<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>it.inner.render()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is IrSimpleFunction && declaration.getJsNameOrKotlinName().asString() == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.enqueue(declaration, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val optionalAnnotations =", "body": "mutableListOf<ClassDescriptor>()<EOL>"}
{"signature": "val otherBooleanOptions =", "body": "option.substring(<NUM_LIT>)<EOL>"}
{"signature": "val writableTypeInfoValue =", "body": "buildWritableTypeInfoValue(convertToRetained = convertToRetained.toConstPointer())<EOL>"}
{"signature": "val firstCandidate =", "body": "firstReference?.candidate<EOL>"}
{"signature": "val captures =", "body": "mutableListOf<IrValueDeclaration>()<EOL>"}
{"signature": "if (--counter == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>_dispose(holder!!)<EOL><INDENT><INDENT><INDENT><INDENT>holder = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val currentTryScope =", "body": "tryScopes[index]<EOL>"}
{"signature": "val arraySet =", "body": "arrays.associateWith { lookup.findMemberFunction(it, Name.identifier(<STR_LIT>))!! }<EOL>"}
{"signature": "val innerCtx =", "body": "this.newDeclaration(descriptor).translateAndAliasParameters(descriptor, functionObject.parameters)<EOL>"}
{"signature": "val extraLanguageFeatures =", "body": "specificFeaturesForTests() + initialLanguageFeatures<EOL>"}
{"signature": "if (declaration is FirRegularClass && declaration.superTypeRefs.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>checkInconsistentTypeParameters(listOf(Pair(null, declaration.symbol)), context, reporter, declaration.source, true)<EOL><INDENT><INDENT>}"}
{"signature": "if (NSThread.isMainThread()) {", "body": "<EOL><INDENT><INDENT>invokerArg!!.callContinuation<NUM_LIT><T<NUM_LIT>, T<NUM_LIT>>()<EOL><INDENT>}"}
{"signature": "val mainKtsJar =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "fun writeValue(output: DataOutput, value: Long) {", "body": "<EOL><INDENT><INDENT>output.writeLong(value)<EOL><INDENT>}"}
{"signature": "if (position == TypeComponentPosition.FLEXIBLE_LOWER && readOnlyId != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return readOnlyId.toLookupTag()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testCheckSmartcast(x: Any?) {", "body": "<EOL><INDENT>check(x is String)<EOL><INDENT>x.length<EOL>}"}
{"signature": "for ((p, f) in createValueParameters.zip(argumentToPropertiesMap.values)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>+irSetField(irGet(instanceVal), f, irGet(p))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val smap =", "body": "it.value.sortedByDescending(CommonSMAPTestUtil.SMAPAndFile::outputFile).mapNotNull(CommonSMAPTestUtil.SMAPAndFile::smap).joinToString(<STR_LIT>)<EOL>"}
{"signature": "for (check in checks) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!check.isApplicable(functionDescriptor)) continue<EOL><INDENT><INDENT><INDENT>return check.checkAll(functionDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val tickerChannel =", "body": "ticker(delayMillis = <NUM_LIT>, initialDelayMillis = <NUM_LIT>)"}
{"signature": "val argumentValues =", "body": "getArraySetterArguments(rhsDeferredValue, setResolvedCall)<EOL>"}
{"signature": "val CORNER_RU =", "body": "<STR_LIT><EOL>"}
{"signature": "var callIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i: CharSequence in a<NUM_LIT>foo()) {", "body": "}"}
{"signature": "fun testNullable(x: NX?, y: NY?) {", "body": "<EOL><INDENT>val xs = listOf<Any?>(x)<EOL><INDENT>val ys = listOf<Any?>(y)<EOL><INDENT>if (xs.contains(y)) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] == ys[<NUM_LIT>]) throw AssertionError()<EOL><INDENT>if (xs[<NUM_LIT>] === ys[<NUM_LIT>]) throw AssertionError()<EOL>}"}
{"signature": "for (upperBound in it.upperBounds) {", "body": "<EOL><INDENT><INDENT><INDENT>copy.addUpperBound(upperBound)<EOL><INDENT><INDENT>}"}
{"signature": "fun writeValue(v: InstructionAdapter) {", "body": "<EOL><INDENT><INDENT>throwError()<EOL><INDENT>}"}
{"signature": "var hasReturn =", "body": "false<EOL>"}
{"signature": "val doWhileLoopBody =", "body": "statement.body as? IrComposite ?: return null<EOL>"}
{"signature": "val providerModule =", "body": "ProjectStructureProvider.getModule(mainFile.project, mainFile, contextualModule = null)<EOL>"}
{"signature": "if (Thread.currentThread().name == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw ProcessCanceledException()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val superCtorArgTypes =", "body": "mutableListOf<Type>()<EOL>"}
{"signature": "val rootResolver =", "body": "npmResolutionManager.parameters.resolution.get()<EOL>"}
{"signature": "if (!marked[distNode.id] && !tempBitSet.isEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>marked.set(distNode.id)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>front[frontSize++] = distNode.id<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val totalMaximum =", "body": "usedMemory.maxOrNull()!!<EOL>"}
{"signature": "val candidateHasExtensionReceiver =", "body": "fir.receiverParameter != null<EOL>"}
{"signature": "if (hasGetter()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getter.hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val charSerializer =", "body": "<STR_LIT><EOL>"}
{"signature": "fun getTypeParameters(): Array<PsiTypeParameter><EOL><INDENT>abstract override fun hasTypeParameters(): Boolean<EOL><INDENT>abstract override fun getTypeParameterList(): PsiTypeParameterList?<EOL><EOL><INDENT>private class SymbolLightThrowsReferencesListBuilder(<EOL><INDENT><INDENT>private val parentMethod: PsiMethod<EOL><INDENT>) : KotlinLightReferenceListBuilder(parentMethod.manager, parentMethod.language, PsiReferenceList.Role.THROWS_LIST) {", "body": "<EOL><INDENT><INDENT>override fun getParent(): PsiElement = parentMethod<EOL><EOL><INDENT><INDENT>override fun getContainingFile(): PsiFile = parentMethod.containingFile<EOL><INDENT>}"}
{"signature": "fun beforeWritingRanges(writer: FileWriter) {", "body": "}<EOL><INDENT>override fun afterWritingRanges(writer: FileWriter) {}"}
{"signature": "fun circularCauseStackTrace() {", "body": "<EOL><INDENT><INDENT>val e<NUM_LIT> = Exception(<STR_LIT>)<EOL><INDENT><INDENT>val e<NUM_LIT> = Error(<STR_LIT>, e<NUM_LIT>)<EOL><INDENT><INDENT>e<NUM_LIT>initCause(e<NUM_LIT>)<EOL><INDENT><INDENT>assertSame(e<NUM_LIT>, e<NUM_LIT>cause)<EOL><INDENT><INDENT>assertSame(e<NUM_LIT>, e<NUM_LIT>cause)<EOL><EOL><INDENT><INDENT>val trace = e<NUM_LIT>stackTraceToString()<EOL><INDENT><INDENT>assertTrue(<STR_LIT> in trace, trace)<EOL><INDENT>}"}
{"signature": "var containsNonSubstitutedArguments =", "body": "false<EOL>"}
{"signature": "when (foo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is String -> print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>is Int -> print(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>else -> print(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val oldSigs =", "body": "signaturesMap.filterValues { it.oldOnly }.keys<EOL>"}
{"signature": "if (property.isVar && property.setter.isNotExplicit) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(property.source, FirErrors.PROPERTY_MUST_HAVE_SETTER, context)<EOL><INDENT><INDENT>}"}
{"signature": "if (kotlinLogger.isDebugEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>kotlinLogger.debug(message())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var maxKey =", "body": "keyFun(maxVal)<EOL>"}
{"signature": "fun checkFoo(x: IFoo<in T>) {", "body": "}<EOL><INDENT>fun checkBar<NUM_LIT>(x: IBar<NUM_LIT><in T>) {}"}
{"signature": "val atomicArrayType =", "body": "atomicSymbols.getAtomicArrayClassByValueType(receiverValueType).defaultType<EOL>"}
{"signature": "val outJar =", "body": "Files.createTempFile(<STR_LIT>, <STR_LIT>).toFile()<EOL>"}
{"signature": "if (owner in usefulDeclarations || context.keeper.shouldKeep(owner)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>setOf(this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (generateWrapper) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>task.dependsOn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!mapper.shouldBeExposed(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return translateUnexposedClassAsUnavailableStub(descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val hasSetter =", "body": "setter != null<EOL>"}
{"signature": "if (!valueIsInitialized()) {", "body": "<EOL><INDENT><INDENT><INDENT>parsedValue = descriptor.type.convert(stringValue, descriptor.fullName!!)<EOL><INDENT><INDENT><INDENT>valueOrigin = ArgParser.ValueOrigin.SET_BY_USER<EOL><INDENT><INDENT>}"}
{"signature": "fun visitContractDescriptionOwner(contractDescriptionOwner: FirContractDescriptionOwner, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitContractDescriptionOwner(contractDescriptionOwner)<EOL><INDENT>}"}
{"signature": "val scriptInstance =", "body": "kClass.java.constructors.first().newInstance()<EOL>"}
{"signature": "val dummyExpressionFactory =", "body": "DummyExpressionFactory(psiFactory)<EOL>"}
{"signature": "val mappedArguments =", "body": "typeParameters.zip(typeArguments).toMap()<EOL>"}
{"signature": "when (reified) {", "body": "}"}
{"signature": "when (type.sort) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Type.OBJECT -> if (STRING_BUILDER_OBJECT_APPEND_ARG_TYPES.contains(type)) type else AsmTypes.OBJECT_TYPE<EOL><INDENT><INDENT><INDENT><INDENT>Type.ARRAY -> AsmTypes.OBJECT_TYPE<EOL><INDENT><INDENT><INDENT><INDENT>Type.BYTE, Type.SHORT -> Type.INT_TYPE<EOL><INDENT><INDENT><INDENT><INDENT>else -> type<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ADDITIONAL_JAVAC_ARGS_FOR_<NUM_LIT>  =", "body": "listOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val aValue =", "body": "x()<EOL>"}
{"signature": "fun warn() {", "body": "}<EOL><EOL>@Deprecated(<STR_LIT>, level = DeprecationLevel.ERROR)<EOL>actual fun error() {}"}
{"signature": "if (existingDistance < dist) {", "body": "<EOL><INDENT><INDENT><INDENT>store(index, currentEntry)<EOL><INDENT><INDENT><INDENT>currentEntry = existingEntry<EOL><INDENT><INDENT><INDENT>dist = existingDistance<EOL><INDENT><INDENT>}"}
{"signature": "if (j == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (i == <NUM_LIT>) continue@outer else continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val serializedKlibFingerprint =", "body": "manifestLines.singleOrNull { it.startsWith(<STR_LIT>) }<EOL>"}
{"signature": "val TIMES<INDENT><INDENT><INDENT><INDENT> =", "body": "<STR_LIT><EOL>"}
{"signature": "fun assertFalse(value: Boolean, message: (() -> String)?) {", "body": "<EOL><INDENT><INDENT>JUnit<NUM_LIT>PlatformAssertions.assertFalse(value, message)<EOL><INDENT>}"}
{"signature": "val pos_patterns =", "body": "arrayOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "fun serialize(stub: KotlinScriptStub, dataStream: StubOutputStream) {", "body": "<EOL><INDENT><INDENT>dataStream.writeName(stub.getFqName().asString())<EOL><INDENT>}"}
{"signature": "val ul_<NUM_LIT>_<NUM_LIT> =", "body": "<NUM_LIT>UL..<NUM_LIT>UL<EOL>"}
{"signature": "val serializedDependencyFiles =", "body": "sourceSetDirectory.listFiles().orEmpty()<EOL>"}
{"signature": "for (key in SPECIAL_NAMES) {", "body": "<EOL><INDENT><INDENT><INDENT>assertFalse(map.containsKey(key), <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val classIsSealed =", "body": "newProto.isSealed && oldProto.isSealed<EOL>"}
{"signature": "val newClassMap =", "body": "classesForPrefixedSources(testDir, workingDir, <STR_LIT>)<EOL>"}
{"signature": "val declaredVariablesForDeclaration =", "body": "hashMapOf<Pseudocode, VariablesForDeclaration>()<EOL>"}
{"signature": "val patchedContents =", "body": "patchSourceFile(originalContents)<EOL>"}
{"signature": "if (jarPath.startsWith(':')) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>jarPath = jarPath.substring(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (visibilityKeyword != KtTokens.PRIVATE_KEYWORD) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(NON_PRIVATE_CONSTRUCTOR_IN_ENUM.on(visibilityModifier))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>..<NUM_LIT>) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "if (!alreadyCompiledSources.containsAll(forceToRecompileFiles)) {", "body": "<EOL><INDENT><INDENT><INDENT>addAll(forceToRecompileFiles)<EOL><INDENT><INDENT>}"}
{"signature": "fun testNamedDoesNotReadAutomaticWithUnrelatedNamed() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val lib = module(<STR_LIT>)<EOL><INDENT><INDENT>val unrelated = module(<STR_LIT>)<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(lib, unrelated))<EOL><INDENT>}"}
{"signature": "var lengthVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "val INTEROP_GET_POINTER_SIZE<INDENT>  =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testReverse() {", "body": "<EOL><INDENT><INDENT>val sb = StringBuilder(<STR_LIT>)<EOL><INDENT><INDENT>assertTrue(sb === sb.reverse())<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, sb.toString())<EOL><EOL><INDENT><INDENT>sb.setLength(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, sb.toString())<EOL><EOL><INDENT><INDENT>sb.setLength(<NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, sb.toString())<EOL><INDENT>}"}
{"signature": "for (overriddenDescriptor in descriptor.overriddenDescriptors) {", "body": "<EOL><INDENT><INDENT><INDENT>val (superIsHiddenFromObjC, superIsRefinedInSwift) = overriddenDescriptor.inheritsRefinedAnnotations()<EOL><INDENT><INDENT><INDENT>if (superIsHiddenFromObjC) isHiddenFromObjC = true else supersNotHiddenFromObjC.add(overriddenDescriptor)<EOL><INDENT><INDENT><INDENT>if (superIsRefinedInSwift) isRefinedInSwift = true else supersNotRefinedInSwift.add(overriddenDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val MODULE_CAPABILITY =", "body": "ModuleCapability<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "if (newValue == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>cleanNext()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun useSet() {", "body": "<!PROPERTY_AS_OPERATOR!>e[<NUM_LIT>]<!> = <NUM_LIT> }"}
{"signature": "fun exitCatchClause(catch: FirCatch) {", "body": "<EOL><INDENT><INDENT>graphBuilder.exitCatchClause(catch).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "for (branch in expression.branches) {", "body": "<EOL><INDENT><INDENT><INDENT>val condition = branch.condition<EOL><INDENT><INDENT><INDENT>if (condition is FirElseIfTrueCondition) continue<EOL><INDENT><INDENT><INDENT>checkCondition(condition, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "if (prevLeaf.elementType == TokenType.ERROR_ELEMENT || prevLeaf.treeNext?.elementType == TokenType.ERROR_ELEMENT) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "val propertyReferenceResolvedCall =", "body": "expression.callableReference.getResolvedCall(context.trace.bindingContext) ?: return<EOL>"}
{"signature": "fun foo(a: A<*, in CharSequence>) {", "body": "}<EOL>fun <T, U> coerce(t: T): U {<EOL><INDENT>val constrain: Constrain<U, *, in T>? = null<EOL><INDENT>val bind = Bind(constrain)<EOL><INDENT>return bind.upcast(t)<EOL>}"}
{"signature": "val ROOT_PACKAGE =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "val irData =", "body": "compiledIrFiles[f] ?: error(<STR_LIT>)<EOL>"}
{"signature": "val resolvedDeps =", "body": "(resolveResult as? DependenciesResolver.ResolveResult.Success)?.dependencies<EOL>"}
{"signature": "if (access and Opcodes.ACC_STATIC == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>localsAtEntry[parameterIndex++] = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nodeJsEnvironmentValue =", "body": "nodeJsEnvironment.get()<EOL>"}
{"signature": "if (eid == directEdges.edgeCount(v)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>order[index++] = v<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>stackPtr--<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val globalModificationService =", "body": "KotlinGlobalModificationService.getInstance(project)<EOL>"}
{"signature": "val invalidChars =", "body": "invalidNameChars + invalidSwiftNameChars<EOL>"}
{"signature": "if (!genericString.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return genericString<EOL><INDENT>}"}
{"signature": "val accumulators =", "body": "data.runningReduceIndexed { i, acc, e -> acc + i + e }<EOL>"}
{"signature": "val oos =", "body": "ObjectOutputStream(baos)<EOL>"}
{"signature": "fun beforeEnteringAnalysisContext() {", "body": "<EOL><INDENT><INDENT>currentAnalysisContextEnteringCount.set(currentAnalysisContextEnteringCount.get() + <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val thread =", "body": "alloc<pthread_tVar>()<EOL>"}
{"signature": "val reversedSubList =", "body": "original.asReversed().subList(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val substitutedThisParameterType =", "body": "typeVariableSubstitutor.substitute(thisParameterType, Variance.INVARIANT)<EOL>"}
{"signature": "val excludePattern =", "body": "classModel.excludePattern<EOL>"}
{"signature": "fun testOneVertexConcrete() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>graph()<EOL><INDENT><INDENT>doTest(a, setOf())<EOL><INDENT>}"}
{"signature": "if (!session.languageVersionSettings.getFlag(AnalysisFlags.metadataCompilation)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>(argument as? ErrorValue.ErrorValueWithMessage)?.message<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package increase the size of uncompressed klib up to <NUM_LIT>+MB;<EOL>.", "body": ""}
{"signature": "for (scriptDeclaration in declaration.declarations.filterIsInstance<FirRegularClass>()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>registerClassAndNestedClasses(scriptDeclaration, irScript)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun baz(a: WithNullableReference?, b: WithNullableReference) {", "body": "<EOL><INDENT>takeWithNullableReference(a!!)<INDENT> takeWithNullableReference(a)<INDENT> takeWithNullableReference(a!!)<INDENT> takeWithNullableReference(b!!)<EOL>}"}
{"signature": "val threadStateLocked =", "body": "<NUM_LIT><EOL>"}
{"signature": "val named =", "body": "map.asSequence().filter { it.key == <STR_LIT> }.single()<EOL>"}
{"signature": "val isUnsignedLong =", "body": "isIntegerConstant && hasUnsignedLongSuffix(text)<EOL>"}
{"signature": "val startedAt =", "body": "System.nanoTime()<EOL>"}
{"signature": "val delegateFieldToPropertyMap =", "body": "MultiMap<FirProperty, FirField>()<EOL>"}
{"signature": "val DOTALL =", "body": "<NUM_LIT> shl <NUM_LIT><EOL>"}
{"signature": "val SCRIPT_DEFINITIONS =", "body": "CompilerConfigurationKey.create<List<ScriptDefinition>>(<STR_LIT>)<EOL>"}
{"signature": "val literalSource =", "body": "literal.toFirSourceElement()<EOL>"}
{"signature": "if (annotated !is KtParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>report(INAPPLICABLE_PARAM_TARGET.on(annotation))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val immediateConcreteSuper =", "body": "firstSuperMethodFromKotlin(descriptor, implementation) ?: return null<EOL>"}
{"signature": "fun writeReadSimple() {", "body": "<EOL><INDENT><INDENT>val diffs = BuildDiffsStorage(listOf(getRandomDiff()))<EOL><INDENT><INDENT>BuildDiffsStorage.writeToFile(icContext, storageFile, diffs)<EOL><EOL><INDENT><INDENT>val diffsDeserialized = BuildDiffsStorage.readFromFile(storageFile, reporter = null)<EOL><INDENT><INDENT>Assert.assertEquals(diffs.toString(), diffsDeserialized.toString())<EOL><INDENT>}"}
{"signature": "if (source in symbols.signedIntegerClasses && target in symbols.unsignedIntegerClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val signedTarget = symbols.unsignedToSignedOfSameBitWidth[target]!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val widened = builder.irConvertInteger(source, signedTarget, valueToConvert)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>builder.irConvertInteger(signedTarget, target, widened)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (node == root) {", "body": "<EOL><INDENT><INDENT>root = replace<EOL><INDENT><INDENT>return<EOL><INDENT>  }"}
{"signature": "var currentSize =", "body": "<NUM_LIT><EOL>"}
{"signature": "val myMap =", "body": "MyMap<String, Int>()<EOL>"}
{"signature": "val button =", "body": "this.login<EOL>"}
{"signature": "if (!updated) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val unwrappedArgs =", "body": "argumentMapping.mapping.values.firstOrNull()?.unwrapVarargValue() ?: return emptyList()<EOL>"}
{"signature": "val snapshotProvider =", "body": "SimpleFileSnapshotProviderImpl()<EOL>"}
{"signature": "val namesFromNestedContainers =", "body": "simpleContainers<EOL>"}
{"signature": "fun invokeCliWithEmptyArguments() {", "body": "<EOL><INDENT><INDENT>val commonizer = CliCommonizer(this::class.java.classLoader)<EOL><INDENT><INDENT>commonizer.commonizeLibraries(<EOL><INDENT><INDENT><INDENT>konanHome = konanHome,<EOL><INDENT><INDENT><INDENT>inputLibraries = emptySet(),<EOL><INDENT><INDENT><INDENT>dependencyLibraries = emptySet(),<EOL><INDENT><INDENT><INDENT>outputTargets = setOf(CommonizerTarget(KonanTarget.LINUX_X<NUM_LIT>, KonanTarget.MACOS_X<NUM_LIT>)),<EOL><INDENT><INDENT><INDENT>outputDirectory = temporaryOutputDirectory.root,<EOL><INDENT><INDENT><INDENT>additionalSettings = emptyList(),<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val serviceClass =", "body": "KotlinNpmResolutionManager::class.java<EOL>"}
{"signature": "val testConfiguration =", "body": "annotation.annotationClass.findAnnotation<TestConfiguration>() ?: return@mapNotNull null<EOL>"}
{"signature": "val kotlinCompileTaskNames =", "body": "setOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "for (i in offset until valueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>call.putValueArgument(i - offset, IrGetValueImpl(startOffset, endOffset, valueParameters[i].symbol))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val specNameKey =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitErrorElement(element: PsiErrorElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>r.add(element)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun sizeAndEmptyForEmptyMap() {", "body": "<EOL><INDENT><INDENT>val data = emptyMap()<EOL><EOL><INDENT><INDENT>assertTrue(data.isEmpty())<EOL><INDENT><INDENT>assertTrue(data.none())<EOL><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, data.size)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, data.size)<EOL><INDENT>}"}
{"signature": "var sourceParameterIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (companionObject.isCompanionObject) {", "body": "<EOL><INDENT><INDENT><INDENT>val containingClass = companionObject.containingDeclaration as ClassDescriptor<EOL><INDENT><INDENT><INDENT>val javaLangClass = actualType.constructor.declarationDescriptor as? ClassDescriptor ?: return<EOL><EOL><INDENT><INDENT><INDENT>val arguments = listOf(TypeProjectionImpl(containingClass.defaultType))<EOL><INDENT><INDENT><INDENT>val expectedType = KotlinTypeFactory.simpleType(<EOL><INDENT><INDENT><INDENT><INDENT>TypeAttributes.Empty, javaLangClass.typeConstructor, arguments,<EOL><INDENT><INDENT><INDENT><INDENT>actualType.isMarkedNullable)<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.JAVA_CLASS_ON_COMPANION.on(reportOn, actualType, expectedType))<EOL><INDENT><INDENT>}"}
{"signature": "val configuration =", "body": "config.configuration<EOL>"}
{"signature": "if (falseWhenString(x) && unknownFunction(x)) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "fun test(hiddenInnerInner: Hidden.Inner.Inner) {", "body": "}<EOL><EOL><INDENT>@Suppress(<STR_LIT>) fun test(topLevelHidden: TopLevelHidden) {}"}
{"signature": "val constructorCallCopy =", "body": "element.shallowCopy()<EOL>"}
{"signature": "for (i in (MinUI + <NUM_LIT>u) downTo MinUI step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val unprocessedMacros =", "body": "names.toMutableList()<EOL>"}
{"signature": "fun main(x: ClassTypeParameterBoundWithWarnings<<!UPPER_BOUND_VIOLATED_BASED_ON_JAVA_ANNOTATIONS!>String?<!>>, y: ClassTypeParameterBoundWithWarnings<String>, a: String?, b: String) {", "body": "<EOL><INDENT>val x<NUM_LIT> = ClassTypeParameterBoundWithWarnings<<!UPPER_BOUND_VIOLATED_BASED_ON_JAVA_ANNOTATIONS!>String?<!>>()<EOL><INDENT>val y<NUM_LIT> = ClassTypeParameterBoundWithWarnings<String>()<EOL><EOL><INDENT>val x<NUM_LIT> = ClassTypeParameterBoundWithWarnings(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>a<!>)<EOL><INDENT>val y<NUM_LIT> = ClassTypeParameterBoundWithWarnings(b)<EOL><EOL><INDENT>val x<NUM_LIT>: ClassTypeParameterBoundWithWarnings<<!UPPER_BOUND_VIOLATED_BASED_ON_JAVA_ANNOTATIONS!>String?<!>> = ClassTypeParameterBoundWithWarnings()<EOL><INDENT>val y<NUM_LIT>: ClassTypeParameterBoundWithWarnings<String> = ClassTypeParameterBoundWithWarnings()<EOL>}"}
{"signature": "if (calleeReference.contextReceiverNumber == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return thisRef<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (insn<NUM_LIT>opcode == Opcodes.ALOAD) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>aLoadInsn = insn<NUM_LIT> as VarInsnNode<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val anyConstructor =", "body": "context.irBuiltIns.anyClass.constructors.first()<EOL>"}
{"signature": "val allCommonSourceFiles =", "body": "linkedSetOf<KtSourceFile>()<EOL>"}
{"signature": "for (l in list) {", "body": "<EOL><INDENT>  if (filter(l)) answer.add(l)<EOL><INDENT>}"}
{"signature": "val upperConstructor =", "body": "upperBound.typeConstructor(typeContext)<EOL>"}
{"signature": "val CONTRACT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun foo(f: (Some, String) -> Unit) {", "body": "}<EOL>fun bar(f: (Some) -> Unit) {}"}
{"signature": "fun p<NUM_LIT>Fun() {", "body": "}<EOL>fun String.p<NUM_LIT>ExtFun() {}"}
{"signature": "fun popIndent() {", "body": "<EOL><INDENT><INDENT>printer.popIndent()<EOL><INDENT>}"}
{"signature": "val scopeWithSubjectVariable =", "body": "<EOL><INDENT><INDENT><INDENT>ExpressionTypingUtils.newWritableScopeImpl(contextBeforeSubject, LexicalScopeKind.WHEN, components.overloadChecker)<EOL>"}
{"signature": "val state<NUM_LIT> =", "body": "this.state<EOL>"}
{"signature": "val hasValueParameters =", "body": "functionDescriptor == null || functionDescriptor.valueParameters.size > <NUM_LIT><EOL>"}
{"signature": "var element =", "body": "this<EOL>"}
{"signature": "val rememberComposableLambda =", "body": "ComposeCallableIds.rememberComposableLambda.asSingleFqName()<EOL>"}
{"signature": "var fileChanged =", "body": "false<EOL>"}
{"signature": "fun checkArrayList(obj: Any) {", "body": "<EOL><INDENT>assertTrue(obj is ArrayList<*>, <STR_LIT>)<EOL><INDENT>assertTrue((obj as Iterable<*>).iterator() is MutableIterator, <STR_LIT>)<EOL><INDENT>checkAbstractList(obj)<EOL>}"}
{"signature": "fun visitResolvedTypeRef(resolvedTypeRef: FirResolvedTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>super.visitResolvedTypeRef(resolvedTypeRef)<EOL><EOL><INDENT><INDENT><INDENT>handleTypeRef(resolvedTypeRef)<EOL><INDENT><INDENT>}"}
{"signature": "if (!function.hasTypeParameterListBeforeFunctionName()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendInn(typeParameterList)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val annotatedAncestorsPerRoot =", "body": "mutableMapOf<IrElement, MutableMap<IrElement, IrElement>>()<EOL>"}
{"signature": "val minorStart =", "body": "string.indexOf('.')<EOL>"}
{"signature": "if (parameter.declaresDefaultValue()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsWasm.WASM_IMPORT_EXPORT_PARAMETER_DEFAULT_VALUE.on(valueParameterDeclaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ale =", "body": "<expr>ALE<String></expr><EOL>"}
{"signature": "when (val declaration = this.source.getPsi()) {", "body": "<EOL><INDENT><INDENT>is KtDeclarationWithInitializer -> return declaration.initializer != null<EOL><INDENT><INDENT>is KtParameter -> return declaration.defaultValue != null<EOL><INDENT><INDENT>is Any -> return false<INDENT> }"}
{"signature": "fun foo(a: IntArray) {", "body": "}<EOL><INDENT>fun foo(a: Int, b: Int) {}"}
{"signature": "val errorClient =", "body": "configureClient(LogType.ERROR, progressLogger, infrastructureLogged)<EOL>"}
{"signature": "fun explicitRef() {", "body": "<EOL><INDENT>A.AA.x.hashCode()<EOL>}"}
{"signature": "val errorReporter =", "body": "JsCodeErrorReporter(argument, code, context.trace)<EOL>"}
{"signature": "val intPtrType =", "body": "LLVMIntPtrTypeInContext(llvm.llvmContext, llvmTargetData)!!<EOL>"}
{"signature": "val allowedOnMembers =", "body": "context.languageVersionSettings.supportsFeature(LanguageFeature.AllowContractsForNonOverridableMembers)<EOL>"}
{"signature": "val mainArguments =", "body": "this@JvmDefaultParameterInjector.context.multiFieldValueClassReplacements<EOL>"}
{"signature": "val conditionExitAndBreakFlows =", "body": "node.previousLiveNodes.map { it.getFlow(path) }<EOL>"}
{"signature": "if (cls != null && fn.isLocal) {", "body": "<EOL><INDENT><INDENT><INDENT>declarationContextStack.recordLocalCapture(cls)<EOL><INDENT><INDENT>}"}
{"signature": "when (checkArguments) {", "body": "<EOL><INDENT><INDENT><INDENT>CheckArgumentTypesMode.CHECK_VALUE_ARGUMENTS -><EOL><INDENT><INDENT><INDENT><INDENT>mapArguments()<EOL><INDENT><INDENT><INDENT>CheckArgumentTypesMode.CHECK_CALLABLE_TYPE -><EOL><INDENT><INDENT><INDENT><INDENT>checkExpectedCallableType()<EOL><INDENT><INDENT>}"}
{"signature": "val newBinaryAst =", "body": "newBinaryAsts[file]<EOL>"}
{"signature": "val declarationsToExport =", "body": "mutableSetOf<IrDeclaration>()<EOL>"}
{"signature": "val stdlibCoordinatesModules =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val klibAppFromHeader =", "body": "compileToLibrary(testPathApp, TestCompilationArtifact.KLIB(headerKlibLib))<EOL>"}
{"signature": "val fileWithMetadata =", "body": "readFile(virtualFile) ?: return null<EOL>"}
{"signature": "when (targetCompatibility) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> targetCompatibility.toInt()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (target.family == Family.MINGW) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>configuration.report(CompilerMessageSeverity.STRONG_WARNING, <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (propertySymbol.isVal || propertySymbol.isDelegatedProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>PsiModifier.FINAL<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun invokeOnExportedFunctionExit() {", "body": "<EOL><INDENT>@OptIn(InternalWasmApi::class)<EOL><INDENT>onExportedFunctionExit?.invoke()<EOL>}"}
{"signature": "val predefinedModuleCache =", "body": "predefinedKlibHasIcCache[canonicalPath]<EOL>"}
{"signature": "val importBlock =", "body": "JsCompositeBlock()<EOL>"}
{"signature": "val extraClassesToTranslate =", "body": "mutableSetOf<ClassDescriptor>()<EOL>"}
{"signature": "fun useInAnotherAnnotation() {", "body": "}<EOL><EOL>actual class C {<EOL><INDENT>actual annotation class Nested<EOL>}"}
{"signature": "var classifiers =", "body": "module.getPackage(classId.packageFqName).memberScope.getAllClassifiers(segments.first())<EOL>"}
{"signature": "if (typeProjectionDiff != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return typeProjectionDiff<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val deprecatedClassId =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val cinterop =", "body": "mainCompilation.cinterops.create(<STR_LIT>)<EOL>"}
{"signature": "val referencedTypeExpression =", "body": "tree.referencedTypeExpression(typeElement)<EOL>"}
{"signature": "val inheritedOverrides =", "body": "bridge.overriddenSymbols<EOL>"}
{"signature": "val useHeaders =", "body": "false<EOL>"}
{"signature": "val multiFileFacadeMd =", "body": "Class.forName(<STR_LIT>).getMetadata()<EOL>"}
{"signature": "if (descriptor.serializableAnnotationIsUseless) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.reportOnSerializableOrMetaAnnotation(descriptor, SerializationErrors.SERIALIZABLE_ANNOTATION_IGNORED)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val booleans =", "body": "(<NUM_LIT>.size).map { subject.nextBoolean() }.groupingBy { it }.eachCount()<EOL>"}
{"signature": "val outputFiles =", "body": "arrayListOf<OutputFile>(jsFile)<EOL>"}
{"signature": "val JS_IDENTIFIER =", "body": "<STR_LIT><EOL>"}
{"signature": "fun use<NUM_LIT>(fn: (A, Int) -> Unit) {", "body": "}<EOL><EOL>fun use<NUM_LIT>(fn: (Int) -> Unit) {}"}
{"signature": "fun test_<NUM_LIT>(c: C) {", "body": "<EOL><INDENT>c.x<NUM_LIT><EOL><INDENT>c.x<NUM_LIT><EOL><INDENT>c.x<NUM_LIT><EOL><INDENT>c.x<NUM_LIT><EOL>}"}
{"signature": "val effectiveExpectedType =", "body": "getEffectiveExpectedType(valueParameterDescriptor, valueArgument, context)<EOL>"}
{"signature": "val shouldCheckCacheVersions =", "body": "System.getProperty(KotlinBuilder.SKIP_CACHE_VERSION_CHECK_PROPERTY) == null<EOL>"}
{"signature": "fun addJsModuleImport(module: String) {", "body": "<EOL><INDENT><INDENT>wasmFragment.jsModuleImports += module<EOL><INDENT>}"}
{"signature": "fun writeRangeStart(elements: List<Int>, writer: FileWriter) {", "body": "}<EOL><EOL><INDENT>override fun writeRangeLength(elements: List<Int>, writer: FileWriter) {}"}
{"signature": "val superCallGenerators =", "body": "mutableListOf<(MutableList<JsStatement>) -> Unit>()<EOL>"}
{"signature": "val STABLE_TO_STRING_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val errorkAnonymousObjectExnInGenericFun =", "body": "<!INNER_CLASS_OF_GENERIC_THROWABLE_SUBCLASS_WARNING!>object<!> : Exception() {}<EOL>"}
{"signature": "val wholeBytesInLastGroup =", "body": "wholeElementsPerSet(numberOfChars, charsPerByte, byteSeparatorLength)<EOL>"}
{"signature": "for (i in (MinUB + <NUM_LIT>u).toUByte() downTo MinUB step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "var bottom =", "body": "<NUM_LIT><EOL>"}
{"signature": "val extensionFunction =", "body": "descriptor.extensionReceiverParameter != null<EOL>"}
{"signature": "when (file.getModuleIfSupportEnabled()) {", "body": "<EOL><INDENT><INDENT>is KtSourceModule -> DeclarationLocation.ProjectSources<EOL><INDENT><INDENT>is KtLibraryModule -> DeclarationLocation.LibraryClasses<EOL><INDENT><INDENT>is KtLibrarySourceModule -> DeclarationLocation.LibrarySources<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val testMessageCollector =", "body": "TestMessageCollector()<EOL>"}
{"signature": "val dest =", "body": "Paths<EOL>"}
{"signature": "if (fromSource is KotlinSourceElement) {", "body": "<EOL><INDENT><INDENT><INDENT>fromSource.psi.project<EOL><INDENT><INDENT>}"}
{"signature": "fun processPropertiesByName(name: Name, processor: (FirVariableSymbol<*>) -> Unit) {", "body": "<EOL><INDENT><INDENT>typeScope.processPropertiesByName(name, processor)<EOL><INDENT><INDENT>syntheticPropertiesScope.processPropertiesByName(name, processor)<EOL><INDENT>}"}
{"signature": "val innerExpression =", "body": "mappingConversion.convertExpression(parameterName, context.increaseIndent())<EOL>"}
{"signature": "fun useBuzz() {", "body": "<EOL><INDENT>buzz()<EOL>}"}
{"signature": "val jsCodeArg =", "body": "expression.getValueArgument(<NUM_LIT>) ?: compilationException(<STR_LIT>, expression)<EOL>"}
{"signature": "val irSamConvertedVar =", "body": "callGenerator.scope.createTemporaryVariable(irSamConvertedVarInitializer, <STR_LIT>)<EOL>"}
{"signature": "if (declaration.returnTypeRef !is FirImplicitTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>return declaration.symbol.resolvedReturnTypeRef<EOL><INDENT><INDENT>}"}
{"signature": "fun visitElement(element: IrElement) {", "body": "<EOL><INDENT><INDENT>element.acceptChildrenVoid(this)<EOL><INDENT>}"}
{"signature": "fun visitBooleanValue(value: BooleanValue, data: FirAnnotationArgumentVisitorData) {", "body": "<EOL><INDENT><INDENT>data.builder.type = ProtoBuf.Annotation.Argument.Value.Type.BOOLEAN<EOL><INDENT><INDENT>data.builder.intValue = if (value.value) <NUM_LIT> else <NUM_LIT><EOL><INDENT>}"}
{"signature": "if ((type as? KtClassType)?.expandedClassSymbol?.classKind?.isClass != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitBlock(expression: IrBlock, data: Data) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (expression !is IrInlinedFunctionBlock) return super.visitBlock(expression, data)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitBlock(expression, data.withInline(expression.isFunctionInlining()))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nonSynthesized =", "body": "candidates.filter { !it.resolvedCall.candidateDescriptor.isSynthesized }<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.constructorCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getConstructor(i), new.getConstructor(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (parameter.name != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val source = parameter.findSourceForParameterName() ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.UNSUPPORTED,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val currentSnapshot =", "body": "ClasspathSnapshot.ClasspathSnapshotFactory<EOL>"}
{"signature": "fun renderName(<EOL><INDENT><INDENT><INDENT>analysisSession: KtAnalysisSession,<EOL><INDENT><INDENT><INDENT>name: Name,<EOL><INDENT><INDENT><INDENT>owner: KtType,<EOL><INDENT><INDENT><INDENT>typeRenderer: KtTypeRenderer,<EOL><INDENT><INDENT><INDENT>printer: PrettyPrinter,<EOL><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT>printer.append(name.asString())<EOL><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>u downTo MaxUI step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val classTypeParameters =", "body": "(getMethod.containingDeclaration as ClassDescriptor).typeConstructor.parameters<EOL>"}
{"signature": "val partInternalNamesSet =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "val predicates =", "body": "mutableListOf<AbstractPredicate<*>>()<EOL>"}
{"signature": "val sanitized =", "body": "text.split('\\n')<EOL>"}
{"signature": "val childrenOfParent =", "body": "parent.getChildren(source.treeStructure)<EOL>"}
{"signature": "val projectDependencyMode =", "body": "<STR_LIT><EOL>"}
{"signature": "if (foo.bar?.buz != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>takesNullable(foo.bar?.buz)<INDENT><INDENT> takesNonNull(<!ARGUMENT_TYPE_MISMATCH!>foo.bar?.buz<!>)<INDENT> }"}
{"signature": "if (y is B.C<!WRONG_NUMBER_OF_TYPE_ARGUMENTS!><*><!>) {", "body": "}"}
{"signature": "val nameAsDeclaration =", "body": "element.nameIdentifier ?: return markElement(element)<EOL>"}
{"signature": "package some<NUM_LIT><EOL>.", "body": ""}
{"signature": "if (trace.wantsDiagnostics()) {", "body": "<EOL><INDENT><INDENT><INDENT>checkIfExpressions()<EOL><INDENT><INDENT>}"}
{"signature": "if (capabilities.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(capabilities.joinToString(<STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package bar<EOL>.", "body": ""}
{"signature": "if (currentExpressionType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.recordType(expression, substitutor.safeSubstitute(currentExpressionType.unwrap()))<EOL><INDENT><INDENT>}"}
{"signature": "fun takeByte(x: Byte) {", "body": "}<EOL><EOL>fun takeInt(x: Int) {}"}
{"signature": "while (tree.find(key) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>key = generateKey()<EOL><INDENT><INDENT>}"}
{"signature": "for (inheritorId in inheritors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.addSealedSubclassFqName(stringTable.getQualifiedClassNameIndex(inheritorId))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val staticFunctionDescriptor =", "body": "createStaticFunctionDescriptor(descriptor)<EOL>"}
{"signature": "val enumClassFir =", "body": "enumClassSymbol.fir as? FirRegularClass ?: return null<EOL>"}
{"signature": "while (i < testData.size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>testData[i].doTest(data, i * i, i)<EOL><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT>}"}
{"signature": "val gradleProfilerDir =", "body": "workingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val LONG_BINARY_OPERATION_FLOATING_POINT =", "body": "pattern(<STR_LIT>)<EOL>"}
{"signature": "val actualLightDeclaration =", "body": "lightElements.find { it::class.qualifiedName == lightElementClassQualifier }<EOL>"}
{"signature": "val predefinedMacros =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val DO_NOT_ANALYZE_NOTIFICATION =", "body": "<STR_LIT> +<EOL>"}
{"signature": "if (backend != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val backendWithDirectives = BackendWithDirectives(backend)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>currentBackendWithDirectives = backendWithDirectives<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>backends += backendWithDirectives<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitNode(node: CFGNode<*>, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitNode(node)<EOL><INDENT>}"}
{"signature": "val DEFAULT_MAX_PROFILE_FILES =", "body": "<NUM_LIT>_<NUM_LIT><EOL>"}
{"signature": "fun test_<NUM_LIT>(d: D) {", "body": "<EOL><INDENT>d.x<NUM_LIT><EOL><INDENT>d.x<NUM_LIT><EOL><INDENT>d.x<NUM_LIT><EOL><INDENT>d.x<NUM_LIT><EOL>}"}
{"signature": "if (indexesToRemove.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>changed = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testWrongMetadataVersionSkipVersionCheck() {", "body": "<EOL><INDENT><INDENT>doTestKotlinLibraryWithWrongMetadataVersion(<STR_LIT>, null, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val enhancedToOriginalProperties =", "body": "mutableMapOf<FirPropertySymbol, FirPropertySymbol>()<EOL>"}
{"signature": "fun reportUnsupportedLiteral(<EOL><INDENT><INDENT>context: ExpressionTypingContext,<EOL><INDENT><INDENT>diagnosticFactory: DiagnosticFactory<NUM_LIT><PsiElement, String>,<EOL><INDENT><INDENT>collectionLiteralExpression: KtCollectionLiteralExpression<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>context.trace.report(diagnosticFactory.on(collectionLiteralExpression, <STR_LIT>))<EOL><INDENT>}"}
{"signature": "while (startIndex + bytesPerGroup <= endIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>val groupCapacity = (if (base<NUM_LIT>isMimeScheme) lineLength else symbolBuffer.size) / symbolsPerGroup<EOL><INDENT><INDENT><INDENT>val groupsToEncode = minOf(groupCapacity, (endIndex - startIndex) / bytesPerGroup)<EOL><INDENT><INDENT><INDENT>val bytesToEncode = groupsToEncode * bytesPerGroup<EOL><EOL><INDENT><INDENT><INDENT>val symbolsEncoded = encodeIntoOutput(source, startIndex, startIndex + bytesToEncode)<EOL><INDENT><INDENT><INDENT>check(symbolsEncoded == groupsToEncode * symbolsPerGroup)<EOL><EOL><INDENT><INDENT><INDENT>startIndex += bytesToEncode<EOL><INDENT><INDENT>}"}
{"signature": "val nextType =", "body": "type.valueClassRepresentationTypeMarkersList(session)?.singleOrNull()?.second ?: return false<EOL>"}
{"signature": "val KOTLIN_JPS_PLUGIN_SETTINGS_SECTION =", "body": "<STR_LIT><EOL>"}
{"signature": "if (it is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>generateTestFunctions(it, packageFunction)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testExn(password: Password<String>) {", "body": "<EOL><INDENT><INDENT>if (password.password != <STR_LIT>) throw AssertionError()<EOL><INDENT>}"}
{"signature": "val Iterable =", "body": "<STR_LIT>.collectionsId()<EOL>"}
{"signature": "val vok =", "body": "B<NUM_LIT>vo + B<NUM_LIT>B<NUM_LIT>vk<EOL>"}
{"signature": "val notImplementedIntersectionSymbol =", "body": "notImplementedIntersectionSymbols.first()<EOL>"}
{"signature": "fun testContainer() {", "body": "<EOL><INDENT>val l = listOf<Unit>(demo())<EOL><INDENT>val d<NUM_LIT>: dynamic = l.last()<EOL><INDENT>assertTrue(d<NUM_LIT> == l.last())<EOL><INDENT>assertEquals(l.last().toString(), <STR_LIT>)<EOL>}"}
{"signature": "val jvmSrc =", "body": "File(srcDir, <STR_LIT>)<EOL>"}
{"signature": "val waitingList =", "body": "mutableMapOf<Int, WaitingFor>(serverFd to WaitingFor.Accept())<EOL>"}
{"signature": "if (value is TaintedBoxedValue) {", "body": "<EOL><INDENT><INDENT><INDENT>onMergeFail(value)<EOL><INDENT><INDENT>}"}
{"signature": "fun testEarlyConfigurationsResolutionKotlinJs(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>testEarlyConfigurationsResolution(<STR_LIT>, gradleVersion, kts = true)<EOL><INDENT>}"}
{"signature": "if (declaration.hasDelegate()) {", "body": "<EOL><INDENT><INDENT><INDENT>return Errors.CONST_VAL_WITH_DELEGATE.on(declaration.delegate!!).nonApplicable()<EOL><INDENT><INDENT>}"}
{"signature": "fun check(condition: Boolean) {", "body": "}<EOL><EOL>interface Foo {<EOL><INDENT>fun process(): Boolean<EOL>}"}
{"signature": "val fnZ =", "body": "::fooZ<EOL>"}
{"signature": "fun interpretThrow(expression: IrThrow) {", "body": "<EOL><INDENT><INDENT>callStack.dropFramesUntilTryCatch()<EOL><INDENT>}"}
{"signature": "val nativePointedName =", "body": "<STR_LIT><EOL>"}
{"signature": "package names in reflection information without package patching.", "body": "<EOL>"}
{"signature": "if (view != null) {", "body": "<EOL><INDENT><INDENT><INDENT>holder = view.tag as ViewHolder<EOL><INDENT><INDENT>}"}
{"signature": "if (onlyPsi) {", "body": "<EOL><INDENT><INDENT><INDENT>DebugUtil.psiTreeToString(ktFile, false)<EOL><INDENT><INDENT>}"}
{"signature": "val operatorPartiallyAppliedSymbol =", "body": "operatorCall.toPartiallyAppliedFunctionSymbol<KtFunctionSymbol>(context) ?: return null<EOL>"}
{"signature": "val NOT_NULLABLE =", "body": "JavaTypeQualifiers(NullabilityQualifier.NOT_NULL, null, definitelyNotNull = true)<EOL>"}
{"signature": "val targetOptions =", "body": "if (inheritMemoryLimits) opts else DaemonJVMOptions()<EOL>"}
{"signature": "if (shouldStopAtTheLevel(requested)) {", "body": "<EOL><INDENT><INDENT><INDENT>stopResolverTask()<EOL><INDENT><INDENT>}"}
{"signature": "val rem<NUM_LIT> =", "body": "twoVal.<!EVALUATED(<STR_LIT>)!>rem(doubleVal)<!><EOL>"}
{"signature": "val COMMONIZED_ROOTS_DIR =", "body": "<STR_LIT><EOL>"}
{"signature": "fun stopTracking() {", "body": "<EOL><INDENT><INDENT>val runner = activeRunner.getAndSet(null) ?: error(<STR_LIT>)<EOL><INDENT><INDENT>runner.interrupt()<EOL><INDENT>}"}
{"signature": "val argumentTypes =", "body": "arguments.map { it.getType() }<EOL>"}
{"signature": "fun checkKotlinInv(element: T, action: KotlinAction<T>) {", "body": "<EOL><INDENT><INDENT>action.execute(<!TYPE_MISMATCH!>element<!>)<INDENT> }"}
{"signature": "fun friendDependencies(paths: Collection<Path>) {", "body": "<EOL><INDENT><INDENT><INDENT>filtersMap.getValue(binaryModuleData.friends) += paths<EOL><INDENT><INDENT>}"}
{"signature": "if (!declaration.isFinal) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirJvmErrors.NON_FINAL_JVM_RECORD, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val finallyBlock =", "body": "translateAsBlock(finallyExpression)<EOL>"}
{"signature": "fun testIncorrectJavaSignature() {", "body": "<EOL><INDENT><INDENT>compileKotlin(<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir,<EOL><INDENT><INDENT><INDENT>listOf(),<EOL><INDENT><INDENT><INDENT>additionalSources = listOf(<STR_LIT>, <STR_LIT>),<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val limit =", "body": "(text.length - <NUM_LIT>).coerceAtLeast(position)<EOL>"}
{"signature": "val intersectionOfUpperBounds =", "body": "TypeIntersector.intersectTypes(upperBounds)<EOL>"}
{"signature": "if (objectClass is IrLazyClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val clientFlag<NUM_LIT> =", "body": "FileUtil.createTempFile(getTestName(true), <STR_LIT>)<EOL>"}
{"signature": "fun onTestFrameworkSet(action: Action<KotlinJsTestFramework>) {", "body": "<EOL><INDENT><INDENT>onTestFrameworkCallbacks.add(action)<EOL><INDENT>}"}
{"signature": "if (s === SL<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return bar(s)<EOL><INDENT>}"}
{"signature": "val memoizedFunctionLambda =", "body": "<!CANNOT_INFER_PARAMETER_TYPE, CANNOT_INFER_PARAMETER_TYPE, NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER, NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER!>createMemoizedFunction<!> <!CANNOT_INFER_PARAMETER_TYPE!>{ it.foo() }<!>"}
{"signature": "val loopBlock =", "body": "basicBlock(<STR_LIT>, position()?.start)<EOL>"}
{"signature": "val overriddenIrAccessorSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (isGetter) c.declarationStorage.findGetterOfProperty(overriddenIrPropertySymbol)<EOL>"}
{"signature": "for ((i, valueParameter) in irFunction.valueParameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(i, irGet(valueParameter.type, valueParameter.symbol))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (elseBranchCondition !is IrConst<*> || elseBranchCondition.value != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>elseBranchCondition.accept(this, node)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (node.tokenType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>VALUE_PARAMETER -> container += convertValueParameter(node, functionSymbol, valueParameterDeclaration, additionalAnnotations)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (a is DoubleArray) {", "body": "<EOL><INDENT><INDENT>a.get(<NUM_LIT>)<EOL><INDENT><INDENT>a.set(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>a.iterator()<EOL><INDENT><INDENT>return a.size<EOL><INDENT>}"}
{"signature": "if (type is ConeErrorType) {", "body": "<EOL><INDENT><INDENT><INDENT>resultFunctionCall.resultType = type<EOL><INDENT><INDENT>}"}
{"signature": "var keys =", "body": "createJsArray<K>()<EOL>"}
{"signature": "val initExpression =", "body": "newVar(iteratorVar, JsInvocation(pureFqn(iteratorName, range))).apply { source = expression }<EOL>"}
{"signature": "fun visitUserTypeRef(userTypeRef: FirUserTypeRef) {", "body": "<EOL><INDENT><INDENT>visitElement(userTypeRef)<EOL><INDENT>}"}
{"signature": "val nextCandidates =", "body": "container.nextCandidatesSeq!!<EOL>"}
{"signature": "when (topLevelClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtLightClassForFacade -> topLevelClass.files<EOL><INDENT><INDENT><INDENT><INDENT>else -> listOfNotNull(topLevelClass.kotlinOrigin?.containingKtFile)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val checkClassScopesForAnnotationCompatibility =", "body": "false<EOL>"}
{"signature": "if (savedValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>frameMap.leaveTemp(tryAsmType)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFieldAnnotations() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun enterScope(symbol: IrSymbol) {", "body": "<EOL><INDENT><INDENT>descriptorExtension.enterScope(symbol)<EOL><INDENT>}"}
{"signature": "val serializerClassId =", "body": "serializerType.classId ?: return<EOL>"}
{"signature": "val runtimeInUsMeanVariance =", "body": "computeMeanVariance(resultsSet.map { it.runtimeInUs })<EOL>"}
{"signature": "val loopParameterStartLabel =", "body": "Label()<EOL>"}
{"signature": "val potentialSubtype =", "body": "iterator.next()<EOL>"}
{"signature": "val indexesPerSymbol =", "body": "indexesPerSymbol.put(value.boundSymbol, index)<EOL>"}
{"signature": "for (j in <NUM_LIT> .. (arr.size - <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>result[size_local++] = arr[j]<EOL><INDENT><INDENT>}"}
{"signature": "val originalBeforeInline =", "body": "originalBeforeInline<EOL>"}
{"signature": "if (fileSystemWatchEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val superTypeCallArguments =", "body": "(irClass.superTypes.find { it.classOrNull == superClass.symbol } as IrSimpleType?)?.arguments<EOL>"}
{"signature": "if (rawImports.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "fun addPlaceholder(lineId: ILineId, value: EvalClassWithInstanceAndLoader) {", "body": "}<EOL><EOL><INDENT>override fun removePlaceholder(lineId: ILineId): Boolean = true<EOL><EOL><INDENT>override fun addFinal(lineId: ILineId, value: EvalClassWithInstanceAndLoader) {<EOL><INDENT><INDENT>state.history.pop()<EOL><INDENT><INDENT>state.history.push(lineId, value)<EOL><INDENT>}"}
{"signature": "if (delegateVolatileField.parent is IrClass && delegateVolatileField.parentAsClass.name.asString().contains(VOLATILE_WRAPPER_SUFFIX)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getStaticVolatileWrapperInstance(delegateVolatileField.parentAsClass)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun linux() {", "body": "<EOL><INDENT>common()<EOL><EOL><INDENT>includedLib.linuxMain()<EOL><INDENT>cinterop.a.a()<EOL>}"}
{"signature": "package<EOL><INDENT><INDENT>val targetDescriptor = DescriptorUtils.", "body": "getParentOfType(descriptor, ClassOrPackageFragmentDescriptor::class.java) ?: return<EOL>"}
{"signature": "val composerIndex =", "body": "numContextParams + numRealValueParams<EOL>"}
{"signature": "val usefulConstraints =", "body": "SmartList<Constraint>()<EOL>"}
{"signature": "val initializerTypeMismatch =", "body": "if (useFir) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val emptyObjectArray =", "body": "arrayOf<Any>()<EOL>"}
{"signature": "val IS =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!parameters.useBuildFinishFlowAction.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>recordBuildFinished(buildFailed)<EOL><INDENT><INDENT>}"}
{"signature": "val staticDescriptors =", "body": "qualifier.staticScope.collectStaticMembers(resolutionFacade, kindFilter, nameFilter)<EOL>"}
{"signature": "when (sanitizer.orNull) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> listOf()<EOL><INDENT><INDENT><INDENT>SanitizerKind.ADDRESS -> listOf(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>SanitizerKind.THREAD -> listOf(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinExt =", "body": "project.extensions.getByName(<STR_LIT>)<EOL>"}
{"signature": "val constantConditionElimination =", "body": "ConstantConditionEliminationMethodTransformer()<EOL>"}
{"signature": "fun reportMarkDirtyClass(affectedFiles: Iterable<File>, classFqName: String) {", "body": "<EOL><INDENT><INDENT>reportMarkDirty(affectedFiles, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val throwClassCastException =", "body": "internalFunction(<STR_LIT>)<EOL>"}
{"signature": "fun testReplValueClassConversion() {", "body": "<EOL><INDENT><INDENT>runInteractive(<EOL><INDENT><INDENT><INDENT>*replOutHeader,<EOL><INDENT><INDENT><INDENT><STR_LIT> to <STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>OK\\<STR_LIT> to <STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT> to <STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT> to <STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT> to <STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT> to <STR_LIT>,<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val expectedB =", "body": "B(A(<STR_LIT>))<EOL>"}
{"signature": "val STATISTICS_FILE_NAME_PATTERN =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val COLON =", "body": "':'<EOL>"}
{"signature": "fun testVolatileLong() {", "body": "<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, vLong)<EOL><INDENT><INDENT>vLong = <NUM_LIT><EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, vLong)<EOL><INDENT>}"}
{"signature": "val isHuman =", "body": "obj.isHuman<EOL>"}
{"signature": "val memberToCheck =", "body": "if (member is PsiEnumConstantInitializer) member.enumConstant else member<EOL>"}
{"signature": "val duplicateAnnotation =", "body": "useSiteTarget in existingTargetsForAnnotation<EOL>"}
{"signature": "import p<NUM_LIT>Foo<EOL>.", "body": ""}
{"signature": "val compositionContextBody =", "body": "irModule.files.last().declarations<EOL>"}
{"signature": "val containingClassName =", "body": "member.containingClassLookupTag()?.classId?.asSingleFqName()?.toUnsafe() ?: return false<EOL>"}
{"signature": "val sourceFiles =", "body": "ktFiles.map { VfsUtilCore.virtualToIoFile(it.virtualFile) }<EOL>"}
{"signature": "val parentClassifier =", "body": "containingDeclaration as? ClassifierDescriptorWithTypeParameters ?: return false<EOL>"}
{"signature": "if (next != determining && next.isSatisfied()) {", "body": "<EOL><INDENT><INDENT>  next.recalculate()<EOL><INDENT><INDENT>  todo.add(next.output())<EOL><INDENT><INDENT>}"}
{"signature": "val dirtyClasspathFqNames =", "body": "HashSet<String>(dirtyClasspathJvmNames.size)<EOL>"}
{"signature": "val manual =", "body": "x >= left && x <= right<EOL>"}
{"signature": "val typeVariableTypeConstructor =", "body": "typeVariable.typeConstructor()<EOL>"}
{"signature": "while (steps <= prev) {", "body": "}"}
{"signature": "if (allItems.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>assert(anchor == null)<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "fun resolveAnnotationsOnAnnotationIfNeeded(symbol: FirRegularClassSymbol, scopeSession: ScopeSession) {", "body": "<EOL><INDENT><INDENT>val regularClass = symbol.fir<EOL><INDENT><INDENT>if (annotationsAreResolved(regularClass, treatNonSourceDeclarationsAsResolved = true)) return<EOL><EOL><INDENT><INDENT>resolveAnnotationSymbol(symbol, scopeSession)<EOL><INDENT>}"}
{"signature": "for (element in collection) {", "body": "<EOL><INDENT><INDENT><INDENT>output.writeObject(element)<EOL><INDENT><INDENT>}"}
{"signature": "package they are in.", "body": "<EOL>"}
{"signature": "fun trim() {", "body": "<EOL><INDENT><INDENT>assertEquals(expected = <STR_LIT>, actual = <STR_LIT>.trim(),<EOL><INDENT><INDENT><INDENT><INDENT>message = <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(expected = <STR_LIT>, actual = <STR_LIT>.trim(),<EOL><INDENT><INDENT><INDENT><INDENT>message = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (cache !is CachedLibraries.Cache.PerFile) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>require(library.isInteropLibrary())<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val constantProperty =", "body": "function.correspondingPropertySymbol?.owner?.takeIf { it.isConst } ?: return null<EOL>"}
{"signature": "val someMask =", "body": "meta.maskParam ?: error(<STR_LIT>)<EOL>"}
{"signature": "val temp =", "body": "materialize()<EOL>"}
{"signature": "when (unwrappedType) {", "body": "<EOL><INDENT><INDENT><INDENT>is SimpleType -> unwrappedType.prepareReplacement()<EOL><INDENT><INDENT><INDENT>is FlexibleType -> KotlinTypeFactory.flexibleType(<EOL><INDENT><INDENT><INDENT><INDENT>unwrappedType.lowerBound.prepareReplacement(),<EOL><INDENT><INDENT><INDENT><INDENT>unwrappedType.upperBound.prepareReplacement()<EOL><INDENT><INDENT><INDENT>).wrapEnhancement(unwrappedType.getEnhancement())<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun valuesNotNull(map: MutableMap<Int, String>) {", "body": "<EOL><INDENT>map.<caret>putIfAbsent(<NUM_LIT>, <STR_LIT>)<EOL>}"}
{"signature": "val SETTER =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val artifactsRendered =", "body": "problemDependencies.joinToString { <STR_LIT> }<EOL>"}
{"signature": "while (unsignedValue != <NUM_LIT>UL) {", "body": "<EOL><INDENT><INDENT>buffer.set(currentBufferIndex, (unsignedValue % ulongRadix).toInt().getChar())<EOL><INDENT><INDENT>unsignedValue /= ulongRadix<EOL><INDENT><INDENT>currentBufferIndex--<EOL><INDENT>}"}
{"signature": "fun endVisit(invocation: JsInvocation, ctx: JsContext<in JsNode>) {", "body": "<EOL><INDENT><INDENT><INDENT>invocation.checkDoesNotCreateRecursiveKType()<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinWasmInternalPackageFqn =", "body": "internalPackageFqn.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val fakeOverrideDescriptors =", "body": "<EOL><INDENT><INDENT><INDENT>descriptor.unsubstitutedMemberScope.getContributedDescriptors(DescriptorKindFilter.CALLABLES)<EOL>"}
{"signature": "var outputs =", "body": "mutableListOf<TF_Output>()<EOL>"}
{"signature": "val suspendableExpressionStack =", "body": "mutableListOf<IrSuspendableExpression>()<EOL>"}
{"signature": "val unescapeRe =", "body": "<STR_LIT><STR_LIT>\\\\,])<STR_LIT>\".toRegex()<EOL>"}
{"signature": "val deviceIdProvider =", "body": "project.valueSourceWithExecProviderCompat(XcodeDefaultTestDevicesValueSource::class.java)<EOL>"}
{"signature": "val INT_SIZE_BYTES =", "body": "<NUM_LIT><EOL>"}
{"signature": "val nestedClassifierScope =", "body": "getNestedClassifierScope(klass, useSiteSession, scopeSession)<EOL>"}
{"signature": "val wasmGetJsClass =", "body": "<EOL><INDENT><INDENT>DefaultDelegateFactory.newDeclarationToDeclarationMapping<IrClass, IrSimpleFunction>()<EOL>"}
{"signature": "val dataFlowValueKind =", "body": "c.dataFlowValueFactory.createDataFlowValue(lhsExpression, variableType, c).kind<EOL>"}
{"signature": "fun testIA(a: IA) {", "body": "<EOL><INDENT>a.fromInterface(Id(<STR_LIT>))<EOL><INDENT>a.fromInterface(Name(<STR_LIT>))<EOL><EOL><INDENT>a.fromBoth(Id(<STR_LIT>))<EOL><INDENT>a.fromBoth(Name(<STR_LIT>))<EOL><EOL><INDENT>a.withDefaultImpl(Id(<STR_LIT>))<EOL><INDENT>a.withDefaultImpl(Name(<STR_LIT>))<EOL>}"}
{"signature": "val appendedEntries =", "body": "LinkedHashMap<KEY, VALUE>()<EOL>"}
{"signature": "val byValueIrFunction =", "body": "cEnumByValueFunctionGenerator<EOL>"}
{"signature": "fun test<NUM_LIT>(arg: InvRecursive<in DerivedInv>) {", "body": "<EOL><INDENT>id(arg)<EOL>}"}
{"signature": "fun visitCode() {", "body": "}<EOL><EOL><INDENT>override fun visitMaxs(maxStack: Int, maxLocals: Int) {}"}
{"signature": "val actualEnclosingClass =", "body": "javaClass.getEnclosingClass()!!.getName()<EOL>"}
{"signature": "val tee =", "body": "<NUM_LIT><EOL>"}
{"signature": "val classTypeResolver =", "body": "typeResolver.create(classEntry)<EOL>"}
{"signature": "val completedCalls =", "body": "hashSetOf<ResolvedAtom>()<EOL>"}
{"signature": "val fooName =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!>SomeClassWithName::foo.name<!><EOL>"}
{"signature": "val localScope =", "body": "property.getParcelerScope(topLevelScope)<EOL>"}
{"signature": "fun overloading() {", "body": "<EOL><INDENT>var x = A()<EOL><INDENT>var y = A()<EOL><INDENT>x += y<EOL><INDENT>var z = B()<EOL><INDENT><!TYPE_MISMATCH!>z += x<!><EOL>}"}
{"signature": "val converted =", "body": "expression?.let { convertExpression(it, errorReason) }<EOL>"}
{"signature": "fun testLabmdaParam(x: () -> Unit) {", "body": "<EOL><INDENT>assertEquals(x::class.simpleName, <STR_LIT>)<EOL>}"}
{"signature": "val argList =", "body": "KtPsiFactory(project).createCallArguments(<STR_LIT>)<EOL>"}
{"signature": "val interopAllocObjCObject =", "body": "interopFunction(InteropFqNames.allocObjCObjectFunName)<EOL>"}
{"signature": "fun optimized(x: In<CharSequence, CharSequence>) {", "body": "}<EOL><EOL>class In<NUM_LIT><in T, F : In<NUM_LIT><T, F>><EOL><EOL>fun nonOptimized(x: In<NUM_LIT><In<NUM_LIT><*, *>, *>) {}"}
{"signature": "val DECLARATION_ORIGIN_ANONYMOUS_INITIALIZER =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "fun c(a: Any?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>log(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val externalPackageFragments =", "body": "hashMapOf<IrExternalPackageFragmentSymbol, IrExternalPackageFragmentSymbol>()<EOL>"}
{"signature": "when (target.family) {", "body": "<EOL><INDENT>Family.TVOS -> <STR_LIT><EOL><INDENT>Family.IOS -> <STR_LIT><EOL><INDENT>Family.WATCHOS -> <STR_LIT><EOL><INDENT>else -> error(<STR_LIT>)<EOL>}"}
{"signature": "val itemSize =", "body": "arrayItemSizeOf(irClass)<EOL>"}
{"signature": "val currentParams =", "body": "fn.valueParameters.size<EOL>"}
{"signature": "fun usePreAnalysisHandlers(vararg handlers: Constructor<PreAnalysisHandler>) {", "body": "<EOL><INDENT><INDENT>this.preAnalysisHandlers += handlers<EOL><INDENT>}"}
{"signature": "val superQualifierSymbol =", "body": "expression.superQualifierSymbol ?: return<EOL>"}
{"signature": "when (val result = this(this as String)) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> result<EOL><INDENT><INDENT>}"}
{"signature": "import property<EOL>.", "body": ""}
{"signature": "val containingUnaryExpressionForIncOrDec =", "body": "psi.getContainingUnaryIncOrDecExpression()<EOL>"}
{"signature": "fun test(x: Int?) {", "body": "<EOL><INDENT> <!TYPE_MISMATCH!>x<!> in <NUM_LIT>.<NUM_LIT><EOL>}"}
{"signature": "fun acceptComposableSuspend(fn: <!COMPOSABLE_SUSPEND_FUN!>@Composable suspend () -> Unit<!>) {", "body": "print(fn.hashCode()) }"}
{"signature": "val INJECT_ALGEBRA_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>a.x != null<!>) {", "body": "<EOL><INDENT><INDENT>a.x<EOL><INDENT><INDENT>a.x.hashCode()<EOL><INDENT>}"}
{"signature": "var tryScopeCount =", "body": "<NUM_LIT><EOL>"}
{"signature": "val notDeclaredFiles =", "body": "hashSetOf<Path>()<EOL>"}
{"signature": "for (checker in checkerConfiguration.enabledFieldCheckers) {", "body": "<EOL><INDENT><INDENT><INDENT>checker.check(field<NUM_LIT>, field<NUM_LIT>, report)<EOL><INDENT><INDENT>}"}
{"signature": "var q =", "body": "qq<EOL>"}
{"signature": "val givenType =", "body": "this?.getKotlinTypeForComparison(bindingContext) ?: return null<EOL>"}
{"signature": "val dotSibling =", "body": "oldTypeRef.parent as? KtFunctionTypeReceiver ?: oldTypeRef<EOL>"}
{"signature": "val inductionVariable =", "body": "loopInitialization.statements[inductionVariableIndex] as? IrVariable ?: return<EOL>"}
{"signature": "val signaturesFile =", "body": "testDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val globalInitFunction =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (requireGlobalInitializer)<EOL>"}
{"signature": "val DELETED_TO_SIZE_THRESHOLD =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun visit(module: KtModule) {", "body": "<EOL><INDENT><INDENT><INDENT>if (module in this) return<EOL><INDENT><INDENT><INDENT>add(module)<EOL><INDENT><INDENT><INDENT>getDirectDependents(module).forEach(::visit)<EOL><INDENT><INDENT>}"}
{"signature": "val annotationClassType =", "body": "callee.returnType<EOL>"}
{"signature": "val bufferedStdout =", "body": "BufferedReader(InputStreamReader(process.inputStream))<EOL>"}
{"signature": "val firCondition =", "body": "entry.toFirWhenConditionWithoutSubject()<EOL>"}
{"signature": "val rightNode =", "body": "if (rightArgument.type.needsMfvcFlattening()) replacements.getRootMfvcNodeOrNull(rightClass) else null<EOL>"}
{"signature": "val absValueString =", "body": "ulongToString(absValue, checkRadix(radix))<EOL>"}
{"signature": "if (!ioFragmentFile.exists()) {", "body": "<EOL><INDENT><INDENT>return null<EOL><INDENT>}"}
{"signature": "val COMPARE_AND_EXCHANGE_ARRAY_ELEMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "var isValue =", "body": "false<EOL>"}
{"signature": "val getFunctionalInterfaceMethodSignature =", "body": "irClass.addFunction(<STR_LIT>, irBuiltIns.stringType)<EOL>"}
{"signature": "val actualReturnType =", "body": "irFunction.returnType<EOL>"}
{"signature": "if (!exhaustive) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.discard()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!testArray(obj as Obj)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (signatureSrc.lib == importerLibFile && signatureSrc.srcFile == importerSrcFile) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val fileCheckDump =", "body": "runResult.testExecutable.executable.fileCheckDump!!<EOL>"}
{"signature": "fun visitIntegerLiteralOperatorCall(integerLiteralOperatorCall: FirIntegerLiteralOperatorCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitIntegerLiteralOperatorCall(integerLiteralOperatorCall)<EOL><INDENT>}"}
{"signature": "fun visitMembers(visitor: KotlinJvmBinaryClass.MemberVisitor, cachedContents: ByteArray?) {", "body": "<EOL><INDENT><INDENT>ReflectClassStructure.visitMembers(klass, visitor)<EOL><INDENT>}"}
{"signature": "if (annotated.baseExpression is KtObjectLiteralExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.SUBCLASS_OPT_IN_INAPPLICABLE.on(entry, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val INT_MASK =", "body": "<NUM_LIT>xffffffffL<EOL>"}
{"signature": "when (val declaration = origin?.element) {", "body": "<EOL><INDENT><INDENT><INDENT>is KtProperty -> declaration.initializer<EOL><INDENT><INDENT><INDENT>is KtParameter -> if (kaptContext.options[KaptFlag.DUMP_DEFAULT_PARAMETER_VALUES]) declaration.defaultValue else null<EOL><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT>}"}
{"signature": "val mainResDir =", "body": "projectPath.resolve(<STR_LIT>).apply { createDirectories() }<EOL>"}
{"signature": "val publicXBoundRef =", "body": "Z<NUM_LIT>_<NUM_LIT>(Z<NUM_LIT>(<NUM_LIT>U, <NUM_LIT>))::publicX<EOL>"}
{"signature": "val descriptorByModule =", "body": "MyMap<M<NUM_LIT>, String>()<EOL>"}
{"signature": "var range =", "body": "element.startOffset..element.endOffset<EOL>"}
{"signature": "val realResolvedCall =", "body": "expression.callableReference.getFunctionResolvedCallWithAssert(context.bindingContext())<EOL>"}
{"signature": "if (isLocal || '$' in className) {", "body": "<EOL><INDENT><INDENT><INDENT>strings.add(className)<EOL><INDENT><INDENT>}"}
{"signature": "var actualCall =", "body": "call<EOL>"}
{"signature": "val INTRINSICS_CLASS =", "body": "<STR_LIT><EOL>"}
{"signature": "import abc.", "body": "A;<EOL>"}
{"signature": "val packageNameSegments =", "body": "LinkedList<String>()<EOL>"}
{"signature": "when(token) {", "body": "<EOL><INDENT><INDENT><INDENT>Lexer.QUANT_STAR, Lexer.QUANT_STAR_P, Lexer.QUANT_STAR_R -> starQuantifier<EOL><INDENT><INDENT><INDENT>Lexer.QUANT_ALT, Lexer.QUANT_ALT_P, Lexer.QUANT_ALT_R -> altQuantifier<EOL><INDENT><INDENT><INDENT>Lexer.QUANT_PLUS, Lexer.QUANT_PLUS_P, Lexer.QUANT_PLUS_R -> plusQuantifier<EOL><INDENT><INDENT><INDENT>else -> throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val refs =", "body": "mutableListOf<KtNameReferenceExpression>()<EOL>"}
{"signature": "package with the given FQ name to all dependent modules.", "body": "<EOL>"}
{"signature": "var trueCondition =", "body": "false<EOL>"}
{"signature": "fun visitResolvedTypeRef(resolvedTypeRef: FirResolvedTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitResolvedTypeRef(resolvedTypeRef)<EOL><INDENT>}"}
{"signature": "fun publishGlobalModificationEvent(modificationEventKind: ModificationEventKind, project: Project) {", "body": "<EOL><INDENT>require(modificationEventKind.isGlobalLevel)<EOL><EOL><INDENT>publishModificationEventByKind(modificationEventKind, project, ktModule = null)<EOL>}"}
{"signature": "fun visitElvisExpression(elvisExpression: FirElvisExpression, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allElvisExpressionCheckers.check(elvisExpression, data)<EOL><INDENT>}"}
{"signature": "val JAVA_SERIALIZABLE_ID =", "body": "ClassId.topLevel(FqName(<STR_LIT>))<EOL>"}
{"signature": "when (debuggable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>true -> BitcodeEmbeddingMode.MARKER<EOL><INDENT><INDENT><INDENT><INDENT>false -> BitcodeEmbeddingMode.BITCODE<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var implicitTypes =", "body": "<NUM_LIT><EOL>"}
{"signature": "val relativeBasePath =", "body": "<STR_LIT><EOL>"}
{"signature": "if (project.kotlinPropertiesProvider.swiftExportEnabled) {", "body": "<EOL><INDENT><INDENT>maybeCreateSwiftExportClasspathDependenciesConfiguration()<EOL><INDENT><INDENT>maybeCreateSwiftExportClasspathResolvableConfiguration()<EOL><INDENT>}"}
{"signature": "val checkPrefixesWithCacheMode =", "body": "checkPrefixes.map { <STR_LIT> }<EOL>"}
{"signature": "val libraryPaths =", "body": "libraries.map { it.libraryFile.absolutePath }.sorted().joinToString()<EOL>"}
{"signature": "val parentMain =", "body": "File(header.externalModuleName).parentFile ?: return <STR_LIT><EOL>"}
{"signature": "if (project.extensions.findByName(<STR_LIT>) !is BaseExtension) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (compilationErrors) {", "body": "<EOL><INDENT><INDENT><INDENT>LOG.info(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>JavaBuilderUtil.registerFilesWithErrors(context, messageCollector.filesWithErrors.map(::File))<EOL><INDENT><INDENT><INDENT>return ABORT<EOL><INDENT><INDENT>}"}
{"signature": "when (delegatedMember) {", "body": "<EOL><INDENT><INDENT><INDENT>is FunctionDescriptor -> generateDelegatedFunction(irClass, irDelegate, delegatedMember, delegateToMember as FunctionDescriptor)<EOL><INDENT><INDENT><INDENT>is PropertyDescriptor -> generateDelegatedProperty(irClass, irDelegate, delegatedMember, delegateToMember as PropertyDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val rawValueType =", "body": "classifier.declaredMemberProperties.single().returnType<EOL>"}
{"signature": "import kt<NUM_LIT>lib.", "body": "*<EOL>"}
{"signature": "val samClassSymbol =", "body": "referredSymbol.resolvedReturnTypeRef.toRegularClassSymbol(context.session) ?: return<EOL>"}
{"signature": "val jtMinDuration =", "body": "JTDuration.ofSeconds(Long.MIN_VALUE, <NUM_LIT>)<EOL>"}
{"signature": "val targetPlatformName =", "body": "versionInfoElement?.getOptionValue(<STR_LIT>)<EOL>"}
{"signature": "val applicableTargetsForAnnotation =", "body": "AnnotationChecker.applicableTargetSet(annotation)<EOL>"}
{"signature": "if (this is BlockExitNode) {", "body": "<EOL><INDENT><INDENT><INDENT>nodes += previousCfgNodes<EOL><INDENT><INDENT>}"}
{"signature": "if (selectedFqName == fullFqName) return fullSymbolsResolved.mapTo(mutableSetOf()) {", "body": "it.symbol }"}
{"signature": "val substitutedUpperBound =", "body": "substituteOrNull(type.upperBound)<EOL>"}
{"signature": "val legacyDefinition =", "body": "definition.asLegacyOrNull<KotlinScriptDefinition>()<EOL>"}
{"signature": "val qualifierIndex =", "body": "generateSequence(wholeType) { it.qualifier }.indexOf(nestedType)<EOL>"}
{"signature": "val typeArgumentList =", "body": "type.argumentList<EOL>"}
{"signature": "val dSYM =", "body": "FrameworkDsymLayout(rootDir.parentFile.resolve(<STR_LIT>))<EOL>"}
{"signature": "fun visitAnonymousObjectExpression(anonymousObjectExpression: FirAnonymousObjectExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnonymousObjectExpression(anonymousObjectExpression)<EOL><INDENT>}"}
{"signature": "var approximation =", "body": "<EOL><INDENT><INDENT><INDENT>if (isCollection)<EOL>"}
{"signature": "fun visitPropertySetterDescriptor(descriptor: PropertySetterDescriptor, builder: StringBuilder) {", "body": "<EOL><INDENT><INDENT><INDENT>visitPropertyAccessorDescriptor(descriptor, builder, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val GLOBAL_SET =", "body": "<STR_LIT><EOL>"}
{"signature": "fun printUByte(v: UByte) {", "body": "<EOL><INDENT>println(v)<EOL>}"}
{"signature": "val fmin =", "body": "Float.MIN_VALUE<EOL>"}
{"signature": "val invalidExpr =", "body": "captures<EOL>"}
{"signature": "val resolver =", "body": "if (javaClass is VirtualFileBoundJavaClass && javaClass.isFromSourceCodeInScope(sourceScope))<EOL>"}
{"signature": "if (fromClass.isSubclassOf(toClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>return value<EOL><INDENT><INDENT>}"}
{"signature": "if (variableDescriptor.isVar && variableDescriptor.returnType !is DeferredType) {", "body": "<EOL><INDENT><INDENT><INDENT>getGetSetValueMethod(<EOL><INDENT><INDENT><INDENT><INDENT>variableDescriptor, delegateExpression, delegateType,<EOL><INDENT><INDENT><INDENT><INDENT>trace, scopeForDelegate, delegateDataFlow,<EOL><INDENT><INDENT><INDENT><INDENT>isGet = false, isComplete = true, knownReceiver = receiver, knownContext = context<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun test(a: String, b: String) {", "body": "<EOL><INDENT>saveSpilledVariables()<EOL><INDENT>blackhole(a)<EOL><INDENT>saveSpilledVariables()<EOL><INDENT>blackhole(b)<EOL><INDENT>saveSpilledVariables()<EOL>}"}
{"signature": "val BASE_KOTLIN_PACKAGE =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "fun foo<NUM_LIT>(a: MutableList<in Number>) {", "body": "}"}
{"signature": "fun foo(p<NUM_LIT> : String?) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException()<EOL><INDENT>}"}
{"signature": "fun f()<EOL><EOL>fun test() {", "body": "<EOL>}"}
{"signature": "when (val result = invoke(this as String)) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> result<EOL><INDENT><INDENT>}"}
{"signature": "val superTypeConstructorDescriptor =", "body": "superType.constructor.declarationDescriptor<EOL>"}
{"signature": "for (relatedNode in getConstraintEdges(node)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addAllRelatedNodes(to, relatedNode, includePostponedEdges)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitReference(reference: FirReference, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitReference(reference)<EOL><INDENT>}"}
{"signature": "val someClass =", "body": "Test::class.java<EOL>"}
{"signature": "val Kotlin_getExceptionObject =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "fun check(block: Canvas.(Stroke, Fill) -> Unit) {", "body": "}<EOL><EOL>fun box(): String {<EOL><INDENT>test<NUM_LIT>()<EOL><INDENT>test<NUM_LIT>()<EOL><EOL><INDENT>return <STR_LIT><EOL>}"}
{"signature": "when (val parent = parent) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrFunction -> parent.computeFullName()<EOL><INDENT><INDENT><INDENT>else -> parent.fqNameForIrSerialization.asString()<EOL><INDENT><INDENT>}"}
{"signature": "val PARAMETER =", "body": "<NUM_LIT><EOL>"}
{"signature": "val init_jk =", "body": "intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>) <EOL>"}
{"signature": "val fileCommentLength =", "body": "getUnsignedShort(currentOffset + <NUM_LIT>)<EOL>"}
{"signature": "if (!added && current == start) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>containsCycle = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitTypeRef(typeRef: FirTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTypeRef(typeRef)<EOL><INDENT>}"}
{"signature": "val macos =", "body": "kotlin.macosX<NUM_LIT>()<EOL>"}
{"signature": "val inlineFuncValue =", "body": "inlineFunc()<EOL>"}
{"signature": "if (functionsWithInlineClassReturnTypesMangled) {", "body": "<EOL><INDENT><INDENT><INDENT>add(writeVersionRequirement(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, ProtoBuf.VersionRequirement.VersionKind.LANGUAGE_VERSION, this))<EOL><INDENT><INDENT>}"}
{"signature": "fun testNoWarningsOnProjectDependencies(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>checkDiagnostics(gradleVersion, <STR_LIT>, projectPathToCheck = <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val postponedPCLACalls =", "body": "mutableListOf<FirStatement>()<EOL>"}
{"signature": "val supertypeComputationSession =", "body": "SupertypeComputationSessionForLocalClasses()<EOL>"}
{"signature": "val generatedLocation =", "body": "mapping.generatedLocation<EOL>"}
{"signature": "val isPrettyDumpEnabled =", "body": "DUMP_KT_IR in allDirectives && SKIP_KT_DUMP !in allDirectives<EOL>"}
{"signature": "if (valueParameter.varargElementType != null) {", "body": "<EOL><INDENT><INDENT><INDENT>sig.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "for (declaredField in clazz.declaredFields) {", "body": "<EOL><INDENT><INDENT><INDENT>val stubSerializer = declaredField.get(null) as? ObjectStubSerializer<*, *> ?: continue<EOL><INDENT><INDENT><INDENT>val name = declaredField.name<EOL><INDENT><INDENT><INDENT>val externalId = stubSerializer.externalId<EOL><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, externalId)<EOL><INDENT><INDENT>}"}
{"signature": "val constructedTypeRef =", "body": "delegatedConstructorCall.constructedTypeRef<EOL>"}
{"signature": "var approxRem =", "body": "approxRes.multiply(other)<EOL>"}
{"signature": "for (i in sparseIntData) {", "body": "<EOL><INDENT><INDENT><INDENT>Blackhole.consume(sparseIntSwitch(i))<EOL><INDENT><INDENT>}"}
{"signature": "if (builder.tokenType != KtTokens.DOT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val fullLibraryName =", "body": "System.mapLibraryName(name)<EOL>"}
{"signature": "val HEX_RADIX =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (callee.resolvedSymbol.origin !is FirDeclarationOrigin.DynamicScope) {", "body": "<EOL><INDENT><INDENT><INDENT>return checkSpreadOperator(expression, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "val metaGroup =", "body": "ThreadSafeCache<TestCaseGroupId.TestDataDir, TestCaseGroup.MetaGroup?>()<EOL>"}
{"signature": "val ISSUE_TRACKER =", "body": "\"https:"}
{"signature": "val constantChecker =", "body": "ConstantsChecker(bindingContext)<EOL>"}
{"signature": "val symbols =", "body": "context.wasmSymbols<EOL>"}
{"signature": "for (observer in value.observers) {", "body": "<EOL><INDENT><INDENT><INDENT>observer.changed()<EOL><INDENT><INDENT>}"}
{"signature": "when (decl) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrProperty -> decl.backingField ?: continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is IrField -> decl<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val argIterator =", "body": "args.listIterator()<EOL>"}
{"signature": "for (i in <NUM_LIT>u until nine().toUInt() step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>uintList += i<EOL><INDENT>}"}
{"signature": "for ((i: Any<!UNSUPPORTED_FEATURE!>,<!>) in listOf(Pair(<NUM_LIT>,<NUM_LIT>))) {", "body": "}"}
{"signature": "if (sourceMapStackTraces) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>it.add(nodeJs.versions.sourceMapSupport)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun x() {", "body": "<EOL><EOL>}"}
{"signature": "val vector<NUM_LIT>Type =", "body": "LLVMVectorType(floatType, <NUM_LIT>)!!<EOL>"}
{"signature": "if (otherKind.isIntegral) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>docForConversionFromFloatingToIntegral(thisKind, otherKind)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (rebuildReason != null) {", "body": "<EOL><INDENT><INDENT><INDENT>printReasonToRebuild(rebuildReason)<EOL><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT>}"}
{"signature": "val alignInBits =", "body": "expression.type.alignment<EOL>"}
{"signature": "var num_breaks =", "body": "<NUM_LIT><EOL>"}
{"signature": "var activeLocalGaps =", "body": "<NUM_LIT><EOL>"}
{"signature": "val newSnapshot =", "body": "fileSnapshotProvider[file]<EOL>"}
{"signature": "val declarationOwners =", "body": "declarationOwnersCache.getValue(firFile)<EOL>"}
{"signature": "for (firTypeRefClass in firTypeRefClasses) {", "body": "<EOL><INDENT><INDENT>fillInDeepSubstitutor(firTypeRefClass.first?.coneType?.fullyExpandedType(session)?.typeArguments, firTypeRefClass.second, context)<EOL><INDENT>}"}
{"signature": "if (!param.isSkipped && info is CapturedParamInfo && !info.isSkipInConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val desc = info.type.descriptor<EOL><INDENT><INDENT><INDENT><INDENT>val access = AsmUtil.NO_FLAG_PACKAGE_PRIVATE or Opcodes.ACC_SYNTHETIC or Opcodes.ACC_FINAL<EOL><INDENT><INDENT><INDENT><INDENT>classBuilder.newField(NO_ORIGIN, access, info.newFieldName, desc, null, null)<EOL><INDENT><INDENT><INDENT><INDENT>constructorVisitor.visitVarInsn(Opcodes.ALOAD, <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>constructorVisitor.visitVarInsn(info.type.getOpcode(Opcodes.ILOAD), offset)<EOL><INDENT><INDENT><INDENT><INDENT>constructorVisitor.visitFieldInsn(Opcodes.PUTFIELD, transformationInfo.newClassName, info.newFieldName, desc)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val STRING =", "body": "CompileTimeType<String>()<EOL>"}
{"signature": "fun visitContinue(jump: IrContinue, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitContinue(jump)<EOL><INDENT>}"}
{"signature": "if (mutableDiagnostics == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val capturedValue =", "body": "argumentToPropertiesMap[expression.symbol.owner]<EOL>"}
{"signature": "for (i in <!ITERATOR_MISSING!>X()<!>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (k >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>y = doubleSetWord(d = y, hi = __HI(y) + (k shl <NUM_LIT>))<INDENT><EOL><INDENT><INDENT>return y<EOL><INDENT>}"}
{"signature": "when (val stmt = statement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is FirExpression -> return convertToIrExpression(stmt)<EOL><INDENT><INDENT><INDENT><INDENT>!is FirDeclaration -> return stmt.accept(this@Fir<NUM_LIT>IrVisitor, null) as IrExpression<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val audioOutput =", "body": "AudioOutput(<NUM_LIT>, <NUM_LIT>, SampleFormat.S<NUM_LIT>)<EOL>"}
{"signature": "val SPEC_TEST_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "when (t) {", "body": "<EOL><INDENT><INDENT>Pair(<NUM_LIT>, <NUM_LIT>) -> return <NUM_LIT><EOL><INDENT><INDENT>else -> return <NUM_LIT><EOL><INDENT>}"}
{"signature": "val getDelegatingToFunction =", "body": "underlyingClass?.functions?.single { it.name == OperatorNameConventions.GET }<EOL>"}
{"signature": "val unescaped =", "body": "child.unescapedValue<EOL>"}
{"signature": "val mainSourceFileName =", "body": "testDataFile.name<EOL>"}
{"signature": "val implementationVal =", "body": "symbol.intersections.first { it is FirPropertySymbol && it.isVal && !it.isAbstract }<EOL>"}
{"signature": "package work.", "body": "hard.parcelableissue<EOL>"}
{"signature": "val ASYNC_PROFILER_STOP_CMD =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "val allKotlinSourceSets =", "body": "compilation.allKotlinSourceSets<EOL>"}
{"signature": "if (start >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>actualText.delete(start, start + extras.length)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (it.fir.isInner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>true -> constructorFilter.acceptInner<EOL><INDENT><INDENT><INDENT><INDENT>false -> constructorFilter.acceptNested<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var kq<NUM_LIT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "val mutableListSize =", "body": "<!EVALUATED: `<NUM_LIT>`!>mutableListOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>).size<!><EOL>"}
{"signature": "val declarationIsHidden =", "body": "declaration.isDeprecationLevelHidden(session)<EOL>"}
{"signature": "if (target.isNodejsConfigured) {", "body": "<EOL><INDENT><INDENT><INDENT>add(target.nodejs.getChildTestExecution())<EOL><INDENT><INDENT>}"}
{"signature": "val simpleDirectives =", "body": "mutableListOf<SimpleDirective>()<EOL>"}
{"signature": "for (i in MB + <NUM_LIT> downTo MB) {", "body": "<EOL><INDENT><INDENT>++t<EOL><INDENT><INDENT>s += i<EOL><INDENT><INDENT>if (t > <NUM_LIT>) throw Exception(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var breakTargets =", "body": "mutableMapOf<JsName, JsStatement?>()<EOL>"}
{"signature": "var composableLambdas =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (toIndex == fromIndex) {", "body": "<EOL><INDENT><INDENT><INDENT>val mask = getMaskBetween(fromOffset, toOffset)<EOL><INDENT><INDENT><INDENT>setBitsWithMask(fromIndex, mask, value)<EOL><INDENT><INDENT>}"}
{"signature": "package anotherpackage<EOL>.", "body": ""}
{"signature": "fun printAll(vararg a : Any) {", "body": "}<EOL><EOL>fun main(args: Array<String>) {<EOL><INDENT>printAll(*args) }"}
{"signature": "val rootFunction =", "body": "codegen.enclosingFunctionForLocalObjects<EOL>"}
{"signature": "else if (argumentExpression != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>generateInstructions(argumentExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>createSyntheticValue(argumentExpression, MagicKind.VALUE_CONSUMER, argumentExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var flafVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun procedure() {", "body": "}<EOL>fun procedure(i: Int) {}"}
{"signature": "fun set(i: Int, j: Int) {", "body": "}<EOL><INDENT>operator fun set(i: Int, x: Any) { throw Exception() }"}
{"signature": "val stateStubTypesNotEqual =", "body": "newTypeCheckerState(errorTypesEqualToAnything = false, stubTypesEqualToAnything = false)<EOL>"}
{"signature": "if (expression.symbol == irClass.thisReceiver!!.symbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return IrGetValueImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>expression.startOffset,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>expression.endOffset,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>initializeFun.dispatchReceiverParameter!!.type,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>initializeFun.dispatchReceiverParameter!!.symbol<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val anyToStringMethodSymbol =", "body": "context.ir.symbols.memberToString<EOL>"}
{"signature": "val CONTRACTS_DSL_ANNOTATION_FQN =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val baseSourceSetName =", "body": "variant.type.androidBaseSourceSetName ?: return@run null<EOL>"}
{"signature": "val frozenAnnotation =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (ktLoopParameter != null && ktLoopDestructuringDeclaration == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val loopParameter = getOrFail(BindingContext.VALUE_PARAMETER, ktLoopParameter)<EOL><INDENT><INDENT><INDENT><INDENT>context.symbolTable.descriptorExtension.declareVariable(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ktLoopParameter.startOffsetSkippingComments, ktLoopParameter.endOffset, IrDeclarationOrigin.FOR_LOOP_VARIABLE,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>loopParameter, loopParameter.type.toIrType(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irNextCall<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (elementRange == range && expectedElementType.isInstance(element)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val pointer = pointerManager.createSmartPsiElementPointer(element)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>pointers[pointer] = n<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testTopLevelExtensionLoop() {", "body": "<EOL><INDENT>assertEquals(<STR_LIT>, ref.topLevelExtensionLoop(<STR_LIT>))<EOL>}"}
{"signature": "val blockSource =", "body": "block.source<EOL>"}
{"signature": "if (prop is String) {", "body": "<EOL><INDENT><INDENT><INDENT>prop.take()<EOL><INDENT><INDENT>}"}
{"signature": "fun nonAbstract(s: String, i: Int) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val nameWithCallSiteLineNumber =", "body": "nameWithScopeNumber.addScopeInfo(<NUM_LIT>)<EOL>"}
{"signature": "val firstType =", "body": "types[<NUM_LIT>]<EOL>"}
{"signature": "val objCOverrideInitClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (baseParameterType.isRecursiveInlineOrValueClassType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.VALUE_CLASS_CANNOT_BE_RECURSIVE.on(baseParameterTypeReference))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>baseParametersOk = false<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun yield() {", "body": "<EOL><INDENT><INDENT>Worker.current.processQueue()<EOL><INDENT>}"}
{"signature": "when (project) {", "body": "<EOL><INDENT><INDENT><INDENT>project.rootProject -> File(project.rootProject.projectDir, modulePrefix + project.rootProject.name + <STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> getModuleFile(project.pillModuleName)<EOL><INDENT><INDENT>}"}
{"signature": "if (contributedFunctions.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>result.addAll(scopeTower.syntheticScopes.collectSyntheticStaticFunctions(contributedFunctions, location))<EOL><INDENT>}"}
{"signature": "if (insn is IincInsnNode) {", "body": "<EOL><INDENT><INDENT>frame.markAlive(insn.`var`)<EOL><INDENT>}"}
{"signature": "fun main(kotlinClass: KotlinClass, kotlinSubClass: KotlinSubClass) {", "body": "<EOL><INDENT>kotlinClass.<!DEPRECATION!>foo<!><EOL><INDENT>kotlinClass.<!DEPRECATION_ERROR!>bar<!><EOL><EOL><INDENT>kotlinSubClass.foo<EOL><INDENT>kotlinSubClass.bar<EOL>}"}
{"signature": "val containingPackageFqName =", "body": "packageFqName.takeIf { it != <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "val dependentBounds =", "body": "usedInBounds.getOrPut(dependentTypeVariable) { arrayListOf() }<EOL>"}
{"signature": "val jsDceOptions =", "body": "gradleOptions<K<NUM_LIT>JSDceArguments>()<EOL>"}
{"signature": "fun foo<NUM_LIT>(vararg x: Int<!UNSUPPORTED_FEATURE!>,<!>) {", "body": "}<EOL><EOL>fun foo<NUM_LIT>(y: Float, vararg x: Int<!UNSUPPORTED_FEATURE!>,<!>) {}"}
{"signature": "val classCursor =", "body": "getObjCCategoryClassCursor(cursor)<EOL>"}
{"signature": "fun scenario(init: Scenario.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val scenario = Scenario()<EOL><INDENT><INDENT>scenario.init()<EOL><INDENT><INDENT>_scenarios.add(scenario)<EOL><INDENT>}"}
{"signature": "val smartCastedType =", "body": "typeStatement.smartCastedType(session.typeContext, originalType)<EOL>"}
{"signature": "fun collectDiagnosticsInSettings(reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>val visitor = createVisitor(createComponents(reporter))<EOL><INDENT><INDENT>visitor.checkSettings()<EOL><INDENT>}"}
{"signature": "val SAFE_ENV_VAR_PREFIXES =", "body": "listOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val MULTIFILE_PART_NAME_DELIMITER =", "body": "<STR_LIT><EOL>"}
{"signature": "val superClassInternalName =", "body": "typeMapper.mapClass(descriptor.getSuperClassOrAny()).internalName<EOL>"}
{"signature": "fun buildUnboxingState(unboxState: SuspendState, continueState: SuspendState, expectedType: IrType) {", "body": "<EOL><INDENT><INDENT>unboxState.successors += continueState<EOL><INDENT><INDENT>updateState(unboxState)<EOL><INDENT><INDENT>val result = getSuspendResultAsType(anyN)<EOL><INDENT><INDENT>val tmp = JsIrBuilder.buildVar(expectedType, function.owner, name = <STR_LIT>, initializer = result)<EOL><INDENT><INDENT>addStatement(tmp)<EOL><INDENT><INDENT>addStatement(setSuspendResultValue(JsIrBuilder.buildGetValue(tmp.symbol)))<EOL><EOL><INDENT><INDENT>doDispatch(continueState)<EOL><INDENT>}"}
{"signature": "val outerPsiClass =", "body": "getWrappingClass(companionObject)<EOL>"}
{"signature": "val targetsWithoutOutputDir =", "body": "targets.filter { it.outputDir == null }<EOL>"}
{"signature": "val staticFakeOverrideKey =", "body": "getFieldStaticFakeOverrideKey(field, containingClassLookupTag)<EOL>"}
{"signature": "val scaledFrameSize =", "body": "avpicture_get_size(avPixelFormat, windowSize.w, windowSize.h)<EOL>"}
{"signature": "fun testDifferencesInPrivateAndPublicVisibilitiesReverse() {", "body": "}<EOL>@Deprecated(message = <STR_LIT>, level = DeprecationLevel.HIDDEN) public fun testDifferencesInPrivateAndPublicVisibilitiesReverse() {}"}
{"signature": "for (i in (A..B).reversed() step C) {", "body": ""}
{"signature": "val isTeamCityBuild =", "body": "(target as? ExtensionAware)?.extra?.has(<STR_LIT>) == true || System.getenv(<STR_LIT>) != null<EOL>"}
{"signature": "if (mapping.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>mode.newLine(this)<EOL><INDENT><INDENT><INDENT><INDENT>renderIncompatibilityInformation(mapping, indent + INDENTATION_UNIT, context, mode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (ignoreDirective in this) {", "body": "<EOL><INDENT><INDENT>if (exception != null) return<EOL><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (mutedTest.isFlaky) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>invocation.proceed()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun ktest<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT>super.<!INTERFACE_CANT_CALL_DEFAULT_METHOD_VIA_SUPER!>test<!>()<EOL><EOL><INDENT><INDENT>test()<EOL><INDENT>}"}
{"signature": "fun minusAssign(m : MyNumber) {", "body": "<EOL><INDENT><INDENT>i -= m.i<EOL><INDENT>}"}
{"signature": "val severityAllowed =", "body": "conditions.severityMap.getOrDefault(severity, true)<EOL>"}
{"signature": "var workStep =", "body": "step<EOL>"}
{"signature": "val packageStub =", "body": "generateOrGetEmptyExternalPackageFragmentStub(packageFragment)<EOL>"}
{"signature": "val testFunction =", "body": "ktFile.findDescendantOfType<KtFunction>()!!<EOL>"}
{"signature": "val existingKotlinFiles =", "body": "files.filter { it.name.endsWith(<STR_LIT>, ignoreCase = true) && it.isFile }<EOL>"}
{"signature": "if (!useSiteTargetFilter.isAllowed(annotation.useSiteTarget) || annotation.toAnnotationClassId(useSiteSession) != classId) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@mapIndexedNotNull null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val disambiguationAttribute<NUM_LIT> =", "body": "Attribute.of(<STR_LIT>, String::class.java)<EOL>"}
{"signature": "val useSiteModuleData =", "body": "session.moduleData<EOL>"}
{"signature": "val withInternalInvoke =", "body": "WithInternalInvoke()<EOL>"}
{"signature": "val initScript =", "body": "projectPath.resolve(<STR_LIT>).createFile()<EOL>"}
{"signature": "val annotatedElement =", "body": "member.takeIf(::isFromSources)?.kotlinOrigin<EOL>"}
{"signature": "val classesPath =", "body": "if (jarPath.extension == <STR_LIT>) jarPath else jarPath.parentFile<EOL>"}
{"signature": "fun setFunctionNoReturn(function: LLVMValueRef) {", "body": "<EOL><INDENT>addLlvmFunctionEnumAttribute(function, LlvmFunctionAttribute.NoReturn)<EOL>}"}
{"signature": "fun use(i: Int) {", "body": "}<EOL><EOL>fun testPostfixIncr<NUM_LIT>() {<EOL><INDENT>var k = <NUM_LIT><EOL><INDENT>k++<EOL><INDENT>use(k)<EOL>}"}
{"signature": "val VOLATILE_WRAPPER_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val bindConstructor =", "body": "JsName(<STR_LIT>, false)<EOL>"}
{"signature": "fun contentDeepEquals() {", "body": "<EOL><INDENT><INDENT>assertFalse(platformNull<Array<String>>() contentDeepEquals emptyArray<String>())<EOL><INDENT><INDENT>assertFalse(arrayOf(<STR_LIT>, <STR_LIT>) contentDeepEquals platformNull<Array<String>>())<EOL><INDENT>}"}
{"signature": "for (valueArgument in resolvedCall.valueArguments.values) {", "body": "<EOL><INDENT><INDENT><INDENT>val index = valueArgumentsToIndex[valueArgument]!!<EOL><INDENT><INDENT><INDENT>val irArgument = call.getValueArgument(valueParameters[index]) ?: continue<EOL><INDENT><INDENT><INDENT>irCall.putValueArgument(index + contextReceiversCount, irArgument.freeze(valueParameters[index].name.asString()))<EOL><INDENT><INDENT>}"}
{"signature": "for (e in array) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += e<EOL><INDENT><INDENT>}"}
{"signature": "fun get(n: Int, n<NUM_LIT>: Int) {", "body": "}<EOL><!INAPPLICABLE_OPERATOR_MODIFIER!>operator<!> fun get() {}"}
{"signature": "val fileSerializer =", "body": "createSerializerForFile(file)<EOL>"}
{"signature": "if (deleteOnExit) {", "body": "<EOL><INDENT><INDENT><INDENT>createTempDir(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (assignment != null && assignment.second.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>nodes += assignment.second<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>childrenInSet = true<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val srcRoot =", "body": "createTestFiles().cleanupRecursively()<EOL>"}
{"signature": "val isLeaf =", "body": "mutableMapOf<ClassDescriptor, Boolean>()<EOL>"}
{"signature": "fun fun<NUM_LIT>(x<NUM_LIT>: Int, vararg xs: Int) {", "body": "}<EOL>fun fun<NUM_LIT>(x<NUM_LIT>: String, vararg xs: String) {}"}
{"signature": "if (type.hasComposableAnnotation() && type.isSuspendFunctionType) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>ComposeErrors.COMPOSABLE_SUSPEND_FUN.on(element)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun inlineFun()<!><EOL>expect fun nonInlineFun()<EOL><EOL><EOL>actual fun <!ACTUAL_WITHOUT_EXPECT!>inlineFun<!>() {", "body": "}"}
{"signature": "val macosArm<NUM_LIT>Test =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val expectedPomPath =", "body": "actual.toExpectedPath()<EOL>"}
{"signature": "val nextB =", "body": "b.next<EOL>"}
{"signature": "val functionPtrPtrType =", "body": "pointerType(functionPtrType)<EOL>"}
{"signature": "fun commentGroupEnd() {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.PSEUDO_COMMENT_GROUP_END, SourceLocation.NoLocation(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val lastValueAsLong =", "body": "last.constLongValue ?: return@lazy true"}
{"signature": "val valueSetterType =", "body": "valueSetterParameter.returnTypeRef.coneType<EOL>"}
{"signature": "when (NativeForwardDeclarationKind.packageFqNameToKind[getPackageFragment().packageFqName]) {", "body": "<EOL><INDENT>null, NativeForwardDeclarationKind.Struct -> false<EOL><INDENT>NativeForwardDeclarationKind.ObjCProtocol, NativeForwardDeclarationKind.ObjCClass -> true<EOL>}"}
{"signature": "for (i in <NUM_LIT> until <NUM_LIT> step it) {", "body": "sb.append(i) }"}
{"signature": "val rootSet =", "body": "DevirtualizationAnalysis.computeRootSet(context, input.irModule, moduleDFG, externalModulesDFG)<EOL>"}
{"signature": "val expectedMinSize =", "body": "expectedSize - thresholdInBytes<EOL>"}
{"signature": "while (proceed != null) {", "body": "<EOL><INDENT><INDENT>result += <STR_LIT><EOL><INDENT><INDENT>proceed!!()<EOL><INDENT>}"}
{"signature": "val HIDDEN_CHEAP_SOURCE_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "val processedRoots =", "body": "mutableSetOf<KtFile>()<EOL>"}
{"signature": "when (testDataFile.extension) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> compileSingleKotlinFileToLibrary(<EOL><INDENT><INDENT><INDENT>sourceFile = testDataFile,<EOL><INDENT><INDENT><INDENT>dependencies = compileRegularDependencies(testDataFile) + compileCInteropDependencies(testDataFile)<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT><STR_LIT> -> compileDefFileToLibrary(testDataFile)<EOL><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "var typeArgumentOffset =", "body": "<NUM_LIT><EOL>"}
{"signature": "val classVal =", "body": "innerContext.defineTemporary(classDescriptor.instance(innerContext))<EOL>"}
{"signature": "fun check(expression: KtClassLiteralExpression, type: KotlinType, context: ResolutionContext<*>) {", "body": "<EOL><INDENT><INDENT>val descriptor = type.constructor.declarationDescriptor as? ClassDescriptor ?: return<EOL><INDENT><INDENT>checkJsModuleUsage(context.trace.bindingContext, context.trace, context.scope.ownerDescriptor, descriptor, expression)<EOL><INDENT>}"}
{"signature": "val typeInfoPtrPtr =", "body": "structGep(runtime.typeInfoType, typeInfoOrMeta, <NUM_LIT> )<EOL>"}
{"signature": "val pluginClasspathTask =", "body": "compilerPluginOptionsTask.value ?: return null<EOL>"}
{"signature": "if (original is FirPropertySymbol || original is FirFieldSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>substitutionOverrideCache.overridesForVariables.getValue(original, this)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun usage(a: Aliased, b: SamePackage) {", "body": "<EOL><INDENT>aliased()<EOL><INDENT>samePackage()<EOL>}"}
{"signature": "for ((a, b) in C(<NUM_LIT>)..C(<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>i = a;<EOL><INDENT><INDENT>s = b;<EOL><INDENT>}"}
{"signature": "val targetFqName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testWalkSucceeds(path: Path, vararg expectedContent: Set<Path>) {", "body": "<EOL><INDENT><INDENT>val content = path.walkIncludeDirectories().toSet()<EOL><INDENT><INDENT>assertContains(expectedContent.toList(), content)<EOL><INDENT>}"}
{"signature": "val suiteFun =", "body": "maybeGetFunction(<STR_LIT>, kotlinTestPackage)<EOL>"}
{"signature": "val mh =", "body": "MethodHandles.lookup().unreflect(::foo.javaMethod!!)<EOL>"}
{"signature": "val srcDirectory =", "body": "createTempDirectory(root, <STR_LIT>)<EOL>"}
{"signature": "val cppClass =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "if (!isParameterAcceptableForInlineClass(baseParameter)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.VALUE_CLASS_CONSTRUCTOR_NOT_FINAL_READ_ONLY_PARAMETER.on(baseParameter))<EOL><INDENT><INDENT><INDENT><INDENT>baseParametersOk = false<EOL><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val virtualCallSites =", "body": "mutableMapOf<IrCall, MutableList<CallGraphNode.CallSite>>()<EOL>"}
{"signature": "var hasImplementationVar =", "body": "false<EOL>"}
{"signature": "if (failedToConverge) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>pointsToGraphs = analyzeComponentPessimistically(callGraph, multiNode)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (symbol is KtFunctionSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isExternal) add(KtTokens.EXTERNAL_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isOverride) add(KtTokens.OVERRIDE_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isInline) add(KtTokens.INLINE_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isInfix) add(KtTokens.INFIX_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isOperator) add(KtTokens.OPERATOR_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isSuspend) add(KtTokens.SUSPEND_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (symbol.isTailRec) add(KtTokens.TAILREC_KEYWORD)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun printTypeArgument(typeArg: IrTypeArgument) {", "body": "<EOL><INDENT><INDENT>typeArg.printTypeArgumentWithNoIndent()<EOL><INDENT>}"}
{"signature": "if (expected[i] != actual[i]) {", "body": "<EOL><INDENT><INDENT><INDENT>throw Exception(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when() {", "body": "else -> ... }"}
{"signature": "val barVarBR =", "body": "Z(<NUM_LIT>U, <NUM_LIT>)::barVar<EOL>"}
{"signature": "val exceptionWithCause =", "body": "<!WAS_NOT_EVALUATED: `<EOL>"}
{"signature": "if (referencedProperty !is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val strictRoot =", "body": "leafParents[leaf]<EOL>"}
{"signature": "if (classFirDispatchReceiver != this) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>FirDeclarationOrigin.SubstitutionOverride.DeclarationSite<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (result.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>to.danglingTypeConstraints = result<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun onModification(module: KtModule, modificationKind: KotlinModuleStateModificationKind) {", "body": "<EOL><INDENT><INDENT><INDENT>getInstance(project).invalidate(module)<EOL><INDENT><INDENT>}"}
{"signature": "val originalElement =", "body": "declaration.sourcePsiSafe<KtDeclaration>()<EOL>"}
{"signature": "val klib =", "body": "it.value.klib as? KotlinLibrary ?: error(<STR_LIT>)<EOL>"}
{"signature": "fun qux() {", "body": "<EOL><INDENT><INDENT><INDENT>super@C.<!UNRESOLVED_REFERENCE!>qux<!>()<EOL><INDENT><INDENT><INDENT>super@D.qux()<EOL><INDENT><INDENT>}"}
{"signature": "val previousIndex =", "body": "index<EOL>"}
{"signature": "val bindings =", "body": "Bindings()<EOL>"}
{"signature": "val suspendFunctionNMap =", "body": "mutableMapOf<Int, IrClass>()<EOL>"}
{"signature": "if (stderr.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>throw AssertionError(stderr)<EOL><INDENT>}"}
{"signature": "if (annotationProcessorInstance !is Processor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>logger.warn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (builder.tokenType == KtTokens.RBRACKET) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.advanceLexer()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (<!USELESS_IS_CHECK!>b is String<!>) {", "body": "<EOL><INDENT><INDENT>a.<!UNRESOLVED_REFERENCE!>length<!><INDENT><INDENT> c.<!UNRESOLVED_REFERENCE!>length<!><INDENT> }"}
{"signature": "if (!serializationPluginEnabledOn(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.reportOnSerializableOrMetaAnnotation(descriptor, SerializationErrors.PLUGIN_IS_NOT_ENABLED)<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val expectDeclaration =", "body": "expectSymbol.owner<EOL>"}
{"signature": "val expectedNumberHexFormat =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val allDependenciesString =", "body": "allDependencies.joinToString(<STR_LIT>)<EOL>"}
{"signature": "while (slashIndex >= <NUM_LIT> && this[slashIndex] != '/') {", "body": "<EOL><INDENT><INDENT><INDENT>slashIndex--<EOL><INDENT><INDENT>}"}
{"signature": "val versionFilter =", "body": "context.getConfigurationParameter(<STR_LIT>)<EOL>"}
{"signature": "val mappedClassId =", "body": "ClassId.topLevel(mappedClassFqName)<EOL>"}
{"signature": "fun foo(javaClass: JavaClass) {", "body": "<EOL><INDENT>javaClass.getSomething()<!UNSAFE_CALL!>.<!>length<EOL><INDENT>javaClass.something<!UNSAFE_CALL!>.<!>length<EOL>}"}
{"signature": "if (target.isMultiplatformProject) {", "body": "<EOL><INDENT><INDENT><INDENT>DefaultKotlinCompilationPreConfigure<EOL><INDENT><INDENT>}"}
{"signature": "fun visitIntersectionTypeRef(intersectionTypeRef: FirIntersectionTypeRef, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitIntersectionTypeRef(intersectionTypeRef)<EOL><INDENT>}"}
{"signature": "while (partIndex < resolutionSequence.size) {", "body": "<EOL><INDENT><INDENT><INDENT>if (processPart(resolutionSequence[partIndex], stopOnFirstError)) return<EOL><INDENT><INDENT><INDENT>partIndex++<EOL><INDENT><INDENT>}"}
{"signature": "val interactive =", "body": "this.interactive.get()<EOL>"}
{"signature": "val classIdSig =", "body": "getPublicSignature(classId.packageFqName, classId.relativeClassName.asString())<EOL>"}
{"signature": "if (labelToBlock.containsKey(label)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>labelToBlock[label]!!<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val your =", "body": "field<EOL>"}
{"signature": "val basicOverridability =", "body": "OverridingUtil.getBasicOverridabilityProblem(superDescriptor, subDescriptor)?.result<EOL>"}
{"signature": "if (it.isJavaOrEnhancement) {", "body": "<EOL><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT>ProcessorAction.STOP<EOL><INDENT><INDENT>}"}
{"signature": "if (declarationDescriptor.isMemberOfCompanionOfPrivateClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(PRIVATE_CLASS_MEMBER_FROM_INLINE_WARNING.on(expression, declarationDescriptor, descriptor))<EOL><INDENT><INDENT><INDENT><INDENT>context.reportDeprecationOnReplacement(expression, replacementForReport)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (expectType.getClassId() != actualType.getClassId()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return@firstNotNullOfOrNull null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val arraySetAsGenericDynamicAccess =", "body": "convertToIrCall(functionCall, IrDynamicOperator.ARRAY_ACCESS) as? IrDynamicOperatorExpression<EOL>"}
{"signature": "if (tail === insertAfter) {", "body": "<EOL><INDENT><INDENT>tail = newItem<EOL><INDENT>  }"}
{"signature": "for (dirtyType in currentDirtyTypes) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>allDirtyTypes.add(dirtyType)<EOL><INDENT><INDENT><INDENT><INDENT>findImpactedTypes(dirtyType, nextRound, allDirtyTypes)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val classConstructors =", "body": "compilerContext.referenceConstructors(serialDescImplClass.fqNameSafe)<EOL>"}
{"signature": "fun buildSectionsMap(testsMapPath: String) {", "body": "<EOL><INDENT><INDENT>val sectionInfo = SectionInfo.parsePath(testsMapPath)<EOL><INDENT><INDENT>val testArea = sectionInfo.testArea<EOL><INDENT><INDENT>val testAreaSectionsMap = sectionsMapsByTestArea[testArea] ?: JsonObject()<EOL><INDENT><INDENT>addPathToTestAreaSectionsMap(testAreaSectionsMap, sectionInfo)<EOL><INDENT><INDENT>sectionsMapsByTestArea[testArea] = testAreaSectionsMap<EOL><INDENT>}"}
{"signature": "for ((outer, iv) in (<NUM_LIT>.<NUM_LIT>).withIndex().withIndex()) {", "body": "<EOL><INDENT>}"}
{"signature": "val swiftFile =", "body": "testDirectory.walk().find { it.extension == <STR_LIT> }<EOL>"}
{"signature": "if (type.typeConstructor() is IntersectionTypeConstructorMarker) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>type.typeConstructor().supertypes().toList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val staticallyKnownSubtype =", "body": "findStaticallyKnownSubtype(supertype, regularClassSymbol, context)<EOL>"}
{"signature": "val resolvedObjCNameAnnotation =", "body": "foo.resolveObjCNameAnnotation()<EOL>"}
{"signature": "fun a() {", "body": "<EOL><INDENT>inline.f = <NUM_LIT><EOL>}"}
{"signature": "val actualizedClassSymbol =", "body": "containingClassSymbol.actualize()<EOL>"}
{"signature": "val floatModFloat =", "body": "float.mod(float)<EOL>"}
{"signature": "val stringWriter =", "body": "StringWriter()<EOL>"}
{"signature": "val IMPL_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val INVALID_OBJC_NAME_FIRST_CHAR =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement, String>(Severity.ERROR)<EOL>"}
{"signature": "if (rightOperandVariable is RealVariable) {", "body": "<EOL><INDENT><INDENT><INDENT>flow.addImplication((expressionVariable eq isEq) implies (rightOperandVariable typeEq leftOperandType))<EOL><INDENT><INDENT>}"}
{"signature": "fun genFieldFromParam(fieldClassType: Type, paramIndex: Int, name: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val value = StackValue.local(paramIndex, fieldClassType)<EOL><INDENT><INDENT><INDENT><INDENT>val field = StackValue.field(fieldClassType, classType, name, false, StackValue.local(<NUM_LIT>, classType))<EOL><INDENT><INDENT><INDENT><INDENT>field.store(value, iv)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val JVM_TARGET =", "body": "<STR_LIT><EOL>"}
{"signature": "var eVert =", "body": "IntArray(eCap)<EOL>"}
{"signature": "when (val r = this.receiver) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is IrComposite -> r.statements.lastOrNull() ?: return false<EOL><INDENT><INDENT><INDENT><INDENT>else -> r<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val upperType =", "body": "approximatedType.upperIfFlexible()<EOL>"}
{"signature": "while (break) {", "body": "}"}
{"signature": "val javaLines =", "body": "javaFile.readLines()<EOL>"}
{"signature": "if (use.rule.isMatch(path, isDirectory)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>use.used = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return use<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitWhileLoop(whileLoop: FirWhileLoop, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitWhileLoop(whileLoop)<EOL><INDENT>}"}
{"signature": "fun use(p: KMutableProperty<String>) {", "body": "}<EOL><EOL>fun test<NUM_LIT>() {<EOL><INDENT>use(C(<STR_LIT>)::y)<EOL>}"}
{"signature": "val subprojectBuildScript =", "body": "subProject(subproject).buildGradleKts<EOL>"}
{"signature": "fun foo<NUM_LIT>(c: MutableSet<Any>?) {", "body": "}"}
{"signature": "fun mapPutAll() {", "body": "<EOL><INDENT><INDENT>val map = createTestMap()<EOL><INDENT><INDENT>val newMap = emptyMutableMap()<EOL><INDENT><INDENT>newMap.putAll(map)<EOL><INDENT><INDENT>assertEquals(KEYS.size, newMap.size)<EOL><INDENT>}"}
{"signature": "package main<NUM_LIT><EOL>.", "body": ""}
{"signature": "fun setDeclarationScopeProvider(scopeProvider: DeclarationScopeProviderImpl) {", "body": "<EOL><INDENT><INDENT>this.scopeProvider = scopeProvider<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>uL until <NUM_LIT>uL step <NUM_LIT>L step <NUM_LIT>L) {", "body": "<EOL><INDENT><INDENT>ulongList += i<EOL><INDENT>}"}
{"signature": "val whenExhaustivenessTransformer =", "body": "FirWhenExhaustivenessTransformer(components)<EOL>"}
{"signature": "val  y =", "body": "this<EOL>"}
{"signature": "fun repoApplyPatch(<EOL><INDENT><INDENT>patchName: String,<EOL><INDENT><INDENT>patch: InputStream<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT>val git = Git.open(projectRepoDir)<EOL><INDENT><INDENT>git.apply()<EOL><INDENT><INDENT><INDENT>.setPatch(patch)<EOL><INDENT><INDENT><INDENT>.call()<EOL><INDENT><INDENT>git.close()<EOL><INDENT>}"}
{"signature": "when (val symbol = calleeReference.resolvedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is FirNamedFunctionSymbol -> visitNamedFunction(functionCall, symbol)<EOL><INDENT><INDENT><INDENT><INDENT>is FirConstructorSymbol -> visitConstructorCall(functionCall)<EOL><INDENT><INDENT><INDENT><INDENT>else -> NotEvaluated<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (projects.anyMatches(currentProject)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>branch = currentBranch<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val embedAndSignTaskPrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "val fieldSlice =", "body": "IdSignatureSymbolTableSlice<IrField, IrFieldSymbol>(lock)<EOL>"}
{"signature": "fun updateParameterTypesFromDeclaration(types: List<KotlinTypeMarker?>?) {", "body": "<EOL><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT>types as List<UnwrappedType?>?<EOL><INDENT><INDENT>parameterTypesFromDeclaration = types<EOL><INDENT>}"}
{"signature": "val isOperator<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><STR_LIT> !is MyClass<!><EOL>"}
{"signature": "val SHRU =", "body": "OperatorNameConventions.USHR<EOL>"}
{"signature": "if (errorSince != null && hiddenSince != null && !isReportDeprecatedSinceKotlinWithUnorderedVersions) {", "body": "<EOL><INDENT><INDENT><INDENT>isReportDeprecatedSinceKotlinWithUnorderedVersions = errorSince > hiddenSince<EOL><INDENT><INDENT>}"}
{"signature": "if (matchingItem == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>HistoryActionsForNoRepeat(evalState)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (RESULT.compareAndSet(this, COROUTINE_SUSPENDED, RESUMED)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>delegate.resumeWith(result)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (descriptor is SimpleFunctionDescriptor || descriptor is PropertyDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(descriptor.name)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isLocalFunction(descriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return asmTypeForAnonymousClass(<EOL><INDENT><INDENT><INDENT><INDENT>bindingContext,<EOL><INDENT><INDENT><INDENT><INDENT>(descriptor as FunctionDescriptor).unwrapInitialDescriptorForSuspendFunction()<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val packageMembersByName =", "body": "MultiMap<FqNameUnsafe, DeclarationDescriptorNonRoot>()<EOL>"}
{"signature": "val facadeClassName =", "body": "JvmClassName.byInternalName(origin.facadeClassName)<EOL>"}
{"signature": "fun visitBreak(x: JsBreak) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>invalidateTemporaries()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (buildTime in buildTimes.keys.first().getAllMetrics()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (buildTime.getParent() != null) continue<EOL><EOL><INDENT><INDENT><INDENT>printBuildTime(buildTime)<EOL><INDENT><INDENT>}"}
{"signature": "val aClassSaved =", "body": "savedClassLoader.loadClass(aClass.name)<EOL>"}
{"signature": "val oldIndex =", "body": "myVarIndex.removeInt(key)<EOL>"}
{"signature": "var a<NUM_LIT> =", "body": "this.lib.ClassA.createFromInt(<NUM_LIT>);<EOL>"}
{"signature": "var localMutableVariable =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (i in (<NUM_LIT> downTo <NUM_LIT>).reversed().reversed()) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val parentBuilder =", "body": "builder.owner.parentClosureBuilder<EOL>"}
{"signature": "val FILE_DECLARATION_TYPES =", "body": "TokenSet.orSet(KtTokenSets.DECLARATION_TYPES, TokenSet.create(KtStubElementTypes.SCRIPT))<EOL>"}
{"signature": "val sarr =", "body": "arrayOf(<STR_LIT>)<EOL>"}
{"signature": "val concatElements =", "body": "mutableListOf<JsExpression>()<EOL>"}
{"signature": "fun unfoldFunctionReference(reference: IrFunctionReference, callStack: CallStack) {", "body": "<EOL><INDENT>unfoldCallableReference(reference, callStack)<EOL>}"}
{"signature": "val superMethod =", "body": "superType.getClass()?.getSingleAbstractMethod()<EOL>"}
{"signature": "val inBlockModificationOwner =", "body": "nonLocalDeclarationForLocalChange(element) ?: return ChangeType.OutOfBlock<EOL>"}
{"signature": "if (backgroundColor != null) {", "body": "<EOL><INDENT><INDENT><INDENT>setBackgroundColorWithAnotherMethod(backgroundColor!!)<EOL><INDENT><INDENT>}"}
{"signature": "val safeAccess =", "body": "isExplicitReceiver && !implicitInvokeCheck && resolvedCall.call.isSemanticallyEquivalentToSafeCall<EOL>"}
{"signature": "val compare<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!><NUM_LIT>u >= <NUM_LIT>u<!><EOL>"}
{"signature": "val enumClassMembersGenerator =", "body": "EnumClassMembersGenerator(DeclarationGenerator(context))<EOL>"}
{"signature": "val QualifierValue =", "body": "kindOf(TowerGroupKind.QualifierValue)<EOL>"}
{"signature": "fun export(dependency: Any, configure: Closure<*>) {", "body": "<EOL><INDENT><INDENT>project.dependencies.add(exportConfigurationName, dependency, configure)<EOL><INDENT>}"}
{"signature": "val requireName =", "body": "scope.declareName(<STR_LIT>)<EOL>"}
{"signature": "val javaTypeParameterStack =", "body": "MutableJavaTypeParameterStack()<EOL>"}
{"signature": "val lambda =", "body": "originalCall.getValueArgument(originalCall.valueArgumentsCount - <NUM_LIT>)<EOL>"}
{"signature": "val whitespaceAndArrow =", "body": "psiFactory.createWhitespaceAndArrow()<EOL>"}
{"signature": "val moduleOutDir =", "body": "File(outDir, module)<EOL>"}
{"signature": "val shouldConvertFirstParameterToDescriptor =", "body": "samWithReceiverResolvers.any { it.shouldConvertFirstSamParameterToReceiver(abstractMethod) }<EOL>"}
{"signature": "val actualizerVisitor =", "body": "ActualizerVisitor(symbolRemapper)<EOL>"}
{"signature": "val originalText =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val zipEntries =", "body": "zipFile.entries()<EOL>"}
{"signature": "for (i in <NUM_LIT>uL..<NUM_LIT>uL) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "fun foo(p: Int??) {", "body": "<EOL><EOL>}"}
{"signature": "val SPACES =", "body": "<STR_LIT><EOL>"}
{"signature": "if (canGoNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>currentIndex++<EOL><INDENT><INDENT>}"}
{"signature": "if (lower.nullability != type.upperBound.nullability) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append('!')<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!variableDescriptor.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>mapReturnType(variableDescriptor, sw, backingFieldType)<EOL><INDENT><INDENT>}"}
{"signature": "if (messageCollector is GroupingMessageCollector) {", "body": "<EOL><INDENT><INDENT><INDENT>messageCollector.flush()<EOL><INDENT><INDENT>}"}
{"signature": "val upper_taylor_<NUM_LIT>_bound =", "body": "<NUM_LIT> / taylor_<NUM_LIT>_bound<EOL>"}
{"signature": "val minus<NUM_LIT>F =", "body": "<NUM_LIT>F<EOL>"}
{"signature": "val elseEntry =", "body": "element.entries.find { it.isElse }<EOL>"}
{"signature": "fun visitAnonymousFunctionExpressionNode(node: AnonymousFunctionExpressionNode, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitAnonymousFunctionExpressionNode(node)<EOL><INDENT>}"}
{"signature": "val isSubtypeFunction =", "body": "importRtFunction(<STR_LIT>)<EOL>"}
{"signature": "val classToType =", "body": "mutableMapOf<ClassDescriptor, ObjCTypeForKotlinType>()<EOL>"}
{"signature": "val startUnitTests =", "body": "maybeGetFunction(<STR_LIT>, kotlinTestPackage)<EOL>"}
{"signature": "fun test(handle: VarHandle) {", "body": "<EOL><INDENT><INDENT>handle.set(this, false)<EOL><INDENT>}"}
{"signature": "if (inlineLambdaInfo.isInlineLambda(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitFunction(declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (value > field) {", "body": "<EOL><INDENT><INDENT><INDENT>field = value<EOL><INDENT><INDENT>}"}
{"signature": "val newTryStartLabel =", "body": "LabelNode(Label())<EOL>"}
{"signature": "while (current != null) {", "body": "<EOL><INDENT><INDENT>val name = current.referencedName ?: return null<EOL><EOL><INDENT><INDENT>reversedNames.add(name)<EOL><INDENT><INDENT>current = current.qualifier<EOL><INDENT>}"}
{"signature": "val lastInstruction =", "body": "expression[lastInstructionIndex]<EOL>"}
{"signature": "val resultTime =", "body": "manager.reportCumulativeTime()<EOL>"}
{"signature": "fun testElvis<NUM_LIT>() {", "body": "<EOL><INDENT>todo() <!UNREACHABLE_CODE, USELESS_ELVIS!>?: <STR_LIT><!><EOL>}"}
{"signature": "if (type.isUnit()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (correspondingDeclaration is FirTypeAliasSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>val qualifierType = correspondingDeclaration.constructType(typeArgumentsWithSourceInfo.toTypedArray(), isNullable = false)<EOL><INDENT><INDENT><INDENT>val expandedLhsType = qualifierType.fullyExpandedType(context.session)<EOL><INDENT><INDENT><INDENT>typeArgumentsWithSourceInfo = expandedLhsType.typeArguments.toList()<EOL><EOL><INDENT><INDENT><INDENT>val expandedClassSymbol = correspondingDeclaration.resolvedExpandedTypeRef.toRegularClassSymbol(context.session) ?: return<EOL><INDENT><INDENT><INDENT>typeParameterSymbols = expandedClassSymbol.typeParameterSymbols<EOL><INDENT><INDENT>}"}
{"signature": "val moduleExportedNames =", "body": "moduleFragment.collectExportedNames()<EOL>"}
{"signature": "val ownName =", "body": "getNameForAnnotatedObject(descriptor, bindingContext) ?: getSuggestedName(descriptor)<EOL>"}
{"signature": "for (fqNameWithNames in fqNamesWithNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val (fqName, names) = extractFqNameAndMemberNames(fqNameWithNames)<EOL><INDENT><INDENT><INDENT><INDENT>printer.processClass(fqName, names, part.session, part.firAnalyzerFacade.scopeSession, currentModule)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resumeFunction =", "body": "JsFunction(function.scope.parent, JsBlock(), <STR_LIT>)<EOL>"}
{"signature": "val isBinaryOperator =", "body": "name in ConvertibleIntegerOperators.binaryOperatorsNames<EOL>"}
{"signature": "val stat =", "body": "GC.lastGCInfo<EOL>"}
{"signature": "val nextCallable =", "body": "CallableToPatch(next, nextNames)<EOL>"}
{"signature": "import JavaClass.", "body": "testStatic<EOL>"}
{"signature": "val innerClassesDiffs =", "body": "ArrayList<DiffEntry>()<EOL>"}
{"signature": "for (i in 'A' .. N) {", "body": "<EOL><INDENT><INDENT>sum += i.toInt()<EOL><INDENT>}"}
{"signature": "fun generateFinallyBlock() {", "body": "<EOL><INDENT><INDENT><INDENT>finallyBlock.generate()<EOL><INDENT><INDENT>}"}
{"signature": "val invokeProcessor =", "body": "InvokeTowerProcessor(scopeTower, name, factoryProviderForInvoke, explicitReceiver)<EOL>"}
{"signature": "if (typeRefWithNullability.isMarkedNullable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ia<NUM_LIT> =", "body": "ia<NUM_LIT>testInt<NUM_LIT>D()<EOL>"}
{"signature": "if (newData == null) {", "body": "<EOL><INDENT><INDENT><INDENT>oldData.collectAll(isRemoved = true, isAdded = false)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val isAnnotationQualifiedName =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>(qualifiedName?.startsWith(<STR_LIT>) == true || qualifiedName?.startsWith(<STR_LIT>) == true)<EOL>"}
{"signature": "if (property.initializer != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>storeVariableReturnType(property)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (component != null) {", "body": "<EOL><INDENT><INDENT>val kotlinLanguageVersion: String by rootProject.extra<EOL><INDENT><INDENT>manifest.attributes(<EOL><INDENT><INDENT><INDENT><STR_LIT> to component,<EOL><INDENT><INDENT><INDENT><STR_LIT> to kotlinLanguageVersion<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val nextState =", "body": "f(state)<EOL>"}
{"signature": "val podInstallTaskName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (typeArgument is SimpleTypeArgument) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>csBuilder.addEqualityConstraint(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>freshVariable.defaultType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getTypePreservingFlexibilityWrtTypeVariable(typeArgument.type, freshVariable),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ExplicitTypeParameterConstraintPositionImpl(typeArgument)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun include(vararg fs: Family) {", "body": "<EOL><INDENT><INDENT>for (f in fs) familyPrimitives[f] = defaultPrimitives(f)<EOL><INDENT>}"}
{"signature": "fun doCompileAgainstAndroidSdkTest(path: String) {", "body": "<EOL><INDENT><INDENT>createAndroidAPIEnvironment(path)<EOL><INDENT><INDENT>doMultiFileTest(path)<EOL><INDENT>}"}
{"signature": "val declarationIsFinal =", "body": "declaration.isEffectivelyFinal(session)<EOL>"}
{"signature": "when (overridabilityResult) {", "body": "<EOL><INDENT><INDENT><INDENT>OverridingUtil.OverrideCompatibilityInfo.Result.OVERRIDABLE -> Result.OVERRIDABLE<EOL><INDENT><INDENT><INDENT>else -> Result.UNKNOWN<EOL><INDENT><INDENT>}"}
{"signature": "package symbols for top-level packages (subpackages of root).", "body": "This matches the behavior<EOL>"}
{"signature": "if (user == null) {", "body": "<EOL><INDENT><INDENT>request.userSettingsFile = File(<EOL><INDENT><INDENT><INDENT>File(System.getProperty(<STR_LIT>)).absoluteFile,<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val isOrSequence =", "body": "proto.orArgumentCount != <NUM_LIT><EOL>"}
{"signature": "if (declaration.isExtension) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(jsNameSource, FirJsErrors.JS_NAME_PROHIBITED_FOR_EXTENSION_PROPERTY, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (invalidChars.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsNative.INVALID_OBJC_NAME_CHARS.on(reportLocation, invalidChars.joinToString(<STR_LIT>)))<EOL><INDENT><INDENT>}"}
{"signature": "val yh =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun stringEquals() {", "body": "<EOL><INDENT><INDENT>assertFalse(platformNull<String>().equals(<STR_LIT>, ignoreCase = false))<EOL><INDENT><INDENT>assertFalse(platformNull<String>().equals(<STR_LIT>, ignoreCase = true))<EOL><INDENT><INDENT>assertFalse(<STR_LIT>.equals(platformNull<String>(), ignoreCase = false))<EOL><INDENT><INDENT>assertFalse(<STR_LIT>.equals(platformNull(), ignoreCase = true))<EOL><INDENT><INDENT>assertTrue(platformNull<String>().equals(platformNull(), ignoreCase = true))<EOL><INDENT><INDENT>assertTrue(platformNull<String>().equals(platformNull<String>(), ignoreCase = false))<EOL><INDENT>}"}
{"signature": "if (function.origin == IrDeclarationOrigin.LOCAL_FUNCTION_FOR_LAMBDA) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>slotCount++<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val suggestMakingItAbstract =", "body": "containingClass != null && !property.hasAnyAccessorImplementation<EOL>"}
{"signature": "import AnotherRootClass as Arc<EOL>.", "body": ""}
{"signature": "if (valueParameterBridge is MethodBridgeValueParameter.Mapped) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(<EOL><INDENT><INDENT><INDENT><INDENT>valueParameterBridge to KtObjCParameterData(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>name = valueParameters[index].name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>isVararg = valueParameters[index].isVararg,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type = valueParameters[index].returnType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>isReceiver = false<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val transitiveDepModuleName =", "body": "<STR_LIT><EOL>"}
{"signature": "val unoptimizedName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (hx > <NUM_LIT> || hx <= (<NUM_LIT>xbfd<NUM_LIT>bec<NUM_LIT>toInt())) {", "body": "<EOL><INDENT><INDENT><INDENT>k = <NUM_LIT>;f = x;hu = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val resultClassTypeName =", "body": "resultClass?.typeName ?: return null<EOL>"}
{"signature": "fun useDec() {", "body": "a<!PROPERTY_AS_OPERATOR, RESULT_TYPE_MISMATCH!>--<!> }"}
{"signature": "when (val platform = target.platform) {", "body": "<EOL><INDENT><INDENT><INDENT>Platform.Common -> <STR_LIT><EOL><INDENT><INDENT><INDENT>Platform.Native -> if (target.backend == Backend.Wasm) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>else -> platform.name.lowercase().capitalize()<EOL><INDENT><INDENT>}"}
{"signature": "if (!JsAstUtils.isUndefinedExpression(result[i])) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val signatureHashCalculator =", "body": "IdSignatureHashCalculator(icHasher)<EOL>"}
{"signature": "for (i in intArray.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>sum += intArray[i]<EOL><INDENT><INDENT>}"}
{"signature": "fun testAbsence(name: String, annotations: Array<out Annotation>) {", "body": "<EOL><INDENT>assertEquals(<NUM_LIT>, annotations.filterIsInstance<Ann>().size, <STR_LIT>)<EOL>}"}
{"signature": "val targetSibling =", "body": "targetParent.resolve(<STR_LIT>).createFile()<EOL>"}
{"signature": "val gg =", "body": "gm.kotlinFunction ?: return <STR_LIT><EOL>"}
{"signature": "val KOTLIN_DSL_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val argumentsCache =", "body": "ConcurrentHashMap<Class<*>, Map<String, ArgumentField>>()<EOL>"}
{"signature": "when (lookAheadChar) {", "body": "<EOL><INDENT><INDENT><INDENT>'\\\\' -> return processEscapedChar()<EOL><INDENT><INDENT><INDENT>'['  -> lookAhead = CHAR_LEFT_SQUARE_BRACKET<EOL><INDENT><INDENT><INDENT>']'  -> lookAhead = CHAR_RIGHT_SQUARE_BRACKET<EOL><INDENT><INDENT><INDENT>'^'  -> lookAhead = CHAR_CARET<EOL><INDENT><INDENT><INDENT>'&'  -> lookAhead = CHAR_AMPERSAND<EOL><INDENT><INDENT><INDENT>'-'  -> lookAhead = CHAR_HYPHEN<EOL><INDENT><INDENT>}"}
{"signature": "package part, add a separate deserialized scope<EOL>.", "body": ""}
{"signature": "val argsRegex =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "if (node.fir in firCandidates) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val decomposition =", "body": "getDecomposition(codePoint)<EOL>"}
{"signature": "val functionFoo =", "body": "functions.values.firstOrNull { it.name.asString() == <STR_LIT> } ?:<EOL>"}
{"signature": "val oldTypeTable =", "body": "oldProto.typeTableOrNull?.let { TypeTable(it) }<EOL>"}
{"signature": "val bytesPerGroup =", "body": "bytesFormat.bytesPerGroup<EOL>"}
{"signature": "val containerTmp =", "body": "destructee()<EOL>"}
{"signature": "if (callee.dispatchReceiverParameter != null && funRef.dispatchReceiver == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irCall.dispatchReceiver = getValue(valueParameters[i++])<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val forLoopNextBlock =", "body": "bodyBlock.statements[forLoopNextBlockIndex] as IrContainerExpression<EOL>"}
{"signature": "if (isReadingSettingsFromEnvironmentAllowed) {", "body": "<EOL><INDENT><INDENT><INDENT>parseCommandLineArgumentsFromEnvironment(arguments)<EOL><INDENT><INDENT>}"}
{"signature": "var log =", "body": "<STR_LIT><EOL>"}
{"signature": "val putIndex =", "body": "length++<EOL>"}
{"signature": "fun foo(a: A<String>) {", "body": "<EOL><INDENT><INDENT>val x: String = a.<!INVISIBLE_REFERENCE!>t<!><INDENT> }"}
{"signature": "val xProp =", "body": "kClass.declaredMemberProperties.first { it.name == <STR_LIT> } as KProperty<NUM_LIT><Any, Any><EOL>"}
{"signature": "import LibPackCase<NUM_LIT>b.", "body": "plusAssign<EOL>"}
{"signature": "if (throwInternalEx<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>throw Exception<NUM_LIT>(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "else if (<NUM_LIT> ..< n .. n ..< n ..< n) {", "body": "}"}
{"signature": "val packagesToLookupInCompletion =", "body": "mutableListOf<LazyAndroidExtensionsPackageFragmentDescriptor>()<EOL>"}
{"signature": "if (!implementation.isPublic) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun specialFor(f: Family, action: () -> Unit) {", "body": "<EOL><INDENT><INDENT>if (family == f)<EOL><INDENT><INDENT><INDENT>action()<EOL><INDENT>}"}
{"signature": "fun foo(c: C) {", "body": "<EOL><INDENT>c.bar<EOL>}"}
{"signature": "if (properties?.isStartOfARange != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>properties = null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val toCompressedNode =", "body": "nodeIds[edge.node] ?: continue<EOL>"}
{"signature": "val threadMXBean =", "body": "ManagementFactoryHelper.getThreadMXBean()<EOL>"}
{"signature": "when (val result = resultRef.get()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is Throwable -> throw result<EOL><INDENT><INDENT><INDENT><INDENT>else -> Assertions.assertEquals(<STR_LIT>, result)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!(d<NUM_LIT> == d || (d<NUM_LIT> - d).absoluteValue <= (<NUM_LIT> * <NUM_LIT>.pow(-decimals)).toDuration(unit))) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testVeryLong() {", "body": "<EOL><INDENT><INDENT>doTest(<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val isNative =", "body": "SourceSetConstraint { it.isNativeSourceSet.getOrThrow() }<EOL>"}
{"signature": "val logLevel =", "body": "getOptional<CommonizerLogLevel, LogLevelOptionType>() ?: CommonizerLogLevel.Quiet<EOL>"}
{"signature": "else if (s == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (immediateUpperBounds.size != immediateUpperBounds.toSet().size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var hasInline =", "body": "false<EOL>"}
{"signature": "val formattedPlatformNames =", "body": "compilationsWithCompileOnlyDependencies<EOL>"}
{"signature": "if (knownClassNamesInPackage != null) return knownClassNamesInPackage.mapTo(HashSet()) {", "body": "Name.identifier(it) }"}
{"signature": "else if (value >= java.lang.Byte.MIN_VALUE && value <= java.lang.Byte.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IntInsnNode(Opcodes.BIPUSH, value)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var ancestorFqName =", "body": "packageFqName<EOL>"}
{"signature": "val test_za =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>z === a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a === z<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>z !== a<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>a !== z<!><EOL>"}
{"signature": "val generationRoot =", "body": "project.projectDir.resolve(dirName)<EOL>"}
{"signature": "val byteArrayOutputStream =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "if (nameIdentifier == null) {", "body": "<EOL><INDENT><INDENT><INDENT>val psiFactory = KtPsiFactory(project)<EOL><INDENT><INDENT><INDENT>val result = addAfter(psiFactory.createIdentifier(name), getObjectKeyword()!!)<EOL><INDENT><INDENT><INDENT>addAfter(psiFactory.createWhiteSpace(), getObjectKeyword()!!)<EOL><EOL><INDENT><INDENT><INDENT>result<EOL><INDENT><INDENT>}"}
{"signature": "import <!UNRESOLVED_IMPORT!>Outer<!>.", "body": "`<no name provided>`.getInner<EOL>"}
{"signature": "val protectedField =", "body": "<STR_LIT>;<EOL>"}
{"signature": "fun bar(z: Z<NUM_LIT>) {", "body": "}<EOL><INDENT>fun Z<NUM_LIT>bar() {}"}
{"signature": "val seenTopLevelPackages =", "body": "mutableSetOf<Name>()<EOL>"}
{"signature": "fun canCreateALazySchemeWithOpenParameters() {", "body": "<EOL><INDENT><INDENT>val scheme = schemeOf(<STR_LIT>)<EOL><INDENT><INDENT>val lazyScheme = LazyScheme(scheme)<EOL><INDENT><INDENT>val schemeCopy = lazyScheme.toScheme()<EOL><INDENT><INDENT>assertEquals(scheme, schemeCopy)<EOL><INDENT>}"}
{"signature": "val canonicalPath =", "body": "File(path).canonicalPath<EOL>"}
{"signature": "val values =", "body": "enumValues<Z>()<EOL>"}
{"signature": "if (value.isTransparentScope) {", "body": "<EOL><INDENT><INDENT><INDENT>null<EOL><INDENT><INDENT>}"}
{"signature": "val delegatedLevel =", "body": "delegatesTo.computeDelegationLevel()<EOL>"}
{"signature": "val TF_REFLECTION_SHOW_REL_NAME =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (state == State.NAMED_ONLY_ARGUMENTS) {", "body": "<EOL><INDENT><INDENT><INDENT>addDiagnostic(MixingNamedAndPositionArguments(argument))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val dinfp =", "body": "Double.POSITIVE_INFINITY<EOL>"}
{"signature": "val nextInputToOutput =", "body": "inputsToExpectedOutputsIter.next()<EOL>"}
{"signature": "val rawModuleFragment =", "body": "doPsi<NUM_LIT>Ir(files, analysisResult)<EOL>"}
{"signature": "val captured =", "body": "linkedMapOf<DeclarationDescriptor, JsName>()<EOL>"}
{"signature": "if (func.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val type = KotlinTypes.any.makeNullable().toStubIrType()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameters += FunctionParameterStub(<STR_LIT>, type, isVararg = true)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val FORMAT_VERSION_<NUM_LIT>_<NUM_LIT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val sourceIndices =", "body": "(frame.getStack(frame.stackSize - index - <NUM_LIT>) as? Aload<NUM_LIT>BasicValue)?.indices ?: continue<EOL>"}
{"signature": "var digits =", "body": "intval.asDynamic().toString(radix).unsafeCast<String>()<EOL>"}
{"signature": "val minY =", "body": "<NUM_LIT>f<EOL>"}
{"signature": "if (enableFir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageVersion.KOTLIN_<NUM_LIT>_<NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val initialBoundRender =", "body": "arrow + typeRendered.renderType(bound.constrainingType) + if (!bound.isProper) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "if (packagePrefix.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>sourceRootTag.setAttribute(JpsModuleRootModelSerializer.PACKAGE_PREFIX_ATTRIBUTE, packagePrefix)<EOL><INDENT><INDENT>}"}
{"signature": "var STATE_HELD =", "body": "<NUM_LIT><EOL>"}
{"signature": "val noLocation =", "body": "SourceLocation.NoLocation(<STR_LIT>)<EOL>"}
{"signature": "val STABLE_RELEASE =", "body": "<STR_LIT><EOL>"}
{"signature": "val commonMainCompileTask =", "body": "linuxX<NUM_LIT>Target.compilations.main.compileTaskProvider.get()<EOL>"}
{"signature": "if (it.number != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT> + it.number.toString()<EOL><INDENT>}"}
{"signature": "fun doStuffEq() {", "body": "}<EOL>fun doStuffNotEq() {}"}
{"signature": "val anno =", "body": "C::class.java.annotations.filterIsInstance<Anno>().first()<EOL>"}
{"signature": "val currentConstraintSystem =", "body": "<EOL><INDENT><INDENT>prepareSharedBaseSystem(parentConstraintSystem, components.session.inferenceComponents)<EOL>"}
{"signature": "val minor =", "body": "string.substring(minorStart + <NUM_LIT>, patchStart)<EOL>"}
{"signature": "val emptyBoxInv =", "body": "MyBoxInv<String?>(null)<EOL>"}
{"signature": "val postprocessingSteps =", "body": "SmartList<Psi<NUM_LIT>IrPostprocessingStep>()<EOL>"}
{"signature": "val jsTypeName =", "body": "jsTypeOf(value)<EOL>"}
{"signature": "val byVisibility =", "body": "Visibilities.compare(aFir.visibility, bFir.visibility) ?: <NUM_LIT><EOL>"}
{"signature": "val PARCEL_ID =", "body": "ClassId(FqName(<STR_LIT>), Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "if (!isVoidReturned) {", "body": "<EOL><INDENT><INDENT><INDENT>val result = translateArgument(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, cfunction[<NUM_LIT>], Direction.KOTLIN_TO_C, builder)<EOL><INDENT><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (captureScope.hasCapturedComposableCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>captureScope.realizeAllDirectChildren()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expression.asCoalescableGroup(captureScope)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (hasLowPriorityAnnotation(annotations)) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.reportDiagnostic(ResolvedWithLowPriority)<EOL><INDENT><INDENT>}"}
{"signature": "val hasStableParameterNames =", "body": "buildParameters(parameters, platform)<EOL>"}
{"signature": "package fragment preserving fq-name<EOL>.", "body": ""}
{"signature": "while (items.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val item = items.removeAt(items.size - <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>P(item)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val commonCalls =", "body": "arrayListOf<PSICompletedCallInfo>()<EOL>"}
{"signature": "var receiverIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun noGenerics_InterfaceWithFun() {", "body": "}<EOL><EOL><INDENT>fun withOuterGeneric_InterfaceWithFun(): T {}"}
{"signature": "if (subDeclaration.visibility == Visibilities.Private && subDeclaration.name.isDelegated) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>subDeclaration.source,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>FirErrors.UNSUPPORTED,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>context<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val objCProtocolFqName =", "body": "interopPackageName.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "fun test(inv: Inv<Int>) {", "body": "<EOL><INDENT>foo(inv, materializeInvInv())<EOL>}"}
{"signature": "fun fillCompilerArguments(<EOL><INDENT><INDENT>from: org.jetbrains.kotlin.gradle.dsl.KotlinNativeCompilerOptions,<EOL><INDENT><INDENT>args: org.jetbrains.kotlin.cli.common.arguments.K<NUM_LIT>NativeCompilerArguments,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerOptionsHelper.fillCompilerArguments(from, args)<EOL><INDENT><INDENT>args.moduleName = from.moduleName.orNull<EOL><INDENT>}"}
{"signature": "val actualArgType =", "body": "actualArg.typeOrNull ?: continue<EOL>"}
{"signature": "val androidTestSourceSet =", "body": "android.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val labelField =", "body": "coroutineClass.addField(Name.identifier(<STR_LIT>), symbols.nativePtrType, true)<EOL>"}
{"signature": "if (safeIsString(x) == false) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "fun test(obj: JsObject, key: Int, oldValue: Any?, newValue: Any) {", "body": "<EOL><INDENT>assertEquals(oldValue, obj.take(key))<EOL><INDENT>obj.put(key, newValue)<EOL><INDENT>assertEquals(newValue, obj.take(key))<EOL><INDENT>obj.put(key, null)<EOL><INDENT>assertEquals(null, obj.take(key))<EOL>}"}
{"signature": "if (hasSetterFlags()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + setterFlags<EOL><INDENT>}"}
{"signature": "if (!jvmDefaultMode.isEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.JVM_DEFAULT_IN_DECLARATION.on(reportOn, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun getCategory() {", "body": "<EOL><INDENT><INDENT>assertEquals(CharCategory.DECIMAL_DIGIT_NUMBER, '<NUM_LIT>'.category)<EOL><INDENT><INDENT>assertEquals(CharCategory.CURRENCY_SYMBOL, '$'.category)<EOL><INDENT><INDENT>assertEquals(CharCategory.LOWERCASE_LETTER, 'a'.category)<EOL><INDENT><INDENT>assertEquals(CharCategory.UPPERCASE_LETTER, '\u00d5'.category)<EOL><EOL><INDENT><INDENT>assertTrue(',' in CharCategory.OTHER_PUNCTUATION)<EOL><INDENT>}"}
{"signature": "if (result === a) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>a[size] = null<EOL><INDENT><INDENT><INDENT><INDENT>a<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typesSubTypes =", "body": "Array(allTypes.size) { mutableListOf<DataFlowIR.Type.Declared>() }<EOL>"}
{"signature": "if (fieldAnnotation != null && !descriptor.isVar) {", "body": "<EOL><INDENT><INDENT><INDENT>val annotationEntry = DescriptorToSourceUtils.getSourceFromAnnotation(fieldAnnotation) ?: return<EOL><INDENT><INDENT><INDENT>context.trace.report(Errors.VOLATILE_ON_VALUE.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "val projectB =", "body": "buildProject()<EOL>"}
{"signature": "val trueCallee =", "body": "callee.resolveFakeOverrideOrFail()<EOL>"}
{"signature": "val arrayOfClassLoaders =", "body": "getParentClassLoaders(clsLoader)<EOL>"}
{"signature": "val setPropertiesToThrowableInstanceSymbol =", "body": "<EOL><INDENT><INDENT>symbolTable.descriptorExtension.referenceSimpleFunction(getJsInternalFunction(<STR_LIT>))<EOL>"}
{"signature": "val referencedFunction =", "body": "functionReference.symbol.owner<EOL>"}
{"signature": "if (sameSuperClassCount && sameSuperInterfaceCount) {", "body": "<EOL><INDENT><INDENT><INDENT>return defaultSuperTypes<EOL><INDENT><INDENT>}"}
{"signature": "if (config.produceCInterface) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>CExportFiles(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cppAdapter = tempFiles.create(<STR_LIT>, <STR_LIT>).javaFile(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>bitcodeAdapter = tempFiles.create(<STR_LIT>, <STR_LIT>).javaFile(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>header = outputFiles.cAdapterHeader.javaFile(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>def = if (config.target.family == Family.MINGW) outputFiles.cAdapterDef.javaFile() else null,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val functionBody =", "body": "function.body as IrBlockBody<EOL>"}
{"signature": "val currentTypeMapping =", "body": "HashMap<String, String?>()<EOL>"}
{"signature": "if (indirectSubclass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val platformCompilerOpts =", "body": "<EOL><INDENT><INDENT><INDENT>if (clang is ClangArgs.Jni)<EOL>"}
{"signature": "val superCollectionClasses =", "body": "findRelevantSuperCollectionClasses()<EOL>"}
{"signature": "if (dependencySubstitution != null) {", "body": "<EOL><INDENT><INDENT><INDENT>platformLikeCompileDependenciesConfiguration.resolutionStrategy.dependencySubstitution(dependencySubstitution)<EOL><INDENT><INDENT>}"}
{"signature": "val typeRefsToReturn =", "body": "typeRefsFromSession ?: getResolvedSuperTypeRefsForOutOfSessionDeclaration(firClass)<EOL>"}
{"signature": "val functionMap =", "body": "ConcurrentHashMap<FunctionKey, IrFunctionSymbol>()<EOL>"}
{"signature": "val PurpleGrey<NUM_LIT> =", "body": "Color(<NUM_LIT>xFF<NUM_LIT>b<NUM_LIT>)<EOL>"}
{"signature": "fun test_<NUM_LIT>(map: Map<String, String>) {", "body": "<EOL><INDENT>val x = <!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>map[<NUM_LIT>]<!> }"}
{"signature": "val DECLARATION_ORIGIN_STATIC_THREAD_LOCAL_INITIALIZER =", "body": "IrDeclarationOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "when (p) {", "body": "<EOL><INDENT><INDENT>is SubClass<NUM_LIT> -> p.t<EOL><INDENT><INDENT>is SubClass<NUM_LIT> -> <STR_LIT><EOL><INDENT>}"}
{"signature": "fun visitContinue(jump: IrContinue) {", "body": "<EOL><INDENT><INDENT>val headState = loopMap[jump.loop]!!.headState<EOL><INDENT><INDENT>resetExceptionStateIfNeeded(jump.loop)<EOL><INDENT><INDENT>doDispatch(headState)<EOL><INDENT>}"}
{"signature": "val defaultTxtFile =", "body": "File(file.path.replace(<STR_LIT>.toRegex(), <STR_LIT>))<EOL>"}
{"signature": "val unbounded<NUM_LIT> =", "body": "Outer.DefaultImpls::f<EOL>"}
{"signature": "val relativeFilePath =", "body": "file.toRelativeString(testDataDir)<EOL>"}
{"signature": "val kFunctionFqn =", "body": "<EOL><INDENT><INDENT>reflectFunctionClassFqn(reflectionFunctionClassName(true, arity))<EOL>"}
{"signature": "if (result != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (kotlinFile.packageFqName != packageFqName) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptySet()<EOL><INDENT><INDENT>}"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (data.analysisApiMode == AnalysisApiMode.Standalone) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(sub: Sub) {", "body": "<EOL><INDENT>C().foo(<STR_LIT>, sub)<EOL>}"}
{"signature": "val androidStyleUnitTest =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val dependencyFiles =", "body": "exportLibrariesResolvedConfiguration.getArtifacts(it).map { it.file }.filterKlibsPassedToCompiler()<EOL>"}
{"signature": "val containingCallExpressionForCalleeExpression =", "body": "psi.getContainingCallExpressionForCalleeExpression()<EOL>"}
{"signature": "if (expression is IrInlinedFunctionBlock && expression.isFunctionInlining()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitTry(aTry: IrTry, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitTry(aTry)<EOL><INDENT>}"}
{"signature": "val sizeBefore =", "body": "scopes.size<EOL>"}
{"signature": "val copyOfSymbol =", "body": "symbols.copyOf[arraySymbol]!!<EOL>"}
{"signature": "val gradleTaskName =", "body": "EnvironmentVariable.GRADLE_TASK_NAME.readValue()<EOL>"}
{"signature": "fun accept(visitor: KmTypeParameterExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibTypeParameterExtensionVisitor)<EOL><INDENT><INDENT>annotations.forEach(visitor::visitAnnotation)<EOL><INDENT><INDENT>uniqId?.let(visitor::visitUniqId)<EOL><INDENT>}"}
{"signature": "fun fn<NUM_LIT>() {", "body": "}<EOL>fun fn<NUM_LIT>(x: Any) {}"}
{"signature": "val TYPE_PARCELER_CLASS_IDS =", "body": "createClassIds(<STR_LIT>)<EOL>"}
{"signature": "if (isConfigured) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return@withPlugin<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for ((key, value) in getAdditionalArguments(project, variantData, androidExtension)) {", "body": "<EOL><INDENT><INDENT><INDENT>javacArgs += <STR_LIT> + key + (if (value.isNotEmpty()) <STR_LIT> else <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val cacheDeserializationStrategy =", "body": "CacheDeserializationStrategy.SingleFile(file.path, file.packageFqName.asString())<EOL>"}
{"signature": "for (supertype in refinedSupertypes()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fromSupertypes.addAll(supertype.memberScope.getContributedVariables(name, NoLookupLocation.FOR_ALREADY_TRACKED))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val linesMapping = file.sourceFileLinesMapping) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KtSourceFileLinesMappingFromLineStartOffsets -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>NaiveSourceBasedFileEntryImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>file.sourceFile?.path ?: file.sourceFile?.name ?: file.name,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>linesMapping.lineStartOffsets,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>linesMapping.lastOffset<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is KtPsiSourceFileLinesMapping -> PsiIrFileEntry(linesMapping.psiFile)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>NaiveSourceBasedFileEntryImpl(file.sourceFile?.path ?: file.sourceFile?.name ?: file.name)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun usage() {", "body": "<EOL><INDENT><expr>dependency.foo()</expr><EOL>}"}
{"signature": "fun matchEscapeRandomChar() {", "body": "<EOL><INDENT><INDENT>if (!supportsEscapeAnyCharInRegex) return<EOL><EOL><INDENT><INDENT>val regex = <STR_LIT>.toRegex()<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "var markedWithError =", "body": "markedWithErrorElements.containsKey(expression)<EOL>"}
{"signature": "fun callUseAWithC() {", "body": "<EOL><INDENT>useA(getC())<EOL>}"}
{"signature": "val typeAliasesAllowed =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.TypeAliases)<EOL>"}
{"signature": "when (sort) {", "body": "<EOL><INDENT>Type.BOOLEAN, Type.BYTE, Type.CHAR, Type.SHORT -> true<EOL><INDENT>else -> false<EOL>}"}
{"signature": "fun move(from: Int, to: Int, count: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until fileCount) {", "body": "<EOL><INDENT><INDENT><INDENT>val fileStream = klib.file(i).codedInputStream<EOL><INDENT><INDENT><INDENT>val fileProto = ProtoFile.parseFrom(fileStream, ExtensionRegistryLite.newInstance())<EOL><INDENT><INDENT><INDENT>val fileReader = IrLibraryFileFromBytes(IrKlibBytesSource(klib, i))<EOL><INDENT><INDENT><INDENT>val file = fileReader.createFile(moduleFragment, fileProto)<EOL><EOL><INDENT><INDENT><INDENT>fileDeserializationStates.add(deserializeIrFile(fileProto, file, fileReader, i, delegate, containsErrorCode))<EOL><INDENT><INDENT><INDENT>if (!strategyResolver(file.fileEntry.name).onDemand)<EOL><INDENT><INDENT><INDENT><INDENT>moduleFragment.files.add(file)<EOL><INDENT><INDENT>}"}
{"signature": "if (nodeIds[node] != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fringe += node<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeArgumentsCount >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>check(typeArgumentsCount == <NUM_LIT> && srcArrDescr.arrayClass.typeParameters.size == <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putTypeArgument(<NUM_LIT>, srcArrDescr.elementType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val loadedConstants =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val resultAsFloat<NUM_LIT> =", "body": "floatLambda(f<NUM_LIT>ref)<EOL>"}
{"signature": "fun expectMinMaxWith(min: UByte, max: UByte, elements: UByteArray, comparator: Comparator<UByte>) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(min, elements.minWith(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWith(comparator))<EOL><INDENT>}"}
{"signature": "val rev =", "body": "data.reversed()<EOL>"}
{"signature": "if (codePoint.lowercaseCodePoint() != codePoint) {", "body": "<INDENT><INDENT><INDENT> break<EOL><INDENT><INDENT>}"}
{"signature": "val arrayUnderTest =", "body": "array.copyOf()<EOL>"}
{"signature": "if (operator == IrTypeOperator.REINTERPRET_CAST) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>this.typeOperand<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val booleanArr =", "body": "AtomicBooleanArray(<NUM_LIT>)<EOL>"}
{"signature": "val symbolByReference =", "body": "referenceExpression.mainReference.resolveToSymbol() ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (consumerValue in candidateValues) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>closestMatch(checkNotNull(consumerValue))<EOL><INDENT><INDENT><INDENT><INDENT>return@with<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val groupedByParentClassId =", "body": "FactoryMap.create<CirEntityId, MutableList<ClassEntry>> { ArrayList() }<EOL>"}
{"signature": "fun pushBuilder(scopingElement: KtElement, subroutine: KtElement, shouldInline: Boolean) {", "body": "<EOL><INDENT><INDENT>val worker = ControlFlowInstructionsGeneratorWorker(scopingElement, subroutine, shouldInline)<EOL><INDENT><INDENT>builders.push(worker)<EOL><INDENT><INDENT>builder = worker<EOL><INDENT>}"}
{"signature": "if (isDeprecated(access)) {", "body": "<EOL><INDENT><INDENT><INDENT>val type = treeMaker.Type(Type.getType(java.lang.Deprecated::class.java))<EOL><INDENT><INDENT><INDENT>annotations = annotations.append(treeMaker.Annotation(type, JavacList.nil()))<EOL><INDENT><INDENT>}"}
{"signature": "val leftDfv =", "body": "key.toDataFlowValue(builtIns) ?: continue<EOL>"}
{"signature": "val CACHE_FOR_INCORPORATION_MAX_SIZE =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun bar(y: Int) {", "body": "<EOL><INDENT><INDENT>bar(y)<EOL><INDENT>}"}
{"signature": "fun visit(flexibleType: CirFlexibleType) {", "body": "<EOL><INDENT><INDENT>visit(flexibleType.lowerBound)<EOL><INDENT><INDENT>visit(flexibleType.upperBound)<EOL><INDENT>}"}
{"signature": "val transformedAssignment =", "body": "alteredAssignments.first().first<EOL>"}
{"signature": "val callableOrigin =", "body": "callableDeclaration.origin<EOL>"}
{"signature": "val CHECK_STRING_EQUALS_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val changes =", "body": "TransformerPass(internalClassName, methodNode, generationState).run()<EOL>"}
{"signature": "val snippetValue =", "body": "compiledSnippet.get()!!<EOL>"}
{"signature": "val testMap<NUM_LIT> =", "body": "RequestInputParameters(mapOf(RequestFields.ENUM_ONE to FieldValue(<STR_LIT>)))<EOL>"}
{"signature": "if (old.getExtensionCount(BuiltInsProtoBuf.propertySetterAnnotation) != new.getExtensionCount(BuiltInsProtoBuf.propertySetterAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (!isContainingThisProject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw GradleException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun addRoot(moduleName: String, libraryName: String, getLibrary: (PathProvider) -> File, noLibraryArgument: String) {", "body": "<EOL><INDENT><INDENT>addModularRootIfNotNull(<EOL><INDENT><INDENT><INDENT>isModularJava, moduleName,<EOL><INDENT><INDENT><INDENT>getLibraryFromHome(paths, getLibrary, libraryName, messageCollector, noLibraryArgument)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun breakLine() {", "body": "<EOL><INDENT>a?<EOL><INDENT>::b<EOL>}"}
{"signature": "val variableFactory =", "body": "outer.CandidateFactoryImpl(name, context, tracing)<EOL>"}
{"signature": "fun dslSpeedTest(f<NUM_LIT>: SomeTest.() -> Unit) {", "body": "<EOL><INDENT><expr>f<NUM_LIT>()</expr><EOL>}"}
{"signature": "for (part in clazz.partClassNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendCommentedLine(part)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun bar<NUM_LIT>(x: suspend () -> Unit) {", "body": "}<EOL>suspend inline fun bar<NUM_LIT>(crossinline x: suspend () -> Unit) {}"}
{"signature": "val enum =", "body": "named.variant as EnumVariant<EOL>"}
{"signature": "val kaptClassesDir =", "body": "project.getKaptGeneratedClassesDirectory(getVariantName(variantData))<EOL>"}
{"signature": "val cType<NUM_LIT> =", "body": "jsTypeOf(c[<NUM_LIT>].asDynamic())<EOL>"}
{"signature": "val KOTLIN_LOCATION_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun appendGenerics() {", "body": "<EOL><INDENT><INDENT><INDENT>formatGenerics(this, generics)<EOL><INDENT><INDENT>}"}
{"signature": "val targetElement =", "body": "element ?: fallbackElement<EOL>"}
{"signature": "if (!areCompatibleSupertypes(expectClassSymbol, actualClass, substitutor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Incompatible.Supertypes<EOL><INDENT><INDENT>}"}
{"signature": "when (classifier.signature) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IdSignatureValues._boolean, IdSignatureValues.string, IdSignatureValues.array,<EOL><INDENT><INDENT><INDENT><INDENT>IdSignatureValues._byte, IdSignatureValues._short, IdSignatureValues._int,<EOL><INDENT><INDENT><INDENT><INDENT>IdSignatureValues.uByte, IdSignatureValues.uShort, IdSignatureValues.uInt, IdSignatureValues.uLong,<EOL><INDENT><INDENT><INDENT><INDENT>IdSignatureValues._float, IdSignatureValues._double,<EOL><INDENT><INDENT><INDENT><INDENT>-> false<EOL><INDENT><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun visitNamedReference(namedReference: FirNamedReference, data: Any?) {", "body": "<EOL><INDENT><INDENT>require(namedReference is FirResolvedNamedReference)<EOL><INDENT><INDENT>namedReference.acceptChildren(this, null)<EOL><INDENT>}"}
{"signature": "val nativeCommonizerTarget =", "body": "SharedCommonizerTarget(nativeTargets.map { it.konanTarget })<EOL>"}
{"signature": "val ENUM_GET_ENTRIES =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "if (type is CustomTypeParameter) {", "body": "<EOL><INDENT><INDENT><INDENT>replacement = type.substitutionResult(replacement).unwrap()<EOL><INDENT><INDENT>}"}
{"signature": "val DEFINE_MODULE_PATTERN =", "body": "<EOL><INDENT>(<STR_LIT>])([^'\\<STR_LIT>).toRegex().toPattern()<EOL>"}
{"signature": "val enhancedKotlinType =", "body": "c.components.signatureEnhancement.enhanceSuperType(kotlinType, c)<EOL>"}
{"signature": "val nullabilityAssumptions =", "body": "NullabilityAssumptions()<EOL>"}
{"signature": "val resolvedCallsEntries =", "body": "bindingContext.getSliceContents(BindingContext.RESOLVED_CALL)<EOL>"}
{"signature": "when (statusStr) {", "body": "<EOL><INDENT><INDENT><STR_LIT> -> true<EOL><INDENT><INDENT><STR_LIT> -> false<EOL><INDENT><INDENT>else -> throw ParseError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (next.isLateInit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val moduleInfoByDescriptor =", "body": "hashMapOf<ModuleDescriptorImpl, M>()<EOL>"}
{"signature": "fun A(x: Int, $default: Int) {", "body": "<EOL> *<INDENT>   val x = if ($default and <NUM_LIT>b<NUM_LIT> != <NUM_LIT>) <NUM_LIT> else x<EOL> *<INDENT>   f(x)<EOL> *<INDENT> }"}
{"signature": "if (@ann true || true) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun visitWrappedExpression(wrappedExpression: FirWrappedExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(wrappedExpression)<EOL><INDENT>}"}
{"signature": "val localVariableNameCache =", "body": "mutableMapOf<JsName, JsName>()<EOL>"}
{"signature": "if (containingClassSymbol?.deprecationStatus?.deprecationLevel == DeprecationLevelValue.HIDDEN) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "val starRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val setValueSymbol =", "body": "(property.setter?.singleStatementOfType<FirReturnExpression>()?.result as? FirFunctionCall)?.getCalleeSymbol()<EOL>"}
{"signature": "val samConversionPerArgumentWithWarningsForVarargAfterSam =", "body": "<EOL><INDENT><INDENT><INDENT>callComponents.languageVersionSettings.supportsFeature(LanguageFeature.SamConversionPerArgument) &&<EOL>"}
{"signature": "val remoteHostFolder =", "body": "project.findProperty(<STR_LIT>)?.toString()<EOL>"}
{"signature": "val jarFileSystem =", "body": "VirtualFileManager.getInstance().getFileSystem(StandardFileSystems.JAR_PROTOCOL)!!<EOL>"}
{"signature": "val filterBenchmarks =", "body": "if (excludeNames.isEmpty())<EOL>"}
{"signature": "val forBean =", "body": "syntheticPropertyHolderForBeanConvention(name, ownerClass)<EOL>"}
{"signature": "val counterToCallStackMapThreadLocal =", "body": "ThreadLocal<MutableMap<CounterWithExclude, CallStackWithTime>>()<EOL>"}
{"signature": "val newElements =", "body": "arrayOfNulls<Any?>(newCapacity)<EOL>"}
{"signature": "val moduleExcludes =", "body": "module.excludeRootsList.urls.mapTo(java.util.HashSet(), JpsPathUtil::urlToFile)<EOL>"}
{"signature": "fun visitResolvedErrorReference(resolvedErrorReference: FirResolvedErrorReference, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>processErrorReference(resolvedErrorReference, resolvedErrorReference.diagnostic, data)<EOL><INDENT>}"}
{"signature": "val INLINE_MARKER_FINALLY_END =", "body": "<STR_LIT><EOL>"}
{"signature": "import good.", "body": "prefix.JavaTest;<EOL>"}
{"signature": "fun incrementAndCheckPostCondition(loopExit: Label) {", "body": "<EOL><INDENT><INDENT>v.iinc(indexVar, <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (irScript.thisReceiver == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val type = IrSimpleTypeImpl(irScript.symbol, false, emptyList(), emptyList())<EOL><INDENT><INDENT><INDENT>irScript.thisReceiver = irScript.createThisReceiverParameter(context, IrDeclarationOrigin.INSTANCE_RECEIVER, type)<EOL><INDENT><INDENT>}"}
{"signature": "val stringToInt =", "body": "listOf(<STR_LIT>, <STR_LIT>).map { it.length }<EOL>"}
{"signature": "fun testDerived(base: Base, derived: Derived) {", "body": "<EOL><INDENT>val test<NUM_LIT>: String = base.foo(<STR_LIT>)<EOL><INDENT>val test<NUM_LIT>: String = derived.foo(<STR_LIT>)<EOL>}"}
{"signature": "val resolvedType =", "body": "StandardClassIds.KClass.constructClassLikeType(arrayOf(referencedType), false)<EOL>"}
{"signature": "fun logDeclaration(targetIndex: Int, lazyStatsKey: () -> StatsCollector.StatsKey) {", "body": "<EOL><INDENT><INDENT>wrappedCollector.logDeclaration(targetIndex, lazyStatsKey)<EOL><INDENT>}"}
{"signature": "val strm =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "val aHashCode =", "body": "<!EVALUATED: `true`!>checkHashCodeCorrectness(A())<!><EOL>"}
{"signature": "if (case.ignore) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val CUSTOM =", "body": "Section(<NUM_LIT>u)<EOL>"}
{"signature": "for (type in primitiveNumbers) {", "body": "<EOL><INDENT><INDENT><INDENT>add(type, OperatorNames.ADD, withLongCoercion(::transformAdd))<EOL><INDENT><INDENT><INDENT>add(type, OperatorNames.SUB, withLongCoercion(::transformSub))<EOL><INDENT><INDENT><INDENT>add(type, OperatorNames.MUL, withLongCoercion(::transformMul))<EOL><INDENT><INDENT><INDENT>add(type, OperatorNames.DIV, withLongCoercion(::transformDiv))<EOL><INDENT><INDENT><INDENT>add(type, OperatorNames.MOD, withLongCoercion(::transformRem))<EOL><INDENT><INDENT><INDENT>add(type, OperatorNames.REM, withLongCoercion(::transformRem))<EOL><INDENT><INDENT>}"}
{"signature": "if (this == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (expression.origin == JvmLoweredStatementOrigin.FAKE_CONTINUATION) {", "body": "<EOL><INDENT><INDENT><INDENT>addFakeContinuationMarker(mv)<EOL><INDENT><INDENT><INDENT>expression.onStack<EOL><INDENT><INDENT>}"}
{"signature": "val nonConstructorUsageTracker =", "body": "nonConstructorContext.usageTracker()<EOL>"}
{"signature": "for (f in boundFields) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putValueArgument(unboundIndex++, irGetField(irGet(thisReceiver), f))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val actualMembersByName =", "body": "actualClassSymbol.collectAllMembers(isActualDeclaration = true).groupBy { it.getName(this) }<EOL>"}
{"signature": "package fragment: $fqName of module ${c.", "body": "components.module}\"<EOL>"}
{"signature": "val firAnnotationList =", "body": "mutableListOf<FirAnnotation>()<EOL>"}
{"signature": "val isJvmPackageNameSupported =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.JvmPackageName)<EOL>"}
{"signature": "fun test(instance: Any, parent: String, fqa: String) {", "body": "<EOL><INDENT>val clz = instance.javaClass<EOL><INDENT>assert(clz.getName().startsWith(parent))<EOL><INDENT>assert(clz.getName().contains(fqa))<EOL><INDENT>assert(clz.getEnclosingMethod() == null)<EOL><INDENT>assert(clz.getEnclosingClass().getName() == parent)<EOL><INDENT><INDENT>}"}
{"signature": "if (param$LIB_INT != 'parameter') {", "body": "return <STR_LIT>; }"}
{"signature": "if (completionMode.shouldForkPointConstraintsBeResolved) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>resolveForkPointsConstraints()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (clientType.isErrorLike()) {", "body": "<EOL><INDENT><INDENT><INDENT>printMessage(text, clientType)<EOL><INDENT><INDENT>}"}
{"signature": "val arrayOfFunName =", "body": "name.decapitalizeAsciiOnly() + <STR_LIT><EOL>"}
{"signature": "fun test(myClass: MyClass) {", "body": "<EOL><INDENT>myClass.mater<caret>ialize()<EOL>}"}
{"signature": "val key =", "body": "keySelector(element)<EOL>"}
{"signature": "for (nativeLeafSourceSet in listOf(linuxX<NUM_LIT>Main, linuxX<NUM_LIT>Test, linuxArm<NUM_LIT>Main, linuxArm<NUM_LIT>Test)) {", "body": "<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeLeafSourceSet, IdeMultiplatformImport.SourceSetConstraint.isAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeLeafSourceSet, IdeMultiplatformImport.SourceSetConstraint.isJvmAndAndroid, isMatchExpected = false)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeLeafSourceSet, IdeMultiplatformImport.SourceSetConstraint.isLeaf, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeLeafSourceSet, IdeMultiplatformImport.SourceSetConstraint.isNative, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeLeafSourceSet, IdeMultiplatformImport.SourceSetConstraint.isSinglePlatformType, isMatchExpected = true)<EOL><INDENT><INDENT><INDENT>assertConstraint(nativeLeafSourceSet, IdeMultiplatformImport.SourceSetConstraint.unconstrained, isMatchExpected = true)<EOL><INDENT><INDENT>}"}
{"signature": "val operatorDescriptor =", "body": "<EOL><INDENT><INDENT><INDENT>IrSimpleBuiltinOperatorDescriptorImpl(packageFragmentDescriptor, Name.identifier(name), returnType.originalKotlinType!!)<EOL>"}
{"signature": "if (isOutOfBlock) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "var targetBuilder =", "body": "builder<EOL>"}
{"signature": "fun testDummyJVM() {", "body": "<EOL><INDENT><INDENT>doSerializeDeserializeAndCompareTest<K<NUM_LIT>JVMCompilerArguments>()<EOL><INDENT>}"}
{"signature": "if (isBrowser()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  |   konan.moduleEntry([]);<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  |}"}
{"signature": "val checkBuilderInferenceRestriction =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>!callComponents.languageVersionSettings<EOL>"}
{"signature": "val libraryNames =", "body": "configuration.getList(KonanConfigKeys.LIBRARY_FILES)<EOL>"}
{"signature": "package headerWarnings<EOL>.", "body": ""}
{"signature": "if (deprecatedAnnotation == null) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.DEPRECATED_SINCE_KOTLIN_WITHOUT_DEPRECATED.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deprecatedSinceAnnotationName<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val rangeElementKotlinType =", "body": "getRangeOrProgressionElementType(rangeKotlinType)!!<EOL>"}
{"signature": "if (shouldPreprocessApiVersionCalls) {", "body": "<EOL><INDENT><INDENT><INDENT>val targetApiVersion = inliningContext.state.languageVersionSettings.apiVersion<EOL><INDENT><INDENT><INDENT>ApiVersionCallsPreprocessingMethodTransformer(targetApiVersion).transform(<STR_LIT>, node)<EOL><INDENT><INDENT>}"}
{"signature": "if (hasIncompatibleClasses) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>messageCollector.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ERROR,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT> +<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in iterations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val elapsedDiff<NUM_LIT> = (sameMark.elapsedNow() - baseMark.elapsedNow()).absoluteValue<EOL><INDENT><INDENT><INDENT><INDENT>val elapsedDiff<NUM_LIT> = (baseMark.elapsedNow() - sameMark.elapsedNow()).absoluteValue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (maxOf(elapsedDiff<NUM_LIT>, elapsedDiff<NUM_LIT>) < <NUM_LIT>milliseconds) break<EOL><INDENT><INDENT><INDENT><INDENT>if (i == iterations.last) fail(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (id != filesProto.fileCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>fileProto.id = id<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val foos =", "body": "ArrayList<Foo>()<EOL>"}
{"signature": "val simpleFunctions =", "body": "mutableListOf<Pair<FirNamedFunctionSymbol, String>>()<EOL>"}
{"signature": "val reversedEdges =", "body": "mutableListOf<PointsToGraphEdge.Assignment>()<EOL>"}
{"signature": "val loopEntryPointMarkers =", "body": "hashMapOf<LabelNode, SmartList<AbstractInsnNode>>()<EOL>"}
{"signature": "val resolvedCall =", "body": "expression.getResolvedCall(bindingContext)<EOL>"}
{"signature": "val next<NUM_LIT> =", "body": "next<NUM_LIT>next ?: return false<EOL>"}
{"signature": "when (val firstSuper = firstBoundType.toSymbol(session)?.fir) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirRegularClass -> firstSuper<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is FirTypeParameter -> firstSuper.erasedUpperBound<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val irSubFunction =", "body": "generateDelegatedFunction(subClass, firSubClass, delegatedFunction)<EOL>"}
{"signature": "if (parameters.isUnsignedLongNumberLiteral) {", "body": "<EOL><INDENT><INDENT><INDENT>return ULongValue(value).wrap(parameters)<EOL><INDENT><INDENT>}"}
{"signature": "if (comparator.compare(maxValue, v) < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>maxValue = v<EOL><INDENT><INDENT>}"}
{"signature": "if (descriptor.dispatchReceiverParameter != null || descriptor.extensionReceiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val name = JsScope.declareTemporaryName(Namer.getReceiverParameterName())<EOL><INDENT><INDENT><INDENT>accessorFunction.parameters += JsParameter(name)<EOL><INDENT><INDENT><INDENT>name.makeRef()<EOL><INDENT><INDENT>}"}
{"signature": "if (!isSwiftExportEmbeddable || isSwiftExportPluginPublishingEnabled) {", "body": "<EOL><INDENT><INDENT>action.invoke()<EOL><INDENT>}"}
{"signature": "if (function.descriptor.isRestrictedSuspendFunction()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>symbols.restrictedContinuationImpl<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val OBJCNAMES_PACKAGE_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "var low =", "body": "fromIndex<EOL>"}
{"signature": "val dumpOutput =", "body": "index.files[file] ?: error(<STR_LIT>)<EOL>"}
{"signature": "var todo =", "body": "n.toInt()<EOL>"}
{"signature": "for (i in (M .. M).reversed()) {", "body": "<EOL><INDENT><INDENT>++step<EOL><INDENT><INDENT>if (step > <NUM_LIT>) throw AssertionError(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun foo(x: X) {", "body": "<EOL><INDENT><INDENT>sb.appendLine(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val actVal =", "body": "stringifiedActuals[exp.key]<EOL>"}
{"signature": "val typeId =", "body": "type.index<EOL>"}
{"signature": "if (annotated.source?.kind == KtFakeSourceElementKind.PropertyFromParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>TargetLists.T_VALUE_PARAMETER_WITH_VAL<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val coroutineImplLabelPropertyGetter =", "body": "coroutineSymbols.coroutineImplLabelPropertyGetter<EOL>"}
{"signature": "fun addChromeLauncher() {", "body": "<EOL><INDENT><INDENT>requiredDependencies.add(versions.karmaChromeLauncher)<EOL><INDENT>}"}
{"signature": "val recompilationReason =", "body": "HashMap<File, String>()<EOL>"}
{"signature": "val F<NUM_LIT>_GE =", "body": "<STR_LIT><EOL>"}
{"signature": "val oldContainingClass =", "body": "containingRegularClass<EOL>"}
{"signature": "if (shouldBuildStub(constructor)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>@OptIn(UnsafeDuringIrConstructionAPI::class)<EOL><INDENT><INDENT><INDENT><INDENT>result += declarationStorage.getIrConstructorSymbol(constructor.symbol).owner<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (irClass.hasAnnotation(KonanFqNames.leakDetectorCandidate)) {", "body": "<EOL><INDENT><INDENT><INDENT>result = result or TF_LEAK_DETECTOR_CANDIDATE<EOL><INDENT><INDENT>}"}
{"signature": "package kapt;<EOL>.", "body": ""}
{"signature": "val previousStatements =", "body": "mutableListOf<JsStatement>()<EOL>"}
{"signature": "val processResourcesTaskName =", "body": "(compilation as? InternalKotlinCompilation<*>)?.processResourcesTaskName<EOL>"}
{"signature": "val receiverTypes =", "body": "mutableListOf<IrType>()<EOL>"}
{"signature": "val javaTest =", "body": "JavaTest().bar()<EOL>"}
{"signature": "fun bindElementToValue(element: KtElement, value: PseudoValue) {", "body": "<EOL><INDENT><INDENT>elementsToValues.put(element, value)<EOL><INDENT>}"}
{"signature": "val PRESETS_DEPRECATION_MESSAGE_SUFFIX =", "body": "<EOL><INDENT>\"API is deprecated and will be removed in future releases. Learn how to configure targets at: https:"}
{"signature": "else if (property.typeReference == null && !languageVersionSettings.supportsFeature(LanguageFeature.ShortSyntaxForPropertyGetters)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>UNSUPPORTED_FEATURE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>property,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>LanguageFeature.ShortSyntaxForPropertyGetters to languageVersionSettings<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dynamicCalleeMethod =", "body": "codegen.methodSignatureMapper.mapAsmMethod(dynamicCallee)<EOL>"}
{"signature": "if (element !in elementsToSkip) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>element.accept(delegate)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val signum =", "body": "if (value < <NUM_LIT>) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>(MaxUI - <NUM_LIT>u, MaxUI - <NUM_LIT>u, MaxUI)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (!(a >= <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val RAW_VALUE_ANNOTATION_FQ_NAMES =", "body": "RAW_VALUE_ANNOTATION_CLASS_IDS.fqNames()<EOL>"}
{"signature": "val topSharedData =", "body": "Data(<NUM_LIT>)<EOL>"}
{"signature": "import edu.", "body": "umd.cs.findbugs.annotations.*;<EOL>"}
{"signature": "val compPropVal =", "body": "<NUM_LIT><EOL>"}
{"signature": "val excludesClassMethods =", "body": "mutableListOf<Pair<String, String>>()<EOL>"}
{"signature": "val inMemoryStorageWrappers =", "body": "hashSetOf<InMemoryStorageInterface<*, *>>()<EOL>"}
{"signature": "for (i in (MaxUL - <NUM_LIT>u)..MaxUL step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (ix != null) {", "body": "<EOL><INDENT><INDENT>arr[ix] = <STR_LIT><EOL><INDENT><INDENT>return arr[ix]<EOL><INDENT>}"}
{"signature": "val createRange =", "body": "((firstReceiver as? IrVariable)?.initializer as? IrCall)?.extensionReceiver as? IrCall<EOL>"}
{"signature": "val llvmAr =", "body": "ClangArgs.Native(testRunSettings.configurables).llvmAr().first()<EOL>"}
{"signature": "fun call(x: (a: Int, String) -> Unit) {", "body": "<EOL><INDENT><expr>x(<NUM_LIT>, <STR_LIT>)</expr><EOL>}"}
{"signature": "fun add(x: Int) {", "body": "<EOL><INDENT><INDENT>length++<EOL><INDENT><INDENT>ensureCapacity(length)<EOL><INDENT><INDENT>set(length - <NUM_LIT>, x)<EOL><INDENT>}"}
{"signature": "val multiplatformExtension =", "body": "multiplatformExtensionOrNull ?: return emptyList()<EOL>"}
{"signature": "var yielding =", "body": "false<EOL>"}
{"signature": "val remapTypeMap =", "body": "irConstructor.constructedClass.typeParameters.associateBy { it }<EOL>"}
{"signature": "val currentScriptArgs =", "body": "scriptArgs ?: fallbackScriptArgs<EOL>"}
{"signature": "fun visitElement(element: FirElement) {", "body": "<EOL><INDENT><INDENT><INDENT>nodes.add(element)<EOL><INDENT><INDENT><INDENT>element.acceptChildren(this)<EOL><INDENT><INDENT>}"}
{"signature": "val expandedReceiverType =", "body": "receiverType.fullyExpandedType(session).makeConeTypeDefinitelyNotNullOrNotNull(session.typeContext)<EOL>"}
{"signature": "if (memberDeclaration.isOverride) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val subcommandsArguments =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val intPtrValue =", "body": "ptrToInt(args.single(), codegen.intPtrType)<EOL>"}
{"signature": "if (k <= <NUM_LIT> || k > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>y = one - (e - x)<EOL><INDENT><INDENT><INDENT>y = doubleSetWord(d = y, hi = __HI(y) + (k shl <NUM_LIT>)) <EOL><INDENT><INDENT><INDENT>return y - one<EOL><INDENT><INDENT>}"}
{"signature": "val barv =", "body": "foov<EOL>"}
{"signature": "fun putAll(contexts: FirSpecialTowerDataContexts) {", "body": "<EOL><INDENT><INDENT>contextForCallableReferences.putAll(contexts.contextForCallableReferences)<EOL><INDENT><INDENT>contextForAnonymousFunctions.putAll(contexts.contextForAnonymousFunctions)<EOL><INDENT>}"}
{"signature": "val negated =", "body": "condition.operationReference.getReferencedNameElementType() === KtTokens.NOT_IN<EOL>"}
{"signature": "fun reassignFunParams(a: Int) {", "body": "<EOL><INDENT><!VAL_REASSIGNMENT!>a<!> = <NUM_LIT><EOL>}"}
{"signature": "val INTERNAL_ERROR_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val edit =", "body": "EditConstraint(first, Strength.PREFERRED)<EOL>"}
{"signature": "package $basePackageName<EOL>.", "body": ""}
{"signature": "if (children.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nodesRef.set(LighterASTNode.EMPTY_ARRAY)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val boxParameterSymbol =", "body": "constructorReplacement.boxParameter<EOL>"}
{"signature": "val compilerXmlOutput =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "val restrictedTargets =", "body": "featureDependenciesTargets[dependency]<EOL>"}
{"signature": "val esVariable =", "body": "dispatcher.interpretVariable(isInstancePredicate.arg) ?: return null<EOL>"}
{"signature": "if (property.hasConstant) {", "body": "<EOL><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val ARRAY_GET_S =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test_<NUM_LIT>_<NUM_LIT>(resolvedCall: ResolvedCall<out CallableDescriptor>) {", "body": "<EOL><INDENT>resolvedCall.getParameterForArgument() }"}
{"signature": "var varPropWithSetter =", "body": "<STR_LIT><EOL>"}
{"signature": "fun t<NUM_LIT> () {", "body": "<EOL><INDENT>val b<NUM_LIT> = StrangeArray<Int>(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT>b<NUM_LIT>set(<NUM_LIT>, <NUM_LIT>)<INDENT> b<NUM_LIT>[<NUM_LIT>] = <NUM_LIT><INDENT> var i = b<NUM_LIT>get(<NUM_LIT>)<INDENT> i = b<NUM_LIT>[<NUM_LIT>] }"}
{"signature": "val filePrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "val temporaryVals =", "body": "temporaryValsAnalyzer.analyze(internalClassName, methodNode)<EOL>"}
{"signature": "fun visitAnonymousObjectExpression(anonymousObjectExpression: FirAnonymousObjectExpression, data: Data) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val VS_NF =", "body": "VariableControlFlowState(InitState.NOT_INITIALIZED, false)<EOL>"}
{"signature": "val approximator =", "body": "session.typeApproximator<EOL>"}
{"signature": "for (i in ((logged(<STR_LIT>, <NUM_LIT>) until logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)).reversed() step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val line =", "body": "bufferedStdout.readLine() ?: break<EOL>"}
{"signature": "val caseIgnorableRangesBuilder =", "body": "CaseIgnorableRangesBuilder()<EOL>"}
{"signature": "val collectedFiles =", "body": "mutableSetOf<KtFile>()<EOL>"}
{"signature": "if (old.getExtensionCount(JvmProtoBuf.typeParameterAnnotation) != new.getExtensionCount(JvmProtoBuf.typeParameterAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val byteFloorByte =", "body": "byte.floorDiv(byte)<EOL>"}
{"signature": "if (path.exists(LinkOption.NOFOLLOW_LINKS)) {", "body": "<EOL><INDENT><INDENT><INDENT>yield(path)<EOL><INDENT><INDENT>}"}
{"signature": "if (!isValid) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val errorText = <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>throw ServiceLoadingException(file, RuntimeException(errorText))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var STATE_RUNNABLE =", "body": "<NUM_LIT><EOL>"}
{"signature": "val UONE =", "body": "<NUM_LIT>U<EOL>"}
{"signature": "val substituteMap =", "body": "mutableMapOf<IrValueParameter, IrExpression>()<EOL>"}
{"signature": "if (!b.type.isSubtypeOf(a.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>newTypeInfoBuilder.put(b, a.type)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val correspondingProperties =", "body": "CorrespondingPropertyCache(context, facadeClass)<EOL>"}
{"signature": "fun save(output: DataOutput, value: JavaElementSnapshot) {", "body": "<EOL><INDENT><INDENT>StringExternalizer.save(output, value.name)<EOL><INDENT><INDENT>LongExternalizer.save(output, value.abiHash)<EOL><INDENT>}"}
{"signature": "fun extractSignatureFromTypeAlias(typeAliasProto: ProtoTypeAlias, isParentPrivate: Boolean) {", "body": "<EOL><INDENT><INDENT><INDENT>val isPrivate = isParentPrivate || typeAliasProto.base.isPrivate()<EOL><INDENT><INDENT><INDENT>extractSignatureFromSymbol(typeAliasProto.base.symbol, isPrivate)<EOL><INDENT><INDENT>}"}
{"signature": "for (argumentIndex in <NUM_LIT> until projectedType.argumentsCount()) {", "body": "<EOL><INDENT><INDENT><INDENT>stack.add(projectedType.getArgument(argumentIndex))<EOL><INDENT><INDENT>}"}
{"signature": "fun bar(x: Any) {", "body": "}<EOL>fun <R> myWith(r: R, b: (R) -> Unit) {}"}
{"signature": "if (memberDeclaration.isActual) {", "body": "<EOL><INDENT><INDENT><INDENT>renderModifier(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val durationNs =", "body": "System.nanoTime() - startNs<EOL>"}
{"signature": "if (stackForConstraintsSetsFromCurrentForkPoint == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>stackForConstraintsSetsFromCurrentForkPoint = SmartList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun otherTest(jc: JavaClass) {", "body": "<EOL><INDENT>val result = jc.text<EOL>}"}
{"signature": "val _packageParts =", "body": "hashMapOf<File, TranslationResultValue>()<EOL>"}
{"signature": "fun visitNamedReference(namedReference: FirNamedReference, data: MutableMap<KtElement, FirElement>) {", "body": "}<EOL><INDENT>override fun visitDelegateFieldReference(delegateFieldReference: FirDelegateFieldReference, data: MutableMap<KtElement, FirElement>) {}"}
{"signature": "val chunkRefWithTimestamp =", "body": "ChunkRefWithTimestamp.encode(chunkRef.value, nextChunkRefWithTimestamp.timestamp + <NUM_LIT>)<EOL>"}
{"signature": "val superQualifiers =", "body": "indexedFromSupertypes.mapNotNull { it.getOrNull(index)?.type?.extractQualifiers() }<EOL>"}
{"signature": "val LOCAL_SET =", "body": "<STR_LIT><EOL>"}
{"signature": "val TO_INT =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val typeQualifierResolver =", "body": "container.get<JavaResolverComponents>().annotationTypeQualifierResolver<EOL>"}
{"signature": "val workerUnlocker =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "if (FirJvmPlatformDeclarationFilter.isFunctionAvailable(symbol.fir, javaMappedClassUseSiteScope, session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>declared += symbol<EOL><INDENT><INDENT><INDENT><INDENT>processor(symbol)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun instantiateObject(iv: InstructionAdapter, objectSymbol: IrClassSymbol) {", "body": "<EOL><INDENT><INDENT>val originalIrClass = objectSymbol.owner<EOL><INDENT><INDENT>require(originalIrClass.isObject)<EOL><INDENT><INDENT>val targetField = jvmBackendContext.cachedDeclarations.getFieldForObjectInstance(originalIrClass)<EOL><INDENT><INDENT>val ownerType = typeMapper.mapClass(targetField.parentAsClass)<EOL><INDENT><INDENT>val fieldType = typeMapper.mapType(targetField.type)<EOL><INDENT><INDENT>iv.visitFieldInsn(Opcodes.GETSTATIC, ownerType.internalName, targetField.name.asString(), fieldType.descriptor)<EOL><INDENT>}"}
{"signature": "fun runtimeEx() {", "body": "<EOL><INDENT>if (true) throw RuntimeException()<EOL>}"}
{"signature": "val targetResolver =", "body": "this[target.path]<EOL>"}
{"signature": "val KLIB =", "body": "<STR_LIT><EOL>"}
{"signature": "for (index in labeledProperties.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val property = labeledProperties[index]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (property.transient) continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>load(outputVar, kOutputType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>load(descVar, descType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>iconst(index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>genKOutputMethodCall(property, codegen, expressionCodegen, objType, objVar, generator = this@SerializerCodegenImpl)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package kotlin<EOL>.", "body": ""}
{"signature": "val enterFinallyNode =", "body": "finallyBlocksInProgress.pop()<EOL>"}
{"signature": "if (createPropertyIfNeeded && descriptor is PropertyGetterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val property = generatePropertyStub(descriptor.correspondingProperty)<EOL><INDENT><INDENT><INDENT>return property.getter!!<EOL><INDENT><INDENT>}"}
{"signature": "val closureAsmType =", "body": "typeMapper.mapType(closure.closureClass)<EOL>"}
{"signature": "val headerNameResolver =", "body": "NameResolverImpl(moduleHeaderProto.strings, moduleHeaderProto.qualifiedNames)<EOL>"}
{"signature": "else if (declaration.hasGenericOuterDeclaration(context)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirErrors.INNER_CLASS_OF_GENERIC_THROWABLE_SUBCLASS, context)<EOL><INDENT><INDENT>}"}
{"signature": "fun setMethodImplForSVGNameList(obj: SVGNameList, index: Int, newItem: JsAny?) {", "body": "js(<STR_LIT>) }"}
{"signature": "val librariesConfigurationName =", "body": "project.registerLibsDependencies(target, artifactName + nameSuffix, modules)<EOL>"}
{"signature": "val psiSetViaFir =", "body": "mutableSetOf<KtElement>()<EOL>"}
{"signature": "val perfString =", "body": "compiler.defaultPerformanceManager.renderCompilerPerformance()<EOL>"}
{"signature": "val existingInfosPerFilePerInfoCache =", "body": "mutableMapOf<Pair<TestFile, CodeMetaInfo>, List<ParsedCodeMetaInfo>>()<EOL>"}
{"signature": "when (textFormat) {", "body": "<EOL><INDENT><INDENT>RenderingFormat.PLAIN -> message<EOL><INDENT><INDENT>RenderingFormat.HTML -> <STR_LIT><EOL><INDENT>}"}
{"signature": "val simulatorX<NUM_LIT> =", "body": "watchosX<NUM_LIT>(<STR_LIT>)<EOL>"}
{"signature": "val xcodeFrameworksFolderPath =", "body": "System.getenv(<STR_LIT>) ?: return null<EOL>"}
{"signature": "val annot =", "body": "getAnnotation(SerializationAnnotations.serializableAnnotationFqName)<EOL>"}
{"signature": "val lineOffsets =", "body": "mutableListOf(<NUM_LIT>)<EOL>"}
{"signature": "val report =", "body": "res.reports.find { it.message.startsWith(<STR_LIT>) }<EOL>"}
{"signature": "if (typeInfo == null) {", "body": "<EOL><INDENT><INDENT><INDENT>typeInfo = createTypeInfo(type)<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinBinaryFile =", "body": "newFile(<STR_LIT>)<EOL>"}
{"signature": "if (task is KotlinTest) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>task.ignoreRunFailures = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (compilerKind) {", "body": "<EOL><INDENT><INDENT><INDENT>CompilerKind.JVM -> sourcesPath / <STR_LIT><EOL><INDENT><INDENT><INDENT>CompilerKind.JS -> sourcesPath / <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "for (a in arr) {", "body": "<EOL><INDENT><INDENT>sum += a;<EOL><INDENT>}"}
{"signature": "val incrementalComponents =", "body": "configuration.get(JVMConfigurationKeys.INCREMENTAL_COMPILATION_COMPONENTS)<EOL>"}
{"signature": "val showProcessorStats =", "body": "options[KaptFlag.SHOW_PROCESSOR_STATS]<EOL>"}
{"signature": "if ('$' in value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>value.replace(PredefinedPaths.KOTLIN_NATIVE_DISTRIBUTION, settings.get<KotlinNativeHome>().dir.path)<EOL><INDENT><INDENT>}"}
{"signature": "for (i in propertyParent.superTypes.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (propertyParent.superTypes[i].isJavaLangRecord()) return propertyName<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (checkIsOwnerR<String>(s)) {", "body": "<EOL><INDENT><INDENT><INDENT>s.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>}"}
{"signature": "val FIELD_A =", "body": "DefectAttribute(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "var main =", "body": "result.effectiveSettings<EOL>"}
{"signature": "val test_fna =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>f === na<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>na === f<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>f !== na<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>na !== f<!><EOL>"}
{"signature": "val valueToCompare =", "body": "if (loopHeader.headerInfo.isLastInclusive) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "if (method.containingClass?.isEnum == true && method.isConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "package fragment is declared.", "body": "<EOL>"}
{"signature": "if (KotlinTypeChecker.DEFAULT.isSubtypeOf(nextType, lastType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>mostSpecificSamConversion = samConversion<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (logger is Logger) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>GradleKotlinLogger(logger, prefix)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val conditionParser =", "body": "PsiConditionParser(collector, callContext, this)<EOL>"}
{"signature": "fun useOverloadedInline()  {", "body": "<EOL><INDENT>overloadedInline()<EOL>}"}
{"signature": "val actualFileModule =", "body": "projectStructureProvider.getModule(ktFile, contextualModule)<EOL>"}
{"signature": "if (shouldCheckExpectActual) {", "body": "<EOL><INDENT><INDENT><INDENT>useImpl<ExpectedActualDeclarationChecker>()<EOL><INDENT><INDENT>}"}
{"signature": "if (member !in usefulDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>emptyList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (e.message.asDynamic().includes(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val sourceClassesFQNs =", "body": "HashSet<FqName>()<EOL>"}
{"signature": "val classNameGenerator =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CStringLiteralsGenerator(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val projectInfo =", "body": "parseProjectInfo(testName, projectInfoFile)<EOL>"}
{"signature": "val relevantOverriddenFuns =", "body": "if (samMethod.isFakeOverride) nonFakeOverriddenFuns else nonFakeOverriddenFuns + samMethod<EOL>"}
{"signature": "val logBuf =", "body": "StringBuilder()<EOL>"}
{"signature": "var someString =", "body": "<STR_LIT><EOL>"}
{"signature": "when (val companionReceiver = towerElementsForClass.companionReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> statics<EOL><INDENT><INDENT><INDENT>else -> base<EOL><INDENT><INDENT><INDENT><INDENT>.addReceiver(null, companionReceiver)<EOL><INDENT><INDENT><INDENT><INDENT>.addNonLocalScopesIfNotNull(towerElementsForClass.companionStaticScope, towerElementsForClass.staticScope)<EOL><INDENT><INDENT>}"}
{"signature": "val toStringFun =", "body": "state.getToStringFunction()<EOL>"}
{"signature": "val parcelizeAnnotation =", "body": "this.annotations.findAnnotation(PARCELIZE_CLASS_FQNAME) ?: return false<EOL>"}
{"signature": "val basePath =", "body": "baseDirPath ?: error(<STR_LIT>)<EOL>"}
{"signature": "val kapt<NUM_LIT>AnalysisCompletedHandlerExtension =", "body": "ClasspathBasedKapt<NUM_LIT>Extension(options, logger, configuration)<EOL>"}
{"signature": "val remappedFiles =", "body": "mutableMapOf<IrFileSymbol, IrFileSymbol>()<EOL>"}
{"signature": "val aReceiver =", "body": "a.receiverParameter<EOL>"}
{"signature": "val valueType =", "body": "readValueType()<EOL>"}
{"signature": "val posPat =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val isTrailingLambda =", "body": "i == symbol.owner.valueParameters.size - <NUM_LIT> && isLambda<EOL>"}
{"signature": "val substitutedFunctionType =", "body": "substitutor.substituteOrSelf(functionType)<EOL>"}
{"signature": "val INIT_INSTANCE<INDENT><INDENT><INDENT><INDENT> =", "body": "<STR_LIT><EOL>"}
{"signature": "val isNotDefault =", "body": "Flags.IS_NOT_DEFAULT.get(setterFlags)<EOL>"}
{"signature": "if (declaration.hasBody()) {", "body": "<EOL><INDENT><INDENT>val body = translateFunctionBody(descriptor, declaration, this)<EOL><INDENT><INDENT>function.body.statements += body.statements<EOL><INDENT>}"}
{"signature": "val rawPropertyName =", "body": "field.name.identifier<EOL>"}
{"signature": "val BASE_JVM_FUNCTIONS_PACKAGE =", "body": "BASE_JVM_PACKAGE.child(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "var noStdlib =", "body": "false<EOL>"}
{"signature": "val mkdirs =", "body": "outDir.mkdirs()<EOL>"}
{"signature": "if (localVariables.isEmpty()) {", "body": "<EOL><INDENT><INDENT>return <NUM_LIT><EOL><INDENT>}"}
{"signature": "fun visitVarInsn(opcode: Int, index: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>currentBlock.addInstruction(index, opcode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is PsiTypeParameterListOwner) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.typeParameterList?.accept(this)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (thisBuildNumber == null && otherBuildNumber != null) {", "body": "<EOL><INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val annotationsBuffer =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val firstAdult =", "body": "map.firstNotNullOf { (name, age) -> name.takeIf { age >= <NUM_LIT> } }<EOL>"}
{"signature": "val actualFilesWithFqNames =", "body": "library.getFilesWithFqNames()<EOL>"}
{"signature": "val elseEmpty =", "body": "x.elseStatement?.let { isEmpty(it) } ?: true<EOL>"}
{"signature": "var ourClassLoaderRef =", "body": "SoftReference<ClassLoader>(null)<EOL>"}
{"signature": "if (!resolved && !markedWithError) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>debugInfoReporter.reportMissingUnresolved(expression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val psiToFir =", "body": "hashMapOf<KtElement, FirDeclaration>()<EOL>"}
{"signature": "val kotlinChunk =", "body": "KotlinChunk(uninitializedContext, moduleBuildTargets)<EOL>"}
{"signature": "fun testWith(g: LockFreeLongCounter.() -> Long) {", "body": "<EOL><INDENT><INDENT>val c = LockFreeLongCounter()<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, c.g())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, c.increment())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, c.g())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, c.increment())<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>L, c.g())<EOL><INDENT>}"}
{"signature": "val closureContext =", "body": "context.getParentContext()<EOL>"}
{"signature": "val icon =", "body": "BitmapFactory.decodeResource(resources, R.drawable.ic_task)<EOL>"}
{"signature": "val usedLocalVariableIds =", "body": "mutableSetOf<String>()<EOL>"}
{"signature": "fun visitSuperReference(superReference: FirSuperReference) {", "body": "<EOL><INDENT><INDENT>visitElement(superReference)<EOL><INDENT>}"}
{"signature": "while (unresolvedCounter > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>unresolvedCounter--<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>classId = classId?.outerClassId<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (klass.owner.packageFqName == FqName(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return klass.owner.name.identifier<EOL><INDENT><INDENT>}"}
{"signature": "val abiDumpWithoutManifestRemainder =", "body": "abiDumpWithoutManifest.drop(prefixLength).dropLast(suffixLength)<EOL>"}
{"signature": "val interopInterpretObjCPointer =", "body": "interopFunction(InteropFqNames.interpretObjCPointerFunName)<EOL>"}
{"signature": "if (thisKind in PrimitiveType.floatingPoint) {", "body": "<EOL><INDENT><INDENT><INDENT>generateBits(thisKind)<EOL><INDENT><INDENT>}"}
{"signature": "if (!isRaw && !useFlexible) {", "body": "<EOL><INDENT><INDENT><INDENT>return computeSimpleJavaClassifierType(javaType, attr, null) ?: errorType()<EOL><INDENT><INDENT>}"}
{"signature": "if (this.savedStubs != null) {", "body": "<EOL><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val testSourceSet =", "body": "android.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "fun accept(visitor: KmPackageExtension) {", "body": "<EOL><INDENT><INDENT>require(visitor is KlibPackageExtensionVisitor)<EOL><INDENT><INDENT>fqName?.let(visitor::visitFqName)<EOL><INDENT>}"}
{"signature": "fun check(expression: FirSafeCallExpression, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>val receiverType = EnhancedForWarningConeSubstitutor(context.session.typeContext)<EOL><INDENT><INDENT><INDENT>.substituteOrNull(expression.receiver.resolvedType)<EOL><INDENT><INDENT><INDENT>?.fullyExpandedType(context.session) ?: return<EOL><EOL><INDENT><INDENT>checkSafeCallReceiverType(receiverType, expression.source, context, reporter)<EOL><INDENT>}"}
{"signature": "val comp =", "body": "Comparator<Int> { x, y -> <NUM_LIT> }<EOL>"}
{"signature": "val firstResolvedCall =", "body": "resolutionResult.resultingCalls.first() as? NewAbstractResolvedCall<*> ?: continue<EOL>"}
{"signature": "val o<NUM_LIT>d =", "body": "W<NUM_LIT> { i -> i }"}
{"signature": "val elementToAnalyze =", "body": "position.containingNonLocalDeclaration() ?: position<EOL>"}
{"signature": "if (superClass == null) {", "body": "<EOL><INDENT><INDENT><INDENT>kotlinAnyName<EOL><INDENT><INDENT>}"}
{"signature": "val zThree =", "body": "Z(<NUM_LIT>U, <NUM_LIT>)<EOL>"}
{"signature": "fun testTimeZoneIssue() {", "body": "<EOL><INDENT><INDENT>val regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>val result = regex.matchEntire(<STR_LIT>)<EOL><INDENT><INDENT>assertNotNull(result)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, result!!.groupValues[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, result.groupValues[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, result.groupValues[<NUM_LIT>])<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, result.groupValues[<NUM_LIT>])<EOL><INDENT>}"}
{"signature": "val objectOutputStream =", "body": "ObjectOutputStream(outputStream)<EOL>"}
{"signature": "if (namedAccessorCount > <NUM_LIT> && namedAccessorCount < descriptor.accessors.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJs.JS_NAME_IS_NOT_ON_ALL_ACCESSORS.on(declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import this symbol.", "body": "<EOL>"}
{"signature": "if (!executed.getAndSet(true)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>runMultiplatformAndroidGradlePluginCompatibilityHealthCheck(androidGradlePluginVersionProvider)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val structAnnotations =", "body": "listOfNotNull(structAnnotation, cPlusPlusClassAnnotation)<EOL>"}
{"signature": "fun bar(f: (P) -> Unit) {", "body": "<EOL><INDENT>f(P(<STR_LIT>, <STR_LIT>))<EOL>}"}
{"signature": "val EXTENDED_COLLECTOR =", "body": "FileStructureElementDiagnosticsCollector(useExtendedCheckers = true)<EOL>"}
{"signature": "val groupValue =", "body": "getReferencedGroupValue(matchResult)<EOL>"}
{"signature": "val nullableAnyType =", "body": "inliningContext.state.module.builtIns.nullableAnyType<EOL>"}
{"signature": "else if (falseCondition) {", "body": "<EOL><INDENT><INDENT><INDENT>if (complexCondition) ConditionValue.COMPLEX_FALSE else ConditionValue.CONST_FALSE<EOL><INDENT><INDENT>}"}
{"signature": "val unsubstitutedReceiverType =", "body": "resolvedCall.candidateDescriptor.extensionReceiverParameter?.type ?: return<EOL>"}
{"signature": "fun sinD() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(<STR_LIT>, <NUM_LIT>, sin(<NUM_LIT>), <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, <NUM_LIT>, sin(<NUM_LIT>), <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val maxTested =", "body": "XcodeVersion(<NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "fun addImplication(flow: MutableFlow, implication: Implication) {", "body": "<EOL><INDENT><INDENT>val effect = implication.effect<EOL><INDENT><INDENT>if (effect == implication.condition) return<EOL><INDENT><INDENT>if (effect is TypeStatement &&<EOL><INDENT><INDENT><INDENT>(effect.isEmpty || flow.approvedTypeStatements[effect.variable]?.exactType?.containsAll(effect.exactType) == true)<EOL><INDENT><INDENT>) return<EOL><INDENT><INDENT>val variable = implication.condition.variable<EOL><INDENT><INDENT>flow.implications[variable] = flow.implications[variable]?.add(implication) ?: persistentListOf(implication)<EOL><INDENT>}"}
{"signature": "val methods =", "body": "unbox[index]<EOL>"}
{"signature": "if (this is NewResolvedCallImpl<D> && resolvedCallAtom.argumentsWithConversion.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>return true<EOL><INDENT>}"}
{"signature": "fun suspendThrowsThrowable<NUM_LIT>() {", "body": "}<EOL><EOL>typealias ThrowableAlias = Throwable<EOL><EOL>@Throws(ThrowableAlias::class)<EOL>suspend fun suspendThrowsThrowableTypealias() {}"}
{"signature": "fun foo<NUM_LIT>(s: SuspendRunnable) {", "body": "}<EOL>fun bar<NUM_LIT>() {}"}
{"signature": "val namedClassSymbol =", "body": "symbol as? KtNamedClassOrObjectSymbol ?: return null<EOL>"}
{"signature": "val tmpKlibDir =", "body": "createTempDirectory().also { it.toFile().deleteOnExit() }.toString()<EOL>"}
{"signature": "var usesNonConstantVariableAsConstant =", "body": "false<EOL>"}
{"signature": "package p;<EOL>.", "body": ""}
{"signature": "fun indexTypeAlias(typeAlias: KtTypeAlias) {", "body": "<EOL><INDENT><INDENT>addToTypeAliasMap(typeAlias)<EOL><INDENT><INDENT>indexTypeAliasDefinition(typeAlias)<EOL><INDENT>}"}
{"signature": "val film =", "body": "Film(arrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>))<EOL>"}
{"signature": "if (j == <NUM_LIT> && i == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (stdLibTypes.contains(name)) {", "body": "<EOL><INDENT><INDENT><INDENT>QualifierEntity(TSLIBROOT, IdentifierEntity(name))<EOL><INDENT><INDENT>}"}
{"signature": "if (old.getExtensionCount(KlibMetadataProtoBuf.propertyBackingFieldAnnotation) != new.getExtensionCount(KlibMetadataProtoBuf.propertyBackingFieldAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val parentMatchLine =", "body": "parentMatch?.item?.line<EOL>"}
{"signature": "val inlinedType =", "body": "property.type<EOL>"}
{"signature": "val CONVERT_ARGUMENT =", "body": "<STR_LIT><EOL>"}
{"signature": "for ((x<NUM_LIT>, y<NUM_LIT>) in list) {", "body": "<EOL><INDENT><INDENT><INDENT>if (x<NUM_LIT> == y<NUM_LIT> && x<NUM_LIT> == y<NUM_LIT>) return<EOL><INDENT><INDENT>}"}
{"signature": "val descriptorClassId =", "body": "<EOL><INDENT><INDENT>ClassId(SerializationPackages.descriptorsPackageFqName, Name.identifier(SerialEntityNames.SERIAL_DESCRIPTOR_CLASS))<EOL>"}
{"signature": "if (!gradleVersionFilterParameter.isPresent) {", "body": "<EOL><INDENT><INDENT><INDENT>return ConditionEvaluationResult.enabled(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val builderFactory =", "body": "OriginCollectingClassBuilderFactory(ClassBuilderMode.KAPT<NUM_LIT>)<EOL>"}
{"signature": "when(!isString(x)) {", "body": "<EOL><INDENT><INDENT>true -> x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT><INDENT>false -> x.length<EOL><INDENT>}"}
{"signature": "val nonStubTypes =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>types.filter { !isTypeVariable(it.lowerBoundIfFlexible()) && !isTypeVariable(it.upperBoundIfFlexible()) }<EOL>"}
{"signature": "val currentDurations =", "body": "report.currentBenchmarksDuration<EOL>"}
{"signature": "val DESTINATION =", "body": "CompilerConfigurationKey.create<String>(<STR_LIT>)<EOL>"}
{"signature": "val get<NUM_LIT> =", "body": "otherStr.<!EVALUATED(<STR_LIT>)!>get(oneVal)<!><EOL>"}
{"signature": "if (qualifier is TypeParameterQualifier) {", "body": "<EOL><INDENT><INDENT>return qualifier.descriptor<EOL><INDENT>}"}
{"signature": "val lastRange =", "body": "ranges.last()<EOL>"}
{"signature": "import this symbol and all its sibling symbols with star import on the parent if importing them<EOL>.", "body": ""}
{"signature": "val moduleDependency =", "body": "Dependency(dependency.moduleName, klibFile)<EOL>"}
{"signature": "if (classKind != ClassKind.ENUM_ENTRY) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(source, KtErrorsParcelize.PARCELABLE_SHOULD_BE_CLASS, context)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "when (groupedItems.size) {", "body": "<EOL><INDENT><INDENT><NUM_LIT> -> return TreeNode.oneLevel()<EOL><INDENT><INDENT><NUM_LIT> -> return TreeNode.oneLevel(groupedItems.values.first())<EOL><INDENT>}"}
{"signature": "val secondaryCtors =", "body": "<EOL><INDENT><INDENT><INDENT>if (!hasTypeParams)<EOL>"}
{"signature": "if (it !in visited) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>visited += it<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>getRecursive(it, relation)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val deparenthesizedElement =", "body": "KtPsiUtil.deparenthesize(callElement)!!<EOL>"}
{"signature": "while (a == null) {", "body": "<EOL><INDENT><INDENT><INDENT>break;<EOL><INDENT><INDENT>}"}
{"signature": "if (isFunctionReference(x) && name != null) {", "body": "<EOL><INDENT><INDENT><INDENT>tracker.markReachable(name)<EOL><INDENT><INDENT>}"}
{"signature": "val errorClassName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (res.contains('/')) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val compilerFqName =", "body": "<STR_LIT><EOL>"}
{"signature": "val terminatedWorkers =", "body": "mutableSetOf<Worker>()<EOL>"}
{"signature": "val propertyName =", "body": "irFunction.property?.name?.asString()<EOL>"}
{"signature": "for (sealedSubclassSymbol in sealedSubclasses) {", "body": "<EOL><INDENT><INDENT><INDENT>classVisitor.visitPermittedSubclass(typeMapper.mapClass(sealedSubclassSymbol.owner).internalName)<EOL><INDENT><INDENT>}"}
{"signature": "val off =", "body": "frc.countLeadingZeroBits()<EOL>"}
{"signature": "val statisticsReportServiceKey =", "body": "GlobalContextKey<JpsStatisticsReportService>(<STR_LIT>)<EOL>"}
{"signature": "package annotations if JSR<NUM_LIT> is disabled<EOL>.", "body": ""}
{"signature": "if (other is RouteCost) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>comparator.compare(this, other)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val ALL_EXPECT =", "body": "<STR_LIT><EOL>"}
{"signature": "var extensions =", "body": "registeredExtensions.reduce(BunchOfRegisteredExtensions::plus)<EOL>"}
{"signature": "if (!project.kotlinNativeToolchainEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>project.setupNativeCompiler(konanTarget)<EOL><INDENT><INDENT>}"}
{"signature": "val buildStep =", "body": "BuildStep()<EOL>"}
{"signature": "if (expression.isLambdaInlining()) {", "body": "<EOL><INDENT><INDENT><INDENT>val argument = expression.inlinedElement as IrAttributeContainer<EOL><INDENT><INDENT><INDENT>val callee = inlinedStack.extractDeclarationWhereGivenElementWasInlined(argument)<EOL><INDENT><INDENT><INDENT>if (callee == null || callee != inlinedStack.lastOrNull()) return<EOL><INDENT><INDENT>}"}
{"signature": "val irFunctionReference =", "body": "irBlock.statements[<NUM_LIT>] as IrFunctionReference<EOL>"}
{"signature": "val kindBuilder =", "body": "StringBuilder(Namer.CLASS_KIND_ENUM + <STR_LIT>)<EOL>"}
{"signature": "val REMOVED_TARGET_MESSAGE =", "body": "<EOL><INDENT><STR_LIT> +<EOL>"}
{"signature": "fun streamToList() {", "body": "<EOL><INDENT><INDENT>val stringStream: Stream<String> = Stream.of(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val stringList: List<String> = stringStream.toList()<EOL><INDENT><INDENT>assertPrints(stringList, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>toChar()<INDENT>  until <NUM_LIT>toChar())<INDENT>  {", "body": "sb.append(i); sb.append(' ') }"}
{"signature": "val nameStart =", "body": "if (dot != null) dot.textRange.endOffset - textRange.startOffset else <NUM_LIT><EOL>"}
{"signature": "val typeHierarchyInfo =", "body": "if (!context.ghaEnabled())<EOL>"}
{"signature": "if (anonymousFunctions.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>argumentListSplitNodes.push(null)<EOL><INDENT><INDENT>}"}
{"signature": "val dropMax =", "body": "fibonacci().drop(Int.MAX_VALUE)<EOL>"}
{"signature": "val serializerProtocol =", "body": "BuiltInSerializerProtocol<EOL>"}
{"signature": "val elementDescriptor =", "body": "getKaptDescriptor(declaration, file, fileInfo) ?: return null<EOL>"}
{"signature": "fun foo(a: A, any: Any) {", "body": "}<EOL><EOL>fun bar() {<EOL><INDENT><caret>foo(A(), <STR_LIT>)<EOL>}"}
{"signature": "val lowerWithoutPrefix =", "body": "lowerRendered.substring(lowerPrefix.length)<EOL>"}
{"signature": "val bbNull =", "body": "basicBlock(<STR_LIT>, value.startLocation)<EOL>"}
{"signature": "import { test } from <STR_LIT><EOL>.", "body": ""}
{"signature": "val dPointWithInterface =", "body": "DPointWithInterface(<NUM_LIT>.my, <NUM_LIT>.my)<EOL>"}
{"signature": "val tmp_loopParameter =", "body": "it.next()<EOL>"}
{"signature": "if (stackSize == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isPublicInlineFunction) {", "body": "<EOL><INDENT><INDENT>InlineMetadata.wrapFunction(this, FunctionWithWrapper(function, null), source)<EOL><INDENT>}"}
{"signature": "val registeredAdditionalArtifactResolvers =", "body": "mutableListOf<RegisteredAdditionalArtifactResolver>()<EOL>"}
{"signature": "val nextCall =", "body": "get(BindingContext.LOOP_RANGE_NEXT_RESOLVED_CALL, loopRange)<EOL>"}
{"signature": "var isAllUnder =", "body": "false<EOL>"}
{"signature": "fun addOtherSystem(otherSystem: ConstraintStorage) {", "body": "<EOL><INDENT><INDENT>addOtherSystem(otherSystem, isAddingOuter = false)<EOL><INDENT>}"}
{"signature": "for (arg in argumentList.arguments) {", "body": "<EOL><INDENT><INDENT><INDENT>arg.unwrapAndFlattenArgument(flattenArrays = true).forEach(::take)<EOL><INDENT><INDENT>}"}
{"signature": "fun testInterceptorKeyIsNotOverridden(context: CoroutineContext, element: CoroutineContext.Element) {", "body": "<EOL><INDENT><INDENT>val interceptor = context[ContinuationInterceptor]<EOL><INDENT><INDENT>assertNotNull(interceptor)<EOL><INDENT><INDENT>assertSame(element, interceptor)<EOL><INDENT><INDENT>assertNull(context[BaseElement])<EOL><INDENT><INDENT>assertNull(context[DerivedElementWithPolyKey])<EOL><INDENT><INDENT>assertEquals(context, context.minusKey(BaseElement))<EOL><INDENT><INDENT>assertEquals(context, context.minusKey(DerivedElementWithPolyKey))<EOL><INDENT>}"}
{"signature": "if (!depsFilePath.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>depsFilePath.File().writeLines(DependenciesTrackingResult.serialize(dependenciesTrackingResult))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classOrInterface =", "body": "toType.eraseToClassOrInterface<EOL>"}
{"signature": "val javac =", "body": "javac<EOL>"}
{"signature": "var isGetCalled =", "body": "false<EOL>"}
{"signature": "if (argument is FirVarargArgumentsExpression) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>addAll(argument.arguments)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val relevantFieldIds =", "body": "fields<NUM_LIT>keys.union(fields<NUM_LIT>keys)<EOL>"}
{"signature": "if (lastParameter == null) {", "body": "<EOL><INDENT><INDENT><INDENT>addDiagnostic(TooManyArguments(externalArgument, function))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "for (dependency in testModule.dependencies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dependencies.add(modules[dependency as TestModule?]!!)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package signature<EOL>.", "body": ""}
{"signature": "if (typeElement is KtFunctionType && typeElement.receiver != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ConeAttributes.WithExtensionFunctionType.add(attributes)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (a.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "fun header(subject: String) {", "body": "<EOL><INDENT><INDENT>output.append(\"<INDENT>}"}
{"signature": "if (descriptor.name.asString().isUnderscoreOnlyName()) {", "body": "<EOL><INDENT><INDENT><INDENT>checkSimpleNameUsage(ktName, trace)<EOL><INDENT><INDENT>}"}
{"signature": "when (text) {", "body": "<EOL><INDENT>Numbers.One.name, <STR_LIT>, <STR_LIT> -> <NUM_LIT><EOL><INDENT>Numbers.Two.name, <STR_LIT>, <STR_LIT> -> <NUM_LIT><EOL><INDENT>else -> <NUM_LIT><EOL>}"}
{"signature": "val forbidden =", "body": "mutableListOf<MutableList<Int>>()<EOL>"}
{"signature": "var errors =", "body": "<NUM_LIT> <EOL>"}
{"signature": "val shared =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(c : Class<*>) {", "body": "<EOL><INDENT>val sc = c <!UNCHECKED_CAST!>as Class<String><!><EOL><INDENT><INDENT>c.getAnnotations();<EOL><INDENT>sc.getAnnotations();<EOL>}"}
{"signature": "if (typeConstructor is TypeVariableTypeConstructorMarker) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (conf.shouldKeepTypeVariableBasedType(typeConstructor, isK<NUM_LIT>)) null else type.defaultResult(toSuper)<EOL><INDENT><INDENT>}"}
{"signature": "val majorCompare =", "body": "major.compareTo(other.major)<EOL>"}
{"signature": "when (classKind) {", "body": "<EOL><INDENT>KtClassKind.INTERFACE -> translateToObjCProtocol()<EOL><INDENT>KtClassKind.CLASS -> translateToObjCClass()<EOL><INDENT>KtClassKind.OBJECT -> translateToObjCObject()<EOL><INDENT>KtClassKind.ENUM_CLASS -> translateToObjCClass()<EOL><INDENT>KtClassKind.COMPANION_OBJECT -> translateToObjCObject()<EOL><INDENT>else -> null<EOL>}"}
{"signature": "val declarationMapper =", "body": "DeclarationMapperImpl()<EOL>"}
{"signature": "val sourcePtr =", "body": "alloc<CArrayPointerVar<ByteVar>>()<EOL>"}
{"signature": "val otherLowerRanges =", "body": "mutableListOf<IntRange>()<EOL>"}
{"signature": "if (!nativeBridges.isSupported(element)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>sequenceOf(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>annotationForUnableToImport,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>).forEach(out)<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (<!USELESS_IS_CHECK!>this !is B<!>) {", "body": "<EOL><INDENT><INDENT>this.<!UNRESOLVED_REFERENCE!>bar<!>()<EOL><INDENT><INDENT><!UNRESOLVED_REFERENCE!>bar<!>()<EOL><INDENT><INDENT>this.foo()<EOL><INDENT><INDENT>foo()<EOL><INDENT>}"}
{"signature": "for ((ap, bp) in a.parameters.zip(b.parameters)) {", "body": "<EOL><INDENT><INDENT><INDENT>unifySchemes(ap, bp)<EOL><INDENT><INDENT>}"}
{"signature": "fun setContent(content: @Composable () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>globalContent = content<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jumpsIfNull =", "body": "insn.opcode == Opcodes.IFNULL<EOL>"}
{"signature": "fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {", "body": "<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun processTypeRef(resolvedTypeRef: FirResolvedTypeRef) {", "body": "<EOL><INDENT><INDENT>val typeElement = resolvedTypeRef.correspondingTypePsi ?: return<EOL><INDENT><INDENT>if (typeElement.qualifier == null) return<EOL><EOL><INDENT><INDENT>val classifierId = resolvedTypeRef.type.lowerBoundIfFlexible().candidateClassId ?: return<EOL><EOL><INDENT><INDENT>findClassifierQualifierToShorten(classifierId, typeElement)?.let(::addElementToShorten)<EOL><INDENT>}"}
{"signature": "fun checkType(type: ConeKotlinType?, element: FirElement, context: CheckerContext, reporter: DiagnosticReporter) {", "body": "<EOL><INDENT><INDENT>val classSymbol = type?.toRegularClassSymbol(context.session)<EOL><INDENT><INDENT>checkSourceElement(classSymbol?.sourceElement, element, context, reporter)<EOL><INDENT>}"}
{"signature": "if (old.hasReceiverTypeId()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(oldTypeTable.getType(old.receiverTypeId), newTypeTable.getType(new.receiverTypeId))) return false<EOL><INDENT><INDENT>}"}
{"signature": "if (context.trace.bindingContext.getType(argExpression)?.isDynamic() == true && arg.getSpreadElement() != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.trace.report(ErrorsJs.WRONG_OPERATION_WITH_DYNAMIC.on(arg.asElement(), <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val definingClass =", "body": "receiverType.getMaybeBuiltinClass() ?: error(<STR_LIT>)<EOL>"}
{"signature": "if (isWithNewInference) {", "body": "<EOL><INDENT><INDENT><INDENT>if (ktType.constructor.isDenotable && ktType.arguments.isEmpty())<EOL><INDENT><INDENT><INDENT><INDENT>ktType<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>approximateType(ktType)<EOL><INDENT><INDENT>}"}
{"signature": "var hasCompanion =", "body": "false<EOL>"}
{"signature": "for ((index, parameter) in mapping.values.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result[index + <NUM_LIT>] = parametersToIndices[parameter] ?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rawTypedStub =", "body": "FromJava.RAW_TYPED_STUB<EOL>"}
{"signature": "val defaultScope =", "body": "transformDefaults(scope)<EOL>"}
{"signature": "val originalVisibleAnnotations =", "body": "classNode.visibleAnnotations<EOL>"}
{"signature": "val filePhaserState =", "body": "state.changePhaserStateType<IrModuleFragment, IrFile>()<EOL>"}
{"signature": "val CLASS_OR_METHOD =", "body": "setOf(ModifierTarget.CLASS, ModifierTarget.METHOD)<EOL>"}
{"signature": "fun outerLambda(action: String.() -> Unit) {", "body": "}<EOL>var lambda: Int.() -> Unit = {}"}
{"signature": "val contagiousReachableDeclarations =", "body": "hashSetOf<IrOverridableDeclaration<*>>()<EOL>"}
{"signature": "if (step == stepCount) {", "body": "<EOL><INDENT><INDENT><INDENT>resolvedCall.setAnalyzedResults(getSubResolvedAtoms())<EOL><INDENT><INDENT>}"}
{"signature": "val unboundFunctionParameters =", "body": "functionParameters - boundFunctionParameters<EOL>"}
{"signature": "val mapper =", "body": "JavaToKotlinClassMapper<EOL>"}
{"signature": "val targetPathName =", "body": "target.replace(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "var isSuccessCandidate =", "body": "!classifierDeclaration.isInvisibleOrHidden(session, bodyResolveComponents)<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Inv<Number>, list: List<Inv<Any>>) {", "body": "<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(x)<EOL>}"}
{"signature": "val iv =", "body": "InstructionAdapter(mv)<EOL>"}
{"signature": "val DYNAMIC =", "body": "NativeOutputKind.DYNAMIC<EOL>"}
{"signature": "val parameterAttributes =", "body": "parameterList.attributes<EOL>"}
{"signature": "val IrStatementOriginFieldPreInit =", "body": "IrStatementOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val INSTANCE_KINDS =", "body": "listOf(TEST, BEFORE_TEST, AFTER_TEST)<EOL>"}
{"signature": "val outerType =", "body": "kotlin.test.assertNotNull(supertype.outerType, <STR_LIT>)<EOL>"}
{"signature": "val specialJsStringMap =", "body": "stringMapOf<Any>()<EOL>"}
{"signature": "val ktRight =", "body": "ktExpression.right ?: throw AssertionError(<STR_LIT>)<EOL>"}
{"signature": "val firDifference =", "body": "FIR_DIFFERENCE in testServices.moduleStructure.allDirectives<EOL>"}
{"signature": "when (n and <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> return __kernel_sin(y[<NUM_LIT>], y[<NUM_LIT>], <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> return __kernel_cos(y[<NUM_LIT>], y[<NUM_LIT>])<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> return -__kernel_sin(y[<NUM_LIT>], y[<NUM_LIT>], <NUM_LIT>)<EOL><INDENT><INDENT><INDENT>else -> return -__kernel_cos(y[<NUM_LIT>], y[<NUM_LIT>])<EOL><INDENT><INDENT>}"}
{"signature": "val agent =", "body": "testInstrumenterOutputs.singleFile<EOL>"}
{"signature": "if (this is SimpleFunctionDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>if (kind == CallableMemberDescriptor.Kind.FAKE_OVERRIDE) return false<EOL><INDENT><INDENT>}"}
{"signature": "val numericPrimitives =", "body": "PrimitiveType.numericPrimitives.sortedBy { it.capacity }.toSet()<EOL>"}
{"signature": "val UPDATE =", "body": "<STR_LIT><EOL>"}
{"signature": "val nothingType =", "body": "context.irBuiltIns.nothingType<EOL>"}
{"signature": "val KLIB_ARTIFACTS_HANDLERS_STEP_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val unsubstitutedPlainInvokes =", "body": "<EOL><INDENT><INDENT>functionNClass.unsubstitutedMemberScope.getContributedFunctions(extensionInvoke.name, NoLookupLocation.FROM_BACKEND)<EOL>"}
{"signature": "for (entry in params) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parameters.append(entry.key, entry.value)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (declarationDescriptor is TypeParameterDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>return declarationDescriptor.name.asString() == qualifiedName<EOL><INDENT><INDENT>}"}
{"signature": "val enclosingSuspendFunction =", "body": "findEnclosingSuspendFunction(context)<EOL>"}
{"signature": "fun withDifferentArg() {", "body": "}<!><EOL><EOL><!ACTUAL_ANNOTATIONS_NOT_MATCH_EXPECT!>actual fun inValueParam(arg: String) {}"}
{"signature": "val sortedFields =", "body": "JavacList.from(fields.sortedWith(MembersPositionComparator(classPosition, fieldsPositions)))<EOL>"}
{"signature": "val useScriptArgs =", "body": "currentScriptArgs?.scriptArgs<EOL>"}
{"signature": "fun addSourceStructure(sourceStructure: JavaFileStructure) {", "body": "<EOL><INDENT><INDENT>sourceCache[sourceStructure.sourceFile] = sourceStructure<EOL><INDENT>}"}
{"signature": "val charCode =", "body": "char.hexToInt()<EOL>"}
{"signature": "val SHORT_MODULE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "for (test<NUM_LIT> in <!INACCESSIBLE_TYPE!>listOf<NUM_LIT>(d<NUM_LIT>, d<NUM_LIT>)<!>) {", "body": "}"}
{"signature": "val jarTask =", "body": "tasks.named<Jar>(<STR_LIT>)<EOL>"}
{"signature": "val initial =", "body": "unwrapFakeOverridesOrDelegated().forbiddenNamedArgumentsTargetOrNullIgnoringOverridden() ?: return null<EOL>"}
{"signature": "when (OSKind.current) {", "body": "<EOL><INDENT><INDENT>OSKind.Windows -> System.getenv(<STR_LIT>).orDefault(tempPath)<EOL><INDENT><INDENT>OSKind.OSX -> userHomePath + <STR_LIT><EOL><INDENT><INDENT>OSKind.Unix -> System.getenv(<STR_LIT>).orDefault(userHomePath + <STR_LIT>)<EOL><INDENT><INDENT>OSKind.Unknown -> tempPath<EOL><INDENT>}"}
{"signature": "val libClassKt =", "body": "subProject(<STR_LIT>).kotlinSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "fun setMethodImplForInt<NUM_LIT>Array(obj: Int<NUM_LIT>Array, index: Int, value: Int) {", "body": "js(<STR_LIT>) }"}
{"signature": "fun withErasedThis(action: () -> Unit) {", "body": "<EOL><INDENT><INDENT>val oldThis = context.thisNode<EOL><INDENT><INDENT>context.thisNode = null<EOL><INDENT><INDENT>action()<EOL><INDENT><INDENT>context.thisNode = oldThis<EOL><INDENT>}"}
{"signature": "if (isObjCObjectType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return translateToObjCObjectType()<EOL><INDENT>}"}
{"signature": "if (!shouldOccur) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>f()<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val syntheticPropertyCache =", "body": "session.syntheticPropertiesStorage.cacheByOwner.getValue(klass, null)<EOL>"}
{"signature": "val filteredLines =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val rawExpression =", "body": "initializer.expression<EOL>"}
{"signature": "if (status.isExternal) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val generationTime =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irMeasurements.firstOrNull { it.kind == IRMeasurement.Kind.GENERATION }?.milliseconds ?:<EOL>"}
{"signature": "val archivesBaseName =", "body": "<STR_LIT><EOL>"}
{"signature": "val aFoo =", "body": "a::foo<EOL>"}
{"signature": "if (isInlineFunPublicOrPublishedApi && isCalledFunPublicOrPublishedApi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkSuperCalls(calledDeclaration, accessExpression, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val deallocFlagHolder =", "body": "obj.deallocFlagHolder<EOL>"}
{"signature": "for (file in resultFiles.value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(file.absolutePath)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val apiElementsConfigurationName =", "body": "lowerCamelCaseName(variantName, <STR_LIT>)<EOL>"}
{"signature": "val PLATFORM_FUNCTION_MARKER =", "body": "'%'<EOL>"}
{"signature": "val tasksInProject =", "body": "multiplatformProjectTasks[project] ?: mutableSetOf()<EOL>"}
{"signature": "fun test<NUM_LIT>(a: () -> List<Int>) {", "body": "<EOL><INDENT>test<NUM_LIT>(fun () = listOf())<EOL>}"}
{"signature": "fun testInterceptorKeyIsNotOverridden() {", "body": "<EOL><INDENT><INDENT>val ci = CustomInterceptor()<EOL><INDENT><INDENT>testInterceptorKeyIsNotOverridden(ci, ci)<EOL><INDENT><INDENT>testInterceptorKeyIsNotOverridden(IrrelevantElement + ci, ci)<INDENT> }"}
{"signature": "val secondDeprecation =", "body": "second[DEPRECATED_ANNOTATION_CLASS_ID] ?: return null<EOL>"}
{"signature": "fun visitOuterClassTypeParameterRef(outerClassTypeParameterRef: FirOuterClassTypeParameterRef) {", "body": "<EOL><INDENT><INDENT>visitElement(outerClassTypeParameterRef)<EOL><INDENT>}"}
{"signature": "if (functionalArgument is LambdaInfo) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>capturedLambdas.add(functionalArgument)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun checkMetaSerializableApplicable(descriptor: ClassDescriptor, trace: BindingTrace) {", "body": "<EOL><INDENT><INDENT>if (descriptor.kind != ClassKind.ANNOTATION_CLASS) return<EOL><INDENT><INDENT>if (descriptor.classId?.isNestedClass != true) return<EOL><INDENT><INDENT>val entry = descriptor.findAnnotationDeclaration(SerializationAnnotations.metaSerializableAnnotationFqName) ?: return<EOL><INDENT><INDENT>trace.report(SerializationErrors.META_SERIALIZABLE_NOT_APPLICABLE.on(entry))<EOL><INDENT>}"}
{"signature": "package<EOL><INDENT> * within the provider's scope.", "body": "<EOL>"}
{"signature": "fun visitBranch(branch: IrBranch) {", "body": "<EOL><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (got != expected) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val isQualifier =", "body": "isLHSOfDot &&<EOL>"}
{"signature": "if (property is FirSyntheticProperty) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>transformSimpleFunction(property.getter.delegate, data)<EOL><INDENT><INDENT><INDENT><INDENT>return property<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (originalPathPsi) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtClassOrObject -> originalPathPsi.getOrBuildFirSafe<FirRegularClass>(contextResolveSession)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtScript -> originalPathPsi.getOrBuildFirSafe<FirScript>(contextResolveSession)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtFile -> originalPathPsi.getOrBuildFirFile(contextResolveSession)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun BN() {", "body": "<EOL><INDENT><INDENT>   N()<EOL><INDENT><INDENT>}"}
{"signature": "val maxY =", "body": "<NUM_LIT>f<EOL>"}
{"signature": "val moduleNameProvider =", "body": "project.provider { publication?.artifactId ?: dashSeparatedName(project.name, target?.name?.toLowerCase()) }<EOL>"}
{"signature": "if (!checkParcelableType(type, customParcelerTypes, session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(property.returnTypeRef.source, KtErrorsParcelize.PARCELABLE_TYPE_NOT_SUPPORTED, context)<EOL><INDENT><INDENT>}"}
{"signature": "val entryValue =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>facade.components.dataFlowValueFactory.createDataFlowValue(entryExpression, entryType, contextAfterSubject)<EOL>"}
{"signature": "val versioning =", "body": "Properties().apply { manifestFile.inputStream.use { load(it) } }.readKonanLibraryVersioning()<EOL>"}
{"signature": "for ((element, value) in elementToValues.entries) {", "body": "<EOL><INDENT><INDENT><INDENT>valueDescriptions[value to element] = valueDescription(element, value)<EOL><INDENT><INDENT>}"}
{"signature": "var errorQualifiedAccessTypes =", "body": "<NUM_LIT><EOL>"}
{"signature": "val intersectionUpperType =", "body": "intersectTypes(upperConstraints.map { it.type })<EOL>"}
{"signature": "fun testSimple() {", "body": "<EOL><INDENT><INDENT>a = <STR_LIT><EOL><EOL><INDENT><INDENT>var <!ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE!>i<!> = <NUM_LIT>;<EOL><INDENT><INDENT><!UNUSED_VALUE!>i =<!> <NUM_LIT>;<EOL><INDENT><INDENT><!UNUSED_VALUE!>i =<!> <NUM_LIT>;<EOL><INDENT>}"}
{"signature": "fun report(severity: IdeaKotlinSerializationLogger.Severity, message: String, cause: Throwable?) {", "body": "<EOL><INDENT><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>if (cause != null) println(cause.stackTraceToString())<EOL><INDENT><INDENT>}"}
{"signature": "fun test(b: B){", "body": "<EOL><INDENT>b.size<EOL><INDENT>b.add(<NUM_LIT>,<NUM_LIT>)<EOL><INDENT>b.add(<NUM_LIT>)<EOL><INDENT>b.get(<NUM_LIT>)<EOL><INDENT>b.remove(<NUM_LIT>)<EOL><INDENT>b.removeAt(<NUM_LIT>)<EOL><INDENT>b.removeFirst()<EOL>}"}
{"signature": "fun set(i: Int, newValue: Double) {", "body": "<EOL><INDENT><INDENT>value = newValue<EOL><INDENT>}"}
{"signature": "val DELEGATED_PROPERTIES_ARRAY_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val sigB =", "body": "createSignature(b)<EOL>"}
{"signature": "when (sealed) {", "body": "}"}
{"signature": "if (!inliningContext.isInliningLambda) {", "body": "<EOL><INDENT><INDENT><INDENT>inliningContext.root.state.globalInlineContext.recordTypeFromInlineFunction(info.oldClassName)<EOL><INDENT><INDENT>}"}
{"signature": "else if (psiClass !is ExternallyDefinedPsiElement || !containsKey(name)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>put(name, psiClass)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "package declared in different package<EOL>.", "body": ""}
{"signature": "package being read by the ABI reader if it should be excluded/ignored.", "body": "*/<EOL>"}
{"signature": "else if (parent is KtParameter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return isUnderAnnotationClassDeclaration(trace, parent)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val headerPath =", "body": "clang_indexLoc_getCXSourceLocation(info.loc.readValue()).getContainingFile()?.canonicalPath<EOL>"}
{"signature": "val escapeOrigins =", "body": "mutableSetOf<PointsToGraphNode>()<EOL>"}
{"signature": "if (!matched) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.visitElement(node)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val value = this.value) {", "body": "<EOL><INDENT><INDENT><INDENT>is KClassValue.Value.NormalClass -> value.classId in classIds<EOL><INDENT><INDENT><INDENT>is KClassValue.Value.LocalClass -> false<EOL><INDENT><INDENT>}"}
{"signature": "val additionalArguments =", "body": "if (additionalRunnerArguments.isNotEmpty())<EOL>"}
{"signature": "val includeArgs =", "body": "if (testDataDir.name.startsWith(<STR_LIT>))<EOL>"}
{"signature": "if (emitTraceMarkers) {", "body": "<EOL><INDENT><INDENT><INDENT>transformed.wrapWithTraceEvents(irFunctionSourceKey(), scope)<EOL><INDENT><INDENT>}"}
{"signature": "val metadataOwner =", "body": "generateSequence(this) { it.parent }.find { !it.irClass.isSynthetic } ?: this<EOL>"}
{"signature": "fun foo(a: MutableList<out Number>?) {", "body": "}"}
{"signature": "if (file.canHaveAdditionalFilesInFacade()) {", "body": "<EOL><INDENT><INDENT><INDENT>findFilesForFacade(facadeFqName, module.contentSearchScope).filter(KtFile::isJvmMultifileClassFile)<EOL><INDENT><INDENT>}"}
{"signature": "val expectedIndexes =", "body": "Array(parameters.size) { it }.toMutableList()<EOL>"}
{"signature": "val testUsage<NUM_LIT> =", "body": "<EOL><INDENT><INDENT>if (true) <!IMPLICIT_CAST_TO_ANY!><NUM_LIT><!><EOL>"}
{"signature": "val DOCUMENTATION_BINARY_TYPE =", "body": "<STR_LIT><EOL>"}
{"signature": "for (i in <NUM_LIT>u .. return <STR_LIT>) {", "body": "}"}
{"signature": "val isDisabled =", "body": "globalLevel == ReportLevel.IGNORE<EOL>"}
{"signature": "for (annotation in supertypeRef.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val resolvedType = annotation.resolvedType as? ConeClassLikeType ?: continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val typeArgumentClassLikeDeclaration = resolvedType.lookupTag.toSymbol(session)?.fir<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>checkIsInLoop(typeArgumentClassLikeDeclaration, wasSubtypingInvolved, wereTypeArgumentsInvolved)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ident =", "body": "suggestion.ident<EOL>"}
{"signature": "val isCompanionObject =", "body": "classKind == ProtoBuf.Class.Kind.COMPANION_OBJECT<EOL>"}
{"signature": "fun stringVararg(vararg args: String) {", "body": "}<EOL>fun intVararg(vararg args: Int) {}"}
{"signature": "val remainingParameters =", "body": "getRemainingParameters(functionDescriptor.original, substituteCount)<EOL>"}
{"signature": "fun minMax() {", "body": "<EOL><INDENT><INDENT>expectMinMax(<NUM_LIT>U, <NUM_LIT>U, ushortArrayOf(<NUM_LIT>U))<EOL><INDENT><INDENT>expectMinMax(<NUM_LIT>U, <NUM_LIT>U, ushortArrayOf(<NUM_LIT>U, <NUM_LIT>U))<EOL><INDENT><INDENT>expectMinMax(<NUM_LIT>U, UShort.MAX_VALUE, ushortArrayOf(<NUM_LIT>U, <NUM_LIT>U, UShort.MAX_VALUE))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><EOL><INDENT>}"}
{"signature": "val cinteropArtifact =", "body": "apiElements.artifacts.filter { artifact -> artifact.classifier == <STR_LIT> }<EOL>"}
{"signature": "val isReportedByErrorNodeDiagnosticCollector =", "body": "initializer is FirCall && initializer.toReference(context.session)?.isError() == true<EOL>"}
{"signature": "val representAsValuesRef =", "body": "representCFunctionParameterAsValuesRef(parameter.type)<EOL>"}
{"signature": "if (!isKSerializer(param.type)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>SerializationErrors.CUSTOM_SERIALIZER_PARAM_ILLEGAL_TYPE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>targetElement,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serializerType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>serializableType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>param.name.asString()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val functionParameterAndReturnTypes =", "body": "functionReference.type.remappedTypeArguments()<EOL>"}
{"signature": "val IS_FUNCTON_OF_ARITY_METHOD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val LOCAL_TEE =", "body": "<STR_LIT><EOL>"}
{"signature": "val resultName =", "body": "DescriptorUtils.getJvmName(annotated)<EOL>"}
{"signature": "val longSerializer =", "body": "<STR_LIT><EOL>"}
{"signature": "val cachedResults =", "body": "CommonizerMap<CirEntityId, AssociatedClassifierIds>()<EOL>"}
{"signature": "val inlineSourceTest =", "body": "inlineSourceTestFactory[target]<EOL>"}
{"signature": "val three =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (declaration.classId.outerClassId == fir.classId && shouldBuildStub(declaration)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result += classifierStorage.getIrClassSymbol(declaration.symbol).owner<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val expectedSourcesJarTasks =", "body": "setOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (result == null && element.kotlinOrigin in selfOrParents) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>result = element<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for ((i: Int, z: Int) in alist) {", "body": "<EOL><EOL><INDENT><INDENT>result += i + z<EOL><INDENT>}"}
{"signature": "fun f<NUM_LIT>(<!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> a: Foo) {", "body": "}<EOL>fun f<NUM_LIT>(<!FORBIDDEN_VARARG_PARAMETER_TYPE!>vararg<!> a: Foo?) {}"}
{"signature": "val hasFinally =", "body": "finallyBlock != null<EOL>"}
{"signature": "if (descriptor.isInlineClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>containerContext.intoClass(descriptor, OwnerKind.IMPLEMENTATION, state)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>.intoClass(descriptor, OwnerKind.ERASED_INLINE_CLASS, state)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (klass.startOffset != UNDEFINED_OFFSET) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val markGray =", "body": "mutableSetOf<DefFile>()<EOL>"}
{"signature": "val CHAR_CARET<INDENT><INDENT><INDENT><INDENT>=", "body": "<NUM_LIT>xe<NUM_LIT>toInt() or '^'.toInt()<EOL>"}
{"signature": "val typeParametersWithSameName =", "body": "renderedParameters.getOrPut(name) { LinkedHashSet() }<EOL>"}
{"signature": "val isNil =", "body": "LLVMBuildICmp(builder, LLVMIntPredicate.LLVMIntEQ, firstArgI<NUM_LIT>Ptr, LLVMConstNull(llvm.int<NUM_LIT>PtrType), <STR_LIT>)<EOL>"}
{"signature": "if (actualMagic != universalMagic) {", "body": "<EOL><INDENT><INDENT>return TestCompilationResult.CompilationToolFailure(<EOL><INDENT><INDENT><INDENT>loggedData(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT><EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (!intersection.isLeftValidForDefinitelyNotNullable(context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(intersection.leftType.source, FirErrors.INCORRECT_LEFT_COMPONENT_OF_INTERSECTION, context)<EOL><INDENT><INDENT>}"}
{"signature": "val currentToLoad =", "body": "dataForFiles.keys.filter { it !in unchangedBetweenCompilations }.also { loadEntriesFor(it) }<EOL>"}
{"signature": "var visited =", "body": "false<EOL>"}
{"signature": "if (dirty) {", "body": "<EOL><INDENT><INDENT><INDENT>leafParents.keys.forEach(::findRoot)<EOL><INDENT><INDENT><INDENT>dirty = false<EOL><INDENT><INDENT>}"}
{"signature": "if (config.globalDce) {", "body": "<EOL><INDENT><INDENT><INDENT>LLVMAddGlobalDCEPass(manager)<EOL><INDENT><INDENT>}"}
{"signature": "val sourceDir =", "body": "File(testDataDirectory, libraryName)<EOL>"}
{"signature": "val preservedContainer =", "body": "container!!<EOL>"}
{"signature": "fun replaceRefWith(expression: IrExpression) {", "body": "<EOL><INDENT><INDENT>ifNotNullBlock.statements[ifNotNullBlock.statements.size - <NUM_LIT>] = expression<EOL><INDENT><INDENT>ifNotNullBlock.type = expression.type<EOL><INDENT><INDENT>ifExpr.type = expression.type<EOL><INDENT><INDENT>block.type = expression.type<EOL><INDENT>}"}
{"signature": "fun local() {", "body": "<EOL><INDENT><INDENT>val local = WorkerBoundReference(C(<NUM_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, local.value.a)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, local.valueOrNull?.a)<EOL><INDENT>}"}
{"signature": "val processedScripts =", "body": "mutableSetOf<CompiledScript>()<EOL>"}
{"signature": "val fileTextWithoutCaret =", "body": "fileTextWithCaret.replace(START_EXPRESSION_TAG, <STR_LIT>).replace(END_EXPRESSION_TAG, <STR_LIT>)<EOL>"}
{"signature": "if (expression.tokenType == KtNodeTypes.PARENTHESIZED) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.getFirstChildExpressionUnwrapped()<EOL><INDENT><INDENT>}"}
{"signature": "if (filter != null) {", "body": "<EOL><INDENT><INDENT><INDENT>filter.value(<STR_LIT>);<EOL><INDENT><INDENT>}"}
{"signature": "val INCREMENTAL_COMPILATION_COMPLETED =", "body": "<STR_LIT><EOL>"}
{"signature": "package serialization.", "body": "fake_overrides<EOL>"}
{"signature": "val funDeclaration =", "body": "callableDescriptor.containingDeclaration<EOL>"}
{"signature": "for (j in <NUM_LIT>.posSeq[i].size - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(<STR_LIT> + testPatterns[i] + <STR_LIT> + posSeq[i][j], regex.matches(posSeq[i][j]))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val podBuildTaskName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitTypeOperatorCall(typeOperatorCall: FirTypeOperatorCall) {", "body": "<EOL><INDENT><INDENT>visitElement(typeOperatorCall)<EOL><INDENT>}"}
{"signature": "for ((<!WRONG_OPERATION_WITH_DYNAMIC!>x<!>, <!WRONG_OPERATION_WITH_DYNAMIC!>y<!>) in A()) {", "body": "<EOL><INDENT><INDENT>println(x + y)<EOL><INDENT>}"}
{"signature": "fun addInsn(insnNode: AbstractInsnNode) {", "body": "<EOL><INDENT><INDENT>associatedInsns.add(insnNode)<EOL><INDENT>}"}
{"signature": "val boundReceiverComponents =", "body": "unboxMethods.map { it.invoke(oldCaller.boundReceiver) }.toTypedArray()<EOL>"}
{"signature": "if (workingDirectory != null) {", "body": "<EOL><INDENT><INDENT><INDENT>processBuilder.directory(workingDirectory)<EOL><INDENT><INDENT>}"}
{"signature": "val boundExtensionReceiver =", "body": "callableReferenceAccess.findBoundReceiver(explicitReceiverExpression, isDispatch = false)<EOL>"}
{"signature": "val SHOULD_NOT_BE_ESCAPED =", "body": "JsDeclarationScope.RESERVED_WORDS.filter { it !in SHOULD_BE_ESCAPED }.sorted()<EOL>"}
{"signature": "val fileSymbol =", "body": "dummyFile.getFileSymbol()<EOL>"}
{"signature": "val variableValues =", "body": "getValuesStoredOrLoadedToVariable(localVariableNode, node, frames)<EOL>"}
{"signature": "fun buildNop(location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.NOP, location)<EOL><INDENT>}"}
{"signature": "val bundleID =", "body": "mainPackage.child(Name.identifier(bundleName)).asString()<EOL>"}
{"signature": "if (removingIndex + <NUM_LIT> == size) {", "body": "<EOL><INDENT><INDENT><INDENT>keys.pop()<EOL><INDENT><INDENT><INDENT>values.pop()<EOL><INDENT><INDENT>}"}
{"signature": "val fakeName =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "val kotlinFunctionHolder =", "body": "<STR_LIT><EOL>"}
{"signature": "for (child in stub.childrenStubs) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val answer = findClass(child, predicate)<EOL><INDENT><INDENT><INDENT><INDENT>if (answer != null) return answer<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun inlineOnly() {", "body": "inline = Inline.Only }"}
{"signature": "val jsException =", "body": "getIrClass(FqName(<STR_LIT>))<EOL>"}
{"signature": "val positive =", "body": "<NUM_LIT>seconds<EOL>"}
{"signature": "if (test(x = <NUM_LIT>, y = <NUM_LIT>) != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val jsr<NUM_LIT>State =", "body": "languageVersionSettings.getFlag(JvmAnalysisFlags.javaTypeEnhancementState)<EOL>"}
{"signature": "if (!distNode.types[type.index] && !visited[distNode.id] && edge.suitableTypes[type.index]) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>distNode.types.set(type.index)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>visited.set(distNode.id)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>stack.push(distNode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val constructorSymbols =", "body": "klass.constructors(context.session)<EOL>"}
{"signature": "for (header in (headers.ownHeaders + headers.importedHeaders)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val dependency = processedHeadersToDefFiles[header]<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>?: if (header in headers.ownHeaders) continue@headers else continue@defFiles<EOL><EOL><INDENT><INDENT><INDENT><INDENT>depends.add(dependency.nameWithoutExtension)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeMap =", "body": "mutableMapOf<IrSymbol, Type>()<EOL>"}
{"signature": "if (this.groupBounds[<NUM_LIT>] == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>this.groupBounds[<NUM_LIT>] = this.startIndex<EOL><INDENT><INDENT><INDENT>this.groupBounds[<NUM_LIT>] = this.startIndex<EOL><INDENT><INDENT>}"}
{"signature": "val sourcesJar =", "body": "JarFile(groupDir.resolve(sourcesJarPath))<EOL>"}
{"signature": "val typeVariable =", "body": "systemWithoutWeakConstraints.descriptorToVariable(inferenceErrorData.call.toHandle(), it)<EOL>"}
{"signature": "val ooo =", "body": "foobar<EOL>"}
{"signature": "val mayBeInitializedNotHere =", "body": "ctxt.enterInitState?.mayBeInitialized() ?: false<EOL>"}
{"signature": "val subBounds =", "body": "subTypeParameter.superTypes.toMutableList()<EOL>"}
{"signature": "fun visitElvisExpression(elvisExpression: FirElvisExpression) {", "body": "<EOL><INDENT><INDENT>visitElement(elvisExpression)<EOL><INDENT>}"}
{"signature": "if (metaAnnotations != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderAnnotationsRecursive(analysisSession, metaAnnotations, currentMetaAnnotations + classId, indent = indent + <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val containingFirClassStack =", "body": "mutableListOf<FirClass>()<EOL>"}
{"signature": "if (!this.library.includesDeclaration(cursor)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val builderForModule =", "body": "dumper.builderForModule(currentModule)<EOL>"}
{"signature": "val savedValuesSize =", "body": "savedValues.fold(<NUM_LIT>) { size, value -> size + value.size }<EOL>"}
{"signature": "val aC =", "body": "CharArray(<NUM_LIT>)<EOL>"}
{"signature": "fun g() {", "body": "<EOL><INDENT><INDENT>log += <STR_LIT><EOL><INDENT>}"}
{"signature": "val rawDescriptorName =", "body": "descriptor.name.asString()<EOL>"}
{"signature": "fun collect(collector: FlowCollector<List<Data>>) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "val initSymbol =", "body": "irFunction.valueParameters[<NUM_LIT>].symbol<EOL>"}
{"signature": "var configured =", "body": "false<EOL>"}
{"signature": "val newTrace =", "body": "arrayListOf<StackTraceElement>()<EOL>"}
{"signature": "val entityAnnotations =", "body": "node.findIdeaKotlinEntityAnnotations()<EOL>"}
{"signature": "fun testKotlincJvmScriptWithClassPathFromSysProp() {", "body": "<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedStdout = <STR_LIT><EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val annotationsComments =", "body": "annotationsList.translateToObjCComment()<EOL>"}
{"signature": "val emptyScriptArgs =", "body": "ScriptArgsWithTypes(arrayOf(emptyArray<String>()), arrayOf(Array<String>::class))<EOL>"}
{"signature": "for (i in up(<STR_LIT>, <NUM_LIT>)..up(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT>}"}
{"signature": "val irBreak =", "body": "buildDispatchBlock(exit)<EOL>"}
{"signature": "if (!baseParametersOk) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val classDescriptors =", "body": "scope.filterIsInstance<ClassDescriptor>().sortedBy { it.fqNameSafe.asString() }<EOL>"}
{"signature": "fun visitDoWhileLoop(loop: IrDoWhileLoop, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDoWhileLoop(loop)<EOL><INDENT>}"}
{"signature": "if (isReceiverNullable) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.yieldDiagnostic(UnsafeCall(dispatchReceiverValueType))<EOL><INDENT><INDENT>}"}
{"signature": "fun Library(configure: Action<KotlinNativeLibraryConfig>) {", "body": "<EOL><INDENT><INDENT>addKotlinArtifact<KotlinNativeLibraryConfigImpl>(configure)<EOL><INDENT>}"}
{"signature": "val firstContainerValue =", "body": "VariableLValue(context, containerVariable)<EOL>"}
{"signature": "val bitcodeToLink =", "body": "topSortedLibraries.filter { shouldContainBitcode(it) }<EOL>"}
{"signature": "val derivedElementWithOldKey =", "body": "DerivedElementWithOldKey()<EOL>"}
{"signature": "val isConstructorParameterWithDefault =", "body": "primaryParamsAsProps[it] ?: false<EOL>"}
{"signature": "fun test<NUM_LIT>(x: TC<NUM_LIT><Number, Collection<Number>>) {", "body": "}<EOL>fun test<NUM_LIT>(x: TC<NUM_LIT><Number, Collection<Int>>) {}"}
{"signature": "val diagnosticMap =", "body": "mutableMapOf<AbstractTestDiagnostic, TextDiagnostic>()<EOL>"}
{"signature": "fun parametersInInnerKotlinClassConstructor() {", "body": "<EOL><INDENT><INDENT>val inner = kclass.KInnerClass().Inner(<STR_LIT>)<EOL><INDENT><INDENT>testAnnotationsInConstructor(inner::class)<EOL><INDENT>}"}
{"signature": "if (resolved) {", "body": "<EOL><INDENT><INDENT>argumentMapping.mapping[ParameterNames.deprecatedLevel]<EOL><INDENT>}"}
{"signature": "val continuationTypeFqName =", "body": "StandardNames.CONTINUATION_INTERFACE_FQ_NAME<EOL>"}
{"signature": "val partialWildcardSemver =", "body": "ctx.partialWildcardSemver()<EOL>"}
{"signature": "val BUILT_INS_PACKAGE_FQ_NAME =", "body": "FqName.topLevel(BUILT_INS_PACKAGE_NAME)<EOL>"}
{"signature": "for ((string, symbol) in stringLiteralAddress.unbound) {", "body": "<EOL><INDENT><INDENT><INDENT>symbol.bind(stringDataSectionStart)<EOL><INDENT><INDENT><INDENT>stringLiteralPoolId.reference(string).bind(stringLiteralCount)<EOL><INDENT><INDENT><INDENT>val constData = ConstantDataCharArray(<STR_LIT>, string.toCharArray())<EOL><INDENT><INDENT><INDENT>stringDataSectionBytes += constData.toBytes().toList()<EOL><INDENT><INDENT><INDENT>stringDataSectionStart += constData.sizeInBytes<EOL><INDENT><INDENT><INDENT>stringLiteralCount++<EOL><INDENT><INDENT>}"}
{"signature": "val propertyOrigin =", "body": "getDeclarationOriginFor(propertyFile)<EOL>"}
{"signature": "val STABILITY_WILDCARD_MULTI =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testElvis<NUM_LIT>(s: String?) {", "body": "<EOL><INDENT>s ?: todo()<EOL><EOL><INDENT>bar()<EOL>}"}
{"signature": "val moduleHeader =", "body": "moduleHeaderProto.readHeader(headerNameResolver)<EOL>"}
{"signature": "if (!requireGlobalInitializer && !requireThreadLocalInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val transient =", "body": "descriptor.annotations.serialTransient || !hasBackingField<EOL>"}
{"signature": "val nullableStringLength =", "body": "<!WAS_NOT_EVALUATED: `<EOL>"}
{"signature": "val unboxedRead =", "body": "IrGetFieldImpl(startOffset, endOffset, provider.elementField.symbol, unboxedType ?: type, receiver, origin)<EOL>"}
{"signature": "val processedName =", "body": "processEnumMember(memberName)<EOL>"}
{"signature": "if (context.getIntrinsic(implFun.symbol) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>functionHazard = true<EOL><INDENT><INDENT>}"}
{"signature": "val pointsToAnnotation =", "body": "it.annotations.findAnnotation(FQ_NAME_POINTS_TO)<EOL>"}
{"signature": "var numberOfCallSitesWithExtractedGlobalInitializerCall =", "body": "<NUM_LIT><EOL>"}
{"signature": "val enumEntrySlice =", "body": "IdSignatureSymbolTableSlice<IrEnumEntry, IrEnumEntrySymbol>(lock)<EOL>"}
{"signature": "if (withDefinedIn) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendDefinedIn(declarationDescriptor)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jvmBuiltIns =", "body": "moduleDescriptor.builtIns as? JvmBuiltIns<EOL>"}
{"signature": "val firContinueExpressions =", "body": "mutableListOf<FirContinueExpression>()<EOL>"}
{"signature": "if (comma < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>params += parseTypeArgument(restParams)<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "fun visitImportList(importList: KtImportList) {", "body": "}<EOL><EOL><INDENT><INDENT><INDENT>override fun visitPackageDirective(directive: KtPackageDirective) {}"}
{"signature": "if (DescriptorUtils.isEnumClass(descriptor) && context.moduleDescriptor.platform?.isWasm() != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(ErrorsJs.ENUM_CLASS_IN_EXTERNAL_DECLARATION_WARNING.on(declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val newExactType =", "body": "oldExactType?.addAll(statement.exactType) ?: statement.exactType.toPersistentSet()<EOL>"}
{"signature": "if (x is String || false) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "val suspendResult =", "body": "irVar(<STR_LIT>.synthesizedName, context.irBuiltIns.anyNType, true)<EOL>"}
{"signature": "if (!isMutable || variable.hasModifier(CONST_KEYWORD) || hasDelegate) {", "body": "<EOL><INDENT><INDENT><INDENT>modifiers.add(PsiModifier.FINAL)<EOL><INDENT><INDENT>}"}
{"signature": "val fileToDelete =", "body": "File(workDir, path)<EOL>"}
{"signature": "val COMMONIZED_TARGETS =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)"}
{"signature": "if (!returnableBlock.type.isUnit()) {", "body": "<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>   functionGenerationContext.assignPhis(getResult() to value!!)<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>  }"}
{"signature": "fun InlineLayout(content: @Composable @ComposableTarget(<STR_LIT>) () -> Unit) {", "body": "}"}
{"signature": "if (elements is Collection) {", "body": "<EOL><INDENT><INDENT>val result = ArrayList<T>(this.size + elements.size)<EOL><INDENT><INDENT>result.addAll(this)<EOL><INDENT><INDENT>result.addAll(elements)<EOL><INDENT><INDENT>return result<EOL><INDENT>}"}
{"signature": "for (typeParameter in declaration.typeParameters) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkNamed(typeParameter, context.trace, context.languageVersionSettings)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun markControlFlowMerge() {", "body": "<EOL><INDENT><INDENT>controlFlowMerge = true<EOL><INDENT>}"}
{"signature": "val parameterWithFunctionType =", "body": "{ a: ((Int) -> Int) -> <!SYNTAX!><!>}"}
{"signature": "val manifestFile =", "body": "libraryRoot.findChild(KLIB_MANIFEST_FILE_NAME) ?: return null<EOL>"}
{"signature": "val generatedObjCCategoriesMembers =", "body": "mutableMapOf<ObjCClass, GeneratedObjCCategoriesMembers>()<EOL>"}
{"signature": "val FLUENT_CONFIG =", "body": "<STR_LIT><EOL>"}
{"signature": "val expectDefaultValue =", "body": "expectParam.defaultValue?.expression ?: continue<EOL>"}
{"signature": "val someFunctionFromObjectName =", "body": "A::someFunctionFromObject.<!EVALUATED{IR}(<STR_LIT>)!>name<!><EOL>"}
{"signature": "val swiftModuleName =", "body": "testName.capitalizeAsciiOnly()<EOL>"}
{"signature": "val substitutedInnerType =", "body": "innerType?.let(f) ?: return null<EOL>"}
{"signature": "val mappedType =", "body": "mapSupertype(superType, kotlinCollectionAsIs = true) ?: return<EOL>"}
{"signature": "val cinteropTaskName =", "body": "<STR_LIT><EOL>"}
{"signature": "val variablesResult =", "body": "variableProcessor.process(data)<EOL>"}
{"signature": "for (annotation in method.declaredAnnotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processAnnotation(visitor, annotation)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (knmFile in files) {", "body": "<EOL><INDENT><INDENT><INDENT>checkKnmStubConsistency(knmFile)<EOL><INDENT><INDENT>}"}
{"signature": "val libJar =", "body": "libRoot.resolve(<STR_LIT>)<EOL>"}
{"signature": "val newSourcePath =", "body": "projectRoot.resolve(<STR_LIT>).canonicalFile.invariantSeparatorsPath<EOL>"}
{"signature": "var propertyDescriptor =", "body": "createPropertyDescriptor(field)<EOL>"}
{"signature": "val previousConditionVariable =", "body": "getVariableIfStable(flow, previousCondition) ?: return@mergeIncomingFlow<EOL>"}
{"signature": "fun setDescriptorAndLibraryByName(name: String, descriptor: ModuleDescriptor, library: KotlinLibrary) {", "body": "<EOL><INDENT><INDENT>stdlibPathToDescriptor[name] = descriptor<EOL><INDENT><INDENT>descriptorToLibrary[descriptor] = library<EOL><INDENT>}"}
{"signature": "val transformers =", "body": "testClassModel.predefinedNativeTransformers(false)<EOL>"}
{"signature": "import p<NUM_LIT>B<EOL>.", "body": ""}
{"signature": "if (siblings.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>backwardsAliasMap[original] = siblings.remove(variable)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val memReadFn =", "body": "findMemoryAccessFunction(isRead = true, valueType = memoryValueType)<EOL>"}
{"signature": "if (typeParameter.isReified != builder.reified) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.reified = typeParameter.isReified<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val e<NUM_LIT> =", "body": "<!EVALUATED: `<NUM_LIT>`!>E(<NUM_LIT>).get()<!><EOL>"}
{"signature": "if (target.supportsCoreSymbolication()) {", "body": "<EOL><INDENT><INDENT><INDENT>add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val irTypeOperand =", "body": "typeOperatorCall.conversionTypeRef.toIrType(c)<EOL>"}
{"signature": "val unboundTopLevel =", "body": "String::topLevel<EOL>"}
{"signature": "val encodedForObject =", "body": "Json.encodeToString(ObjectSerializer, Data(<NUM_LIT>))<EOL>"}
{"signature": "for (declaration in ktEnumEntry.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declarations += declaration.toFirDeclaration(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>correctedEnumSelfTypeRef,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>delegatedSelfType = delegatedEntrySelfType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ktEnumEntry,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ownerClassBuilder = this,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ownerTypeParameters = emptyList()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val hasOverrideNode =", "body": "modifierList != null && modifierList.hasModifier(KtTokens.OVERRIDE_KEYWORD)<EOL>"}
{"signature": "if (descriptor is ClassDescriptor && this is KtClassInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>descriptor.unsubstitutedPrimaryConstructor<EOL><INDENT><INDENT><INDENT>?: (descriptor as? ClassDescriptorWithResolutionScopes)?.scopeForInitializerResolution?.ownerDescriptor<EOL><INDENT>}"}
{"signature": "val moduleId<NUM_LIT>TestModule =", "body": "testModules.associateBy { it.name.safeModuleName }<EOL>"}
{"signature": "val FILE_TYPE_OFFSET =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "if (actualModule !== moduleDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val moduleDeserializer = linker.resolveModuleDeserializer(actualModule, idSig)<EOL><INDENT><INDENT><INDENT>moduleDeserializer.addModuleReachableTopLevel(idSig)<EOL><INDENT><INDENT><INDENT>return linker.symbolTable.referenceClass(idSig)<EOL><INDENT><INDENT>}"}
{"signature": "val baseTypeCL =", "body": "T::class.java.classLoader<EOL>"}
{"signature": "fun exclude(vararg exclude: String) {", "body": "<EOL><INDENT><INDENT>excludedVersions.addAll(exclude)<EOL><INDENT>}"}
{"signature": "if (block == null) {", "body": "<EOL><INDENT><INDENT>return current<EOL><INDENT>}"}
{"signature": "when (classifier.kind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.CLASS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.INTERFACE -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.ENUM_CLASS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.OBJECT -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.ANNOTATION_CLASS -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>ClassKind.ENUM_ENTRY -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val endLabel =", "body": "Label()<EOL>"}
{"signature": "for ((to, edge) in edges) {", "body": "<EOL><INDENT><INDENT><INDENT>val kind = if (edge.kind.isBack) EdgeKind.DeadBackward else EdgeKind.DeadForward<EOL><INDENT><INDENT><INDENT>CFGNode.addEdge(stub, to, kind, propagateDeadness = false, label = edge.label)<EOL><INDENT><INDENT><INDENT>to.updateDeadStatus()<EOL><INDENT><INDENT><INDENT>propagateDeadnessForward(to)<EOL><INDENT><INDENT>}"}
{"signature": "while (vm.isAlive && stderr.available() > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val count = stderr.read(buffer)<EOL><INDENT><INDENT><INDENT><INDENT>val s = String(buffer, <NUM_LIT>, count)<EOL><INDENT><INDENT><INDENT><INDENT>err.append(s)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val rightPrimitiveOrNullableType =", "body": "rightTypes.findPrimitiveOrNullablePrimitiveType() ?: return<EOL>"}
{"signature": "if (!x.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "val jsExportIgnoreClass =", "body": "context.intrinsics.jsExportIgnoreAnnotationSymbol.owner<EOL>"}
{"signature": "val superProperty =", "body": "superFunctionInterface.declarations<EOL>"}
{"signature": "if (expression.symbol.owner.origin == IrDeclarationOrigin.FIELD_FOR_OBJECT_INSTANCE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>putNeedClassReificationMarker(expression.symbol.owner.parentAsClass)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TX =", "body": "this.X<EOL>"}
{"signature": "fun setValue(thisRef: R, desc: KProperty<*>, value: String?) {", "body": "log += <STR_LIT>}"}
{"signature": "import b.", "body": "*<EOL>"}
{"signature": "val isWithLock =", "body": "resolved.resultingDescriptor.isTopLevelInPackage(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "if (ax < <NUM_LIT>x<NUM_LIT>e<NUM_LIT>) {", "body": "<INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT>if (two<NUM_LIT> + x > zero<INDENT><INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT>&& ax < <NUM_LIT>x<NUM_LIT>c<NUM_LIT><EOL><INDENT><INDENT><INDENT>)<INDENT><INDENT><EOL><INDENT><INDENT><INDENT><INDENT>return x<EOL><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT>return x - x * x * <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val wasExperimentalFqNames =", "body": "value.wasExperimentalMarkerClasses<EOL>"}
{"signature": "val includeOnlySpecifiedDependenciesSet =", "body": "includeOnlySpecifiedDependencies?.get()<EOL>"}
{"signature": "val classesAndProtocols =", "body": "translateClassesAndProtocols(file)<EOL>"}
{"signature": "import jvm.", "body": "pack.ActualClass<EOL>"}
{"signature": "for(i in <NUM_LIT>.nestedClassNameCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + stringIndexes(getNestedClassName(i))<EOL><INDENT>}"}
{"signature": "val checkerName =", "body": "getBinaryCheckerName(name, leftType, rightType)!!<EOL>"}
{"signature": "var tempStr =", "body": "str<EOL>"}
{"signature": "val RETURNS =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val anotherBits =", "body": "another.bits<EOL>"}
{"signature": "if (primaryConstructor == null && declaration.secondaryConstructors.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>val reportElement = declaration.nameIdentifier ?: declaration<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(ErrorsParcelize.PARCELABLE_SHOULD_HAVE_PRIMARY_CONSTRUCTOR.on(reportElement))<EOL><INDENT><INDENT>}"}
{"signature": "val DEFAULT_VALUE_PARAMETER =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "var needsBackRefReplacement =", "body": "false<EOL>"}
{"signature": "val kotlinSourceSets =", "body": "kotlinExtension.javaClass.getMethod(<STR_LIT>).invoke(kotlinExtension)<EOL>"}
{"signature": "val objCObjectClassId =", "body": "ClassId(cInteropPackage, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "package (only fir provider can do it),<EOL>.", "body": ""}
{"signature": "fun forceAssign(element: T, name: N) {", "body": "<EOL><INDENT><INDENT><INDENT>if (name in nameToElements || element in elementToName) error(element)<EOL><EOL><INDENT><INDENT><INDENT>nameToElements[name] = mutableListOf(element)<EOL><INDENT><INDENT><INDENT>elementToName[element] = name<EOL><INDENT><INDENT>}"}
{"signature": "val outerClasses =", "body": "mutableListOf(outerClass)<EOL>"}
{"signature": "val isHidden =", "body": "explicitVisibility.isEffectivelyHiddenBy(containingMemberDeclaration)<EOL>"}
{"signature": "fun record(filePath: String, position: Position, scopeFqName: String, scopeKind: ScopeKind, name: String) {", "body": "<EOL><INDENT><INDENT>val internedFilePath = interner.intern(filePath)<EOL><INDENT><INDENT>val internedScopeFqName = interner.intern(scopeFqName)<EOL><INDENT><INDENT>val internedName = interner.intern(name)<EOL><EOL><INDENT><INDENT>lookups.add(LookupInfo(internedFilePath, position, internedScopeFqName, scopeKind, internedName))<EOL><INDENT>}"}
{"signature": "val binaryOperations =", "body": "getOperationMap(<NUM_LIT>) + getBinaryIrOperationMap() + getExtensionOperationMap()<EOL>"}
{"signature": "fun m<NUM_LIT>(position: Int) {", "body": "<EOL><INDENT><INDENT>position(m<NUM_LIT>().second<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>)<EOL><INDENT>}"}
{"signature": "var continuationIndex =", "body": "if (isForNamedFunction) <NUM_LIT> else <NUM_LIT><EOL>"}
{"signature": "if (v != null) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val capturedValueName =", "body": "if (it is IrGetValue) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val childrenResult =", "body": "childrenBlocks[currentBlock]?.mapNotNull { dfs(it, variable) } ?: listOf()<EOL>"}
{"signature": "val classLlvmDeclarations =", "body": "createClassDeclarations(declaration)<EOL>"}
{"signature": "val isTcbStart =", "body": "BooleanArray(nInsns)<EOL>"}
{"signature": "if (first.type == llvm.int<NUM_LIT>Type) {", "body": "<EOL><INDENT><INDENT><INDENT>val tmp = and(second, llvm.int<NUM_LIT>(<NUM_LIT>))<EOL><INDENT><INDENT><INDENT>zext(tmp, llvm.int<NUM_LIT>Type)<EOL><INDENT><INDENT>}"}
{"signature": "val skipNullabilityAnnotations =", "body": "flags and Opcodes.ACC_PRIVATE != <NUM_LIT> || flags and Opcodes.ACC_SYNTHETIC != <NUM_LIT><EOL>"}
{"signature": "for (i in ctorParams.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>val decl = args[i]<EOL><INDENT><INDENT><INDENT>val desc = ctorParams[i]<EOL><INDENT><INDENT><INDENT>val valAsmType = typeMapper.mapType(desc.type)<EOL><INDENT><INDENT><INDENT>this@generateSyntheticAnnotationOnStack.gen(decl.getArgumentExpression(), valAsmType)<EOL><INDENT><INDENT><INDENT>sb.append(valAsmType.descriptor)<EOL><INDENT><INDENT>}"}
{"signature": "when (platformTarget) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is LibraryTarget.Native -> nativeTargets += platformTarget<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>is LibraryTarget.WASM -> wasmTargets += platformTarget<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val osName =", "body": "simulatorOsName(family)<EOL>"}
{"signature": "fun callback() {", "body": "}<EOL><EOL>fun test(handler: MyHandler, list: List<MyInterface>) {<EOL><INDENT><expr>handler.act(::callback)</expr><EOL>}"}
{"signature": "if (!printSignatureAndBody || body == null || options.bodyPrintingStrategy != BodyPrintingStrategy.PRINT_BODIES) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>p.printlnWithNoIndent()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (insn.opcode == Opcodes.LLOAD || insn.opcode == Opcodes.DLOAD) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>insnList.insertBefore(insn, InsnNode(Opcodes.DUP<NUM_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val newDup =", "body": "getNullableIssue()<EOL>"}
{"signature": "val dependsOnInlineLambdas =", "body": "!skipInlineFunctions &&<EOL>"}
{"signature": "for ((typeParameter, typeArgument) in typeArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val typeReference = call.typeArguments.getOrNull(typeParameter.index)?.typeReference ?: continue<EOL><EOL><INDENT><INDENT><INDENT>if (typeArgument == null) continue<EOL><EOL><INDENT><INDENT><INDENT>upperBoundChecker.checkBounds(<EOL><INDENT><INDENT><INDENT><INDENT>typeReference, typeArgument, typeParameter, TypeSubstitutor.create(typeArgument), c.trace, withOnlyCheckForWarning = true<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val TEST_ROOT =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "if (functionDescriptor.valueParameters[receivers + i].type == parameter.varargElementType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>argumentMap[parameter] = VarargValueArgument(fakeArguments.subList(i, fakeArgCount))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>i = fakeArgCount<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (old.hasFlexibleUpperBound()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.flexibleUpperBound, new.flexibleUpperBound)) return false<EOL><INDENT><INDENT>}"}
{"signature": "val SAM_WRAPPER_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun img(src: String, init: Image.() -> Unit) {", "body": "<EOL><INDENT><INDENT>val element = initTag(Image(), init)<EOL><INDENT><INDENT>element.src = src<EOL><INDENT>}"}
{"signature": "val RUNNER_FUNCTION_FILE =", "body": "<STR_LIT><EOL>"}
{"signature": "val executor<NUM_LIT> =", "body": "Executors.newSingleThreadExecutor()<EOL>"}
{"signature": "val isStaticLibrary =", "body": "linkerOutputKind == LinkerOutputKind.STATIC_LIBRARY &&<EOL>"}
{"signature": "val decorated =", "body": "descriptor.targetFactory.create(DecoratedExternalKotlinTarget.Delegate(target))<EOL>"}
{"signature": "val floatSerializer =", "body": "<STR_LIT><EOL>"}
{"signature": "val builderName =", "body": "Name.identifier(builder.builderClassName.replace(<STR_LIT>, classDescriptor.name.asString()))<EOL>"}
{"signature": "val internalLastIndex =", "body": "internalIndex(lastIndex)<EOL>"}
{"signature": "package objCNameB<EOL>.", "body": ""}
{"signature": "if (value != defaultValue) {", "body": "<EOL><INDENT><INDENT><INDENT>report(CompilerMessageSeverity.WARNING, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "import <!OPT_IN_MARKER_CAN_ONLY_BE_USED_AS_ANNOTATION_OR_ARGUMENT_IN_OPT_IN!>Ann<!><EOL>.", "body": ""}
{"signature": "when (fakeOverride) {", "body": "<EOL><INDENT><INDENT><INDENT>is IrFunctionWithLateBinding -> linkFunctionFakeOverride(fakeOverride, compatibilityMode)<EOL><INDENT><INDENT><INDENT>is IrPropertyWithLateBinding -> linkPropertyFakeOverride(fakeOverride, compatibilityMode)<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val specialBuiltinsFromSuperTypes =", "body": "SmartSet.create<SimpleFunctionDescriptor>()<EOL>"}
{"signature": "val outerSymbol =", "body": "outerClassId.toLookupTag().toSymbol(session)<EOL>"}
{"signature": "if (diagnostics.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>fail(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val decodedEmail =", "body": "Json.decodeFromString<Email<Int>>(encodedEmail)<EOL>"}
{"signature": "val staticGetter =", "body": "expression.getter?.owner?.correspondingStatic<EOL>"}
{"signature": "if (!simpleGeneral.isPrimitiveType() || !flexibility.lowerBound().isPrimitiveType()) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "else if (rootFile.extension == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>target += rootFile<EOL><INDENT>}"}
{"signature": "val relevantDirectlyOverridden =", "body": "descriptor.computeRelevantDirectlyOverridden()<EOL>"}
{"signature": "val missingActualMembersMap =", "body": "mutableMapOf<IrClass, FakeOverrideInfo>()<EOL>"}
{"signature": "val MARKER_INPLACE_CALL_END =", "body": "<STR_LIT><EOL>"}
{"signature": "if (isNative && hasSpreadOperator) {", "body": "<EOL><INDENT><INDENT><INDENT>val functionCallRef = Namer.getFunctionApplyRef(functionRef)<EOL><INDENT><INDENT><INDENT>return JsInvocation(functionCallRef, argumentsInfo.translateArguments)<EOL><INDENT><INDENT>}"}
{"signature": "val lookupsFromFile =", "body": "lookups[compiledFile]<EOL>"}
{"signature": "val _testGroups =", "body": "mutableListOf<TestGroup>()<EOL>"}
{"signature": "val expansions =", "body": "values.map { it.expandedType() }<EOL>"}
{"signature": "val childRes =", "body": "go(next)<EOL>"}
{"signature": "fun unitTestVariant(action: Action<KotlinAndroidTargetVariantDsl>) {", "body": "<EOL><INDENT><INDENT>action.execute(unitTestVariant)<EOL><INDENT>}"}
{"signature": "fun assertEquals(expected: Any, actual: Any, s: String, whatTested: String) {", "body": "<EOL><INDENT>assertEquals(expected, actual, s, <STR_LIT>, whatTested)<EOL>}"}
{"signature": "when (it.type) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT> -> <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> it.type<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun clearArtifacts() {", "body": "<EOL><INDENT><INDENT>buildDir.deleteRecursively()<EOL><INDENT>}"}
{"signature": "val unwrappedFieldType =", "body": "field.type.unwrapTypedefs()<EOL>"}
{"signature": "val singleWildcardSuffix =", "body": "Regex(PATTERN_SINGLE_WILD)<EOL>"}
{"signature": "fun putViewToCache(getView: () -> Unit) {", "body": "<EOL><INDENT><INDENT>getView()<EOL><INDENT><INDENT>iv.invokevirtual(<STR_LIT>, <STR_LIT>, <STR_LIT>, false)<EOL><INDENT>}"}
{"signature": "fun foo(a: <caret>X) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "fun declareFunction(subroutine: KtElement, pseudocode: Pseudocode) {", "body": "<EOL><INDENT><INDENT><INDENT>add(LocalFunctionDeclarationInstruction(subroutine, pseudocode, currentScope))<EOL><INDENT><INDENT>}"}
{"signature": "val unreachableElements =", "body": "unreachableNodes.map { it.fir }<EOL>"}
{"signature": "if (BUILD_SESSION_SEPARATOR == line) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>consumer.invoke(container)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>container = MetricsContainer()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun add(item : Byte) {", "body": "<EOL><INDENT>stream.write(item)<EOL>  }"}
{"signature": "if (!lastStage) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>recordResultTypeInfo(qualifiedExpression, resultTypeInfo, contextForSelector)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun Foo(abc: Int, xyz: Int) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>print(abc)<EOL><INDENT><INDENT><INDENT><INDENT>print(xyz)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import<EOL>package n<EOL>.", "body": ""}
{"signature": "if (isObjectLike()) {", "body": "<EOL><INDENT><INDENT><INDENT>addObjectMethods()<EOL><INDENT><INDENT>}"}
{"signature": "val assignConstructor =", "body": "assignment(JsNameRef(<STR_LIT>, prototype.deepCopy()), JsNameRef(constructorName))<EOL>"}
{"signature": "if (!DescriptorVisibilities.isPrivate(irFunction.visibility) || irFunction !is IrSimpleFunction || !irFunction.isOperator) {", "body": "<EOL><INDENT><INDENT><INDENT>irFunction.valueParameters.forEach(::generateNonNullAssertion)<EOL><INDENT><INDENT>}"}
{"signature": "val structRef =", "body": "StructRefImpl().toJsReference()<EOL>"}
{"signature": "fun test(e: JetExpression) {", "body": "<EOL><INDENT>Util.on(<EOL><INDENT><INDENT>Util.getParentOfType(e, javaClass<JetExpression>()) ?: e<EOL><INDENT>)<EOL>}"}
{"signature": "val FUNCTION_FIELD_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun setOutType(outType: KotlinType?) {", "body": "<EOL><INDENT><INDENT>super.setOutType(outType)<EOL><INDENT>}"}
{"signature": "if (constraintFromDeclaredUpperBoundExists && upperBoundType == resultType) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticsHolder.addDiagnostic(<EOL><INDENT><INDENT><INDENT><INDENT>KotlinConstraintSystemDiagnostic(InferredIntoDeclaredUpperBounds(variableWithConstraints.typeVariable))<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val sortedDeclarations =", "body": "declarations(data).sortedWith(sortUsing)<EOL>"}
{"signature": "if (superClassType == null) {", "body": "<EOL><INDENT><INDENT>sw.writeClassBegin(AsmTypes.OBJECT_TYPE)<EOL><INDENT><INDENT>sw.writeClassEnd()<EOL><INDENT><INDENT>AsmTypes.OBJECT_TYPE<EOL><INDENT>}"}
{"signature": "for (kind in kinds) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!className.startsWith(kind.classNamePrefix)) continue<EOL><INDENT><INDENT><INDENT>val arity = toInt(className.substring(kind.classNamePrefix.length)) ?: continue<EOL><INDENT><INDENT><INDENT>return KindWithArity(kind, arity)<EOL><INDENT><INDENT>}"}
{"signature": "fun topLevel(arg: Int) {", "body": "}<EOL>fun topLevel(arg: Long) {}"}
{"signature": "if (testFile.renderDiagnosticsFullText) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>shouldCheckDiagnosticsFullText = true<EOL><INDENT><INDENT><INDENT><INDENT>AnalyzerWithCompilerReport.reportDiagnostics(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>moduleBindingContext.diagnostics,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>diagnosticsFullTextCollector,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>renderInternalDiagnosticName = false<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun removeAllScriptSessions() {", "body": "<EOL><INDENT><INDENT>ApplicationManager.getApplication().assertWriteAccessAllowed()<EOL><EOL><INDENT><INDENT>removeAllScriptSessionsFrom(sourceCache)<EOL><INDENT><INDENT>removeAllScriptSessionsFrom(binaryCache)<EOL><INDENT>}"}
{"signature": "for ((i, x) in xs.withIndex()) {", "body": "<EOL><INDENT><INDENT>if (i % <NUM_LIT> == <NUM_LIT>) continue<EOL><INDENT><INDENT>r += <STR_LIT><EOL><INDENT>}"}
{"signature": "var high =", "body": "toIndex - <NUM_LIT><EOL>"}
{"signature": "var _doCompile =", "body": "false<EOL>"}
{"signature": "var regex =", "body": "Regex(patString)<EOL>"}
{"signature": "val superTypeOfNumberLowerBounds =", "body": "commonSupertypeForNumberTypes(numberLowerBounds)<EOL>"}
{"signature": "val unwrappedMemberFromSupertypeWithValueParametersToBeErased =", "body": "<EOL><INDENT><INDENT><INDENT>memberFromSupertypeWithValueParametersToBeErased.fir.originalForSubstitutionOverride<EOL>"}
{"signature": "if (setter.isImplicitDelegateAccessor()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (classes.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsNative.THROWS_LIST_EMPTY.on(reportLocation))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val typeY =", "body": "mockClassType(<STR_LIT>)<EOL>"}
{"signature": "val O =", "body": "<STR_LIT><EOL>"}
{"signature": "val REFLECT_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "val annotationsCommonizer =", "body": "AnnotationsCommonizer.asCommonizer()<EOL>"}
{"signature": "val isKotlinBinary =", "body": "isKotlinBinaryAttribute.value<EOL>"}
{"signature": "val upperArgs =", "body": "renderArguments(upperBound)<EOL>"}
{"signature": "import curl.", "body": "*<EOL>"}
{"signature": "val aSymbol =", "body": "file.getClassOrFail(<STR_LIT>)<EOL>"}
{"signature": "else if (declaration.initializer == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>relevantVals.add(declaration)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (valueParameter.defaultValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT>add(FirValueParameter::defaultValue, FirValueParameter::replaceDefaultValue, ::expressionGuard)<EOL><INDENT><INDENT>}"}
{"signature": "val tra =", "body": "<NUM_LIT><EOL>"}
{"signature": "val initFunctions =", "body": "mutableListOf<FunWithPriority>()<EOL>"}
{"signature": "val cStructBitField =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val typeData =", "body": "libraryFile.type(index)<EOL>"}
{"signature": "val frame =", "body": "decoder.nextVideoFrame() ?: return<EOL>"}
{"signature": "val metadataAccess =", "body": "MetadataLibraryAccess<MetadataKotlinLibraryLayout>(libraryFile, component, zipAccessor)<EOL>"}
{"signature": "val oldToNew =", "body": "HashMap<IrValueParameter, IrValueParameter>()<EOL>"}
{"signature": "val runtimeModule =", "body": "LLVMModuleCreateWithNameInContext(<STR_LIT>, generationState.llvmContext)!!<EOL>"}
{"signature": "val DECOMPILED_COMMENT_FOR_PARAMETER =", "body": "<STR_LIT><EOL>"}
{"signature": "val missing<NUM_LIT>Defect =", "body": "DefectType(<STR_LIT>, <STR_LIT>, METHOD_A)<EOL>"}
{"signature": "fun testExt() {", "body": "<EOL><INDENT>J.s().extension()<EOL>}"}
{"signature": "val isTodo =", "body": "testMethod?.isAnnotationPresent(TodoAnalysisApi::class.java) ?: false && tag == <STR_LIT><EOL>"}
{"signature": "val LOCAL_REPOSITORY_PLACEHOLDER =", "body": "<STR_LIT><EOL>"}
{"signature": "val renderedValue =", "body": "symbolRenderer.render(session, value)<EOL>"}
{"signature": "val SANITIZED_TEST_RUN_TARGET =", "body": "<STR_LIT><EOL>"}
{"signature": "fun fooArray(s: @Ann Array<@Ann<NUM_LIT> Outer.Inner<@Ann<NUM_LIT> String>>) {", "body": "<EOL><INDENT>}"}
{"signature": "fun testStacktrace() {", "body": "<EOL><INDENT><INDENT>val testName = <STR_LIT><EOL><INDENT><INDENT>Assumptions.assumeFalse(testRunSettings.get<OptimizationMode>() == OptimizationMode.OPT)<EOL><EOL><INDENT><INDENT>val testCase = generateObjCFramework(testName, listOf(<STR_LIT>))<EOL><INDENT><INDENT>compileAndRunSwift(testName, testCase)<EOL><INDENT>}"}
{"signature": "val NI =", "body": "<STR_LIT><EOL>"}
{"signature": "if (foundQualifiers.add(JvmAnnotationNames.RETENTION_ANNOTATION.asString())) {", "body": "<EOL><INDENT><INDENT>currentRawAnnotations += createRetentionJavaAnnotation(owner)<EOL><INDENT>}"}
{"signature": "val previousClasses =", "body": "cache.classesFqNamesBySources(dirtyFiles + removedFiles)<EOL>"}
{"signature": "val isMppEnabled =", "body": "languageVersionSettings.supportsFeature(LanguageFeature.MultiPlatformProjects)<EOL>"}
{"signature": "val STATEMENT_ORIGIN_ANONYMOUS_INITIALIZER =", "body": "IrStatementOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val TYPE_INFO_TYPE_PACKAGE_NAME_ID_OFFSET =", "body": "TYPE_INFO_TYPE_PACKAGE_NAME_LENGTH_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "val libraryMetadataVersionCache =", "body": "ContainerUtil.createConcurrentWeakValueMap<CacheKey, CacheValue<KlibMetadataVersion>>()<EOL>"}
{"signature": "val containingFilePath =", "body": "sourceFile.path<EOL>"}
{"signature": "var resolvedName =", "body": "temporaryName.ident<EOL>"}
{"signature": "if (ReportCategory.DAEMON_MESSAGE.code in compilationOptions.reportCategories) {", "body": "<EOL><INDENT><INDENT><INDENT>val mySeverity = ReportSeverity.fromCode(compilationOptions.reportSeverity)<EOL><INDENT><INDENT><INDENT>DaemonMessageReporterImpl(servicesFacade, mySeverity)<EOL><INDENT><INDENT>}"}
{"signature": "for (x in <NUM_LIT>f .. <NUM_LIT>f) {", "body": "<EOL><INDENT><INDENT>s += x<EOL><INDENT>}"}
{"signature": "var irBaseClassInMetadata =", "body": "false<EOL>"}
{"signature": "val BOOLEAN =", "body": "CompileTimeType<Boolean>()<EOL>"}
{"signature": "val byValueFunctionDescriptor =", "body": "companionIrClass.descriptor.findDeclarationByName<FunctionDescriptor>(<STR_LIT>)!!<EOL>"}
{"signature": "val reassignment =", "body": "VariableReassignment(expression, variableSymbol, variableAssignment.isAugmented())<EOL>"}
{"signature": "val C_CHAR =", "body": "'c'<EOL>"}
{"signature": "val constPi =", "body": "<NUM_LIT><EOL>"}
{"signature": "val expectationMatch =", "body": "expectationRegex.matchExact(line)<EOL>"}
{"signature": "fun testErroneusAllUnderImportFromObject() {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE!>A<!>()<EOL><INDENT><!UNRESOLVED_REFERENCE!>B<!><EOL><INDENT><!UNRESOLVED_REFERENCE!>bar<!>()<EOL>}"}
{"signature": "for (substitutor in substitutors) {", "body": "<EOL><INDENT><INDENT><INDENT>val substitutedDescriptor = inferenceErrorData.descriptor.substitute(substitutor)<EOL><INDENT><INDENT><INDENT>substitutedDescriptors.add(substitutedDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "if (expectClass.classKind == ClassKind.CLASS && isFinal(expectClass) && isCtorless(expectClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (actualClass.classKind == ClassKind.OBJECT) return true<EOL><INDENT><INDENT>}"}
{"signature": "val KCallable =", "body": "<STR_LIT>.reflectId()<EOL>"}
{"signature": "while (a <= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val typeConstructorParameters =", "body": "classifier.typeConstructor.parameters<EOL>"}
{"signature": "if (!context.languageVersionSettings.supportsFeature(LanguageFeature.JsEnableExtensionFunctionInExternals)) {", "body": "<EOL><INDENT><INDENT><INDENT>reportOnParametersAndReturnTypesIf(ErrorsJs.EXTENSION_FUNCTION_IN_EXTERNAL_DECLARATION, KotlinType::isExtensionFunctionType)<EOL><INDENT><INDENT>}"}
{"signature": "val bitsToShiftLeft =", "body": "(toSlotAdjusted - fromSlotAdjusted) * BITS_PER_SLOT<EOL>"}
{"signature": "fun test<NUM_LIT>(l: List<Number>) {", "body": "<EOL><EOL><INDENT>val i: Int = l.firstTyped()<EOL><EOL><INDENT>val s: String = <!TYPE_MISMATCH!>l.<!TYPE_MISMATCH!>firstTyped<!>()<!><EOL>}"}
{"signature": "val AnnotationRetention =", "body": "<STR_LIT>.annotationId()<EOL>"}
{"signature": "if (s != <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>value += <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "package private wrappers<EOL>.", "body": ""}
{"signature": "val suiteFunRef =", "body": "testFunctionContainers.firstNotNullOf { it.suiteFunctionName }.makeRef()<EOL>"}
{"signature": "val delegatedType =", "body": "getterReturnType?.let { approximateType(it, local) }<EOL>"}
{"signature": "val forModule =", "body": "javaModuleAnnotationsProvider.getAnnotationsForModuleOwnerOfClass(classId)<EOL>"}
{"signature": "val calleeKind =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>if (isImplicit) KtFakeSourceElementKind.ImplicitConstructor else KtFakeSourceElementKind.DelegatingConstructorCall<EOL>"}
{"signature": "if (b && true) {", "body": "<EOL><INDENT><INDENT><NUM_LIT><EOL><INDENT>}"}
{"signature": "val reader =", "body": "StringReader(<STR_LIT>).buffered()<EOL>"}
{"signature": "val stepTimeout =", "body": "<NUM_LIT>toDuration(DurationUnit.MILLISECONDS)<EOL>"}
{"signature": "val filesByRelativePath =", "body": "HashMap<String, FastJarVirtualFile>(entries.size)<EOL>"}
{"signature": "val ARGUMENTS_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "fun expectMinMax(min: Char, max: Char, elements: CharArray) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minOrNull())<EOL><INDENT><INDENT>assertEquals(max, elements.maxOrNull())<EOL><INDENT><INDENT>assertEquals(min, elements.min())<EOL><INDENT><INDENT>assertEquals(max, elements.max())<EOL><INDENT>}"}
{"signature": "fun ambiguous() {", "body": "}<EOL><EOL><INDENT>override val ambiguousProp: Int<EOL><INDENT><INDENT>get() = <NUM_LIT><EOL><EOL><INDENT>override val prop: Int<EOL><INDENT><INDENT>get() = <NUM_LIT><EOL><EOL><INDENT>fun callsFunFromSuperClass() {<EOL><INDENT><INDENT>super.foo()<EOL><INDENT>}"}
{"signature": "val tagPrefix =", "body": "computeTagPrefix(index)<EOL>"}
{"signature": "fun testIgnoredBoxed() {", "body": "<EOL><INDENT>returnBoxed()<EOL>}"}
{"signature": "val shortSet =", "body": "HashSet<Short>()<EOL>"}
{"signature": "if (factory != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, factory, symbols, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var container =", "body": "descriptor.containingDeclaration<EOL>"}
{"signature": "val topLevelCallableNamesByPackage =", "body": "<EOL><INDENT><INDENT>session.firCachesFactory.createCache(::computeTopLevelCallableNames)<EOL>"}
{"signature": "val nameToType =", "body": "mutableMapOf<String, DeclaredProcType>()<EOL>"}
{"signature": "val allCachedBitcodeDepsIndex =", "body": "dependencies.indexOf(ALL_CACHED_BITCODE_DEPENDENCIES)<EOL>"}
{"signature": "if (!lowerBound.isNullableType()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>this@makeConeFlexibleTypeWithNotNullableLowerBound<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var probeDistance =", "body": "<NUM_LIT><EOL>"}
{"signature": "val addedKeys =", "body": "if (trackChanges) mutableSetOf<LookupSymbolKey>() else null<EOL>"}
{"signature": "val symbolRepresentation =", "body": "symbol.signature?.render()<EOL>"}
{"signature": "val moduleVariable =", "body": "preciseMatcher.group(<NUM_LIT>)<EOL>"}
{"signature": "if (obj == null || jsClass == null || (objType != <STR_LIT> && objType != <STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "for(<expr>(i, b)</expr> in ps) {", "body": "<EOL><INDENT><INDENT>i * i<EOL><INDENT>}"}
{"signature": "val ln<NUM_LIT>_lo =", "body": "<NUM_LIT>e<NUM_LIT><INDENT><EOL>"}
{"signature": "if (unknownSer) {", "body": "<EOL><INDENT><INDENT><INDENT>aconst(codegen.typeMapper.mapType(property.type))<EOL><INDENT><INDENT><INDENT>AsmUtil.wrapJavaClassIntoKClass(this)<EOL><INDENT><INDENT>}"}
{"signature": "if (file.extension != JavaClassFileType.INSTANCE!!.defaultExtension) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "if (doReturn < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>h.value += <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val changesInfo =", "body": "ChangesCollector().apply { collectProtoChanges(oldData, newData) }.changes()<EOL>"}
{"signature": "if (useTypeTable()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>builder.typeId = typeId(typeProjection.type)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (containingDeclaration.fqName != StandardNames.BUILT_INS_PACKAGE_FQ_NAME) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "val STATEMENT_ORIGIN_COROUTINE_IMPL =", "body": "IrStatementOriginImpl(<STR_LIT>)<EOL>"}
{"signature": "val toolsJar =", "body": "it.currentJvmJdkToolsJar.orNull<EOL>"}
{"signature": "val jvmDescriptorForProperty =", "body": "alternativePropertyDescriptor.computeJvmDescriptorWithoutName()<EOL>"}
{"signature": "fun testMulDivRem(number: UInt, divisor: UInt, div: UInt, rem: UInt) {", "body": "<EOL><INDENT><INDENT>assertEquals(div, number / divisor)<EOL><INDENT><INDENT>assertEquals(rem, number % divisor)<EOL><INDENT><INDENT>assertEquals(div, number.floorDiv(divisor))<EOL><INDENT><INDENT>assertEquals(rem, number.mod(divisor))<EOL><EOL><INDENT><INDENT>assertEquals(number, div * divisor + rem)<EOL><INDENT><INDENT>assertTrue(rem < divisor)<EOL><INDENT><INDENT>assertTrue(div < number)<EOL><INDENT>}"}
{"signature": "if (hasConstantValue()) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + constantValue.hashCode()<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>u.toUByte() downTo <NUM_LIT>u.toUByte()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (m!!.getName() == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if(m!!.getModifiers() != <NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>return <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val minusIntConst =", "body": "-intConst<EOL>"}
{"signature": "val VS_EF =", "body": "VariableControlFlowState(InitState.INITIALIZED_EXHAUSTIVELY, false)<EOL>"}
{"signature": "val bodyData =", "body": "loadStatementBodyProto(index)<EOL>"}
{"signature": "fun put(pair: Pair<Int, Int>, elem: Double) {", "body": "<EOL><INDENT><INDENT>matrix.put(pair, elem)<EOL><INDENT>}"}
{"signature": "val JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val forbiddenVariables =", "body": "mutableSetOf<IrVariable>()<EOL>"}
{"signature": "val nameParamName =", "body": "JsScope.declareTemporaryName(<STR_LIT>)<EOL>"}
{"signature": "val INLINE_FUNCTION_BODIES_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (predicate(this[index])) {", "body": "<EOL><INDENT><INDENT><INDENT>return index<EOL><INDENT><INDENT>}"}
{"signature": "val realType =", "body": "variable.type<EOL>"}
{"signature": "fun onAnonymousConstructorCallOrSingletonAccess(owner: String) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val fromCall = MethodInfo(className, this.name, this.desc)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>notInlinedParameters.add(NotInlinedParameter(owner, fromCall))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val doWhileLoop =", "body": "statement.branches[<NUM_LIT>].result as? IrDoWhileLoop ?: return null<EOL>"}
{"signature": "for (value in instruction.inputValues) {", "body": "<EOL><INDENT><INDENT><INDENT>result.addAll(getMergedValues(value))<EOL><INDENT><INDENT><INDENT>result.add(value)<EOL><INDENT><INDENT>}"}
{"signature": "fun requireLogLevel(logLevel: LogLevel) {", "body": "<EOL><INDENT><INDENT>maxLogLevel = maxOf(logLevel, maxLogLevel)<EOL><INDENT>}"}
{"signature": "if (aa as? SomeSubClass != null) {", "body": "<EOL><INDENT><INDENT>aa = null<EOL><INDENT><INDENT><INDENT><INDENT>aa<!UNSAFE_CALL!>.<!>hashCode()<EOL><INDENT><INDENT>aa.<!UNRESOLVED_REFERENCE!>foo<!><EOL><INDENT><INDENT>(aa <!USELESS_CAST!>as? SomeSubClass<!>)<!UNSAFE_CALL!>.<!>foo<EOL><INDENT><INDENT>(aa <!CAST_NEVER_SUCCEEDS!>as<!> SomeSubClass).foo<EOL><INDENT>}"}
{"signature": "fun integrateChildSession(<EOL><INDENT><INDENT>childCalls: Collection<FirStatement>,<EOL><INDENT><INDENT>childStorage: ConstraintStorage,<EOL><INDENT><INDENT>onCompletionResultsWriting: (ConeSubstitutor) -> Unit,<EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>outerCandidate.postponedPCLACalls += childCalls<EOL><INDENT><INDENT>currentCommonSystem.addOtherSystem(childStorage)<EOL><INDENT><INDENT>outerCandidate.onPCLACompletionResultsWritingCallbacks += onCompletionResultsWriting<EOL><INDENT>}"}
{"signature": "val interceptorRef =", "body": "lastParameter!!.makeRef()<EOL>"}
{"signature": "val tempFile =", "body": "<EOL><INDENT><INDENT><INDENT>if (useTempFile) createTempDirectory(targetFile.name) / <STR_LIT> else targetFile<EOL>"}
{"signature": "val bootClasspath =", "body": "mockJdk?.let { listOf(it) }<EOL>"}
{"signature": "fun testFunTypeVal() {", "body": "<EOL><INDENT><INDENT><!UNDERSCORE_USAGE_WITHOUT_BACKTICKS!>____<!>()<EOL><INDENT>}"}
{"signature": "val nestedExpandedType =", "body": "expand(nestedExpansion)<EOL>"}
{"signature": "val prepareReq =", "body": "manager.createClassPrepareRequest()<EOL>"}
{"signature": "val nextKotlinLanguageVersion =", "body": "KotlinVersion.entries.first { it > KotlinVersion.DEFAULT }.version<EOL>"}
{"signature": "val capturedTypeParameters =", "body": "mutableSetOf<IrTypeParameter>()<EOL>"}
{"signature": "val valueArg =", "body": "delegatedCall.valueArgumentsByIndex!![<NUM_LIT>].arguments[<NUM_LIT>].getArgumentExpression()<EOL>"}
{"signature": "val parametersDesc =", "body": "parameterTypes.map { mapTypeDefault(it, nameResolver) ?: return null }<EOL>"}
{"signature": "val isAmongMutableSignatures =", "body": "signature in JvmBuiltInsSignatures.MUTABLE_METHOD_SIGNATURES<EOL>"}
{"signature": "if (c is B && c is A) {", "body": "<EOL><INDENT><INDENT>c.<!OVERLOAD_RESOLUTION_AMBIGUITY!>foo<!><String, Int>()<EOL><INDENT>}"}
{"signature": "fun foo(i: @a Int?) {", "body": "}<EOL><EOL>fun foo(l: List<@a Int?>) {}"}
{"signature": "val fives =", "body": "intArrayOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "if (enhancedFunction is FirNamedFunctionSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processor(enhancedFunction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (data.isInScriptConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>builder.irGet(objArray.defaultType, irScript.earlierScriptsParameter!!.symbol)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val javaPackages =", "body": "mutableMapOf<FqName, TreeBasedPackage>()<EOL>"}
{"signature": "val expectations =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "fun visitShortValue(value: ShortValue, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>dataStream.writeInt(KotlinConstantValueKind.SHORT.ordinal)<EOL><INDENT><INDENT>dataStream.writeShort(value.value.toInt())<EOL><INDENT>}"}
{"signature": "fun foo(vararg ints: Int) {", "body": "}<EOL><EOL>typealias MyInt = Int<EOL>fun fooAlias(vararg ints: MyInt) {}"}
{"signature": "if (context.languageVersionSettings.supportsFeature(LanguageFeature.ContextReceivers)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val titleChar =", "body": "firstChar.titlecaseChar()<EOL>"}
{"signature": "if (request.getMethod()?.length != <NUM_LIT>) {", "body": "<EOL><INDENT>}"}
{"signature": "val COMMENT_WITH_LOOKUP_INFO =", "body": "<STR_LIT>.toRegex()<EOL>"}
{"signature": "val irTestFn =", "body": "irModule<EOL>"}
{"signature": "val commonizerLogLevel =", "body": "project.commonizerLogLevel<EOL>"}
{"signature": "var setToNull =", "body": "false<EOL>"}
{"signature": "import (w/o KGP based dependency resolution).", "body": "<EOL>"}
{"signature": "val buildFinishedListenerService =", "body": "BuildFinishedListenerService.registerIfAbsent(project)<EOL>"}
{"signature": "if (context.languageVersionSettings.supportsFeature(deprecatingFeature)) {", "body": "<EOL><INDENT><INDENT>errorFactory<EOL><INDENT>}"}
{"signature": "val irDeclaration =", "body": "node.symbol.irDeclaration ?: return<EOL>"}
{"signature": "fun visitStringConcatenationCall(stringConcatenationCall: FirStringConcatenationCall, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitStringConcatenationCall(stringConcatenationCall)<EOL><INDENT>}"}
{"signature": "fun suiteStart(name: String) {", "body": "<EOL><INDENT><INDENT>teamcityReport(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val importDirectiveString =", "body": "if (rawImport.startsWith(<STR_LIT>)) rawImport else <STR_LIT><EOL>"}
{"signature": "val insideDoWhileConditions =", "body": "mutableSetOf<FirLoop>()<EOL>"}
{"signature": "val modificationService =", "body": "LLFirDeclarationModificationService.getInstance(elementToModify.project)<EOL>"}
{"signature": "else if (Files.isRegularFile(it)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>Files.copy(it, outputPath.resolve(it.normalizedToBeRelative), StandardCopyOption.REPLACE_EXISTING)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val oldPrimaryConstructor =", "body": "mfvc.primaryConstructor<EOL>"}
{"signature": "val previousJsCompilation =", "body": "kotlin.js().compilations.maybeCreate(previousSuffix.decapitalizeAsciiOnly())<EOL>"}
{"signature": "var lastIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun builder<NUM_LIT>(f: suspend () -> Unit) {", "body": "<EOL><INDENT>f.startCoroutine(EmptyContinuation)<EOL>}"}
{"signature": "fun replaceTypeRef(newTypeRef: FirTypeRef) {", "body": "<EOL><INDENT><INDENT>typeRef = newTypeRef<EOL><INDENT>}"}
{"signature": "val isExpect =", "body": "property.isEffectivelyExpect(containingClass, context)<EOL>"}
{"signature": "fun onDeclarationExit(declaration: FirDeclaration) {", "body": "<EOL><INDENT><INDENT>if (declaration !is FirFile) return<EOL><INDENT><INDENT>components.reportCommitter.endOfFile(declaration)<EOL><INDENT>}"}
{"signature": "val exceptionClasses =", "body": "function.getAnnotation(JVM_THROWS_ANNOTATION_FQ_NAME)?.getValueArgument(<NUM_LIT>) ?: return null<EOL>"}
{"signature": "val cValuesRef =", "body": "packageName.child(cValuesRefName)<EOL>"}
{"signature": "val pointerType =", "body": "pointerType(function.valueParameters.last().type.toLLVMType(llvm))<EOL>"}
{"signature": "fun visitUByteValue(value: UByteValue, data: Unit?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>type = Type.BYTE<EOL><INDENT><INDENT><INDENT><INDENT>intValue = value.value.toLong()<EOL><INDENT><INDENT><INDENT><INDENT>flags = Flags.IS_UNSIGNED.toFlags(true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (descriptor is MemberDescriptor && descriptor.isExternal) {", "body": "<EOL><INDENT><INDENT><INDENT>diagnosticHolder.report(ErrorsJvm.JVM_STATIC_ON_EXTERNAL_IN_INTERFACE.on(declaration))<EOL><INDENT><INDENT>}"}
{"signature": "val KEEP_ALIVE_SECONDS =", "body": "<NUM_LIT><EOL>"}
{"signature": "val EAGER_INITIALIZED_PROPERTIES_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val propertyRefProto =", "body": "proto.propertyReference<EOL>"}
{"signature": "when (requireNotNull(argument.projection)) {", "body": "<EOL><INDENT><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.IN -> KmVariance.IN<EOL><INDENT><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.OUT -> KmVariance.OUT<EOL><INDENT><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.INV -> KmVariance.INVARIANT<EOL><INDENT><INDENT><INDENT>ProtoBuf.Type.Argument.Projection.STAR -> null<EOL><INDENT><INDENT>}"}
{"signature": "fun addFallbackErrorIfNecessary() {", "body": "<EOL><INDENT><INDENT>if (reportedErrors.isEmpty())<EOL><INDENT><INDENT><INDENT>reportedErrors += Errors.ERROR_IN_CONTRACT_DESCRIPTION.on(mainCallReportTarget, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun testDecode(symbols: String, bytes: ByteArray) {", "body": "<EOL><INDENT><INDENT><INDENT>testDecode(Base<NUM_LIT>, symbols, bytes)<EOL><INDENT><INDENT><INDENT>testDecode(Base<NUM_LIT>UrlSafe, symbols, bytes)<EOL><INDENT><INDENT><INDENT>testDecode(Base<NUM_LIT>Mime, symbols, bytes)<EOL><INDENT><INDENT>}"}
{"signature": "val long =", "body": "Random.nextLong(from = <NUM_LIT>, until = Long.MAX_VALUE)<EOL>"}
{"signature": "val zc<NUM_LIT> =", "body": "Z<NUM_LIT>MutableCollection(mutableListOf(z<NUM_LIT>(<NUM_LIT>), z<NUM_LIT>(<NUM_LIT>), z<NUM_LIT>(<NUM_LIT>)))<EOL>"}
{"signature": "if (dispatchReceiver !== explicitReceiver) {", "body": "<EOL><INDENT><INDENT><INDENT>dispatchReceiver = dispatchReceiver?.transform(transformer, data)<EOL><INDENT><INDENT>}"}
{"signature": "fun computePlatformSpecificDefaultImports(storageManager: StorageManager, result: MutableList<ImportPath>) {", "body": "<EOL><INDENT><INDENT>result.add(ImportPath.fromString(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "val BYTE_RANGE =", "body": "Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()<EOL>"}
{"signature": "val bam =", "body": "remember { Foo() }<EOL>"}
{"signature": "val sessionHolder =", "body": "SessionHolderImpl(contextSession, contextSession.getScopeSession())<EOL>"}
{"signature": "fun useList(list: MyList) {", "body": "<EOL><INDENT><INDENT>list.get(<NUM_LIT>)<EOL><INDENT>list.set(<NUM_LIT>, <NUM_LIT>)<EOL>}"}
{"signature": "fun testReleaseCompilerAgainstPreReleaseLibrarySkipPrereleaseCheckAllowUnstableDependencies() {", "body": "<EOL><INDENT><INDENT>doTestPreReleaseKotlinLibrary(K<NUM_LIT>JVMCompiler(), <STR_LIT>, tmpdir, <STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "fun takeStarBar<NUM_LIT>(x: Bar<NUM_LIT><*>) {", "body": "<EOL><INDENT>x.value = <!TYPE_MISMATCH_DUE_TO_TYPE_PROJECTIONS(<STR_LIT>)!><STR_LIT><!><EOL><INDENT>x.value <!UNRESOLVED_REFERENCE_WRONG_RECEIVER!>+=<!> <STR_LIT><EOL>}"}
{"signature": "fun foo(base: Array<out Enum<*>>) {", "body": "<EOL><INDENT>result = base[<NUM_LIT>].name<EOL>}"}
{"signature": "if (descriptor in hideFromObjCDeclarationsSet) {", "body": "<EOL><INDENT><INDENT><INDENT>val annotationProto = createAnnotationProto(extension)<EOL><INDENT><INDENT><INDENT>proto.addExtension(KlibMetadataSerializerProtocol.functionAnnotation, annotationProto)<EOL><INDENT><INDENT><INDENT>proto.flags = proto.flags or hasAnnotationFlag<EOL><INDENT><INDENT>}"}
{"signature": "val correctThis =", "body": "context.getDispatchReceiver(JsDescriptorUtils.getReceiverParameterForDeclaration(desc.containingDeclaration))<EOL>"}
{"signature": "val xmlText =", "body": "<!UNRESOLVED_REFERENCE!>getText<!>()<EOL>"}
{"signature": "val nodesToVisit =", "body": "ArrayDeque(nodes.toSet())<EOL>"}
{"signature": "if (cSources.isNotEmpty() && cppSources.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val konancTimeout =", "body": "<NUM_LIT>minutes<EOL>"}
{"signature": "val fwdKind =", "body": "declarationToCheck.forwardDeclarationKindOrNull() ?: return<EOL>"}
{"signature": "val targetMethod =", "body": "dceRuntimeDiagnostic.unreachableDeclarationMethod(context)<EOL>"}
{"signature": "if (markedAsIdentical()) {", "body": "<EOL><INDENT><INDENT><INDENT>simpleChecker.deleteFirFile(testDataFile)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val newConstructor =", "body": "constructor.transformComponents(transform = { it.makeNullable() }) ?: constructor<EOL>"}
{"signature": "val linuxX<NUM_LIT>MainCompileTask =", "body": "linuxX<NUM_LIT>MainCompilation.compileTaskProvider.get()<EOL>"}
{"signature": "val maxPrefixLength =", "body": "maxOf { it.first.length }<EOL>"}
{"signature": "val localVariableRef =", "body": "context.getAliasForDescriptor(localVariableDescriptor) ?:<EOL>"}
{"signature": "val someJar =", "body": "findJarByClass(someClass)!!<EOL>"}
{"signature": "val actualBounds =", "body": "actualTypeParameterSymbols[i].bounds<EOL>"}
{"signature": "if (mode.signature) {", "body": "<EOL><INDENT><INDENT><INDENT>append(i)<EOL><INDENT><INDENT>}"}
{"signature": "val firCodeFragment =", "body": "firFile.codeFragment<EOL>"}
{"signature": "if (y == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (parent is T) {", "body": "<EOL><INDENT><INDENT><INDENT>return parent<EOL><INDENT><INDENT>}"}
{"signature": "val JVM =", "body": "<STR_LIT><EOL>"}
{"signature": "if (boundSymbol.toLookupTag() == ownerLookupTag) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var thereIsApproximation =", "body": "false<EOL>"}
{"signature": "val dialogDescriptor =", "body": "find(AndroidConst.DIALOG_FQNAME) ?: return SyntheticElementResolveContext.ERROR_CONTEXT<EOL>"}
{"signature": "val minus<NUM_LIT> =", "body": "twoVal.<!EVALUATED(<STR_LIT>)!>minus(doubleVal)<!><EOL>"}
{"signature": "if (!buildGraph) {", "body": "<EOL><INDENT><INDENT><INDENT>graphs.push(ControlFlowGraph(declaration = null, <STR_LIT>, ControlFlowGraph.Kind.Script))<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun testNullable(a: Any?, actualType: Int) {", "body": "<EOL><INDENT>assertEquals(a == null || actualType == NUMBER, a is Int?, <STR_LIT>)<EOL><INDENT>assertEquals(a == null || actualType == NUMBER, a is Number?, <STR_LIT>)<EOL><INDENT>assertEquals(a == null || actualType == NUMBER, a is Double?, <STR_LIT>)<EOL><INDENT>assertEquals(a == null || actualType == BOOLEAN, a is Boolean?, <STR_LIT>)<EOL><INDENT>assertEquals(a == null || actualType == STRING, a is String?, <STR_LIT>)<EOL><INDENT>assertEquals(a == null || actualType == FUNCTION<NUM_LIT>, a is Function<NUM_LIT><*>?, <STR_LIT>)<EOL><INDENT>assertEquals(a == null || actualType == FUNCTION || actualType == FUNCTION<NUM_LIT>, a is Function<*>?, <STR_LIT>)<EOL>}"}
{"signature": "fun text(foo: FooJava) {", "body": "<EOL><INDENT><expr>foo.call()</expr><EOL>}"}
{"signature": "val bTree =", "body": "createCirTreeFromSourceCode(<STR_LIT>)<EOL>"}
{"signature": "val builtinTypes =", "body": "context.session.builtinTypes<EOL>"}
{"signature": "if (DescriptorUtils.canHaveDeclaredConstructors(thisDescriptor) || hasPrimaryConstructor) {", "body": "<EOL><INDENT><INDENT><INDENT>val constructor = c.functionDescriptorResolver.resolvePrimaryConstructorDescriptor(<EOL><INDENT><INDENT><INDENT><INDENT>thisDescriptor.scopeForConstructorHeaderResolution, thisDescriptor,<EOL><INDENT><INDENT><INDENT><INDENT>classOrObject, trace, c.languageVersionSettings, c.inferenceSession<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>constructor ?: return null<EOL><INDENT><INDENT><INDENT>setDeferredReturnType(constructor)<EOL><INDENT><INDENT><INDENT>return constructor<EOL><INDENT><INDENT>}"}
{"signature": "val localVariablesManager =", "body": "LocalVariablesManager(context, methodNode)<EOL>"}
{"signature": "if (generationState.is<NUM_LIT>BitNSInteger()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val low = trunc(targetResult, llvm.int<NUM_LIT>Type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val high = trunc(shr(targetResult, <NUM_LIT>, signed = false), llvm.int<NUM_LIT>Type)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>xor(low, high)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val job =", "body": "{ result = <STR_LIT> }<EOL>"}
{"signature": "if (functionValue != expectedValue) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val nonAvailableRepos =", "body": "repos<EOL>"}
{"signature": "val indicesFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val missingVariants =", "body": "<EOL><INDENT><INDENT><INDENT>publishLibraryVariants?.minus(variantNames).orEmpty()<EOL>"}
{"signature": "val tool =", "body": "ExternalTool(System.getProperty(<STR_LIT>))<EOL>"}
{"signature": "if (module in includedLibraryDescriptors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>friendsForIncludedModule<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val packageIds =", "body": "mutableListOf<Int>()<EOL>"}
{"signature": "val INTRINSIC_REMEMBER_OPTIMIZATION_ENABLED_KEY =", "body": "<EOL><INDENT><INDENT>CompilerConfigurationKey<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "val secondMessage =", "body": "second.getDeprecationMessage() ?: return@run null<EOL>"}
{"signature": "val sharedNativeCompileTask =", "body": "nativeCompilation.compileTaskProvider.get() as KotlinNativeCompile<EOL>"}
{"signature": "val javaClassDeclaredConstructors =", "body": "javaClass.constructors<EOL>"}
{"signature": "if (performedActions.add(actionId)) {", "body": "<EOL><INDENT><INDENT><INDENT>action()<EOL><INDENT><INDENT>}"}
{"signature": "if (hasNonTrivialMapping || isCallableReferenceWithImplicitConversion(resolvedCall, callableReferenceAdaptation)) {", "body": "<EOL><INDENT><INDENT><INDENT>resolvedCall.updateValueArguments(mappedArguments.toMap())<EOL><INDENT><INDENT>}"}
{"signature": "val topLevelName =", "body": "classifier.topLevelName<EOL>"}
{"signature": "val equalsLong<NUM_LIT> =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER, EQUALITY_NOT_APPLICABLE!><NUM_LIT>L == <STR_LIT><!><EOL>"}
{"signature": "if (options.printFlagsInDeclarationReferences) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>append(declaration.renderPropertyFlags())<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun call(a: @ParameterName(<STR_LIT>) Int, b: @ParameterName(<STR_LIT>) String) {", "body": "<EOL><INDENT><expr>call(<NUM_LIT>, <STR_LIT>)</expr><EOL>}"}
{"signature": "if (destDir == null) {", "body": "<EOL><INDENT><INDENT><INDENT>val configuration = environment.configuration<EOL><INDENT><INDENT><INDENT>val messageCollector = configuration.getNotNull(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY)<EOL><INDENT><INDENT><INDENT>messageCollector.report(CompilerMessageSeverity.ERROR, <STR_LIT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val outerClassSymbolToState =", "body": "irClass.parentAsClass.thisReceiver!!.symbol to outerClass<EOL>"}
{"signature": "val fromSuper =", "body": "notOverridden.toMutableSet()<EOL>"}
{"signature": "import async.", "body": "*<EOL>"}
{"signature": "while (i < max && index < length) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.append(pattern[nextIndex()])<EOL><INDENT><INDENT><INDENT>i++<EOL><INDENT><INDENT>}"}
{"signature": "if (newFunction is IrSimpleFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>newFunction.overriddenSymbols = (original as IrSimpleFunction).overriddenSymbols<EOL><INDENT><INDENT><INDENT>newFunction.correspondingPropertySymbol = null<EOL><INDENT><INDENT>}"}
{"signature": "if (receiver !is KtQualifiedExpression) {", "body": "<EOL><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT>}"}
{"signature": "fun testEquals() {", "body": "<EOL><INDENT><INDENT>assertNotEquals(vectorOf(<NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f), vectorOf(<NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f))<EOL><INDENT><INDENT>assertNotEquals(vectorOf(<NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f), Any())<EOL><INDENT><INDENT>assertEquals(vectorOf(<NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f), vectorOf(<NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f, <NUM_LIT>f))<EOL><INDENT>}"}
{"signature": "val progression =", "body": "P<EOL>"}
{"signature": "val sourceSetDir =", "body": "projectPath.resolve(sourceRoot.gradleSrcDir).toFile()<EOL>"}
{"signature": "fun minOfT() {", "body": "<EOL><INDENT><INDENT>totalOrderMinOf<NUM_LIT><Comparable<Any>>(::minOf, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val projectScopeServices =", "body": "(project as DefaultProject).services as ProjectScopeServices<EOL>"}
{"signature": "val branches =", "body": "if (it.size > <NUM_LIT>) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "var ref =", "body": "A::foo<EOL>"}
{"signature": "val testExecutable =", "body": "binary is TestExecutable<EOL>"}
{"signature": "if (descriptor is PropertyDescriptor && descriptor.isBuiltInCoroutineContext()) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(UNSUPPORTED.on(expression.callableReference, <STR_LIT>))<EOL><INDENT><INDENT>}"}
{"signature": "val requiredAnnotationsWithArguments =", "body": "session.annotationPlatformSupport.requiredAnnotationsWithArguments<EOL>"}
{"signature": "val analyzerFacade =", "body": "TopDownAnalyzerFacadeForWasm.facadeFor(configuration.get(WasmConfigurationKeys.WASM_TARGET))<EOL>"}
{"signature": "val comparePatch =", "body": "patch.compareTo(other.patch)<EOL>"}
{"signature": "if (withSideEffect() != null) {", "body": "<EOL><INDENT><INDENT>return result<EOL><INDENT>}"}
{"signature": "if (isPublishedLibrary) {", "body": "<EOL><INDENT><INDENT><INDENT>runConsumerTest(dependencyProject, withKotlinVersion = oldKotlinVersion)<EOL><INDENT><INDENT>}"}
{"signature": "if (recurse) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>argument.type.eraseProjections(owner)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var doubleStringNumber =", "body": "Outer<Double>().Inner<String>().foo<Number>()()<EOL>"}
{"signature": "val deserializedExtras =", "body": "extras.serialize().deserialize<Extras>()<EOL>"}
{"signature": "val cloneCallableId =", "body": "CallableId(StandardClassIds.Cloneable, Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "var addNewSequence =", "body": "true<EOL>"}
{"signature": "val intersected =", "body": "statements.map { ConeTypeIntersector.intersectTypes(context, it.exactType.toList()) }<EOL>"}
{"signature": "if (parcelerTypeSymbol?.classKind != ClassKind.OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT>val reportElement = annotationCall.typeArguments.singleOrNull()?.source ?: annotationCall.source<EOL><INDENT><INDENT><INDENT>reporter.reportOn(reportElement, KtErrorsParcelize.PARCELER_SHOULD_BE_OBJECT, context)<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_COMPILER_EMBEDDABLE_JAR =", "body": "<STR_LIT><EOL>"}
{"signature": "val ifInfo =", "body": "components.dataFlowAnalyzer.extractDataFlowInfoFromCondition(expression, true, newContext)<EOL>"}
{"signature": "val presents =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "when (containerType) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>AndroidContainerType.SUPPORT_FRAGMENT_ACTIVITY,<EOL><INDENT><INDENT><INDENT><INDENT>AndroidContainerType.ANDROIDX_SUPPORT_FRAGMENT_ACTIVITY -> containerType.fqName.child(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>else -> containerType.fqName.child(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (shouldApproximate) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>session.typeApproximator.approximateToSuperType(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>TypeApproximatorConfiguration.FinalApproximationAfterResolutionAndInference<EOL><INDENT><INDENT><INDENT><INDENT>) ?: type<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val isJavaSamConversionWithEqualsHashCode =", "body": "<EOL><INDENT><INDENT>context.config.languageVersionSettings.supportsFeature(LanguageFeature.JavaSamConversionEqualsHashCode)<EOL>"}
{"signature": "val targetClass =", "body": "script.targetClass ?: error(<STR_LIT>)<EOL>"}
{"signature": "val invocationResult =", "body": "execMethod.invoke(compiler, PrintStream(outStream), args.toTypedArray()) as Enum<*><EOL>"}
{"signature": "while (container !is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>container = container.containingDeclaration ?: return false<EOL><INDENT><INDENT>}"}
{"signature": "val INAPPLICABLE_SHARED_IMMUTABLE_TOP_LEVEL =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "if (elementToDump !in filesToDump) {", "body": "<EOL><INDENT><INDENT>builder.append(<STR_LIT>)<EOL><INDENT><INDENT>renderer.renderElementAsString(elementToDump)<EOL><INDENT>}"}
{"signature": "fun baz(a: A<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>a.i<EOL><INDENT><INDENT>}"}
{"signature": "when(nf) {", "body": "<EOL><INDENT><INDENT>Sealed.NonFirst.Second -> <NUM_LIT><EOL><INDENT><INDENT>Sealed.NonFirst.Third -> <NUM_LIT><EOL><INDENT>}"}
{"signature": "for (i in MinUI downTo MaxUI) {", "body": "<EOL><INDENT><INDENT>xs.add(i)<EOL><INDENT><INDENT>if (xs.size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (kotlinCompilation !is KotlinJvmAndroidCompilation) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "val testDataRoot =", "body": "File(<STR_LIT>)<EOL>"}
{"signature": "val firLines =", "body": "frontendIRTestDataFile.readLines()<EOL>"}
{"signature": "val kotlinBaseJars =", "body": "kotlinCompilerJars + kotlinLibsJars + kotlinScriptingJars<EOL>"}
{"signature": "val black =", "body": "Color.BLACK<EOL>"}
{"signature": "if (firClass?.classKind == ClassKind.OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>firClass.symbol<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test(v: Visitor<Nothing>, e: Element) {", "body": "<EOL><INDENT>e.accept(v, null)<EOL>}"}
{"signature": "val cachedResult =", "body": "bindingTrace[CodegenBinding.PROPERTY_METADATA_REQUIRED_FOR_OPERATOR_CALL, calleeDescriptor]<EOL>"}
{"signature": "fun getOrNull() {", "body": "<EOL><INDENT><INDENT>assertEquals(<STR_LIT>, Optional.of(<STR_LIT>).getOrNull())<EOL><INDENT><INDENT>assertNull(Optional.empty<String>().getOrNull())<EOL><INDENT>}"}
{"signature": "val specialJsNumberSet =", "body": "HashSet<Double>()<EOL>"}
{"signature": "if (skipAlreadyRegistered && getOrNull(data.kClass) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val kotlinNativeCompilerEmbeddable =", "body": "if (customNativeHome == null)<EOL>"}
{"signature": "val T_PROPERTY_SETTER =", "body": "targetList(PROPERTY_SETTER)<EOL>"}
{"signature": "if (!hasBackingField && isMarkedTransient) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val transientPsi =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>(descriptor.annotations.findAnnotation(SerializationAnnotations.serialTransientFqName) as? LazyAnnotationDescriptor)?.annotationEntry<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(SerializationErrors.TRANSIENT_IS_REDUNDANT.on(transientPsi ?: declaration))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val jsInterfaceFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "for (modularRoot in originalArguments.javaModulePath?.split(File.pathSeparatorChar).orEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.add(CLIConfigurationKeys.CONTENT_ROOTS, JvmModulePathRoot(modularRoot.fixPath()))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "else if (param.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (fieldIndex in currentSpilledCount until predSpilledCount) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>cleanUpField(suspension, fieldIndex)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (equalsContributedFunction != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.add(equalsContributedFunction)<EOL><INDENT><INDENT><INDENT><INDENT>val equalsFunction = createSyntheticIrFunction(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>EQUALS,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>equalsContributedFunction,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>c.irBuiltIns.booleanType,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>otherParameterNeeded = true,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>isOperator = true<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>declarationStorage.cacheGeneratedFunction(equalsContributedFunction, equalsFunction)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!withTestData) {", "body": "<EOL><INDENT><INDENT><INDENT>path.walkTopDown(onEachFile)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(base: Enum<*>) {", "body": "<EOL><INDENT>result = base.name<EOL>}"}
{"signature": "if (add(<NUM_LIT>, <NUM_LIT>) !== <NUM_LIT>) {", "body": "<EOL><INDENT>throw <STR_LIT>;<EOL>}"}
{"signature": "if (performanceExtension.metrics.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>project.logger.warn(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>result = false<EOL><INDENT><INDENT>}"}
{"signature": "val jsRelatedSymbols =", "body": "context.wasmSymbols.jsRelatedSymbols<EOL>"}
{"signature": "val msg =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> + scheduler.queueCount +<EOL>"}
{"signature": "if (mode == JVMAssertionsMode.ALWAYS_ENABLE) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkAssertion(assertCondition, lambdaArgument)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "import lib.", "body": "*<EOL>"}
{"signature": "val arrayOfNulls =", "body": "pluginContext.irBuiltIns.arrayOfNulls<EOL>"}
{"signature": "if (unrestrictedBuilderInference) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>put(LanguageFeature.UnrestrictedBuilderInference, LanguageFeature.State.ENABLED)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (callSiteLineNumber == null) {", "body": "<EOL><INDENT><INDENT>return name<EOL><INDENT>}"}
{"signature": "package is necessary to distinguish wasm-js target from other wasm targets on package-based search<EOL>.", "body": ""}
{"signature": "val newSet =", "body": "HashSet(newList)<EOL>"}
{"signature": "val packageParts<NUM_LIT> =", "body": "metadata<NUM_LIT>packageParts<EOL>"}
{"signature": "val jvmSignatureRegex =", "body": "Regex(\"^"}
{"signature": "fun inlineFunction(x: Int) {", "body": "}<EOL><EOL>var OK : Any? = null<EOL>val flag<NUM_LIT> = <NUM_LIT><EOL>val flag<NUM_LIT> = <NUM_LIT><EOL><EOL>fun check() = true<EOL><EOL>fun sep(comment: String) {}"}
{"signature": "package other<NUM_LIT><EOL>.", "body": ""}
{"signature": "val REPORT_OUTPUT_FILES =", "body": "CompilerConfigurationKey<Boolean>(<STR_LIT>)<EOL>"}
{"signature": "if (innerClass) {", "body": "<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "var exceptionCaught =", "body": "false<EOL>"}
{"signature": "for (freeVar in x.collectFreeVariables()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>useVariable(freeVar)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>useVariable(freeVar)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>capturedInClosure += freeVar<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun pass(testCase: TestCase, timeMillis: Long) {", "body": "}<EOL><INDENT>override fun fail(testCase: TestCase, e: Throwable, timeMillis: Long) {}"}
{"signature": "if (state.classBuilderMode.generateBodies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>ProgressIndicatorAndCompilationCanceledStatus.checkCanceled()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun testThrowsCME(withMutableList: WithCollection<MutableList<String>>) {", "body": "<EOL><INDENT><INDENT><INDENT>testSubListThrowsCME(withMutableList, operations)<EOL><INDENT><INDENT>}"}
{"signature": "val rhsVariable =", "body": "getOrCreateVariableIfRealAndStable(flow, elvisExpression.rhs)<EOL>"}
{"signature": "if (x == <NUM_LIT>toByte()) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val reportEntry =", "body": "errorReport.createElement(<STR_LIT>)<EOL>"}
{"signature": "if (shouldContinue(x)) {", "body": "<EOL><INDENT><INDENT>"}
{"signature": "val lps =", "body": "it.toDouble() * <NUM_LIT> / time<EOL>"}
{"signature": "fun reportErrors(completedCall: CallInfo, resolvedCall: NewAbstractResolvedCall<*>, errors: List<ConstraintSystemError>) {", "body": "<EOL><INDENT><INDENT>kotlinToResolvedCallTransformer.reportCallDiagnostic(<EOL><INDENT><INDENT><INDENT>completedCall.context,<EOL><INDENT><INDENT><INDENT>trace,<EOL><INDENT><INDENT><INDENT>resolvedCall,<EOL><INDENT><INDENT><INDENT>resolvedCall.resultingDescriptor,<EOL><INDENT><INDENT><INDENT>errors.asDiagnostics()<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "if (GradleVersion.current().baseVersion >= GradleVersion.version(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>StatisticsBuildFlowManager.getInstance(project).subscribeForBuildResult()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val constructorBody =", "body": "constructor.body<EOL>"}
{"signature": "val cTxt =", "body": "project.file(<STR_LIT>)<EOL>"}
{"signature": "val requestedBuildType =", "body": "cocoapodsExtension.xcodeConfigurationToNativeBuildType[xcodeConfiguration]<EOL>"}
{"signature": "val hasDescribeContentImplementation =", "body": "owner.hasDescribeContentsImplementation() ||<EOL>"}
{"signature": "val isAssociatedCompilation =", "body": "depth > <NUM_LIT><EOL>"}
{"signature": "val containerTargets =", "body": "AnnotationChecker.applicableTargetSet(containerClass)<EOL>"}
{"signature": "val gcMetric =", "body": "myGcMetrics[key]<EOL>"}
{"signature": "if (entry.name.endsWith(<STR_LIT>) && !entry.name.startsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val bytes = zip.readBytes()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>files.add(Pair(bytes, entry.name))<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "while (signature.current() != '>') {", "body": "<EOL><INDENT><INDENT><INDENT>typeParameters.add(parseTypeParameter(signature, context))<EOL><INDENT><INDENT>}"}
{"signature": "val declarationContext =", "body": "declarationContextStack.peek()<EOL>"}
{"signature": "val dts =", "body": "projectDir.resolve(<STR_LIT> + mode + <STR_LIT>)<EOL>"}
{"signature": "val UNSAFE_COMPILER_ARGS_WARNING_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val moduleGroupProvider =", "body": "project.provider { publication?.groupId ?: project.group.toString() }<EOL>"}
{"signature": "val settingsPrefix =", "body": "<STR_LIT><EOL>"}
{"signature": "fun named<NUM_LIT>() {", "body": "} else fun named<NUM_LIT>() {}"}
{"signature": "val platforms =", "body": "targets.map { wasmPlatformByTargetVersion(it) }<EOL>"}
{"signature": "if (!classId.isNestedClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>assertContains(provider.getTopLevelKotlinClassLikeDeclarationNamesInPackage(classId.packageFqName), shortName)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (!expression.symbol.owner.isObjectInstanceField()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>super.visitSetField(expression, data)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (it is IrContainerExpression && !it.isTransparentScope) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>IrCompositeImpl(loop.startOffset, loop.endOffset, it.type, it.origin, it.statements)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (singleSimplePlatform == JvmPlatforms.defaultJvmPlatform.singleOrNull() && args != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return IdePlatformKind.platformByCompilerArguments(args)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nonEmptyScopes =", "body": "listOfNonEmptyScopes(types.map { it.memberScope })<EOL>"}
{"signature": "if (index == map.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>index = lastIndex<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val maskedMethods =", "body": "mutableSetOf<JvmMethodSignature>()"}
{"signature": "val containerSize =", "body": "<NUM_LIT>_<NUM_LIT><EOL>"}
{"signature": "val elapsed =", "body": "TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startedAt)<EOL>"}
{"signature": "var id =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (it.type.isOrHasComposableLambda) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parameters + listOf(InferenceFunctionParameter(transformer, it))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val typeParametersInaccessibleFromReceiver =", "body": "allTypeParameters - allAccessibleTypeParameters<EOL>"}
{"signature": "val ITX =", "body": "X<EOL>"}
{"signature": "if (match != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val (number) = match.destructured<EOL><INDENT><INDENT><INDENT>return getLocalProperty(number.toInt())<EOL><INDENT><INDENT><INDENT><INDENT>?: throw KotlinReflectionInternalError(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val superKlass =", "body": "superClasses.singleOrNull()<EOL>"}
{"signature": "val touchedAppJvm =", "body": "resolvePath(<STR_LIT>, <STR_LIT>, <STR_LIT>).addPrivateVal()<EOL>"}
{"signature": "val aliasName =", "body": "importDirective.importedName<EOL>"}
{"signature": "val expressionConverter =", "body": "LightTreeRawFirExpressionBuilder(session, tree, this, context)<EOL>"}
{"signature": "val fileIds =", "body": "lookupMap[lookup]!!<EOL>"}
{"signature": "val compileTimeExtensionFunctions =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>).mapTo(hashSetOf()) { Name.identifier(it) }<EOL>"}
{"signature": "val logs =", "body": "createBuildLog(otherMakeResults)<EOL>"}
{"signature": "val interner =", "body": "Interner.createStringInterner()<EOL>"}
{"signature": "if (classInstance.isEnum) {", "body": "<EOL><INDENT><INDENT><INDENT>classInstance.getMethod(<STR_LIT>).invoke(null)<EOL><INDENT><INDENT>}"}
{"signature": "val KOTLIN_RESOURCES_JS =", "body": "<STR_LIT><EOL>"}
{"signature": "package fragments ------------------------------------<EOL>.", "body": ""}
{"signature": "val valueParameterNames =", "body": "irAnnotation.getValueParameterNamesForDebug()<EOL>"}
{"signature": "val referencedPropertyGetterSymbol =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declarationStorage.getIrFunctionSymbol(property.getter.delegate.unwrapUseSiteSubstitutionOverrides().symbol) as? IrSimpleFunctionSymbol<EOL>"}
{"signature": "val mutableList =", "body": "mutableListOf(<NUM_LIT>, <NUM_LIT>) + listOf(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val dynamicReceiver =", "body": "getDynamicReceiver(dispatchReceiverValue, extensionReceiverValue)<EOL>"}
{"signature": "val isOldVersionThatAllowsNonPrimitiveArrays =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>!context.languageVersionSettings.supportsFeature(LanguageFeature.ProhibitGenericArrayClassLiteral)<EOL>"}
{"signature": "val aj<NUM_LIT> =", "body": "JavaClass.id(a<NUM_LIT>)<EOL>"}
{"signature": "val expectedPathSuffix =", "body": "<STR_LIT><EOL>"}
{"signature": "val cirModule =", "body": "moduleContext.get<CirModule>(node) ?: return null<EOL>"}
{"signature": "val copyBuilderVariableName =", "body": "<STR_LIT><EOL>"}
{"signature": "val openingInlineMethodMarker =", "body": "hashMapOf<AbstractInsnNode, AbstractInsnNode>()<EOL>"}
{"signature": "val localInX =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (actual > expected) {", "body": "<EOL><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val falseResult =", "body": "ConditionalEffect(falseIs, ESReturns(ESConstants.falseValue))<EOL>"}
{"signature": "package directive, all other files must have package directives<EOL>.", "body": ""}
{"signature": "val branchJumpLabel =", "body": "Label()<EOL>"}
{"signature": "val formatter =", "body": "SimpleDateFormat(<STR_LIT>)<EOL>"}
{"signature": "if (!rootFile.isDirectory || !recursive || deep != null && deep < <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>return@lazy emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "if (classDescriptor.kind == ClassKind.ANNOTATION_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (buildScanUrl != null) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (findDirectiveInLines(iterator)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>iterator.asSequence().concatLines(trimLines).trimStart()<EOL><INDENT>}"}
{"signature": "val MINUS<NUM_LIT>F =", "body": "<NUM_LIT>F<EOL>"}
{"signature": "val KONAN_EXTENSION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "if (typeof x !== 'number') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw <STR_LIT>;<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (stub != null) {", "body": "<EOL><INDENT><INDENT><INDENT>val typeReferences =<EOL><INDENT><INDENT><INDENT><INDENT>getStubOrPsiChildrenAsList<KtTypeReference, KotlinPlaceHolderStub<KtTypeReference>>(KtStubElementTypes.TYPE_REFERENCE)<EOL><INDENT><INDENT><INDENT>typeReferences[<NUM_LIT>]<EOL><INDENT><INDENT>}"}
{"signature": "for (element in set) {", "body": "<EOL><INDENT><INDENT>sum += element<EOL><INDENT>}"}
{"signature": "val gradleMetadataFileContent =", "body": "groupDir.resolve(<STR_LIT>).readText()<EOL>"}
{"signature": "fun addNotChangedClass(classInternalName: String) {", "body": "<EOL><INDENT><INDENT>notChangedTypes.add(classInternalName)<EOL><INDENT>}"}
{"signature": "if (foo.isError()) {", "body": "<EOL><INDENT><INDENT><INDENT>foo.error.printStackTrace()<EOL><INDENT><INDENT>}"}
{"signature": "val useSiteElement =", "body": "testServices.expressionMarkerProvider.getElementOfTypeAtCaretOrNull<KtExpression>(mainFile)<EOL>"}
{"signature": "fun compilerOpts(values: List<String>) {", "body": "<EOL><INDENT><INDENT>compilerOpts.addAll(values)<EOL><INDENT>}"}
{"signature": "val cinteropMetadataDirectory =", "body": "kotlinProjectStructureMetadata.sourceSetCInteropMetadataDirectory[sourceSetName]<EOL>"}
{"signature": "if (psiField != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return wrapField(psiField, forceWrapping = false)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val typeParameterTypeParameterBound =", "body": "Kotlin::class.java.methods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "val dslMarkers =", "body": "dslMarkersProvider()<EOL>"}
{"signature": "val containingModule =", "body": "PLModule.determineModuleFor(declaration)<EOL>"}
{"signature": "val cacheForIncorporationConfigToSubtypeDirection =", "body": "ConcurrentHashMap<KotlinTypeMarker, ApproximationResult>()<EOL>"}
{"signature": "var now =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "if (declaration.shouldBeCompiledAsGenerator()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>name?.isGeneratorFunction = true<EOL><INDENT><INDENT><INDENT><INDENT>modifiers.add(JsFunction.Modifier.GENERATOR)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (argumentValue != null && (parsedVersion == null || !argumentValue.matches(RequireKotlinConstants.VERSION_REGEX))) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.reportDiagnosticOnce(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.ILLEGAL_KOTLIN_VERSION_STRING_VALUE.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reportOn, fqName ?: return<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val localVariableDescriptor =", "body": "resolvedCall.resultingDescriptor as? LocalVariableDescriptor<EOL>"}
{"signature": "val newArgumentsSize =", "body": "expression.valueArgumentsCount - <NUM_LIT><EOL>"}
{"signature": "fun testFailedFindDotQuantifier() {", "body": "<EOL><INDENT><INDENT>val regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>val result = regex.find(<STR_LIT>)<EOL><EOL><INDENT><INDENT>assertNull(result)<EOL><INDENT>}"}
{"signature": "val varInstructionMoved =", "body": "HashMap<AbstractInsnNode, CallContext>()<EOL>"}
{"signature": "var code  =", "body": "str.charCodeAt(i);<EOL>"}
{"signature": "when (ktScopeKind) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is KtScopeKind.PackageMemberScope -> false<EOL><INDENT><INDENT><INDENT><INDENT>is KtScopeKind.DefaultSimpleImportingScope -> renderDefaultImportingScope<EOL><INDENT><INDENT><INDENT><INDENT>is KtScopeKind.DefaultStarImportingScope -> renderDefaultImportingScope<EOL><INDENT><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val otherLabel =", "body": "from.edgeTo(other).label<EOL>"}
{"signature": "val dummyContainerDescriptor =", "body": "DummyContainerDescriptor(file, packageFragment)<EOL>"}
{"signature": "fun test_<NUM_LIT>() {", "body": "<EOL><INDENT>data[test <!USELESS_CAST!>as Holder<*><!>]<EOL>}"}
{"signature": "val classLikes =", "body": "mutableListOf<Pair<FirClassLikeSymbol<*>, String>>()<EOL>"}
{"signature": "for ((index, enumEntry) in enumEntries.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newlineExceptFirst()<EOL><INDENT><INDENT><INDENT><INDENT>builder.append(subindent)<EOL><INDENT><INDENT><INDENT><INDENT>appendDescriptor(enumEntry, subindent, index == enumEntries.lastIndex)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(a :A?) {", "body": "<EOL><INDENT>require(a?.e?.d.valueIsNotNull())<EOL><INDENT>a<!UNSAFE_CALL!>.<!>e<!UNSAFE_CALL!>.<!>d<!UNSAFE_CALL!>.<!>length<EOL>}"}
{"signature": "if (typeRef != null) {", "body": "<EOL><INDENT><INDENT><INDENT>patternBuilder.append(<STR_LIT> + arguments.size)<EOL><INDENT><INDENT><INDENT>arguments.add(typeRef)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitElement(element: FirElement, data: FirElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>element.acceptChildren(this, element)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun intBlockInfer()  {", "body": "<NUM_LIT>}"}
{"signature": "val irAdapterRefType =", "body": "suspendFunType.toIrType()<EOL>"}
{"signature": "val expandedProjection =", "body": "expandTypeProjection(underlyingProjection, typeAliasExpansion, null, recursionDepth)<EOL>"}
{"signature": "fun foobaz() {", "body": "}"}
{"signature": "val replacementForReport =", "body": "(call.dispatchReceiver as? ExpressionReceiver)?.expression<EOL>"}
{"signature": "fun foo<NUM_LIT>(i: MyInterface, a: Any) {", "body": "<EOL><INDENT>E<NUM_LIT>X == E<NUM_LIT>Y<EOL><INDENT>E<NUM_LIT>X == i<EOL><INDENT>E<NUM_LIT>X == a<EOL>}"}
{"signature": "fun act() {", "body": "<EOL><INDENT><INDENT><!UNRESOLVED_REFERENCE!>println<!>(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val f<NUM_LIT>IrType =", "body": "f<NUM_LIT>Type.defaultType.substitute(mapOf(f<NUM_LIT>ParamSymbol to type))<EOL>"}
{"signature": "val K_CLASS_SIMPLE_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun testMismatchingArities() {", "body": "<EOL><INDENT>++MismatchingArities<NUM_LIT><!NO_SET_METHOD!>[<NUM_LIT>]<!><EOL><INDENT>MismatchingArities<NUM_LIT><!NO_SET_METHOD!>[<NUM_LIT>]<!>++<EOL><INDENT>MismatchingArities<NUM_LIT><!NO_SET_METHOD!>[<NUM_LIT>]<!> += <NUM_LIT><EOL><EOL><INDENT>++<!NO_VALUE_FOR_PARAMETER!>MismatchingArities<NUM_LIT>[<NUM_LIT>]<!><EOL><INDENT><!NO_VALUE_FOR_PARAMETER!>MismatchingArities<NUM_LIT>[<NUM_LIT>]<!>++<EOL><INDENT><!NO_VALUE_FOR_PARAMETER!>MismatchingArities<NUM_LIT>[<NUM_LIT>]<!> += <NUM_LIT><EOL>}"}
{"signature": "var kq =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun tryAcquire() {", "body": "<EOL><INDENT><INDENT>cacheRoot.mkdirs()<EOL><INDENT><INDENT>guardFile.createNewFile()<EOL><INDENT>}"}
{"signature": "val classIdentifier =", "body": "getClassIdentifier(service)<EOL>"}
{"signature": "if (trueWhenString(x) && false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "when (getTypeVariableReadiness(typeVariable, dependencyProvider)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>TypeVariableFixationReadiness.FORBIDDEN, TypeVariableFixationReadiness.WITHOUT_PROPER_ARGUMENT_CONSTRAINT -> false<EOL><INDENT><INDENT><INDENT><INDENT>else -> true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (type.hasEnhancedNullability) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>tBuilder.appendSignature(MangleConstant.ENHANCED_NULLABILITY_MARK)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val testIndexOfB =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (type.isMarkedNullable != builder.nullable) {", "body": "<EOL><INDENT><INDENT><INDENT>builder.nullable = type.isMarkedNullable<EOL><INDENT><INDENT>}"}
{"signature": "fun Cls() {", "body": "}<EOL>class Cls<NUM_LIT><EOL><EOL><EOL>package c<EOL><EOL>import a.*<EOL>import b.*<EOL><EOL>fun take(arg: Any) {}"}
{"signature": "val ks<NUM_LIT>Bar =", "body": "ks<NUM_LIT>(::bar)<EOL>"}
{"signature": "val dep =", "body": "project.dependencies.create(<STR_LIT>)<EOL>"}
{"signature": "var conditionsResult =", "body": "firstConditionResult<EOL>"}
{"signature": "val errorTypesReports =", "body": "mutableMapOf<String, ErrorTypeReport>()<EOL>"}
{"signature": "val operatorCallReturnType =", "body": "resolvedOperatorCall.resolvedType<EOL>"}
{"signature": "if (platformN !== null) {", "body": "}"}
{"signature": "when (fileName) {", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT> -> listOf(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun foo(a: List<Any?>) {", "body": "}"}
{"signature": "val jsMainCompileTask =", "body": "jsTarget.compilations.main.compileTaskProvider.get()<EOL>"}
{"signature": "val left =", "body": "prevChar == ' ' || isSpace(prevChar, startIndex - <NUM_LIT>, testString)<EOL>"}
{"signature": "var _started =", "body": "false<EOL>"}
{"signature": "val intPostfixIncrDecr =", "body": "createIncrDecrFun(<STR_LIT>)<EOL>"}
{"signature": "if (unmatchedLookupSymbols.isEmpty() && unmatchedFqNames.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return changedProgramSymbols<EOL><INDENT><INDENT>}"}
{"signature": "if (previousBenchmarks != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>analyzePerformanceChanges()<EOL><INDENT><INDENT>}"}
{"signature": "val PARAGRAPH_SELECTORS =", "body": "<STR_LIT><EOL>"}
{"signature": "val stepArg =", "body": "expression.getValueArgument(<NUM_LIT>)!!<EOL>"}
{"signature": "fun doAfterBuild() {", "body": "<EOL><INDENT>}"}
{"signature": "for (annotation in proto.getExtension(JvmProtoBuf.typeAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>ext.annotations.add(annotation.readAnnotation(c.strings))<EOL><INDENT><INDENT>}"}
{"signature": "fun test<NUM_LIT>(a: Any) {", "body": "<EOL><INDENT>a as (String) -> String<EOL><INDENT>H.bar(a)<EOL>}"}
{"signature": "fun testNoWarningsOnKotlinTestIfAddedInCommonMain(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT><INDENT>checkDiagnostics(gradleVersion, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val DOT_BUILTINS_METADATA_FILE_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "val stringAndList =", "body": "<STR_LIT> + emptyList<Boolean>()<EOL>"}
{"signature": "val objVar =", "body": "<NUM_LIT><EOL>"}
{"signature": "while (i != null) {", "body": "<EOL><INDENT><INDENT><INDENT>items.add(i)<EOL><INDENT><INDENT><INDENT>i = i.parent<EOL><INDENT><INDENT>}"}
{"signature": "val messageLines =", "body": "if (stackStart == <NUM_LIT>) <NUM_LIT> else <NUM_LIT> + shortInfo.count { c -> c == '\\n' }<EOL>"}
{"signature": "val matchingPrimaryConstructorParam =", "body": "containingClass?.declarations?.filterIsInstance<FirPrimaryConstructor>()<EOL>"}
{"signature": "import javapackage.", "body": "PublicParentClass<EOL>"}
{"signature": "if (needCompatibilityResolveForCallableReference(callableReferenceAdaptation, candidateDescriptor)) {", "body": "<EOL><INDENT><INDENT><INDENT>markCandidateForCompatibilityResolve(diagnostics)<EOL><INDENT><INDENT>}"}
{"signature": "import javax.", "body": "inject.Inject<EOL>"}
{"signature": "if (outputKind != CompilerOutputKind.LIBRARY && hasSourceRoots && !isCompilingFromBitcode) {", "body": "<EOL><INDENT><INDENT><INDENT>splitOntoTwoStages()<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (constant == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>interupted = true<EOL><INDENT><INDENT><INDENT><INDENT>break<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (declaration is IrValueParameter && !declaration.isAssignable) {", "body": "<EOL><INDENT><INDENT><INDENT>reportError(expression, <STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val temporaryTrace =", "body": "TemporaryBindingTrace.create(context.trace, <STR_LIT>)<EOL>"}
{"signature": "val header =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testDefaultNonIncrementalSettings() {", "body": "<EOL><INDENT><INDENT>val config = compilationService.makeJvmCompilationConfiguration()<EOL><INDENT><INDENT>Assertions.assertEquals(emptySet<String>(), config.kotlinScriptFilenameExtensions)<EOL><INDENT>}"}
{"signature": "var _counter =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (entry in enumEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val serialName = entry.annotations.serialNameValue ?: entry.name.toString()<EOL><INDENT><INDENT><INDENT>val call = JsInvocation(<EOL><INDENT><INDENT><INDENT><INDENT>JsNameRef(context.getNameForDescriptor(addElementFunction), serialDescriptorInThis),<EOL><INDENT><INDENT><INDENT><INDENT>JsStringLiteral(serialName)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>translator.addInitializerStatement(call.makeStmt())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>pushAnnotationsInto(entry, pushAnnotationFunction, serialDescriptorInThis)<EOL><INDENT><INDENT>}"}
{"signature": "val pipelineTypeFromFirPipelineAnnotation =", "body": "if (testClass.annotations.any { it is FirPipeline })<EOL>"}
{"signature": "for (i in Counter()) {", "body": "<EOL><INDENT><INDENT><INDENT>result += i<EOL><INDENT><INDENT>}"}
{"signature": "if (clang_getCursorKind(childCursor) == CXCursorKind.CXCursor_EnumConstantDecl) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val name = clang_getCursorSpelling(childCursor).convertAndDispose()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val value = clang_getEnumConstantDeclValue(childCursor)<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val constant = EnumConstant(name, value, isExplicitlyDefined = childCursor.hasExpressionChild())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>enumDef.constants.add(constant)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var xc =", "body": "<NUM_LIT>toChar()<EOL>"}
{"signature": "val annotationToAdd =", "body": "ClassId.fromString(<STR_LIT>)<EOL>"}
{"signature": "val translator =", "body": "ObjCExportTranslatorImpl(this, mapper, namer, problemCollector, objcGenerics)<EOL>"}
{"signature": "fun check(title: String, expected: String, method: Method) {", "body": "<EOL><INDENT>assertEquals(expected, method.parameterTypes.contentToString(), <STR_LIT>)<EOL><INDENT>assertEquals(expected, method.genericParameterTypes.contentToString(), <STR_LIT>)<EOL>}"}
{"signature": "fun testAnnotationTargets() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val headerId =", "body": "getHeaderId(getContainingFile(cursor))<EOL>"}
{"signature": "fun renderDefaultValue(analysisSession: KtAnalysisSession, symbol: KtValueParameterSymbol, printer: PrettyPrinter) {", "body": "<EOL><INDENT><INDENT>}"}
{"signature": "fun testSimple(fn: () -> Unit) {", "body": "<EOL><INDENT>useSuspend(fn)<EOL>}"}
{"signature": "fun visitDelegateFieldReference(delegateFieldReference: FirDelegateFieldReference) {", "body": "<EOL><INDENT><INDENT>visitElement(delegateFieldReference)<EOL><INDENT>}"}
{"signature": "val problemModuleIdWithVersion =", "body": "allModules.getValue(problemModuleId).moduleIdWithVersion<EOL>"}
{"signature": "if (box.value != DPoint(<NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val parcelizeRuntimeJars =", "body": "System.getProperty(<STR_LIT>)?.split(File.pathSeparator)?.map(::File)<EOL>"}
{"signature": "val refArrStatic =", "body": "arrayOfNulls<String?>(<NUM_LIT>)<EOL>"}
{"signature": "fun foo(p: Processor<in CharSequence>, s: String?) {", "body": "<EOL><INDENT>p.process(s)<EOL>}"}
{"signature": "val reversedIndices =", "body": "positions.reversed().filter { index -> regex.matchesAt(input, index) }.reversed()<EOL>"}
{"signature": "val PACKAGE_FQ_NAME_FOR_LOCAL =", "body": "FqName.topLevel(LOCAL_NAME)<EOL>"}
{"signature": "if (classifier !is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expressionTypingContext.trace.report(Errors.CALLABLE_REFERENCE_LHS_NOT_A_CLASS.on(ktExpression))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>LHSResult.Error<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(action: (Int) -> Unit) {", "body": "<EOL><INDENT>action(<NUM_LIT>)<EOL>}"}
{"signature": "val thisPtrArgType =", "body": "constructor.allParameters[<NUM_LIT>].type.toLLVMType(llvm)<EOL>"}
{"signature": "val parentBuilderInferenceCallSession =", "body": "findParentBuildInferenceSession()<EOL>"}
{"signature": "val readmeFile =", "body": "File(licenseReadmePath)<EOL>"}
{"signature": "if (e is Right) {", "body": "<EOL><INDENT><INDENT>return e.value.v<NUM_LIT><EOL><INDENT>}"}
{"signature": "fun exitEntry(name: Path) {", "body": "<EOL><INDENT><INDENT>require(name == path?.fileName)<EOL><INDENT><INDENT>path = path?.parent<EOL><INDENT>}"}
{"signature": "fun dependencies(configure: Action<KotlinDependencyHandler>) {", "body": "<EOL><INDENT><INDENT>HasKotlinDependencies(project, configurations).dependencies(configure)<EOL><INDENT>}"}
{"signature": "fun testRedeclaration(e: Example){", "body": "<EOL><INDENT><INDENT>val (<!REDECLARATION!>b<!>, <!NAME_SHADOWING, REDECLARATION!>b<!>) = e<EOL><INDENT>}"}
{"signature": "for (typeArgument in part.typeArgumentList.typeArguments) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkModifiersCompatibility(typeArgument, context, reporter)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun defineGlobalClassITable(irClass: IrClassSymbol, wasmGlobal: WasmGlobal) {", "body": "<EOL><INDENT><INDENT>wasmFragment.globalClassITables.define(irClass, wasmGlobal)<EOL><INDENT>}"}
{"signature": "val indexOfGlobalCatch =", "body": "blocks.indexOf(context.globalCatchBlock)<EOL>"}
{"signature": "val isModuleImport =", "body": "info.isImplicit == <NUM_LIT><EOL>"}
{"signature": "fun invalidateElement(element: KtElement) {", "body": "<EOL><INDENT><INDENT>val container = getContainerKtElement(element)<EOL><INDENT><INDENT>structureElements.remove(container)<EOL><INDENT>}"}
{"signature": "if (isSave || isLoad || isDescriptorGetter || isTypeParamsSerializersGetter) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(doCreateSerializerFunction(thisDescriptor, name))<EOL><INDENT><INDENT>}"}
{"signature": "val projectDir =", "body": "project.projectDir<EOL>"}
{"signature": "if (expression.symbol.owner.hasCCallAnnotation(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT>return transformCppConstructorCall(expression)<EOL><INDENT><INDENT>}"}
{"signature": "val KAPT_WORKER_DEPENDENCIES_CONFIGURATION_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val sizeParameter =", "body": "addValueParameter(<STR_LIT>, context.irBuiltIns.intType)<EOL>"}
{"signature": "for (c in this) {", "body": "<EOL><INDENT><INDENT>offset++<EOL><INDENT><INDENT>if (c == '\\n') lineOffsets.add(offset)<EOL><INDENT>}"}
{"signature": "while (!(a < <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val bounded =", "body": "IC(<NUM_LIT>)::f<EOL>"}
{"signature": "if (arguments.listPhases) {", "body": "<EOL><INDENT><INDENT><INDENT>it.list()<EOL><INDENT><INDENT>}"}
{"signature": "if (!token.startsWith('-')) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>buildOngoingTask()<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return token<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun multipleMixedRefinementsFunction() {", "body": "}"}
{"signature": "val methodsPositions =", "body": "psiClass.methods<EOL>"}
{"signature": "fun testAgainstFirWithAllowUnstableDependencies() {", "body": "<EOL><INDENT><INDENT>val library = compileLibrary(<STR_LIT>, additionalOptions = listOf(<STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>compileKotlin(<EOL><INDENT><INDENT><INDENT><STR_LIT>, tmpdir, listOf(library),<EOL><INDENT><INDENT><INDENT>additionalOptions = listOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val chunkWithSkippedHeader =", "body": "chunkStart + ChunkHeaderSize<EOL>"}
{"signature": "val otherNonDefault =", "body": "containerCtor.valueParameters.find { it.name.asString() != <STR_LIT> && !it.declaresDefaultValue() }<EOL>"}
{"signature": "var globalResult =", "body": "<STR_LIT><EOL>"}
{"signature": "if (capturedValue != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>localContext.capturedValueToParameter[capturedValue.owner] = it<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val genDefCounter =", "body": "AtomicInteger()<EOL>"}
{"signature": "fun visitTry(aTry: IrTry, data: VisitorState) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val delegationTranslator =", "body": "DelegationTranslator(classDeclaration, nonConstructorContext)<EOL>"}
{"signature": "val bar<NUM_LIT> =", "body": "<!EXPECTED_PROPERTY_INITIALIZER!><NUM_LIT><!><EOL>"}
{"signature": "if (enhanceTypeParameterTypesToDefNotNull) {", "body": "<EOL><INDENT><INDENT><INDENT>result[LanguageFeature.ProhibitUsingNullableTypeParameterAgainstNotNullAnnotated] = LanguageFeature.State.ENABLED<EOL><INDENT><INDENT>}"}
{"signature": "fun interpretEnumConstructorCall(constructorCall: IrEnumConstructorCall) {", "body": "<EOL><INDENT><INDENT>interpretConstructorCall(constructorCall)<EOL><INDENT>}"}
{"signature": "if (element is R) {", "body": "<EOL><INDENT><INDENT><INDENT>first.add(element)<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedVariantRequest =", "body": "ResolvedVariantRequest(<STR_LIT>, <STR_LIT>, dependencyInsightModuleName)<EOL>"}
{"signature": "val COROUTINES_METADATA_METHOD_NAME_JVM_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val isNativeSharedSourceSet =", "body": "sourceSet.isNativeSourceSet.getOrThrow()<EOL>"}
{"signature": "val totalTimeMs =", "body": "event.result.endTime - event.result.startTime<EOL>"}
{"signature": "val appliedPlugins =", "body": "<STR_LIT>.toRegex().findAll(output).map { it.groupValues[<NUM_LIT>] }.toSet()<EOL>"}
{"signature": "if (isString(x) && !isString(x)) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "for (c in constraints) {", "body": "<EOL><INDENT>  if (c.isInput() && c.isSatisfied())<EOL><INDENT><INDENT><INDENT><INDENT>sources.add(c)<EOL><INDENT>}"}
{"signature": "else if (next.previousNodes.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>result.add(next)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (stubCheckcast.desc == AsmTypes.OBJECT_TYPE.internalName) {", "body": "<EOL><INDENT><INDENT><INDENT>instructions.remove(stubCheckcast)<EOL><INDENT><INDENT>}"}
{"signature": "if (getter != null && receiverTypeReference != null) {", "body": "<EOL><INDENT><INDENT><INDENT>c.annotationDeserializer.loadAnnotations(receiverTypeReference)<EOL><INDENT><INDENT>}"}
{"signature": "val isIntersectionOverrideForbidden =", "body": "isStaticMembers || isIntersectionOverrideForbiddenByGenericClash<EOL>"}
{"signature": "val getClassArgument =", "body": "(annotation as? FirAnnotationCall)?.argument as? FirGetClassCall ?: return emptyList()<EOL>"}
{"signature": "fun updateFrom(from: IrField) {", "body": "<EOL><INDENT><INDENT>super.updateFrom(from)<EOL><EOL><INDENT><INDENT>type = from.type<EOL><INDENT><INDENT>isFinal = from.isFinal<EOL><INDENT><INDENT>isExternal = from.isExternal<EOL><INDENT><INDENT>isStatic = from.isStatic<EOL><INDENT><INDENT>metadata = from.metadata<EOL><INDENT>}"}
{"signature": "var improvements =", "body": "mapOf<String, ScoreChange>()<EOL>"}
{"signature": "val atomicHandlerProperty =", "body": "atomicfuPropertyToAtomicHandler[atomicProperty]<EOL>"}
{"signature": "val dceToolMainClassName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (hasIllegalModifier) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FirErrors.NON_PRIVATE_OR_PROTECTED_CONSTRUCTOR_IN_SEALED, context)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val readElementLabel =", "body": "Label()<EOL>"}
{"signature": "val parameterRef =", "body": "ReferenceTranslator.translateAsValueReference(this, context)<EOL>"}
{"signature": "val DEPRECATED_REPLACE_WITH_NAME =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "val isInterfaceDefaultImpl =", "body": "parentClass?.isInterface ?: false<EOL>"}
{"signature": "fun createTempDirectoryDefaultDir() {", "body": "<EOL><INDENT><INDENT>val dir<NUM_LIT> = createTempDirectory().cleanup()<EOL><INDENT><INDENT>val dir<NUM_LIT> = createTempDirectory(directory = null).cleanupRecursively()<EOL><INDENT><INDENT>val dir<NUM_LIT> = createTempDirectory(dir<NUM_LIT>)<EOL><EOL><INDENT><INDENT>assertEquals(dir<NUM_LIT>parent, dir<NUM_LIT>parent)<EOL><INDENT><INDENT>assertNotEquals(dir<NUM_LIT>parent, dir<NUM_LIT>parent)<EOL><INDENT>}"}
{"signature": "val additionalExports =", "body": "backendContext.externalPackageFragment[irFile.symbol]?.let { generateExport(it) } ?: emptyList()<EOL>"}
{"signature": "when (classSymbol.classId) {", "body": "<EOL><INDENT><INDENT><INDENT>in classIdsForMatchedClasses -> setOf(MATERIALIZE_NAME, SpecialNames.INIT)<EOL><INDENT><INDENT><INDENT>GENERATED_CLASS_ID -> setOf(SpecialNames.INIT)<EOL><INDENT><INDENT><INDENT>else -> emptySet()<EOL><INDENT><INDENT>}"}
{"signature": "val otherDir =", "body": "File(tempDir, <STR_LIT>).apply { mkdir() }<EOL>"}
{"signature": "fun append<NUM_LIT>(x: In<Nothing>) {", "body": "}<EOL>fun append<NUM_LIT>(x: In<Collection<*>>) {}"}
{"signature": "val freshSubstitutor =", "body": "callableCandidate.freshVariablesSubstitutor ?: return null<EOL>"}
{"signature": "val conventionError =", "body": "if (isConventionCall(call) && !descriptor.isOperator) InvokeConventionCallNoOperatorModifier else null<EOL>"}
{"signature": "val millis =", "body": "TimeUnit.NANOSECONDS.toMillis(totalTimeNanos)<EOL>"}
{"signature": "val podFramework =", "body": "binary is Framework && binary.name.startsWith(POD_FRAMEWORK_PREFIX)<EOL>"}
{"signature": "val cBridgeBuilder =", "body": "CFunctionBuilder()<EOL>"}
{"signature": "val OCTOTHORPE =", "body": "'#'<EOL>"}
{"signature": "fun test<NUM_LIT>(b: <!OVERLOAD_RESOLUTION_AMBIGUITY!>B<!>) {", "body": "<EOL><INDENT><!UNRESOLVED_REFERENCE!>B<!>()<EOL>}"}
{"signature": "if (returnTypeRef is FirImplicitTypeRef) {", "body": "<EOL><INDENT><INDENT><INDENT>storeVariableReturnType(this)<INDENT><INDENT><INDENT><INDENT><INDENT><INDENT> getter?.transformTypeWithPropertyType(returnTypeRef, forceUpdateForNonImplicitTypes = true)<EOL><INDENT><INDENT>}"}
{"signature": "fun baz<NUM_LIT>(x: (@MyDsl A).() -> Unit) {", "body": "}<EOL>fun baz<NUM_LIT>(x: (@MyDsl B).() -> Unit) {}"}
{"signature": "val infiniteSeq =", "body": "generateSequence(<NUM_LIT>) { it + <NUM_LIT> }<EOL>"}
{"signature": "val programType =", "body": "configuration.get(BinaryOptions.androidProgramType) ?: AndroidProgramType.Default<EOL>"}
{"signature": "var containsKotlinConstVals =", "body": "false<EOL>"}
{"signature": "when (baseDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirSimpleFunction -> isOverriddenFunction(overrideCandidate, baseDeclaration)<EOL><INDENT><INDENT><INDENT>is FirProperty -> isOverriddenProperty(overrideCandidate, baseDeclaration)<EOL><INDENT><INDENT><INDENT>else -> false<EOL><INDENT><INDENT>}"}
{"signature": "val spilledToVariableMapping =", "body": "arrayListOf<List<SpilledVariableAndField>>()<EOL>"}
{"signature": "if (end == null) {", "body": "<EOL><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val whileBuilder =", "body": "JsAstProtoBuf.While.newBuilder()<EOL>"}
{"signature": "val readOnlyToMutableClassId =", "body": "HashMap<ClassId, ClassId>()<EOL>"}
{"signature": "val establishedMaximum =", "body": "usedMemory.take(buildCount / <NUM_LIT>).maxOrNull()!!<EOL>"}
{"signature": "val nLow =", "body": "n.toInt()<EOL>"}
{"signature": "val TYPE_INFO_ITABLE_OFFSET =", "body": "TYPE_INFO_ITABLE_SIZE_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "val KOTLIN_NATIVE_HOME =", "body": "<STR_LIT><EOL>"}
{"signature": "val propertyDeclaration =", "body": "DescriptorToSourceUtils.descriptorToDeclaration(property) as KtProperty<EOL>"}
{"signature": "val reachableLabels =", "body": "HashSet(cases.map { it.label })<EOL>"}
{"signature": "val globalOccurrences =", "body": "ArrayList<OccurrenceInfo>()<EOL>"}
{"signature": "var currentCatchBlock =", "body": "globalCatchBlock<EOL>"}
{"signature": "for (i in <NUM_LIT>.N) {", "body": "<EOL><INDENT><INDENT>if (i%<NUM_LIT> == <NUM_LIT>) continue<EOL><INDENT><INDENT>sum += i<EOL><INDENT>}"}
{"signature": "val dummyBindingContext =", "body": "NoScopeRecordCliBindingTrace(project).bindingContext<EOL>"}
{"signature": "val p<NUM_LIT>IosMain =", "body": "createKtModule(<STR_LIT>, directRegularDependencies = listOf(p<NUM_LIT>CommonMain, p<NUM_LIT>NativeMain, p<NUM_LIT>IosMain))<EOL>"}
{"signature": "fun test(source: String) {", "body": "<EOL><INDENT><INDENT>if (source != <STR_LIT>) throw AssertionError(source)<EOL><INDENT>}"}
{"signature": "if (isInIdea && !nonInteractiveDecision.isPresent) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw CannotRequestConsentWithinIdeException(setupFile.consentDetailsLink)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (javaFile in javaFiles) {", "body": "<EOL><INDENT><INDENT><INDENT>renamePackagesInSingleFile(javaFile)<EOL><INDENT><INDENT>}"}
{"signature": "if (nonIncremental.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>it<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (firBasedSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>is FirCallableSymbol -> firProvider.getFirCallableContainerFile(firBasedSymbol)<EOL><INDENT><INDENT><INDENT>is FirClassLikeSymbol -> firProvider.getFirClassifierContainerFileIfAny(firBasedSymbol)<EOL><INDENT><INDENT><INDENT>else -> error(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "fun recordFunction(function: FunctionMetrics) {", "body": "}<EOL><INDENT>override fun recordClass(declaration: IrClass, marked: Boolean, stability: Stability) {}"}
{"signature": "val dstRoot =", "body": "createTempDirectory().cleanupRecursively()<EOL>"}
{"signature": "val isValid =", "body": "if (index == <NUM_LIT>) isJavaIdentifierStart(c) else isJavaIdentifierPart(c) || c == '.'<EOL>"}
{"signature": "if (propagateDeadness && kind == EdgeKind.DeadForward) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>to.isDead = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var prevFront =", "body": "IntArray(nodesCount)<EOL>"}
{"signature": "if (resolution != null) {", "body": "<EOL><INDENT><INDENT><INDENT>result.add(resolution)<EOL><INDENT><INDENT>}"}
{"signature": "if (lt != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return setOf(<EOL><INDENT><INDENT><INDENT><INDENT>if (eqToken) lteq(version) else lt(version)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val chunkStart =", "body": "mem - unsafe.getInt(mem - Int.SIZE_BYTES)<EOL>"}
{"signature": "for (companionObject in companionObjects) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>addIfNotNull(session.nestedClassifierScope(companionObject))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val resultDataFlowInfo =", "body": "resolvedExternalArgument?.dataFlowInfoAfterThisArgument ?: dataFlowInfoAfterArgumentsInParenthesis<EOL>"}
{"signature": "val typeInfoOrMeta =", "body": "intToPtr(typeInfoOrMetaRaw, kTypeInfoPtr)<EOL>"}
{"signature": "val gcInfo =", "body": "measurements.filterIsInstance<GarbageCollectionMeasurement>()<EOL>"}
{"signature": "val rangeTo<NUM_LIT> =", "body": "a..b<EOL>"}
{"signature": "fun visitCatch(aCatch: IrCatch, data: Visibles) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>super.visitCatch(aCatch, data.extend(emptySet(), emptySet()))<EOL><INDENT><INDENT>}"}
{"signature": "for (i in ULong.MIN_VALUE until ULong.MAX_VALUE step Long.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT>ulongList += i<EOL><INDENT>}"}
{"signature": "fun serializeFunction(<EOL><INDENT><INDENT>descriptor: FunctionDescriptor,<EOL><INDENT><INDENT>proto: ProtoBuf.Function.Builder,<EOL><INDENT><INDENT>versionRequirementTable: MutableVersionRequirementTable?,<EOL><INDENT><INDENT>childSerializer: DescriptorSerializer<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (old.hasVersionFull()) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.versionFull != new.versionFull) return false<EOL><INDENT><INDENT>}"}
{"signature": "fun assertDisabled() {", "body": "<EOL><INDENT>@OptIn(kotlin.experimental.ExperimentalNativeApi::class)<EOL><INDENT>assert(false)<EOL>}"}
{"signature": "val invokeLabel =", "body": "LabelNode()<EOL>"}
{"signature": "val leakingThroughFunctionReferences =", "body": "mutableListOf<DataFlowIR.FunctionSymbol>()<EOL>"}
{"signature": "if (enum.features.location == LOCAL) {", "body": "<EOL><INDENT><INDENT>throw IllegalArgumentException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val EMPTY_MAIN_FUN =", "body": "<STR_LIT><EOL>"}
{"signature": "val ARRAY_NEW_DEFAULT =", "body": "<STR_LIT><EOL>"}
{"signature": "val ONLY_INPUT_TYPES_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val devModeOverwritingStrategy =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>arguments.devModeOverwritingStrategy ?:<EOL>"}
{"signature": "package names, because<EOL>.", "body": ""}
{"signature": "val receiverFromExpected =", "body": "argumentAsFunctionExpression?.receiverType == null && expectedReceiver != null<EOL>"}
{"signature": "for (i in UInt.MAX_VALUE downTo UInt.MIN_VALUE step Int.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT>uintList += i<EOL><INDENT>}"}
{"signature": "val failValue =", "body": "x.compareAndSet(initial, Data(<NUM_LIT>))<EOL>"}
{"signature": "val SCRIPT_PLUGIN_K<NUM_LIT>_REGISTRAR_NAME =", "body": "<EOL><INDENT><INDENT><INDENT><STR_LIT><EOL>"}
{"signature": "val capturedOrType =", "body": "session.typeContext.captureFromArguments(type, CaptureStatus.FROM_EXPRESSION) ?: type<EOL>"}
{"signature": "if (old.getExtensionCount(JsProtoBuf.typeAnnotation) != new.getExtensionCount(JsProtoBuf.typeAnnotation)) {", "body": "<EOL><INDENT><INDENT><INDENT>return false<EOL><INDENT><INDENT>}"}
{"signature": "var currentLine =", "body": "<NUM_LIT><EOL>"}
{"signature": "var changes =", "body": "<NUM_LIT><EOL>"}
{"signature": "val attributesMap =", "body": "Collections.synchronizedMap(mutableMapOf<Attribute<*>, Any>())<EOL>"}
{"signature": "if (modalityModifier != null && descriptor.modality != Modality.FINAL) {", "body": "<EOL><INDENT><INDENT><INDENT>trace.report(Errors.VALUE_CLASS_NOT_FINAL.on(modalityModifier))<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val typeString =", "body": "(type as? TypeReference)?.asString(true) ?: type.toString()<EOL>"}
{"signature": "val sw =", "body": "BothSignatureWriter(BothSignatureWriter.Mode.TYPE)<EOL>"}
{"signature": "val archiveName =", "body": "listOfNotNull(jarTask.archiveBaseName.get(), jarTask.archiveAppendix.orNull).joinToString(<STR_LIT>)<EOL>"}
{"signature": "if (expectedIterator.hasPrevious()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>expectedIterator.previous()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>actualIterator.previous()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (inlineScopesGenerator != null && label != null && isRegeneratingAnonymousObject()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>incrementScopeNumbersOfVariables(node, label)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val localProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "else if (entry.isLink) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>hardLinks.put(outputFile.toPath(), targetDir.resolve(entry.linkName).toPath())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (isK<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.put(CommonConfigurationKeys.USE_FIR, true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "when (val lazyIrGenerator = stubGenerator) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> JsModuleDeserializer(moduleDescriptor, klib, strategyResolver, libraryAbiVersion, klib.libContainsErrorCode)<EOL><INDENT><INDENT><INDENT>else -> JsLazyIrModuleDeserializer(moduleDescriptor, libraryAbiVersion, builtIns, lazyIrGenerator)<EOL><INDENT><INDENT>}"}
{"signature": "var stringifiedResult =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!selection.contains(element.textRange) || element !is KDocName) {", "body": "<EOL><INDENT><INDENT><INDENT>element.acceptChildren(this)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val IGNORE_K<NUM_LIT>_DIRECTIVE =", "body": "\""}
{"signature": "val test_ini =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i === ni<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>ni === i<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>i !== ni<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>ni !== i<!><EOL>"}
{"signature": "for ((<!REDECLARATION!>x<!>, <!REDECLARATION!>x<!>) in C()) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val anotherModule =", "body": "doWork { <STR_LIT> }<EOL>"}
{"signature": "val mergedTable =", "body": "mutableMapOf<String, SummaryBenchmark>()<EOL>"}
{"signature": "val vr =", "body": "nextBits(remainder * <NUM_LIT>)<EOL>"}
{"signature": "fun bar(o: Any?) {", "body": "}"}
{"signature": "val receiverT =", "body": "if (genericStarProjection) <STR_LIT> else primaryTypeParameter<EOL>"}
{"signature": "var concat =", "body": "<STR_LIT><EOL>"}
{"signature": "var rsarr =", "body": "arrayOf(<STR_LIT>)<EOL>"}
{"signature": "val regularModules =", "body": "libraryList.regularDependencies + moduleInfoProvider.getRegularDependentSourceModules(module)<EOL>"}
{"signature": "fun intermediateFunctionWithActualization(<EOL><INDENT>commonActualization: MyCommonClassWithActualization,<EOL><INDENT>intermediateActualization: IntermediateClassWithActualization,<EOL><INDENT>common: MyCommonClass,<EOL><INDENT>intermediate: MyIntermediateClass,<EOL>) {", "body": "<EOL><EOL>}"}
{"signature": "fun subListAdd() {", "body": "<EOL><INDENT><INDENT>val a = ArrayList(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>val s = a.subList(<NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>), s)<EOL><EOL><INDENT><INDENT>assertTrue(s.add(<STR_LIT>))<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>), s)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>), a)<EOL><INDENT>}"}
{"signature": "fun writeParameter(sw: JvmSignatureWriter, kind: JvmMethodParameterKind, type: Type) {", "body": "<EOL><INDENT><INDENT><INDENT>sw.writeParameterType(kind)<EOL><INDENT><INDENT><INDENT>sw.writeAsmType(type)<EOL><INDENT><INDENT><INDENT>sw.writeParameterTypeEnd()<EOL><INDENT><INDENT>}"}
{"signature": "val irClassReference =", "body": "argument as? IrClassReference<EOL>"}
{"signature": "for (i in ULong.MAX_VALUE downTo <NUM_LIT>uL step Long.MAX_VALUE) {", "body": "<EOL><INDENT><INDENT>ulongList += i<EOL><INDENT>}"}
{"signature": "val deprecationAnnotations =", "body": "<EOL><INDENT><INDENT><INDENT>context.session.annotationPlatformSupport.deprecationAnnotationsWithOverridesPropagation<EOL>"}
{"signature": "val baos =", "body": "ByteArrayOutputStream()<EOL>"}
{"signature": "if (isVirtual) {", "body": "<EOL><INDENT><INDENT><INDENT>codegen.getVirtualFunctionTrampoline(target as IrSimpleFunction)<EOL><INDENT><INDENT>}"}
{"signature": "val pluginLoadResult =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>PluginCliParser.loadPluginsSafe(arguments.pluginClasspaths, arguments.pluginOptions, arguments.pluginConfigurations, configuration)<EOL>"}
{"signature": "fun cannotOverrideInvisibleMember(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overriding: CallableMemberDescriptor,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>invisibleOverridden: CallableMemberDescriptor<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>trace.report(CANNOT_OVERRIDE_INVISIBLE_MEMBER.on(member, declared, invisibleOverridden))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val nullabilityAnnotationOnWildcard =", "body": "extractNullabilityAnnotationOnBoundedWildcard(c, javaType)<EOL>"}
{"signature": "val test_dnn =", "body": "<!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>d === nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn === d<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>d !== nn<!> || <!IMPLICIT_BOXING_IN_IDENTITY_EQUALS!>nn !== d<!><EOL>"}
{"signature": "val runtimeElementsPublishedConfiguration =", "body": "project.configurations<EOL>"}
{"signature": "fun memberVararg(i: Int, vararg s: String) {", "body": "<EOL><INDENT><INDENT>assertEquals(expected, i)<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, s.size)<EOL><INDENT>}"}
{"signature": "if (x % <NUM_LIT> == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>even.add(x)<EOL><INDENT><INDENT>return<EOL><INDENT>}"}
{"signature": "val exponentBuilder =", "body": "StringBuilder()<EOL>"}
{"signature": "val shift =", "body": "if (code <= <NUM_LIT>x<NUM_LIT>F) distance % <NUM_LIT> else distance<EOL>"}
{"signature": "val calleeOn =", "body": "expression.explicitReceiver ?: return<EOL>"}
{"signature": "val additional =", "body": "<EOL><INDENT><INDENT>(parametersFromContainingFunctions + containingClassTypeConstructorParameters)<EOL>"}
{"signature": "if (shouldHaveGeneratedSerializer(session)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return unsubstitutedScope(c)<EOL><INDENT><INDENT><INDENT>.getSingleClassifier(SerialEntityNames.SERIALIZER_CLASS_NAME) as? FirClassSymbol<*><EOL><INDENT>}"}
{"signature": "fun useAfooWithImplicitReceiver() {", "body": "<EOL><INDENT>getACompanion().foo()<EOL>}"}
{"signature": "if (skipArguments) {", "body": "<EOL><INDENT><INDENT><INDENT>writeAsmType(asmType)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun buildStructSet(struct: WasmSymbol<WasmTypeDeclaration>, fieldId: WasmSymbol<Int>, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(<EOL><INDENT><INDENT><INDENT>WasmOp.STRUCT_SET,<EOL><INDENT><INDENT><INDENT>location,<EOL><INDENT><INDENT><INDENT>WasmImmediate.GcType(struct),<EOL><INDENT><INDENT><INDENT>WasmImmediate.StructFieldIdx(fieldId)<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val visibilityComments =", "body": "buildObjCVisibilityComment(<STR_LIT>)<EOL>"}
{"signature": "fun null<NUM_LIT>Int(x: Int?) {", "body": "<EOL><INDENT>js(<STR_LIT>)<EOL>}"}
{"signature": "val contextReceiversArguments =", "body": "mutableListOf<SimpleKotlinCallArgument>()<EOL>"}
{"signature": "val allValueParameters =", "body": "ArrayList<AbiValueParameter>()<EOL>"}
{"signature": "val messageMap =", "body": "mutableMapOf<String, Pair<ReportCategory, ReportSeverity>>()<EOL>"}
{"signature": "val _property =", "body": "B(<NUM_LIT>)<EOL>"}
{"signature": "val signMask =", "body": "<NUM_LIT>x<NUM_LIT>FFFFFFF + <NUM_LIT>"}
{"signature": "else if (kind === OwnerKind.ERASED_INLINE_CLASS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newName += JvmAbi.IMPL_SUFFIX_FOR_INLINE_CLASS_MEMBERS<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>u.toUShort()..<MinUS step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val correspondingCppClass =", "body": "primaryConstructor.owner.valueParameters.first().type.classOrNull?.owner!!<EOL>"}
{"signature": "if (function.hasBlockBody()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>typeReference.toFirOrUnitType()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.old.propertyCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getProperty(i), new.getProperty(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "val postponedFunctions =", "body": "mutableMapOf<JsName, JsFunction>()<EOL>"}
{"signature": "val actualDelegates =", "body": "DescriptorUtils.getAllOverriddenDescriptors(delegatingMember)<EOL>"}
{"signature": "else if (isImplicitRepeatableContainer(annotationClassId) && name.asString() == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>elements.filterIsInstance<AnnotationValue>().mapTo(result, AnnotationValue::value)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val anotherPodRepo =", "body": "\"https:"}
{"signature": "val mutListAny =", "body": "mutableListOf<Any>(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "fun throwIt(msg: String) {", "body": "<EOL><INDENT>throw Exception(msg)<EOL>}"}
{"signature": "when (classifierFqName) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>in BuiltinParcelableTypes.IMMUTABLE_LIST_FQNAMES -> IrExtensionFunctionOnReadCallingSerializer(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>delegated = listSerializer,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>converterExtensionFunction = symbols.kotlinIterableToPersistentListExtension<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>in BuiltinParcelableTypes.IMMUTABLE_SET_FQNAMES -> IrExtensionFunctionOnReadCallingSerializer(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>delegated = listSerializer,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>converterExtensionFunction = symbols.kotlinIterableToPersistentSetExtension<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else -> listSerializer<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val binaryAst =", "body": "output.toByteArray()<EOL>"}
{"signature": "fun setNullableValue(bundle: Any, key: String, value: AA?) {", "body": "<EOL><INDENT><INDENT>setValue(bundle, key, value!!)<EOL><INDENT>}"}
{"signature": "val patchedModule =", "body": "KlibTestUtil.deserializeKlibToCommonModule(patchedKlibFile)<EOL>"}
{"signature": "val isExportFileCachedInfo =", "body": "this is ExportFileCachedInfo<EOL>"}
{"signature": "val unsignedClassIdToArrayClassId =", "body": "hashMapOf<ClassId, ClassId>()<EOL>"}
{"signature": "val bas<NUM_LIT> =", "body": "bas<NUM_LIT>()<EOL>"}
{"signature": "val unitUsageInformation =", "body": "mutableMapOf<AbstractInsnNode, MutableSet<AbstractInsnNode>>()<EOL>"}
{"signature": "val supportedSignatureVersions =", "body": "readSupportedSignatureVersions()<EOL>"}
{"signature": "val singleCause =", "body": "failure.reports.singleOrNull { it.severity == ScriptDiagnostic.Severity.ERROR }<EOL>"}
{"signature": "val isUsedAsResultOfLambda =", "body": "expression.isUsedAsResultOfLambda(trace.bindingContext)<EOL>"}
{"signature": "val localRepoDir =", "body": "workingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "fun foo<NUM_LIT>(x: (@Ann<NUM_LIT> D).() -> Unit) {", "body": "}<EOL>fun foo<NUM_LIT>(x: (@Ann<NUM_LIT> D).() -> Unit) {}"}
{"signature": "when (it.t) {", "body": "<EOL><INDENT><INDENT><INDENT>EType.A -> <STR_LIT><EOL><INDENT><INDENT><INDENT>null -> <STR_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (settingsGradleKts.exists()) {", "body": "<EOL><INDENT><INDENT>settingsGradleKts<EOL><INDENT>}"}
{"signature": "if (destination.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT>destination.deleteRecursively()<EOL><INDENT><INDENT>}"}
{"signature": "if (predicate(next()) == predicateResultToRemove) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>remove()<EOL><INDENT><INDENT><INDENT><INDENT>result = true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun add(index: Int, element: E) {", "body": "<EOL><INDENT><INDENT>throw UnsupportedOperationException()<EOL><INDENT>}"}
{"signature": "val typeInSystem =", "body": "builder.typeInSystem(context.call, candidateDescriptor.returnType ?: return) ?: return<EOL>"}
{"signature": "val refGetter =", "body": "valueParameters[<NUM_LIT>]<EOL>"}
{"signature": "else if (arg.isDeprecatedArgfileArgument) {", "body": "<EOL><INDENT><INDENT><INDENT>errors.value.deprecatedArguments[EXPERIMENTAL_ARGFILE_ARGUMENT] = ARGFILE_ARGUMENT<EOL><EOL><INDENT><INDENT><INDENT>File(arg.deprecatedArgfilePath).expand(errors.value)<EOL><INDENT><INDENT>}"}
{"signature": "if (thisKind == PrimitiveType.INT && otherKind == PrimitiveType.CHAR) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>annotationsToAdd += <STR_LIT>OVERRIDE_DEPRECATION\\<STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val KOTLIN_NATIVE_USE_XCODE_MESSAGE_STYLE =", "body": "property(<STR_LIT>)<EOL>"}
{"signature": "val and<NUM_LIT> =", "body": "falseVal.<!EVALUATED(<STR_LIT>)!>and(falseVal)<!><EOL>"}
{"signature": "val compileTaskClass =", "body": "compileTask.javaClass<EOL>"}
{"signature": "val iteratorHasNext =", "body": "iteratorClass.getMethodWithoutArguments(<STR_LIT>)<EOL>"}
{"signature": "val copyCall =", "body": "copy.delegatedConstructor<EOL>"}
{"signature": "val jcInterfaceBounds =", "body": "mapJList(interfaceBounds) { parseBound(it) }<EOL>"}
{"signature": "val colon =", "body": "declaration.colon!!<EOL>"}
{"signature": "val isUnitReturn =", "body": "irFunction.returnType.isUnit()<EOL>"}
{"signature": "val specialLowerSigma =", "body": "'\\u<NUM_LIT>C<NUM_LIT>'<EOL>"}
{"signature": "fun main(editorTabs: JChildClass) {", "body": "<EOL><INDENT>editorTabs.getData<NUM_LIT>()<EOL><INDENT>editorTabs.setData<NUM_LIT>(<STR_LIT>)<EOL><INDENT>editorTabs.getData<NUM_LIT>()<EOL><INDENT>editorTabs.setData<NUM_LIT>(<STR_LIT>)<EOL><INDENT>editorTabs.getData<NUM_LIT>()<EOL><INDENT>editorTabs.setData<NUM_LIT>(<STR_LIT>)<EOL>}"}
{"signature": "val expectedSize =", "body": "size - iterator.nextIndex()<EOL>"}
{"signature": "if (classReport.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>nonEmptyClassReports.add(classReport)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val parentClassSymbol =", "body": "symbol.outerClassSymbol(context)<EOL>"}
{"signature": "fun publicLFun() {", "body": "}<EOL><INDENT>private fun privateLFun() {}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>(MinUI)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val callRef =", "body": "JsNameRef(Namer.CALL_FUNCTION, target)<EOL>"}
{"signature": "val POW_<NUM_LIT>_<NUM_LIT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (deprecation != null) {", "body": "<EOL><INDENT><INDENT>result = mutableListOf()<EOL><INDENT><INDENT>result.addAll(prevDiagnostics)<EOL><INDENT><INDENT>result.add(ConeDeprecated(source, symbol, deprecation))<EOL><INDENT>}"}
{"signature": "while (markBlack.size < defFiles.size) {", "body": "<EOL><INDENT><INDENT>visit(defFiles[index++])<EOL><INDENT>}"}
{"signature": "val ROLE =", "body": "JpsElementChildRoleBase.create<JpsKotlinCompilerSettings>(<STR_LIT>)<EOL>"}
{"signature": "val appGroupDir =", "body": "subProject(<STR_LIT>).projectPath.resolve(<STR_LIT>)<EOL>"}
{"signature": "val javaSourceDirectory =", "body": "testServices.sourceFileProvider.javaSourceDirectory<EOL>"}
{"signature": "val modulesHeaders =", "body": "getModulesHeaders(index, moduleTranslationUnit, modules.toSet(), topLevelHeaders, areModulesEnabled)<EOL>"}
{"signature": "fun setValue(v: Char) {", "body": "<EOL><INDENT><INDENT>value = v<EOL><INDENT>}"}
{"signature": "val scriptText =", "body": "FileUtil.loadFile(File(fileName))<EOL>"}
{"signature": "fun generate(moduleFragment: IrModuleFragment, pluginContext: IrPluginContext) {", "body": "<EOL><INDENT><INDENT>val androidSymbols = AndroidSymbols(pluginContext, moduleFragment)<EOL><INDENT><INDENT>ParcelizeIrTransformer(pluginContext, androidSymbols, parcelizeAnnotations).transform(moduleFragment)<EOL><INDENT>}"}
{"signature": "fun testMultipleProcessingPasses(gradleVersion: GradleVersion) {", "body": "<EOL><INDENT>}"}
{"signature": "fun invInOutFinal(x: Inv<In<Out<Final>>>) {", "body": "}<EOL>fun invOutProjectedOutFinal(x: Inv<out Out<Final>>) {}"}
{"signature": "val confJsWriters =", "body": "mutableListOf<(Appendable) -> Unit>()<EOL>"}
{"signature": "if (annotationProcessors.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT>pluginOptions += SubpluginOption(<STR_LIT>, annotationProcessors)<EOL><INDENT>}"}
{"signature": "var nextUnnamedLibraryIndex =", "body": "<NUM_LIT><EOL>"}
{"signature": "val quantifier =", "body": "quantifierFromLexerToken(quant)<EOL>"}
{"signature": "val topLevelPPrivateInferred =", "body": "topLevelP<EOL>"}
{"signature": "when (flows.size) {", "body": "<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> return MutableFlow()<EOL><INDENT><INDENT><INDENT><NUM_LIT> -> return flows.first().fork()<EOL><INDENT><INDENT>}"}
{"signature": "fun callMemberContractWithThis() {", "body": "<EOL><INDENT><INDENT>this.contract()<EOL><INDENT>}"}
{"signature": "fun generateSerializerGetter(methodDescriptor: FunctionDescriptor)<EOL><EOL><INDENT>protected open fun generateLazySerializerGetter(methodDescriptor: FunctionDescriptor) {", "body": "<EOL><INDENT><INDENT>generateSerializerGetter(methodDescriptor)<EOL><INDENT>}"}
{"signature": "val spread =", "body": "argument.getSpreadElement() ?: continue<EOL>"}
{"signature": "val intermediate =", "body": "create(<STR_LIT>)<EOL>"}
{"signature": "val referenceResources =", "body": "projectPath.resolve(<STR_LIT>).toFile()<EOL>"}
{"signature": "if (next.matches(index + charCount, testString, matchResult) >= <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return index<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val curl =", "body": "curl_easy_init()<EOL>"}
{"signature": "val ComposableTargetMarkerDescription =", "body": "<STR_LIT><EOL>"}
{"signature": "var storage =", "body": "<STR_LIT><EOL>"}
{"signature": "val classifierContainerFileMap =", "body": "mutableMapOf<ClassId, FirFile>()<EOL>"}
{"signature": "fun assumeOnlyStaticCacheEverywhere() {", "body": "<EOL><INDENT><INDENT>val cacheMode = testRunSettings.get<CacheMode>()<EOL><INDENT><INDENT>assumeTrue(cacheMode is WithStaticCache)<EOL><INDENT><INDENT>assumeTrue(cacheMode.useStaticCacheForUserLibraries)<EOL><INDENT>}"}
{"signature": "val NO_IS_PREFIX_CONFIG =", "body": "<STR_LIT><EOL>"}
{"signature": "val cloneableFqn =", "body": "StandardNames.FqNames.cloneable.toSafe()<EOL>"}
{"signature": "val castedObj =", "body": "multiCast(roundTrippedObj)<EOL>"}
{"signature": "val zz =", "body": "z<EOL>"}
{"signature": "val nanRange =", "body": "<NUM_LIT>F..Float.NaN<EOL>"}
{"signature": "val SYNTHETIC_LOOP_LABEL =", "body": "<STR_LIT><EOL>"}
{"signature": "if (returnSlot != null) {", "body": "<EOL><INDENT><INDENT><INDENT>updateReturnRef(value, returnSlot!!)<EOL><INDENT><INDENT>}"}
{"signature": "if (!apiFiles.files.containsAll(dependencyFiles)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>failed.add(it)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (target.withJavaEnabled) {", "body": "<EOL><INDENT><INDENT><INDENT>val project = target.project<EOL><INDENT><INDENT><INDENT>val javaSourceSets = project.variantImplementationFactory<JavaSourceSetsAccessor.JavaSourceSetsAccessorVariantFactory>()<EOL><INDENT><INDENT><INDENT><INDENT>.getInstance(project)<EOL><INDENT><INDENT><INDENT><INDENT>.sourceSets<EOL><INDENT><INDENT><INDENT>val javaSourceSet = javaSourceSets.getByName(compilationName)<EOL><INDENT><INDENT><INDENT>project.tasks.withType(JavaCompile::class.java).named(javaSourceSet.compileJavaTaskName)<EOL><INDENT><INDENT>}"}
{"signature": "var pressed =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ENABLE =", "body": "<STR_LIT><EOL>"}
{"signature": "val TOP_LEVEL_CLASS_DECLARATION_COUNT_PER_FILE =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (index in <NUM_LIT> until size) {", "body": "<EOL><INDENT><INDENT>accumulator = operation(index, accumulator, this[index])<EOL><INDENT><INDENT>result.add(accumulator)<EOL><INDENT>}"}
{"signature": "val currentValue =", "body": "container.getMetric(StringMetrics.MPP_PLATFORMS)!!.toStringRepresentation()<EOL>"}
{"signature": "if (!languageVersionSettings.supportsFeature(LanguageFeature.ContractSyntaxV<NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>reporter.reportOn(source, FirErrors.UNSUPPORTED_FEATURE, LanguageFeature.ContractSyntaxV<NUM_LIT> to languageVersionSettings, context)<EOL><INDENT>}"}
{"signature": "val hasMethod =", "body": "if (isExtensionField) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val packageInfo =", "body": "headerIdToPackage[location.headerId]<EOL>"}
{"signature": "var prevMem =", "body": "memoryMXBean.getHeapMemoryUsage().getUsed()<EOL>"}
{"signature": "val moduleFragment =", "body": "deserializedModuleFragments.last()<EOL>"}
{"signature": "when (configurables) {", "body": "<EOL><INDENT><INDENT>is AppleConfigurables -> arrayOf(<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>,<EOL><INDENT><INDENT>)<EOL><INDENT><INDENT>else -> emptyArray()<EOL><INDENT>}"}
{"signature": "for (overriddenMember in resultOfIntersectionWithNaturalName.overriddenMembers) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>overrideByBase[overriddenMember.member] = explicitlyDeclaredFunctionWithNaturalName<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val declared =", "body": "A::class.declaredFunctions.map { it.name }.sorted()<EOL>"}
{"signature": "val snapshotFiles =", "body": "ClasspathSnapshotFiles(params.newClasspathSnapshotFiles, params.shrunkClasspathSnapshot.parentFile)<EOL>"}
{"signature": "for (i in <NUM_LIT>. >n) {", "body": "}"}
{"signature": "val lowerBoundIsTrivial =", "body": "lowerBoundArguments.any { !it.isConsistent }<EOL>"}
{"signature": "val helpOption =", "body": "SingleNullableOption(helpDescriptor, CLIEntityWrapper())<EOL>"}
{"signature": "val definitionSet =", "body": "fileExports.file.declarations.toSet()<EOL>"}
{"signature": "fun transformDeclarationContent(firClass: FirClass, data: ResolutionMode) {", "body": "<EOL><INDENT><INDENT><INDENT>firClass.transformDeclarations(this, data)<EOL><INDENT><INDENT>}"}
{"signature": "val assignCallReference =", "body": "resolvedAssignCall.calleeReference as? FirNamedReferenceWithCandidate<EOL>"}
{"signature": "var oldFront =", "body": "mutableSetOf<T>(start)<EOL>"}
{"signature": "fun foo(block: suspend (BoxAny) -> Unit) {", "body": "<EOL><INDENT>block(BoxAny(<NUM_LIT>))<EOL><INDENT>block.startCoroutineUninterceptedOrReturn(BoxAny(<NUM_LIT>), EmptyContinuation())<EOL>}"}
{"signature": "val fullSectionsPathList =", "body": "path.subSequence(testArea.testDataPath.length + <NUM_LIT>, path.length).toString().split(<STR_LIT>)<EOL>"}
{"signature": "val cEnum =", "body": "packageName.child(cEnumName)<EOL>"}
{"signature": "fun test_<NUM_LIT>(mr: MyRecord<*>) {", "body": "<EOL><INDENT>takeAny(mr.x)<EOL><INDENT>takeAny(mr.x())<EOL>}"}
{"signature": "if (irClass.isNonCompanionObject) {", "body": "<EOL><INDENT><INDENT><INDENT>irClass.handle()<EOL><INDENT><INDENT>}"}
{"signature": "import module<NUM_LIT>*<EOL>.", "body": ""}
{"signature": "val exportObjCClassName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (f.hasModifier(OVERRIDE_KEYWORD)) {", "body": "<EOL><INDENT><INDENT><INDENT>val desc = f.resolve()<EOL><INDENT><INDENT><INDENT>return desc is CallableDescriptor &&<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>desc.visibility.effectiveVisibility(desc, false) == EffectiveVisibility.Internal<EOL><INDENT><INDENT>}"}
{"signature": "if (explicitLanguageVersionSettings != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>configuration.languageVersionSettings = explicitLanguageVersionSettings<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val constructorMap =", "body": "mutableMapOf<CallableId, List<FirConstructorSymbol>>()<EOL>"}
{"signature": "val failFile =", "body": "testFile.parentFile.resolve(<STR_LIT>).takeIf { it.exists() }<EOL>"}
{"signature": "if (!fileBoundaryReached and !whiteSpaceBefore.endsWith(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>parent.addBefore(KtPsiFactory(project).createWhiteSpace(<STR_LIT>), this)<EOL><INDENT>}"}
{"signature": "val allowedExtensionsForFiles =", "body": "listOf(<STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val isOptIn =", "body": "classId == OptInNames.OPT_IN_CLASS_ID<EOL>"}
{"signature": "if (irClass.annotations.hasAnnotation(InteropFqNames.exportObjCClass)) {", "body": "<EOL><INDENT><INDENT><INDENT>val irBuilder = context.createIrBuilder(currentFile.symbol).at(irClass)<EOL><INDENT><INDENT><INDENT>eagerTopLevelInitializers.add(irBuilder.getObjCClass(symbols, irClass.symbol))<EOL><INDENT><INDENT>}"}
{"signature": "val returnValIndex =", "body": "frameMap.enterTemp(returnType)<EOL>"}
{"signature": "val intrinsicConstConstructor =", "body": "intrinsicConstClass.primaryConstructor as IrConstructor<EOL>"}
{"signature": "if (line.startsWith(\"<INDENT><INDENT><INDENT>if (line == LL_FIR_DIVERGENCE_DIRECTIVE_COMMENT) return true<EOL><INDENT><INDENT>}{", "body": ""}
{"signature": "val myDescriptor =", "body": "declarationDescriptor<EOL>"}
{"signature": "fun rmrf(i: Int) {", "body": "<EOL><INDENT><INDENT>if (i > <NUM_LIT>) rmrf(i - <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (annotation.fqName in existingAnnotationFqNames) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportStrategy.repeatedAnnotation(annotation)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (typeArgumentType == null) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (capturedType == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assert(oldArgument is IrTypeProjection && oldArgument.variance == Variance.INVARIANT)<EOL><INDENT><INDENT><INDENT><INDENT>oldArgument<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val intIterator =", "body": "getPrimitiveIterator(PrimitiveType.INT)<EOL>"}
{"signature": "val BAD_NEIGHBOUR_FOR_SIMPLE_TEMPLATE_ENTRY_PATTERN =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "if (parentBody != null && parentBody.textRange.contains(expression.textRange)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>parentLoop<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (a is FirMemberDeclaration && b is FirMemberDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return FirMemberDeclarationComparator.TypeAndNameComparator.compare(a, b)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun test_<NUM_LIT>(c: InvokeComponent) {", "body": "<EOL><INDENT>val (<!PROPERTY_AS_OPERATOR!>x<!>) = FunctionComponent()<EOL><INDENT>val (<!PROPERTY_AS_OPERATOR!>y<!>) = c<EOL>}"}
{"signature": "val unmatched =", "body": "test.allowedMatcher.unmatchedExact(allowed)<EOL>"}
{"signature": "if (declaration is FirConstructor && declaration.isFromSealedClass) {", "body": "<EOL><INDENT><INDENT><INDENT>functionVisibility = EffectiveVisibility.PrivateInClass<EOL><INDENT><INDENT>}"}
{"signature": "if (state == State.DONE || !tryToComputeNext()) {", "body": "<EOL><INDENT><INDENT><INDENT>throw NoSuchElementException()<EOL><INDENT><INDENT>}"}
{"signature": "val libBKtCacheDir =", "body": "getLibraryFileCache(<STR_LIT>, <STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val propId =", "body": "desc.getElementAnnotations(<NUM_LIT>).filterIsInstance<MyId>().single().id<EOL>"}
{"signature": "fun copyInlineMetadata(from: JsNameRef, to: JsInvocation) {", "body": "<EOL><INDENT><INDENT>to.isInline = from.isInline<EOL><INDENT><INDENT>to.descriptor = from.descriptor<EOL><INDENT><INDENT>to.psiElement = from.psiElement<EOL><INDENT>}"}
{"signature": "val pio<NUM_LIT>_<NUM_LIT>t =", "body": "<NUM_LIT>e<NUM_LIT> <EOL>"}
{"signature": "val dependencySessions =", "body": "orderedDependencyModules.mapNotNull(::getOrCreateSessionForDependency)<EOL>"}
{"signature": "if (old.hasExtension(JavaClassProtoBuf.isStaticField)) {", "body": "<EOL><INDENT><INDENT><INDENT>if (old.getExtension(JavaClassProtoBuf.isStaticField) != new.getExtension(JavaClassProtoBuf.isStaticField)) return false<EOL><INDENT><INDENT>}"}
{"signature": "var hasErrors =", "body": "false<EOL>"}
{"signature": "fun check<NUM_LIT>() {", "body": "<EOL><INDENT>val result = if (true)<EOL><INDENT><INDENT>if (true) <NUM_LIT> else <NUM_LIT><EOL><INDENT>else <NUM_LIT><EOL><INDENT>if (result != <NUM_LIT>) throw AssertionError(<STR_LIT>)<EOL>}"}
{"signature": "if (_compilation == null) {", "body": "<EOL><INDENT><INDENT><INDENT>initializeCompilation(scriptCompilationConfiguration)<EOL><INDENT><INDENT>}"}
{"signature": "import <!UNRESOLVED_IMPORT!>incorrect<!>.", "body": "directory.Your<EOL>"}
{"signature": "val exportedSymbols =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val nonConst<NUM_LIT> =", "body": "<NUM_LIT><EOL>"}
{"signature": "val NAME_NODE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val rightConstructor =", "body": "right.constructor<EOL>"}
{"signature": "when (psiElement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtFunction -> psiElement.typeReference<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtProperty -> if (descriptor is PropertyGetterDescriptor) psiElement.typeReference else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtPropertyAccessor -> if (descriptor is PropertyGetterDescriptor) psiElement.property.typeReference else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is KtParameter -> if (descriptor is PropertyGetterDescriptor) psiElement.typeReference else null<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val groupDir =", "body": "<STR_LIT><EOL>"}
{"signature": "val moduleOverPolymorphicName =", "body": "<STR_LIT><EOL>"}
{"signature": "if (type.isUnsupportedInlineType(session) && !canSupportInlineClasses()) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(<EOL><INDENT><INDENT><INDENT><INDENT>typeRef.source ?: typeSource,<EOL><INDENT><INDENT><INDENT><INDENT>FirSerializationErrors.INLINE_CLASSES_NOT_SUPPORTED,<EOL><INDENT><INDENT><INDENT><INDENT>RuntimeVersions.MINIMAL_VERSION_FOR_INLINE_CLASSES.toString(),<EOL><INDENT><INDENT><INDENT><INDENT>session.versionReader.runtimeVersions?.implementationVersion.toString(),<EOL><INDENT><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "var isWarnEnabledFlag =", "body": "true<EOL>"}
{"signature": "val descriptorsPackageFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val projectComponentIdentifier =", "body": "resolution.dependency.id as? ProjectComponentIdentifier ?: return emptyList()<EOL>"}
{"signature": "if (descriptor !is CallableMemberDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return regularAndUnstable()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (newFunction.body is IrExpressionBody) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>+irReturn(newFunction.body!!.statements[<NUM_LIT>] as IrExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (KotlinVersion.DEFAULT < KotlinVersion.KOTLIN_<NUM_LIT>_<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>@Suppress(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>compilation.compilerOptions.options.languageVersion.set(KotlinVersion.KOTLIN_<NUM_LIT>_<NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val libraryJar =", "body": "MockLibraryUtilExt.compileJvmLibraryToJar(workDir.resolve(<STR_LIT>).absolutePath, libraryName)<EOL>"}
{"signature": "val projectId =", "body": "ProjectId.ProjectUUID(UUID.randomUUID())<EOL>"}
{"signature": "val hmppModuleStructure =", "body": "get(CommonConfigurationKeys.HMPP_MODULE_STRUCTURE)<EOL>"}
{"signature": "for (radix in (int + <NUM_LIT>).coerceAtLeast(<NUM_LIT>)..<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>testEquals(digit, int, radix)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val scopesForCompanionMap =", "body": "hashMapOf<FirClass, ScopePersistentList>()<EOL>"}
{"signature": "val originalParameters =", "body": "adaptedReferenceOriginalTarget.allParameters<EOL>"}
{"signature": "if (entry.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>outputFile.mkdirs()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (p is String) {", "body": "<EOL><INDENT><INDENT><INDENT>return bar(p)<EOL><INDENT><INDENT>}"}
{"signature": "val combinedScope =", "body": "GlobalSearchScope.union(providers.map { it.searchScope })<EOL>"}
{"signature": "package lab<NUM_LIT><EOL>.", "body": ""}
{"signature": "fun enterEntry(name: Path) {", "body": "<EOL><INDENT><INDENT>path = path?.resolve(name)<EOL><INDENT>}"}
{"signature": "val instructions =", "body": "mutableListOf<WasmInstr>()<EOL>"}
{"signature": "val iteration =", "body": "if (isLeftToRight) <STR_LIT> else <STR_LIT><EOL>"}
{"signature": "val chainedOrSingle =", "body": "ChainedMemberScope.createOrSingle(message, nonEmptyScopes)<EOL>"}
{"signature": "val newProtoMap =", "body": "protoData(srcFile, binaryMetadata)<EOL>"}
{"signature": "if (isFinishedWithFailures.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>return if (stage == this.stage) action()<EOL><INDENT><INDENT><INDENT>else Unit<EOL><INDENT><INDENT>}"}
{"signature": "val peeked =", "body": "queue.peek()<EOL>"}
{"signature": "if (!processingBeforeInlineDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processingBeforeInlineDeclaration = true<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.originalBeforeInline?.acceptChildrenVoid(this)<INDENT><INDENT><INDENT><INDENT><INDENT> processingBeforeInlineDeclaration = false<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val oldMapValue =", "body": "storage[key]<EOL>"}
{"signature": "if (owner.containingClassOrObject != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val testMapFolder =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testReceiverAnnotations() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val apiElementsPublishedConfiguration =", "body": "project.configurations<EOL>"}
{"signature": "val existingBindings =", "body": "fragment.nameBindings.associateTo(mutableMapOf()) { it.key to it.name }<EOL>"}
{"signature": "val negatedJumpInsn =", "body": "JumpInsnNode(negateConditionalJumpOpcode(insn.opcode), (next<NUM_LIT> as JumpInsnNode).label)<EOL>"}
{"signature": "if (left is JsArrayAccess) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>accept(left.arrayExpression)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>accept(left.indexExpression)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun testFormatAndParse(number: Long, digits: String, format: HexFormat) {", "body": "<EOL><INDENT><INDENT>testFormat(number, digits, format)<EOL><INDENT><INDENT>testParse(digits, number, format)<EOL><INDENT>}"}
{"signature": "val taskFailures =", "body": "testReportService.getAggregatedTaskFailures(path)<EOL>"}
{"signature": "val overridesAnything =", "body": "callableDescriptor.overriddenDescriptors.isNotEmpty()<EOL>"}
{"signature": "val scriptDef =", "body": "makeScriptDefinition(templateClasspath, templateClassName)<EOL>"}
{"signature": "val withOtherElements =", "body": "listOf(<NUM_LIT>, <NUM_LIT>, null)<EOL>"}
{"signature": "val manglers =", "body": "_manglers.toList()<EOL>"}
{"signature": "if (!isMutable) {", "body": "<EOL><INDENT><INDENT><INDENT>report(INAPPLICABLE_TARGET_PROPERTY_IMMUTABLE.on(annotation, annotation.useSiteDescription()))<EOL><INDENT><INDENT>}"}
{"signature": "for (d in values) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(f<NUM_LIT>d(NaN, d, POSITIVE_INFINITY).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(f<NUM_LIT>d(d, NaN, POSITIVE_INFINITY).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(f<NUM_LIT>d(d, POSITIVE_INFINITY, NaN).isNaN(), <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val placedInterfaceAdapters =", "body": "mutableMapOf<String, ConstPointer>()<EOL>"}
{"signature": "val composableSymbol =", "body": "context.referenceClass(ComposeClassIds.Composable)!!<EOL>"}
{"signature": "val inValue =", "body": "conditionValue?.let { <STR_LIT> + it } ?: <STR_LIT><EOL>"}
{"signature": "val headerReader =", "body": "ReadKotlinClassHeaderAnnotationVisitor()<EOL>"}
{"signature": "val extensionService =", "body": "session.extensionService<EOL>"}
{"signature": "package qq<EOL>.", "body": ""}
{"signature": "val newPropertySymbol =", "body": "FirPropertySymbol(property.symbol.callableId)<EOL>"}
{"signature": "val primitiveArraysToPrimitiveTypes =", "body": "<EOL><INDENT><INDENT>PrimitiveType.entries.associate { builtIns.getPrimitiveArrayClassDescriptor(it).toIrSymbol() to it }<EOL>"}
{"signature": "val _expressions =", "body": "mutableListOf<IrExpression>()<EOL>"}
{"signature": "package foo;\\n\\n\" +<EOL>.", "body": ""}
{"signature": "fun testMemberAssignment(d: dynamic) {", "body": "<EOL><INDENT>d.m = <NUM_LIT><EOL>}"}
{"signature": "val targetSession =", "body": "mainFirFile.llFirSession<EOL>"}
{"signature": "val functionParent =", "body": "descriptor.original.containingDeclaration<EOL>"}
{"signature": "fun testWriteRead(files: Iterable<File>) {", "body": "<EOL><INDENT><INDENT>val index = KotlinMetadataLibrariesIndexFile(temporaryFolder.newFile())<EOL><INDENT><INDENT>index.write(files)<EOL><INDENT><INDENT>assertEquals(files.toList(), index.read())<EOL><INDENT>}"}
{"signature": "fun pairHashSet() {", "body": "<EOL><INDENT><INDENT>val s = hashSetOf(Pair(<NUM_LIT>, <STR_LIT>), Pair(<NUM_LIT>, <STR_LIT>), Pair(<NUM_LIT>, <STR_LIT>))<EOL><INDENT><INDENT>assertEquals(<NUM_LIT>, s.size)<EOL><INDENT><INDENT>assertTrue(s.contains(p))<EOL><INDENT>}"}
{"signature": "val patchedPath =", "body": "patchDesignationPathIfNeeded(target, fallbackPath)<EOL>"}
{"signature": "val thisBuildNumber =", "body": "this.buildNumber<EOL>"}
{"signature": "val HIDES_MEMBERS_NAME_LIST =", "body": "setOf(Name.identifier(<STR_LIT>), Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "val bindingContextForUseSite =", "body": "analysisContext.analyze(useSiteDeclaration)<EOL>"}
{"signature": "val fullPath =", "body": "relativeFinallyPath + successor<EOL>"}
{"signature": "fun defFile(file: Any) {", "body": "<EOL><INDENT><INDENT>defFile = project.file(file)<EOL><INDENT>}"}
{"signature": "while (a == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><STR_LIT><EOL><INDENT>}"}
{"signature": "val zInt =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ASSIGNMENT_NAMES =", "body": "ASSIGNMENTS.map { (k, v) -> v to k }.toMap()<EOL>"}
{"signature": "if (symbol.owner.name.asString() in ATOMICFU_INLINE_FUNCTIONS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val lambdaLoop = (getValueArgument(<NUM_LIT>) as IrFunctionExpression).function<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>lambdaLoop.body?.transform(this@AtomicTransformer, data)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val ktTestModuleStructure =", "body": "configurator.createModules(moduleStructure, testServices, project)<EOL>"}
{"signature": "var ctr =", "body": "<NUM_LIT><EOL>"}
{"signature": "val conditionEnterNode =", "body": "loopConditionEnterNodes.getValue(loop).also { addNewSimpleNode(it) }<EOL>"}
{"signature": "val kotlinDescriptor =", "body": "javaToKotlin.mapJavaToKotlin(fqName, c.module.builtIns) ?: return null<EOL>"}
{"signature": "val newPackageName =", "body": "oldToNewPackageNameMapping[subPackageName]<EOL>"}
{"signature": "val operationMap =", "body": "mutableListOf<Operation>()<EOL>"}
{"signature": "val commonJsBody =", "body": "JsBlock(wrapCommonJs(factoryName.makeRef(), importedModules, program))<EOL>"}
{"signature": "val fakeCallCalleeReference =", "body": "fakeCall.calleeReference<EOL>"}
{"signature": "val locations =", "body": "defectsByInfo[info]!!<EOL>"}
{"signature": "if (delegateMethod != null) {", "body": "<EOL><INDENT><INDENT><INDENT>signature.delegateMethod = delegateMethod<EOL><INDENT><INDENT>}"}
{"signature": "fun testEmptyGroups() {", "body": "<EOL><INDENT><INDENT>var regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><EOL><INDENT><INDENT>regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><EOL><INDENT><INDENT>regex = Regex(<STR_LIT>)<EOL><INDENT><INDENT>assertTrue(regex.matches(<STR_LIT>))<EOL><INDENT>}"}
{"signature": "var jsImports =", "body": "emptyMap<String, JsStatement>()"}
{"signature": "val REFLECT_IR =", "body": "FlavorConfig(TargetBackend.ANDROID_IR,<STR_LIT>, <NUM_LIT>)<EOL>"}
{"signature": "val actualReceiverTypeAlias =", "body": "<EOL><INDENT><INDENT><INDENT>classDescriptor.module.findClassifierAcrossModuleDependencies(potentialActualAliasId) as? TypeAliasDescriptor ?: return false<EOL>"}
{"signature": "val allHosts =", "body": "enabledByHost.keys<EOL>"}
{"signature": "val leftParamType =", "body": "it.owner.valueParameters[<NUM_LIT>].type<EOL>"}
{"signature": "if (irClass.isStaticSerializable) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>getStaticSerialDescriptorExpr()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val argumentElement =", "body": "mappedArguments[descriptorForUnsubstitutedArgument]<EOL>"}
{"signature": "val importPattern =", "body": "Pattern.compile(<STR_LIT>)<EOL>"}
{"signature": "val rgbas =", "body": "RgbaArray(IntArray(<NUM_LIT>))<EOL>"}
{"signature": "val enumConstructorCall =", "body": "enumInitializer as? IrEnumConstructorCall<EOL>"}
{"signature": "fun visitDiagnosticHolder(diagnosticHolder: FirDiagnosticHolder, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDiagnosticHolder(diagnosticHolder)<EOL><INDENT>}"}
{"signature": "val traversedParent =", "body": "element.parents.firstOrNull { it in psiSetViaFir }<EOL>"}
{"signature": "fun testSuspendConversionInVarargElementsAll(<EOL><INDENT>f<NUM_LIT>: () -> Unit,<EOL><INDENT>f<NUM_LIT>: () -> Unit,<EOL><INDENT>f<NUM_LIT>: () -> Unit<EOL>) {", "body": "<EOL><INDENT>useSuspendVararg(f<NUM_LIT>, f<NUM_LIT>, f<NUM_LIT>)<EOL>}"}
{"signature": "fun collectPackageFragments(fqName: FqName, packageFragments: MutableCollection<PackageFragmentDescriptor>) {", "body": "<EOL><INDENT><INDENT><INDENT>packageFragments.add(createDummyPackageFragment(fqName))<EOL><INDENT><INDENT>}"}
{"signature": "for (annotation in typeAlias.nonSourceAnnotations(session)) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.addAnnotation(annotationSerializer.serializeAnnotation(annotation))<EOL><INDENT><INDENT>}"}
{"signature": "val typeIterableOfMemberTemplates =", "body": "Iterable::class.createType(arguments = listOf(KTypeProjection.invariant(typeMemberTemplate)))<EOL>"}
{"signature": "val OBJ =", "body": "Any()<EOL>"}
{"signature": "when (state) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>is State.TestSuiteStarted,<EOL><INDENT><INDENT><INDENT><INDENT>is State.TestIgnored,<EOL><INDENT><INDENT><INDENT><INDENT>is State.TestFinished -> State.TestStarted(state.testSuite, message.simpleTestName)<EOL><INDENT><INDENT><INDENT><INDENT>else -> unexpectedMessage()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isSynthesizedInitBlock) {", "body": "<EOL><INDENT><INDENT><INDENT>expression.markLineNumber(startOffset = false)<EOL><INDENT><INDENT><INDENT>mv.nop()<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration.isLocalMember && context.containingDeclarations.lastOrNull() !is FirScript) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(declaration.source, FirErrors.NOT_YET_SUPPORTED_IN_INLINE, <STR_LIT>, context)<EOL><INDENT><INDENT><INDENT>false<EOL><INDENT><INDENT>}"}
{"signature": "val allJs =", "body": "sourceSets.create(<STR_LIT>)<EOL>"}
{"signature": "val complextUInts =", "body": "uint(<NUM_LIT>u, *uints, <NUM_LIT>u, *uints, <NUM_LIT>u)<EOL>"}
{"signature": "val callableId =", "body": "CallableId(c.packageFqName, relativeClassName, relativeClassName.shortName())<EOL>"}
{"signature": "val delegatedFunction =", "body": "functionSymbol.fir<EOL>"}
{"signature": "if (current is TypeElement) {", "body": "<EOL><INDENT><INDENT>return current.qualifiedName.toString()<EOL><INDENT>}"}
{"signature": "val getValue =", "body": "backingField?.initializer?.expression as? IrGetValue<EOL>"}
{"signature": "fun innerMember() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>field++<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val called =", "body": "AtomicInt(<NUM_LIT>)<EOL>"}
{"signature": "if (type.isArrayType) {", "body": "<EOL><INDENT><INDENT>return serializationProvider.getClassFromInternalSerializationPackage(SpecialBuiltins.Names.referenceArraySerializer)<EOL><INDENT>}"}
{"signature": "when (val lshCallArgument = lhsResult.lshCallArgument) {", "body": "<EOL><INDENT><INDENT><INDENT>is SubKotlinCallArgument -> lshCallArgument.callResult<EOL><INDENT><INDENT><INDENT>is ExpressionKotlinCallArgument -> ResolvedExpressionAtom(lshCallArgument)<EOL><INDENT><INDENT><INDENT>else -> unexpectedArgument(lshCallArgument)<EOL><INDENT><INDENT>}"}
{"signature": "fun buildConstF<NUM_LIT>(value: Float, location: SourceLocation) {", "body": "<EOL><INDENT><INDENT>buildInstr(WasmOp.F<NUM_LIT>_CONST, location, WasmImmediate.ConstF<NUM_LIT>(value.toRawBits().toUInt()))<EOL><INDENT>}"}
{"signature": "for (annotationClassId in mapping.moduleData.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>appendLine(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var elemStartAddr =", "body": "startAddress<EOL>"}
{"signature": "if (src.startsWith(project.projectDir)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>JsonPrimitive(src.relativeTo(project.projectDir).path)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun simple() {", "body": "<EOL><INDENT>}"}
{"signature": "val TYPE_INFO_TYPE_SIMPLE_NAME_ID_OFFSET =", "body": "TYPE_INFO_TYPE_SIMPLE_NAME_LENGTH_OFFSET + TYPE_INFO_ELEMENT_SIZE<EOL>"}
{"signature": "for (i in <NUM_LIT>uL until <NUM_LIT>uL step <NUM_LIT>L) {", "body": "<EOL><INDENT><INDENT>ulongList += i<EOL><INDENT>}"}
{"signature": "for ((declaration, constructorDescriptor) in bodiesResolveContext.secondaryConstructors.entries) {", "body": "<EOL><INDENT><INDENT><INDENT>checkConstructorDeclaration(constructorDescriptor, declaration)<EOL><INDENT><INDENT><INDENT>exposedChecker.checkFunction(declaration, constructorDescriptor)<EOL><INDENT><INDENT>}"}
{"signature": "val allFieldsInFilePure =", "body": "allFieldsInFilePure(expressions)<EOL>"}
{"signature": "val KOTLIN_COMPILER_CLASSPATH_PROPERTY =", "body": "<STR_LIT><EOL>"}
{"signature": "val defaultConstructorMarker =", "body": "<EOL><INDENT><INDENT>getIrClass(FqName(<STR_LIT>))<EOL>"}
{"signature": "fun createPredefinedFile(fileName: String, version: String) {", "body": "<EOL><INDENT><INDENT>val file = module.sourcesDirectory.resolve(fileName)<EOL><INDENT><INDENT>val chosenRevision = module.sourcesDirectory.resolve(<STR_LIT>)<EOL><INDENT><INDENT>Files.copy(chosenRevision, file)<EOL><INDENT><INDENT>addToModifiedFiles(file)<EOL><INDENT>}"}
{"signature": "val VERIFICATION_TASK_GROUP =", "body": "LifecycleBasePlugin.VERIFICATION_GROUP<EOL>"}
{"signature": "package user<EOL>.", "body": ""}
{"signature": "val lookbehindRegex =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "val argumentList =", "body": "typeProjection.parent as? KtTypeArgumentList<EOL>"}
{"signature": "package star<EOL>.", "body": ""}
{"signature": "for (i in <NUM_LIT>until(warmupCount)) {", "body": "<EOL><INDENT><INDENT><INDENT>execBenchmarkOnce(benchmark, <NUM_LIT>, <NUM_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val systemWithoutWeakConstraints =", "body": "constraintSystem.filterConstraintsOut(TYPE_BOUND_POSITION)<EOL>"}
{"signature": "val structs =", "body": "main.index.structs<EOL>"}
{"signature": "if (containingClass.isEnum && this is KtFunctionSymbol && name == StandardNames.ENUM_VALUE_OF && isStatic) {", "body": "<EOL><INDENT><INDENT>builder.addReference(java.lang.IllegalArgumentException::class.qualifiedName)<EOL><INDENT><INDENT>builder.addReference(java.lang.NullPointerException::class.qualifiedName)<EOL><INDENT>}"}
{"signature": "if (expectedSingleCandidate != null) {", "body": "<EOL><INDENT><INDENT><INDENT>checkOptInAnnotation(declaration, expectedSingleCandidate, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "if (resolveFragmentOfCall) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>KtSimpleVariableAccessCall(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>variablePartiallyAppliedSymbol,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>fir.unwrapLValue()?.toTypeArgumentsMapping(variablePartiallyAppliedSymbol) ?: emptyMap(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>KtSimpleVariableAccess.Read<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val NUMBER_TYPES =", "body": "setOf(CHAR, BYTE, SHORT, INT, FLOAT, LONG, DOUBLE)<EOL>"}
{"signature": "val baseKind =", "body": "extractor.getFunctionalClassKind(classId.packageFqName, classId.shortClassName.asString()) ?: return null<EOL>"}
{"signature": "val oldTail =", "body": "tailIndex<EOL>"}
{"signature": "val generatedInlineMethods =", "body": "mutableMapOf<IrFunction, SMAPAndMethodNode>()<EOL>"}
{"signature": "val writeBits =", "body": "PropertyAccessor.Setter.ExternalSetter(listOf(AnnotationStub.CStruct.BitField(field.offset, field.size)))<EOL>"}
{"signature": "val pathManager =", "body": "PathManager(rootFolder, tmpFolder)<EOL>"}
{"signature": "val annotationVisitor =", "body": "<EOL><INDENT><INDENT><INDENT>if (!isTypeAnnotation) visitAnnotation(asmTypeDescriptor, retentionPolicy == RetentionPolicy.RUNTIME) else<EOL>"}
{"signature": "val rawOffsetFieldOffset =", "body": "unsafe.objectFieldOffset(this::class.java.getDeclaredField(<STR_LIT>))<EOL>"}
{"signature": "val treeSize =", "body": "if (onlyHeadTypeConstructor) <NUM_LIT> else indexedThisType.size<EOL>"}
{"signature": "val filteredVariants =", "body": "variants.filter { it !is SyntheticJavaPropertyDescriptor || !it.suppressedByNotPropertyList(notProperties) }<EOL>"}
{"signature": "val useSerializer =", "body": "stackValueSerializerInstanceFromSerializer(expressionCodegen, codegen, sti, this@SerializerCodegenImpl)<EOL>"}
{"signature": "val INLINE_FUN_THIS_<NUM_LIT>_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testBoxed<NUM_LIT>Boxed() {", "body": "<EOL><INDENT>acceptBoxed(returnBoxed())<EOL>}"}
{"signature": "val isLoad =", "body": "name == SerialEntityNames.LOAD_NAME &&<EOL>"}
{"signature": "val updatedClass =", "body": "calculateUpdatedClass(functionClass) ?: return<EOL>"}
{"signature": "val enumConstructorOldToNewValueParameters =", "body": "DefaultDelegateFactory.newDeclarationToDeclarationMapping<IrValueDeclaration, IrValueParameter>()<EOL>"}
{"signature": "val executedAction<NUM_LIT> =", "body": "AtomicBoolean(false)<EOL>"}
{"signature": "while (x!! == y) {", "body": "<EOL><INDENT><INDENT>checkSubtype<Int>(x)<EOL><INDENT><INDENT>break<EOL><INDENT>}"}
{"signature": "val statementFlows =", "body": "mutableListOf<PersistentFlow>()<EOL>"}
{"signature": "if (x is Bar<*>) {", "body": "<EOL><INDENT><INDENT>x::test<EOL><INDENT>}"}
{"signature": "val extendedPropertyLikeClbl =", "body": "ExtendedInvokableObject<EOL>"}
{"signature": "fun writeOpen() {", "body": "builder.append('[') }"}
{"signature": "val moduleDirectives =", "body": "moduleDirectivesBuilder.build() + testServices.defaultDirectives + globalDirectives<EOL>"}
{"signature": "if (kind === ValueKind.DEFAULT_MASK || kind === ValueKind.METHOD_HANDLE_IN_DEFAULT) {", "body": "<EOL><INDENT><INDENT><INDENT>return processDefaultMaskOrMethodHandler(stackValue, kind)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration == context.fieldInitFunction) {", "body": "<EOL><INDENT><INDENT><INDENT>declaration.removeUnusedObjectsInitializers()<EOL><INDENT><INDENT>}"}
{"signature": "val valuesInjectFnc =", "body": "HashMap<KClass<out Any>, Any>()<EOL>"}
{"signature": "val isVoid =", "body": "isReturnType && isUnit<EOL>"}
{"signature": "val IMPORTED_SCRIPT_PARAM_NAME_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "val outlinedJsCodeFunctions =", "body": "WeakHashMap<IrFunctionSymbol, JsFunction>()<EOL>"}
{"signature": "val groupedOptions =", "body": "options<EOL>"}
{"signature": "package classes<EOL>.", "body": ""}
{"signature": "fun Bar(child: @Composable (() -> Unit)?) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>child?.invoke()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val TEST_BLOCK_MARKER =", "body": "<STR_LIT><EOL>"}
{"signature": "val CONTEXT_RECEIVER_PREFIX =", "body": "'!'<EOL>"}
{"signature": "val jdkRoots =", "body": "getDefaultJdkModuleRoots(javaModuleFinder, javaModuleGraph)<EOL>"}
{"signature": "val classesDirs =", "body": "compilation.output.classesDirs<EOL>"}
{"signature": "if (!config.compilerExecutionSettings.useDaemonFallbackStrategy) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>throw RuntimeException(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>\"<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>|Failed to compile with Kotlin daemon.<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>|Fallback strategy (compiling without Kotlin daemon) is turned off.<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>|$recommendation<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>\".trimMargin(),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>e<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun contract(block: () -> Unit) {", "body": "<EOL><INDENT>block()<EOL>}"}
{"signature": "val oldCodeContext =", "body": "currentCodeContext<EOL>"}
{"signature": "val freeAsmParameters =", "body": "asmMethod.argumentTypes.let { it.take(captureStart) + it.drop(captureEnd) }<EOL>"}
{"signature": "if (dependency !in visited) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>stack += dependency<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val da<NUM_LIT> =", "body": "da<NUM_LIT>test()<EOL>"}
{"signature": "val allowedSuperclass =", "body": "filterSuperclass(superName)<EOL>"}
{"signature": "val registeredPluginAnnotations =", "body": "session.registeredPluginAnnotations<EOL>"}
{"signature": "fun minusCollection() {", "body": "<EOL><INDENT><INDENT>val result = data - listOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>assertEquals(listOf(<STR_LIT>), result)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until size(collection)) {", "body": "<EOL><INDENT><INDENT>if (i > <NUM_LIT>) res += <STR_LIT><EOL><INDENT><INDENT>res += collection.get(i).toString()<EOL><INDENT>}"}
{"signature": "val thirtyTwo =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (this !is Fir<NUM_LIT>IrLazyClass) {", "body": "<EOL><INDENT><INDENT><INDENT>valueClassRepresentation = computeValueClassRepresentation(klass)<EOL><INDENT><INDENT>}"}
{"signature": "val interopCstr =", "body": "findTopLevelPropertyGetter(InteropFqNames.packageName, Name.identifier(InteropFqNames.cstrPropertyName), string)<EOL>"}
{"signature": "val HEADER_FILTER_ADDITIONAL_SEARCH_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "else if (s == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>res = <STR_LIT><EOL><INDENT>}"}
{"signature": "val errorDetails =", "body": "err?.let { <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "if (direction == ResolveDirection.TO_SUBTYPE || direction == ResolveDirection.UNKNOWN) {", "body": "<EOL><INDENT><INDENT><INDENT>c.resultType(preparedSubType, preparedSuperType, variableWithConstraints)<EOL><INDENT><INDENT>}"}
{"signature": "val superIndex =", "body": "if (isClassOrTypeParameter) <NUM_LIT> else superInterfaceIndex++<EOL>"}
{"signature": "val specialPatternChars =", "body": "patternCharsToEscape + pathSeparatorChars<EOL>"}
{"signature": "fun afterFunction(<EOL><INDENT><INDENT>descriptor: FunctionDescriptor,<EOL><INDENT><INDENT>proto: ProtoBuf.Function.Builder,<EOL><INDENT><INDENT>versionRequirementTable: MutableVersionRequirementTable?,<EOL><INDENT><INDENT>childSerializer: DescriptorSerializer,<EOL><INDENT><INDENT>extension: SerializerExtension<EOL><INDENT>) {", "body": "<EOL><INDENT>}"}
{"signature": "if (actualCallee?.body == null) {", "body": "<EOL><INDENT><INDENT><INDENT>return expression<EOL><INDENT><INDENT>}"}
{"signature": "for(i in <NUM_LIT>.getExtensionCount(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>hashCode = <NUM_LIT> * hashCode + getExtension(KlibMetadataProtoBuf.functionExtensionReceiverAnnotation, i).hashCode(stringIndexes, fqNameIndexes, typeById)<EOL><INDENT>}"}
{"signature": "val JFPredicate =", "body": "javaFunction(<STR_LIT>)<EOL>"}
{"signature": "val loopExitState =", "body": "SuspendState(unit)<EOL>"}
{"signature": "fun setProjectInstance(project: Project) {", "body": "<EOL><INDENT><INDENT>super.setProjectInstance(project)<EOL><INDENT><INDENT>javaFacade = KotlinJavaPsiFacade.getInstance(project)<EOL><INDENT>}"}
{"signature": "package optimized<EOL>.", "body": ""}
{"signature": "val psiSetDirect =", "body": "mutableSetOf<KtElement>()<EOL>"}
{"signature": "val SIMPLE_BINARY_OPERATION_NAMES =", "body": "setOf(TIMES, PLUS, MINUS, DIV, MOD, REM)<EOL>"}
{"signature": "if (proto.beforeCommentsCount != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>commentsBeforeNode = proto.beforeCommentsList.map(::deserializeComment)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val getSymbol =", "body": "referenceFunction(referenceArrayClass(arrayField.type as IrSimpleType), GET)<EOL>"}
{"signature": "fun setSpecialJavaProperty(f: Boolean) {", "body": "<EOL><INDENT><INDENT>mask = mask or IdSignature.Flags.IS_JAVA_FOR_KOTLIN_OVERRIDE_PROPERTY.encode(f)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> downTo <NUM_LIT>) {", "body": "}"}
{"signature": "val modulesFile =", "body": "tmp.toFile().resolve(<STR_LIT>)<EOL>"}
{"signature": "if (customElementParcelerType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val elementType = asmType.elementType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val elementParceler = TypeParcelerParcelSerializer(elementType, customElementParcelerType, context.typeMapper)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>ArrayParcelSerializer(asmType, elementParceler)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val finallyBlockTransformer =", "body": "FinallyBlocksLowering(context, context.catchAllThrowableType)<EOL>"}
{"signature": "val brokenPackage =", "body": "BrokenPackage(<STR_LIT>, manager)<EOL>"}
{"signature": "val startGradleTask =", "body": "<NUM_LIT>L<EOL>"}
{"signature": "fun testWrongJarName() {", "body": "<EOL><INDENT><INDENT>val file = File(tmpdir, <STR_LIT>)<EOL><INDENT><INDENT>file.writeText(<STR_LIT>)<EOL><INDENT><INDENT>ServiceLoaderLite.findImplementations(Processor::class.java, listOf(file))<EOL><INDENT>}"}
{"signature": "val newInternalArgument =", "body": "parser.parseInternalArgument(arg, errors.value) ?: continue<EOL>"}
{"signature": "fun ordinaryInline() {", "body": "ordinary() }"}
{"signature": "if (visitedTimes != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>errorElements += element to visitedTimes<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var extraFlags =", "body": "JvmBackendExtension.Default.generateMetadataExtraFlags(config.abiStability)<EOL>"}
{"signature": "fun acceptA(a: A) {", "body": "<EOL>}"}
{"signature": "package scope tests.", "body": "<EOL>"}
{"signature": "if ((resultValue and <NUM_LIT>xFFFFFFFF_<NUM_LIT>UL) == <NUM_LIT>UL) {", "body": "resultValue = resultValue shl <NUM_LIT>; exp -= <NUM_LIT> }"}
{"signature": "if (<!UNRESOLVED_REFERENCE!>n<!>) {", "body": "<EOL><INDENT><INDENT><INDENT><!UNRESOLVED_REFERENCE!>a<!>.t()<EOL><INDENT><INDENT>}"}
{"signature": "val _in =", "body": "doIn(i)<EOL>"}
{"signature": "val curPos =", "body": "if (prevFragment == null) <NUM_LIT> else prevFragment.range.end.absolutePos!!<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.requirementCount - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>if (!checkEquals(old.getRequirement(i), new.getRequirement(i))) return false<EOL><INDENT><INDENT>}"}
{"signature": "var exceptionThrown =", "body": "false<EOL>"}
{"signature": "val filteredExtras =", "body": "extras<EOL>"}
{"signature": "fun withReadLock(target: FirElementWithResolveState, action: () -> Unit) {", "body": "<EOL><INDENT><INDENT>checkThatResolvedAtLeastToPreviousPhase(target)<EOL><INDENT><INDENT>lockProvider.withReadLock(target, resolverPhase, action)<EOL><INDENT>}"}
{"signature": "val stringMap =", "body": "mutableMapOf<String, Int>()<EOL>"}
{"signature": "val KOTLIN_SCRIPT_STATE_BINDINGS_KEY =", "body": "<STR_LIT><EOL>"}
{"signature": "val extTestSupportModule =", "body": "filesAndModules.modules[SUPPORT_MODULE_NAME] ?: return null<EOL>"}
{"signature": "val AS_TYPE =", "body": "OPERATION_TO_END<EOL>"}
{"signature": "var fqName =", "body": "FqName.fromSegments(path.subList(<NUM_LIT>, possiblePackagePrefixSize).map { it.name.asString() })<EOL>"}
{"signature": "if (finalResult == OverrideCompatibilityInfo.Result.CONFLICT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>iterator.remove()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val kotlinTransformedCInteropMetadataLibraries =", "body": "<STR_LIT><EOL>"}
{"signature": "if (delegatedConstructor?.isThis == false) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val instanceInitializerCall = IrInstanceInitializerCallImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>startOffset, endOffset, irClass.symbol, irFunction.constructedClassType<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>body.statements += instanceInitializerCall<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var _doComplete =", "body": "false<EOL>"}
{"signature": "if (resolvedParentClassId != null) {", "body": "<EOL><INDENT><INDENT><INDENT>if (isAllUnder) return true<EOL><INDENT><INDENT><INDENT>val parentClass = resolvedParentClassId!!<EOL><INDENT><INDENT><INDENT>val relativeClassName = this.relativeParentClassName ?: return false<EOL><INDENT><INDENT><INDENT>val importedName = this.importedName ?: return false<EOL><INDENT><INDENT><INDENT>val innerClassId = ClassId(parentClass.packageFqName, relativeClassName.child(importedName), isLocal = false)<EOL><INDENT><INDENT><INDENT>return innerClassId.resolveToClass(context) != null<EOL><INDENT><INDENT>}"}
{"signature": "val kniBlockPtr =", "body": "<STR_LIT><EOL>"}
{"signature": "fun testConvertAll(value: UShort) {", "body": "<EOL><INDENT>assertEquals(value.toByte(), value.convert<Byte>())<EOL><INDENT>assertEquals(value.toUByte(), value.convert<UByte>())<EOL><INDENT>assertEquals(value.toShort(), value.convert<Short>())<EOL><INDENT>assertEquals(value.toUShort(), value.convert<UShort>())<EOL><INDENT>assertEquals(value.toInt(), value.convert<Int>())<EOL><INDENT>assertEquals(value.toUInt(), value.convert<UInt>())<EOL><INDENT>assertEquals(value.toLong(), value.convert<Long>())<EOL><INDENT>assertEquals(value.toULong(), value.convert<ULong>())<EOL>}"}
{"signature": "val underlyingValueParameters =", "body": "underlyingDescriptor.valueParameters<EOL>"}
{"signature": "val currentClassSnapshotsExcludingMembers =", "body": "currentClassSnapshots<EOL>"}
{"signature": "if (declaration is KtClassOrObject && descriptor is ClassDescriptor) {", "body": "<EOL><INDENT><INDENT><INDENT>val annotationEntry = DescriptorToSourceUtils.getSourceFromAnnotation(annotation) ?: return<EOL><INDENT><INDENT><INDENT>context.trace.report(ErrorsJvm.STRICTFP_ON_CLASS.on(annotationEntry))<EOL><INDENT><INDENT>}"}
{"signature": "for (i in nodes.indices) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val firstNode = nodes[i].node<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val secondNode = if (i == nodes.size - <NUM_LIT>) nodes[<NUM_LIT>].node else nodes[i + <NUM_LIT>].node<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>firstNode.addAssignmentEdge(secondNode)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val constModifier =", "body": "declaration.getModifier(KtTokens.CONST_KEYWORD)<EOL>"}
{"signature": "val scopesForThisLine =", "body": "fileScopeFactory.createScopesForFile(lineInfo.linePsi, lastLineImports)<EOL>"}
{"signature": "val BOOL_AND =", "body": "<!EVALUATED(<STR_LIT>)!>true || BOOL<!><EOL>"}
{"signature": "val fooOrdinal =", "body": "A.FOO.testOrdinal == <NUM_LIT><EOL>"}
{"signature": "val signatureCollector =", "body": "SignaturesCollector(signatureRenderer ?: return null)<EOL>"}
{"signature": "val elementTypeEnum =", "body": "buildClass(JvmAnnotationNames.ELEMENT_TYPE_ENUM, classKind = ClassKind.ENUM_CLASS)<EOL>"}
{"signature": "var loop =", "body": "<NUM_LIT><EOL>"}
{"signature": "val dirty<NUM_LIT> =", "body": "params?.getOrNull(<NUM_LIT>)?.let { irGet(it) } ?: irConst(<NUM_LIT>)<EOL>"}
{"signature": "val two =", "body": "<NUM_LIT><EOL>"}
{"signature": "val ext =", "body": "klass.memberExtensionProperties.firstOrNull { it.name == <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "if (baseDumper.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>assertions.assertFileDoesntExist(file, CHECK_ASM_LIKE_INSTRUCTIONS)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val loopVariable =", "body": "inductionVariable<EOL>"}
{"signature": "while (materialize()) {", "body": "<EOL><EOL><INDENT>}"}
{"signature": "val scopesForNestedClassesMap =", "body": "hashMapOf<FirClass, ScopePersistentList>()<EOL>"}
{"signature": "if (example.x is Int) {", "body": "<EOL><INDENT><INDENT>b = example.x<EOL><INDENT>}"}
{"signature": "val nullStr =", "body": "JavaClass.nullString()<EOL>"}
{"signature": "if (resolveIfNeeded && initializer is FirLiteralExpression<*>) {", "body": "<EOL><INDENT><INDENT><INDENT>property.lazyResolveToPhase(FirResolvePhase.BODY_RESOLVE)<EOL><INDENT><INDENT><INDENT>return getEffectivePropertyInitializer(property, resolveIfNeeded = false)<EOL><INDENT><INDENT>}"}
{"signature": "val requiredVersionName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun step(name: String, body: () -> Unit) {", "body": "<EOL><INDENT><INDENT><INDENT>body()<EOL><INDENT><INDENT><INDENT>steps.add(name)<EOL><INDENT><INDENT><INDENT>step++<EOL><INDENT><INDENT>}"}
{"signature": "if (contractDescription == null || contractDescription.effects.isNullOrEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "var candidates =", "body": "candidateFinder.substitutableVariableReferences<EOL>"}
{"signature": "val headerToCachedInfo =", "body": "hashMapOf<JsIrModuleHeader, CachedModuleInfo>()<EOL>"}
{"signature": "val newProtoData =", "body": "ClassProtoData(classProto, stringTable.toNameResolver())<EOL>"}
{"signature": "for (annotationEntry in param.annotationEntries) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>c.trace.report(Errors.UNSUPPORTED.on(annotationEntry, <STR_LIT>))<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val resolvedVariants =", "body": "resolvedComponent.variants<EOL>"}
{"signature": "val androidSyntheticProperty =", "body": "propertyDescriptor as? AndroidSyntheticProperty ?: return<EOL>"}
{"signature": "val runtimeCp =", "body": "System.getProperty(<STR_LIT>)!!.split(File.pathSeparator).map(::File) + outJar<EOL>"}
{"signature": "val outerName =", "body": "canonicalName.removeSuffix(<STR_LIT>)<EOL>"}
{"signature": "if (origin.generated) {", "body": "<EOL><INDENT><INDENT><INDENT>FirGeneratedClassNestedClassifierScope.create(useSiteSession, klass.symbol, regularNestedClassifierScope = null)<EOL><INDENT><INDENT>}"}
{"signature": "if (parent is KtExpression && parent.textRange in textRange && parent.startOffset == candidate.startOffset) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>candidate = parent<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val envParseRe =", "body": "<STR_LIT><STR_LIT>([^<STR_LIT>\\\\]*)*)<STR_LIT><STR_LIT>.toRegex()<EOL>"}
{"signature": "for (i in (<NUM_LIT>u..<NUM_LIT>u step <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val resultIsActuallyIntersection =", "body": "intersectionUpperType.typeConstructor().isIntersection()<EOL>"}
{"signature": "val atomicRef<NUM_LIT> =", "body": "AtomicReference<Any?>(Any())<EOL>"}
{"signature": "fun row(cells: List<Cell>) {", "body": "<EOL><INDENT><INDENT>cols = maxOf(cells.size, cols)<EOL><INDENT><INDENT>data += Row.Data(cells)<EOL><INDENT>}"}
{"signature": "for (a in a<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "val bothNonNullLabel =", "body": "Label()<EOL>"}
{"signature": "val entityType =", "body": "parcelableClass.defaultType<EOL>"}
{"signature": "val originClassOfCandidate =", "body": "this.resolvedType.classId ?: return false<EOL>"}
{"signature": "val staticImports =", "body": "staticImports(name.asString()).toSet().takeIf { it.isNotEmpty() }<EOL>"}
{"signature": "fun testInternalFromForeignModuleCommon() {", "body": "<EOL><INDENT><INDENT>compileKotlin(<STR_LIT>, tmpdir, listOf(compileCommonLibrary(<STR_LIT>)), K<NUM_LIT>MetadataCompiler())<EOL><INDENT>}"}
{"signature": "val baseDirPath =", "body": "baseDir.getAllParents()<EOL>"}
{"signature": "fun invoke(p<NUM_LIT>: (k: String) -> Unit) {", "body": "<EOL><INDENT>}"}
{"signature": "val EXPECTED_PARSED_LOG_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val composition =", "body": "Composition(UnitApplier(), createRecomposer())<EOL>"}
{"signature": "if (argProperty.get(arguments) != argProperty.get(reportingState.currentArguments)) {", "body": "<EOL><INDENT><INDENT><INDENT>argProperty.javaField?.getAnnotation(Argument::class.java)?.value<EOL><INDENT><INDENT><INDENT><INDENT>?: throw IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val booleanFalse =", "body": "<!EVALUATED: `false`!>{ java.lang.Boolean.FALSE }().toString()<!><EOL>"}
{"signature": "fun visitAnonymousInitializer(declaration: IrAnonymousInitializer) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val targetDirectory =", "body": "createTempDirectory(root, <STR_LIT>).also { it.resolve(<STR_LIT>).createFile() }<EOL>"}
{"signature": "for (i in <NUM_LIT>toChar()..range.toChar()) {", "body": "<EOL><INDENT><INDENT>acc += areSame(i, i).oneIfTrueElseZero()<EOL><INDENT>}"}
{"signature": "val newLineIdx =", "body": "string.indexOf(<STR_LIT>)<EOL>"}
{"signature": "val gradleComponent =", "body": "components.find { kotlinComponent.name == it.name } ?: return@launchInStage<EOL>"}
{"signature": "fun setMethodImplForUint<NUM_LIT>Array(obj: Uint<NUM_LIT>Array, index: Int, value: Byte) {", "body": "js(<STR_LIT>) }"}
{"signature": "val resultFoo =", "body": "foo()<EOL>"}
{"signature": "val valueParametersAssociated =", "body": "baseMethodBridge.valueParametersAssociated(this)<EOL>"}
{"signature": "if (isDeprecatedCategoryMethod && annotations.filterIsInstance<AnnotationStub.Deprecated>().isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>val target = if (method.isClass) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>annotations += AnnotationStub.Deprecated(message = <STR_LIT>, replaceWith = <STR_LIT>, level = DeprecationLevel.WARNING)<EOL><INDENT><INDENT>}"}
{"signature": "fun checkForLocalClassOrObjectMode() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>recordInitializedVariables()<EOL><INDENT>}"}
{"signature": "fun expectMinMaxWith(min: UShort, max: UShort, elements: UShortArray, comparator: Comparator<UShort>) {", "body": "<EOL><INDENT><INDENT>assertEquals(min, elements.minWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWithOrNull(comparator))<EOL><INDENT><INDENT>assertEquals(min, elements.minWith(comparator))<EOL><INDENT><INDENT>assertEquals(max, elements.maxWith(comparator))<EOL><INDENT>}"}
{"signature": "for (statement in rawStatements.get()) {", "body": "<EOL><INDENT><INDENT><INDENT>appendLine(statement)<EOL><INDENT><INDENT>}"}
{"signature": "fun visitCallableReferenceAccess(callableReferenceAccess: FirCallableReferenceAccess) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>processCallableReferenceAccess(callableReferenceAccess)<EOL><INDENT><INDENT><INDENT><INDENT>super.visitCallableReferenceAccess(callableReferenceAccess)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (isOptimizedPropertyReferenceSupertype(superAsmType)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>generateCallableReferenceDeclarationContainerClass(this, target, state)<EOL><INDENT><INDENT><INDENT><INDENT>aconst(target.name.asString())<EOL><INDENT><INDENT><INDENT><INDENT>generatePropertyReferenceSignature(this, target, state)<EOL><INDENT><INDENT><INDENT><INDENT>aconst(getCallableReferenceTopLevelFlag(target))<EOL><INDENT><INDENT><INDENT><INDENT>superCtorArgTypes.add(JAVA_CLASS_TYPE)<EOL><INDENT><INDENT><INDENT><INDENT>superCtorArgTypes.add(JAVA_STRING_TYPE)<EOL><INDENT><INDENT><INDENT><INDENT>superCtorArgTypes.add(JAVA_STRING_TYPE)<EOL><INDENT><INDENT><INDENT><INDENT>superCtorArgTypes.add(Type.INT_TYPE)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val moduleCacheFlag =", "body": "<STR_LIT><EOL>"}
{"signature": "val TRANSLATION_RESULT_MAP =", "body": "<STR_LIT><EOL>"}
{"signature": "val RED =", "body": "<STR_LIT><EOL>"}
{"signature": "if (signature.mask != <NUM_LIT>L) {", "body": "<EOL><INDENT><INDENT><INDENT>proto.flags = signature.mask<EOL><INDENT><INDENT>}"}
{"signature": "when (e.key) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> e.setValue(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><STR_LIT> -> it.remove()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (finallyNode != null) {", "body": "<EOL><INDENT><INDENT><INDENT>currentStatements += updateFinallyPath(listOf(oldCatchBlock))<EOL><INDENT><INDENT><INDENT>currentStatements += if (catchNode != null) exceptionState(finallyBlock, x) else stateAndJump(finallyBlock, x)<EOL><INDENT><INDENT>}"}
{"signature": "package this class is located in, from Kotlin's point of view, or empty string if this name<EOL>.", "body": ""}
{"signature": "val intFloorInt =", "body": "byte.floorDiv(int)<EOL>"}
{"signature": "else if (isMimeScheme) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>sourceIndex += <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>continue<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val result = cachedFakeOverrides[actualizedClassSymbol to actualizedOriginalSymbol]) {", "body": "<EOL><INDENT><INDENT><INDENT>null -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>!is S -> error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>else -> return result<EOL><INDENT><INDENT>}"}
{"signature": "val variablesWithUnobservedWrites =", "body": "mutableSetOf<FirPropertySymbol>()<EOL>"}
{"signature": "val argumentRange =", "body": "maxOf(shift, <NUM_LIT>) until (kotlinParameterTypes.size + shift)<EOL>"}
{"signature": "fun testNullableT() {", "body": "<EOL><INDENT><INDENT>doTest(<STR_LIT>, <STR_LIT>)<EOL><INDENT>}"}
{"signature": "val callStack =", "body": "Stack<Boolean>()<EOL>"}
{"signature": "val jsScope =", "body": "JsRootScope(JsProgram())<EOL>"}
{"signature": "if (othersList == null && isolatedList == null) {", "body": "<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val barJava =", "body": "javaSourcesDir().resolve(<STR_LIT>)<EOL>"}
{"signature": "var iter =", "body": "root<EOL>"}
{"signature": "val localFqn =", "body": "irInterner.string(libraryFile.deserializeFqName(proto.localFqNameList))<EOL>"}
{"signature": "val TEMPLATES_PATH =", "body": "<STR_LIT><EOL>"}
{"signature": "fun leaveScope() {", "body": "<EOL><INDENT>}"}
{"signature": "if (resolvedType != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>type = resolvedType<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun useGenericReturningUnit() {", "body": "<EOL><INDENT>generic<Unit>()<EOL>}"}
{"signature": "val renderedT =", "body": "primaryTypeParameter.renderType()<EOL>"}
{"signature": "val separateModules =", "body": "groupedByModule.size == <NUM_LIT> && groupedByModule.keys.single() == null<EOL>"}
{"signature": "fun testInvertedAssert(x: Any?) {", "body": "<EOL><INDENT>myAssert(x !is String)<EOL><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL>}"}
{"signature": "fun enterInitBlock(initBlock: FirAnonymousInitializer) {", "body": "<EOL><INDENT><INDENT>graphBuilder.enterInitBlock(initBlock).mergeIncomingFlow()<EOL><INDENT>}"}
{"signature": "val immOneIntPtrType =", "body": "LLVMConstInt(intPtrType, <NUM_LIT>, <NUM_LIT>)!!<EOL>"}
{"signature": "if (overriddenSymbols.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>this<EOL><INDENT><INDENT>}"}
{"signature": "val storeNode =", "body": "handlerStartLabel.findNextOrNull { it.hasOpcode() }!!<EOL>"}
{"signature": "val exceptionExpected =", "body": "<NUM_LIT> / <NUM_LIT><EOL>"}
{"signature": "val isAllUnderClassifierImport =", "body": "importDirective.isAllUnder && importedSymbols.any { it is KtClassOrObjectSymbol }<EOL>"}
{"signature": "val expandedTypeRef =", "body": "declaration.expandedTypeRef<EOL>"}
{"signature": "val alignedPtr =", "body": "alignUp(chunkWithSkippedHeader, align)<EOL>"}
{"signature": "val resolvedPropertySymbol =", "body": "calleeReference.resolvedSymbol<EOL>"}
{"signature": "val resultSupertypeRefs =", "body": "mutableListOf<FirResolvedTypeRef>()<EOL>"}
{"signature": "for (testModule in sortedModules) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>firOutputPartForDependsOnModules.add(analyzeDependsOnModule(testModule))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if ((ha - hb) > <NUM_LIT>x<NUM_LIT>c<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>return a + b<EOL><INDENT>}"}
{"signature": "if (trimmed.startsWith(\"<INDENT><INDENT><INDENT>expectations.add(trimmed)<EOL><INDENT><INDENT>}{", "body": ""}
{"signature": "val receiverTypeProto =", "body": "typeArgumentList[processedTypes].type(c.typeTable)!!<EOL>"}
{"signature": "val indicesOfObjectFields =", "body": "getIndicesOfObjectFields(classType)<EOL>"}
{"signature": "fun testFakeOverrideInheritsBridgesAndAbstract() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>val d = v(<STR_LIT>)<EOL><INDENT><INDENT>val e = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(c to a, c to b, e to c, e to d)<EOL><INDENT><INDENT>doTest(c, setOf(bridge(a, b)))<EOL><INDENT><INDENT><INDENT><INDENT>doTest(e, setOf(bridge(d, b)))<EOL><INDENT>}"}
{"signature": "val resource =", "body": "platformNull<Resource>()<EOL>"}
{"signature": "for (diagnostic in diagnosticList.diagnostics) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>printDiagnosticClass(diagnostic, diagnosticList)<EOL><INDENT><INDENT><INDENT><INDENT>println()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (successorIndex in graph.getSuccessorsIndices(insn)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>newFrame.mergeFrom(frames[successorIndex])<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val firstBitWidth =", "body": "numbers[first.classifierId] ?: return null<EOL>"}
{"signature": "fun jk() {", "body": "<EOL><INDENT>JK().test()<EOL>}"}
{"signature": "val MODULE_INDEX =", "body": "<STR_LIT><EOL>"}
{"signature": "val continuationImpl =", "body": "internalCoroutinesClass(<STR_LIT>)<EOL>"}
{"signature": "for ((i, valueParameterType) in valueParameterTypes.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT>operatorDescriptor.addValueParameter(<EOL><INDENT><INDENT><INDENT><INDENT>IrBuiltinValueParameterDescriptorImpl(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>operatorDescriptor, Name.identifier(<STR_LIT>), i, valueParameterType.originalKotlinType!!<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val testGlobalVal =", "body": "J.notNullString()<EOL>"}
{"signature": "fun test_powDD() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>assertTrue(<STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT>.pow(<NUM_LIT>).toLong() == <NUM_LIT>L)<EOL><INDENT><INDENT>assertTrue(<STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT>.pow(<NUM_LIT>) == <NUM_LIT>)<EOL><INDENT><INDENT>assertEquals(<STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><NUM_LIT>, sqrt(sqrt(<NUM_LIT>).pow(<NUM_LIT>)), <NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val FOO_PACKAGE =", "body": "FqName.topLevel(Name.identifier(<STR_LIT>))<EOL>"}
{"signature": "package redeclarations<EOL>.", "body": ""}
{"signature": "val containingDeclarationProviderImpl =", "body": "KtFirSymbolContainingDeclarationProvider(this, token)<EOL>"}
{"signature": "var startComment =", "body": "<STR_LIT><EOL>"}
{"signature": "val newGroupIndex =", "body": "(groupIndex * <NUM_LIT>) + (lexemes.lookAhead - '<NUM_LIT>'.code)<EOL>"}
{"signature": "if (implType.shortName().toString() == <STR_LIT>) {", "body": "<EOL><INDENT><INDENT>println()<EOL><INDENT><INDENT>println(<STR_LIT>args.noStdlib = true\")<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT><INDENT>println(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "if (list<NUM_LIT> != listOf<UInt>(<NUM_LIT>u)) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "fun g(q: Int) {", "body": "}<EOL><EOL><INDENT>@JvmStatic<EOL><INDENT>private val y = <STR_LIT><EOL><EOL><INDENT>private var yy: String<EOL><INDENT><INDENT>@JvmStatic get() = <STR_LIT><EOL><INDENT><INDENT>@JvmStatic set(value) {}"}
{"signature": "val declarationPredicateMatcher =", "body": "Matcher<DeclarationPredicate>()<EOL>"}
{"signature": "for (i in @ann x) {", "body": "}"}
{"signature": "if (maybeEnclosingLambdaExpr is KtLambdaExpression && trace[LAMBDA_INVOCATIONS, maybeEnclosingLambdaExpr] != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>parentDeclaration = parentDeclaration.getElementParentDeclaration()<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>continue@loop<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val polymorphicSerializer =", "body": "Name.identifier(SpecialBuiltins.polymorphicSerializer)<EOL>"}
{"signature": "val actualSuperTypes =", "body": "actualSymbol.superTypesRefs.groupBy { it.getClassId() }<EOL>"}
{"signature": "for (innerClass in psiClass.innerClasses) {", "body": "<EOL><INDENT><INDENT><INDENT>val name = innerClass.name ?: continue<EOL><INDENT><INDENT><INDENT>processChangedUntrackedJavaClass(innerClass, classId.createNestedClassId(Name.identifier(name)))<EOL><INDENT><INDENT>}"}
{"signature": "val javaFileObjects =", "body": "fileManager.getJavaFileObjectsFromFiles(javaSourceFiles)<EOL>"}
{"signature": "if (CompilerSystemProperties.KOTLIN_COLORS_ENABLED_PROPERTY.value == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>CompilerSystemProperties.KOTLIN_COLORS_ENABLED_PROPERTY.value = <STR_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val androidJarPath =", "body": "project.configurations.findByName(<STR_LIT>)?.singleFile<EOL>"}
{"signature": "val npmResolutionManager =", "body": "project.kotlinNpmResolutionManager<EOL>"}
{"signature": "fun remember(from: KotlinSourceSet, to: KotlinSourceSet) {", "body": "<EOL><INDENT><INDENT>if (dontRemember) return<EOL><INDENT><INDENT>rememberedEdges.add(from to to)<EOL><INDENT>}"}
{"signature": "fun test<NUM_LIT>(outA: Out<A>, inB: In<B>) {", "body": "<EOL><INDENT>foo(outA, inB)<EOL><EOL><INDENT>val b: Two<A, C> = <!TYPE_MISMATCH!>foo(outA, inB)<!><EOL><INDENT>use(b)<EOL>}"}
{"signature": "fun useGenericClass(g: Generic<Unit>) {", "body": "<EOL><INDENT>g.foo()<EOL>}"}
{"signature": "package fragment to FileKt class for top-level callables (K<NUM_LIT> only)\"<EOL>.", "body": ""}
{"signature": "val collectedClassPath =", "body": "ArrayList<File>()<EOL>"}
{"signature": "val containerAsmType =", "body": "codegen.typeMapper.mapType(parcelableClass.defaultType)<EOL>"}
{"signature": "while (false && true) {", "body": "<EOL><INDENT><INDENT>val x = <NUM_LIT><EOL><INDENT>}"}
{"signature": "val invokeDescriptor =", "body": "type.memberScope.getContributedFunctions(OperatorNameConventions.INVOKE, location).single()<EOL>"}
{"signature": "val simplifiedMethodName =", "body": "methodName.getOnlyUpperCaseSymbols()<EOL>"}
{"signature": "val firstArgClassPtr =", "body": "getClass.buildCall(builder, listOf(firstArgI<NUM_LIT>Ptr))<EOL>"}
{"signature": "val delegateFirExpression =", "body": "extractDelegateExpression()<EOL>"}
{"signature": "val JAVA_DEPRECATED =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val longBound =", "body": "Long.MIN_VALUE<EOL>"}
{"signature": "if (!analyzePartially) {", "body": "<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "fun check(method<NUM_LIT>: MethodNode, method<NUM_LIT>: MethodNode, report: MethodReport) {", "body": "<EOL><INDENT><INDENT>val anns<NUM_LIT> = getAnnotations(method<NUM_LIT>)<EOL><INDENT><INDENT>val anns<NUM_LIT> = getAnnotations(method<NUM_LIT>)<EOL><INDENT><INDENT>val annDiff = compareAnnotations(anns<NUM_LIT>, anns<NUM_LIT>) ?: return<EOL><INDENT><INDENT>report.addAnnotationDiffs(this, annDiff)<EOL><INDENT>}"}
{"signature": "if (isIdeaActive) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>aggregate.extensions.extraProperties.set(<STR_LIT>, true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (i in <NUM_LIT>u.toUShort() until <NUM_LIT>u.toUShort()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "if (functionDescriptor is ConstructorDescriptor && functionDescriptor.constructedClass.isSealed() && function.visibilityModifier() == null) {", "body": "<EOL><INDENT><INDENT><INDENT>functionVisibility = EffectiveVisibility.PrivateInClass<EOL><INDENT><INDENT>}"}
{"signature": "package client<EOL>.", "body": ""}
{"signature": "val typeAliasesByUnderlyingType =", "body": "CommonizerMap<CirEntityId, MutableList<CirTreeTypeAlias>>(initialCapacity)<EOL>"}
{"signature": "else if (next<NUM_LIT>opcode == Opcodes.ICONST_<NUM_LIT> && next<NUM_LIT>opcode == Opcodes.ANEWARRAY) {", "body": "<EOL><INDENT><INDENT><INDENT>instructions.remove(next<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>instructions.remove(next<NUM_LIT>)<EOL><INDENT><INDENT><INDENT>val desc = getSpecialEnumFunDescriptor(parameter, false)<EOL><INDENT><INDENT><INDENT>instructions.insert(insn, MethodInsnNode(Opcodes.INVOKESTATIC, parameter.internalName, <STR_LIT>, desc, false))<EOL><INDENT><INDENT><INDENT>return true<EOL><INDENT><INDENT>}"}
{"signature": "if (applicableArguments.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val (argument, argumentType, expectedType, position) = applicableArguments.single()<EOL><INDENT><INDENT><INDENT><INDENT>csBuilder.addSubtypeConstraint(argumentType, expectedType, position)<EOL><INDENT><INDENT><INDENT><INDENT>return argument<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val reportFile =", "body": "getReportFile()<EOL>"}
{"signature": "val queryDescription =", "body": "<STR_LIT>\"<EOL>"}
{"signature": "val fixedQualifiedAccessSegments =", "body": "qualifiedAccessSegments.drop(<NUM_LIT>)<EOL>"}
{"signature": "val JAVA_LANG_RECORD_FQ_NAME =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val testsJarCfg =", "body": "configurations.getOrCreate(<STR_LIT>).extendsFrom(configurations[<STR_LIT>])<EOL>"}
{"signature": "val receiver =", "body": "(dispatchReceiverParameter ?: extensionReceiverParameter)?.type?.getOnlyName()?.let { <STR_LIT> } ?: <STR_LIT><EOL>"}
{"signature": "if (other.kotlinOrigin != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return other.kotlinOrigin == this.kotlinOrigin<EOL><INDENT><INDENT>}"}
{"signature": "val moduleBuildInfo =", "body": "modulesInfo[module] ?: error(<STR_LIT>)<EOL>"}
{"signature": "val testVal =", "body": "<STR_LIT><EOL>"}
{"signature": "fun watch() {", "body": "<EOL><INDENT><INDENT>config.singleRun = false<EOL><INDENT><INDENT>config.autoWatch = true<EOL><INDENT>}"}
{"signature": "val mayBeCoercionToUnitApplied =", "body": "(data as? ResolutionMode.WithExpectedType)?.mayBeCoercionToUnitApplied == true<EOL>"}
{"signature": "if (<!SENSELESS_COMPARISON!>null == x<!>) {", "body": "}"}
{"signature": "fun visitReturnValue(instruction: ReturnValueInstruction) {", "body": "<EOL><INDENT><INDENT>visitJump(instruction)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT>.n) {", "body": "<EOL><INDENT><INDENT><INDENT>tick()<EOL><INDENT><INDENT>}"}
{"signature": "fun visitEnumEntry(enumEntry: FirEnumEntry, data: Any?) {", "body": "<EOL><INDENT><INDENT><INDENT>setExpected(enumEntry.isExpect)<EOL><INDENT><INDENT>}"}
{"signature": "fun setC(text: String) {", "body": "}"}
{"signature": "if (functionSymbol.fir.valueParameters.size == baseInvokeSymbol.fir.valueParameters.size) {", "body": "<EOL><INDENT><INDENT><INDENT>declaredInvoke = functionSymbol<EOL><INDENT><INDENT><INDENT>return@processFunctionsByName<EOL><INDENT><INDENT>}"}
{"signature": "val annotationSources =", "body": "typeRef.annotations.keysToMap { it.source }<EOL>"}
{"signature": "if (previousValue != newValue && newValue != null) {", "body": "<EOL><INDENT><INDENT>changed[instruction] = true<EOL><INDENT><INDENT>edgesMap[instruction] = newValue<EOL><INDENT>}"}
{"signature": "fun visitValueParameter(declaration: IrValueParameter, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitValueParameter(declaration)<EOL><INDENT>}"}
{"signature": "val constructor =", "body": "typeConstructor()<EOL>"}
{"signature": "val javaHomePath =", "body": "System.getProperty(<STR_LIT>)<EOL>"}
{"signature": "fun main(b: B<*>) {", "body": "<EOL><INDENT>foo(b)<EOL>}"}
{"signature": "if (function is IrConstructor && irClass == innerClass) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>IrGetValueImpl(startOffset, endOffset, function.valueParameters[<NUM_LIT>].symbol, origin)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val mod<NUM_LIT> =", "body": "value - <NUM_LIT> * div<NUM_LIT><EOL>"}
{"signature": "val INAPPLICABLE_THREAD_LOCAL_TOP_LEVEL =", "body": "DiagnosticFactory<NUM_LIT>create<KtElement>(Severity.ERROR)<EOL>"}
{"signature": "val kName =", "body": "localKClass.simpleName<EOL>"}
{"signature": "val strBuff =", "body": "StringBuilder()<EOL>"}
{"signature": "if (rhs == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>irNotEqual(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irAnd(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irGet(param),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irConst(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>),<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>irConst(<NUM_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val eagerInitializedFiles =", "body": "mutableListOf<SerializedEagerInitializedFile>()<EOL>"}
{"signature": "val valueClass =", "body": "type.erasedUpperBound<EOL>"}
{"signature": "val moduleInMemory =", "body": "snippet.getCompiledModule() as KJvmCompiledModuleInMemory<EOL>"}
{"signature": "fun test(name: Name<String>) {", "body": "<EOL><INDENT>if (name.name != <STR_LIT>) throw AssertionError()<EOL>}"}
{"signature": "if (statement is JsBlock && statement.statements.size == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>statement.statements[<NUM_LIT>]<EOL><INDENT><INDENT>}"}
{"signature": "if (property.isFakeOverrideOrDelegated(fakeOverrideOwnerLookupTag)) {", "body": "<EOL><INDENT><INDENT><INDENT>val originalProperty = property.unwrapFakeOverridesOrDelegated()<EOL><INDENT><INDENT><INDENT>val key = FakeOverrideIdentifier(<EOL><INDENT><INDENT><INDENT><INDENT>originalProperty.symbol,<EOL><INDENT><INDENT><INDENT><INDENT>fakeOverrideOwnerLookupTag ?: property.containingClassLookupTag()!!,<EOL><INDENT><INDENT><INDENT><INDENT>c<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>irForFirSessionDependantDeclarationMap[key] = irPropertySymbol<EOL><INDENT><INDENT>}"}
{"signature": "val numUnionTypes =", "body": "op.arguments.count { it.type is IDLUnionTypeDeclaration }<EOL>"}
{"signature": "val benchmarksArray =", "body": "JsonTreeParser.parse(benchDesc)<EOL>"}
{"signature": "fun visitDoWhileLoop(doWhileLoop: FirDoWhileLoop) {", "body": "<EOL><INDENT><INDENT>visitElement(doWhileLoop)<EOL><INDENT>}"}
{"signature": "fun x<NUM_LIT>(x: Z) {", "body": "}<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>fun x<NUM_LIT>(x: Z) {}"}
{"signature": "if (descriptor.extensionReceiverParameter != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(Errors.INAPPLICABLE_LATEINIT_MODIFIER.on(ktDeclaration, <STR_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val actualBooleanMetricsVersionAndHash =", "body": "<EOL><INDENT><INDENT><INDENT>Pair(BooleanMetrics.VERSION, calculateFileChecksum(BOOLEAN_METRICS_RELATIVE_PATH))<EOL>"}
{"signature": "else if (parameter.isVararg) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>arguments[parameter.index] = defaultEmptyArray(parameter.type)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val DELEGATED_PROPERTY_NAME_SUFFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "fun generateCallableReferenceMethods(klass: IrClass) {", "body": "<EOL><INDENT><INDENT>klass.addFunction(<STR_LIT>, irBuiltIns.stringType, Modality.OPEN)<EOL><INDENT><INDENT>klass.addFunction(<STR_LIT>, irBuiltIns.stringType, Modality.OPEN)<EOL><INDENT><INDENT>klass.addFunction(<STR_LIT>, kDeclarationContainer.defaultType, Modality.OPEN)<EOL><INDENT>}"}
{"signature": "val isExternalSerializer =", "body": "serializerDescriptor.serializerForClass != null<EOL>"}
{"signature": "fun nullable(r: WeakReference<String?>) {", "body": "<EOL><INDENT>r.<caret>get()<EOL>}"}
{"signature": "fun visitPlaceholderProjection(placeholderProjection: FirPlaceholderProjection) {", "body": "<EOL><INDENT><INDENT>visitElement(placeholderProjection)<EOL><INDENT>}"}
{"signature": "val KOTLIN_COMPOUND_NAME =", "body": "AbiCompoundName(<STR_LIT>)<EOL>"}
{"signature": "val MAGIC_NUMBER =", "body": "<NUM_LIT><EOL>"}
{"signature": "val releaseText =", "body": "<STR_LIT><EOL>"}
{"signature": "if (isDead || from.isDead || to.isDead) {", "body": "<EOL><INDENT><INDENT><INDENT>if (preferredKind.isBack) EdgeKind.DeadBackward else EdgeKind.DeadForward<EOL><INDENT><INDENT>}"}
{"signature": "fun f(g: (<EOL><INDENT>z: Z,<EOL><INDENT>p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long,<EOL><INDENT>p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long, p<NUM_LIT>: Long,<EOL><INDENT>p<NUM_LIT>: Long, p<NUM_LIT>: Long<EOL>) -> Unit) {", "body": "<EOL><INDENT>g(Z(<NUM_LIT>L), <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>, <NUM_LIT>)<EOL>}"}
{"signature": "if (visitNestedDeclarations) {", "body": "<EOL><INDENT><INDENT><INDENT>visitElement(x)<EOL><INDENT><INDENT>}"}
{"signature": "val interopNativePointedRawPtrGetter =", "body": "lookup.findMemberPropertyGetter(interopClass(InteropFqNames.nativePointedName), Name.identifier(InteropFqNames.nativePointedRawPtrPropertyName))!!<EOL>"}
{"signature": "for (i in (<NUM_LIT>L .. <NUM_LIT>L).reversed()) {", "body": "<EOL><INDENT><INDENT>sumL = sumL * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "while (!end() && !atClass()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>advance()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val clinit =", "body": "methodNodes.first()<EOL>"}
{"signature": "fun concat(suffix: String, l: (s: String) -> Unit)  {", "body": "<EOL><INDENT>l(suffix)<EOL>}"}
{"signature": "val atomicRef =", "body": "AtomicReference<Any?>(Any())<EOL>"}
{"signature": "val expectedInlinedClass =", "body": "icUtils.getInlinedClass(expectedType)<EOL>"}
{"signature": "if (!lessOrNull(warningSince, errorSince) || !lessOrNull(errorSince, hiddenSince) || !lessOrNull(warningSince, hiddenSince)) {", "body": "<EOL><INDENT><INDENT><INDENT>context.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT>Errors.DEPRECATED_SINCE_KOTLIN_WITH_UNORDERED_VERSIONS.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>deprecatedSinceAnnotationName<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun setupScriptConfiguration(configuration: CompilerConfiguration) {", "body": "<EOL><INDENT><INDENT>configuration.put(JVMConfigurationKeys.RETAIN_OUTPUT_IN_MEMORY, true)<EOL><INDENT>}"}
{"signature": "val accessedLibraries =", "body": "mutableSetOf<KonanLibrary>()<EOL>"}
{"signature": "when (val callee = this.calleeReference) {", "body": "<EOL><INDENT><INDENT>is FirNamedReferenceWithCandidate -> return callee.candidate<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val kSuspendFunctionImplSymbol =", "body": "symbols.kSuspendFunctionImpl<EOL>"}
{"signature": "val abi =", "body": "A<B<Int>>(B<Int>(<NUM_LIT>))<EOL>"}
{"signature": "val recordedType =", "body": "topLevelCallContext.trace.getType(callElement)<EOL>"}
{"signature": "val originalTypes =", "body": "resultingDescriptor.typeAliasDescriptor.underlyingType.arguments.map { it.type }<EOL>"}
{"signature": "var instance =", "body": "new InvalidClass()<EOL>"}
{"signature": "fun downloadDependencies(archiveExtractor: ArchiveExtractor) {", "body": "<EOL><INDENT><INDENT>dependencyProcessor!!.run(archiveExtractor)<EOL><INDENT>}"}
{"signature": "val classIds =", "body": "Interner<ClassId>()<EOL>"}
{"signature": "val model =", "body": "executor.setEnvironmentVariables(env)<EOL>"}
{"signature": "val shouldAddAttribute =", "body": "nullabilityFromQualifiers == NullabilityQualifier.NOT_NULL && !hasEnhancedNullability<EOL>"}
{"signature": "val skipNonCapturingLambdas =", "body": "!context.platform.isJs() && !context.platform.isWasm()<EOL>"}
{"signature": "val refTest =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val classThisSymbol =", "body": "irClass.thisReceiver!!.symbol<EOL>"}
{"signature": "val objArray =", "body": "context.irBuiltIns.arrayClass<EOL>"}
{"signature": "if (index + <NUM_LIT> == children.size) {", "body": "<EOL><INDENT><INDENT><INDENT>call(argument, newVariables)<INDENT><INDENT> }"}
{"signature": "if (firProperty?.setter === firTarget) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>answer = property.setter?.symbol<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val localVariableStart =", "body": "insnList.indexOf(localVariableNode.start)<EOL>"}
{"signature": "var markedRepeatable =", "body": "false<EOL>"}
{"signature": "if (!parentClass.defaultType.isKFunction() && !parentClass.defaultType.isKSuspendFunction()) {", "body": "<EOL><INDENT><INDENT><INDENT>implicitCastKFunctionReceiverIntoFunctionIfNeeded(expression, parentClass)<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "if (androidTargetAssetsMap[target] != null) {", "body": "<EOL><INDENT><INDENT><INDENT>target.project.reportDiagnostic(KotlinToolingDiagnostics.AssetsPublishedMoreThanOncePerTarget())<EOL><INDENT><INDENT>}"}
{"signature": "val outputsB =", "body": "TransformOutputsMock(tmp.newFolder())<EOL>"}
{"signature": "var bestNum =", "body": "<NUM_LIT><EOL>"}
{"signature": "val aDescriptor =", "body": "a.resultingDescriptor<EOL>"}
{"signature": "if (!compilerContext.platform.isJs()) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "fun is<NUM_LIT>(x: Any?) {", "body": "<EOL><INDENT>sb.appendLine(x == <NUM_LIT>)<EOL><INDENT>sb.appendLine(<NUM_LIT> == x)<EOL>}"}
{"signature": "fun testJsAndJavaToJavaWithOtherVersion() {", "body": "<EOL><INDENT><INDENT>assertEquals(<EOL><INDENT><INDENT><INDENT>CacheStatus.INVALID,<EOL><INDENT><INDENT><INDENT>manager.loadDiff(<EOL><INDENT><INDENT><INDENT><INDENT>actual = CompositeLookupsCacheAttributes(<NUM_LIT>, setOf(<STR_LIT>, <STR_LIT>)),<EOL><INDENT><INDENT><INDENT><INDENT>expected = CompositeLookupsCacheAttributes(<NUM_LIT>, setOf(<STR_LIT>))<EOL><INDENT><INDENT><INDENT>).status<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val continuationLabelAfterLoadedResult =", "body": "LabelNode()<EOL>"}
{"signature": "fun launch<NUM_LIT>() {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>pumpEvents()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun callJava(derived: Test.Derived, derivedRaw: Test.DerivedRaw, v: Test.I<NUM_LIT>) {", "body": "<EOL><INDENT>derived.foo(v)<EOL><INDENT>derivedRaw.foo(v)<EOL>}"}
{"signature": "var xi =", "body": "<NUM_LIT><EOL>"}
{"signature": "val callSitesNotRequiringThreadLocalInitializerCall =", "body": "mutableSetOf<IrFunctionAccessExpression>()<EOL>"}
{"signature": "if (starts != null && starts.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT>start = starts[<NUM_LIT>]<EOL><INDENT><INDENT><INDENT>configuration = call<NUM_LIT>()<EOL><INDENT><INDENT>}"}
{"signature": "val IS_STATIC_FIELD_INITIALIZER =", "body": "<NUM_LIT><EOL>"}
{"signature": "if (hasNotNothingExpectedType && hasNothingReturnType && isSubResolvedAtomsNotEmpty) {", "body": "<EOL><INDENT><INDENT><INDENT>return resolvedCall.resolvedCallAtom.subResolvedAtoms<EOL><INDENT><INDENT>}"}
{"signature": "val F<NUM_LIT>_CONVERT_I<NUM_LIT>_U =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitFunctionTypeParameter(functionTypeParameter: FirFunctionTypeParameter) {", "body": "<EOL><INDENT><INDENT>visitElement(functionTypeParameter)<EOL><INDENT>}"}
{"signature": "val isSpecialFunction =", "body": "resolutionCandidates.any { it.descriptor.name in SPECIAL_FUNCTION_NAMES }<EOL>"}
{"signature": "val characterWithDiagnostic =", "body": "escapedStringToCharacter(entry.asText)<EOL>"}
{"signature": "val indirectBr =", "body": "LLVMBuildIndirectBr(builder, address, destinations.size)<EOL>"}
{"signature": "val relativeClassName =", "body": "c.relativeClassName!!<EOL>"}
{"signature": "val beginCatch =", "body": "llvm.cxaBeginCatchFunction<EOL>"}
{"signature": "fun run(block: (T) -> Unit) {", "body": "<EOL><INDENT><INDENT>block(value)<EOL><INDENT>}"}
{"signature": "if (isExhaustive && !hasElse) {", "body": "<EOL><INDENT><INDENT><INDENT>val noWhenMatchedInvocation = JsInvocation(JsAstUtils.pureFqn(<STR_LIT>, Namer.kotlinObject()))<EOL><INDENT><INDENT><INDENT>setWhenStatement(JsAstUtils.asSyntheticStatement(noWhenMatchedInvocation))<EOL><INDENT><INDENT>}"}
{"signature": "val cstrPropertyName =", "body": "<STR_LIT><EOL>"}
{"signature": "val intClassDescriptor =", "body": "module.findClassAcrossModuleDependencies(ClassId.fromString(<STR_LIT>))!!<EOL>"}
{"signature": "package but not from a subclass,<EOL>.", "body": ""}
{"signature": "if (shouldCheckSupertypeOnTypealiasWithTypeProjection) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>checkSupertypeOnTypeAliasWithTypeProjection(coneType, fullyExpandedType, superTypeRef, reporter, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val taskPattern =", "body": "Regex(<STR_LIT>)<EOL>"}
{"signature": "if (ref == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val subResult =", "body": "ArrayList<DeclarationDescriptor>()<EOL>"}
{"signature": "fun setMethodImplForInt<NUM_LIT>Array(obj: Int<NUM_LIT>Array, index: Int, value: Byte) {", "body": "js(<STR_LIT>) }"}
{"signature": "val tail =", "body": "atomic(<STR_LIT>)<EOL>"}
{"signature": "val newManifestLocation =", "body": "target.project.file(<STR_LIT>)<EOL>"}
{"signature": "if (backendErrors.isNotEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>return KtCompilationResult.Failure(backendErrors)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "package extensionAndRegular<EOL>.", "body": ""}
{"signature": "val aLoad<NUM_LIT> =", "body": "ifNullNext.next<EOL>"}
{"signature": "when (protoContainer) {", "body": "<EOL><INDENT><INDENT>is ProtoContainer.Class -> protoContainer.classId.createNestedClassId(shortName)<EOL><INDENT><INDENT>is ProtoContainer.Package -> ClassId.topLevel(protoContainer.fqName.child(shortName))<EOL><INDENT>}"}
{"signature": "if (Obj.y is Int) {", "body": "<EOL><INDENT><INDENT>b = Obj.y<EOL><INDENT>}"}
{"signature": "val V =", "body": "VBase + SIndex % NCount / TCount<EOL>"}
{"signature": "val ELSE =", "body": "<STR_LIT><EOL>"}
{"signature": "if (union) {", "body": "<EOL><INDENT><INDENT><INDENT>result.copyNonConflictingAliases(flows, commonFlow)<EOL><INDENT><INDENT>}"}
{"signature": "val FULL_COMPOSABLE_NAME_PREFIX =", "body": "COMPOSABLE_PACKAGE_FQN.child(Name.identifier(COMPOSABLE_NAME_PREFIX)).asString()<EOL>"}
{"signature": "fun test<NUM_LIT>Null() {", "body": "<EOL><INDENT>if (eqDI(<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqDL(<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqID(<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqLD(<NUM_LIT>L, null)) throw Exception()<EOL><INDENT>if (eqFI(<NUM_LIT>F, null)) throw Exception()<EOL><INDENT>if (eqFL(<NUM_LIT>F, null)) throw Exception()<EOL><INDENT>if (eqIF(<NUM_LIT>, null)) throw Exception()<EOL><INDENT>if (eqLF(<NUM_LIT>L, null)) throw Exception()<EOL>}"}
{"signature": "if (typeToCheck.containsUninferredTypeParameter(uninferredTypeVariable)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>add(subResolvedAtom)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val afterType =", "body": "parentType?.let { <STR_LIT> }<EOL>"}
{"signature": "val dependencyMappers =", "body": "listOf(dependencyPatcher, ::attachPlatformSources, ::attachAsmSources)<EOL>"}
{"signature": "if (cachedItem != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return cachedItem<EOL><INDENT><INDENT>}"}
{"signature": "val depth =", "body": "blockScope?.depth ?: <NUM_LIT><EOL>"}
{"signature": "val tempFolder =", "body": "TemporaryFolder()<EOL>"}
{"signature": "val readFunc =", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>inputClass.getFuncDesc(<STR_LIT>)<EOL>"}
{"signature": "if (firSymbol !is FirCallableSymbol && firSymbol !is FirClassSymbol && firSymbol !is FirTypeAliasSymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT>}"}
{"signature": "val modulesTxt =", "body": "readModulesTxt()<EOL>"}
{"signature": "if (symbolProvider.getPackage(importedFqName) != null) {", "body": "<EOL><INDENT><INDENT><INDENT>reporter.reportOn(import.source, FirErrors.PACKAGE_CANNOT_BE_IMPORTED, context)<EOL><INDENT><INDENT>}"}
{"signature": "val resolvedWidget =", "body": "resource.resolve(module)<EOL>"}
{"signature": "fun J(s: String) {", "body": "}"}
{"signature": "val IS_PREFIX =", "body": "<STR_LIT><EOL>"}
{"signature": "import DefaultHttpClient.", "body": "client<EOL>"}
{"signature": "val calendar =", "body": "Calendar.getInstance()<EOL>"}
{"signature": "val existedTarget =", "body": "state.byTarget[key]<EOL>"}
{"signature": "if (!Flags.HAS_ANNOTATIONS.get(proto.flags)) {", "body": "<EOL><INDENT><INDENT><INDENT>return Annotations.EMPTY<EOL><INDENT><INDENT>}"}
{"signature": "if (!BindingContextUtils.isExpressionWithValidReference(expression, bindingContext)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "when (val owner = containingDeclaration) {", "body": "<EOL><INDENT><INDENT>is PackageFragmentDescriptor -> ClassId(owner.fqName, name)<EOL><INDENT><INDENT>is ClassifierDescriptorWithTypeParameters -> owner.classId?.createNestedClassId(name)<EOL><INDENT><INDENT>else -> null<EOL><INDENT>}"}
{"signature": "val functionNClass =", "body": "context.ir.symbols.getJvmFunctionClass(arity + <NUM_LIT>)<EOL>"}
{"signature": "val boxedPrimitive =", "body": "expression.classType.makeNullable()<EOL>"}
{"signature": "val _a =", "body": "<!INVISIBLE_MEMBER!>a<!><EOL>"}
{"signature": "val timeSource =", "body": "LongTimeSource(unit).apply { reading = baseReading }<EOL>"}
{"signature": "fun set(x: Int, y: Int, color: ColorLike) {", "body": "<EOL><INDENT><INDENT>rawData[(y * width + x) * <NUM_LIT> + <NUM_LIT>] = color.red;<EOL><INDENT><INDENT>rawData[(y * width + x) * <NUM_LIT> + <NUM_LIT>] = color.green;<EOL><INDENT><INDENT>rawData[(y * width + x) * <NUM_LIT> + <NUM_LIT>] = color.blue;<EOL><INDENT>}"}
{"signature": "for (i in p) {", "body": "<EOL><INDENT><INDENT>result += i<EOL><INDENT>}"}
{"signature": "val privateX<NUM_LIT>Ref =", "body": "Z<NUM_LIT>::privateX<NUM_LIT><EOL>"}
{"signature": "val dp_l =", "body": "doubleArrayOf(<NUM_LIT>, <NUM_LIT>e<NUM_LIT>) <EOL>"}
{"signature": "when (enum) {", "body": "}"}
{"signature": "val serialNameAnnotationFqName =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "val irThenBranch =", "body": "ktLastIf.then?.genExpr() ?: generateEmptyBlockForMissingBranch(ktLastIf)<EOL>"}
{"signature": "if (klass.isExternal) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>WasmExternRef<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val scopeStart =", "body": "functionScope.startLocation?.toCodePosition() ?: error(<STR_LIT>)<EOL>"}
{"signature": "val objCCodeGenerator =", "body": "ObjCExportCodeGenerator(codegen, namer, mapper)<EOL>"}
{"signature": "when (rootClass) {", "body": "<EOL><INDENT><INDENT>Collection::class -> <NUM_LIT><EOL><INDENT><INDENT>else -> <NUM_LIT><EOL><INDENT>}"}
{"signature": "val memberSymbol =", "body": "containingClassSymbol.declarationSymbols.find { it.findPsi() == member } as? FirCallableSymbol<*><EOL>"}
{"signature": "for (@Foo (i: () -> Unit) in y) {", "body": "}"}
{"signature": "val commonAnalysis =", "body": "<EOL><INDENT><INDENT><INDENT>buildResolveAndCheckFirFromKtFiles(commonSession, commonKtFiles, reporter)<EOL>"}
{"signature": "val localPropertiesFile =", "body": "localPropertiesFile.toFile()<EOL>"}
{"signature": "when (classFile) {", "body": "<EOL><INDENT><INDENT><INDENT>is KotlinClassMetadata.Class -> renderClass(classFile.kmClass, this)<EOL><INDENT><INDENT><INDENT>is KotlinClassMetadata.FileFacade -> renderPackage(classFile.kmPackage, this)<EOL><INDENT><INDENT><INDENT>is KotlinClassMetadata.SyntheticClass -> renderSyntheticClass(classFile, this)<EOL><INDENT><INDENT><INDENT>is KotlinClassMetadata.MultiFileClassFacade -> renderMultiFileClassFacade(classFile, this)<EOL><INDENT><INDENT><INDENT>is KotlinClassMetadata.MultiFileClassPart -> renderMultiFileClassPart(classFile, this)<EOL><INDENT><INDENT><INDENT>is KotlinClassMetadata.Unknown -> appendLine(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "when (val value = argument.value) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is Enum<*> -> value.javaClass<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>is Class<*> -> value<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>else -> null<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val iosArm<NUM_LIT>Main =", "body": "kotlin.sourceSets.getByName(<STR_LIT>)<EOL>"}
{"signature": "val pluginData =", "body": "taskProvider.kotlinPluginData?.orNull<EOL>"}
{"signature": "val hashMap =", "body": "HashMap<String, String>()<EOL>"}
{"signature": "for (index in rawChunks.indices) {", "body": "<EOL><INDENT><INDENT><INDENT>val rawChunk = rawChunks[index]<EOL><INDENT><INDENT><INDENT>if (rawChunk != <NUM_LIT>L)<EOL><INDENT><INDENT><INDENT><INDENT>unsafe.freeMemory(rawChunk)<EOL><INDENT><INDENT><INDENT>rawChunks[index] = <NUM_LIT>L<EOL><INDENT><INDENT>}"}
{"signature": "val tFoo =", "body": "t.foo()<EOL>"}
{"signature": "val containingClasses =", "body": "symbol.owner.parentsWithSelf.filterIsInstance<IrClass>()<EOL>"}
{"signature": "var qualifier =", "body": "this<EOL>"}
{"signature": "if (isLegallyAbstract && setter.body != null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(setter.source, FirErrors.ABSTRACT_PROPERTY_WITH_SETTER, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val zippedArgs =", "body": "expectPartTypeArguments.zipIfSizesAreEqual(actualPartTypeArguments).orEmpty()<EOL>"}
{"signature": "fun visitNamedReference(namedReference: FirNamedReference, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitNamedReference(namedReference)<EOL><INDENT>}"}
{"signature": "if (separated.size > <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>unresolvedQualifiedNames += qualifier<EOL><INDENT><INDENT><INDENT><INDENT>unresolvedSimpleNames += separated.first()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun other() {", "body": "<EOL><EOL>}"}
{"signature": "else if (expression.isSuspend) {", "body": "<EOL><INDENT><INDENT><INDENT>handleSuspend(expression, expression)<EOL><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT>}"}
{"signature": "for (annotation in info.annotations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>genAnnotation(annotation, info.path, true)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val syntheticRememberParams =", "body": "<NUM_LIT> +"}
{"signature": "var distance =", "body": "<NUM_LIT><EOL>"}
{"signature": "val newIrFile =", "body": "deepCopySavingMetadata(symbolRemapper = symbolRemapper)<EOL>"}
{"signature": "fun mergeAll(other: ReifiedTypeParametersUsages) {", "body": "<EOL><INDENT><INDENT>if (!other.wereUsedReifiedParameters()) return<EOL><INDENT><INDENT>usedTypeParameters.addAll(other.usedTypeParameters)<EOL><INDENT>}"}
{"signature": "if (samClassSymbol.isFun && samClassSymbol.isJavaOrEnhancement) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(reference.source, FirJvmErrors.JAVA_SAM_INTERFACE_CONSTRUCTOR_REFERENCE, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val withProtectedInvoke =", "body": "WithProtectedInvoke()<EOL>"}
{"signature": "val refinedName =", "body": "refineNameForRemOperator(isBinaryRemOperator, name)<EOL>"}
{"signature": "val vSymbol =", "body": "IrValueParameterSymbolImpl(vDescriptor)<EOL>"}
{"signature": "val containingClassStub =", "body": "parentStub.parentStub as? KotlinClassifierStub<EOL>"}
{"signature": "val originalSource =", "body": "originalDescriptor?.source ?: return null<EOL>"}
{"signature": "val bridge =", "body": "getPropertyMethodBridge()<EOL>"}
{"signature": "if (exitCode == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>ExitCode.OK<EOL><INDENT><INDENT>}"}
{"signature": "val lambdaReturnType =", "body": "lambda.returnType.let(substitute)<EOL>"}
{"signature": "for (c in StringBuilder(<STR_LIT>)) {", "body": "<EOL><INDENT><INDENT>s += c<EOL><INDENT>}"}
{"signature": "val compilerPluginOptions =", "body": "CompilerPluginOptions()<EOL>"}
{"signature": "fun main(a : WithInner, b : WithInner.Inner) {", "body": "<EOL>}"}
{"signature": "for (i in (MaxUB - <NUM_LIT>u).toUByte()..MaxUB step <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "for (i in A..B step C step D) {", "body": ""}
{"signature": "fun onNonAccessible() {", "body": "<EOL><INDENT><INDENT>this::x.<!LATEINIT_INTRINSIC_CALL_ON_NON_ACCESSIBLE_PROPERTY!>isInitialized<!><EOL><INDENT>}"}
{"signature": "val nonCompiledSources =", "body": "newSources.associateBy { it.toIoFileOrNull()!! }<EOL>"}
{"signature": "import <invalid>\"<EOL>.", "body": ""}
{"signature": "else if (context.configuration.generateBodies) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>bodyGenerator.generateExpressionBody(defaultValue)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "if (parallel) {", "body": "<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>arguments.add(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "val serialDescriptorSymbol =", "body": "compilerContext.getClassFromRuntime(SerialEntityNames.SERIAL_DESCRIPTOR_CLASS)<EOL>"}
{"signature": "if (treeElement.isDirectory) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>classFileNameWithoutExtension.startsWith(path)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "for (declaration in klass.declarations) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>processConstructedClassDeclaration(declaration)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun foo(b: B.C) {", "body": "<EOL><INDENT>  }"}
{"signature": "val byCompilation =", "body": "mutableMapOf<String, MutableSet<NpmDependencyDeclaration>>()<EOL>"}
{"signature": "for (restItem in rest) {", "body": "result = result x restItem }"}
{"signature": "val classBound =", "body": "Kotlin::class.java.methods.single { it.name == <STR_LIT> }<EOL>"}
{"signature": "fun doesNotCollectCyclicGarbageWithAtomicsFrozen() {", "body": "<EOL><INDENT>if (!Platform.isFreezingEnabled) return<EOL><INDENT>val (ref<NUM_LIT>Owner, ref<NUM_LIT>Weak, ref<NUM_LIT>Weak) = createCyclicGarbageWithAtomicsFrozen()<EOL><EOL><INDENT>ref<NUM_LIT>Owner.value = null<EOL><INDENT>GC.collect()<EOL><EOL><INDENT><INDENT>assertNotNull(ref<NUM_LIT>Weak.value)<EOL><INDENT>assertNotNull(ref<NUM_LIT>Weak.value)<EOL>}"}
{"signature": "val fpz =", "body": "F::class.constructors.single().call(+<NUM_LIT>f)<EOL>"}
{"signature": "val tasks =", "body": "mutableListOf<String>()<EOL>"}
{"signature": "val suspensionPointKind =", "body": "expression.getSuspensionPointKind()<EOL>"}
{"signature": "fun foo(mr: MyRecord) {", "body": "<EOL><INDENT>MyRecord(<STR_LIT>, <NUM_LIT>)<EOL><INDENT>MyRecord(<NUM_LIT>L, <STR_LIT>)<EOL>}"}
{"signature": "for (el in elements) {", "body": "<EOL><INDENT><INDENT><INDENT>res += el.dump(<STR_LIT>, elemStartAddr)<EOL><INDENT><INDENT><INDENT>elemStartAddr += el.sizeInBytes<EOL><INDENT><INDENT>}"}
{"signature": "val providedJdks =", "body": "jdkAnnotation<EOL>"}
{"signature": "val byteBufferCapacity =", "body": "byteBuffer.size - byteBufferEndIndex<EOL>"}
{"signature": "fun test_<NUM_LIT>(x: Inv<NUM_LIT><in Number, out Number>, list: List<Inv<NUM_LIT><Any, Int>>) {", "body": "<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>foo<!>(x)<EOL>}"}
{"signature": "val propertyFromSupertype =", "body": "fir<EOL>"}
{"signature": "if (node != null) {", "body": "<EOL><INDENT><INDENT><INDENT>node.mergeIncomingFlow()<EOL><INDENT><INDENT>}"}
{"signature": "val resolveFunctions =", "body": "getResolveFunctions()<EOL>"}
{"signature": "if (generationState.llvmModuleSpecification.importsKotlinDeclarationsFromOtherSharedLibraries()) {", "body": "<EOL><INDENT><INDENT><INDENT>codegen.replaceExternalWeakOrCommonGlobalFromNativeRuntime(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><STR_LIT>,<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>llvm.constInt<NUM_LIT>(true)<EOL><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT>}"}
{"signature": "val KONAN_WORD =", "body": "<STR_LIT><EOL>"}
{"signature": "if (!isEnhancedExpectedTypeSubtypeOfExpressionType && isExpectedTypeSubtypeOfExpressionType) {", "body": "<EOL><INDENT><INDENT><INDENT>reportWarning(expectedType.unwrapEnhancementDeeply(), expressionType.unwrapEnhancementDeeply())<EOL><INDENT><INDENT>}"}
{"signature": "val javaClassId =", "body": "currentClass.classId<EOL>"}
{"signature": "val ALLOWED_CLASS_KINDS =", "body": "listOf(ClassKind.CLASS, ClassKind.OBJECT, ClassKind.ENUM_CLASS)<EOL>"}
{"signature": "val packagePath =", "body": "<EOL><INDENT><INDENT><INDENT>if (packageName.startsWith(<STR_LIT>))<EOL>"}
{"signature": "fun writeLines(lines: Iterable<String>) {", "body": "<EOL><INDENT><INDENT>Files.write(javaPath, lines)<EOL><INDENT>}"}
{"signature": "val booleanArray =", "body": "builtIns.getPrimitiveArrayClassDescriptor(PrimitiveType.BOOLEAN).toIrSymbol()<EOL>"}
{"signature": "val singleReceiver =", "body": "(dispatchReceiver != null) xor (extensionReceiver != null)<EOL>"}
{"signature": "if (c == '*' || c == '?') {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>result.append(pattern.substringEscaped(prevIndex until index))<EOL><INDENT><INDENT><INDENT><INDENT>prevIndex = index + <NUM_LIT><EOL><INDENT><INDENT><INDENT><INDENT>result.append(if (c == '*') <STR_LIT> else <STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (comp[to] == <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>dfs<NUM_LIT>(to, cl)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val dirtySet =", "body": "SmartSet.create(a.temporaryVals())<EOL>"}
{"signature": "var bufferReadPos =", "body": "<NUM_LIT><EOL>"}
{"signature": "fun test<NUM_LIT>(value: FooBar) {", "body": "<EOL><INDENT>value <!USELESS_CAST!>as Foo<*><!><EOL><INDENT>value <!USELESS_CAST!>as? Foo<*><!><EOL><INDENT>value <!USELESS_CAST!>as Foo<*>?<!><EOL><INDENT>value <!USELESS_CAST!>as? Foo<*>?<!><EOL>}"}
{"signature": "val whenStatement =", "body": "JsIrBuilder.buildWhen(aTry.type, branches)<EOL>"}
{"signature": "val jsFile =", "body": "SimpleOutputFile(sourceFiles, outputFile.name, prefix + code + postfix)<EOL>"}
{"signature": "fun jump(label: Label, element: KtElement) {", "body": "<EOL><INDENT><INDENT><INDENT>handleJumpInsideTryFinally(label)<EOL><INDENT><INDENT><INDENT>add(UnconditionalJumpInstruction(element, label, currentScope))<EOL><INDENT><INDENT>}"}
{"signature": "val someObject =", "body": "SomeClass()<EOL>"}
{"signature": "val fieldNames =", "body": "mutableSetOf<Name>()<EOL>"}
{"signature": "fun test_<NUM_LIT>(list: List<Inv<Number>>, x: Inv<Number>, y: Inv<Int>, z: Inv<Any>) {", "body": "<EOL><INDENT>list.contains<NUM_LIT>(x)<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(y)<EOL><INDENT>list.<!TYPE_INFERENCE_ONLY_INPUT_TYPES_ERROR!>contains<NUM_LIT><!>(z)<EOL>}"}
{"signature": "if (!exp) {", "body": "<EOL><INDENT><INDENT>Assert.fail(msg())<EOL><INDENT>}"}
{"signature": "var refinedCandidates =", "body": "candidates<EOL>"}
{"signature": "if (expanded === type) {", "body": "<EOL><INDENT><INDENT><INDENT>return typeProto<EOL><INDENT><INDENT>}"}
{"signature": "package base<EOL>.", "body": ""}
{"signature": "if (occurrences < quantifier.min) {", "body": "<EOL><INDENT><INDENT><INDENT>return <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "if (restArguments == null && typeArgumentsCanBeSpecifiedCount > result.size) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>c.trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>OUTER_CLASS_ARGUMENTS_REQUIRED.on(qualifierParts.first().expression, nextParameterOwner)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>return null<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val typeClass =", "body": "typeConstructorDeclaration<EOL>"}
{"signature": "import getOrCreate<EOL>.", "body": ""}
{"signature": "val plainInvocation =", "body": "makePlainInvocation(moduleId, factoryName.makeRef(), importedModules, program)<EOL>"}
{"signature": "val excludeForAllTestData =", "body": "folderToExcludePatternMap?.get(ALL)<EOL>"}
{"signature": "val defaultAccessorSource =", "body": "propertySource.fakeElement(KtFakeSourceElementKind.DefaultAccessor)<EOL>"}
{"signature": "fun main(x: test<NUM_LIT>Test, y: test<NUM_LIT>Test) {", "body": "<EOL><INDENT>x.foo(<!NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS!>null<!>)<EOL><INDENT>y.foo(null)<EOL>}"}
{"signature": "val IS_MARKED_NULLABLE =", "body": "<NUM_LIT> shl <NUM_LIT><EOL>"}
{"signature": "fun registerTargetDependencies(outputTarget: OutputCommonizerTarget) {", "body": "<EOL><INDENT><INDENT>targetDependencies[outputTarget] = selectInputTargets(outputTargets + deserializers.targets, outputTarget)<EOL><INDENT>}"}
{"signature": "val stableTypeMatchers =", "body": "mutableSetOf<FqNameMatcher>()<EOL>"}
{"signature": "val entriesSymbol =", "body": "getStaticMemberScope().getCallableSymbols(Name.identifier(<STR_LIT>)).firstOrNull()<EOL>"}
{"signature": "if (replFactories.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>throw java.lang.IllegalStateException(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val nextExitLevel =", "body": "levelOfNextExceptionCatchingGraph()<EOL>"}
{"signature": "val defaultParams =", "body": "mutableListOf<JsParameter>()<EOL>"}
{"signature": "if (firProperty.isAbstract) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>val source =<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>if (firProperty.getContainingClassSymbol(context.session) != classSymbol)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>declaration.source<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>else<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>firProperty.source<EOL><EOL><INDENT><INDENT><INDENT><INDENT><INDENT>reporter.reportOn(source, FUN_INTERFACE_CANNOT_HAVE_ABSTRACT_PROPERTIES, context)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val geoMean =", "body": "geometricMean(benchTable.toList().map { (_, value) -> value.score })<EOL>"}
{"signature": "fun bar(doIt: Int.() -> Int) {", "body": "<EOL><INDENT><NUM_LIT>doIt()<EOL><INDENT><NUM_LIT><!UNNECESSARY_SAFE_CALL!>?.<!>doIt()<EOL><INDENT>val i: Int? = <NUM_LIT><EOL><INDENT>i<!UNSAFE_CALL!>.<!>doIt()<EOL><INDENT>i?.doIt()<EOL>}"}
{"signature": "val ROOT =", "body": "PathPartInfo(<STR_LIT>)<EOL>"}
{"signature": "val pastMark =", "body": "baseMark - longDuration<EOL>"}
{"signature": "if (x != null && x.isString()) {", "body": "<EOL><INDENT><INDENT>x.length<EOL><INDENT>}"}
{"signature": "fun testNoStdLib() {", "body": "<EOL><INDENT><INDENT>runProcess(<STR_LIT>, <STR_LIT>, <STR_LIT>, expectedStdout = <STR_LIT>)<EOL><INDENT><INDENT>runProcess(<EOL><INDENT><INDENT><INDENT><STR_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>,<EOL><INDENT><INDENT><INDENT>expectedExitCode = <NUM_LIT>,<EOL><INDENT><INDENT><INDENT>expectedStderr = <STR_LIT>\"script.kts:<NUM_LIT>:<NUM_LIT>: error: unresolved reference 'println'.<EOL>println(<NUM_LIT>)<EOL>^<EOL><STR_LIT>\"<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "val topLevelProp =", "body": "<NUM_LIT><EOL>"}
{"signature": "for (packageName in packages) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>collectAllSubPackages(packageName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val buildGradleKtsWithoutDependency =", "body": "appBuildGradleKts.readText()<EOL>"}
{"signature": "val serialClassDescRef =", "body": "JsNameRef(context.getNameForDescriptor(anySerialDescProperty!!), JsThisRef())<EOL>"}
{"signature": "fun visitDynamicMemberExpression(expression: IrDynamicMemberExpression, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitDynamicMemberExpression(expression)<EOL><INDENT>}"}
{"signature": "if (arguments.isEmpty()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>irBuilder.irConstantObject(clazz, emptyMap(), typeArguments)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val allSources =", "body": "mutableSetOf<URI>()<EOL>"}
{"signature": "val rootElement =", "body": "document.rootElement<EOL>"}
{"signature": "val compilationAttribute =", "body": "Attribute.of(<STR_LIT>, String::class.java)<EOL>"}
{"signature": "package redeclarations.", "body": "A<EOL>"}
{"signature": "if ((iteratorCall == null || matchIteratorCall(iteratorCall)) && matchIterable(expression)) {", "body": "<EOL><INDENT><INDENT><INDENT>build(expression, data, scopeOwner)<EOL><INDENT><INDENT>}"}
{"signature": "if (declaration is FirCallableDeclaration) {", "body": "<EOL><INDENT><INDENT><INDENT>checkTypeRef(declaration.returnTypeRef, context, reporter)<EOL><INDENT><INDENT>}"}
{"signature": "fun testSimpleAbstractDeclarationDifferentSignature() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a)<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT>}"}
{"signature": "fun constructors() {", "body": "<EOL><INDENT><INDENT>val orderedData = data.toList()<EOL><INDENT><INDENT>val set = linkedStringSetOf(*orderedData.toTypedArray())<EOL><EOL><INDENT><INDENT>assertEquals(orderedData, set.toList())<EOL><INDENT>}"}
{"signature": "val option =", "body": "configuration.get(TestPluginKeys.TestOption)!!<EOL>"}
{"signature": "val declare =", "body": "<STR_LIT><EOL>"}
{"signature": "import android.", "body": "os.Parcelable<EOL>"}
{"signature": "val MULTIPLATFORM_PROJECT_METADATA_JSON_FILE_NAME =", "body": "<STR_LIT><EOL>"}
{"signature": "val firstRendered =", "body": "checkIfPrinted { p<NUM_LIT>() }<EOL>"}
{"signature": "val LOMBOK_COMPILER_PLUGIN_ID =", "body": "<STR_LIT><EOL>"}
{"signature": "val aggregatingResource =", "body": "<STR_LIT><EOL>"}
{"signature": "if (doubleColonExpression.hasQuestionMarks) {", "body": "<EOL><INDENT><INDENT><INDENT>return resolveExpressionOnLHS(expression, c)<EOL><INDENT><INDENT>}"}
{"signature": "package fragment for $fqName from $module\"<EOL>.", "body": ""}
{"signature": "fun enterTypeParameterScope(typeParametersContainer: IrTypeParametersContainer) {", "body": "<EOL><INDENT><INDENT>typeParameterScopes.addFirst(<EOL><INDENT><INDENT><INDENT>typeParametersContainer<EOL><INDENT><INDENT>)<EOL><INDENT>}"}
{"signature": "fun generateDeclaration() {", "body": "<EOL><INDENT><INDENT><INDENT>throw IllegalStateException()<EOL><INDENT><INDENT>}"}
{"signature": "fun bar<NUM_LIT>(x : A<*>) {", "body": "}"}
{"signature": "val nativeManifest =", "body": "getManifest(<STR_LIT>)<EOL>"}
{"signature": "for(i in <NUM_LIT>.old.getExtensionCount(KlibMetadataProtoBuf.propertyGetterAnnotation) - <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>if (!checkEquals(old.getExtension(KlibMetadataProtoBuf.propertyGetterAnnotation, i), new.getExtension(KlibMetadataProtoBuf.propertyGetterAnnotation, i))) return false<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val flavors =", "body": "listOf(<STR_LIT>, <STR_LIT>)<EOL>"}
{"signature": "val signatureToIndexMapping =", "body": "hashMapOf<IdSignature, Int>()<EOL>"}
{"signature": "if (!isIgnored) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>println(classFileFactory.createText())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (!webCheckerUtils.isNativeOrExternalInterface(declarationToCheck, context.session)) {", "body": "<EOL><INDENT><INDENT><INDENT>return<EOL><INDENT><INDENT>}"}
{"signature": "val fields<NUM_LIT> =", "body": "class<NUM_LIT>loadFields()<EOL>"}
{"signature": "val jvmStatic =", "body": "<STR_LIT>.jvmId()<EOL>"}
{"signature": "val generateId =", "body": "(<NUM_LIT> .. Int.MAX_VALUE).iterator()::next<EOL>"}
{"signature": "if (AsmUtil.isPrimitive(context.defaultTypeMapper.mapType(p.type)) && ourSignature.argumentTypes[i].sort == Type.OBJECT) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>p.type = p.type.makeNullable()<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val pi_lo =", "body": "<NUM_LIT>E<NUM_LIT> <EOL>"}
{"signature": "if (!(<!USELESS_IS_CHECK!>a is B<!>)) {", "body": "<EOL><INDENT>return;<EOL>  }"}
{"signature": "else if (capturedRef !== r) {", "body": "<EOL><INDENT><INDENT>return false<EOL><INDENT>}"}
{"signature": "fun setAnalyzedResults(<EOL><INDENT><INDENT>candidate: CallableReferenceResolutionCandidate?,<EOL><INDENT><INDENT>subResolvedAtoms: List<ResolvedAtom><EOL><INDENT>) {", "body": "<EOL><INDENT><INDENT>this.candidate = candidate<EOL><INDENT><INDENT>setAnalyzedResults(subResolvedAtoms)<EOL><INDENT>}"}
{"signature": "val unused<NUM_LIT> =", "body": "create(<STR_LIT>)<EOL>"}
{"signature": "var isCompatible =", "body": "true<EOL>"}
{"signature": "val toJvmType =", "body": "context.defaultTypeMapper.mapType(toType)<EOL>"}
{"signature": "var currentPhase =", "body": "getMinResolvePhase(target).coerceAtLeast(FirResolvePhase.IMPORTS)<EOL>"}
{"signature": "if (superFunctionParentSymbol == null || irField.type.isSubtypeOfClass(superFunctionParentSymbol)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>getField<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (e is OutOfMemoryError || e.hasOOMCause()) {", "body": "<EOL><INDENT><INDENT>throw OOMErrorException(executionStrategy)<EOL><INDENT>}"}
{"signature": "fun outOfArrayOutOpen(x: Out<Array<out Open>>) {", "body": "}<EOL><EOL>fun deepOpen(x: Out<Out<Out<Open>>>) {}"}
{"signature": "val suppressNames =", "body": "Name.identifier(<STR_LIT>)<EOL>"}
{"signature": "fun minusIsEager() {", "body": "<EOL><INDENT><INDENT>val source = listOf(<STR_LIT>, <STR_LIT>)<EOL><INDENT><INDENT>val list = arrayListOf<String>()<EOL><INDENT><INDENT>val result = source - list<EOL><EOL><INDENT><INDENT>list += <STR_LIT><EOL><INDENT><INDENT>assertEquals(source, result)<EOL><INDENT><INDENT>list += <STR_LIT><EOL><INDENT><INDENT>assertEquals(source, result)<EOL><INDENT>}"}
{"signature": "val cHeaderFile =", "body": "output.cHeaderBridges.toFile()<EOL>"}
{"signature": "val checkedEnumEntry =", "body": "symbol.fir as? FirEnumEntry ?: return<EOL>"}
{"signature": "val leftList =", "body": "selector(left)<EOL>"}
{"signature": "val rangeCheck =", "body": "getInternalFunction(<STR_LIT>)<EOL>"}
{"signature": "val singleArg =", "body": "args.singleOrNull()<EOL>"}
{"signature": "val additionalReverseAdapters =", "body": "mutableListOf<ObjCExportCodeGenerator.KotlinToObjCMethodAdapter>()<EOL>"}
{"signature": "if (x<NUM_LIT>_<NUM_LIT> is ClassInt && y<NUM_LIT> is ClassString) {", "body": "<EOL><INDENT><INDENT>assertTrue(x<NUM_LIT>_<NUM_LIT> == x<NUM_LIT>_<NUM_LIT>)<EOL><EOL><INDENT><INDENT>assertFalse(x<NUM_LIT>_<NUM_LIT> == y<NUM_LIT>)<EOL><INDENT><INDENT>assertFalse(x<NUM_LIT>_<NUM_LIT> == y<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "val argumentsMapping =", "body": "runIf(!calleeReference.isError) { subCandidate.createArgumentsMapping() }<EOL>"}
{"signature": "val repository =", "body": "KonanDistributionRepository(distribution, outputTargets.konanTargets, libraryLoader)<EOL>"}
{"signature": "val propertyInfo =", "body": "clang_index_getObjCPropertyDeclInfo(info.ptr)!!.pointed<EOL>"}
{"signature": "if (type.isError || !type.requiresTypeAliasExpansion()) {", "body": "<EOL><INDENT><INDENT><INDENT>return originalProjection<EOL><INDENT><INDENT>}"}
{"signature": "fun foo<NUM_LIT>(b: Queue<String>) {", "body": "}"}
{"signature": "val patternApt =", "body": "<STR_LIT><EOL>"}
{"signature": "fun Button(colors: ButtonColors) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>Text(<STR_LIT>, color = colors.getColor())<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (data !is FirProperty || data.isCatchParameter != true) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>expressionStubs++<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>println(expression.psi?.text)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val JAVA_LANG_PACKAGE =", "body": "FqName(<STR_LIT>)<EOL>"}
{"signature": "else if (accessor.isGetter) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val getterName = JvmAbi.getterName(propertyName)<EOL><INDENT><INDENT><INDENT><INDENT>wrapperName == getterName ||<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>isMangled(wrapperName, getterName)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (intDTO != null) {", "body": "<EOL><INDENT><INDENT>intDTO[DTO::q]<EOL><INDENT><INDENT>intDTO.q<EOL><INDENT>}"}
{"signature": "if (isBuiltInClass(d) || isIntrinsic(d)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>context.bodilessBuiltInsPackageFragment.addChild(d)<EOL><EOL><INDENT><INDENT><INDENT><INDENT>return emptyList()<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "while (a in b) {", "body": "<EOL><INDENT>  b<EOL><INDENT>}"}
{"signature": "val typeVariableLowerBound =", "body": "typeVariable.lowerBoundIfFlexible()<EOL>"}
{"signature": "fun inlineMe<NUM_LIT>(noinline c: suspend () -> Unit) {", "body": "<EOL><INDENT>c()<EOL><INDENT>c()<EOL>}"}
{"signature": "fun visitFunctionCall(functionCall: FirFunctionCall, data: CheckerContext) {", "body": "<EOL><INDENT><INDENT>checkers.allFunctionCallCheckers.check(functionCall, data)<EOL><INDENT>}"}
{"signature": "if (reinstallFlag && canBeReinstalled) {", "body": "<EOL><INDENT><INDENT><INDENT>bundleDir.deleteRecursively()<EOL><INDENT><INDENT><INDENT>canBeReinstalled = false<INDENT><INDENT> }"}
{"signature": "val functionBridgeBodies =", "body": "bridgeBuilderResult.functionBridgeBodies<EOL>"}
{"signature": "if (builder.lastOrNull() != char) {", "body": "<EOL><INDENT><INDENT><INDENT>append(char)<EOL><INDENT><INDENT>}"}
{"signature": "if (container is ObjCClass) {", "body": "<EOL><INDENT><INDENT><INDENT>container.includedCategoriesProperties(isMeta)<EOL><INDENT><INDENT>}"}
{"signature": "if (anyParameters) {", "body": "<EOL><INDENT><INDENT><INDENT>writer.writeAnyParameters()<EOL><INDENT><INDENT>}"}
{"signature": "val diagnosticsInDirective =", "body": "module.directives[DiagnosticsDirectives.DIAGNOSTICS]<EOL>"}
{"signature": "if (candidate.symbol is FirSimpleSyntheticPropertySymbol) {", "body": "<EOL><INDENT><INDENT><INDENT>sink.reportDiagnostic(ResolvedWithSynthetic)<EOL><INDENT><INDENT>}"}
{"signature": "if (x?.inv() == null) else if (true) {", "body": "}"}
{"signature": "val javaRuntimeUsages =", "body": "setOf(<STR_LIT>, JAVA_RUNTIME)<EOL>"}
{"signature": "if (contains('<') && (endsWith('>') || endsWith(<STR_LIT>))) {", "body": "<EOL><INDENT><INDENT><INDENT>val name = substringBefore('<') + if (endsWith(<STR_LIT>)) <STR_LIT> else <STR_LIT><EOL><INDENT><INDENT><INDENT>val params = substringAfter('<').substringBeforeLast('>')<EOL><INDENT><INDENT><INDENT>TypeRef(name, parseArguments(params))<EOL><INDENT><INDENT>}"}
{"signature": "val orig =", "body": "prop.resolveFakeOverride()<EOL>"}
{"signature": "var isCompanion =", "body": "false<EOL>"}
{"signature": "val kotlinReportedProcessResourceTaskNames =", "body": "hashSetOf<String>()<EOL>"}
{"signature": "package pcg;<EOL>.", "body": ""}
{"signature": "if (strategy == null) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>project.reportDiagnostic(KotlinToolingDiagnostics.UnknownValueProvidedForResourcesStrategy(it))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var nonTransitiveCache =", "body": "mutableMapOf<String, MutableSet<URI>>()<EOL>"}
{"signature": "if (isString(x) != b) {", "body": "<EOL><INDENT><INDENT>x.<!UNRESOLVED_REFERENCE!>length<!><EOL><INDENT>}"}
{"signature": "if (!onceErrorsReported.contains(diagnosticFactory)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>onceErrorsReported.add(diagnosticFactory)<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(diagnosticFactory.on(klass, descriptor<NUM_LIT>, descriptor<NUM_LIT>))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "fun dropSubFrame() {", "body": "<EOL><INDENT><INDENT>currentFrame.removeSubFrame()<EOL><INDENT>}"}
{"signature": "if (argRes != <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>throw IllegalStateException(<STR_LIT>)<EOL><INDENT>}"}
{"signature": "val previousApplication =", "body": "ApplicationManager.getApplication()<EOL>"}
{"signature": "val isStrict =", "body": "hasAnnotation(STRICTFP_ANNOTATION_FQ_NAME) && origin != JvmLoweredDeclarationOrigin.JVM_OVERLOADS_WRAPPER<EOL>"}
{"signature": "val DAEMON_CONNECT_CYCLE_ATTEMPTS =", "body": "<NUM_LIT><EOL>"}
{"signature": "val anotherPropName =", "body": "<!CONST_VAL_WITH_NON_CONST_INITIALIZER!>SomeClassWithName::anotherProperty.name<!><EOL>"}
{"signature": "if (f.toFloat() != <NUM_LIT>.toFloat()) {", "body": "<EOL><INDENT><INDENT>return <STR_LIT><EOL><INDENT>}"}
{"signature": "if (isAtBufferEnd) {", "body": "<EOL><INDENT><INDENT><INDENT>isXmlIncomplete = true<EOL><INDENT><INDENT><INDENT>byteBuilder = ByteArrayOutputStream()<EOL><INDENT><INDENT><INDENT>curBytePos = <NUM_LIT><EOL><INDENT><INDENT><INDENT>isLastByteProcessed = true<EOL><INDENT><INDENT>}"}
{"signature": "val classCandidate =", "body": "declaration.containingClassOrObject?.let(::findNonLocalClassLikeDeclaration)<EOL>"}
{"signature": "val defaultSetupBuildTaskName =", "body": "podSetupBuildFullTaskName()<EOL>"}
{"signature": "if (node.flowInitialized) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>LEFT\\<STR_LIT>LEFT\\<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(node.renderFlowHtmlLike())<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>append(<STR_LIT>)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "var thisNode =", "body": "instructions.first<EOL>"}
{"signature": "fun testDiamondFakeOverrideAbstractAndConcrete() {", "body": "<EOL><INDENT><INDENT>val a = v(<STR_LIT>)<EOL><INDENT><INDENT>val b = v(<STR_LIT>)<EOL><INDENT><INDENT>val c = v(<STR_LIT>)<EOL><INDENT><INDENT>val d = v(<STR_LIT>)<EOL><INDENT><INDENT>graph(b to a, c to a, d to b, d to c)<EOL><INDENT><INDENT>doTest(b, setOf())<EOL><INDENT><INDENT>doTest(c, setOf(bridge(a, c)))<EOL><INDENT><INDENT>doTest(d, setOf(bridge(b, c)))<EOL><INDENT>}"}
{"signature": "val directlyExpanded =", "body": "type.directExpansionType(session)<EOL>"}
{"signature": "val oldReceiverTypeConstructor =", "body": "receiverType.constructor<EOL>"}
{"signature": "if (isInTestBuilderImpl) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>beenInTestBuilderImpl = true<EOL><INDENT><INDENT><INDENT><INDENT>true<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val originalPathPsi =", "body": "targetPathPsi.unwrapCopy(targetPsiFile) ?: return null<EOL>"}
{"signature": "val StabilityInferredClass =", "body": "getTopLevelClass(ComposeClassIds.StabilityInferred)<EOL>"}
{"signature": "val ARRAY =", "body": "Name.special(<STR_LIT>)<EOL>"}
{"signature": "for (j in <NUM_LIT>.productSize<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>product *= digits[i+j]<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "val lowercaseCodePoint =", "body": "codePoint.lowercaseCodePoint()<EOL>"}
{"signature": "val preprocessors =", "body": "setOf(IrInterpreterKCallableNamePreprocessor(), IrInterpreterConstGetterPreprocessor())<EOL>"}
{"signature": "val FIR_DUMP_EXTENSION =", "body": "<STR_LIT><EOL>"}
{"signature": "import demoPackage.", "body": "*<EOL>"}
{"signature": "val valueParameterNameDiff =", "body": "a.name.compareTo(b.name)<EOL>"}
{"signature": "if (parentClassId != null && !isKotlin<NUM_LIT>Dot<NUM_LIT>OrLater(extension.metadataVersion)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>parent.versionRequirementTable<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val classifierMap =", "body": "mutableMapOf<ClassId, FirClassLikeDeclaration>()<EOL>"}
{"signature": "val irScript =", "body": "declarationStorage.getCachedIrScript(firScript) ?: error(<STR_LIT>)<EOL>"}
{"signature": "val classAndMethod =", "body": "parseClassAndMethodSignature(filteredLines)<EOL>"}
{"signature": "val canonicalNameInterner =", "body": "createStringInterner()<EOL>"}
{"signature": "fun replaceFileWithVersion(fileName: String, version: String) {", "body": "<EOL><INDENT><INDENT>val file = module.sourcesDirectory.resolve(fileName)<EOL><INDENT><INDENT>val chosenRevision = module.sourcesDirectory.resolve(<STR_LIT>)<EOL><INDENT><INDENT>Files.delete(file)<EOL><INDENT><INDENT>Files.copy(chosenRevision, file)<EOL><INDENT><INDENT>addToModifiedFiles(file)<EOL><INDENT>}"}
{"signature": "for (i in (<NUM_LIT>u.toUByte()..<NUM_LIT>u.toUByte() step <NUM_LIT>).reversed()) {", "body": "<EOL><INDENT><INDENT>list<NUM_LIT>add(i)<EOL><INDENT><INDENT>if (list<NUM_LIT>size > <NUM_LIT>) break<EOL><INDENT>}"}
{"signature": "val isResolvedToProject =", "body": "moduleId in params.build<EOL>"}
{"signature": "val testFunBody =", "body": "JsBlock()<EOL>"}
{"signature": "val ktCallInfo =", "body": "ktCallExpression.resolveCall()<EOL>"}
{"signature": "val outputsA =", "body": "TransformOutputsMock(tmp.newFolder())<EOL>"}
{"signature": "if (builder is LeafBuilder<*, *, *> && builder.isOpen) {", "body": "<EOL><INDENT><INDENT><INDENT>print(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (otherNonDefault != null) {", "body": "<EOL><INDENT><INDENT><INDENT>return ErrorsJvm.REPEATABLE_CONTAINER_HAS_NON_DEFAULT_PARAMETER<EOL><INDENT><INDENT><INDENT><INDENT>.on(languageVersionSettings, reportOn, containerClass.fqNameSafe, otherNonDefault)<EOL><INDENT><INDENT>}"}
{"signature": "val fpInfConst =", "body": "<NUM_LIT>F / <NUM_LIT>F<EOL>"}
{"signature": "val TRY_CATCH_BLOCKS_SOFT_LIMIT =", "body": "<NUM_LIT><EOL>"}
{"signature": "val pkg =", "body": "SerializationJsDependenciesClassIds.jsExportIgnore.packageFqName<EOL>"}
{"signature": "package '$fqName' from file '$containingFile'\"<EOL>.", "body": ""}
{"signature": "var typeText =", "body": "<STR_LIT><EOL>"}
{"signature": "fun createB() {", "body": "<EOL><INDENT>B()<EOL>}"}
{"signature": "val nextInstruction =", "body": "getNextPosition(currentPosition)<EOL>"}
{"signature": "val nonPublicMarkers =", "body": "registeredDirectives[NON_PUBLIC_MARKERS]<EOL>"}
{"signature": "if (!metadataVersion.isAtLeast(<NUM_LIT>, <NUM_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>val constructor = unsubstitutedPrimaryConstructor ?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>val propertyName = constructor.valueParameters.first().name<EOL><INDENT><INDENT><INDENT>val propertyType = getValueClassPropertyType(propertyName) ?: error(<STR_LIT>)<EOL><INDENT><INDENT><INDENT>return InlineClassRepresentation(propertyName, propertyType)<EOL><INDENT><INDENT>}"}
{"signature": "val classpathMarker =", "body": "<STR_LIT><EOL>"}
{"signature": "val thisClassifierNumber =", "body": "this.classifierNumber<EOL>"}
{"signature": "fun sideEffect(msg: String) {", "body": "<EOL><INDENT>log += msg<EOL>}"}
{"signature": "package name ends and class names begin.", "body": "<EOL>"}
{"signature": "val argAfterVararg =", "body": "create(<NUM_LIT>, <STR_LIT>, <STR_LIT>, <STR_LIT>, o = <NUM_LIT>L)<EOL>"}
{"signature": "fun foo(x: (Int) -> String) {", "body": "}<EOL><EOL>fun main() {<EOL><INDENT>foo(JavaClass<*>::<!UNRESOLVED_REFERENCE!>baz<!>)<EOL>}"}
{"signature": "val absHashCode =", "body": "abs(forCalculateId.hashCode())<EOL>"}
{"signature": "val cinteropProjectName =", "body": "<STR_LIT><EOL>"}
{"signature": "fun test(l: List<String>) {", "body": "<EOL> *   l.get(<NUM_LIT>)  *<INDENT><INDENT><INDENT> * }"}
{"signature": "for ((index, type) in declaration.typeParameters.withIndex()) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>putTypeArgument(index, type.defaultType)<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "fun insertNativeBridge(nativeBacked: NativeBacked, kotlinLines: List<String>, nativeLines: List<String>) {", "body": "<EOL><INDENT><INDENT>val nativeBridge = NativeBridge(kotlinLines, nativeLines)<EOL><INDENT><INDENT>nativeBridges.add(nativeBacked to nativeBridge)<EOL><INDENT>}"}
{"signature": "for (i in <NUM_LIT> until array.size + <NUM_LIT>) {", "body": "<EOL><INDENT><INDENT><INDENT>array[i] = <NUM_LIT><EOL><INDENT><INDENT>}"}
{"signature": "val expectQualifier =", "body": "expectDelegatedTypeRef.qualifier<EOL>"}
{"signature": "val memoryOrder =", "body": "LLVMAtomicOrdering.LLVMAtomicOrderingMonotonic<EOL>"}
{"signature": "val nullableList =", "body": "getNullableList()<EOL>"}
{"signature": "val newAnnotations =", "body": "tree.annotations<EOL>"}
{"signature": "val convertedTypeByOriginal =", "body": "<EOL><INDENT><INDENT><INDENT>if (expectedParameterType.constructor == originalExpectedType.constructor)<EOL>"}
{"signature": "val legacy =", "body": "legacyDependencies ?: return null<EOL>"}
{"signature": "fun addLlvmFunctionAttribute(function: LLVMValueRef, attribute: LLVMAttributeRef) {", "body": "<EOL><INDENT>LLVMAddAttributeAtIndex(function, LLVMAttributeFunctionIndex, attribute)<EOL>}"}
{"signature": "val generateSourceMaps =", "body": "WasmEnvironmentConfigurationDirectives.GENERATE_SOURCE_MAP in testServices.moduleStructure.allDirectives<EOL>"}
{"signature": "val INT =", "body": "CompileTimeType<Int>()<EOL>"}
{"signature": "val secondTypeParameterConstructors =", "body": "secondParameters.map { it.symbol }<EOL>"}
{"signature": "val PI =", "body": "kotlin.math.PI.toFloat()<EOL>"}
{"signature": "fun updateGroup(index: Int, srtOffset: Int, endOffset: Int) {", "body": "<EOL><INDENT><INDENT>checkGroup(index)<EOL><INDENT><INDENT>groupBounds[index * <NUM_LIT>] = srtOffset<EOL><INDENT><INDENT>groupBounds[index * <NUM_LIT> + <NUM_LIT>] = endOffset<EOL><INDENT>}"}
{"signature": "val JS_STUB_VERSION =", "body": "BINARY_STUB_VERSION + <NUM_LIT><EOL>"}
{"signature": "val atoiPtr =", "body": "getAtoiPtr()!!<EOL>"}
{"signature": "for (i in logged(<STR_LIT>, <NUM_LIT>)..logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>) step logged(<STR_LIT>, <NUM_LIT>)) {", "body": "<EOL><INDENT><INDENT>sum = sum * <NUM_LIT> + i<EOL><INDENT>}"}
{"signature": "val lastInitializer =", "body": "initializeStatements.lastOrNull()<EOL>"}
{"signature": "val bodyTransformer =", "body": "CoroutineBodyTransformer(context)<EOL>"}
{"signature": "val xSafeCallCastExplicitType =", "body": "t<!UNNECESSARY_SAFE_CALL!>?.<!>findViewById<X>(<NUM_LIT>) as X<EOL>"}
{"signature": "if (destinationOffset == <NUM_LIT> && startIndex == <NUM_LIT> && endIndex == source.size) {", "body": "<EOL>"}
{"signature": "import llvm.", "body": "*<EOL>"}
{"signature": "fun clearBuildName() {", "body": "<EOL><INDENT>  _builder.clearBuildName()<EOL><INDENT>}"}
{"signature": "val enumRegistry =", "body": "LocatableDeclarationRegistry<EnumDefImpl>()<EOL>"}
{"signature": "val descriptorFactory =", "body": "FunctionDescriptorFactory.RealDescriptorFactory(descriptor, symbolTable)<EOL>"}
{"signature": "val stringArray<NUM_LIT> =", "body": "copyStringArray(*stringArray)<EOL>"}
{"signature": "val projectSettingsCopy =", "body": "projectSettings.copyOf()<EOL>"}
{"signature": "val hasDefaults =", "body": "(<NUM_LIT> until expression.valueArgumentsCount).any { expression.getValueArgument(it) == null }<EOL>"}
{"signature": "val minOutputDir =", "body": "File(dceOutputDir, originalFile.nameWithoutExtension)<EOL>"}
{"signature": "var testString =", "body": "<STR_LIT><EOL>"}
{"signature": "fun visitCallableReferenceAccess(callableReferenceAccess: FirCallableReferenceAccess, data: Nothing?) {", "body": "<EOL><INDENT><INDENT>visitCallableReferenceAccess(callableReferenceAccess)<EOL><INDENT>}"}
{"signature": "if (dependencyOnBuiltIns == ModuleInfo.DependencyOnBuiltIns.LAST) {", "body": "<EOL><INDENT><INDENT><INDENT>val builtInsModule = moduleDescriptor.builtIns.builtInsModule<EOL><INDENT><INDENT><INDENT>module.assertModuleDependencyIsCorrect(builtInsModule)<EOL><INDENT><INDENT><INDENT>moduleDescriptors.add(builtInsModule)<EOL><INDENT><INDENT>}"}
{"signature": "val buildLog =", "body": "File(buildLogFile.absolutePath).readText()<EOL>"}
{"signature": "for (n in <NUM_LIT> * UByte.SIZE_BITS..<NUM_LIT> * UByte.SIZE_BITS) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val rl = value.rotateLeft(n)<EOL><INDENT><INDENT><INDENT><INDENT>val rr = value.rotateRight(-n)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rl, rr)<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rl, value.rotateLeft(n % UByte.SIZE_BITS))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(rr, value.rotateRight((-n) % UByte.SIZE_BITS))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, value.rotateLeft(n).rotateLeft(-n))<EOL><INDENT><INDENT><INDENT><INDENT>assertEquals(value, value.rotateRight(n).rotateRight(-n))<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "for (typeAliasProto in typeAliasProtos) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>readTypeAlias(typeAliasProto, packageName, strings, types, consumer)<EOL><INDENT><INDENT><INDENT><INDENT>}"}
{"signature": "val jsFuns =", "body": "mutableListOf<JsCodeSnippet>()<EOL>"}
{"signature": "fun testSimpleUseNonExportedPackage() {", "body": "<EOL><INDENT><INDENT>val a = module(<STR_LIT>)<EOL><INDENT><INDENT>module(<STR_LIT>, listOf(a))<EOL><INDENT>}"}
{"signature": "fun test(a: <!DEPRECATION_ERROR!>A<!>) {", "body": "<EOL><INDENT>a.<!UNRESOLVED_REFERENCE!>v<NUM_LIT><!><EOL><INDENT>a.v<NUM_LIT><EOL><INDENT>a.<!UNRESOLVED_REFERENCE!>v<NUM_LIT><!><EOL>}"}
{"signature": "fun setBarB(value: Int) {", "body": "<EOL><INDENT><INDENT>super<B>.bar = value<EOL><INDENT>}"}
{"signature": "val klibFactory =", "body": "KlibMetadataFactories(::KonanBuiltIns, DynamicTypeDeserializer)<EOL>"}
{"signature": "val reversedFilesOrderRoot =", "body": "workingDir.resolve(<STR_LIT>)<EOL>"}
{"signature": "val isMeta =", "body": "if (dstClass.isObjCMetaClass()) kTrue else kFalse<EOL>"}
{"signature": "val notExportedParent =", "body": "NotExportedParent(<STR_LIT>)<EOL>"}
{"signature": "fun nullableNothingIdentity(a: Int, b: Nothing?) {", "body": "<EOL><INDENT><!SENSELESS_COMPARISON!>a === b<!><EOL>}"}
{"signature": "if (context.session.languageVersionSettings.supportsFeature(LanguageFeature.ProhibitNonExhaustiveWhenOnAlgebraicTypes)) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>reportNoElseInWhen(reporter, source, whenExpression, subjectClassSymbol, context)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "if (useJdk<NUM_LIT>) {", "body": "<EOL><INDENT><INDENT>configureModernJavaTest(TestJdkKind.FULL_JDK_<NUM_LIT>, JvmTarget.JVM_<NUM_LIT>)<EOL><INDENT>}"}
{"signature": "if (isAbstract() || isSealed()) {", "body": "<EOL><INDENT><INDENT><INDENT>psiModifiers.add(PsiModifier.ABSTRACT)<EOL><INDENT><INDENT>}"}
{"signature": "fun extensionFunExpr() {", "body": "<EOL><INDENT>val f = fun String.(): String = this<EOL><EOL><INDENT>val g = f.reflect()!!<EOL><EOL><INDENT>assertEquals(KParameter.Kind.EXTENSION_RECEIVER, g.parameters.single().kind)<EOL><INDENT>assertEquals(null, g.parameters.single().name)<EOL>}"}
{"signature": "val receiverIndexAndFieldInfo =", "body": "generateClosureFieldsInitializationFromParameters(closure, constructorArgs)<EOL>"}
{"signature": "val nonCachedAnnotations =", "body": "annotationsComputer(owner)<EOL>"}
{"signature": "if (sourceElement is KtClassOrObject) {", "body": "<EOL><INDENT><INDENT><INDENT><INDENT>val delegationSpecifierList = sourceElement.getSuperTypeList() ?: continue<EOL><INDENT><INDENT><INDENT><INDENT>trace.report(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>INCONSISTENT_TYPE_PARAMETER_VALUES.on(<EOL><INDENT><INDENT><INDENT><INDENT><INDENT><INDENT>delegationSpecifierList, typeParameterDescriptor, containingDeclaration, conflictingTypes<EOL><INDENT><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT><INDENT>)<EOL><INDENT><INDENT><INDENT>}"}
{"signature": "var wasStatic =", "body": "false<EOL>"}
{"signature": "var toReplace =", "body": "false<EOL>"}
{"signature": "val oldValueParameterSymbol =", "body": "oldPropertySymbol.setterSymbol?.valueParameterSymbols?.first()<EOL>"}
{"signature": "val NATIVE_DISTRIBUTION_PATH =", "body": "<STR_LIT>"}
{"signature": "else if (node.parent.right == node) {", "body": "<EOL><INDENT><INDENT>node.parent.right = replace<EOL><INDENT>  }"}
{"signature": "if (status.isLateInit) {", "body": "<EOL><INDENT><INDENT><INDENT>keyword(<STR_LIT>)<EOL><INDENT><INDENT>}"}
{"signature": "if (even(i)) {", "body": "<EOL><INDENT><INDENT><INDENT>c = sum(c, i)<EOL><INDENT><INDENT>}"}
{"signature": "val parser =", "body": "ArgParser(<STR_LIT>)<EOL>"}
